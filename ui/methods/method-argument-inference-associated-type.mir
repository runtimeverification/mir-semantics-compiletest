// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/methods/method-argument-inference-associated-type.rs:12:1: 12:27>::call(_1: &ClientMap, _2: S<Box<dyn Fn(i32)>>) -> () {
    debug self => _1;                    // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:14:13: 14:18
    debug _req => _2;                    // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:14:20: 14:24
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-argument-inference-associated-type.rs:14:41: 14:41

    bb0: {
        drop(_2) -> bb1;                 // scope 0 at ui/methods/method-argument-inference-associated-type.rs:14:42: 14:43
    }

    bb1: {
        return;                          // scope 0 at ui/methods/method-argument-inference-associated-type.rs:14:43: 14:43
    }
}

fn <impl at ui/methods/method-argument-inference-associated-type.rs:18:1: 18:28>::call(_1: &ClientMap2, _2: (Box<dyn Fn(i32)>,)) -> () {
    debug self => _1;                    // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:20:13: 20:18
    debug _req => _2;                    // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:20:20: 20:24
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-argument-inference-associated-type.rs:20:41: 20:41

    bb0: {
        drop(_2) -> bb1;                 // scope 0 at ui/methods/method-argument-inference-associated-type.rs:20:42: 20:43
    }

    bb1: {
        return;                          // scope 0 at ui/methods/method-argument-inference-associated-type.rs:20:43: 20:43
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-argument-inference-associated-type.rs:24:11: 24:11
    let _1: ();                          // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:25:5: 25:51
    let mut _2: &ClientMap;              // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:25:5: 25:51
    let mut _3: S<std::boxed::Box<dyn std::ops::Fn(i32)>>; // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:25:20: 25:50
    let mut _4: std::boxed::Box<dyn std::ops::Fn(i32)>; // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:25:27: 25:48
    let mut _5: std::boxed::Box<[closure@ui/methods/method-argument-inference-associated-type.rs:25:36: 25:44]>; // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:25:27: 25:48
    let mut _6: [closure@ui/methods/method-argument-inference-associated-type.rs:25:36: 25:44]; // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:25:36: 25:47
    let _7: ();                          // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:26:5: 26:45
    let mut _8: &ClientMap;              // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:26:5: 26:45
    let mut _9: S<std::boxed::Box<dyn std::ops::Fn(i32)>>; // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:26:20: 26:44
    let mut _10: std::boxed::Box<dyn std::ops::Fn(i32)>; // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:26:22: 26:43
    let mut _11: std::boxed::Box<[closure@ui/methods/method-argument-inference-associated-type.rs:26:31: 26:39]>; // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:26:22: 26:43
    let mut _12: [closure@ui/methods/method-argument-inference-associated-type.rs:26:31: 26:39]; // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:26:31: 26:42
    let _13: ();                         // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:27:5: 27:46
    let mut _14: &ClientMap2;            // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:27:5: 27:46
    let mut _15: (std::boxed::Box<dyn std::ops::Fn(i32)>,); // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:27:21: 27:45
    let mut _16: std::boxed::Box<dyn std::ops::Fn(i32)>; // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:27:22: 27:43
    let mut _17: std::boxed::Box<[closure@ui/methods/method-argument-inference-associated-type.rs:27:31: 27:39]>; // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:27:22: 27:43
    let mut _18: [closure@ui/methods/method-argument-inference-associated-type.rs:27:31: 27:39]; // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:27:31: 27:42
    let mut _19: &ClientMap2;            // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:27:5: 27:46
    let mut _20: &ClientMap;             // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:26:5: 26:45
    let mut _21: &ClientMap;             // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:25:5: 25:51

    bb0: {
        _21 = const _;                   // scope 0 at ui/methods/method-argument-inference-associated-type.rs:25:5: 25:51
                                         // mir::Constant
                                         // + span: ui/methods/method-argument-inference-associated-type.rs:25:5: 25:51
                                         // + literal: Const { ty: &ClientMap, val: Unevaluated(main, [], Some(promoted[2])) }
        _2 = _21;                        // scope 0 at ui/methods/method-argument-inference-associated-type.rs:25:5: 25:51
        _5 = Box::<[closure@ui/methods/method-argument-inference-associated-type.rs:25:36: 25:44]>::new(move _6) -> bb1; // scope 0 at ui/methods/method-argument-inference-associated-type.rs:25:27: 25:48
                                         // mir::Constant
                                         // + span: ui/methods/method-argument-inference-associated-type.rs:25:27: 25:35
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([closure@ui/methods/method-argument-inference-associated-type.rs:25:36: 25:44]) -> Box<[closure@ui/methods/method-argument-inference-associated-type.rs:25:36: 25:44]> {Box::<[closure@ui/methods/method-argument-inference-associated-type.rs:25:36: 25:44]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = move _5 as std::boxed::Box<dyn std::ops::Fn(i32)> (Pointer(Unsize)); // scope 0 at ui/methods/method-argument-inference-associated-type.rs:25:27: 25:48
        _3 = S::<Box<dyn Fn(i32)>>(move _4); // scope 0 at ui/methods/method-argument-inference-associated-type.rs:25:20: 25:50
        _1 = <ClientMap as Service>::call(move _2, move _3) -> bb2; // scope 0 at ui/methods/method-argument-inference-associated-type.rs:25:5: 25:51
                                         // mir::Constant
                                         // + span: ui/methods/method-argument-inference-associated-type.rs:25:15: 25:19
                                         // + literal: Const { ty: for<'a> fn(&'a ClientMap, <ClientMap as Service>::Request) {<ClientMap as Service>::call}, val: Value(<ZST>) }
    }

    bb2: {
        _20 = const _;                   // scope 0 at ui/methods/method-argument-inference-associated-type.rs:26:5: 26:45
                                         // mir::Constant
                                         // + span: ui/methods/method-argument-inference-associated-type.rs:26:5: 26:45
                                         // + literal: Const { ty: &ClientMap, val: Unevaluated(main, [], Some(promoted[1])) }
        _8 = _20;                        // scope 0 at ui/methods/method-argument-inference-associated-type.rs:26:5: 26:45
        _11 = Box::<[closure@ui/methods/method-argument-inference-associated-type.rs:26:31: 26:39]>::new(move _12) -> bb3; // scope 0 at ui/methods/method-argument-inference-associated-type.rs:26:22: 26:43
                                         // mir::Constant
                                         // + span: ui/methods/method-argument-inference-associated-type.rs:26:22: 26:30
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn([closure@ui/methods/method-argument-inference-associated-type.rs:26:31: 26:39]) -> Box<[closure@ui/methods/method-argument-inference-associated-type.rs:26:31: 26:39]> {Box::<[closure@ui/methods/method-argument-inference-associated-type.rs:26:31: 26:39]>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = move _11 as std::boxed::Box<dyn std::ops::Fn(i32)> (Pointer(Unsize)); // scope 0 at ui/methods/method-argument-inference-associated-type.rs:26:22: 26:43
        _9 = S::<Box<dyn Fn(i32)>>(move _10); // scope 0 at ui/methods/method-argument-inference-associated-type.rs:26:20: 26:44
        _7 = <ClientMap as Service>::call(move _8, move _9) -> bb4; // scope 0 at ui/methods/method-argument-inference-associated-type.rs:26:5: 26:45
                                         // mir::Constant
                                         // + span: ui/methods/method-argument-inference-associated-type.rs:26:15: 26:19
                                         // + literal: Const { ty: for<'a> fn(&'a ClientMap, <ClientMap as Service>::Request) {<ClientMap as Service>::call}, val: Value(<ZST>) }
    }

    bb4: {
        _19 = const _;                   // scope 0 at ui/methods/method-argument-inference-associated-type.rs:27:5: 27:46
                                         // mir::Constant
                                         // + span: ui/methods/method-argument-inference-associated-type.rs:27:5: 27:46
                                         // + literal: Const { ty: &ClientMap2, val: Unevaluated(main, [], Some(promoted[0])) }
        _14 = _19;                       // scope 0 at ui/methods/method-argument-inference-associated-type.rs:27:5: 27:46
        _17 = Box::<[closure@ui/methods/method-argument-inference-associated-type.rs:27:31: 27:39]>::new(move _18) -> bb5; // scope 0 at ui/methods/method-argument-inference-associated-type.rs:27:22: 27:43
                                         // mir::Constant
                                         // + span: ui/methods/method-argument-inference-associated-type.rs:27:22: 27:30
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn([closure@ui/methods/method-argument-inference-associated-type.rs:27:31: 27:39]) -> Box<[closure@ui/methods/method-argument-inference-associated-type.rs:27:31: 27:39]> {Box::<[closure@ui/methods/method-argument-inference-associated-type.rs:27:31: 27:39]>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _16 = move _17 as std::boxed::Box<dyn std::ops::Fn(i32)> (Pointer(Unsize)); // scope 0 at ui/methods/method-argument-inference-associated-type.rs:27:22: 27:43
        _15 = (move _16,);               // scope 0 at ui/methods/method-argument-inference-associated-type.rs:27:21: 27:45
        _13 = <ClientMap2 as Service>::call(move _14, move _15) -> bb6; // scope 0 at ui/methods/method-argument-inference-associated-type.rs:27:5: 27:46
                                         // mir::Constant
                                         // + span: ui/methods/method-argument-inference-associated-type.rs:27:16: 27:20
                                         // + literal: Const { ty: for<'a> fn(&'a ClientMap2, <ClientMap2 as Service>::Request) {<ClientMap2 as Service>::call}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/methods/method-argument-inference-associated-type.rs:28:2: 28:2
    }
}

promoted[0] in main: &ClientMap2 = {
    let mut _0: &ClientMap2;             // return place in scope 0 at ui/methods/method-argument-inference-associated-type.rs:27:5: 27:46
    let mut _1: ClientMap2;              // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:27:5: 27:15

    bb0: {
        _1 = ClientMap2;                 // scope 0 at ui/methods/method-argument-inference-associated-type.rs:27:5: 27:15
        _0 = &_1;                        // scope 0 at ui/methods/method-argument-inference-associated-type.rs:27:5: 27:46
        return;                          // scope 0 at ui/methods/method-argument-inference-associated-type.rs:27:5: 27:46
    }
}

promoted[1] in main: &ClientMap = {
    let mut _0: &ClientMap;              // return place in scope 0 at ui/methods/method-argument-inference-associated-type.rs:26:5: 26:45
    let mut _1: ClientMap;               // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:26:5: 26:14

    bb0: {
        _1 = ClientMap;                  // scope 0 at ui/methods/method-argument-inference-associated-type.rs:26:5: 26:14
        _0 = &_1;                        // scope 0 at ui/methods/method-argument-inference-associated-type.rs:26:5: 26:45
        return;                          // scope 0 at ui/methods/method-argument-inference-associated-type.rs:26:5: 26:45
    }
}

promoted[2] in main: &ClientMap = {
    let mut _0: &ClientMap;              // return place in scope 0 at ui/methods/method-argument-inference-associated-type.rs:25:5: 25:51
    let mut _1: ClientMap;               // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:25:5: 25:14

    bb0: {
        _1 = ClientMap;                  // scope 0 at ui/methods/method-argument-inference-associated-type.rs:25:5: 25:14
        _0 = &_1;                        // scope 0 at ui/methods/method-argument-inference-associated-type.rs:25:5: 25:51
        return;                          // scope 0 at ui/methods/method-argument-inference-associated-type.rs:25:5: 25:51
    }
}

fn main::{closure#0}(_1: &[closure@ui/methods/method-argument-inference-associated-type.rs:25:36: 25:44], _2: i32) -> () {
    debug _msgid => _2;                  // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:25:37: 25:43
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-argument-inference-associated-type.rs:25:45: 25:45

    bb0: {
        return;                          // scope 0 at ui/methods/method-argument-inference-associated-type.rs:25:47: 25:47
    }
}

fn main::{closure#1}(_1: &[closure@ui/methods/method-argument-inference-associated-type.rs:26:31: 26:39], _2: i32) -> () {
    debug _msgid => _2;                  // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:26:32: 26:38
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-argument-inference-associated-type.rs:26:40: 26:40

    bb0: {
        return;                          // scope 0 at ui/methods/method-argument-inference-associated-type.rs:26:42: 26:42
    }
}

fn main::{closure#2}(_1: &[closure@ui/methods/method-argument-inference-associated-type.rs:27:31: 27:39], _2: i32) -> () {
    debug _msgid => _2;                  // in scope 0 at ui/methods/method-argument-inference-associated-type.rs:27:32: 27:38
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-argument-inference-associated-type.rs:27:40: 27:40

    bb0: {
        return;                          // scope 0 at ui/methods/method-argument-inference-associated-type.rs:27:42: 27:42
    }
}

fn S(_1: T) -> S<T> {
    let mut _0: S<T>;                    // return place in scope 0 at ui/methods/method-argument-inference-associated-type.rs:10:1: 10:16

    bb0: {
        _0 = S::<T>(move _1);            // scope 0 at ui/methods/method-argument-inference-associated-type.rs:10:1: 10:16
        return;                          // scope 0 at ui/methods/method-argument-inference-associated-type.rs:10:1: 10:16
    }
}

// MIR FOR CTFE
fn S(_1: T) -> S<T> {
    let mut _0: S<T>;                    // return place in scope 0 at ui/methods/method-argument-inference-associated-type.rs:10:1: 10:16

    bb0: {
        _0 = S::<T>(move _1);            // scope 0 at ui/methods/method-argument-inference-associated-type.rs:10:1: 10:16
        return;                          // scope 0 at ui/methods/method-argument-inference-associated-type.rs:10:1: 10:16
    }
}
