// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const X1: &[u8] = {
    let mut _0: &[u8];                   // return place in scope 0 at ui/statics/issue-17233.rs:3:11: 3:24
    let mut _1: &[u8; 1];                // in scope 0 at ui/statics/issue-17233.rs:3:27: 3:34
    let _2: &[u8; 1];                    // in scope 0 at ui/statics/issue-17233.rs:3:27: 3:34
    let _3: [u8; 1];                     // in scope 0 at ui/statics/issue-17233.rs:3:28: 3:34
    let mut _4: &[u8; 1];                // in scope 0 at ui/statics/issue-17233.rs:3:27: 3:34

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/statics/issue-17233.rs:3:27: 3:34
        StorageLive(_2);                 // scope 0 at ui/statics/issue-17233.rs:3:27: 3:34
        _4 = const _;                    // scope 0 at ui/statics/issue-17233.rs:3:27: 3:34
                                         // mir::Constant
                                         // + span: ui/statics/issue-17233.rs:3:27: 3:34
                                         // + literal: Const { ty: &[u8; 1], val: Unevaluated(X1, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at ui/statics/issue-17233.rs:3:27: 3:34
        _1 = &(*_2);                     // scope 0 at ui/statics/issue-17233.rs:3:27: 3:34
        _0 = move _1 as &[u8] (Pointer(Unsize)); // scope 0 at ui/statics/issue-17233.rs:3:27: 3:34
        StorageDead(_2);                 // scope 0 at ui/statics/issue-17233.rs:3:33: 3:34
        StorageDead(_1);                 // scope 0 at ui/statics/issue-17233.rs:3:33: 3:34
        return;                          // scope 0 at ui/statics/issue-17233.rs:3:1: 3:35
    }
}

promoted[0] in X1: &[u8; 1] = {
    let mut _0: &[u8; 1];                // return place in scope 0 at ui/statics/issue-17233.rs:3:27: 3:34
    let mut _1: [u8; 1];                 // in scope 0 at ui/statics/issue-17233.rs:3:28: 3:34

    bb0: {
        _1 = [const 49_u8];              // scope 0 at ui/statics/issue-17233.rs:3:28: 3:34
        _0 = &_1;                        // scope 0 at ui/statics/issue-17233.rs:3:27: 3:34
        return;                          // scope 0 at ui/statics/issue-17233.rs:3:27: 3:34
    }
}

const X2: &[u8] = {
    let mut _0: &[u8];                   // return place in scope 0 at ui/statics/issue-17233.rs:4:11: 4:24
    let mut _1: &[u8; 1];                // in scope 0 at ui/statics/issue-17233.rs:4:27: 4:31
    let _2: &[u8; 1];                    // in scope 0 at ui/statics/issue-17233.rs:4:27: 4:31

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/statics/issue-17233.rs:4:27: 4:31
        StorageLive(_2);                 // scope 0 at ui/statics/issue-17233.rs:4:27: 4:31
        _2 = const b"1";                 // scope 0 at ui/statics/issue-17233.rs:4:27: 4:31
                                         // mir::Constant
                                         // + span: ui/statics/issue-17233.rs:4:27: 4:31
                                         // + literal: Const { ty: &[u8; 1], val: Value(Scalar(alloc1)) }
        _1 = &(*_2);                     // scope 0 at ui/statics/issue-17233.rs:4:27: 4:31
        _0 = move _1 as &[u8] (Pointer(Unsize)); // scope 0 at ui/statics/issue-17233.rs:4:27: 4:31
        StorageDead(_2);                 // scope 0 at ui/statics/issue-17233.rs:4:30: 4:31
        StorageDead(_1);                 // scope 0 at ui/statics/issue-17233.rs:4:30: 4:31
        return;                          // scope 0 at ui/statics/issue-17233.rs:4:1: 4:32
    }
}

alloc1 (size: 1, align: 1) {
    31                                              │ 1
}

const X3: &[u8; 1] = {
    let mut _0: &[u8; 1];                // return place in scope 0 at ui/statics/issue-17233.rs:5:11: 5:27
    let _1: &[u8; 1];                    // in scope 0 at ui/statics/issue-17233.rs:5:30: 5:37
    let _2: [u8; 1];                     // in scope 0 at ui/statics/issue-17233.rs:5:31: 5:37
    let mut _3: &[u8; 1];                // in scope 0 at ui/statics/issue-17233.rs:5:30: 5:37

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/statics/issue-17233.rs:5:30: 5:37
        _3 = const _;                    // scope 0 at ui/statics/issue-17233.rs:5:30: 5:37
                                         // mir::Constant
                                         // + span: ui/statics/issue-17233.rs:5:30: 5:37
                                         // + literal: Const { ty: &[u8; 1], val: Unevaluated(X3, [], Some(promoted[0])) }
        _1 = &(*_3);                     // scope 0 at ui/statics/issue-17233.rs:5:30: 5:37
        _0 = &(*_1);                     // scope 0 at ui/statics/issue-17233.rs:5:30: 5:37
        StorageDead(_1);                 // scope 0 at ui/statics/issue-17233.rs:5:36: 5:37
        return;                          // scope 0 at ui/statics/issue-17233.rs:5:1: 5:38
    }
}

promoted[0] in X3: &[u8; 1] = {
    let mut _0: &[u8; 1];                // return place in scope 0 at ui/statics/issue-17233.rs:5:30: 5:37
    let mut _1: [u8; 1];                 // in scope 0 at ui/statics/issue-17233.rs:5:31: 5:37

    bb0: {
        _1 = [const 49_u8];              // scope 0 at ui/statics/issue-17233.rs:5:31: 5:37
        _0 = &_1;                        // scope 0 at ui/statics/issue-17233.rs:5:30: 5:37
        return;                          // scope 0 at ui/statics/issue-17233.rs:5:30: 5:37
    }
}

X3::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/statics/issue-17233.rs:5:25: 5:26

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/statics/issue-17233.rs:5:25: 5:26
        return;                          // scope 0 at ui/statics/issue-17233.rs:5:25: 5:26
    }
}

const X4: &[u8; 1] = {
    let mut _0: &[u8; 1];                // return place in scope 0 at ui/statics/issue-17233.rs:6:11: 6:27

    bb0: {
        _0 = const b"1";                 // scope 0 at ui/statics/issue-17233.rs:6:30: 6:34
                                         // mir::Constant
                                         // + span: ui/statics/issue-17233.rs:6:30: 6:34
                                         // + literal: Const { ty: &[u8; 1], val: Value(Scalar(alloc2)) }
        return;                          // scope 0 at ui/statics/issue-17233.rs:6:1: 6:35
    }
}

alloc2 (size: 1, align: 1) {
    31                                              │ 1
}

X4::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/statics/issue-17233.rs:6:25: 6:26

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/statics/issue-17233.rs:6:25: 6:26
        return;                          // scope 0 at ui/statics/issue-17233.rs:6:25: 6:26
    }
}

static Y1: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/statics/issue-17233.rs:8:12: 8:14
    let mut _1: &[u8];                   // in scope 0 at ui/statics/issue-17233.rs:8:17: 8:19
    let _2: usize;                       // in scope 0 at ui/statics/issue-17233.rs:8:20: 8:21
    let mut _3: usize;                   // in scope 0 at ui/statics/issue-17233.rs:8:17: 8:22
    let mut _4: bool;                    // in scope 0 at ui/statics/issue-17233.rs:8:17: 8:22

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/statics/issue-17233.rs:8:17: 8:19
        _1 = const _;                    // scope 0 at ui/statics/issue-17233.rs:8:17: 8:19
                                         // mir::Constant
                                         // + span: ui/statics/issue-17233.rs:8:17: 8:19
                                         // + literal: Const { ty: &[u8], val: Unevaluated(X1, [], None) }
        StorageLive(_2);                 // scope 0 at ui/statics/issue-17233.rs:8:20: 8:21
        _2 = const 0_usize;              // scope 0 at ui/statics/issue-17233.rs:8:20: 8:21
        _3 = Len((*_1));                 // scope 0 at ui/statics/issue-17233.rs:8:17: 8:22
        _4 = Lt(_2, _3);                 // scope 0 at ui/statics/issue-17233.rs:8:17: 8:22
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1; // scope 0 at ui/statics/issue-17233.rs:8:17: 8:22
    }

    bb1: {
        _0 = (*_1)[_2];                  // scope 0 at ui/statics/issue-17233.rs:8:17: 8:22
        StorageDead(_2);                 // scope 0 at ui/statics/issue-17233.rs:8:21: 8:22
        StorageDead(_1);                 // scope 0 at ui/statics/issue-17233.rs:8:21: 8:22
        return;                          // scope 0 at ui/statics/issue-17233.rs:8:1: 8:23
    }
}

static Y2: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/statics/issue-17233.rs:9:12: 9:14
    let mut _1: &[u8];                   // in scope 0 at ui/statics/issue-17233.rs:9:17: 9:19
    let _2: usize;                       // in scope 0 at ui/statics/issue-17233.rs:9:20: 9:21
    let mut _3: usize;                   // in scope 0 at ui/statics/issue-17233.rs:9:17: 9:22
    let mut _4: bool;                    // in scope 0 at ui/statics/issue-17233.rs:9:17: 9:22

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/statics/issue-17233.rs:9:17: 9:19
        _1 = const _;                    // scope 0 at ui/statics/issue-17233.rs:9:17: 9:19
                                         // mir::Constant
                                         // + span: ui/statics/issue-17233.rs:9:17: 9:19
                                         // + literal: Const { ty: &[u8], val: Unevaluated(X2, [], None) }
        StorageLive(_2);                 // scope 0 at ui/statics/issue-17233.rs:9:20: 9:21
        _2 = const 0_usize;              // scope 0 at ui/statics/issue-17233.rs:9:20: 9:21
        _3 = Len((*_1));                 // scope 0 at ui/statics/issue-17233.rs:9:17: 9:22
        _4 = Lt(_2, _3);                 // scope 0 at ui/statics/issue-17233.rs:9:17: 9:22
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1; // scope 0 at ui/statics/issue-17233.rs:9:17: 9:22
    }

    bb1: {
        _0 = (*_1)[_2];                  // scope 0 at ui/statics/issue-17233.rs:9:17: 9:22
        StorageDead(_2);                 // scope 0 at ui/statics/issue-17233.rs:9:21: 9:22
        StorageDead(_1);                 // scope 0 at ui/statics/issue-17233.rs:9:21: 9:22
        return;                          // scope 0 at ui/statics/issue-17233.rs:9:1: 9:23
    }
}

static Y3: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/statics/issue-17233.rs:10:12: 10:14
    let mut _1: &[u8; 1];                // in scope 0 at ui/statics/issue-17233.rs:10:17: 10:19
    let _2: usize;                       // in scope 0 at ui/statics/issue-17233.rs:10:20: 10:21
    let mut _3: usize;                   // in scope 0 at ui/statics/issue-17233.rs:10:17: 10:22
    let mut _4: bool;                    // in scope 0 at ui/statics/issue-17233.rs:10:17: 10:22

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/statics/issue-17233.rs:10:17: 10:19
        _1 = const _;                    // scope 0 at ui/statics/issue-17233.rs:10:17: 10:19
                                         // mir::Constant
                                         // + span: ui/statics/issue-17233.rs:10:17: 10:19
                                         // + literal: Const { ty: &[u8; 1], val: Unevaluated(X3, [], None) }
        StorageLive(_2);                 // scope 0 at ui/statics/issue-17233.rs:10:20: 10:21
        _2 = const 0_usize;              // scope 0 at ui/statics/issue-17233.rs:10:20: 10:21
        _3 = Len((*_1));                 // scope 0 at ui/statics/issue-17233.rs:10:17: 10:22
        _4 = Lt(_2, _3);                 // scope 0 at ui/statics/issue-17233.rs:10:17: 10:22
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1; // scope 0 at ui/statics/issue-17233.rs:10:17: 10:22
    }

    bb1: {
        _0 = (*_1)[_2];                  // scope 0 at ui/statics/issue-17233.rs:10:17: 10:22
        StorageDead(_2);                 // scope 0 at ui/statics/issue-17233.rs:10:21: 10:22
        StorageDead(_1);                 // scope 0 at ui/statics/issue-17233.rs:10:21: 10:22
        return;                          // scope 0 at ui/statics/issue-17233.rs:10:1: 10:23
    }
}

static Y4: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/statics/issue-17233.rs:11:12: 11:14
    let mut _1: &[u8; 1];                // in scope 0 at ui/statics/issue-17233.rs:11:17: 11:19
    let _2: usize;                       // in scope 0 at ui/statics/issue-17233.rs:11:20: 11:21
    let mut _3: usize;                   // in scope 0 at ui/statics/issue-17233.rs:11:17: 11:22
    let mut _4: bool;                    // in scope 0 at ui/statics/issue-17233.rs:11:17: 11:22

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/statics/issue-17233.rs:11:17: 11:19
        _1 = const _;                    // scope 0 at ui/statics/issue-17233.rs:11:17: 11:19
                                         // mir::Constant
                                         // + span: ui/statics/issue-17233.rs:11:17: 11:19
                                         // + literal: Const { ty: &[u8; 1], val: Unevaluated(X4, [], None) }
        StorageLive(_2);                 // scope 0 at ui/statics/issue-17233.rs:11:20: 11:21
        _2 = const 0_usize;              // scope 0 at ui/statics/issue-17233.rs:11:20: 11:21
        _3 = Len((*_1));                 // scope 0 at ui/statics/issue-17233.rs:11:17: 11:22
        _4 = Lt(_2, _3);                 // scope 0 at ui/statics/issue-17233.rs:11:17: 11:22
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1; // scope 0 at ui/statics/issue-17233.rs:11:17: 11:22
    }

    bb1: {
        _0 = (*_1)[_2];                  // scope 0 at ui/statics/issue-17233.rs:11:17: 11:22
        StorageDead(_2);                 // scope 0 at ui/statics/issue-17233.rs:11:21: 11:22
        StorageDead(_1);                 // scope 0 at ui/statics/issue-17233.rs:11:21: 11:22
        return;                          // scope 0 at ui/statics/issue-17233.rs:11:1: 11:23
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/statics/issue-17233.rs:13:11: 13:11
    let mut _1: (&u8, &u8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: &u8;                         // in scope 0 at ui/statics/issue-17233.rs:14:16: 14:18
    let mut _4: &u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: &u8;                         // in scope 0 at ui/statics/issue-17233.rs:14:20: 14:22
    let _6: &u8;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _7: &u8;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _9: (&u8, &u8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _10: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _11: &u8;                        // in scope 0 at ui/statics/issue-17233.rs:15:16: 15:18
    let mut _12: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _13: &u8;                        // in scope 0 at ui/statics/issue-17233.rs:15:20: 15:22
    let _14: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _15: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _17: (&u8, &u8);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _18: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _19: &u8;                        // in scope 0 at ui/statics/issue-17233.rs:16:16: 16:18
    let mut _20: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _21: &u8;                        // in scope 0 at ui/statics/issue-17233.rs:16:20: 16:22
    let _22: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _23: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    scope 1 {
        debug left_val => _6;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _7;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _8: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _8;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _14;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _15;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _16: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _16;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _22;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _23;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _24: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _24;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = const {alloc3: &u8};        // scope 0 at ui/statics/issue-17233.rs:14:16: 14:18
                                         // mir::Constant
                                         // + span: ui/statics/issue-17233.rs:14:16: 14:18
                                         // + literal: Const { ty: &u8, val: Value(Scalar(alloc3)) }
        _2 = _3;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _5 = const {alloc4: &u8};        // scope 0 at ui/statics/issue-17233.rs:14:20: 14:22
                                         // mir::Constant
                                         // + span: ui/statics/issue-17233.rs:14:20: 14:22
                                         // + literal: Const { ty: &u8, val: Value(Scalar(alloc4)) }
        _4 = _5;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_1.0: &u8);                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_1.1: &u8);                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = const {alloc3: &u8};       // scope 0 at ui/statics/issue-17233.rs:15:16: 15:18
                                         // mir::Constant
                                         // + span: ui/statics/issue-17233.rs:15:16: 15:18
                                         // + literal: Const { ty: &u8, val: Value(Scalar(alloc3)) }
        _10 = _11;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _13 = const {alloc5: &u8};       // scope 0 at ui/statics/issue-17233.rs:15:20: 15:22
                                         // mir::Constant
                                         // + span: ui/statics/issue-17233.rs:15:20: 15:22
                                         // + literal: Const { ty: &u8, val: Value(Scalar(alloc5)) }
        _12 = _13;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _9 = (move _10, move _12);       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _14 = (_9.0: &u8);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _15 = (_9.1: &u8);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _19 = const {alloc3: &u8};       // scope 0 at ui/statics/issue-17233.rs:16:16: 16:18
                                         // mir::Constant
                                         // + span: ui/statics/issue-17233.rs:16:16: 16:18
                                         // + literal: Const { ty: &u8, val: Value(Scalar(alloc3)) }
        _18 = _19;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _21 = const {alloc6: &u8};       // scope 0 at ui/statics/issue-17233.rs:16:20: 16:22
                                         // mir::Constant
                                         // + span: ui/statics/issue-17233.rs:16:20: 16:22
                                         // + literal: Const { ty: &u8, val: Value(Scalar(alloc6)) }
        _20 = _21;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _17 = (move _18, move _20);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _22 = (_17.0: &u8);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _23 = (_17.1: &u8);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        return;                          // scope 0 at ui/statics/issue-17233.rs:17:2: 17:2
    }
}

alloc6 (static: Y4, size: 1, align: 1) {
    31                                              │ 1
}

alloc5 (static: Y3, size: 1, align: 1) {
    31                                              │ 1
}

alloc4 (static: Y2, size: 1, align: 1) {
    31                                              │ 1
}

alloc3 (static: Y1, size: 1, align: 1) {
    31                                              │ 1
}
