// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn a::<impl at ui/statics/static-methods-in-traits.rs:8:5: 8:23>::foo() -> isize {
    let mut _0: isize;

    bb0: {
        _0 = const 3_isize;
        return;
    }
}

fn a::<impl at ui/statics/static-methods-in-traits.rs:14:5: 14:23>::foo() -> usize {
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: isize;
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: isize;
    let mut _10: isize;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&usize, &usize);
    let mut _15: &usize;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: usize;
    let mut _21: usize;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: usize;
        scope 2 {
            debug y => _2;
            let _5: &isize;
            let _6: &isize;
            let _16: &usize;
            let _17: &usize;
            let mut _25: &usize;
            let mut _26: &isize;
            scope 3 {
                debug left_val => _5;
                debug right_val => _6;
                let _11: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _11;
                }
            }
            scope 5 {
                debug left_val => _16;
                debug right_val => _17;
                let _22: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _22;
                }
            }
        }
    }

    bb0: {
        _1 = <isize as Foo>::foo() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <usize as Foo>::foo() -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = &_1;
        _26 = const _;
        _3 = (move _4, _26);
        _5 = (_3.0: &isize);
        _6 = (_3.1: &isize);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<isize, isize>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb4: {
        _15 = &_2;
        _25 = const _;
        _14 = (move _15, _25);
        _16 = (_14.0: &usize);
        _17 = (_14.1: &usize);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<usize, usize>(move _22, _16, _17, move _24) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 5_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}
