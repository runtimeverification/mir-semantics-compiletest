// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn a::<impl at ui/statics/static-impl.rs:13:5: 13:24>::plus(_1: &usize) -> isize {
    debug self => _1;                    // in scope 0 at ui/statics/static-impl.rs:13:35: 13:40
    let mut _0: isize;                   // return place in scope 0 at ui/statics/static-impl.rs:13:45: 13:50
    let mut _2: isize;                   // in scope 0 at ui/statics/static-impl.rs:13:53: 13:67
    let mut _3: usize;                   // in scope 0 at ui/statics/static-impl.rs:13:53: 13:58
    let mut _4: (isize, bool);           // in scope 0 at ui/statics/static-impl.rs:13:53: 13:72

    bb0: {
        _3 = (*_1);                      // scope 0 at ui/statics/static-impl.rs:13:53: 13:58
        _2 = move _3 as isize (IntToInt); // scope 0 at ui/statics/static-impl.rs:13:53: 13:67
        _4 = CheckedAdd(_2, const 20_isize); // scope 0 at ui/statics/static-impl.rs:13:53: 13:72
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, const 20_isize) -> bb1; // scope 0 at ui/statics/static-impl.rs:13:53: 13:72
    }

    bb1: {
        _0 = move (_4.0: isize);         // scope 0 at ui/statics/static-impl.rs:13:53: 13:72
        return;                          // scope 0 at ui/statics/static-impl.rs:13:74: 13:74
    }
}

fn b::<impl at ui/statics/static-impl.rs:18:5: 18:25>::plus(_1: &String) -> isize {
    debug self => _1;                    // in scope 0 at ui/statics/static-impl.rs:18:36: 18:41
    let mut _0: isize;                   // return place in scope 0 at ui/statics/static-impl.rs:18:46: 18:51

    bb0: {
        _0 = const 200_isize;            // scope 0 at ui/statics/static-impl.rs:18:54: 18:57
        return;                          // scope 0 at ui/statics/static-impl.rs:18:59: 18:59
    }
}

fn <impl at ui/statics/static-impl.rs:26:1: 26:26>::str(_1: &usize) -> String {
    debug self => _1;                    // in scope 0 at ui/statics/static-impl.rs:27:12: 27:17
    let mut _0: std::string::String;     // return place in scope 0 at ui/statics/static-impl.rs:27:22: 27:28
    let mut _2: &usize;                  // in scope 0 at ui/statics/static-impl.rs:28:9: 28:25

    bb0: {
        _2 = _1;                         // scope 0 at ui/statics/static-impl.rs:28:9: 28:25
        _0 = <usize as ToString>::to_string(move _2) -> bb1; // scope 0 at ui/statics/static-impl.rs:28:9: 28:25
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:28:14: 28:23
                                         // + literal: Const { ty: for<'a> fn(&'a usize) -> String {<usize as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/statics/static-impl.rs:29:6: 29:6
    }
}

fn <impl at ui/statics/static-impl.rs:26:1: 26:26>::multi(_1: &usize, _2: F) -> () {
    debug self => _1;                    // in scope 0 at ui/statics/static-impl.rs:30:17: 30:22
    debug f => _2;                       // in scope 0 at ui/statics/static-impl.rs:30:24: 30:29
    let mut _0: ();                      // return place in scope 0 at ui/statics/static-impl.rs:30:34: 30:34
    let mut _3: usize;                   // in scope 0 at ui/statics/static-impl.rs:31:13: 31:18
    let mut _4: bool;                    // in scope 0 at ui/statics/static-impl.rs:32:15: 32:24
    let mut _5: usize;                   // in scope 0 at ui/statics/static-impl.rs:32:15: 32:16
    let mut _6: usize;                   // in scope 0 at ui/statics/static-impl.rs:32:19: 32:24
    let _7: ();                          // in scope 0 at ui/statics/static-impl.rs:32:27: 32:31
    let mut _8: &mut F;                  // in scope 0 at ui/statics/static-impl.rs:32:27: 32:28
    let mut _9: (usize,);                // in scope 0 at ui/statics/static-impl.rs:32:27: 32:31
    let mut _10: usize;                  // in scope 0 at ui/statics/static-impl.rs:32:29: 32:30
    let mut _11: (usize, bool);          // in scope 0 at ui/statics/static-impl.rs:32:33: 32:45
    scope 1 {
        debug c => _3;                   // in scope 1 at ui/statics/static-impl.rs:31:13: 31:18
    }

    bb0: {
        _3 = const 0_usize;              // scope 0 at ui/statics/static-impl.rs:31:21: 31:28
        goto -> bb1;                     // scope 1 at ui/statics/static-impl.rs:32:9: 32:48
    }

    bb1: {
        _5 = _3;                         // scope 1 at ui/statics/static-impl.rs:32:15: 32:16
        _6 = (*_1);                      // scope 1 at ui/statics/static-impl.rs:32:19: 32:24
        _4 = Lt(move _5, move _6);       // scope 1 at ui/statics/static-impl.rs:32:15: 32:24
        switchInt(move _4) -> [0: bb5, otherwise: bb2]; // scope 1 at ui/statics/static-impl.rs:32:15: 32:24
    }

    bb2: {
        _8 = &mut _2;                    // scope 1 at ui/statics/static-impl.rs:32:27: 32:28
        _10 = _3;                        // scope 1 at ui/statics/static-impl.rs:32:29: 32:30
        _9 = (move _10,);                // scope 1 at ui/statics/static-impl.rs:32:27: 32:31
        _7 = <F as FnMut<(usize,)>>::call_mut(move _8, move _9) -> [return: bb3, unwind: bb7]; // scope 1 at ui/statics/static-impl.rs:32:27: 32:31
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:32:27: 32:28
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (usize,)) -> <F as FnOnce<(usize,)>>::Output {<F as FnMut<(usize,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = CheckedAdd(_3, const 1_usize); // scope 1 at ui/statics/static-impl.rs:32:33: 32:45
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, const 1_usize) -> [success: bb4, unwind: bb7]; // scope 1 at ui/statics/static-impl.rs:32:33: 32:45
    }

    bb4: {
        _3 = move (_11.0: usize);        // scope 1 at ui/statics/static-impl.rs:32:33: 32:45
        goto -> bb1;                     // scope 1 at ui/statics/static-impl.rs:32:9: 32:48
    }

    bb5: {
        drop(_2) -> bb6;                 // scope 0 at ui/statics/static-impl.rs:33:5: 33:6
    }

    bb6: {
        return;                          // scope 0 at ui/statics/static-impl.rs:33:6: 33:6
    }

    bb7 (cleanup): {
        drop(_2) -> bb8;                 // scope 0 at ui/statics/static-impl.rs:33:5: 33:6
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/statics/static-impl.rs:30:5: 33:6
    }
}

fn <impl at ui/statics/static-impl.rs:42:1: 42:32>::length_(_1: &Vec<T>) -> usize {
    debug self => _1;                    // in scope 0 at ui/statics/static-impl.rs:43:16: 43:21
    let mut _0: usize;                   // return place in scope 0 at ui/statics/static-impl.rs:43:26: 43:31
    let mut _2: &std::vec::Vec<T>;       // in scope 0 at ui/statics/static-impl.rs:43:34: 43:44

    bb0: {
        _2 = _1;                         // scope 0 at ui/statics/static-impl.rs:43:34: 43:44
        _0 = Vec::<T>::len(move _2) -> bb1; // scope 0 at ui/statics/static-impl.rs:43:34: 43:44
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:43:39: 43:42
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<T>) -> usize {Vec::<T>::len}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/statics/static-impl.rs:43:46: 43:46
    }
}

fn <impl at ui/statics/static-impl.rs:42:1: 42:32>::iter_(_1: &Vec<T>, _2: F) -> () {
    debug self => _1;                    // in scope 0 at ui/statics/static-impl.rs:44:17: 44:22
    debug f => _2;                       // in scope 0 at ui/statics/static-impl.rs:44:24: 44:29
    let mut _0: ();                      // return place in scope 0 at ui/statics/static-impl.rs:44:34: 44:34
    let mut _3: std::slice::Iter<'_, T>; // in scope 0 at ui/statics/static-impl.rs:44:64: 44:68
    let mut _4: &std::vec::Vec<T>;       // in scope 0 at ui/statics/static-impl.rs:44:64: 44:68
    let mut _5: std::slice::Iter<'_, T>; // in scope 0 at ui/statics/static-impl.rs:44:64: 44:68
    let mut _6: std::option::Option<&T>; // in scope 0 at ui/statics/static-impl.rs:44:64: 44:68
    let mut _7: &mut std::slice::Iter<'_, T>; // in scope 0 at ui/statics/static-impl.rs:44:64: 44:68
    let mut _8: &mut std::slice::Iter<'_, T>; // in scope 0 at ui/statics/static-impl.rs:44:64: 44:68
    let mut _9: isize;                   // in scope 0 at ui/statics/static-impl.rs:44:55: 44:78
    let _11: ();                         // in scope 0 at ui/statics/static-impl.rs:44:71: 44:75
    let mut _12: &mut F;                 // in scope 0 at ui/statics/static-impl.rs:44:71: 44:72
    let mut _13: (&T,);                  // in scope 0 at ui/statics/static-impl.rs:44:71: 44:75
    let mut _14: &T;                     // in scope 0 at ui/statics/static-impl.rs:44:73: 44:74
    scope 1 {
        debug iter => _5;                // in scope 1 at ui/statics/static-impl.rs:44:64: 44:68
        let _10: &T;                     // in scope 1 at ui/statics/static-impl.rs:44:59: 44:60
        scope 2 {
            debug x => _10;              // in scope 2 at ui/statics/static-impl.rs:44:59: 44:60
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/statics/static-impl.rs:44:64: 44:68
        _3 = <&Vec<T> as IntoIterator>::into_iter(move _4) -> [return: bb1, unwind: bb8]; // scope 0 at ui/statics/static-impl.rs:44:64: 44:68
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:44:64: 44:68
                                         // + literal: Const { ty: fn(&Vec<T>) -> <&Vec<T> as IntoIterator>::IntoIter {<&Vec<T> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = move _3;                    // scope 0 at ui/statics/static-impl.rs:44:64: 44:68
        goto -> bb2;                     // scope 1 at ui/statics/static-impl.rs:44:55: 44:78
    }

    bb2: {
        _8 = &mut _5;                    // scope 1 at ui/statics/static-impl.rs:44:64: 44:68
        _7 = &mut (*_8);                 // scope 1 at ui/statics/static-impl.rs:44:64: 44:68
        _6 = <std::slice::Iter<'_, T> as Iterator>::next(move _7) -> [return: bb3, unwind: bb8]; // scope 1 at ui/statics/static-impl.rs:44:64: 44:68
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:44:64: 44:68
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, T>) -> Option<<std::slice::Iter<'_, T> as Iterator>::Item> {<std::slice::Iter<'_, T> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = discriminant(_6);           // scope 1 at ui/statics/static-impl.rs:44:64: 44:68
        switchInt(move _9) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/statics/static-impl.rs:44:64: 44:68
    }

    bb4: {
        _10 = ((_6 as Some).0: &T);      // scope 1 at ui/statics/static-impl.rs:44:59: 44:60
        _12 = &mut _2;                   // scope 2 at ui/statics/static-impl.rs:44:71: 44:72
        _14 = _10;                       // scope 2 at ui/statics/static-impl.rs:44:73: 44:74
        _13 = (move _14,);               // scope 2 at ui/statics/static-impl.rs:44:71: 44:75
        _11 = <F as FnMut<(&T,)>>::call_mut(move _12, move _13) -> [return: bb10, unwind: bb8]; // scope 2 at ui/statics/static-impl.rs:44:71: 44:75
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:44:71: 44:72
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (&T,)) -> <F as FnOnce<(&T,)>>::Output {<F as FnMut<(&T,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 1 at ui/statics/static-impl.rs:44:64: 44:68
    }

    bb6: {
        drop(_2) -> bb7;                 // scope 0 at ui/statics/static-impl.rs:44:79: 44:80
    }

    bb7: {
        return;                          // scope 0 at ui/statics/static-impl.rs:44:80: 44:80
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at ui/statics/static-impl.rs:44:79: 44:80
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/statics/static-impl.rs:44:5: 44:80
    }

    bb10: {
        goto -> bb2;                     // scope 2 at ui/statics/static-impl.rs:44:71: 44:75
    }
}

fn <impl at ui/statics/static-impl.rs:42:1: 42:32>::map_(_1: &Vec<T>, _2: F) -> Vec<U> {
    debug self => _1;                    // in scope 0 at ui/statics/static-impl.rs:45:19: 45:24
    debug f => _2;                       // in scope 0 at ui/statics/static-impl.rs:45:26: 45:31
    let mut _0: std::vec::Vec<U>;        // return place in scope 0 at ui/statics/static-impl.rs:46:13: 46:18
    let mut _3: std::slice::Iter<'_, T>; // in scope 0 at ui/statics/static-impl.rs:47:20: 47:24
    let mut _4: &std::vec::Vec<T>;       // in scope 0 at ui/statics/static-impl.rs:47:20: 47:24
    let mut _6: std::option::Option<&T>; // in scope 0 at ui/statics/static-impl.rs:47:20: 47:24
    let mut _7: &mut std::slice::Iter<'_, T>; // in scope 0 at ui/statics/static-impl.rs:47:20: 47:24
    let mut _8: &mut std::slice::Iter<'_, T>; // in scope 0 at ui/statics/static-impl.rs:47:20: 47:24
    let mut _9: isize;                   // in scope 0 at ui/statics/static-impl.rs:47:9: 49:10
    let _11: ();                         // in scope 0 at ui/statics/static-impl.rs:48:13: 48:27
    let mut _12: &mut std::vec::Vec<U>;  // in scope 0 at ui/statics/static-impl.rs:48:13: 48:27
    let mut _13: U;                      // in scope 0 at ui/statics/static-impl.rs:48:20: 48:26
    let mut _14: &mut F;                 // in scope 0 at ui/statics/static-impl.rs:48:20: 48:21
    let mut _15: (&T,);                  // in scope 0 at ui/statics/static-impl.rs:48:20: 48:26
    let mut _16: &T;                     // in scope 0 at ui/statics/static-impl.rs:48:22: 48:25
    scope 1 {
        debug r => _0;                   // in scope 1 at ui/statics/static-impl.rs:46:13: 46:18
        let mut _5: std::slice::Iter<'_, T>; // in scope 1 at ui/statics/static-impl.rs:47:20: 47:24
        scope 2 {
            debug iter => _5;            // in scope 2 at ui/statics/static-impl.rs:47:20: 47:24
            let _10: &T;                 // in scope 2 at ui/statics/static-impl.rs:47:13: 47:16
            scope 3 {
                debug elt => _10;        // in scope 3 at ui/statics/static-impl.rs:47:13: 47:16
            }
        }
    }

    bb0: {
        _0 = Vec::<U>::new() -> [return: bb1, unwind: bb11]; // scope 0 at ui/statics/static-impl.rs:46:21: 46:31
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:46:21: 46:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<U> {Vec::<U>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _1;                         // scope 1 at ui/statics/static-impl.rs:47:20: 47:24
        _3 = <&Vec<T> as IntoIterator>::into_iter(move _4) -> [return: bb2, unwind: bb10]; // scope 1 at ui/statics/static-impl.rs:47:20: 47:24
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:47:20: 47:24
                                         // + literal: Const { ty: fn(&Vec<T>) -> <&Vec<T> as IntoIterator>::IntoIter {<&Vec<T> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = move _3;                    // scope 1 at ui/statics/static-impl.rs:47:20: 47:24
        goto -> bb3;                     // scope 2 at ui/statics/static-impl.rs:47:9: 49:10
    }

    bb3: {
        _8 = &mut _5;                    // scope 2 at ui/statics/static-impl.rs:47:20: 47:24
        _7 = &mut (*_8);                 // scope 2 at ui/statics/static-impl.rs:47:20: 47:24
        _6 = <std::slice::Iter<'_, T> as Iterator>::next(move _7) -> [return: bb4, unwind: bb10]; // scope 2 at ui/statics/static-impl.rs:47:20: 47:24
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:47:20: 47:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, T>) -> Option<<std::slice::Iter<'_, T> as Iterator>::Item> {<std::slice::Iter<'_, T> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = discriminant(_6);           // scope 2 at ui/statics/static-impl.rs:47:20: 47:24
        switchInt(move _9) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 2 at ui/statics/static-impl.rs:47:20: 47:24
    }

    bb5: {
        _10 = ((_6 as Some).0: &T);      // scope 2 at ui/statics/static-impl.rs:47:13: 47:16
        _12 = &mut _0;                   // scope 3 at ui/statics/static-impl.rs:48:13: 48:27
        _14 = &mut _2;                   // scope 3 at ui/statics/static-impl.rs:48:20: 48:21
        _16 = _10;                       // scope 3 at ui/statics/static-impl.rs:48:22: 48:25
        _15 = (move _16,);               // scope 3 at ui/statics/static-impl.rs:48:20: 48:26
        _13 = <F as FnMut<(&T,)>>::call_mut(move _14, move _15) -> [return: bb8, unwind: bb10]; // scope 3 at ui/statics/static-impl.rs:48:20: 48:26
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:48:20: 48:21
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (&T,)) -> <F as FnOnce<(&T,)>>::Output {<F as FnMut<(&T,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 2 at ui/statics/static-impl.rs:47:20: 47:24
    }

    bb7: {
        drop(_2) -> bb9;                 // scope 0 at ui/statics/static-impl.rs:51:5: 51:6
    }

    bb8: {
        _11 = Vec::<U>::push(move _12, move _13) -> [return: bb13, unwind: bb10]; // scope 3 at ui/statics/static-impl.rs:48:13: 48:27
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:48:15: 48:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<U>, U) {Vec::<U>::push}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/statics/static-impl.rs:51:6: 51:6
    }

    bb10 (cleanup): {
        drop(_0) -> bb11;                // scope 0 at ui/statics/static-impl.rs:51:5: 51:6
    }

    bb11 (cleanup): {
        drop(_2) -> bb12;                // scope 0 at ui/statics/static-impl.rs:51:5: 51:6
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at ui/statics/static-impl.rs:45:5: 51:6
    }

    bb13: {
        goto -> bb3;                     // scope 3 at ui/statics/static-impl.rs:48:13: 48:27
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/statics/static-impl.rs:54:15: 54:15
    let mut _1: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: isize;                       // in scope 0 at ui/statics/static-impl.rs:55:16: 55:31
    let mut _4: &usize;                  // in scope 0 at ui/statics/static-impl.rs:55:16: 55:31
    let mut _5: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _6: &isize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _7: &isize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _20: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _21: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _22: isize;                      // in scope 0 at ui/statics/static-impl.rs:56:16: 56:41
    let mut _23: &std::string::String;   // in scope 0 at ui/statics/static-impl.rs:56:16: 56:41
    let _24: std::string::String;        // in scope 0 at ui/statics/static-impl.rs:56:16: 56:34
    let mut _25: &str;                   // in scope 0 at ui/statics/static-impl.rs:56:16: 56:34
    let _26: &str;                       // in scope 0 at ui/statics/static-impl.rs:56:17: 56:21
    let mut _27: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _28: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _29: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _32: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _33: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _35: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _36: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _37: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _38: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _39: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _40: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _42: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _43: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _44: std::string::String;        // in scope 0 at ui/statics/static-impl.rs:58:16: 58:41
    let mut _45: &usize;                 // in scope 0 at ui/statics/static-impl.rs:58:16: 58:41
    let _46: usize;                      // in scope 0 at ui/statics/static-impl.rs:58:16: 58:35
    let mut _47: &std::vec::Vec<i32>;    // in scope 0 at ui/statics/static-impl.rs:58:16: 58:35
    let _48: std::vec::Vec<i32>;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _49: std::boxed::Box<[i32]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _50: std::boxed::Box<[i32; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _51: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _52: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _53: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _54: std::boxed::Box<[i32; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _55: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _56: std::string::String;        // in scope 0 at ui/statics/static-impl.rs:58:43: 58:58
    let mut _57: &str;                   // in scope 0 at ui/statics/static-impl.rs:58:43: 58:58
    let _58: &str;                       // in scope 0 at ui/statics/static-impl.rs:58:43: 58:46
    let _59: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _60: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _61: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _62: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _63: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _64: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _66: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _67: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _68: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _69: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _70: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _71: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _73: std::vec::Vec<i32>;         // in scope 0 at ui/statics/static-impl.rs:59:9: 59:13
    let mut _74: &std::vec::Vec<i32>;    // in scope 0 at ui/statics/static-impl.rs:59:16: 59:43
    let _75: std::vec::Vec<i32>;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _76: std::boxed::Box<[i32]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _77: std::boxed::Box<[i32; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _78: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _79: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _80: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _81: std::boxed::Box<[i32; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _82: [closure@ui/statics/static-impl.rs:59:32: 59:35]; // in scope 0 at ui/statics/static-impl.rs:59:32: 59:42
    let mut _83: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _84: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _85: &i32;                       // in scope 0 at ui/statics/static-impl.rs:60:16: 60:23
    let mut _86: &std::vec::Vec<i32>;    // in scope 0 at ui/statics/static-impl.rs:60:16: 60:20
    let mut _87: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _90: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _91: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _92: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _93: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _95: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _96: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _97: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _98: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _99: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _100: &i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _101: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _103: &std::vec::Vec<i32>;   // in scope 0 at ui/statics/static-impl.rs:61:16: 61:72
    let _104: std::vec::Vec<i32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _105: std::boxed::Box<[i32]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _106: std::boxed::Box<[i32; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _107: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _108: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _109: *mut u8;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _110: std::boxed::Box<[i32; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _111: [closure@ui/statics/static-impl.rs:61:46: 61:49]; // in scope 0 at ui/statics/static-impl.rs:61:46: 61:71
    let mut _112: (&usize, &usize);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _113: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _114: &usize;                    // in scope 0 at ui/statics/static-impl.rs:62:16: 62:23
    let mut _115: &std::vec::Vec<usize>; // in scope 0 at ui/statics/static-impl.rs:62:16: 62:20
    let mut _116: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _119: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _120: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _121: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _122: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _124: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _125: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _126: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _127: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _128: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _129: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _130: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _132: ();                        // in scope 0 at ui/statics/static-impl.rs:64:5: 64:39
    let mut _133: &usize;                // in scope 0 at ui/statics/static-impl.rs:64:5: 64:39
    let mut _134: [closure@ui/statics/static-impl.rs:64:20: 64:24]; // in scope 0 at ui/statics/static-impl.rs:64:20: 64:37
    let mut _135: &mut usize;            // in scope 0 at ui/statics/static-impl.rs:64:20: 64:37
    let mut _136: (&usize, &usize);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _137: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _138: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _141: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _142: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _143: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _144: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _146: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _147: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _148: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _149: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _150: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _151: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _152: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _157: &isize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _158: &isize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _159: &usize;                // in scope 0 at ui/statics/static-impl.rs:55:16: 55:31
    let mut _160: *const [i32; 1];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _161: *const [i32; 2];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _162: *const [i32; 2];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug left_val => _6;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _7;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _12: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _12;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _28;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _29;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _34: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _34;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
    }
    scope 6 {
        debug left_val => _59;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _60;          // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _65: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 7 {
            debug kind => _65;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 8 {
        debug vect => _73;               // in scope 8 at ui/statics/static-impl.rs:59:9: 59:13
        let _88: &i32;                   // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _89: &i32;                   // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _102: std::vec::Vec<usize>;  // in scope 8 at ui/statics/static-impl.rs:61:9: 61:13
        let mut _156: &i32;              // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 10 {
            debug left_val => _88;       // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _89;      // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _94: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 11 {
                debug kind => _94;       // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 12 {
            debug vect => _102;          // in scope 12 at ui/statics/static-impl.rs:61:9: 61:13
            let _117: &usize;            // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _118: &usize;            // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _131: usize;         // in scope 12 at ui/statics/static-impl.rs:63:9: 63:14
            let mut _155: &usize;        // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 14 {
                debug left_val => _117;  // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _118; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _123: core::panicking::AssertKind; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 15 {
                    debug kind => _123;  // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 16 {
                debug x => _131;         // in scope 16 at ui/statics/static-impl.rs:63:9: 63:14
                let _139: &usize;        // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _140: &usize;        // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _153: &usize;    // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                let mut _154: &usize;    // in scope 16 at ui/statics/static-impl.rs:64:5: 64:39
                scope 17 {
                    debug left_val => _139; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _140; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _145: core::panicking::AssertKind; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 18 {
                        debug kind => _145; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
        scope 13 {
        }
    }
    scope 9 {
    }

    bb0: {
        _159 = const _;                  // scope 0 at ui/statics/static-impl.rs:55:16: 55:31
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:55:16: 55:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[6])) }
        _4 = _159;                       // scope 0 at ui/statics/static-impl.rs:55:16: 55:31
        _3 = <usize as plus>::plus(move _4) -> bb1; // scope 0 at ui/statics/static-impl.rs:55:16: 55:31
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:55:25: 55:29
                                         // + literal: Const { ty: for<'a> fn(&'a usize) -> isize {<usize as plus>::plus}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _158 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[5])) }
        _5 = _158;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_1.0: &isize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_1.1: &isize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = (*_6);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = const 30_isize;            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = Eq(move _10, move _11);     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _8 = Not(move _9);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _12 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<isize, isize>(move _14, move _15, move _17, move _19); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb3: {
        _26 = const "hi";                // scope 0 at ui/statics/static-impl.rs:56:17: 56:21
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:56:17: 56:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _25 = _26;                       // scope 0 at ui/statics/static-impl.rs:56:16: 56:34
        _24 = <str as ToString>::to_string(move _25) -> bb4; // scope 0 at ui/statics/static-impl.rs:56:16: 56:34
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:56:22: 56:31
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb4: {
        _23 = &_24;                      // scope 0 at ui/statics/static-impl.rs:56:16: 56:41
        _22 = <String as plus>::plus(move _23) -> [return: bb5, unwind: bb46]; // scope 0 at ui/statics/static-impl.rs:56:16: 56:41
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:56:35: 56:39
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> isize {<String as plus>::plus}, val: Value(<ZST>) }
    }

    bb5: {
        _21 = &_22;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _157 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[4])) }
        _27 = _157;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _20 = (move _21, move _27);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _28 = (_20.0: &isize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _29 = (_20.1: &isize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _32 = (*_28);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _33 = const 200_isize;           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _31 = Eq(move _32, move _33);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _30 = Not(move _31);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _30) -> [0: bb7, otherwise: bb6]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _34 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _36 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _38 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _38;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _40 = _29;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = _40;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _41 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _35 = core::panicking::assert_failed::<isize, isize>(move _36, move _37, move _39, move _41) -> bb46; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb7: {
        drop(_24) -> bb8;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb8: {
        _51 = const 4_usize;             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _52 = const 4_usize;             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _53 = alloc::alloc::exchange_malloc(move _51, move _52) -> bb9; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb9: {
        _54 = ShallowInitBox(move _53, [i32; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _160 = (((_54.0: std::ptr::Unique<[i32; 1]>).0: std::ptr::NonNull<[i32; 1]>).0: *const [i32; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_160) = [const 1_i32];         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _50 = move _54;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _49 = move _50 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _48 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _49) -> bb10; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb10: {
        _47 = &_48;                      // scope 0 at ui/statics/static-impl.rs:58:16: 58:35
        _46 = <Vec<i32> as vec_utils<i32>>::length_(move _47) -> [return: bb11, unwind: bb45]; // scope 0 at ui/statics/static-impl.rs:58:16: 58:35
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:58:26: 58:33
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>) -> usize {<Vec<i32> as vec_utils<i32>>::length_}, val: Value(<ZST>) }
    }

    bb11: {
        _45 = &_46;                      // scope 0 at ui/statics/static-impl.rs:58:16: 58:41
        _44 = <usize as uint_utils>::str(move _45) -> [return: bb12, unwind: bb45]; // scope 0 at ui/statics/static-impl.rs:58:16: 58:41
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:58:36: 58:39
                                         // + literal: Const { ty: for<'a> fn(&'a usize) -> String {<usize as uint_utils>::str}, val: Value(<ZST>) }
    }

    bb12: {
        _43 = &_44;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _58 = const "1";                 // scope 0 at ui/statics/static-impl.rs:58:43: 58:46
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:58:43: 58:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _57 = _58;                       // scope 0 at ui/statics/static-impl.rs:58:43: 58:58
        _56 = <str as ToString>::to_string(move _57) -> [return: bb13, unwind: bb44]; // scope 0 at ui/statics/static-impl.rs:58:43: 58:58
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:58:47: 58:56
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb13: {
        _55 = &_56;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _42 = (move _43, move _55);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _59 = (_42.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _60 = (_42.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _63 = _59;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _64 = _60;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _62 = <String as PartialEq>::eq(move _63, move _64) -> [return: bb14, unwind: bb43]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb14: {
        _61 = Not(move _62);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _61) -> [0: bb16, otherwise: bb15]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _65 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _67 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _69 = _59;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _68 = _69;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _71 = _60;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _70 = _71;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _72 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _66 = core::panicking::assert_failed::<String, String>(move _67, move _68, move _70, move _72) -> bb43; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb16: {
        drop(_56) -> [return: bb17, unwind: bb44]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb17: {
        drop(_44) -> [return: bb18, unwind: bb45]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb18: {
        drop(_48) -> bb19;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb19: {
        _78 = const 8_usize;             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _79 = const 4_usize;             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _80 = alloc::alloc::exchange_malloc(move _78, move _79) -> bb20; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb20: {
        _81 = ShallowInitBox(move _80, [i32; 2]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _161 = (((_81.0: std::ptr::Unique<[i32; 2]>).0: std::ptr::NonNull<[i32; 2]>).0: *const [i32; 2]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_161) = [const 3_i32, const 4_i32]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _77 = move _81;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _76 = move _77 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _75 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _76) -> bb21; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb21: {
        _74 = &_75;                      // scope 0 at ui/statics/static-impl.rs:59:16: 59:43
        _73 = <Vec<i32> as vec_utils<i32>>::map_::<i32, [closure@ui/statics/static-impl.rs:59:32: 59:35]>(move _74, move _82) -> [return: bb22, unwind: bb42]; // scope 0 at ui/statics/static-impl.rs:59:16: 59:43
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:59:27: 59:31
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>, [closure@ui/statics/static-impl.rs:59:32: 59:35]) -> Vec<i32> {<Vec<i32> as vec_utils<i32>>::map_::<i32, [closure@ui/statics/static-impl.rs:59:32: 59:35]>}, val: Value(<ZST>) }
    }

    bb22: {
        drop(_75) -> [return: bb23, unwind: bb41]; // scope 0 at ui/statics/static-impl.rs:59:43: 59:44
    }

    bb23: {
        _86 = &_73;                      // scope 8 at ui/statics/static-impl.rs:60:16: 60:20
        _85 = <Vec<i32> as Index<usize>>::index(move _86, const 0_usize) -> [return: bb24, unwind: bb41]; // scope 8 at ui/statics/static-impl.rs:60:16: 60:23
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:60:16: 60:23
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>, usize) -> &'a <Vec<i32> as Index<usize>>::Output {<Vec<i32> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb24: {
        _84 = _85;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _156 = const _;                  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[3])) }
        _87 = _156;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _83 = (move _84, move _87);      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _88 = (_83.0: &i32);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _89 = (_83.1: &i32);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _92 = (*_88);                    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _93 = const 7_i32;               // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _91 = Eq(move _92, move _93);    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _90 = Not(move _91);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _90) -> [0: bb26, otherwise: bb25]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb25: {
        _94 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _96 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _98 = _88;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _97 = _98;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _100 = _89;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _99 = _100;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _101 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _95 = core::panicking::assert_failed::<i32, i32>(move _96, move _97, move _99, move _101) -> bb41; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb26: {
        _107 = const 8_usize;            // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _108 = const 4_usize;            // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _109 = alloc::alloc::exchange_malloc(move _107, move _108) -> [return: bb27, unwind: bb41]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb27: {
        _110 = ShallowInitBox(move _109, [i32; 2]); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _162 = (((_110.0: std::ptr::Unique<[i32; 2]>).0: std::ptr::NonNull<[i32; 2]>).0: *const [i32; 2]); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_162) = [const 3_i32, const 4_i32]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _106 = move _110;                // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _105 = move _106 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _104 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _105) -> [return: bb28, unwind: bb41]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb28: {
        _103 = &_104;                    // scope 8 at ui/statics/static-impl.rs:61:16: 61:72
        _102 = <Vec<i32> as vec_utils<i32>>::map_::<usize, [closure@ui/statics/static-impl.rs:61:46: 61:49]>(move _103, move _111) -> [return: bb29, unwind: bb40]; // scope 8 at ui/statics/static-impl.rs:61:16: 61:72
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:61:29: 61:33
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>, [closure@ui/statics/static-impl.rs:61:46: 61:49]) -> Vec<usize> {<Vec<i32> as vec_utils<i32>>::map_::<usize, [closure@ui/statics/static-impl.rs:61:46: 61:49]>}, val: Value(<ZST>) }
    }

    bb29: {
        drop(_104) -> [return: bb30, unwind: bb39]; // scope 8 at ui/statics/static-impl.rs:61:72: 61:73
    }

    bb30: {
        _115 = &_102;                    // scope 12 at ui/statics/static-impl.rs:62:16: 62:20
        _114 = <Vec<usize> as Index<usize>>::index(move _115, const 0_usize) -> [return: bb31, unwind: bb39]; // scope 12 at ui/statics/static-impl.rs:62:16: 62:23
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:62:16: 62:23
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<usize>, usize) -> &'a <Vec<usize> as Index<usize>>::Output {<Vec<usize> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb31: {
        _113 = _114;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _155 = const _;                  // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[2])) }
        _116 = _155;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _112 = (move _113, move _116);   // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _117 = (_112.0: &usize);         // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _118 = (_112.1: &usize);         // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _121 = (*_117);                  // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _122 = const 7_usize;            // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _120 = Eq(move _121, move _122); // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _119 = Not(move _120);           // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _119) -> [0: bb33, otherwise: bb32]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb32: {
        _123 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _125 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _127 = _117;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _126 = _127;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _129 = _118;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _128 = _129;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _130 = Option::<Arguments<'_>>::None; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _124 = core::panicking::assert_failed::<usize, usize>(move _125, move _126, move _128, move _130) -> bb39; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb33: {
        _131 = const 0_usize;            // scope 12 at ui/statics/static-impl.rs:63:17: 63:24
        _154 = const _;                  // scope 16 at ui/statics/static-impl.rs:64:5: 64:39
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:64:5: 64:39
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[1])) }
        _133 = _154;                     // scope 16 at ui/statics/static-impl.rs:64:5: 64:39
        _135 = &mut _131;                // scope 16 at ui/statics/static-impl.rs:64:20: 64:37
        _134 = [closure@ui/statics/static-impl.rs:64:20: 64:24] { x: move _135 }; // scope 16 at ui/statics/static-impl.rs:64:20: 64:37
                                         // closure
                                         // + def_id: DefId(0:40 ~ static_impl[3997]::main::{closure#2})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn((usize,)),
                                         //     (&mut usize,),
                                         // ]
        _132 = <usize as uint_utils>::multi::<[closure@ui/statics/static-impl.rs:64:20: 64:24]>(move _133, move _134) -> [return: bb34, unwind: bb39]; // scope 16 at ui/statics/static-impl.rs:64:5: 64:39
                                         // mir::Constant
                                         // + span: ui/statics/static-impl.rs:64:14: 64:19
                                         // + literal: Const { ty: for<'a> fn(&'a usize, [closure@ui/statics/static-impl.rs:64:20: 64:24]) {<usize as uint_utils>::multi::<[closure@ui/statics/static-impl.rs:64:20: 64:24]>}, val: Value(<ZST>) }
    }

    bb34: {
        _137 = &_131;                    // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _153 = const _;                  // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _138 = _153;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _136 = (move _137, move _138);   // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _139 = (_136.0: &usize);         // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _140 = (_136.1: &usize);         // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _143 = (*_139);                  // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _144 = const 20_usize;           // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _142 = Eq(move _143, move _144); // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _141 = Not(move _142);           // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _141) -> [0: bb36, otherwise: bb35]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb35: {
        _145 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _147 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _149 = _139;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _148 = _149;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _151 = _140;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _150 = _151;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _152 = Option::<Arguments<'_>>::None; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _146 = core::panicking::assert_failed::<usize, usize>(move _147, move _148, move _150, move _152) -> bb39; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb36: {
        drop(_102) -> [return: bb37, unwind: bb41]; // scope 8 at ui/statics/static-impl.rs:66:1: 66:2
    }

    bb37: {
        drop(_73) -> bb38;               // scope 0 at ui/statics/static-impl.rs:66:1: 66:2
    }

    bb38: {
        return;                          // scope 0 at ui/statics/static-impl.rs:66:2: 66:2
    }

    bb39 (cleanup): {
        drop(_102) -> bb41;              // scope 8 at ui/statics/static-impl.rs:66:1: 66:2
    }

    bb40 (cleanup): {
        drop(_104) -> bb41;              // scope 8 at ui/statics/static-impl.rs:61:72: 61:73
    }

    bb41 (cleanup): {
        drop(_73) -> bb47;               // scope 0 at ui/statics/static-impl.rs:66:1: 66:2
    }

    bb42 (cleanup): {
        drop(_75) -> bb47;               // scope 0 at ui/statics/static-impl.rs:59:43: 59:44
    }

    bb43 (cleanup): {
        drop(_56) -> bb44;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb44 (cleanup): {
        drop(_44) -> bb45;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb45 (cleanup): {
        drop(_48) -> bb47;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb46 (cleanup): {
        drop(_24) -> bb47;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb47 (cleanup): {
        resume;                          // scope 0 at ui/statics/static-impl.rs:54:1: 66:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/statics/static-impl.rs:65:19: 65:27

    bb0: {
        _1 = const 20_usize;             // scope 0 at ui/statics/static-impl.rs:65:19: 65:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at ui/statics/static-impl.rs:64:5: 64:39
    let mut _1: usize;                   // in scope 0 at ui/statics/static-impl.rs:64:5: 64:13

    bb0: {
        _1 = const 10_usize;             // scope 0 at ui/statics/static-impl.rs:64:5: 64:13
        _0 = &_1;                        // scope 0 at ui/statics/static-impl.rs:64:5: 64:39
        return;                          // scope 0 at ui/statics/static-impl.rs:64:5: 64:39
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/statics/static-impl.rs:62:25: 62:32

    bb0: {
        _1 = const 7_usize;              // scope 0 at ui/statics/static-impl.rs:62:25: 62:32
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/statics/static-impl.rs:60:25: 60:26

    bb0: {
        _1 = const 7_i32;                // scope 0 at ui/statics/static-impl.rs:60:25: 60:26
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/statics/static-impl.rs:56:43: 56:46

    bb0: {
        _1 = const 200_isize;            // scope 0 at ui/statics/static-impl.rs:56:43: 56:46
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/statics/static-impl.rs:55:33: 55:35

    bb0: {
        _1 = const 30_isize;             // scope 0 at ui/statics/static-impl.rs:55:33: 55:35
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[6] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at ui/statics/static-impl.rs:55:16: 55:31
    let mut _1: usize;                   // in scope 0 at ui/statics/static-impl.rs:55:16: 55:24

    bb0: {
        _1 = const 10_usize;             // scope 0 at ui/statics/static-impl.rs:55:16: 55:24
        _0 = &_1;                        // scope 0 at ui/statics/static-impl.rs:55:16: 55:31
        return;                          // scope 0 at ui/statics/static-impl.rs:55:16: 55:31
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/statics/static-impl.rs:59:32: 59:35], _2: &i32) -> i32 {
    debug a => _2;                       // in scope 0 at ui/statics/static-impl.rs:59:33: 59:34
    let mut _0: i32;                     // return place in scope 0 at ui/statics/static-impl.rs:59:36: 59:36
    let mut _3: i32;                     // in scope 0 at ui/statics/static-impl.rs:59:36: 59:38
    let mut _4: (i32, bool);             // in scope 0 at ui/statics/static-impl.rs:59:36: 59:42

    bb0: {
        _3 = (*_2);                      // scope 0 at ui/statics/static-impl.rs:59:36: 59:38
        _4 = CheckedAdd(_3, const 4_i32); // scope 0 at ui/statics/static-impl.rs:59:36: 59:42
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, const 4_i32) -> bb1; // scope 0 at ui/statics/static-impl.rs:59:36: 59:42
    }

    bb1: {
        _0 = move (_4.0: i32);           // scope 0 at ui/statics/static-impl.rs:59:36: 59:42
        return;                          // scope 0 at ui/statics/static-impl.rs:59:42: 59:42
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/statics/static-impl.rs:61:46: 61:49], _2: &i32) -> usize {
    debug a => _2;                       // in scope 0 at ui/statics/static-impl.rs:61:47: 61:48
    let mut _0: usize;                   // return place in scope 0 at ui/statics/static-impl.rs:61:50: 61:50
    let mut _3: usize;                   // in scope 0 at ui/statics/static-impl.rs:61:50: 61:61
    let mut _4: i32;                     // in scope 0 at ui/statics/static-impl.rs:61:50: 61:52
    let mut _5: (usize, bool);           // in scope 0 at ui/statics/static-impl.rs:61:50: 61:71

    bb0: {
        _4 = (*_2);                      // scope 0 at ui/statics/static-impl.rs:61:50: 61:52
        _3 = move _4 as usize (IntToInt); // scope 0 at ui/statics/static-impl.rs:61:50: 61:61
        _5 = CheckedAdd(_3, const 4_usize); // scope 0 at ui/statics/static-impl.rs:61:50: 61:71
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, const 4_usize) -> bb1; // scope 0 at ui/statics/static-impl.rs:61:50: 61:71
    }

    bb1: {
        _0 = move (_5.0: usize);         // scope 0 at ui/statics/static-impl.rs:61:50: 61:71
        return;                          // scope 0 at ui/statics/static-impl.rs:61:71: 61:71
    }
}

fn main::{closure#2}(_1: &mut [closure@ui/statics/static-impl.rs:64:20: 64:24], _2: usize) -> () {
    debug _n => _2;                      // in scope 0 at ui/statics/static-impl.rs:64:21: 64:23
    debug x => (*((*_1).0: &mut usize)); // in scope 0 at ui/statics/static-impl.rs:63:9: 63:14
    let mut _0: ();                      // return place in scope 0 at ui/statics/static-impl.rs:64:25: 64:25
    let mut _3: (usize, bool);           // in scope 0 at ui/statics/static-impl.rs:64:25: 64:37
    let mut _4: &mut usize;              // in scope 0 at ui/statics/static-impl.rs:64:20: 64:37
    let mut _5: &mut usize;              // in scope 0 at ui/statics/static-impl.rs:64:20: 64:37
    let mut _6: &mut usize;              // in scope 0 at ui/statics/static-impl.rs:64:20: 64:37

    bb0: {
        _4 = deref_copy ((*_1).0: &mut usize); // scope 0 at ui/statics/static-impl.rs:64:25: 64:37
        _3 = CheckedAdd((*_4), const 2_usize); // scope 0 at ui/statics/static-impl.rs:64:25: 64:37
        _5 = deref_copy ((*_1).0: &mut usize); // scope 0 at ui/statics/static-impl.rs:64:25: 64:37
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_5), const 2_usize) -> bb1; // scope 0 at ui/statics/static-impl.rs:64:25: 64:37
    }

    bb1: {
        _6 = deref_copy ((*_1).0: &mut usize); // scope 0 at ui/statics/static-impl.rs:64:25: 64:37
        (*_6) = move (_3.0: usize);      // scope 0 at ui/statics/static-impl.rs:64:25: 64:37
        return;                          // scope 0 at ui/statics/static-impl.rs:64:37: 64:37
    }
}
