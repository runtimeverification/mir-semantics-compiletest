// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn a::<impl at ui/statics/static-impl.rs:13:5: 13:24>::plus(_1: &usize) -> isize {
    debug self => _1;
    let mut _0: isize;
    let mut _2: isize;
    let mut _3: usize;

    bb0: {
        _3 = (*_1);
        _2 = move _3 as isize (IntToInt);
        _0 = Add(move _2, const 20_isize);
        return;
    }
}

fn b::<impl at ui/statics/static-impl.rs:18:5: 18:25>::plus(_1: &String) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = const 200_isize;
        return;
    }
}

fn <impl at ui/statics/static-impl.rs:26:1: 26:26>::str(_1: &usize) -> String {
    debug self => _1;
    let mut _0: std::string::String;

    bb0: {
        _0 = <usize as ToString>::to_string(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/statics/static-impl.rs:26:1: 26:26>::multi(_1: &usize, _2: F) -> () {
    debug self => _1;
    debug f => _2;
    let mut _0: ();
    let mut _3: usize;
    let mut _4: bool;
    let mut _5: usize;
    let mut _6: usize;
    let _7: ();
    let mut _8: &mut F;
    let mut _9: (usize,);
    let mut _10: usize;
    scope 1 {
        debug c => _3;
    }

    bb0: {
        _3 = const 0_usize;
        goto -> bb1;
    }

    bb1: {
        _5 = _3;
        _6 = (*_1);
        _4 = Lt(move _5, move _6);
        switchInt(move _4) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        _8 = &mut _2;
        _10 = _3;
        _9 = (move _10,);
        _7 = <F as FnMut<(usize,)>>::call_mut(move _8, move _9) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _3 = Add(_3, const 1_usize);
        goto -> bb1;
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn <impl at ui/statics/static-impl.rs:42:1: 42:32>::length_(_1: &Vec<T>) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        _0 = Vec::<T>::len(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/statics/static-impl.rs:42:1: 42:32>::iter_(_1: &Vec<T>, _2: F) -> () {
    debug self => _1;
    debug f => _2;
    let mut _0: ();
    let mut _3: std::slice::Iter<'_, T>;
    let mut _4: std::slice::Iter<'_, T>;
    let mut _5: std::option::Option<&T>;
    let mut _6: &mut std::slice::Iter<'_, T>;
    let mut _7: isize;
    let _9: ();
    let mut _10: &mut F;
    let mut _11: (&T,);
    scope 1 {
        debug iter => _4;
        let _8: &T;
        scope 2 {
            debug x => _8;
        }
    }

    bb0: {
        _3 = <&Vec<T> as IntoIterator>::into_iter(_1) -> [return: bb1, unwind: bb8];
    }

    bb1: {
        _4 = move _3;
        goto -> bb2;
    }

    bb2: {
        _6 = &mut _4;
        _5 = <std::slice::Iter<'_, T> as Iterator>::next(_6) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _8 = ((_5 as Some).0: &T);
        _10 = &mut _2;
        _11 = (_8,);
        _9 = <F as FnMut<(&T,)>>::call_mut(move _10, move _11) -> [return: bb10, unwind: bb8];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        drop(_2) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }

    bb10: {
        goto -> bb2;
    }
}

fn <impl at ui/statics/static-impl.rs:42:1: 42:32>::map_(_1: &Vec<T>, _2: F) -> Vec<U> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::vec::Vec<U>;
    let mut _3: std::vec::Vec<U>;
    let mut _4: std::slice::Iter<'_, T>;
    let mut _6: std::option::Option<&T>;
    let mut _7: &mut std::slice::Iter<'_, T>;
    let mut _8: isize;
    let _10: ();
    let mut _11: &mut std::vec::Vec<U>;
    let mut _12: U;
    let mut _13: &mut F;
    let mut _14: (&T,);
    scope 1 {
        debug r => _3;
        let mut _5: std::slice::Iter<'_, T>;
        scope 2 {
            debug iter => _5;
            let _9: &T;
            scope 3 {
                debug elt => _9;
            }
        }
    }

    bb0: {
        _3 = Vec::<U>::new() -> [return: bb1, unwind: bb11];
    }

    bb1: {
        _4 = <&Vec<T> as IntoIterator>::into_iter(_1) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _5 = move _4;
        goto -> bb3;
    }

    bb3: {
        _7 = &mut _5;
        _6 = <std::slice::Iter<'_, T> as Iterator>::next(_7) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _9 = ((_6 as Some).0: &T);
        _11 = &mut _3;
        _13 = &mut _2;
        _14 = (_9,);
        _12 = <F as FnMut<(&T,)>>::call_mut(move _13, move _14) -> [return: bb8, unwind: bb10];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _0 = move _3;
        drop(_2) -> [return: bb9, unwind continue];
    }

    bb8: {
        _10 = Vec::<U>::push(move _11, move _12) -> [return: bb13, unwind: bb10];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        drop(_2) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        resume;
    }

    bb13: {
        goto -> bb3;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let mut _2: &isize;
    let _3: isize;
    let _4: &isize;
    let _5: &isize;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: isize;
    let mut _9: isize;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&isize, &isize);
    let mut _14: &isize;
    let _15: isize;
    let mut _16: &std::string::String;
    let _17: std::string::String;
    let _18: &str;
    let _19: &isize;
    let _20: &isize;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: isize;
    let mut _24: isize;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: (&std::string::String, &std::string::String);
    let mut _29: &std::string::String;
    let _30: std::string::String;
    let mut _31: &usize;
    let _32: usize;
    let mut _33: &std::vec::Vec<i32>;
    let _34: std::vec::Vec<i32>;
    let mut _35: std::boxed::Box<[i32]>;
    let mut _36: usize;
    let mut _37: usize;
    let mut _38: *mut u8;
    let mut _39: std::boxed::Box<[i32; 1]>;
    let mut _40: &std::string::String;
    let _41: std::string::String;
    let _42: &str;
    let _43: &std::string::String;
    let _44: &std::string::String;
    let mut _45: bool;
    let mut _46: bool;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let _50: std::vec::Vec<i32>;
    let mut _51: &std::vec::Vec<i32>;
    let _52: std::vec::Vec<i32>;
    let mut _53: std::boxed::Box<[i32]>;
    let mut _54: usize;
    let mut _55: usize;
    let mut _56: *mut u8;
    let mut _57: std::boxed::Box<[i32; 2]>;
    let mut _58: (&i32, &i32);
    let mut _59: &i32;
    let _60: &i32;
    let mut _61: &std::vec::Vec<i32>;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: i32;
    let mut _67: i32;
    let _69: !;
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _72: &std::vec::Vec<i32>;
    let _73: std::vec::Vec<i32>;
    let mut _74: std::boxed::Box<[i32]>;
    let mut _75: usize;
    let mut _76: usize;
    let mut _77: *mut u8;
    let mut _78: std::boxed::Box<[i32; 2]>;
    let mut _79: (&usize, &usize);
    let mut _80: &usize;
    let _81: &usize;
    let mut _82: &std::vec::Vec<usize>;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: usize;
    let mut _88: usize;
    let _90: !;
    let mut _91: std::option::Option<std::fmt::Arguments<'_>>;
    let _93: ();
    let mut _94: [closure@ui/statics/static-impl.rs:64:20: 64:24];
    let mut _95: &mut usize;
    let mut _96: (&usize, &usize);
    let mut _97: &usize;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: usize;
    let mut _103: usize;
    let _105: !;
    let mut _106: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _111: &isize;
    let mut _112: &isize;
    let mut _113: &usize;
    let mut _114: *const [i32; 1];
    let mut _115: *const [i32; 2];
    let mut _116: *const [i32; 2];
    let mut _123: *const ();
    let mut _124: usize;
    let mut _125: usize;
    let mut _126: usize;
    let mut _127: usize;
    let mut _128: bool;
    let mut _129: *const ();
    let mut _130: usize;
    let mut _131: usize;
    let mut _132: usize;
    let mut _133: usize;
    let mut _134: bool;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _19;
        debug right_val => _20;
        let _25: core::panicking::AssertKind;
        scope 4 {
            debug kind => _25;
        }
    }
    scope 5 {
    }
    scope 6 {
        debug left_val => _43;
        debug right_val => _44;
        let _47: core::panicking::AssertKind;
        scope 7 {
            debug kind => _47;
        }
    }
    scope 8 {
        debug vect => _50;
        let _62: &i32;
        let _63: &i32;
        let _71: std::vec::Vec<usize>;
        let mut _110: &i32;
        let mut _117: *const ();
        let mut _118: usize;
        let mut _119: usize;
        let mut _120: usize;
        let mut _121: usize;
        let mut _122: bool;
        scope 10 {
            debug left_val => _62;
            debug right_val => _63;
            let _68: core::panicking::AssertKind;
            scope 11 {
                debug kind => _68;
            }
        }
        scope 12 {
            debug vect => _71;
            let _83: &usize;
            let _84: &usize;
            let mut _92: usize;
            let mut _109: &usize;
            scope 14 {
                debug left_val => _83;
                debug right_val => _84;
                let _89: core::panicking::AssertKind;
                scope 15 {
                    debug kind => _89;
                }
            }
            scope 16 {
                debug x => _92;
                let _98: &usize;
                let _99: &usize;
                let mut _107: &usize;
                let mut _108: &usize;
                scope 17 {
                    debug left_val => _98;
                    debug right_val => _99;
                    let _104: core::panicking::AssertKind;
                    scope 18 {
                        debug kind => _104;
                    }
                }
            }
        }
        scope 13 {
        }
    }
    scope 9 {
    }

    bb0: {
        _113 = const _;
        _3 = <usize as plus>::plus(_113) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _112 = const _;
        _1 = (move _2, _112);
        _4 = (_1.0: &isize);
        _5 = (_1.1: &isize);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<isize, isize>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb3: {
        _18 = const "hi";
        _17 = <str as ToString>::to_string(_18) -> [return: bb4, unwind continue];
    }

    bb4: {
        _16 = &_17;
        _15 = <String as plus>::plus(move _16) -> [return: bb5, unwind: bb46];
    }

    bb5: {
        _14 = &_15;
        _111 = const _;
        _13 = (move _14, _111);
        _19 = (_13.0: &isize);
        _20 = (_13.1: &isize);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<isize, isize>(move _25, _19, _20, move _27) -> bb46;
    }

    bb7: {
        drop(_17) -> [return: bb8, unwind continue];
    }

    bb8: {
        _36 = SizeOf([i32; 1]);
        _37 = AlignOf([i32; 1]);
        _38 = alloc::alloc::exchange_malloc(move _36, move _37) -> [return: bb9, unwind continue];
    }

    bb9: {
        _39 = ShallowInitBox(move _38, [i32; 1]);
        _114 = (((_39.0: std::ptr::Unique<[i32; 1]>).0: std::ptr::NonNull<[i32; 1]>).0: *const [i32; 1]);
        _129 = _114 as *const () (PtrToPtr);
        _130 = _129 as usize (Transmute);
        _131 = AlignOf(i32);
        _132 = Sub(_131, const 1_usize);
        _133 = BitAnd(_130, _132);
        _134 = Eq(_133, const 0_usize);
        assert(_134, "misaligned pointer dereference: address must be a multiple of {} but is {}", _131, _130) -> [success: bb50, unwind unreachable];
    }

    bb10: {
        _33 = &_34;
        _32 = <Vec<i32> as vec_utils<i32>>::length_(move _33) -> [return: bb11, unwind: bb45];
    }

    bb11: {
        _31 = &_32;
        _30 = <usize as uint_utils>::str(move _31) -> [return: bb12, unwind: bb45];
    }

    bb12: {
        _29 = &_30;
        _42 = const "1";
        _41 = <str as ToString>::to_string(_42) -> [return: bb13, unwind: bb44];
    }

    bb13: {
        _40 = &_41;
        _28 = (move _29, move _40);
        _43 = (_28.0: &std::string::String);
        _44 = (_28.1: &std::string::String);
        _46 = <String as PartialEq>::eq(_43, _44) -> [return: bb14, unwind: bb43];
    }

    bb14: {
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<String, String>(move _47, _43, _44, move _49) -> bb43;
    }

    bb16: {
        drop(_41) -> [return: bb17, unwind: bb44];
    }

    bb17: {
        drop(_30) -> [return: bb18, unwind: bb45];
    }

    bb18: {
        drop(_34) -> [return: bb19, unwind continue];
    }

    bb19: {
        _54 = SizeOf([i32; 2]);
        _55 = AlignOf([i32; 2]);
        _56 = alloc::alloc::exchange_malloc(move _54, move _55) -> [return: bb20, unwind continue];
    }

    bb20: {
        _57 = ShallowInitBox(move _56, [i32; 2]);
        _115 = (((_57.0: std::ptr::Unique<[i32; 2]>).0: std::ptr::NonNull<[i32; 2]>).0: *const [i32; 2]);
        _123 = _115 as *const () (PtrToPtr);
        _124 = _123 as usize (Transmute);
        _125 = AlignOf(i32);
        _126 = Sub(_125, const 1_usize);
        _127 = BitAnd(_124, _126);
        _128 = Eq(_127, const 0_usize);
        assert(_128, "misaligned pointer dereference: address must be a multiple of {} but is {}", _125, _124) -> [success: bb49, unwind unreachable];
    }

    bb21: {
        _51 = &_52;
        _50 = <Vec<i32> as vec_utils<i32>>::map_::<i32, [closure@ui/statics/static-impl.rs:59:32: 59:35]>(move _51, const ZeroSized: [closure@ui/statics/static-impl.rs:59:32: 59:35]) -> [return: bb22, unwind: bb42];
    }

    bb22: {
        drop(_52) -> [return: bb23, unwind: bb41];
    }

    bb23: {
        _61 = &_50;
        _60 = <Vec<i32> as Index<usize>>::index(move _61, const 0_usize) -> [return: bb24, unwind: bb41];
    }

    bb24: {
        _59 = _60;
        _110 = const _;
        _58 = (move _59, _110);
        _62 = (_58.0: &i32);
        _63 = (_58.1: &i32);
        _66 = (*_62);
        _67 = (*_63);
        _65 = Eq(move _66, move _67);
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _68 = core::panicking::AssertKind::Eq;
        _70 = Option::<Arguments<'_>>::None;
        _69 = core::panicking::assert_failed::<i32, i32>(move _68, _62, _63, move _70) -> bb41;
    }

    bb26: {
        _75 = SizeOf([i32; 2]);
        _76 = AlignOf([i32; 2]);
        _77 = alloc::alloc::exchange_malloc(move _75, move _76) -> [return: bb27, unwind: bb41];
    }

    bb27: {
        _78 = ShallowInitBox(move _77, [i32; 2]);
        _116 = (((_78.0: std::ptr::Unique<[i32; 2]>).0: std::ptr::NonNull<[i32; 2]>).0: *const [i32; 2]);
        _117 = _116 as *const () (PtrToPtr);
        _118 = _117 as usize (Transmute);
        _119 = AlignOf(i32);
        _120 = Sub(_119, const 1_usize);
        _121 = BitAnd(_118, _120);
        _122 = Eq(_121, const 0_usize);
        assert(_122, "misaligned pointer dereference: address must be a multiple of {} but is {}", _119, _118) -> [success: bb48, unwind unreachable];
    }

    bb28: {
        _72 = &_73;
        _71 = <Vec<i32> as vec_utils<i32>>::map_::<usize, [closure@ui/statics/static-impl.rs:61:46: 61:49]>(move _72, const ZeroSized: [closure@ui/statics/static-impl.rs:61:46: 61:49]) -> [return: bb29, unwind: bb40];
    }

    bb29: {
        drop(_73) -> [return: bb30, unwind: bb39];
    }

    bb30: {
        _82 = &_71;
        _81 = <Vec<usize> as Index<usize>>::index(move _82, const 0_usize) -> [return: bb31, unwind: bb39];
    }

    bb31: {
        _80 = _81;
        _109 = const _;
        _79 = (move _80, _109);
        _83 = (_79.0: &usize);
        _84 = (_79.1: &usize);
        _87 = (*_83);
        _88 = (*_84);
        _86 = Eq(move _87, move _88);
        _85 = Not(move _86);
        switchInt(move _85) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _89 = core::panicking::AssertKind::Eq;
        _91 = Option::<Arguments<'_>>::None;
        _90 = core::panicking::assert_failed::<usize, usize>(move _89, _83, _84, move _91) -> bb39;
    }

    bb33: {
        _92 = const 0_usize;
        _108 = const _;
        _95 = &mut _92;
        _94 = [closure@ui/statics/static-impl.rs:64:20: 64:24] { x: move _95 };
        _93 = <usize as uint_utils>::multi::<[closure@ui/statics/static-impl.rs:64:20: 64:24]>(_108, move _94) -> [return: bb34, unwind: bb39];
    }

    bb34: {
        _97 = &_92;
        _107 = const _;
        _96 = (move _97, _107);
        _98 = (_96.0: &usize);
        _99 = (_96.1: &usize);
        _102 = (*_98);
        _103 = (*_99);
        _101 = Eq(move _102, move _103);
        _100 = Not(move _101);
        switchInt(move _100) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _104 = core::panicking::AssertKind::Eq;
        _106 = Option::<Arguments<'_>>::None;
        _105 = core::panicking::assert_failed::<usize, usize>(move _104, _98, _99, move _106) -> bb39;
    }

    bb36: {
        drop(_71) -> [return: bb37, unwind: bb41];
    }

    bb37: {
        drop(_50) -> [return: bb38, unwind continue];
    }

    bb38: {
        return;
    }

    bb39 (cleanup): {
        drop(_71) -> [return: bb41, unwind terminate];
    }

    bb40 (cleanup): {
        drop(_73) -> [return: bb41, unwind terminate];
    }

    bb41 (cleanup): {
        drop(_50) -> [return: bb47, unwind terminate];
    }

    bb42 (cleanup): {
        drop(_52) -> [return: bb47, unwind terminate];
    }

    bb43 (cleanup): {
        drop(_41) -> [return: bb44, unwind terminate];
    }

    bb44 (cleanup): {
        drop(_30) -> [return: bb45, unwind terminate];
    }

    bb45 (cleanup): {
        drop(_34) -> [return: bb47, unwind terminate];
    }

    bb46 (cleanup): {
        drop(_17) -> [return: bb47, unwind terminate];
    }

    bb47 (cleanup): {
        resume;
    }

    bb48: {
        (*_116) = [const 3_i32, const 4_i32];
        _74 = move _78 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _73 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _74) -> [return: bb28, unwind: bb41];
    }

    bb49: {
        (*_115) = [const 3_i32, const 4_i32];
        _53 = move _57 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _52 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _53) -> [return: bb21, unwind continue];
    }

    bb50: {
        (*_114) = [const 1_i32];
        _35 = move _39 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _34 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _35) -> [return: bb10, unwind continue];
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 20_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 10_usize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 7_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 7_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 200_isize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 30_isize;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 10_usize;
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/statics/static-impl.rs:59:32: 59:35], _2: &i32) -> i32 {
    debug a => _2;
    let mut _0: i32;
    let mut _3: i32;

    bb0: {
        _3 = (*_2);
        _0 = Add(move _3, const 4_i32);
        return;
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/statics/static-impl.rs:61:46: 61:49], _2: &i32) -> usize {
    debug a => _2;
    let mut _0: usize;
    let mut _3: usize;
    let mut _4: i32;

    bb0: {
        _4 = (*_2);
        _3 = move _4 as usize (IntToInt);
        _0 = Add(move _3, const 4_usize);
        return;
    }
}

fn main::{closure#2}(_1: &mut [closure@ui/statics/static-impl.rs:64:20: 64:24], _2: usize) -> () {
    debug _n => _2;
    debug x => (*((*_1).0: &mut usize));
    let mut _0: ();
    let mut _3: &mut usize;
    let mut _4: &mut usize;

    bb0: {
        _3 = deref_copy ((*_1).0: &mut usize);
        _4 = deref_copy ((*_1).0: &mut usize);
        (*_3) = Add((*_4), const 2_usize);
        return;
    }
}
