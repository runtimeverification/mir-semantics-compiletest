// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: isize) -> isize {
    debug x => _1;
    let mut _0: isize;

    bb0: {
        _0 = _1;
        return;
    }
}

fn g(_1: isize) -> isize {
    debug x => _1;
    let mut _0: isize;

    bb0: {
        _0 = Mul(const 2_isize, _1);
        return;
    }
}

static F: fn(isize) -> isize = {
    let mut _0: fn(isize) -> isize;

    bb0: {
        _0 = f as fn(isize) -> isize (Pointer(ReifyFnPointer));
        return;
    }
}

static mut G: fn(isize) -> isize = {
    let mut _0: fn(isize) -> isize;

    bb0: {
        _0 = f as fn(isize) -> isize (Pointer(ReifyFnPointer));
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let mut _2: &isize;
    let _3: isize;
    let mut _4: fn(isize) -> isize;
    let mut _5: &fn(isize) -> isize;
    let _6: &isize;
    let _7: &isize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: isize;
    let mut _11: isize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&isize, &isize);
    let mut _16: &isize;
    let _17: isize;
    let mut _18: fn(isize) -> isize;
    let mut _19: *mut fn(isize) -> isize;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: isize;
    let mut _25: isize;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: *mut fn(isize) -> isize;
    let mut _30: (&isize, &isize);
    let mut _31: &isize;
    let _32: isize;
    let mut _33: fn(isize) -> isize;
    let mut _34: *mut fn(isize) -> isize;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: isize;
    let mut _40: isize;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _46: &isize;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        let _20: &isize;
        let _21: &isize;
        let _35: &isize;
        let _36: &isize;
        let mut _44: &isize;
        let mut _45: &isize;
        let mut _47: *const ();
        let mut _48: usize;
        let mut _49: usize;
        let mut _50: usize;
        let mut _51: usize;
        let mut _52: bool;
        let mut _53: *const ();
        let mut _54: usize;
        let mut _55: usize;
        let mut _56: usize;
        let mut _57: usize;
        let mut _58: bool;
        let mut _59: *const ();
        let mut _60: usize;
        let mut _61: usize;
        let mut _62: usize;
        let mut _63: usize;
        let mut _64: bool;
        scope 4 {
            debug left_val => _20;
            debug right_val => _21;
            let _26: core::panicking::AssertKind;
            scope 5 {
                debug kind => _26;
            }
        }
        scope 6 {
            debug left_val => _35;
            debug right_val => _36;
            let _41: core::panicking::AssertKind;
            scope 7 {
                debug kind => _41;
            }
        }
    }

    bb0: {
        _5 = const {alloc1: &fn(isize) -> isize};
        _4 = (*_5);
        _3 = move _4(const 42_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _46 = const _;
        _1 = (move _2, _46);
        _6 = (_1.0: &isize);
        _7 = (_1.1: &isize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<isize, isize>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        _19 = const {alloc2: *mut fn(isize) -> isize};
        _59 = _19 as *const () (PtrToPtr);
        _60 = _59 as usize (Transmute);
        _61 = AlignOf(fn(isize) -> isize);
        _62 = Sub(_61, const 1_usize);
        _63 = BitAnd(_60, _62);
        _64 = Eq(_63, const 0_usize);
        assert(_64, "misaligned pointer dereference: address must be a multiple of {} but is {}", _61, _60) -> [success: bb12, unwind unreachable];
    }

    bb4: {
        _16 = &_17;
        _45 = const _;
        _15 = (move _16, _45);
        _20 = (_15.0: &isize);
        _21 = (_15.1: &isize);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<isize, isize>(move _26, _20, _21, move _28) -> unwind continue;
    }

    bb6: {
        _29 = const {alloc2: *mut fn(isize) -> isize};
        _53 = _29 as *const () (PtrToPtr);
        _54 = _53 as usize (Transmute);
        _55 = AlignOf(fn(isize) -> isize);
        _56 = Sub(_55, const 1_usize);
        _57 = BitAnd(_54, _56);
        _58 = Eq(_57, const 0_usize);
        assert(_58, "misaligned pointer dereference: address must be a multiple of {} but is {}", _55, _54) -> [success: bb11, unwind unreachable];
    }

    bb7: {
        _31 = &_32;
        _44 = const _;
        _30 = (move _31, _44);
        _35 = (_30.0: &isize);
        _36 = (_30.1: &isize);
        _39 = (*_35);
        _40 = (*_36);
        _38 = Eq(move _39, move _40);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<isize, isize>(move _41, _35, _36, move _43) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        _33 = (*_34);
        _32 = move _33(const 42_isize) -> [return: bb7, unwind continue];
    }

    bb11: {
        (*_29) = g as fn(isize) -> isize (Pointer(ReifyFnPointer));
        _34 = const {alloc2: *mut fn(isize) -> isize};
        _47 = _34 as *const () (PtrToPtr);
        _48 = _47 as usize (Transmute);
        _49 = AlignOf(fn(isize) -> isize);
        _50 = Sub(_49, const 1_usize);
        _51 = BitAnd(_48, _50);
        _52 = Eq(_51, const 0_usize);
        assert(_52, "misaligned pointer dereference: address must be a multiple of {} but is {}", _49, _48) -> [success: bb10, unwind unreachable];
    }

    bb12: {
        _18 = (*_19);
        _17 = move _18(const 42_isize) -> [return: bb4, unwind continue];
    }
}

alloc2 (static: G, size: 8, align: 8) {
    ╾───────alloc7────────╼                         │ ╾──────╼
}

alloc7 (fn: f)

alloc1 (static: F, size: 8, align: 8) {
    ╾───────alloc7────────╼                         │ ╾──────╼
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 84_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 42_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 42_isize;
        _0 = &_1;
        return;
    }
}
