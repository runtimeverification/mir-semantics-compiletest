// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/statics/static-methods-in-traits2.rs:8:1: 8:20>::from(_1: T) -> f64 {
    debug n => _1;                       // in scope 0 at ui/statics/static-methods-in-traits2.rs:9:23: 9:24
    let mut _0: f64;                     // return place in scope 0 at ui/statics/static-methods-in-traits2.rs:9:32: 9:35
    let mut _2: &T;                      // in scope 0 at ui/statics/static-methods-in-traits2.rs:9:38: 9:50

    bb0: {
        _2 = &_1;                        // scope 0 at ui/statics/static-methods-in-traits2.rs:9:38: 9:50
        _0 = <T as NumConv>::to_float(move _2) -> [return: bb1, unwind: bb3]; // scope 0 at ui/statics/static-methods-in-traits2.rs:9:38: 9:50
                                         // mir::Constant
                                         // + span: ui/statics/static-methods-in-traits2.rs:9:40: 9:48
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> f64 {<T as NumConv>::to_float}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/statics/static-methods-in-traits2.rs:9:51: 9:52
    }

    bb2: {
        return;                          // scope 0 at ui/statics/static-methods-in-traits2.rs:9:52: 9:52
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/statics/static-methods-in-traits2.rs:9:51: 9:52
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/statics/static-methods-in-traits2.rs:9:5: 9:52
    }
}

fn <impl at ui/statics/static-methods-in-traits2.rs:16:1: 16:21>::to_float(_1: &f64) -> f64 {
    debug self => _1;                    // in scope 0 at ui/statics/static-methods-in-traits2.rs:17:17: 17:22
    let mut _0: f64;                     // return place in scope 0 at ui/statics/static-methods-in-traits2.rs:17:27: 17:30

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/statics/static-methods-in-traits2.rs:17:33: 17:38
        return;                          // scope 0 at ui/statics/static-methods-in-traits2.rs:17:40: 17:40
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/statics/static-methods-in-traits2.rs:20:15: 20:15
    let mut _1: f64;                     // in scope 0 at ui/statics/static-methods-in-traits2.rs:21:18: 21:38
    scope 1 {
    }

    bb0: {
        _1 = <f64 as Number>::from::<f64>(const 0f64) -> bb1; // scope 0 at ui/statics/static-methods-in-traits2.rs:21:18: 21:38
                                         // mir::Constant
                                         // + span: ui/statics/static-methods-in-traits2.rs:21:18: 21:30
                                         // + literal: Const { ty: fn(f64) -> f64 {<f64 as Number>::from::<f64>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/statics/static-methods-in-traits2.rs:22:2: 22:2
    }
}
