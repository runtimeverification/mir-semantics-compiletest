// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static FOO: Foo = {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(const true);
        return;
    }
}

static CONTAINER: Container = {
    let mut _0: Container;
    let mut _1: &[&Foo];
    let mut _2: &[&Foo; 1];
    let _3: &[&Foo; 1];
    let _4: [&Foo; 1];
    let mut _5: &Foo;
    let _6: &Foo;
    let _7: &Foo;
    let mut _8: &[&Foo; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _8 = const _;
        _3 = &(*_8);
        _2 = &(*_3);
        _1 = move _2 as &[&Foo] (Pointer(Unsize));
        StorageDead(_2);
        _0 = Container(move _1);
        StorageDead(_3);
        StorageDead(_1);
        return;
    }
}

promoted[0] in CONTAINER: &[&Foo; 1] = {
    let mut _0: &[&Foo; 1];
    let mut _1: [&Foo; 1];
    let mut _2: &Foo;
    let mut _3: &Foo;
    let mut _4: &Foo;

    bb0: {
        _4 = const {alloc1: &Foo};
        _3 = &(*_4);
        _2 = &(*_3);
        _1 = [move _2];
        _0 = &_1;
        return;
    }
}

alloc1 (static: FOO, size: 1, align: 1) {
    01                                              â”‚ .
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Foo(_1: bool) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: bool) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}

fn Container(_1: &[&Foo]) -> Container {
    let mut _0: Container;

    bb0: {
        _0 = Container(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Container(_1: &[&Foo]) -> Container {
    let mut _0: Container;

    bb0: {
        _0 = Container(move _1);
        return;
    }
}
