// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut S: *const u8 = {
    let mut _0: *const u8;
    let mut _1: *const *const u8;
    let _2: &*const u8;
    let _3: *mut *const u8;
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const {alloc1: *mut *const u8};
        _2 = &(*_3);
        _1 = &raw const (*_2);
        _0 = move _1 as *const u8 (PtrToPtr);
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

alloc1 (static: S, size: 8, align: 8) {
    ╾───────alloc1────────╼                         │ ╾──────╼
}

static L1: StaticDoubleLinked = {
    let mut _0: StaticDoubleLinked;
    let mut _1: &StaticDoubleLinked;
    let _2: &StaticDoubleLinked;
    let _3: &StaticDoubleLinked;
    let mut _4: &StaticDoubleLinked;
    let _5: &StaticDoubleLinked;
    let _6: &StaticDoubleLinked;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const {alloc2: &StaticDoubleLinked};
        _2 = &(*_3);
        _1 = &(*_2);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = const {alloc3: &StaticDoubleLinked};
        _5 = &(*_6);
        _4 = &(*_5);
        _0 = StaticDoubleLinked { prev: move _1, next: move _4, data: const 1_i32, head: const true };
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

alloc3 (static: L2, size: 24, align: 8) {
    0x00 │ ╾───────alloc4────────╼ ╾───────alloc2────────╼ │ ╾──────╼╾──────╼
    0x10 │ 02 00 00 00 00 __ __ __                         │ .....░░░
}

alloc4 (static: L1, size: 24, align: 8) {
    0x00 │ ╾───────alloc2────────╼ ╾───────alloc3────────╼ │ ╾──────╼╾──────╼
    0x10 │ 01 00 00 00 01 __ __ __                         │ .....░░░
}

alloc2 (static: L3, size: 24, align: 8) {
    0x00 │ ╾───────alloc3────────╼ ╾───────alloc4────────╼ │ ╾──────╼╾──────╼
    0x10 │ 03 00 00 00 00 __ __ __                         │ .....░░░
}

static L2: StaticDoubleLinked = {
    let mut _0: StaticDoubleLinked;
    let mut _1: &StaticDoubleLinked;
    let _2: &StaticDoubleLinked;
    let _3: &StaticDoubleLinked;
    let mut _4: &StaticDoubleLinked;
    let _5: &StaticDoubleLinked;
    let _6: &StaticDoubleLinked;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const {alloc4: &StaticDoubleLinked};
        _2 = &(*_3);
        _1 = &(*_2);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = const {alloc2: &StaticDoubleLinked};
        _5 = &(*_6);
        _4 = &(*_5);
        _0 = StaticDoubleLinked { prev: move _1, next: move _4, data: const 2_i32, head: const false };
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

alloc4 (static: L1, size: 24, align: 8) {
    0x00 │ ╾───────alloc2────────╼ ╾───────alloc3────────╼ │ ╾──────╼╾──────╼
    0x10 │ 01 00 00 00 01 __ __ __                         │ .....░░░
}

alloc3 (static: L2, size: 24, align: 8) {
    0x00 │ ╾───────alloc4────────╼ ╾───────alloc2────────╼ │ ╾──────╼╾──────╼
    0x10 │ 02 00 00 00 00 __ __ __                         │ .....░░░
}

alloc2 (static: L3, size: 24, align: 8) {
    0x00 │ ╾───────alloc3────────╼ ╾───────alloc4────────╼ │ ╾──────╼╾──────╼
    0x10 │ 03 00 00 00 00 __ __ __                         │ .....░░░
}

static L3: StaticDoubleLinked = {
    let mut _0: StaticDoubleLinked;
    let mut _1: &StaticDoubleLinked;
    let _2: &StaticDoubleLinked;
    let _3: &StaticDoubleLinked;
    let mut _4: &StaticDoubleLinked;
    let _5: &StaticDoubleLinked;
    let _6: &StaticDoubleLinked;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const {alloc3: &StaticDoubleLinked};
        _2 = &(*_3);
        _1 = &(*_2);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = const {alloc4: &StaticDoubleLinked};
        _5 = &(*_6);
        _4 = &(*_5);
        _0 = StaticDoubleLinked { prev: move _1, next: move _4, data: const 3_i32, head: const false };
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

alloc4 (static: L1, size: 24, align: 8) {
    0x00 │ ╾───────alloc2────────╼ ╾───────alloc3────────╼ │ ╾──────╼╾──────╼
    0x10 │ 01 00 00 00 01 __ __ __                         │ .....░░░
}

alloc2 (static: L3, size: 24, align: 8) {
    0x00 │ ╾───────alloc3────────╼ ╾───────alloc4────────╼ │ ╾──────╼╾──────╼
    0x10 │ 03 00 00 00 00 __ __ __                         │ .....░░░
}

alloc3 (static: L2, size: 24, align: 8) {
    0x00 │ ╾───────alloc4────────╼ ╾───────alloc2────────╼ │ ╾──────╼╾──────╼
    0x10 │ 02 00 00 00 00 __ __ __                         │ .....░░░
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&*const u8, &*const u8);
    let mut _2: &*const u8;
    let _3: *mut *const u8;
    let mut _4: &*const u8;
    let _5: *const *const u8;
    let mut _6: *const u8;
    let mut _7: *mut *const u8;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: *const u8;
    let mut _13: *const u8;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: std::vec::Vec<i32>;
    let _19: &StaticDoubleLinked;
    let _20: ();
    let mut _21: &mut std::vec::Vec<i32>;
    let mut _22: i32;
    let mut _23: bool;
    let mut _24: (&&std::vec::Vec<i32>, &&[i32; 3]);
    let mut _25: &&std::vec::Vec<i32>;
    let _26: &std::vec::Vec<i32>;
    let mut _29: bool;
    let mut _30: bool;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let _36: &StaticDoubleLinked;
    let _37: ();
    let mut _38: &mut std::vec::Vec<i32>;
    let mut _39: i32;
    let mut _40: bool;
    let mut _41: (&&std::vec::Vec<i32>, &&[i32; 3]);
    let mut _42: &&std::vec::Vec<i32>;
    let _43: &std::vec::Vec<i32>;
    let mut _46: bool;
    let mut _47: bool;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: &StaticDoubleLinked;
    let mut _54: &StaticDoubleLinked;
    scope 1 {
        let _8: &*const u8;
        let _9: &*const u8;
        let mut _55: *const ();
        let mut _56: usize;
        let mut _57: usize;
        let mut _58: usize;
        let mut _59: usize;
        let mut _60: bool;
        let mut _61: *const ();
        let mut _62: usize;
        let mut _63: usize;
        let mut _64: usize;
        let mut _65: usize;
        let mut _66: bool;
        let mut _67: *const ();
        let mut _68: usize;
        let mut _69: usize;
        let mut _70: usize;
        let mut _71: usize;
        let mut _72: bool;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
    }
    scope 4 {
        debug test_vec => _17;
        let mut _18: &StaticDoubleLinked;
        scope 5 {
            debug cur => _18;
            let _27: &&std::vec::Vec<i32>;
            let _28: &&[i32; 3];
            let mut _34: std::vec::Vec<i32>;
            let mut _52: &&[i32; 3];
            scope 6 {
                debug left_val => _27;
                debug right_val => _28;
                let _31: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _31;
                }
            }
            scope 8 {
                debug test_vec => _34;
                let mut _35: &StaticDoubleLinked;
                scope 9 {
                    debug cur => _35;
                    let _44: &&std::vec::Vec<i32>;
                    let _45: &&[i32; 3];
                    let mut _51: &&[i32; 3];
                    scope 10 {
                        debug left_val => _44;
                        debug right_val => _45;
                        let _48: core::panicking::AssertKind;
                        scope 11 {
                            debug kind => _48;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = const {alloc1: *mut *const u8};
        _67 = _3 as *const () (PtrToPtr);
        _68 = _67 as usize (Transmute);
        _69 = AlignOf(*const u8);
        _70 = Sub(_69, const 1_usize);
        _71 = BitAnd(_68, _70);
        _72 = Eq(_71, const 0_usize);
        assert(_72, "misaligned pointer dereference: address must be a multiple of {} but is {}", _69, _68) -> [success: bb24, unwind unreachable];
    }

    bb1: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<*const u8, *const u8>(move _14, _8, _9, move _16) -> unwind continue;
    }

    bb2: {
        _17 = Vec::<i32>::new() -> [return: bb3, unwind continue];
    }

    bb3: {
        _19 = const {alloc4: &StaticDoubleLinked};
        _18 = _19;
        goto -> bb4;
    }

    bb4: {
        _21 = &mut _17;
        _22 = ((*_18).2: i32);
        _20 = Vec::<i32>::push(move _21, move _22) -> [return: bb5, unwind: bb20];
    }

    bb5: {
        _53 = deref_copy ((*_18).1: &StaticDoubleLinked);
        _18 = _53;
        _23 = ((*_18).3: bool);
        switchInt(move _23) -> [0: bb4, otherwise: bb6];
    }

    bb6: {
        _26 = &_17;
        _25 = &_26;
        _52 = const _;
        _24 = (move _25, _52);
        _27 = (_24.0: &&std::vec::Vec<i32>);
        _28 = (_24.1: &&[i32; 3]);
        _30 = <&Vec<i32> as PartialEq<&[i32; 3]>>::eq(_27, _28) -> [return: bb7, unwind: bb20];
    }

    bb7: {
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<&Vec<i32>, &[i32; 3]>(move _31, _27, _28, move _33) -> bb20;
    }

    bb9: {
        _34 = Vec::<i32>::new() -> [return: bb10, unwind: bb20];
    }

    bb10: {
        _36 = const {alloc4: &StaticDoubleLinked};
        _35 = _36;
        goto -> bb11;
    }

    bb11: {
        _54 = deref_copy ((*_35).0: &StaticDoubleLinked);
        _35 = _54;
        _38 = &mut _34;
        _39 = ((*_35).2: i32);
        _37 = Vec::<i32>::push(move _38, move _39) -> [return: bb12, unwind: bb19];
    }

    bb12: {
        _40 = ((*_35).3: bool);
        switchInt(move _40) -> [0: bb11, otherwise: bb13];
    }

    bb13: {
        _43 = &_34;
        _42 = &_43;
        _51 = const _;
        _41 = (move _42, _51);
        _44 = (_41.0: &&std::vec::Vec<i32>);
        _45 = (_41.1: &&[i32; 3]);
        _47 = <&Vec<i32> as PartialEq<&[i32; 3]>>::eq(_44, _45) -> [return: bb14, unwind: bb19];
    }

    bb14: {
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<&Vec<i32>, &[i32; 3]>(move _48, _44, _45, move _50) -> bb19;
    }

    bb16: {
        drop(_34) -> [return: bb17, unwind: bb20];
    }

    bb17: {
        drop(_17) -> [return: bb18, unwind continue];
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        drop(_34) -> [return: bb20, unwind terminate];
    }

    bb20 (cleanup): {
        drop(_17) -> [return: bb21, unwind terminate];
    }

    bb21 (cleanup): {
        resume;
    }

    bb22: {
        _4 = &(*_5);
        _1 = (move _2, move _4);
        _8 = (_1.0: &*const u8);
        _9 = (_1.1: &*const u8);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb2, otherwise: bb1];
    }

    bb23: {
        _6 = (*_7);
        _5 = move _6 as *const *const u8 (PtrToPtr);
        _55 = _5 as *const () (PtrToPtr);
        _56 = _55 as usize (Transmute);
        _57 = AlignOf(*const u8);
        _58 = Sub(_57, const 1_usize);
        _59 = BitAnd(_56, _58);
        _60 = Eq(_59, const 0_usize);
        assert(_60, "misaligned pointer dereference: address must be a multiple of {} but is {}", _57, _56) -> [success: bb22, unwind unreachable];
    }

    bb24: {
        _2 = &(*_3);
        _7 = const {alloc1: *mut *const u8};
        _61 = _7 as *const () (PtrToPtr);
        _62 = _61 as usize (Transmute);
        _63 = AlignOf(*const u8);
        _64 = Sub(_63, const 1_usize);
        _65 = BitAnd(_62, _64);
        _66 = Eq(_65, const 0_usize);
        assert(_66, "misaligned pointer dereference: address must be a multiple of {} but is {}", _63, _62) -> [success: bb23, unwind unreachable];
    }
}

alloc4 (static: L1, size: 24, align: 8) {
    0x00 │ ╾───────alloc2────────╼ ╾───────alloc3────────╼ │ ╾──────╼╾──────╼
    0x10 │ 01 00 00 00 01 __ __ __                         │ .....░░░
}

alloc2 (static: L3, size: 24, align: 8) {
    0x00 │ ╾───────alloc3────────╼ ╾───────alloc4────────╼ │ ╾──────╼╾──────╼
    0x10 │ 03 00 00 00 00 __ __ __                         │ .....░░░
}

alloc3 (static: L2, size: 24, align: 8) {
    0x00 │ ╾───────alloc4────────╼ ╾───────alloc2────────╼ │ ╾──────╼╾──────╼
    0x10 │ 02 00 00 00 00 __ __ __                         │ .....░░░
}

alloc1 (static: S, size: 8, align: 8) {
    ╾───────alloc1────────╼                         │ ╾──────╼
}

promoted[0] in main: &&[i32; 3] = {
    let mut _0: &&[i32; 3];
    let mut _1: &[i32; 3];
    let mut _2: [i32; 3];

    bb0: {
        _2 = [const 3_i32, const 2_i32, const 1_i32];
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&[i32; 3] = {
    let mut _0: &&[i32; 3];
    let mut _1: &[i32; 3];
    let mut _2: [i32; 3];

    bb0: {
        _2 = [const 1_i32, const 2_i32, const 3_i32];
        _1 = &_2;
        _0 = &_1;
        return;
    }
}
