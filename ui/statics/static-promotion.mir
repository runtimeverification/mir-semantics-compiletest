// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static STR: &[u8] = {
    let mut _0: &[u8];
    let mut _1: &[u8; 2];
    let _2: &[u8; 2];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const b"hi";
        _1 = &(*_2);
        _0 = move _1 as &[u8] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

alloc1 (size: 2, align: 1) {
    68 69                                           │ hi
}

static C: A<B<B<[u8]>>> = {
    let mut _0: A<B<B<[u8]>>>;
    let mut _1: &B<B<[u8]>>;
    let _2: &B<B<[u8]>>;
    let _3: B<B<[u8]>>;
    let mut _4: &B<[u8]>;
    let _5: &B<[u8]>;
    let _6: B<[u8]>;
    let mut _7: &[u8];
    let mut _8: &&[u8];
    let mut _9: &B<B<[u8]>>;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _9 = const _;
        _2 = &(*_9);
        _1 = &(*_2);
        _0 = A::<B<B<[u8]>>>(move _1);
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

promoted[0] in C: &B<B<[u8]>> = {
    let mut _0: &B<B<[u8]>>;
    let mut _1: B<B<[u8]>>;
    let mut _2: &B<[u8]>;
    let mut _3: &B<[u8]>;
    let mut _4: B<[u8]>;
    let mut _5: &[u8];
    let mut _6: &&[u8];

    bb0: {
        _6 = const {alloc2: &&[u8]};
        _5 = (*_6);
        _4 = B::<[u8]> { x: move _5 };
        _3 = &_4;
        _2 = &(*_3);
        _1 = B::<B<[u8]>> { x: move _2 };
        _0 = &_1;
        return;
    }
}

alloc2 (static: STR, size: 16, align: 8) {
    ╾───────alloc1────────╼ 02 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc1 (size: 2, align: 1) {
    68 69                                           │ hi
}

static CONTENT: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const 42_i32;
        return;
    }
}

static CONTENT_MAP: Slice = {
    let mut _0: Slice;
    let mut _1: &[i32];
    let mut _2: &[i32; 1];
    let _3: &[i32; 1];
    let _4: [i32; 1];
    let mut _5: i32;
    let mut _6: &i32;
    let mut _7: &[i32; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _7 = const _;
        _3 = &(*_7);
        _2 = &(*_3);
        _1 = move _2 as &[i32] (Pointer(Unsize));
        StorageDead(_2);
        _0 = Slice(move _1);
        StorageDead(_3);
        StorageDead(_1);
        return;
    }
}

promoted[0] in CONTENT_MAP: &[i32; 1] = {
    let mut _0: &[i32; 1];
    let mut _1: [i32; 1];
    let mut _2: i32;
    let mut _3: &i32;

    bb0: {
        _3 = const {alloc3: &i32};
        _2 = (*_3);
        _1 = [move _2];
        _0 = &_1;
        return;
    }
}

alloc3 (static: CONTENT, size: 4, align: 4) {
    2a 00 00 00                                     │ *...
}

static FOO: (i32, i32) = {
    let mut _0: (i32, i32);

    bb0: {
        _0 = (const 42_i32, const 43_i32);
        return;
    }
}

static CONTENT_MAP2: Slice = {
    let mut _0: Slice;
    let mut _1: &[i32];
    let mut _2: &[i32; 1];
    let _3: &[i32; 1];
    let _4: [i32; 1];
    let mut _5: i32;
    let mut _6: &(i32, i32);
    let mut _7: &[i32; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _7 = const _;
        _3 = &(*_7);
        _2 = &(*_3);
        _1 = move _2 as &[i32] (Pointer(Unsize));
        StorageDead(_2);
        _0 = Slice(move _1);
        StorageDead(_3);
        StorageDead(_1);
        return;
    }
}

promoted[0] in CONTENT_MAP2: &[i32; 1] = {
    let mut _0: &[i32; 1];
    let mut _1: [i32; 1];
    let mut _2: i32;
    let mut _3: &(i32, i32);

    bb0: {
        _3 = const {alloc4: &(i32, i32)};
        _2 = ((*_3).0: i32);
        _1 = [move _2];
        _0 = &_1;
        return;
    }
}

alloc4 (static: FOO, size: 8, align: 4) {
    2a 00 00 00 2b 00 00 00                         │ *...+...
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&&[u8; 2], &&[u8]);
    let mut _2: &&[u8];
    let _3: &A<B<B<[u8]>>>;
    let _4: &&[u8; 2];
    let _5: &&[u8];
    let mut _6: bool;
    let mut _7: bool;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&&[i32; 1], &&[i32]);
    let mut _12: &&[i32];
    let _13: &Slice;
    let _14: &&[i32; 1];
    let _15: &&[i32];
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&&[i32; 1], &&[i32]);
    let mut _22: &&[i32];
    let _23: &Slice;
    let _24: &&[i32; 1];
    let _25: &&[i32];
    let mut _26: bool;
    let mut _27: bool;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: &&[i32; 1];
    let mut _32: &&[i32; 1];
    let mut _33: &&[u8; 2];
    let mut _34: &B<B<[u8]>>;
    let mut _35: &B<[u8]>;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _14;
        debug right_val => _15;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug left_val => _24;
        debug right_val => _25;
        let _28: core::panicking::AssertKind;
        scope 6 {
            debug kind => _28;
        }
    }

    bb0: {
        _33 = const _;
        _3 = const {alloc5: &A<B<B<[u8]>>>};
        _34 = deref_copy ((*_3).0: &B<B<[u8]>>);
        _35 = deref_copy ((*_34).0: &B<[u8]>);
        _2 = &((*_35).0: &[u8]);
        _1 = (_33, move _2);
        _4 = (_1.0: &&[u8; 2]);
        _5 = (_1.1: &&[u8]);
        _7 = <&[u8; 2] as PartialEq<&[u8]>>::eq(_4, _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<&[u8; 2], &[u8]>(move _8, _4, _5, move _10) -> unwind continue;
    }

    bb3: {
        _32 = const _;
        _13 = const {alloc6: &Slice};
        _12 = &((*_13).0: &[i32]);
        _11 = (_32, move _12);
        _14 = (_11.0: &&[i32; 1]);
        _15 = (_11.1: &&[i32]);
        _17 = <&[i32; 1] as PartialEq<&[i32]>>::eq(_14, _15) -> [return: bb4, unwind continue];
    }

    bb4: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<&[i32; 1], &[i32]>(move _18, _14, _15, move _20) -> unwind continue;
    }

    bb6: {
        _31 = const _;
        _23 = const {alloc7: &Slice};
        _22 = &((*_23).0: &[i32]);
        _21 = (_31, move _22);
        _24 = (_21.0: &&[i32; 1]);
        _25 = (_21.1: &&[i32]);
        _27 = <&[i32; 1] as PartialEq<&[i32]>>::eq(_24, _25) -> [return: bb7, unwind continue];
    }

    bb7: {
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<&[i32; 1], &[i32]>(move _28, _24, _25, move _30) -> unwind continue;
    }

    bb9: {
        return;
    }
}

alloc7 (static: CONTENT_MAP2, size: 16, align: 8) {
    ╾───────alloc42───────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc42 (size: 4, align: 4) {
    2a 00 00 00                                     │ *...
}

alloc6 (static: CONTENT_MAP, size: 16, align: 8) {
    ╾───────alloc36───────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc36 (size: 4, align: 4) {
    2a 00 00 00                                     │ *...
}

alloc5 (static: C, size: 8, align: 8) {
    ╾───────alloc16───────╼                         │ ╾──────╼
}

alloc16 (size: 8, align: 8) {
    ╾───────alloc15───────╼                         │ ╾──────╼
}

alloc15 (size: 16, align: 8) {
    ╾───────alloc1────────╼ 02 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc1 (size: 2, align: 1) {
    68 69                                           │ hi
}

promoted[0] in main: &&[i32; 1] = {
    let mut _0: &&[i32; 1];
    let mut _1: &[i32; 1];
    let mut _2: [i32; 1];

    bb0: {
        _2 = [const 42_i32];
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&[i32; 1] = {
    let mut _0: &&[i32; 1];
    let mut _1: &[i32; 1];
    let mut _2: [i32; 1];

    bb0: {
        _2 = [const 42_i32];
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&[u8; 2] = {
    let mut _0: &&[u8; 2];
    let mut _1: &[u8; 2];

    bb0: {
        _1 = const b"hi";
        _0 = &_1;
        return;
    }
}

alloc8 (size: 2, align: 1) {
    68 69                                           │ hi
}

fn A(_1: &T) -> A<T> {
    let mut _0: A<T>;

    bb0: {
        _0 = A::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn A(_1: &T) -> A<T> {
    let mut _0: A<T>;

    bb0: {
        _0 = A::<T>(move _1);
        return;
    }
}

fn Slice(_1: &[i32]) -> Slice {
    let mut _0: Slice;

    bb0: {
        _0 = Slice(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Slice(_1: &[i32]) -> Slice {
    let mut _0: Slice;

    bb0: {
        _0 = Slice(move _1);
        return;
    }
}
