// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static STR: &[u8] = {
    let mut _0: &[u8];                   // return place in scope 0 at ui/statics/static-promotion.rs:15:13: 15:26
    let mut _1: &[u8; 2];                // in scope 0 at ui/statics/static-promotion.rs:15:29: 15:34
    let _2: &[u8; 2];                    // in scope 0 at ui/statics/static-promotion.rs:15:29: 15:34

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/statics/static-promotion.rs:15:29: 15:34
        StorageLive(_2);                 // scope 0 at ui/statics/static-promotion.rs:15:29: 15:34
        _2 = const b"hi";                // scope 0 at ui/statics/static-promotion.rs:15:29: 15:34
                                         // mir::Constant
                                         // + span: ui/statics/static-promotion.rs:15:29: 15:34
                                         // + literal: Const { ty: &[u8; 2], val: Value(Scalar(alloc1)) }
        _1 = &(*_2);                     // scope 0 at ui/statics/static-promotion.rs:15:29: 15:34
        _0 = move _1 as &[u8] (Pointer(Unsize)); // scope 0 at ui/statics/static-promotion.rs:15:29: 15:34
        StorageDead(_2);                 // scope 0 at ui/statics/static-promotion.rs:15:33: 15:34
        StorageDead(_1);                 // scope 0 at ui/statics/static-promotion.rs:15:33: 15:34
        return;                          // scope 0 at ui/statics/static-promotion.rs:15:1: 15:35
    }
}

alloc1 (size: 2, align: 1) {
    68 69                                           │ hi
}

static C: A<B<B<[u8]>>> = {
    let mut _0: A<B<B<[u8]>>>;           // return place in scope 0 at ui/statics/static-promotion.rs:16:11: 16:24
    let mut _1: &B<B<[u8]>>;             // in scope 0 at ui/statics/static-promotion.rs:17:7: 19:6
    let _2: &B<B<[u8]>>;                 // in scope 0 at ui/statics/static-promotion.rs:17:7: 19:6
    let _3: B<B<[u8]>>;                  // in scope 0 at ui/statics/static-promotion.rs:17:8: 19:6
    let mut _4: &B<[u8]>;                // in scope 0 at ui/statics/static-promotion.rs:18:12: 18:25
    let _5: &B<[u8]>;                    // in scope 0 at ui/statics/static-promotion.rs:18:12: 18:25
    let _6: B<[u8]>;                     // in scope 0 at ui/statics/static-promotion.rs:18:13: 18:25
    let mut _7: &[u8];                   // in scope 0 at ui/statics/static-promotion.rs:18:20: 18:23
    let mut _8: &&[u8];                  // in scope 0 at ui/statics/static-promotion.rs:18:20: 18:23
    let mut _9: &B<B<[u8]>>;             // in scope 0 at ui/statics/static-promotion.rs:17:7: 19:6

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/statics/static-promotion.rs:17:7: 19:6
        StorageLive(_2);                 // scope 0 at ui/statics/static-promotion.rs:17:7: 19:6
        _9 = const _;                    // scope 0 at ui/statics/static-promotion.rs:17:7: 19:6
                                         // mir::Constant
                                         // + span: ui/statics/static-promotion.rs:17:7: 19:6
                                         // + literal: Const { ty: &B<B<[u8]>>, val: Unevaluated(C, [], Some(promoted[0])) }
        _2 = &(*_9);                     // scope 0 at ui/statics/static-promotion.rs:17:7: 19:6
        _1 = &(*_2);                     // scope 0 at ui/statics/static-promotion.rs:17:7: 19:6
        _0 = A::<B<B<[u8]>>>(move _1);   // scope 0 at ui/statics/static-promotion.rs:17:5: 19:7
        StorageDead(_1);                 // scope 0 at ui/statics/static-promotion.rs:19:6: 19:7
        StorageDead(_2);                 // scope 0 at ui/statics/static-promotion.rs:20:1: 20:2
        return;                          // scope 0 at ui/statics/static-promotion.rs:16:1: 20:3
    }
}

promoted[0] in C: &B<B<[u8]>> = {
    let mut _0: &B<B<[u8]>>;             // return place in scope 0 at ui/statics/static-promotion.rs:17:7: 19:6
    let mut _1: B<B<[u8]>>;              // in scope 0 at ui/statics/static-promotion.rs:17:8: 19:6
    let mut _2: &B<[u8]>;                // in scope 0 at ui/statics/static-promotion.rs:18:12: 18:25
    let mut _3: &B<[u8]>;                // in scope 0 at ui/statics/static-promotion.rs:18:12: 18:25
    let mut _4: B<[u8]>;                 // in scope 0 at ui/statics/static-promotion.rs:18:13: 18:25
    let mut _5: &[u8];                   // in scope 0 at ui/statics/static-promotion.rs:18:20: 18:23
    let mut _6: &&[u8];                  // in scope 0 at ui/statics/static-promotion.rs:18:20: 18:23

    bb0: {
        _6 = const {alloc2: &&[u8]};     // scope 0 at ui/statics/static-promotion.rs:18:20: 18:23
                                         // mir::Constant
                                         // + span: ui/statics/static-promotion.rs:18:20: 18:23
                                         // + literal: Const { ty: &&[u8], val: Value(Scalar(alloc2)) }
        _5 = (*_6);                      // scope 0 at ui/statics/static-promotion.rs:18:20: 18:23
        _4 = B::<[u8]> { x: move _5 };   // scope 0 at ui/statics/static-promotion.rs:18:13: 18:25
        _3 = &_4;                        // scope 0 at ui/statics/static-promotion.rs:18:12: 18:25
        _2 = &(*_3);                     // scope 0 at ui/statics/static-promotion.rs:18:12: 18:25
        _1 = B::<B<[u8]>> { x: move _2 }; // scope 0 at ui/statics/static-promotion.rs:17:8: 19:6
        _0 = &_1;                        // scope 0 at ui/statics/static-promotion.rs:17:7: 19:6
        return;                          // scope 0 at ui/statics/static-promotion.rs:17:7: 19:6
    }
}

alloc2 (static: STR, size: 16, align: 8) {
    ╾───────alloc1────────╼ 02 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc1 (size: 2, align: 1) {
    68 69                                           │ hi
}

static CONTENT: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/statics/static-promotion.rs:24:17: 24:20

    bb0: {
        _0 = const 42_i32;               // scope 0 at ui/statics/static-promotion.rs:24:23: 24:25
        return;                          // scope 0 at ui/statics/static-promotion.rs:24:1: 24:26
    }
}

static CONTENT_MAP: Slice = {
    let mut _0: Slice;                   // return place in scope 0 at ui/statics/static-promotion.rs:25:25: 25:30
    let mut _1: &[i32];                  // in scope 0 at ui/statics/static-promotion.rs:25:39: 25:49
    let mut _2: &[i32; 1];               // in scope 0 at ui/statics/static-promotion.rs:25:39: 25:49
    let _3: &[i32; 1];                   // in scope 0 at ui/statics/static-promotion.rs:25:39: 25:49
    let _4: [i32; 1];                    // in scope 0 at ui/statics/static-promotion.rs:25:40: 25:49
    let mut _5: i32;                     // in scope 0 at ui/statics/static-promotion.rs:25:41: 25:48
    let mut _6: &i32;                    // in scope 0 at ui/statics/static-promotion.rs:25:41: 25:48
    let mut _7: &[i32; 1];               // in scope 0 at ui/statics/static-promotion.rs:25:39: 25:49

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/statics/static-promotion.rs:25:39: 25:49
        StorageLive(_2);                 // scope 0 at ui/statics/static-promotion.rs:25:39: 25:49
        StorageLive(_3);                 // scope 0 at ui/statics/static-promotion.rs:25:39: 25:49
        _7 = const _;                    // scope 0 at ui/statics/static-promotion.rs:25:39: 25:49
                                         // mir::Constant
                                         // + span: ui/statics/static-promotion.rs:25:39: 25:49
                                         // + literal: Const { ty: &[i32; 1], val: Unevaluated(CONTENT_MAP, [], Some(promoted[0])) }
        _3 = &(*_7);                     // scope 0 at ui/statics/static-promotion.rs:25:39: 25:49
        _2 = &(*_3);                     // scope 0 at ui/statics/static-promotion.rs:25:39: 25:49
        _1 = move _2 as &[i32] (Pointer(Unsize)); // scope 0 at ui/statics/static-promotion.rs:25:39: 25:49
        StorageDead(_2);                 // scope 0 at ui/statics/static-promotion.rs:25:48: 25:49
        _0 = Slice(move _1);             // scope 0 at ui/statics/static-promotion.rs:25:33: 25:50
        StorageDead(_3);                 // scope 0 at ui/statics/static-promotion.rs:25:49: 25:50
        StorageDead(_1);                 // scope 0 at ui/statics/static-promotion.rs:25:49: 25:50
        return;                          // scope 0 at ui/statics/static-promotion.rs:25:1: 25:51
    }
}

promoted[0] in CONTENT_MAP: &[i32; 1] = {
    let mut _0: &[i32; 1];               // return place in scope 0 at ui/statics/static-promotion.rs:25:39: 25:49
    let mut _1: [i32; 1];                // in scope 0 at ui/statics/static-promotion.rs:25:40: 25:49
    let mut _2: i32;                     // in scope 0 at ui/statics/static-promotion.rs:25:41: 25:48
    let mut _3: &i32;                    // in scope 0 at ui/statics/static-promotion.rs:25:41: 25:48

    bb0: {
        _3 = const {alloc3: &i32};       // scope 0 at ui/statics/static-promotion.rs:25:41: 25:48
                                         // mir::Constant
                                         // + span: ui/statics/static-promotion.rs:25:41: 25:48
                                         // + literal: Const { ty: &i32, val: Value(Scalar(alloc3)) }
        _2 = (*_3);                      // scope 0 at ui/statics/static-promotion.rs:25:41: 25:48
        _1 = [move _2];                  // scope 0 at ui/statics/static-promotion.rs:25:40: 25:49
        _0 = &_1;                        // scope 0 at ui/statics/static-promotion.rs:25:39: 25:49
        return;                          // scope 0 at ui/statics/static-promotion.rs:25:39: 25:49
    }
}

alloc3 (static: CONTENT, size: 4, align: 4) {
    2a 00 00 00                                     │ *...
}

static FOO: (i32, i32) = {
    let mut _0: (i32, i32);              // return place in scope 0 at ui/statics/static-promotion.rs:27:17: 27:27

    bb0: {
        _0 = (const 42_i32, const 43_i32); // scope 0 at ui/statics/static-promotion.rs:27:30: 27:38
        return;                          // scope 0 at ui/statics/static-promotion.rs:27:1: 27:39
    }
}

static CONTENT_MAP2: Slice = {
    let mut _0: Slice;                   // return place in scope 0 at ui/statics/static-promotion.rs:28:26: 28:31
    let mut _1: &[i32];                  // in scope 0 at ui/statics/static-promotion.rs:28:40: 28:48
    let mut _2: &[i32; 1];               // in scope 0 at ui/statics/static-promotion.rs:28:40: 28:48
    let _3: &[i32; 1];                   // in scope 0 at ui/statics/static-promotion.rs:28:40: 28:48
    let _4: [i32; 1];                    // in scope 0 at ui/statics/static-promotion.rs:28:41: 28:48
    let mut _5: i32;                     // in scope 0 at ui/statics/static-promotion.rs:28:42: 28:47
    let mut _6: &(i32, i32);             // in scope 0 at ui/statics/static-promotion.rs:28:42: 28:45
    let mut _7: &[i32; 1];               // in scope 0 at ui/statics/static-promotion.rs:28:40: 28:48

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/statics/static-promotion.rs:28:40: 28:48
        StorageLive(_2);                 // scope 0 at ui/statics/static-promotion.rs:28:40: 28:48
        StorageLive(_3);                 // scope 0 at ui/statics/static-promotion.rs:28:40: 28:48
        _7 = const _;                    // scope 0 at ui/statics/static-promotion.rs:28:40: 28:48
                                         // mir::Constant
                                         // + span: ui/statics/static-promotion.rs:28:40: 28:48
                                         // + literal: Const { ty: &[i32; 1], val: Unevaluated(CONTENT_MAP2, [], Some(promoted[0])) }
        _3 = &(*_7);                     // scope 0 at ui/statics/static-promotion.rs:28:40: 28:48
        _2 = &(*_3);                     // scope 0 at ui/statics/static-promotion.rs:28:40: 28:48
        _1 = move _2 as &[i32] (Pointer(Unsize)); // scope 0 at ui/statics/static-promotion.rs:28:40: 28:48
        StorageDead(_2);                 // scope 0 at ui/statics/static-promotion.rs:28:47: 28:48
        _0 = Slice(move _1);             // scope 0 at ui/statics/static-promotion.rs:28:34: 28:49
        StorageDead(_3);                 // scope 0 at ui/statics/static-promotion.rs:28:48: 28:49
        StorageDead(_1);                 // scope 0 at ui/statics/static-promotion.rs:28:48: 28:49
        return;                          // scope 0 at ui/statics/static-promotion.rs:28:1: 28:50
    }
}

promoted[0] in CONTENT_MAP2: &[i32; 1] = {
    let mut _0: &[i32; 1];               // return place in scope 0 at ui/statics/static-promotion.rs:28:40: 28:48
    let mut _1: [i32; 1];                // in scope 0 at ui/statics/static-promotion.rs:28:41: 28:48
    let mut _2: i32;                     // in scope 0 at ui/statics/static-promotion.rs:28:42: 28:47
    let mut _3: &(i32, i32);             // in scope 0 at ui/statics/static-promotion.rs:28:42: 28:45

    bb0: {
        _3 = const {alloc4: &(i32, i32)}; // scope 0 at ui/statics/static-promotion.rs:28:42: 28:45
                                         // mir::Constant
                                         // + span: ui/statics/static-promotion.rs:28:42: 28:45
                                         // + literal: Const { ty: &(i32, i32), val: Value(Scalar(alloc4)) }
        _2 = ((*_3).0: i32);             // scope 0 at ui/statics/static-promotion.rs:28:42: 28:47
        _1 = [move _2];                  // scope 0 at ui/statics/static-promotion.rs:28:41: 28:48
        _0 = &_1;                        // scope 0 at ui/statics/static-promotion.rs:28:40: 28:48
        return;                          // scope 0 at ui/statics/static-promotion.rs:28:40: 28:48
    }
}

alloc4 (static: FOO, size: 8, align: 4) {
    2a 00 00 00 2b 00 00 00                         │ *...+...
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/statics/static-promotion.rs:30:11: 30:11
    let mut _1: (&&[u8; 2], &&[u8]);     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &&[u8; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &&[u8];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: &A<B<B<[u8]>>>;              // in scope 0 at ui/statics/static-promotion.rs:31:23: 31:24
    let _5: &&[u8; 2];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &&[u8];                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: &&[u8; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: &&[u8];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &&[u8; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &&[u8; 2];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &&[u8];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &&[u8];                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: (&&[i32; 1], &&[i32]);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _20: &&[i32; 1];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _21: &&[i32];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _22: &Slice;                     // in scope 0 at ui/statics/static-promotion.rs:32:23: 32:34
    let _23: &&[i32; 1];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _24: &&[i32];                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _26: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _27: &&[i32; 1];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _28: &&[i32];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _30: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _31: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _32: &&[i32; 1];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _33: &&[i32; 1];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _34: &&[i32];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _35: &&[i32];                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _37: (&&[i32; 1], &&[i32]);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _38: &&[i32; 1];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _39: &&[i32];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _40: &Slice;                     // in scope 0 at ui/statics/static-promotion.rs:33:23: 33:35
    let _41: &&[i32; 1];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _42: &&[i32];                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _43: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _44: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _45: &&[i32; 1];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _46: &&[i32];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _48: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _49: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _50: &&[i32; 1];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _51: &&[i32; 1];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _52: &&[i32];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _53: &&[i32];                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _55: &&[i32; 1];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _56: &&[i32; 1];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _57: &&[u8; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _58: &B<B<[u8]>>;            // in scope 0 at ui/statics/static-promotion.rs:31:23: 31:24
    let mut _59: &B<[u8]>;               // in scope 0 at ui/statics/static-promotion.rs:31:23: 31:24
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _23;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _24;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _29: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _29;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _41;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _42;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _47: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _47;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _57 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&[u8; 2], val: Unevaluated(main, [], Some(promoted[2])) }
        _2 = _57;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _4 = const {alloc5: &A<B<B<[u8]>>>}; // scope 0 at ui/statics/static-promotion.rs:31:23: 31:24
                                         // mir::Constant
                                         // + span: ui/statics/static-promotion.rs:31:23: 31:24
                                         // + literal: Const { ty: &A<B<B<[u8]>>>, val: Value(Scalar(alloc5)) }
        _58 = deref_copy ((*_4).0: &B<B<[u8]>>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _59 = deref_copy ((*_58).0: &B<[u8]>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = &((*_59).0: &[u8]);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_1.0: &&[u8; 2]);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_1.1: &&[u8]);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = _5;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = <&[u8; 2] as PartialEq<&[u8]>>::eq(move _9, move _10) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[u8; 2], &'b &[u8]) -> bool {<&[u8; 2] as PartialEq<&[u8]>>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = Not(move _8);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _11 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<&[u8; 2], &[u8]>(move _13, move _14, move _16, move _18); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[u8; 2], &'b &[u8], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[u8; 2], &[u8]>}, val: Value(<ZST>) }
    }

    bb3: {
        _56 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&[i32; 1], val: Unevaluated(main, [], Some(promoted[1])) }
        _20 = _56;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _22 = const {alloc6: &Slice};    // scope 0 at ui/statics/static-promotion.rs:32:23: 32:34
                                         // mir::Constant
                                         // + span: ui/statics/static-promotion.rs:32:23: 32:34
                                         // + literal: Const { ty: &Slice, val: Value(Scalar(alloc6)) }
        _21 = &((*_22).0: &[i32]);       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _19 = (move _20, move _21);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _23 = (_19.0: &&[i32; 1]);       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _24 = (_19.1: &&[i32]);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _27 = _23;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _28 = _24;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _26 = <&[i32; 1] as PartialEq<&[i32]>>::eq(move _27, move _28) -> bb4; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[i32; 1], &'b &[i32]) -> bool {<&[i32; 1] as PartialEq<&[i32]>>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _25 = Not(move _26);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _25) -> [0: bb6, otherwise: bb5]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _29 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _31 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _32 = _33;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _35 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _34 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _30 = core::panicking::assert_failed::<&[i32; 1], &[i32]>(move _31, move _32, move _34, move _36); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[i32; 1], &'b &[i32], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[i32; 1], &[i32]>}, val: Value(<ZST>) }
    }

    bb6: {
        _55 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&[i32; 1], val: Unevaluated(main, [], Some(promoted[0])) }
        _38 = _55;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _40 = const {alloc7: &Slice};    // scope 0 at ui/statics/static-promotion.rs:33:23: 33:35
                                         // mir::Constant
                                         // + span: ui/statics/static-promotion.rs:33:23: 33:35
                                         // + literal: Const { ty: &Slice, val: Value(Scalar(alloc7)) }
        _39 = &((*_40).0: &[i32]);       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _37 = (move _38, move _39);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _41 = (_37.0: &&[i32; 1]);       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _42 = (_37.1: &&[i32]);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _45 = _41;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _46 = _42;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _44 = <&[i32; 1] as PartialEq<&[i32]>>::eq(move _45, move _46) -> bb7; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[i32; 1], &'b &[i32]) -> bool {<&[i32; 1] as PartialEq<&[i32]>>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        _43 = Not(move _44);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _43) -> [0: bb9, otherwise: bb8]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _47 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _49 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _51 = _41;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _50 = _51;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _53 = _42;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _52 = _53;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _54 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _48 = core::panicking::assert_failed::<&[i32; 1], &[i32]>(move _49, move _50, move _52, move _54); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[i32; 1], &'b &[i32], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[i32; 1], &[i32]>}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/statics/static-promotion.rs:34:2: 34:2
    }
}

alloc7 (static: CONTENT_MAP2, size: 16, align: 8) {
    ╾───────alloc24───────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc24 (size: 4, align: 4) {
    2a 00 00 00                                     │ *...
}

alloc6 (static: CONTENT_MAP, size: 16, align: 8) {
    ╾───────alloc18───────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc18 (size: 4, align: 4) {
    2a 00 00 00                                     │ *...
}

alloc5 (static: C, size: 8, align: 8) {
    ╾───────alloc13───────╼                         │ ╾──────╼
}

alloc13 (size: 8, align: 8) {
    ╾───────alloc12───────╼                         │ ╾──────╼
}

alloc12 (size: 16, align: 8) {
    ╾───────alloc1────────╼ 02 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc1 (size: 2, align: 1) {
    68 69                                           │ hi
}

promoted[0] in main: &&[i32; 1] = {
    let mut _0: &&[i32; 1];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &[i32; 1];               // in scope 0 at ui/statics/static-promotion.rs:33:16: 33:21
    let mut _2: [i32; 1];                // in scope 0 at ui/statics/static-promotion.rs:33:17: 33:21

    bb0: {
        _2 = [const 42_i32];             // scope 0 at ui/statics/static-promotion.rs:33:17: 33:21
        _1 = &_2;                        // scope 0 at ui/statics/static-promotion.rs:33:16: 33:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[1] in main: &&[i32; 1] = {
    let mut _0: &&[i32; 1];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &[i32; 1];               // in scope 0 at ui/statics/static-promotion.rs:32:16: 32:21
    let mut _2: [i32; 1];                // in scope 0 at ui/statics/static-promotion.rs:32:17: 32:21

    bb0: {
        _2 = [const 42_i32];             // scope 0 at ui/statics/static-promotion.rs:32:17: 32:21
        _1 = &_2;                        // scope 0 at ui/statics/static-promotion.rs:32:16: 32:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[2] in main: &&[u8; 2] = {
    let mut _0: &&[u8; 2];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &[u8; 2];                // in scope 0 at ui/statics/static-promotion.rs:31:16: 31:21

    bb0: {
        _1 = const b"hi";                // scope 0 at ui/statics/static-promotion.rs:31:16: 31:21
                                         // mir::Constant
                                         // + span: ui/statics/static-promotion.rs:31:16: 31:21
                                         // + literal: Const { ty: &[u8; 2], val: Value(Scalar(alloc8)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

alloc8 (size: 2, align: 1) {
    68 69                                           │ hi
}

fn A(_1: &T) -> A<T> {
    let mut _0: A<T>;                    // return place in scope 0 at ui/statics/static-promotion.rs:11:1: 11:21

    bb0: {
        _0 = A::<T>(move _1);            // scope 0 at ui/statics/static-promotion.rs:11:1: 11:21
        return;                          // scope 0 at ui/statics/static-promotion.rs:11:1: 11:21
    }
}

// MIR FOR CTFE
fn A(_1: &T) -> A<T> {
    let mut _0: A<T>;                    // return place in scope 0 at ui/statics/static-promotion.rs:11:1: 11:21

    bb0: {
        _0 = A::<T>(move _1);            // scope 0 at ui/statics/static-promotion.rs:11:1: 11:21
        return;                          // scope 0 at ui/statics/static-promotion.rs:11:1: 11:21
    }
}

fn Slice(_1: &[i32]) -> Slice {
    let mut _0: Slice;                   // return place in scope 0 at ui/statics/static-promotion.rs:22:1: 22:17

    bb0: {
        _0 = Slice(move _1);             // scope 0 at ui/statics/static-promotion.rs:22:1: 22:17
        return;                          // scope 0 at ui/statics/static-promotion.rs:22:1: 22:17
    }
}

// MIR FOR CTFE
fn Slice(_1: &[i32]) -> Slice {
    let mut _0: Slice;                   // return place in scope 0 at ui/statics/static-promotion.rs:22:1: 22:17

    bb0: {
        _0 = Slice(move _1);             // scope 0 at ui/statics/static-promotion.rs:22:1: 22:17
        return;                          // scope 0 at ui/statics/static-promotion.rs:22:1: 22:17
    }
}
