// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut FLAGS: u64 = {
    let mut _0: u64;                     // return place in scope 0 at ui/cleanup-rvalue-for-scope.rs:11:19: 11:22

    bb0: {
        _0 = const 0_u64;                // scope 0 at ui/cleanup-rvalue-for-scope.rs:11:25: 11:26
        return;                          // scope 0 at ui/cleanup-rvalue-for-scope.rs:11:1: 11:27
    }
}

fn AddFlags(_1: u64) -> AddFlags {
    debug bits => _1;                    // in scope 0 at ui/cleanup-rvalue-for-scope.rs:16:13: 16:17
    let mut _0: AddFlags;                // return place in scope 0 at ui/cleanup-rvalue-for-scope.rs:16:27: 16:35
    let mut _2: u64;                     // in scope 0 at ui/cleanup-rvalue-for-scope.rs:17:22: 17:26

    bb0: {
        _2 = _1;                         // scope 0 at ui/cleanup-rvalue-for-scope.rs:17:22: 17:26
        _0 = AddFlags { bits: move _2 }; // scope 0 at ui/cleanup-rvalue-for-scope.rs:17:5: 17:28
        return;                          // scope 0 at ui/cleanup-rvalue-for-scope.rs:18:2: 18:2
    }
}

fn arg(_1: u64, _2: &AddFlags) -> () {
    debug exp => _1;                     // in scope 0 at ui/cleanup-rvalue-for-scope.rs:20:8: 20:11
    debug _x => _2;                      // in scope 0 at ui/cleanup-rvalue-for-scope.rs:20:18: 20:20
    let mut _0: ();                      // return place in scope 0 at ui/cleanup-rvalue-for-scope.rs:20:33: 20:33
    let _3: ();                          // in scope 0 at ui/cleanup-rvalue-for-scope.rs:21:5: 21:21
    let mut _4: u64;                     // in scope 0 at ui/cleanup-rvalue-for-scope.rs:21:17: 21:20

    bb0: {
        _4 = _1;                         // scope 0 at ui/cleanup-rvalue-for-scope.rs:21:17: 21:20
        _3 = check_flags(move _4) -> bb1; // scope 0 at ui/cleanup-rvalue-for-scope.rs:21:5: 21:21
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-for-scope.rs:21:5: 21:16
                                         // + literal: Const { ty: fn(u64) {check_flags}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/cleanup-rvalue-for-scope.rs:22:2: 22:2
    }
}

fn pass(_1: T) -> T {
    debug v => _1;                       // in scope 0 at ui/cleanup-rvalue-for-scope.rs:24:12: 24:13
    let mut _0: T;                       // return place in scope 0 at ui/cleanup-rvalue-for-scope.rs:24:21: 24:22

    bb0: {
        _0 = move _1;                    // scope 0 at ui/cleanup-rvalue-for-scope.rs:25:5: 25:6
        return;                          // scope 0 at ui/cleanup-rvalue-for-scope.rs:26:2: 26:2
    }
}

fn check_flags(_1: u64) -> () {
    debug exp => _1;                     // in scope 0 at ui/cleanup-rvalue-for-scope.rs:28:16: 28:19
    let mut _0: ();                      // return place in scope 0 at ui/cleanup-rvalue-for-scope.rs:28:26: 28:26
    let mut _3: *mut u64;                // in scope 0 at ui/cleanup-rvalue-for-scope.rs:30:17: 30:22
    let mut _4: *mut u64;                // in scope 0 at ui/cleanup-rvalue-for-scope.rs:31:9: 31:14
    let _5: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _6: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[&str];                 // in scope 0 at ui/cleanup-rvalue-for-scope.rs:32:18: 32:41
    let mut _8: &[&str; 3];              // in scope 0 at ui/cleanup-rvalue-for-scope.rs:32:18: 32:41
    let _9: &[&str; 3];                  // in scope 0 at ui/cleanup-rvalue-for-scope.rs:32:18: 32:41
    let mut _10: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _13: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _14: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/cleanup-rvalue-for-scope.rs:32:43: 32:44
    let mut _15: &u64;                   // in scope 0 at ui/cleanup-rvalue-for-scope.rs:32:43: 32:44
    let _16: &u64;                       // in scope 0 at ui/cleanup-rvalue-for-scope.rs:32:43: 32:44
    let mut _17: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/cleanup-rvalue-for-scope.rs:32:46: 32:49
    let mut _18: &u64;                   // in scope 0 at ui/cleanup-rvalue-for-scope.rs:32:46: 32:49
    let _19: &u64;                       // in scope 0 at ui/cleanup-rvalue-for-scope.rs:32:46: 32:49
    let mut _20: (&u64, &u64);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _21: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _22: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _26: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _27: u64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _28: u64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _30: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _31: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _32: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _33: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _34: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _35: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        let _2: u64;                     // in scope 1 at ui/cleanup-rvalue-for-scope.rs:30:13: 30:14
        scope 2 {
            debug x => _2;               // in scope 2 at ui/cleanup-rvalue-for-scope.rs:30:13: 30:14
            let _23: &u64;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _24: &u64;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _37: &[&str; 3];     // in scope 2 at ui/cleanup-rvalue-for-scope.rs:32:18: 32:41
            scope 3 {
                debug left_val => _23;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _24;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _29: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _29;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _3 = const {alloc1: *mut u64};   // scope 1 at ui/cleanup-rvalue-for-scope.rs:30:17: 30:22
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-for-scope.rs:30:17: 30:22
                                         // + literal: Const { ty: *mut u64, val: Value(Scalar(alloc1)) }
        _2 = (*_3);                      // scope 1 at ui/cleanup-rvalue-for-scope.rs:30:17: 30:22
        _4 = const {alloc1: *mut u64};   // scope 2 at ui/cleanup-rvalue-for-scope.rs:31:9: 31:14
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-for-scope.rs:31:9: 31:14
                                         // + literal: Const { ty: *mut u64, val: Value(Scalar(alloc1)) }
        (*_4) = const 0_u64;             // scope 2 at ui/cleanup-rvalue-for-scope.rs:31:9: 31:18
        _37 = const _;                   // scope 2 at ui/cleanup-rvalue-for-scope.rs:32:18: 32:41
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-for-scope.rs:32:18: 32:41
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(check_flags, [], Some(promoted[0])) }
        _9 = _37;                        // scope 2 at ui/cleanup-rvalue-for-scope.rs:32:18: 32:41
        _8 = _9;                         // scope 2 at ui/cleanup-rvalue-for-scope.rs:32:18: 32:41
        _7 = move _8 as &[&str] (Pointer(Unsize)); // scope 2 at ui/cleanup-rvalue-for-scope.rs:32:18: 32:41
        _16 = &_2;                       // scope 2 at ui/cleanup-rvalue-for-scope.rs:32:43: 32:44
        _15 = _16;                       // scope 2 at ui/cleanup-rvalue-for-scope.rs:32:43: 32:44
        _14 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(move _15) -> bb1; // scope 2 at ui/cleanup-rvalue-for-scope.rs:32:43: 32:44
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-for-scope.rs:32:43: 32:44
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb1: {
        _19 = &_1;                       // scope 2 at ui/cleanup-rvalue-for-scope.rs:32:46: 32:49
        _18 = _19;                       // scope 2 at ui/cleanup-rvalue-for-scope.rs:32:46: 32:49
        _17 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(move _18) -> bb2; // scope 2 at ui/cleanup-rvalue-for-scope.rs:32:46: 32:49
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-for-scope.rs:32:46: 32:49
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = [move _14, move _17];      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _12 = &_13;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = _12;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = move _11 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = Arguments::<'_>::new_v1(move _7, move _10) -> bb3; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = _print(move _6) -> bb4;     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = &_2;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _22 = &_1;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _20 = (move _21, move _22);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _23 = (_20.0: &u64);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _24 = (_20.1: &u64);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _27 = (*_23);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _28 = (*_24);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _26 = Eq(move _27, move _28);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _25 = Not(move _26);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _25) -> [0: bb6, otherwise: bb5]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _29 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _31 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _32 = _33;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _35 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _34 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _30 = core::panicking::assert_failed::<u64, u64>(move _31, move _32, move _34, move _36); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u64, &'b u64, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u64, u64>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/cleanup-rvalue-for-scope.rs:35:2: 35:2
    }
}

alloc1 (static: FLAGS, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in check_flags: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ui/cleanup-rvalue-for-scope.rs:32:18: 32:41
    let mut _1: [&str; 3];               // in scope 0 at ui/cleanup-rvalue-for-scope.rs:32:18: 32:41

    bb0: {
        _1 = [const "flags ", const ", expected ", const "\n"]; // scope 0 at ui/cleanup-rvalue-for-scope.rs:32:18: 32:41
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-for-scope.rs:32:18: 32:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-for-scope.rs:32:18: 32:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-for-scope.rs:32:18: 32:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/cleanup-rvalue-for-scope.rs:32:18: 32:41
        return;                          // scope 0 at ui/cleanup-rvalue-for-scope.rs:32:18: 32:41
    }
}

fn <impl at ui/cleanup-rvalue-for-scope.rs:37:1: 37:14>::check_flags(_1: &AddFlags, _2: u64) -> &AddFlags {
    debug self => _1;                    // in scope 0 at ui/cleanup-rvalue-for-scope.rs:38:20: 38:25
    debug exp => _2;                     // in scope 0 at ui/cleanup-rvalue-for-scope.rs:38:27: 38:30
    let mut _0: &AddFlags;               // return place in scope 0 at ui/cleanup-rvalue-for-scope.rs:38:40: 38:49
    let _3: ();                          // in scope 0 at ui/cleanup-rvalue-for-scope.rs:39:9: 39:25
    let mut _4: u64;                     // in scope 0 at ui/cleanup-rvalue-for-scope.rs:39:21: 39:24

    bb0: {
        _4 = _2;                         // scope 0 at ui/cleanup-rvalue-for-scope.rs:39:21: 39:24
        _3 = check_flags(move _4) -> bb1; // scope 0 at ui/cleanup-rvalue-for-scope.rs:39:9: 39:25
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-for-scope.rs:39:9: 39:20
                                         // + literal: Const { ty: fn(u64) {check_flags}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = _1;                         // scope 0 at ui/cleanup-rvalue-for-scope.rs:40:9: 40:13
        return;                          // scope 0 at ui/cleanup-rvalue-for-scope.rs:41:6: 41:6
    }
}

fn <impl at ui/cleanup-rvalue-for-scope.rs:37:1: 37:14>::bits(_1: &AddFlags) -> u64 {
    debug self => _1;                    // in scope 0 at ui/cleanup-rvalue-for-scope.rs:43:13: 43:18
    let mut _0: u64;                     // return place in scope 0 at ui/cleanup-rvalue-for-scope.rs:43:23: 43:26

    bb0: {
        _0 = ((*_1).0: u64);             // scope 0 at ui/cleanup-rvalue-for-scope.rs:44:9: 44:18
        return;                          // scope 0 at ui/cleanup-rvalue-for-scope.rs:45:6: 45:6
    }
}

fn <impl at ui/cleanup-rvalue-for-scope.rs:48:1: 48:23>::drop(_1: &mut AddFlags) -> () {
    debug self => _1;                    // in scope 0 at ui/cleanup-rvalue-for-scope.rs:49:13: 49:22
    let mut _0: ();                      // return place in scope 0 at ui/cleanup-rvalue-for-scope.rs:49:24: 49:24
    let mut _2: u64;                     // in scope 0 at ui/cleanup-rvalue-for-scope.rs:51:21: 51:26
    let mut _3: *mut u64;                // in scope 0 at ui/cleanup-rvalue-for-scope.rs:51:21: 51:26
    let mut _4: u64;                     // in scope 0 at ui/cleanup-rvalue-for-scope.rs:51:29: 51:38
    let mut _5: (u64, bool);             // in scope 0 at ui/cleanup-rvalue-for-scope.rs:51:21: 51:38
    let mut _6: *mut u64;                // in scope 0 at ui/cleanup-rvalue-for-scope.rs:51:13: 51:18
    scope 1 {
    }

    bb0: {
        _3 = const {alloc1: *mut u64};   // scope 1 at ui/cleanup-rvalue-for-scope.rs:51:21: 51:26
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-for-scope.rs:51:21: 51:26
                                         // + literal: Const { ty: *mut u64, val: Value(Scalar(alloc1)) }
        _2 = (*_3);                      // scope 1 at ui/cleanup-rvalue-for-scope.rs:51:21: 51:26
        _4 = ((*_1).0: u64);             // scope 1 at ui/cleanup-rvalue-for-scope.rs:51:29: 51:38
        _5 = CheckedAdd(_2, _4);         // scope 1 at ui/cleanup-rvalue-for-scope.rs:51:21: 51:38
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _4) -> bb1; // scope 1 at ui/cleanup-rvalue-for-scope.rs:51:21: 51:38
    }

    bb1: {
        _6 = const {alloc1: *mut u64};   // scope 1 at ui/cleanup-rvalue-for-scope.rs:51:13: 51:18
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-for-scope.rs:51:13: 51:18
                                         // + literal: Const { ty: *mut u64, val: Value(Scalar(alloc1)) }
        (*_6) = move (_5.0: u64);        // scope 1 at ui/cleanup-rvalue-for-scope.rs:51:13: 51:38
        return;                          // scope 0 at ui/cleanup-rvalue-for-scope.rs:53:6: 53:6
    }
}

alloc1 (static: FLAGS, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/cleanup-rvalue-for-scope.rs:56:15: 56:15
    let mut _1: std::slice::Iter<'_, AddFlags>; // in scope 0 at ui/cleanup-rvalue-for-scope.rs:59:14: 59:28
    let mut _2: &[AddFlags; 1];          // in scope 0 at ui/cleanup-rvalue-for-scope.rs:59:14: 59:28
    let _3: [AddFlags; 1];               // in scope 0 at ui/cleanup-rvalue-for-scope.rs:59:15: 59:28
    let mut _4: AddFlags;                // in scope 0 at ui/cleanup-rvalue-for-scope.rs:59:16: 59:27
    let mut _5: std::slice::Iter<'_, AddFlags>; // in scope 0 at ui/cleanup-rvalue-for-scope.rs:59:14: 59:28
    let mut _6: std::option::Option<&AddFlags>; // in scope 0 at ui/cleanup-rvalue-for-scope.rs:59:14: 59:28
    let mut _7: &mut std::slice::Iter<'_, AddFlags>; // in scope 0 at ui/cleanup-rvalue-for-scope.rs:59:14: 59:28
    let mut _8: &mut std::slice::Iter<'_, AddFlags>; // in scope 0 at ui/cleanup-rvalue-for-scope.rs:59:14: 59:28
    let mut _9: isize;                   // in scope 0 at ui/cleanup-rvalue-for-scope.rs:59:5: 61:6
    let _11: ();                         // in scope 0 at ui/cleanup-rvalue-for-scope.rs:60:9: 60:23
    let _12: ();                         // in scope 0 at ui/cleanup-rvalue-for-scope.rs:62:5: 62:19
    scope 1 {
        debug iter => _5;                // in scope 1 at ui/cleanup-rvalue-for-scope.rs:59:14: 59:28
        let _10: &AddFlags;              // in scope 1 at ui/cleanup-rvalue-for-scope.rs:59:9: 59:10
        scope 2 {
            debug x => _10;              // in scope 2 at ui/cleanup-rvalue-for-scope.rs:59:9: 59:10
        }
    }

    bb0: {
        _4 = AddFlags(const 1_u64) -> bb1; // scope 0 at ui/cleanup-rvalue-for-scope.rs:59:16: 59:27
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-for-scope.rs:59:16: 59:24
                                         // + literal: Const { ty: fn(u64) -> AddFlags {AddFlags}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = [move _4];                  // scope 0 at ui/cleanup-rvalue-for-scope.rs:59:15: 59:28
        _2 = &_3;                        // scope 0 at ui/cleanup-rvalue-for-scope.rs:59:14: 59:28
        _1 = <&[AddFlags; 1] as IntoIterator>::into_iter(move _2) -> [return: bb2, unwind: bb10]; // scope 0 at ui/cleanup-rvalue-for-scope.rs:59:14: 59:28
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-for-scope.rs:59:14: 59:28
                                         // + literal: Const { ty: fn(&[AddFlags; 1]) -> <&[AddFlags; 1] as IntoIterator>::IntoIter {<&[AddFlags; 1] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = move _1;                    // scope 0 at ui/cleanup-rvalue-for-scope.rs:59:14: 59:28
        goto -> bb3;                     // scope 1 at ui/cleanup-rvalue-for-scope.rs:59:5: 61:6
    }

    bb3: {
        _8 = &mut _5;                    // scope 1 at ui/cleanup-rvalue-for-scope.rs:59:14: 59:28
        _7 = &mut (*_8);                 // scope 1 at ui/cleanup-rvalue-for-scope.rs:59:14: 59:28
        _6 = <std::slice::Iter<'_, AddFlags> as Iterator>::next(move _7) -> [return: bb4, unwind: bb10]; // scope 1 at ui/cleanup-rvalue-for-scope.rs:59:14: 59:28
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-for-scope.rs:59:14: 59:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, AddFlags>) -> Option<<std::slice::Iter<'_, AddFlags> as Iterator>::Item> {<std::slice::Iter<'_, AddFlags> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = discriminant(_6);           // scope 1 at ui/cleanup-rvalue-for-scope.rs:59:14: 59:28
        switchInt(move _9) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 1 at ui/cleanup-rvalue-for-scope.rs:59:14: 59:28
    }

    bb5: {
        _10 = ((_6 as Some).0: &AddFlags); // scope 1 at ui/cleanup-rvalue-for-scope.rs:59:9: 59:10
        _11 = check_flags(const 0_u64) -> [return: bb12, unwind: bb10]; // scope 2 at ui/cleanup-rvalue-for-scope.rs:60:9: 60:23
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-for-scope.rs:60:9: 60:20
                                         // + literal: Const { ty: fn(u64) {check_flags}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 1 at ui/cleanup-rvalue-for-scope.rs:59:14: 59:28
    }

    bb7: {
        drop(_3) -> bb8;                 // scope 0 at ui/cleanup-rvalue-for-scope.rs:61:5: 61:6
    }

    bb8: {
        _12 = check_flags(const 1_u64) -> bb9; // scope 0 at ui/cleanup-rvalue-for-scope.rs:62:5: 62:19
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-for-scope.rs:62:5: 62:16
                                         // + literal: Const { ty: fn(u64) {check_flags}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/cleanup-rvalue-for-scope.rs:63:2: 63:2
    }

    bb10 (cleanup): {
        drop(_3) -> bb11;                // scope 0 at ui/cleanup-rvalue-for-scope.rs:61:5: 61:6
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/cleanup-rvalue-for-scope.rs:56:1: 63:2
    }

    bb12: {
        goto -> bb3;                     // scope 2 at ui/cleanup-rvalue-for-scope.rs:60:9: 60:23
    }
}
