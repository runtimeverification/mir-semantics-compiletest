// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/fn/nested-function-names-issue-8587.rs:10:1: 10:7>::f(_1: &X) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = X::f::inner() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/fn/nested-function-names-issue-8587.rs:10:1: 10:7>::f::inner() -> isize {
    let mut _0: isize;

    bb0: {
        _0 = const 0_isize;
        return;
    }
}

fn <impl at ui/fn/nested-function-names-issue-8587.rs:10:1: 10:7>::g(_1: &X) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = inner_2() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner_2() -> isize {
    let mut _0: isize;

    bb0: {
        _0 = const 1_isize;
        return;
    }
}

fn <impl at ui/fn/nested-function-names-issue-8587.rs:10:1: 10:7>::h(_1: &X) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = X::h::inner() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/fn/nested-function-names-issue-8587.rs:10:1: 10:7>::h::inner() -> isize {
    let mut _0: isize;

    bb0: {
        _0 = const 2_isize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: X;
    let mut _2: (&isize, &isize);
    let mut _3: &isize;
    let _4: isize;
    let mut _5: &X;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: isize;
    let mut _11: isize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&isize, &isize);
    let mut _16: &isize;
    let _17: isize;
    let mut _18: &X;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: isize;
    let mut _24: isize;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: (&isize, &isize);
    let mut _29: &isize;
    let _30: isize;
    let mut _31: &X;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: isize;
    let mut _37: isize;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug n => const X;
        let _6: &isize;
        let _7: &isize;
        let _19: &isize;
        let _20: &isize;
        let _32: &isize;
        let _33: &isize;
        let mut _41: &isize;
        let mut _42: &isize;
        let mut _43: &isize;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug left_val => _19;
            debug right_val => _20;
            let _25: core::panicking::AssertKind;
            scope 5 {
                debug kind => _25;
            }
        }
        scope 6 {
            debug left_val => _32;
            debug right_val => _33;
            let _38: core::panicking::AssertKind;
            scope 7 {
                debug kind => _38;
            }
        }
    }

    bb0: {
        _5 = &_1;
        _4 = X::f(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _43 = const _;
        _2 = (move _3, _43);
        _6 = (_2.0: &isize);
        _7 = (_2.1: &isize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<isize, isize>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        _18 = &_1;
        _17 = X::g(move _18) -> [return: bb4, unwind continue];
    }

    bb4: {
        _16 = &_17;
        _42 = const _;
        _15 = (move _16, _42);
        _19 = (_15.0: &isize);
        _20 = (_15.1: &isize);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<isize, isize>(move _25, _19, _20, move _27) -> unwind continue;
    }

    bb6: {
        _31 = &_1;
        _30 = X::h(move _31) -> [return: bb7, unwind continue];
    }

    bb7: {
        _29 = &_30;
        _41 = const _;
        _28 = (move _29, _41);
        _32 = (_28.0: &isize);
        _33 = (_28.1: &isize);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<isize, isize>(move _38, _32, _33, move _40) -> unwind continue;
    }

    bb9: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 0_isize;
        _0 = &_1;
        return;
    }
}
