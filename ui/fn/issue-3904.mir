// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn example_err(_1: &str, _2: &str) -> () {
    debug prog => _1;
    debug arg => _2;
    let mut _0: ();
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 2];
    let _8: [core::fmt::rt::Argument<'_>; 2];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &&str;
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &&str;
    let mut _13: &[&str; 3];

    bb0: {
        _13 = const _;
        _5 = _13 as &[&str] (Pointer(Unsize));
        _10 = &_1;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _12 = &_2;
        _11 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_12) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = [move _9, move _11];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _3 = _print(move _4) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in example_err: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const ": ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn exit(_1: F, _2: &str, _3: &str) -> () {
    debug print => _1;
    debug prog => _2;
    debug arg => _3;
    let mut _0: ();
    let _4: ();
    let mut _5: (&str, &str);

    bb0: {
        _5 = (_2, _3);
        _4 = <F as FnOnce<(&str, &str)>>::call_once(move _1, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/fn/issue-3904.rs:14:1: 14:13>::boom(_1: X<F>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: F;
    let _4: &str;
    let _5: &str;

    bb0: {
        _3 = move (_1.0: F);
        _4 = const "prog";
        _5 = const "arg";
        _2 = exit::<F>(move _3, _4, _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    scope 1 {
        debug val => const X::<for<'a, 'b> fn(&'a str, &'b str) {example_err}> {{ err: example_err }};
    }

    bb0: {
        _1 = X::<for<'a, 'b> fn(&'a str, &'b str) {example_err}>::boom(const X::<for<'a, 'b> fn(&'a str, &'b str) {example_err}> {{ err: example_err }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}
