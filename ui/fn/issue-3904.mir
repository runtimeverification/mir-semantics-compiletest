// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn example_err(_1: &str, _2: &str) -> () {
    debug prog => _1;                    // in scope 0 at ui/fn/issue-3904.rs:2:16: 2:20
    debug arg => _2;                     // in scope 0 at ui/fn/issue-3904.rs:2:28: 2:31
    let mut _0: ();                      // return place in scope 0 at ui/fn/issue-3904.rs:2:39: 2:39
    let _3: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _5: &[&str];                 // in scope 0 at ui/fn/issue-3904.rs:3:14: 3:22
    let mut _6: &[&str; 3];              // in scope 0 at ui/fn/issue-3904.rs:3:14: 3:22
    let _7: &[&str; 3];                  // in scope 0 at ui/fn/issue-3904.rs:3:14: 3:22
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _9: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fn/issue-3904.rs:3:24: 3:28
    let mut _13: &&str;                  // in scope 0 at ui/fn/issue-3904.rs:3:24: 3:28
    let _14: &&str;                      // in scope 0 at ui/fn/issue-3904.rs:3:24: 3:28
    let mut _15: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fn/issue-3904.rs:3:30: 3:33
    let mut _16: &&str;                  // in scope 0 at ui/fn/issue-3904.rs:3:30: 3:33
    let _17: &&str;                      // in scope 0 at ui/fn/issue-3904.rs:3:30: 3:33
    let mut _18: &[&str; 3];             // in scope 0 at ui/fn/issue-3904.rs:3:14: 3:22

    bb0: {
        _18 = const _;                   // scope 0 at ui/fn/issue-3904.rs:3:14: 3:22
                                         // mir::Constant
                                         // + span: ui/fn/issue-3904.rs:3:14: 3:22
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(example_err, [], Some(promoted[0])) }
        _7 = _18;                        // scope 0 at ui/fn/issue-3904.rs:3:14: 3:22
        _6 = _7;                         // scope 0 at ui/fn/issue-3904.rs:3:14: 3:22
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 0 at ui/fn/issue-3904.rs:3:14: 3:22
        _14 = &_1;                       // scope 0 at ui/fn/issue-3904.rs:3:24: 3:28
        _13 = _14;                       // scope 0 at ui/fn/issue-3904.rs:3:24: 3:28
        _12 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _13) -> bb1; // scope 0 at ui/fn/issue-3904.rs:3:24: 3:28
                                         // mir::Constant
                                         // + span: ui/fn/issue-3904.rs:3:24: 3:28
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb1: {
        _17 = &_2;                       // scope 0 at ui/fn/issue-3904.rs:3:30: 3:33
        _16 = _17;                       // scope 0 at ui/fn/issue-3904.rs:3:30: 3:33
        _15 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _16) -> bb2; // scope 0 at ui/fn/issue-3904.rs:3:30: 3:33
                                         // mir::Constant
                                         // + span: ui/fn/issue-3904.rs:3:30: 3:33
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = [move _12, move _15];      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = &_11;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = _10;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = _print(move _4) -> bb4;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/fn/issue-3904.rs:4:2: 4:2
    }
}

promoted[0] in example_err: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ui/fn/issue-3904.rs:3:14: 3:22
    let mut _1: [&str; 3];               // in scope 0 at ui/fn/issue-3904.rs:3:14: 3:22

    bb0: {
        _1 = [const "", const ": ", const "\n"]; // scope 0 at ui/fn/issue-3904.rs:3:14: 3:22
                                         // mir::Constant
                                         // + span: ui/fn/issue-3904.rs:3:14: 3:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/fn/issue-3904.rs:3:14: 3:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/fn/issue-3904.rs:3:14: 3:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/fn/issue-3904.rs:3:14: 3:22
        return;                          // scope 0 at ui/fn/issue-3904.rs:3:14: 3:22
    }
}

fn exit(_1: F, _2: &str, _3: &str) -> () {
    debug print => _1;                   // in scope 0 at ui/fn/issue-3904.rs:6:12: 6:17
    debug prog => _2;                    // in scope 0 at ui/fn/issue-3904.rs:6:22: 6:26
    debug arg => _3;                     // in scope 0 at ui/fn/issue-3904.rs:6:34: 6:37
    let mut _0: ();                      // return place in scope 0 at ui/fn/issue-3904.rs:6:45: 6:45
    let _4: ();                          // in scope 0 at ui/fn/issue-3904.rs:7:5: 7:21
    let mut _5: F;                       // in scope 0 at ui/fn/issue-3904.rs:7:5: 7:10
    let mut _6: (&str, &str);            // in scope 0 at ui/fn/issue-3904.rs:7:5: 7:21
    let mut _7: &str;                    // in scope 0 at ui/fn/issue-3904.rs:7:11: 7:15
    let mut _8: &str;                    // in scope 0 at ui/fn/issue-3904.rs:7:17: 7:20

    bb0: {
        _5 = move _1;                    // scope 0 at ui/fn/issue-3904.rs:7:5: 7:10
        _7 = _2;                         // scope 0 at ui/fn/issue-3904.rs:7:11: 7:15
        _8 = _3;                         // scope 0 at ui/fn/issue-3904.rs:7:17: 7:20
        _6 = (move _7, move _8);         // scope 0 at ui/fn/issue-3904.rs:7:5: 7:21
        _4 = <F as FnOnce<(&str, &str)>>::call_once(move _5, move _6) -> bb1; // scope 0 at ui/fn/issue-3904.rs:7:5: 7:21
                                         // mir::Constant
                                         // + span: ui/fn/issue-3904.rs:7:5: 7:10
                                         // + literal: Const { ty: extern "rust-call" fn(F, (&str, &str)) -> <F as FnOnce<(&str, &str)>>::Output {<F as FnOnce<(&str, &str)>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/fn/issue-3904.rs:8:2: 8:2
    }
}

fn <impl at ui/fn/issue-3904.rs:14:1: 14:13>::boom(_1: X<F>) -> () {
    debug self => _1;                    // in scope 0 at ui/fn/issue-3904.rs:15:17: 15:21
    let mut _0: ();                      // return place in scope 0 at ui/fn/issue-3904.rs:15:23: 15:23
    let _2: ();                          // in scope 0 at ui/fn/issue-3904.rs:16:9: 16:38
    let mut _3: F;                       // in scope 0 at ui/fn/issue-3904.rs:16:14: 16:22
    let mut _4: &str;                    // in scope 0 at ui/fn/issue-3904.rs:16:24: 16:30
    let _5: &str;                        // in scope 0 at ui/fn/issue-3904.rs:16:24: 16:30
    let mut _6: &str;                    // in scope 0 at ui/fn/issue-3904.rs:16:32: 16:37
    let _7: &str;                        // in scope 0 at ui/fn/issue-3904.rs:16:32: 16:37

    bb0: {
        _3 = move (_1.0: F);             // scope 0 at ui/fn/issue-3904.rs:16:14: 16:22
        _5 = const "prog";               // scope 0 at ui/fn/issue-3904.rs:16:24: 16:30
                                         // mir::Constant
                                         // + span: ui/fn/issue-3904.rs:16:24: 16:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/fn/issue-3904.rs:16:24: 16:30
        _7 = const "arg";                // scope 0 at ui/fn/issue-3904.rs:16:32: 16:37
                                         // mir::Constant
                                         // + span: ui/fn/issue-3904.rs:16:32: 16:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/fn/issue-3904.rs:16:32: 16:37
        _2 = exit::<F>(move _3, move _4, move _6) -> bb1; // scope 0 at ui/fn/issue-3904.rs:16:9: 16:38
                                         // mir::Constant
                                         // + span: ui/fn/issue-3904.rs:16:9: 16:13
                                         // + literal: Const { ty: for<'a, 'b> fn(F, &'a str, &'b str) {exit::<F>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/fn/issue-3904.rs:17:6: 17:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/fn/issue-3904.rs:20:14: 20:14
    let _1: X<for<'a, 'b> fn(&'a str, &'b str) {example_err}>; // in scope 0 at ui/fn/issue-3904.rs:21:9: 21:12
    let _2: ();                          // in scope 0 at ui/fn/issue-3904.rs:24:5: 24:15
    let mut _3: X<for<'a, 'b> fn(&'a str, &'b str) {example_err}>; // in scope 0 at ui/fn/issue-3904.rs:24:5: 24:8
    scope 1 {
        debug val => _1;                 // in scope 1 at ui/fn/issue-3904.rs:21:9: 21:12
    }

    bb0: {
        _2 = X::<for<'a, 'b> fn(&'a str, &'b str) {example_err}>::boom(move _3) -> bb1; // scope 1 at ui/fn/issue-3904.rs:24:5: 24:15
                                         // mir::Constant
                                         // + span: ui/fn/issue-3904.rs:24:9: 24:13
                                         // + literal: Const { ty: fn(X<for<'a, 'b> fn(&'a str, &'b str) {example_err}>) {X::<for<'a, 'b> fn(&'a str, &'b str) {example_err}>::boom}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/fn/issue-3904.rs:25:2: 25:2
    }
}
