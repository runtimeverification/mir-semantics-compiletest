// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn my_err(_1: String) -> ! {
    debug s => _1;                       // in scope 0 at ui/ret-bang.rs:3:11: 3:12
    let mut _0: !;                       // return place in scope 0 at ui/ret-bang.rs:3:25: 3:26
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/ret-bang.rs:3:38: 3:42
    let mut _5: &[&str; 2];              // in scope 0 at ui/ret-bang.rs:3:38: 3:42
    let _6: &[&str; 2];                  // in scope 0 at ui/ret-bang.rs:3:38: 3:42
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/ret-bang.rs:3:44: 3:45
    let mut _12: &std::string::String;   // in scope 0 at ui/ret-bang.rs:3:44: 3:45
    let _13: &std::string::String;       // in scope 0 at ui/ret-bang.rs:3:44: 3:45
    let mut _14: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _15: &[&str; 2];             // in scope 0 at ui/ret-bang.rs:3:38: 3:42

    bb0: {
        _15 = const _;                   // scope 0 at ui/ret-bang.rs:3:38: 3:42
                                         // mir::Constant
                                         // + span: ui/ret-bang.rs:3:38: 3:42
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(my_err, [], Some(promoted[0])) }
        _6 = _15;                        // scope 0 at ui/ret-bang.rs:3:38: 3:42
        _5 = _6;                         // scope 0 at ui/ret-bang.rs:3:38: 3:42
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/ret-bang.rs:3:38: 3:42
        _13 = &_1;                       // scope 0 at ui/ret-bang.rs:3:44: 3:45
        _12 = _13;                       // scope 0 at ui/ret-bang.rs:3:44: 3:45
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _12) -> [return: bb1, unwind: bb4]; // scope 0 at ui/ret-bang.rs:3:44: 3:45
                                         // mir::Constant
                                         // + span: ui/ret-bang.rs:3:44: 3:45
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = [move _11];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> [return: bb2, unwind: bb4]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind: bb4]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = begin_panic::<&str>(const "explicit panic") -> bb4; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at ui/ret-bang.rs:3:58: 3:59
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/ret-bang.rs:3:1: 3:59
    }
}

promoted[0] in my_err: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/ret-bang.rs:3:38: 3:42
    let mut _1: [&str; 2];               // in scope 0 at ui/ret-bang.rs:3:38: 3:42

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/ret-bang.rs:3:38: 3:42
                                         // mir::Constant
                                         // + span: ui/ret-bang.rs:3:38: 3:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/ret-bang.rs:3:38: 3:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/ret-bang.rs:3:38: 3:42
        return;                          // scope 0 at ui/ret-bang.rs:3:38: 3:42
    }
}

fn okay(_1: usize) -> isize {
    debug i => _1;                       // in scope 0 at ui/ret-bang.rs:5:9: 5:10
    let mut _0: isize;                   // return place in scope 0 at ui/ret-bang.rs:5:22: 5:27
    let mut _2: usize;                   // in scope 0 at ui/ret-bang.rs:6:8: 6:9
    let _3: !;                           // in scope 0 at ui/ret-bang.rs:7:9: 7:49
    let mut _4: std::string::String;     // in scope 0 at ui/ret-bang.rs:7:16: 7:48
    let mut _5: &str;                    // in scope 0 at ui/ret-bang.rs:7:16: 7:48
    let _6: &str;                        // in scope 0 at ui/ret-bang.rs:7:16: 7:36

    bb0: {
        _2 = _1;                         // scope 0 at ui/ret-bang.rs:6:8: 6:9
        switchInt(move _2) -> [3: bb1, otherwise: bb3]; // scope 0 at ui/ret-bang.rs:6:8: 6:14
    }

    bb1: {
        _6 = const "I don't like three"; // scope 0 at ui/ret-bang.rs:7:16: 7:36
                                         // mir::Constant
                                         // + span: ui/ret-bang.rs:7:16: 7:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 0 at ui/ret-bang.rs:7:16: 7:48
        _4 = <str as ToString>::to_string(move _5) -> bb2; // scope 0 at ui/ret-bang.rs:7:16: 7:48
                                         // mir::Constant
                                         // + span: ui/ret-bang.rs:7:37: 7:46
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = my_err(move _4);            // scope 0 at ui/ret-bang.rs:7:9: 7:49
                                         // mir::Constant
                                         // + span: ui/ret-bang.rs:7:9: 7:15
                                         // + literal: Const { ty: fn(String) -> ! {my_err}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = const 42_isize;             // scope 0 at ui/ret-bang.rs:9:16: 9:18
        return;                          // scope 0 at ui/ret-bang.rs:11:2: 11:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/ret-bang.rs:13:15: 13:15
    let _1: isize;                       // in scope 0 at ui/ret-bang.rs:13:17: 13:24

    bb0: {
        _1 = okay(const 4_usize) -> bb1; // scope 0 at ui/ret-bang.rs:13:17: 13:24
                                         // mir::Constant
                                         // + span: ui/ret-bang.rs:13:17: 13:21
                                         // + literal: Const { ty: fn(usize) -> isize {okay}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/ret-bang.rs:13:27: 13:27
    }
}
