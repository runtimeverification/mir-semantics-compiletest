// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_generic(_1: Box<T>, _2: F) -> () {
    debug expected => _1;                // in scope 0 at ui/expr-block-generic-unique1.rs:4:23: 4:31
    debug eq => _2;                      // in scope 0 at ui/expr-block-generic-unique1.rs:4:41: 4:43
    let mut _0: ();                      // return place in scope 0 at ui/expr-block-generic-unique1.rs:4:48: 4:48
    let _3: std::boxed::Box<T>;          // in scope 0 at ui/expr-block-generic-unique1.rs:5:9: 5:15
    let mut _4: &std::boxed::Box<T>;     // in scope 0 at ui/expr-block-generic-unique1.rs:5:28: 5:44
    let mut _5: bool;                    // in scope 0 at ui/expr-block-generic-unique1.rs:6:5: 6:34
    let mut _6: bool;                    // in scope 0 at ui/expr-block-generic-unique1.rs:6:13: 6:33
    let mut _7: F;                       // in scope 0 at ui/expr-block-generic-unique1.rs:6:13: 6:15
    let mut _8: (std::boxed::Box<T>, std::boxed::Box<T>); // in scope 0 at ui/expr-block-generic-unique1.rs:6:13: 6:33
    let mut _9: std::boxed::Box<T>;      // in scope 0 at ui/expr-block-generic-unique1.rs:6:16: 6:24
    let mut _10: std::boxed::Box<T>;     // in scope 0 at ui/expr-block-generic-unique1.rs:6:26: 6:32
    let mut _11: !;                      // in scope 0 at ui/expr-block-generic-unique1.rs:6:5: 6:34
    let mut _12: bool;                   // in scope 0 at ui/expr-block-generic-unique1.rs:7:1: 7:2
    let mut _13: bool;                   // in scope 0 at ui/expr-block-generic-unique1.rs:7:1: 7:2
    scope 1 {
        debug actual => _3;              // in scope 1 at ui/expr-block-generic-unique1.rs:5:9: 5:15
    }

    bb0: {
        _13 = const false;               // scope 0 at ui/expr-block-generic-unique1.rs:5:9: 5:15
        _12 = const false;               // scope 0 at ui/expr-block-generic-unique1.rs:5:9: 5:15
        _13 = const true;                // scope 0 at ui/expr-block-generic-unique1.rs:5:9: 5:15
        _12 = const true;                // scope 0 at ui/expr-block-generic-unique1.rs:5:9: 5:15
        _4 = &_1;                        // scope 0 at ui/expr-block-generic-unique1.rs:5:28: 5:44
        _3 = <Box<T> as Clone>::clone(move _4) -> [return: bb1, unwind: bb8]; // scope 0 at ui/expr-block-generic-unique1.rs:5:28: 5:44
                                         // mir::Constant
                                         // + span: ui/expr-block-generic-unique1.rs:5:37: 5:42
                                         // + literal: Const { ty: for<'a> fn(&'a Box<T>) -> Box<T> {<Box<T> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = const false;               // scope 1 at ui/expr-block-generic-unique1.rs:6:13: 6:15
        _7 = move _2;                    // scope 1 at ui/expr-block-generic-unique1.rs:6:13: 6:15
        _13 = const false;               // scope 1 at ui/expr-block-generic-unique1.rs:6:16: 6:24
        _9 = move _1;                    // scope 1 at ui/expr-block-generic-unique1.rs:6:16: 6:24
        _10 = move _3;                   // scope 1 at ui/expr-block-generic-unique1.rs:6:26: 6:32
        _8 = (move _9, move _10);        // scope 1 at ui/expr-block-generic-unique1.rs:6:13: 6:33
        _6 = <F as FnOnce<(Box<T>, Box<T>)>>::call_once(move _7, move _8) -> [return: bb2, unwind: bb8]; // scope 1 at ui/expr-block-generic-unique1.rs:6:13: 6:33
                                         // mir::Constant
                                         // + span: ui/expr-block-generic-unique1.rs:6:13: 6:15
                                         // + literal: Const { ty: extern "rust-call" fn(F, (Box<T>, Box<T>)) -> <F as FnOnce<(Box<T>, Box<T>)>>::Output {<F as FnOnce<(Box<T>, Box<T>)>>::call_once}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = Not(move _6);               // scope 1 at ui/expr-block-generic-unique1.rs:6:5: 6:34
        switchInt(move _5) -> [0: bb4, otherwise: bb3]; // scope 1 at ui/expr-block-generic-unique1.rs:6:5: 6:34
    }

    bb3: {
        _11 = core::panicking::panic(const "assertion failed: eq(expected, actual)") -> bb8; // scope 1 at ui/expr-block-generic-unique1.rs:6:5: 6:34
                                         // mir::Constant
                                         // + span: ui/expr-block-generic-unique1.rs:6:5: 6:34
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        return;                          // scope 0 at ui/expr-block-generic-unique1.rs:7:2: 7:2
    }

    bb5 (cleanup): {
        switchInt(_13) -> [0: bb6, otherwise: bb9]; // scope 0 at ui/expr-block-generic-unique1.rs:7:1: 7:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/expr-block-generic-unique1.rs:4:1: 7:2
    }

    bb7 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/expr-block-generic-unique1.rs:7:1: 7:2
    }

    bb8 (cleanup): {
        switchInt(_12) -> [0: bb5, otherwise: bb7]; // scope 0 at ui/expr-block-generic-unique1.rs:7:1: 7:2
    }

    bb9 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/expr-block-generic-unique1.rs:7:1: 7:2
    }
}

fn test_box() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/expr-block-generic-unique1.rs:9:15: 9:15
    let _1: ();                          // in scope 0 at ui/expr-block-generic-unique1.rs:15:5: 15:57
    let mut _2: std::boxed::Box<bool>;   // in scope 0 at ui/expr-block-generic-unique1.rs:15:29: 15:43

    bb0: {
        _2 = Box::<bool>::new(const true) -> bb1; // scope 0 at ui/expr-block-generic-unique1.rs:15:29: 15:43
                                         // mir::Constant
                                         // + span: ui/expr-block-generic-unique1.rs:15:29: 15:37
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(bool) -> Box<bool> {Box::<bool>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = test_generic::<bool, fn(Box<bool>, Box<bool>) -> bool {compare_box}>(move _2, compare_box) -> bb2; // scope 0 at ui/expr-block-generic-unique1.rs:15:5: 15:57
                                         // mir::Constant
                                         // + span: ui/expr-block-generic-unique1.rs:15:5: 15:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<bool>, fn(Box<bool>, Box<bool>) -> bool {compare_box}) {test_generic::<bool, fn(Box<bool>, Box<bool>) -> bool {compare_box}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/expr-block-generic-unique1.rs:15:45: 15:56
                                         // + literal: Const { ty: fn(Box<bool>, Box<bool>) -> bool {compare_box}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/expr-block-generic-unique1.rs:16:2: 16:2
    }
}

fn compare_box(_1: Box<bool>, _2: Box<bool>) -> bool {
    debug b1 => _1;                      // in scope 0 at ui/expr-block-generic-unique1.rs:10:20: 10:22
    debug b2 => _2;                      // in scope 0 at ui/expr-block-generic-unique1.rs:10:35: 10:37
    let mut _0: bool;                    // return place in scope 0 at ui/expr-block-generic-unique1.rs:10:53: 10:57
    let _3: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _5: &[&str];                 // in scope 0 at ui/expr-block-generic-unique1.rs:11:18: 11:22
    let mut _6: &[&str; 2];              // in scope 0 at ui/expr-block-generic-unique1.rs:11:18: 11:22
    let _7: &[&str; 2];                  // in scope 0 at ui/expr-block-generic-unique1.rs:11:18: 11:22
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/expr-block-generic-unique1.rs:11:24: 11:27
    let mut _13: &bool;                  // in scope 0 at ui/expr-block-generic-unique1.rs:11:24: 11:27
    let _14: &bool;                      // in scope 0 at ui/expr-block-generic-unique1.rs:11:24: 11:27
    let _15: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _16: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _17: &[&str];                // in scope 0 at ui/expr-block-generic-unique1.rs:12:18: 12:22
    let mut _18: &[&str; 2];             // in scope 0 at ui/expr-block-generic-unique1.rs:12:18: 12:22
    let _19: &[&str; 2];                 // in scope 0 at ui/expr-block-generic-unique1.rs:12:18: 12:22
    let mut _20: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _21: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _22: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _23: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _24: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/expr-block-generic-unique1.rs:12:24: 12:27
    let mut _25: &bool;                  // in scope 0 at ui/expr-block-generic-unique1.rs:12:24: 12:27
    let _26: &bool;                      // in scope 0 at ui/expr-block-generic-unique1.rs:12:24: 12:27
    let mut _27: bool;                   // in scope 0 at ui/expr-block-generic-unique1.rs:13:16: 13:19
    let mut _28: bool;                   // in scope 0 at ui/expr-block-generic-unique1.rs:13:23: 13:26
    let mut _29: &[&str; 2];             // in scope 0 at ui/expr-block-generic-unique1.rs:12:18: 12:22
    let mut _30: &[&str; 2];             // in scope 0 at ui/expr-block-generic-unique1.rs:11:18: 11:22
    let mut _31: *const bool;            // in scope 0 at ui/expr-block-generic-unique1.rs:10:20: 10:22
    let mut _32: *const bool;            // in scope 0 at ui/expr-block-generic-unique1.rs:10:35: 10:37
    let mut _33: *const bool;            // in scope 0 at ui/expr-block-generic-unique1.rs:10:20: 10:22
    let mut _34: *const bool;            // in scope 0 at ui/expr-block-generic-unique1.rs:10:35: 10:37

    bb0: {
        _30 = const _;                   // scope 0 at ui/expr-block-generic-unique1.rs:11:18: 11:22
                                         // mir::Constant
                                         // + span: ui/expr-block-generic-unique1.rs:11:18: 11:22
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(compare_box, [], Some(promoted[1])) }
        _7 = _30;                        // scope 0 at ui/expr-block-generic-unique1.rs:11:18: 11:22
        _6 = _7;                         // scope 0 at ui/expr-block-generic-unique1.rs:11:18: 11:22
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 0 at ui/expr-block-generic-unique1.rs:11:18: 11:22
        _31 = (((_1.0: std::ptr::Unique<bool>).0: std::ptr::NonNull<bool>).0: *const bool); // scope 0 at ui/expr-block-generic-unique1.rs:11:24: 11:27
        _14 = &(*_31);                   // scope 0 at ui/expr-block-generic-unique1.rs:11:24: 11:27
        _13 = _14;                       // scope 0 at ui/expr-block-generic-unique1.rs:11:24: 11:27
        _12 = core::fmt::ArgumentV1::<'_>::new_display::<bool>(move _13) -> [return: bb1, unwind: bb9]; // scope 0 at ui/expr-block-generic-unique1.rs:11:24: 11:27
                                         // mir::Constant
                                         // + span: ui/expr-block-generic-unique1.rs:11:24: 11:27
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b bool) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<bool>}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = [move _12];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = &_11;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = _10;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> [return: bb2, unwind: bb9]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = _print(move _4) -> [return: bb3, unwind: bb9]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _29 = const _;                   // scope 0 at ui/expr-block-generic-unique1.rs:12:18: 12:22
                                         // mir::Constant
                                         // + span: ui/expr-block-generic-unique1.rs:12:18: 12:22
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(compare_box, [], Some(promoted[0])) }
        _19 = _29;                       // scope 0 at ui/expr-block-generic-unique1.rs:12:18: 12:22
        _18 = _19;                       // scope 0 at ui/expr-block-generic-unique1.rs:12:18: 12:22
        _17 = move _18 as &[&str] (Pointer(Unsize)); // scope 0 at ui/expr-block-generic-unique1.rs:12:18: 12:22
        _32 = (((_2.0: std::ptr::Unique<bool>).0: std::ptr::NonNull<bool>).0: *const bool); // scope 0 at ui/expr-block-generic-unique1.rs:12:24: 12:27
        _26 = &(*_32);                   // scope 0 at ui/expr-block-generic-unique1.rs:12:24: 12:27
        _25 = _26;                       // scope 0 at ui/expr-block-generic-unique1.rs:12:24: 12:27
        _24 = core::fmt::ArgumentV1::<'_>::new_display::<bool>(move _25) -> [return: bb4, unwind: bb9]; // scope 0 at ui/expr-block-generic-unique1.rs:12:24: 12:27
                                         // mir::Constant
                                         // + span: ui/expr-block-generic-unique1.rs:12:24: 12:27
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b bool) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<bool>}, val: Value(<ZST>) }
    }

    bb4: {
        _23 = [move _24];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _22 = &_23;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _21 = _22;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _20 = move _21 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _16 = Arguments::<'_>::new_v1(move _17, move _20) -> [return: bb5, unwind: bb9]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb5: {
        _15 = _print(move _16) -> [return: bb6, unwind: bb9]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb6: {
        _33 = (((_1.0: std::ptr::Unique<bool>).0: std::ptr::NonNull<bool>).0: *const bool); // scope 0 at ui/expr-block-generic-unique1.rs:13:16: 13:19
        _27 = (*_33);                    // scope 0 at ui/expr-block-generic-unique1.rs:13:16: 13:19
        _34 = (((_2.0: std::ptr::Unique<bool>).0: std::ptr::NonNull<bool>).0: *const bool); // scope 0 at ui/expr-block-generic-unique1.rs:13:23: 13:26
        _28 = (*_34);                    // scope 0 at ui/expr-block-generic-unique1.rs:13:23: 13:26
        _0 = Eq(move _27, move _28);     // scope 0 at ui/expr-block-generic-unique1.rs:13:16: 13:26
        drop(_2) -> [return: bb7, unwind: bb10]; // scope 0 at ui/expr-block-generic-unique1.rs:14:5: 14:6
    }

    bb7: {
        drop(_1) -> bb8;                 // scope 0 at ui/expr-block-generic-unique1.rs:14:5: 14:6
    }

    bb8: {
        return;                          // scope 0 at ui/expr-block-generic-unique1.rs:14:6: 14:6
    }

    bb9 (cleanup): {
        drop(_2) -> bb10;                // scope 0 at ui/expr-block-generic-unique1.rs:14:5: 14:6
    }

    bb10 (cleanup): {
        drop(_1) -> bb11;                // scope 0 at ui/expr-block-generic-unique1.rs:14:5: 14:6
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/expr-block-generic-unique1.rs:10:5: 14:6
    }
}

promoted[0] in compare_box: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/expr-block-generic-unique1.rs:12:18: 12:22
    let mut _1: [&str; 2];               // in scope 0 at ui/expr-block-generic-unique1.rs:12:18: 12:22

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/expr-block-generic-unique1.rs:12:18: 12:22
                                         // mir::Constant
                                         // + span: ui/expr-block-generic-unique1.rs:12:18: 12:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/expr-block-generic-unique1.rs:12:18: 12:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/expr-block-generic-unique1.rs:12:18: 12:22
        return;                          // scope 0 at ui/expr-block-generic-unique1.rs:12:18: 12:22
    }
}

promoted[1] in compare_box: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/expr-block-generic-unique1.rs:11:18: 11:22
    let mut _1: [&str; 2];               // in scope 0 at ui/expr-block-generic-unique1.rs:11:18: 11:22

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/expr-block-generic-unique1.rs:11:18: 11:22
                                         // mir::Constant
                                         // + span: ui/expr-block-generic-unique1.rs:11:18: 11:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/expr-block-generic-unique1.rs:11:18: 11:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/expr-block-generic-unique1.rs:11:18: 11:22
        return;                          // scope 0 at ui/expr-block-generic-unique1.rs:11:18: 11:22
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/expr-block-generic-unique1.rs:18:15: 18:15
    let _1: ();                          // in scope 0 at ui/expr-block-generic-unique1.rs:18:17: 18:27

    bb0: {
        _1 = test_box() -> bb1;          // scope 0 at ui/expr-block-generic-unique1.rs:18:17: 18:27
                                         // mir::Constant
                                         // + span: ui/expr-block-generic-unique1.rs:18:17: 18:25
                                         // + literal: Const { ty: fn() {test_box}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/expr-block-generic-unique1.rs:18:30: 18:30
    }
}
