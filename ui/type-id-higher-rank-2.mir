// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn good(_1: &String) -> Foo<'_> {
    debug s => _1;                       // in scope 0 at ui/type-id-higher-rank-2.rs:8:9: 8:10
    let mut _0: Foo<'_>;                 // return place in scope 0 at ui/type-id-higher-rank-2.rs:8:24: 8:27
    let mut _2: &str;                    // in scope 0 at ui/type-id-higher-rank-2.rs:8:34: 8:35
    let _3: &str;                        // in scope 0 at ui/type-id-higher-rank-2.rs:8:34: 8:35
    let mut _4: &std::string::String;    // in scope 0 at ui/type-id-higher-rank-2.rs:8:34: 8:35

    bb0: {
        _4 = _1;                         // scope 0 at ui/type-id-higher-rank-2.rs:8:34: 8:35
        _3 = <String as Deref>::deref(move _4) -> bb1; // scope 0 at ui/type-id-higher-rank-2.rs:8:34: 8:35
                                         // mir::Constant
                                         // + span: ui/type-id-higher-rank-2.rs:8:34: 8:35
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _3;                         // scope 0 at ui/type-id-higher-rank-2.rs:8:34: 8:35
        _0 = Foo::<'_>(move _2);         // scope 0 at ui/type-id-higher-rank-2.rs:8:30: 8:36
        return;                          // scope 0 at ui/type-id-higher-rank-2.rs:8:38: 8:38
    }
}

fn bad1(_1: String) -> Option<&str> {
    debug s => _1;                       // in scope 0 at ui/type-id-higher-rank-2.rs:10:9: 10:10
    let mut _0: std::option::Option<&str>; // return place in scope 0 at ui/type-id-higher-rank-2.rs:10:23: 10:43
    let _2: std::boxed::Box<dyn std::any::Any>; // in scope 0 at ui/type-id-higher-rank-2.rs:11:9: 11:10
    let mut _3: std::boxed::Box<for<'a> fn(&'a std::string::String) -> Foo<'a>>; // in scope 0 at ui/type-id-higher-rank-2.rs:11:27: 11:63
    let mut _4: for<'a> fn(&'a std::string::String) -> Foo<'a>; // in scope 0 at ui/type-id-higher-rank-2.rs:11:36: 11:62
    let mut _5: std::option::Option<&for<'a> fn(&'a std::string::String) -> Foo<'_>>; // in scope 0 at ui/type-id-higher-rank-2.rs:12:5: 12:52
    let mut _6: &dyn std::any::Any;      // in scope 0 at ui/type-id-higher-rank-2.rs:12:5: 12:52
    let mut _7: [closure@ui/type-id-higher-rank-2.rs:12:57: 12:60]; // in scope 0 at ui/type-id-higher-rank-2.rs:12:57: 12:68
    let mut _8: &std::string::String;    // in scope 0 at ui/type-id-higher-rank-2.rs:12:57: 12:68
    let mut _9: *const dyn std::any::Any; // in scope 0 at ui/type-id-higher-rank-2.rs:11:9: 11:10
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/type-id-higher-rank-2.rs:11:9: 11:10
    }

    bb0: {
        _4 = good as for<'a> fn(&'a std::string::String) -> Foo<'a> (Pointer(ReifyFnPointer)); // scope 0 at ui/type-id-higher-rank-2.rs:11:36: 11:40
                                         // mir::Constant
                                         // + span: ui/type-id-higher-rank-2.rs:11:36: 11:40
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> Foo<'a> {good}, val: Value(<ZST>) }
        _3 = Box::<for<'a> fn(&'a String) -> Foo<'a>>::new(move _4) -> [return: bb1, unwind: bb7]; // scope 0 at ui/type-id-higher-rank-2.rs:11:27: 11:63
                                         // mir::Constant
                                         // + span: ui/type-id-higher-rank-2.rs:11:27: 11:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(for<'a> fn(&'a String) -> Foo<'a>) -> Box<for<'a> fn(&'a String) -> Foo<'a>> {Box::<for<'a> fn(&'a String) -> Foo<'a>>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = move _3 as std::boxed::Box<dyn std::any::Any> (Pointer(Unsize)); // scope 0 at ui/type-id-higher-rank-2.rs:11:27: 11:63
        _9 = (((_2.0: std::ptr::Unique<dyn std::any::Any>).0: std::ptr::NonNull<dyn std::any::Any>).0: *const dyn std::any::Any); // scope 1 at ui/type-id-higher-rank-2.rs:12:5: 12:52
        _6 = &(*_9);                     // scope 1 at ui/type-id-higher-rank-2.rs:12:5: 12:52
        _5 = <(dyn Any + 'static)>::downcast_ref::<for<'a> fn(&'a String) -> Foo<'_>>(move _6) -> [return: bb2, unwind: bb6]; // scope 1 at ui/type-id-higher-rank-2.rs:12:5: 12:52
                                         // mir::Constant
                                         // + span: ui/type-id-higher-rank-2.rs:12:7: 12:19
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'a> fn(&'a (dyn Any + 'static)) -> Option<&'a for<'a> fn(&'a String) -> Foo<'_>> {<(dyn Any + 'static)>::downcast_ref::<for<'a> fn(&'a String) -> Foo<'_>>}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &_1;                        // scope 1 at ui/type-id-higher-rank-2.rs:12:57: 12:68
        _7 = [closure@ui/type-id-higher-rank-2.rs:12:57: 12:60] { s: move _8 }; // scope 1 at ui/type-id-higher-rank-2.rs:12:57: 12:68
                                         // closure
                                         // + def_id: DefId(0:10 ~ type_id_higher_rank_2[03f9]::bad1::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((&for<'a> fn(&'a std::string::String) -> Foo<'_>,)) -> &str,
                                         //     (&std::string::String,),
                                         // ]
        _0 = Option::<&for<'a> fn(&'a String) -> Foo<'_>>::map::<&str, [closure@ui/type-id-higher-rank-2.rs:12:57: 12:60]>(move _5, move _7) -> [return: bb3, unwind: bb6]; // scope 1 at ui/type-id-higher-rank-2.rs:12:5: 12:69
                                         // mir::Constant
                                         // + span: ui/type-id-higher-rank-2.rs:12:53: 12:56
                                         // + literal: Const { ty: fn(Option<&for<'a> fn(&'a String) -> Foo<'_>>, [closure@ui/type-id-higher-rank-2.rs:12:57: 12:60]) -> Option<&str> {Option::<&for<'a> fn(&'a String) -> Foo<'_>>::map::<&str, [closure@ui/type-id-higher-rank-2.rs:12:57: 12:60]>}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind: bb7]; // scope 0 at ui/type-id-higher-rank-2.rs:13:1: 13:2
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/type-id-higher-rank-2.rs:13:1: 13:2
    }

    bb5: {
        return;                          // scope 0 at ui/type-id-higher-rank-2.rs:13:2: 13:2
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/type-id-higher-rank-2.rs:13:1: 13:2
    }

    bb7 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at ui/type-id-higher-rank-2.rs:13:1: 13:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/type-id-higher-rank-2.rs:10:1: 13:2
    }
}

fn bad1::{closure#0}(_1: [closure@ui/type-id-higher-rank-2.rs:12:57: 12:60], _2: &for<'a> fn(&'a String) -> Foo<'_>) -> &str {
    debug f => _2;                       // in scope 0 at ui/type-id-higher-rank-2.rs:12:58: 12:59
    debug s => (*(_1.0: &std::string::String)); // in scope 0 at ui/type-id-higher-rank-2.rs:10:9: 10:10
    let mut _0: &str;                    // return place in scope 0 at ui/type-id-higher-rank-2.rs:12:61: 12:61
    let mut _3: Foo<'_>;                 // in scope 0 at ui/type-id-higher-rank-2.rs:12:61: 12:66
    let mut _4: for<'a> fn(&'a std::string::String) -> Foo<'_>; // in scope 0 at ui/type-id-higher-rank-2.rs:12:61: 12:62
    let mut _5: &std::string::String;    // in scope 0 at ui/type-id-higher-rank-2.rs:12:63: 12:65
    let _6: &std::string::String;        // in scope 0 at ui/type-id-higher-rank-2.rs:12:63: 12:65
    let mut _7: &std::string::String;    // in scope 0 at ui/type-id-higher-rank-2.rs:12:57: 12:68

    bb0: {
        _4 = (*_2);                      // scope 0 at ui/type-id-higher-rank-2.rs:12:61: 12:62
        _7 = deref_copy (_1.0: &std::string::String); // scope 0 at ui/type-id-higher-rank-2.rs:12:63: 12:65
        _6 = _7;                         // scope 0 at ui/type-id-higher-rank-2.rs:12:63: 12:65
        _5 = _6;                         // scope 0 at ui/type-id-higher-rank-2.rs:12:63: 12:65
        _3 = move _4(move _5) -> bb1;    // scope 0 at ui/type-id-higher-rank-2.rs:12:61: 12:66
    }

    bb1: {
        _0 = (_3.0: &str);               // scope 0 at ui/type-id-higher-rank-2.rs:12:61: 12:68
        return;                          // scope 0 at ui/type-id-higher-rank-2.rs:12:68: 12:68
    }
}

fn <impl at ui/type-id-higher-rank-2.rs:19:1: 19:34>::get(_1: &String) -> &str {
    debug self => _1;                    // in scope 0 at ui/type-id-higher-rank-2.rs:20:11: 20:19
    let mut _0: &str;                    // return place in scope 0 at ui/type-id-higher-rank-2.rs:20:34: 20:38
    let mut _2: &std::string::String;    // in scope 0 at ui/type-id-higher-rank-2.rs:20:34: 20:38

    bb0: {
        _2 = _1;                         // scope 0 at ui/type-id-higher-rank-2.rs:20:34: 20:38
        _0 = <String as Deref>::deref(move _2) -> bb1; // scope 0 at ui/type-id-higher-rank-2.rs:20:34: 20:38
                                         // mir::Constant
                                         // + span: ui/type-id-higher-rank-2.rs:20:34: 20:38
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/type-id-higher-rank-2.rs:20:40: 20:40
    }
}

fn bad2(_1: String) -> Option<&str> {
    debug s => _1;                       // in scope 0 at ui/type-id-higher-rank-2.rs:23:9: 23:10
    let mut _0: std::option::Option<&str>; // return place in scope 0 at ui/type-id-higher-rank-2.rs:23:23: 23:43
    let _2: std::boxed::Box<dyn std::any::Any>; // in scope 0 at ui/type-id-higher-rank-2.rs:24:9: 24:10
    let mut _3: std::boxed::Box<std::boxed::Box<dyn for<'a> AsStr<'a, 'a>>>; // in scope 0 at ui/type-id-higher-rank-2.rs:24:27: 24:82
    let mut _4: std::boxed::Box<dyn for<'a> AsStr<'a, 'a>>; // in scope 0 at ui/type-id-higher-rank-2.rs:24:36: 24:81
    let mut _5: std::boxed::Box<dyn for<'a> AsStr<'a, 'a>>; // in scope 0 at ui/type-id-higher-rank-2.rs:24:36: 24:81
    let mut _6: std::boxed::Box<std::string::String>; // in scope 0 at ui/type-id-higher-rank-2.rs:24:36: 24:47
    let mut _7: std::string::String;     // in scope 0 at ui/type-id-higher-rank-2.rs:24:45: 24:46
    let mut _8: std::option::Option<&std::boxed::Box<dyn for<'a> AsStr<'a, '_>>>; // in scope 0 at ui/type-id-higher-rank-2.rs:25:5: 25:60
    let mut _9: &dyn std::any::Any;      // in scope 0 at ui/type-id-higher-rank-2.rs:25:5: 25:60
    let mut _10: [closure@ui/type-id-higher-rank-2.rs:25:65: 25:68]; // in scope 0 at ui/type-id-higher-rank-2.rs:25:65: 25:76
    let mut _11: *const dyn std::any::Any; // in scope 0 at ui/type-id-higher-rank-2.rs:24:9: 24:10
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/type-id-higher-rank-2.rs:24:9: 24:10
    }

    bb0: {
        _7 = move _1;                    // scope 0 at ui/type-id-higher-rank-2.rs:24:45: 24:46
        _6 = Box::<String>::new(move _7) -> bb1; // scope 0 at ui/type-id-higher-rank-2.rs:24:36: 24:47
                                         // mir::Constant
                                         // + span: ui/type-id-higher-rank-2.rs:24:36: 24:44
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(String) -> Box<String> {Box::<String>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = move _6 as std::boxed::Box<dyn for<'a> AsStr<'a, 'a>> (Pointer(Unsize)); // scope 0 at ui/type-id-higher-rank-2.rs:24:36: 24:47
        _4 = move _5;                    // scope 0 at ui/type-id-higher-rank-2.rs:24:36: 24:81
        _3 = Box::<Box<dyn for<'a> AsStr<'a, 'a>>>::new(move _4) -> bb2; // scope 0 at ui/type-id-higher-rank-2.rs:24:27: 24:82
                                         // mir::Constant
                                         // + span: ui/type-id-higher-rank-2.rs:24:27: 24:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<dyn for<'a> AsStr<'a, 'a>>) -> Box<Box<dyn for<'a> AsStr<'a, 'a>>> {Box::<Box<dyn for<'a> AsStr<'a, 'a>>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = move _3 as std::boxed::Box<dyn std::any::Any> (Pointer(Unsize)); // scope 0 at ui/type-id-higher-rank-2.rs:24:27: 24:82
        _11 = (((_2.0: std::ptr::Unique<dyn std::any::Any>).0: std::ptr::NonNull<dyn std::any::Any>).0: *const dyn std::any::Any); // scope 1 at ui/type-id-higher-rank-2.rs:25:5: 25:60
        _9 = &(*_11);                    // scope 1 at ui/type-id-higher-rank-2.rs:25:5: 25:60
        _8 = <(dyn Any + 'static)>::downcast_ref::<Box<dyn for<'a> AsStr<'a, '_>>>(move _9) -> [return: bb3, unwind: bb6]; // scope 1 at ui/type-id-higher-rank-2.rs:25:5: 25:60
                                         // mir::Constant
                                         // + span: ui/type-id-higher-rank-2.rs:25:7: 25:19
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b (dyn Any + 'static)) -> Option<&'b Box<dyn for<'a> AsStr<'a, '_>>> {<(dyn Any + 'static)>::downcast_ref::<Box<dyn for<'a> AsStr<'a, '_>>>}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Option::<&Box<dyn for<'a> AsStr<'a, '_>>>::map::<&str, [closure@ui/type-id-higher-rank-2.rs:25:65: 25:68]>(move _8, move _10) -> [return: bb4, unwind: bb6]; // scope 1 at ui/type-id-higher-rank-2.rs:25:5: 25:77
                                         // mir::Constant
                                         // + span: ui/type-id-higher-rank-2.rs:25:61: 25:64
                                         // + literal: Const { ty: fn(Option<&Box<dyn for<'a> AsStr<'a, '_>>>, [closure@ui/type-id-higher-rank-2.rs:25:65: 25:68]) -> Option<&str> {Option::<&Box<dyn for<'a> AsStr<'a, '_>>>::map::<&str, [closure@ui/type-id-higher-rank-2.rs:25:65: 25:68]>}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_2) -> bb5;                 // scope 0 at ui/type-id-higher-rank-2.rs:26:1: 26:2
    }

    bb5: {
        return;                          // scope 0 at ui/type-id-higher-rank-2.rs:26:2: 26:2
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/type-id-higher-rank-2.rs:26:1: 26:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/type-id-higher-rank-2.rs:23:1: 26:2
    }
}

fn bad2::{closure#0}(_1: [closure@ui/type-id-higher-rank-2.rs:25:65: 25:68], _2: &Box<dyn for<'a> AsStr<'a, '_>>) -> &str {
    debug x => _2;                       // in scope 0 at ui/type-id-higher-rank-2.rs:25:66: 25:67
    let mut _0: &str;                    // return place in scope 0 at ui/type-id-higher-rank-2.rs:25:69: 25:69
    let mut _3: &dyn for<'a> AsStr<'a, '_>; // in scope 0 at ui/type-id-higher-rank-2.rs:25:69: 25:76
    let mut _4: std::boxed::Box<dyn for<'a> AsStr<'a, '_>>; // in scope 0 at ui/type-id-higher-rank-2.rs:25:66: 25:67
    let mut _5: *const dyn for<'a> AsStr<'a, '_>; // in scope 0 at ui/type-id-higher-rank-2.rs:25:66: 25:67

    bb0: {
        _4 = deref_copy (*_2);           // scope 0 at ui/type-id-higher-rank-2.rs:25:69: 25:76
        _5 = (((_4.0: std::ptr::Unique<dyn for<'a> AsStr<'a, '_>>).0: std::ptr::NonNull<dyn for<'a> AsStr<'a, '_>>).0: *const dyn for<'a> AsStr<'a, '_>); // scope 0 at ui/type-id-higher-rank-2.rs:25:69: 25:76
        _3 = &(*_5);                     // scope 0 at ui/type-id-higher-rank-2.rs:25:69: 25:76
        _0 = <dyn for<'a> AsStr<'a, '_> as AsStr<'_, '_>>::get(move _3) -> bb1; // scope 0 at ui/type-id-higher-rank-2.rs:25:69: 25:76
                                         // mir::Constant
                                         // + span: ui/type-id-higher-rank-2.rs:25:71: 25:74
                                         // + literal: Const { ty: fn(&dyn for<'a> AsStr<'a, '_>) -> &str {<dyn for<'a> AsStr<'a, '_> as AsStr<'_, '_>>::get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/type-id-higher-rank-2.rs:25:76: 25:76
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/type-id-higher-rank-2.rs:28:11: 28:11
    let mut _1: (&std::option::Option<&str>, &std::option::Option<&str>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: std::option::Option<&str>;   // in scope 0 at ui/type-id-higher-rank-2.rs:29:16: 29:41
    let mut _4: std::string::String;     // in scope 0 at ui/type-id-higher-rank-2.rs:29:21: 29:40
    let mut _5: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _6: &std::option::Option<&str>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _7: &std::option::Option<&str>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _20: (&std::option::Option<&str>, &std::option::Option<&str>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _21: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _22: std::option::Option<&str>;  // in scope 0 at ui/type-id-higher-rank-2.rs:30:16: 30:41
    let mut _23: std::string::String;    // in scope 0 at ui/type-id-higher-rank-2.rs:30:21: 30:40
    let mut _24: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _25: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _26: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _27: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _28: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _29: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _30: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _32: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _33: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _34: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _35: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _36: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _37: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _39: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _40: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _6;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _7;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _12: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _12;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _25;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _26;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _31: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _31;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _4 = <String as From<&str>>::from(const "foo") -> bb1; // scope 0 at ui/type-id-higher-rank-2.rs:29:21: 29:40
                                         // mir::Constant
                                         // + span: ui/type-id-higher-rank-2.rs:29:21: 29:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> String {<String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/type-id-higher-rank-2.rs:29:34: 29:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _3 = bad1(move _4) -> bb2;       // scope 0 at ui/type-id-higher-rank-2.rs:29:16: 29:41
                                         // mir::Constant
                                         // + span: ui/type-id-higher-rank-2.rs:29:16: 29:20
                                         // + literal: Const { ty: fn(String) -> Option<&'static str> {bad1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _40 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<&str>, val: Unevaluated(main, [], Some(promoted[1])) }
        _5 = _40;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_1.0: &std::option::Option<&str>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_1.1: &std::option::Option<&str>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = _7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = <Option<&str> as PartialEq>::eq(move _10, move _11) -> bb3; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&str>, &'b Option<&str>) -> bool {<Option<&str> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = Not(move _9);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb5, otherwise: bb4]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _12 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<Option<&str>, Option<&str>>(move _14, move _15, move _17, move _19); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&str>, &'b Option<&str>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&str>, Option<&str>>}, val: Value(<ZST>) }
    }

    bb5: {
        _23 = <String as From<&str>>::from(const "bar") -> bb6; // scope 0 at ui/type-id-higher-rank-2.rs:30:21: 30:40
                                         // mir::Constant
                                         // + span: ui/type-id-higher-rank-2.rs:30:21: 30:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&str) -> String {<String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/type-id-higher-rank-2.rs:30:34: 30:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _22 = bad2(move _23) -> bb7;     // scope 0 at ui/type-id-higher-rank-2.rs:30:16: 30:41
                                         // mir::Constant
                                         // + span: ui/type-id-higher-rank-2.rs:30:16: 30:20
                                         // + literal: Const { ty: fn(String) -> Option<&'static str> {bad2}, val: Value(<ZST>) }
    }

    bb7: {
        _21 = &_22;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _39 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<&str>, val: Unevaluated(main, [], Some(promoted[0])) }
        _24 = _39;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _20 = (move _21, move _24);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _25 = (_20.0: &std::option::Option<&str>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _26 = (_20.1: &std::option::Option<&str>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _29 = _25;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _30 = _26;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _28 = <Option<&str> as PartialEq>::eq(move _29, move _30) -> bb8; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&str>, &'b Option<&str>) -> bool {<Option<&str> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _27 = Not(move _28);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _27) -> [0: bb10, otherwise: bb9]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _31 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = _25;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = _37;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _32 = core::panicking::assert_failed::<Option<&str>, Option<&str>>(move _33, move _34, move _36, move _38); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&str>, &'b Option<&str>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&str>, Option<&str>>}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at ui/type-id-higher-rank-2.rs:31:2: 31:2
    }
}

promoted[0] in main: &Option<&str> = {
    let mut _0: &std::option::Option<&str>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<&str>; // in scope 0 at ui/type-id-higher-rank-2.rs:30:43: 30:47

    bb0: {
        _1 = Option::<&str>::None;       // scope 0 at ui/type-id-higher-rank-2.rs:30:43: 30:47
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &Option<&str> = {
    let mut _0: &std::option::Option<&str>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<&str>; // in scope 0 at ui/type-id-higher-rank-2.rs:29:43: 29:47

    bb0: {
        _1 = Option::<&str>::None;       // scope 0 at ui/type-id-higher-rank-2.rs:29:43: 29:47
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn Foo(_1: &str) -> Foo<'_> {
    let mut _0: Foo<'_>;                 // return place in scope 0 at ui/type-id-higher-rank-2.rs:6:1: 6:15

    bb0: {
        _0 = Foo::<'_>(move _1);         // scope 0 at ui/type-id-higher-rank-2.rs:6:1: 6:15
        return;                          // scope 0 at ui/type-id-higher-rank-2.rs:6:1: 6:15
    }
}

// MIR FOR CTFE
fn Foo(_1: &str) -> Foo<'_> {
    let mut _0: Foo<'_>;                 // return place in scope 0 at ui/type-id-higher-rank-2.rs:6:1: 6:15

    bb0: {
        _0 = Foo::<'_>(move _1);         // scope 0 at ui/type-id-higher-rank-2.rs:6:1: 6:15
        return;                          // scope 0 at ui/type-id-higher-rank-2.rs:6:1: 6:15
    }
}
