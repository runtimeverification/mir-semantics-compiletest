// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unwind-unique.rs:7:8: 7:8
    let _1: std::boxed::Box<i32>;        // in scope 0 at ui/unwind-unique.rs:8:9: 8:11
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    scope 1 {
        debug _a => _1;                  // in scope 1 at ui/unwind-unique.rs:8:9: 8:11
    }

    bb0: {
        _1 = Box::<i32>::new(const 0_i32) -> bb1; // scope 0 at ui/unwind-unique.rs:8:22: 8:33
                                         // mir::Constant
                                         // + span: ui/unwind-unique.rs:8:22: 8:30
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = begin_panic::<&str>(const "explicit panic") -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2 (cleanup): {
        drop(_1) -> bb3;                 // scope 0 at ui/unwind-unique.rs:10:1: 10:2
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at ui/unwind-unique.rs:7:1: 10:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unwind-unique.rs:12:15: 12:15
    let _1: std::thread::JoinHandle<()>; // in scope 0 at ui/unwind-unique.rs:13:9: 13:10
    let _2: ();                          // in scope 0 at ui/unwind-unique.rs:14:5: 14:19
    let mut _3: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/unwind-unique.rs:14:10: 14:18
    let mut _4: std::thread::JoinHandle<()>; // in scope 0 at ui/unwind-unique.rs:14:10: 14:11
    scope 1 {
        debug t => _1;                   // in scope 1 at ui/unwind-unique.rs:13:9: 13:10
    }

    bb0: {
        _1 = spawn::<fn() {f}, ()>(f) -> bb1; // scope 0 at ui/unwind-unique.rs:13:13: 13:29
                                         // mir::Constant
                                         // + span: ui/unwind-unique.rs:13:13: 13:26
                                         // + literal: Const { ty: fn(fn() {f}) -> JoinHandle<()> {spawn::<fn() {f}, ()>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/unwind-unique.rs:13:27: 13:28
                                         // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = move _1;                    // scope 1 at ui/unwind-unique.rs:14:10: 14:11
        _3 = JoinHandle::<()>::join(move _4) -> bb2; // scope 1 at ui/unwind-unique.rs:14:10: 14:18
                                         // mir::Constant
                                         // + span: ui/unwind-unique.rs:14:12: 14:16
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = std::mem::drop::<Result<(), Box<dyn Any + Send>>>(move _3) -> bb3; // scope 1 at ui/unwind-unique.rs:14:5: 14:19
                                         // mir::Constant
                                         // + span: ui/unwind-unique.rs:14:5: 14:9
                                         // + literal: Const { ty: fn(Result<(), Box<dyn Any + Send>>) {std::mem::drop::<Result<(), Box<dyn Any + Send>>>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/unwind-unique.rs:15:2: 15:2
    }
}
