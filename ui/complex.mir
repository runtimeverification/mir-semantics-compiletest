// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn nothing() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/complex.rs:12:14: 12:14

    bb0: {
        return;                          // scope 0 at ui/complex.rs:12:17: 12:17
    }
}

fn putstr(_1: String) -> () {
    debug _s => _1;                      // in scope 0 at ui/complex.rs:14:11: 14:13
    let mut _0: ();                      // return place in scope 0 at ui/complex.rs:14:23: 14:23

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/complex.rs:14:25: 14:26
    }

    bb1: {
        return;                          // scope 0 at ui/complex.rs:14:26: 14:26
    }
}

fn putint(_1: isize) -> () {
    debug _i => _1;                      // in scope 0 at ui/complex.rs:16:11: 16:13
    let mut _0: ();                      // return place in scope 0 at ui/complex.rs:16:22: 16:22
    let mut _2: isize;                   // in scope 0 at ui/complex.rs:17:9: 17:14
    let mut _3: bool;                    // in scope 0 at ui/complex.rs:18:11: 18:17
    let mut _4: isize;                   // in scope 0 at ui/complex.rs:18:11: 18:12
    let _5: ();                          // in scope 0 at ui/complex.rs:18:20: 18:44
    let mut _6: std::string::String;     // in scope 0 at ui/complex.rs:18:27: 18:43
    let mut _7: &str;                    // in scope 0 at ui/complex.rs:18:27: 18:43
    let _8: &str;                        // in scope 0 at ui/complex.rs:18:27: 18:31
    let mut _9: isize;                   // in scope 0 at ui/complex.rs:18:50: 18:51
    let mut _10: (isize, bool);          // in scope 0 at ui/complex.rs:18:50: 18:55
    scope 1 {
        debug i => _2;                   // in scope 1 at ui/complex.rs:17:9: 17:14
    }

    bb0: {
        _2 = const 33_isize;             // scope 0 at ui/complex.rs:17:24: 17:26
        goto -> bb1;                     // scope 1 at ui/complex.rs:18:5: 18:58
    }

    bb1: {
        _4 = _2;                         // scope 1 at ui/complex.rs:18:11: 18:12
        _3 = Lt(move _4, const 36_isize); // scope 1 at ui/complex.rs:18:11: 18:17
        switchInt(move _3) -> [0: bb6, otherwise: bb2]; // scope 1 at ui/complex.rs:18:11: 18:17
    }

    bb2: {
        _8 = const "hi";                 // scope 1 at ui/complex.rs:18:27: 18:31
                                         // mir::Constant
                                         // + span: ui/complex.rs:18:27: 18:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 1 at ui/complex.rs:18:27: 18:43
        _6 = <str as ToString>::to_string(move _7) -> bb3; // scope 1 at ui/complex.rs:18:27: 18:43
                                         // mir::Constant
                                         // + span: ui/complex.rs:18:32: 18:41
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = putstr(move _6) -> bb4;     // scope 1 at ui/complex.rs:18:20: 18:44
                                         // mir::Constant
                                         // + span: ui/complex.rs:18:20: 18:26
                                         // + literal: Const { ty: fn(String) {putstr}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = _2;                         // scope 1 at ui/complex.rs:18:50: 18:51
        _10 = CheckedAdd(_9, const 1_isize); // scope 1 at ui/complex.rs:18:50: 18:55
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, const 1_isize) -> bb5; // scope 1 at ui/complex.rs:18:50: 18:55
    }

    bb5: {
        _2 = move (_10.0: isize);        // scope 1 at ui/complex.rs:18:46: 18:55
        goto -> bb1;                     // scope 1 at ui/complex.rs:18:5: 18:58
    }

    bb6: {
        return;                          // scope 0 at ui/complex.rs:19:2: 19:2
    }
}

fn zerg(_1: isize) -> isize {
    debug i => _1;                       // in scope 0 at ui/complex.rs:21:9: 21:10
    let mut _0: isize;                   // return place in scope 0 at ui/complex.rs:21:22: 21:27

    bb0: {
        _0 = _1;                         // scope 0 at ui/complex.rs:21:37: 21:38
        return;                          // scope 0 at ui/complex.rs:21:41: 21:41
    }
}

fn foo(_1: isize) -> isize {
    debug x => _1;                       // in scope 0 at ui/complex.rs:23:8: 23:9
    let mut _0: isize;                   // return place in scope 0 at ui/complex.rs:23:21: 23:26
    let mut _2: isize;                   // in scope 0 at ui/complex.rs:24:9: 24:14
    let mut _3: isize;                   // in scope 0 at ui/complex.rs:24:20: 24:21
    let mut _4: (isize, bool);           // in scope 0 at ui/complex.rs:24:20: 24:25
    let _5: ();                          // in scope 0 at ui/complex.rs:25:5: 25:32
    let mut _6: std::string::String;     // in scope 0 at ui/complex.rs:25:12: 25:31
    let mut _7: &str;                    // in scope 0 at ui/complex.rs:25:12: 25:31
    let _8: &str;                        // in scope 0 at ui/complex.rs:25:12: 25:19
    let mut _9: bool;                    // in scope 0 at ui/complex.rs:26:11: 26:17
    let mut _10: isize;                  // in scope 0 at ui/complex.rs:26:11: 26:12
    let _11: ();                         // in scope 0 at ui/complex.rs:26:20: 26:29
    let mut _12: isize;                  // in scope 0 at ui/complex.rs:26:27: 26:28
    let mut _13: isize;                  // in scope 0 at ui/complex.rs:26:34: 26:39
    let mut _14: isize;                  // in scope 0 at ui/complex.rs:26:34: 26:35
    let mut _15: (isize, bool);          // in scope 0 at ui/complex.rs:26:34: 26:39
    let mut _16: isize;                  // in scope 0 at ui/complex.rs:26:51: 26:52
    let mut _17: (isize, bool);          // in scope 0 at ui/complex.rs:26:51: 26:56
    let _18: ();                         // in scope 0 at ui/complex.rs:26:58: 26:67
    let _20: isize;                      // in scope 0 at ui/complex.rs:29:5: 29:11
    let mut _21: isize;                  // in scope 0 at ui/complex.rs:29:9: 29:10
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/complex.rs:24:9: 24:14
        let mut _19: isize;              // in scope 1 at ui/complex.rs:27:9: 27:14
        scope 2 {
            debug z => _19;              // in scope 2 at ui/complex.rs:27:9: 27:14
        }
    }

    bb0: {
        _3 = _1;                         // scope 0 at ui/complex.rs:24:20: 24:21
        _4 = CheckedAdd(_3, const 2_isize); // scope 0 at ui/complex.rs:24:20: 24:25
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, const 2_isize) -> bb1; // scope 0 at ui/complex.rs:24:20: 24:25
    }

    bb1: {
        _2 = move (_4.0: isize);         // scope 0 at ui/complex.rs:24:20: 24:25
        _8 = const "hello";              // scope 1 at ui/complex.rs:25:12: 25:19
                                         // mir::Constant
                                         // + span: ui/complex.rs:25:12: 25:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 1 at ui/complex.rs:25:12: 25:31
        _6 = <str as ToString>::to_string(move _7) -> bb2; // scope 1 at ui/complex.rs:25:12: 25:31
                                         // mir::Constant
                                         // + span: ui/complex.rs:25:20: 25:29
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = putstr(move _6) -> bb3;     // scope 1 at ui/complex.rs:25:5: 25:32
                                         // mir::Constant
                                         // + span: ui/complex.rs:25:5: 25:11
                                         // + literal: Const { ty: fn(String) {putstr}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = _2;                        // scope 1 at ui/complex.rs:26:11: 26:12
        _9 = Lt(move _10, const 10_isize); // scope 1 at ui/complex.rs:26:11: 26:17
        switchInt(move _9) -> [0: bb9, otherwise: bb4]; // scope 1 at ui/complex.rs:26:11: 26:17
    }

    bb4: {
        _12 = _2;                        // scope 1 at ui/complex.rs:26:27: 26:28
        _11 = putint(move _12) -> bb5;   // scope 1 at ui/complex.rs:26:20: 26:29
                                         // mir::Constant
                                         // + span: ui/complex.rs:26:20: 26:26
                                         // + literal: Const { ty: fn(isize) {putint}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = _2;                        // scope 1 at ui/complex.rs:26:34: 26:35
        _15 = CheckedMul(_14, const 3_isize); // scope 1 at ui/complex.rs:26:34: 26:39
        assert(!move (_15.1: bool), "attempt to compute `{} * {}`, which would overflow", move _14, const 3_isize) -> bb6; // scope 1 at ui/complex.rs:26:34: 26:39
    }

    bb6: {
        _13 = move (_15.0: isize);       // scope 1 at ui/complex.rs:26:34: 26:39
        switchInt(move _13) -> [4: bb7, otherwise: bb3]; // scope 1 at ui/complex.rs:26:34: 26:44
    }

    bb7: {
        _16 = _2;                        // scope 1 at ui/complex.rs:26:51: 26:52
        _17 = CheckedAdd(_16, const 2_isize); // scope 1 at ui/complex.rs:26:51: 26:56
        assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", move _16, const 2_isize) -> bb8; // scope 1 at ui/complex.rs:26:51: 26:56
    }

    bb8: {
        _2 = move (_17.0: isize);        // scope 1 at ui/complex.rs:26:47: 26:56
        _18 = nothing() -> bb3;          // scope 1 at ui/complex.rs:26:58: 26:67
                                         // mir::Constant
                                         // + span: ui/complex.rs:26:58: 26:65
                                         // + literal: Const { ty: fn() {nothing}, val: Value(<ZST>) }
    }

    bb9: {
        _19 = const 85_isize;            // scope 2 at ui/complex.rs:28:5: 28:13
        _21 = const 85_isize;            // scope 2 at ui/complex.rs:29:9: 29:10
        _20 = foo(move _21) -> bb10;     // scope 2 at ui/complex.rs:29:5: 29:11
                                         // mir::Constant
                                         // + span: ui/complex.rs:29:5: 29:8
                                         // + literal: Const { ty: fn(isize) -> isize {foo}, val: Value(<ZST>) }
    }

    bb10: {
        _0 = const 0_isize;              // scope 2 at ui/complex.rs:30:12: 30:13
        return;                          // scope 0 at ui/complex.rs:31:2: 31:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/complex.rs:33:15: 33:15
    let _1: isize;                       // in scope 0 at ui/complex.rs:34:9: 34:10
    let mut _2: (isize, bool);           // in scope 0 at ui/complex.rs:34:20: 34:25
    let _3: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _5: &[&str];                 // in scope 0 at ui/complex.rs:35:14: 35:18
    let mut _6: &[&str; 2];              // in scope 0 at ui/complex.rs:35:14: 35:18
    let _7: &[&str; 2];                  // in scope 0 at ui/complex.rs:35:14: 35:18
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/complex.rs:35:20: 35:21
    let mut _13: &isize;                 // in scope 0 at ui/complex.rs:35:20: 35:21
    let _14: &isize;                     // in scope 0 at ui/complex.rs:35:20: 35:21
    let _15: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _16: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _17: &[&str];                // in scope 0 at ui/complex.rs:36:14: 36:28
    let mut _18: &[&str; 1];             // in scope 0 at ui/complex.rs:36:14: 36:28
    let _19: &[&str; 1];                 // in scope 0 at ui/complex.rs:36:14: 36:28
    let mut _20: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _21: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _22: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _23: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _24: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _25: &[&str];                // in scope 0 at ui/complex.rs:37:14: 37:18
    let mut _26: &[&str; 2];             // in scope 0 at ui/complex.rs:37:14: 37:18
    let _27: &[&str; 2];                 // in scope 0 at ui/complex.rs:37:14: 37:18
    let mut _28: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _29: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _30: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _31: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _32: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/complex.rs:37:20: 37:22
    let mut _33: &i32;                   // in scope 0 at ui/complex.rs:37:20: 37:22
    let _34: &i32;                       // in scope 0 at ui/complex.rs:37:20: 37:22
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/complex.rs:34:9: 34:10
        let mut _35: &i32;               // in scope 1 at ui/complex.rs:37:20: 37:22
        let mut _36: &[&str; 2];         // in scope 1 at ui/complex.rs:37:14: 37:18
        let mut _37: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        let mut _38: &[&str; 1];         // in scope 1 at ui/complex.rs:36:14: 36:28
        let mut _39: &[&str; 2];         // in scope 1 at ui/complex.rs:35:14: 35:18
    }

    bb0: {
        _2 = const (4_isize, false);     // scope 0 at ui/complex.rs:34:20: 34:25
        _1 = move (_2.0: isize);         // scope 0 at ui/complex.rs:34:20: 34:25
        _39 = const _;                   // scope 1 at ui/complex.rs:35:14: 35:18
                                         // mir::Constant
                                         // + span: ui/complex.rs:35:14: 35:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[4])) }
        _7 = _39;                        // scope 1 at ui/complex.rs:35:14: 35:18
        _6 = _7;                         // scope 1 at ui/complex.rs:35:14: 35:18
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 1 at ui/complex.rs:35:14: 35:18
        _14 = &_1;                       // scope 1 at ui/complex.rs:35:20: 35:21
        _13 = _14;                       // scope 1 at ui/complex.rs:35:20: 35:21
        _12 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _13) -> bb1; // scope 1 at ui/complex.rs:35:20: 35:21
                                         // mir::Constant
                                         // + span: ui/complex.rs:35:20: 35:21
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = [move _12];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = &_11;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = _10;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = _print(move _4) -> bb3;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _38 = const _;                   // scope 1 at ui/complex.rs:36:14: 36:28
                                         // mir::Constant
                                         // + span: ui/complex.rs:36:14: 36:28
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[3])) }
        _19 = _38;                       // scope 1 at ui/complex.rs:36:14: 36:28
        _18 = _19;                       // scope 1 at ui/complex.rs:36:14: 36:28
        _17 = move _18 as &[&str] (Pointer(Unsize)); // scope 1 at ui/complex.rs:36:14: 36:28
        _37 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(main, [], Some(promoted[2])) }
        _22 = _37;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _21 = _22;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _20 = move _21 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _16 = Arguments::<'_>::new_v1(move _17, move _20) -> bb4; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = _print(move _16) -> bb5;   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb5: {
        _36 = const _;                   // scope 1 at ui/complex.rs:37:14: 37:18
                                         // mir::Constant
                                         // + span: ui/complex.rs:37:14: 37:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _27 = _36;                       // scope 1 at ui/complex.rs:37:14: 37:18
        _26 = _27;                       // scope 1 at ui/complex.rs:37:14: 37:18
        _25 = move _26 as &[&str] (Pointer(Unsize)); // scope 1 at ui/complex.rs:37:14: 37:18
        _35 = const _;                   // scope 1 at ui/complex.rs:37:20: 37:22
                                         // mir::Constant
                                         // + span: ui/complex.rs:37:20: 37:22
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _34 = _35;                       // scope 1 at ui/complex.rs:37:20: 37:22
        _33 = _34;                       // scope 1 at ui/complex.rs:37:20: 37:22
        _32 = core::fmt::ArgumentV1::<'_>::new_display::<i32>(move _33) -> bb6; // scope 1 at ui/complex.rs:37:20: 37:22
                                         // mir::Constant
                                         // + span: ui/complex.rs:37:20: 37:22
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'b> fn(&'b i32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<i32>}, val: Value(<ZST>) }
    }

    bb6: {
        _31 = [move _32];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _30 = &_31;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _29 = _30;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _28 = move _29 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _24 = Arguments::<'_>::new_v1(move _25, move _28) -> bb7; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb7: {
        _23 = _print(move _24) -> bb8;   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/complex.rs:38:2: 38:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/complex.rs:37:20: 37:22
    let mut _1: i32;                     // in scope 0 at ui/complex.rs:37:20: 37:22

    bb0: {
        _1 = const 10_i32;               // scope 0 at ui/complex.rs:37:20: 37:22
        _0 = &_1;                        // scope 0 at ui/complex.rs:37:20: 37:22
        return;                          // scope 0 at ui/complex.rs:37:20: 37:22
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/complex.rs:37:14: 37:18
    let mut _1: [&str; 2];               // in scope 0 at ui/complex.rs:37:14: 37:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/complex.rs:37:14: 37:18
                                         // mir::Constant
                                         // + span: ui/complex.rs:37:14: 37:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/complex.rs:37:14: 37:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/complex.rs:37:14: 37:18
        return;                          // scope 0 at ui/complex.rs:37:14: 37:18
    }
}

promoted[2] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/complex.rs:36:14: 36:28
    let mut _1: [&str; 1];               // in scope 0 at ui/complex.rs:36:14: 36:28

    bb0: {
        _1 = [const "hello, world\n"];   // scope 0 at ui/complex.rs:36:14: 36:28
                                         // mir::Constant
                                         // + span: ui/complex.rs:36:14: 36:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/complex.rs:36:14: 36:28
        return;                          // scope 0 at ui/complex.rs:36:14: 36:28
    }
}

promoted[4] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/complex.rs:35:14: 35:18
    let mut _1: [&str; 2];               // in scope 0 at ui/complex.rs:35:14: 35:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/complex.rs:35:14: 35:18
                                         // mir::Constant
                                         // + span: ui/complex.rs:35:14: 35:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/complex.rs:35:14: 35:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/complex.rs:35:14: 35:18
        return;                          // scope 0 at ui/complex.rs:35:14: 35:18
    }
}
