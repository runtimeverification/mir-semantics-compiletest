// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn ensure_object_safe(_1: &dyn Allocator) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/allocator/object-safe.rs:9:42: 9:42

    bb0: {
        return;                          // scope 0 at ui/allocator/object-safe.rs:9:44: 9:44
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/allocator/object-safe.rs:11:11: 11:11
    let _1: ();                          // in scope 0 at ui/allocator/object-safe.rs:12:5: 12:32
    let mut _2: &dyn std::alloc::Allocator; // in scope 0 at ui/allocator/object-safe.rs:12:24: 12:31
    let mut _3: &std::alloc::System;     // in scope 0 at ui/allocator/object-safe.rs:12:24: 12:31
    let _4: &std::alloc::System;         // in scope 0 at ui/allocator/object-safe.rs:12:24: 12:31
    let mut _5: &std::alloc::System;     // in scope 0 at ui/allocator/object-safe.rs:12:24: 12:31

    bb0: {
        _5 = const _;                    // scope 0 at ui/allocator/object-safe.rs:12:24: 12:31
                                         // mir::Constant
                                         // + span: ui/allocator/object-safe.rs:12:24: 12:31
                                         // + literal: Const { ty: &System, val: Unevaluated(main, [], Some(promoted[0])) }
        _4 = _5;                         // scope 0 at ui/allocator/object-safe.rs:12:24: 12:31
        _3 = _4;                         // scope 0 at ui/allocator/object-safe.rs:12:24: 12:31
        _2 = move _3 as &dyn std::alloc::Allocator (Pointer(Unsize)); // scope 0 at ui/allocator/object-safe.rs:12:24: 12:31
        _1 = ensure_object_safe(move _2) -> bb1; // scope 0 at ui/allocator/object-safe.rs:12:5: 12:32
                                         // mir::Constant
                                         // + span: ui/allocator/object-safe.rs:12:5: 12:23
                                         // + literal: Const { ty: for<'a> fn(&'a (dyn Allocator + 'a)) {ensure_object_safe}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/allocator/object-safe.rs:13:2: 13:2
    }
}

promoted[0] in main: &System = {
    let mut _0: &std::alloc::System;     // return place in scope 0 at ui/allocator/object-safe.rs:12:24: 12:31
    let mut _1: std::alloc::System;      // in scope 0 at ui/allocator/object-safe.rs:12:25: 12:31

    bb0: {
        _1 = System;                     // scope 0 at ui/allocator/object-safe.rs:12:25: 12:31
        _0 = &_1;                        // scope 0 at ui/allocator/object-safe.rs:12:24: 12:31
        return;                          // scope 0 at ui/allocator/object-safe.rs:12:24: 12:31
    }
}
