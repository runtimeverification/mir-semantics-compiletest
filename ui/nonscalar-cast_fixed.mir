// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/nonscalar-cast_fixed.rs:3:10: 3:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/nonscalar-cast_fixed.rs:3:10: 3:15
    debug f => _2;                       // in scope 0 at ui/nonscalar-cast_fixed.rs:3:10: 3:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/nonscalar-cast_fixed.rs:3:10: 3:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/nonscalar-cast_fixed.rs:3:10: 3:15
    let mut _4: &str;                    // in scope 0 at ui/nonscalar-cast_fixed.rs:3:10: 3:15
    let _5: &str;                        // in scope 0 at ui/nonscalar-cast_fixed.rs:3:10: 3:15
    let mut _6: &str;                    // in scope 0 at ui/nonscalar-cast_fixed.rs:5:5: 5:13
    let _7: &str;                        // in scope 0 at ui/nonscalar-cast_fixed.rs:5:5: 5:13
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/nonscalar-cast_fixed.rs:5:5: 5:13
    let mut _9: &&isize;                 // in scope 0 at ui/nonscalar-cast_fixed.rs:5:5: 5:13
    let _10: &&isize;                    // in scope 0 at ui/nonscalar-cast_fixed.rs:5:5: 5:13
    let _11: &isize;                     // in scope 0 at ui/nonscalar-cast_fixed.rs:5:5: 5:13

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/nonscalar-cast_fixed.rs:3:10: 3:15
        _5 = const "Foo";                // scope 0 at ui/nonscalar-cast_fixed.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: ui/nonscalar-cast_fixed.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/nonscalar-cast_fixed.rs:3:10: 3:15
        _7 = const "x";                  // scope 0 at ui/nonscalar-cast_fixed.rs:5:5: 5:13
                                         // mir::Constant
                                         // + span: ui/nonscalar-cast_fixed.rs:5:5: 5:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/nonscalar-cast_fixed.rs:5:5: 5:13
        _11 = &((*_1).0: isize);         // scope 0 at ui/nonscalar-cast_fixed.rs:5:5: 5:13
        _10 = &_11;                      // scope 0 at ui/nonscalar-cast_fixed.rs:5:5: 5:13
        _9 = _10;                        // scope 0 at ui/nonscalar-cast_fixed.rs:5:5: 5:13
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/nonscalar-cast_fixed.rs:5:5: 5:13
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _3, move _4, move _6, move _8) -> bb1; // scope 0 at ui/nonscalar-cast_fixed.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: ui/nonscalar-cast_fixed.rs:3:10: 3:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/nonscalar-cast_fixed.rs:3:15: 3:15
    }
}

fn <impl at ui/nonscalar-cast_fixed.rs:8:1: 8:25>::from(_1: Foo) -> isize {
    debug val => _1;                     // in scope 0 at ui/nonscalar-cast_fixed.rs:9:13: 9:16
    let mut _0: isize;                   // return place in scope 0 at ui/nonscalar-cast_fixed.rs:9:26: 9:31

    bb0: {
        _0 = (_1.0: isize);              // scope 0 at ui/nonscalar-cast_fixed.rs:10:9: 10:14
        return;                          // scope 0 at ui/nonscalar-cast_fixed.rs:11:6: 11:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/nonscalar-cast_fixed.rs:14:11: 14:11
    let _1: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _3: &[&str];                 // in scope 0 at ui/nonscalar-cast_fixed.rs:15:14: 15:18
    let mut _4: &[&str; 2];              // in scope 0 at ui/nonscalar-cast_fixed.rs:15:14: 15:18
    let _5: &[&str; 2];                  // in scope 0 at ui/nonscalar-cast_fixed.rs:15:14: 15:18
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/nonscalar-cast_fixed.rs:15:20: 15:45
    let mut _11: &isize;                 // in scope 0 at ui/nonscalar-cast_fixed.rs:15:20: 15:45
    let _12: &isize;                     // in scope 0 at ui/nonscalar-cast_fixed.rs:15:20: 15:45
    let _13: isize;                      // in scope 0 at ui/nonscalar-cast_fixed.rs:15:20: 15:45
    let mut _14: Foo;                    // in scope 0 at ui/nonscalar-cast_fixed.rs:15:32: 15:44
    let mut _15: &[&str; 2];             // in scope 0 at ui/nonscalar-cast_fixed.rs:15:14: 15:18

    bb0: {
        _15 = const _;                   // scope 0 at ui/nonscalar-cast_fixed.rs:15:14: 15:18
                                         // mir::Constant
                                         // + span: ui/nonscalar-cast_fixed.rs:15:14: 15:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _5 = _15;                        // scope 0 at ui/nonscalar-cast_fixed.rs:15:14: 15:18
        _4 = _5;                         // scope 0 at ui/nonscalar-cast_fixed.rs:15:14: 15:18
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at ui/nonscalar-cast_fixed.rs:15:14: 15:18
        _14 = const Foo {{ x: 1_isize }}; // scope 0 at ui/nonscalar-cast_fixed.rs:15:32: 15:44
                                         // mir::Constant
                                         // + span: ui/nonscalar-cast_fixed.rs:15:32: 15:44
                                         // + literal: Const { ty: Foo, val: Value(Scalar(0x0000000000000001)) }
        _13 = <isize as From<Foo>>::from(move _14) -> bb1; // scope 0 at ui/nonscalar-cast_fixed.rs:15:20: 15:45
                                         // mir::Constant
                                         // + span: ui/nonscalar-cast_fixed.rs:15:20: 15:31
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(Foo) -> isize {<isize as From<Foo>>::from}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = &_13;                      // scope 0 at ui/nonscalar-cast_fixed.rs:15:20: 15:45
        _11 = _12;                       // scope 0 at ui/nonscalar-cast_fixed.rs:15:20: 15:45
        _10 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _11) -> bb2; // scope 0 at ui/nonscalar-cast_fixed.rs:15:20: 15:45
                                         // mir::Constant
                                         // + span: ui/nonscalar-cast_fixed.rs:15:20: 15:45
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = [move _10];                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = _print(move _2) -> bb4;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/nonscalar-cast_fixed.rs:16:2: 16:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/nonscalar-cast_fixed.rs:15:14: 15:18
    let mut _1: [&str; 2];               // in scope 0 at ui/nonscalar-cast_fixed.rs:15:14: 15:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/nonscalar-cast_fixed.rs:15:14: 15:18
                                         // mir::Constant
                                         // + span: ui/nonscalar-cast_fixed.rs:15:14: 15:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/nonscalar-cast_fixed.rs:15:14: 15:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/nonscalar-cast_fixed.rs:15:14: 15:18
        return;                          // scope 0 at ui/nonscalar-cast_fixed.rs:15:14: 15:18
    }
}
