// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &str;
    let mut _2: (&&str, &&str);
    let mut _3: &&str;
    let mut _6: bool;
    let mut _7: bool;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _12: (&&str, &&str);
    let mut _13: &&str;
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let _23: ();
    let mut _24: &mut std::string::String;
    let _25: &str;
    let mut _26: (&&str, &std::string::String);
    let mut _27: &&str;
    let mut _28: &std::string::String;
    let mut _31: bool;
    let mut _32: bool;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug s => const "☃";
        let _4: &&str;
        let _5: &&str;
        let _11: &str;
        let mut _37: &&str;
        scope 2 {
            debug left_val => _4;
            debug right_val => _5;
            let _8: core::panicking::AssertKind;
            scope 3 {
                debug kind => _8;
            }
        }
        scope 4 {
            debug s => const "⨐⨁⪠";
            let _14: &&str;
            let _15: &&str;
            let _21: &str;
            let mut _36: &&str;
            scope 5 {
                debug left_val => _14;
                debug right_val => _15;
                let _18: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _18;
                }
            }
            scope 7 {
                debug s => const "\\{20}";
                let mut _22: std::string::String;
                scope 8 {
                    debug correct_s => _22;
                    let _29: &&str;
                    let _30: &std::string::String;
                    scope 9 {
                        debug left_val => _29;
                        debug right_val => _30;
                        let _33: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _33;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const "☃";
        _3 = &_1;
        _37 = const _;
        _2 = (move _3, _37);
        _4 = (_2.0: &&str);
        _5 = (_2.1: &&str);
        _7 = <&str as PartialEq>::eq(_4, _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<&str, &str>(move _8, _4, _5, move _10) -> unwind continue;
    }

    bb3: {
        _11 = const "⨐⨁⪠";
        _13 = &_11;
        _36 = const _;
        _12 = (move _13, _36);
        _14 = (_12.0: &&str);
        _15 = (_12.1: &&str);
        _17 = <&str as PartialEq>::eq(_14, _15) -> [return: bb4, unwind continue];
    }

    bb4: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<&str, &str>(move _18, _14, _15, move _20) -> unwind continue;
    }

    bb6: {
        _21 = const "\\{20}";
        _22 = <String as From<&str>>::from(const "\\") -> [return: bb7, unwind continue];
    }

    bb7: {
        _24 = &mut _22;
        _25 = const "{20}";
        _23 = String::push_str(move _24, _25) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _27 = &_21;
        _28 = &_22;
        _26 = (move _27, move _28);
        _29 = (_26.0: &&str);
        _30 = (_26.1: &std::string::String);
        _32 = <&str as PartialEq<String>>::eq(_29, _30) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<&str, String>(move _33, _29, _30, move _35) -> bb13;
    }

    bb11: {
        drop(_22) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_22) -> [return: bb14, unwind terminate];
    }

    bb14 (cleanup): {
        resume;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "⨐⨁⪠";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "☃";
        _0 = &_1;
        return;
    }
}
