// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn a() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/panic-runtime/unwind-interleaved.rs:5:8: 5:8

    bb0: {
        return;                          // scope 0 at ui/panic-runtime/unwind-interleaved.rs:5:10: 5:10
    }
}

fn b() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/panic-runtime/unwind-interleaved.rs:7:8: 7:8
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _1 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/panic-runtime/unwind-interleaved.rs:11:11: 11:11
    let _1: std::vec::Vec<i32>;          // in scope 0 at ui/panic-runtime/unwind-interleaved.rs:12:9: 12:11
    let mut _2: std::boxed::Box<[i32]>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[i32; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[i32; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let _8: ();                          // in scope 0 at ui/panic-runtime/unwind-interleaved.rs:13:5: 13:8
    let mut _10: std::boxed::Box<[i32]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _11: std::boxed::Box<[i32; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _12: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _13: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _14: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _15: std::boxed::Box<[i32; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let _16: ();                         // in scope 0 at ui/panic-runtime/unwind-interleaved.rs:15:5: 15:8
    let mut _17: *const [i32; 1];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _18: *const [i32; 1];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/panic-runtime/unwind-interleaved.rs:12:9: 12:11
        let _9: std::vec::Vec<i32>;      // in scope 1 at ui/panic-runtime/unwind-interleaved.rs:14:9: 14:11
        scope 3 {
            debug _y => _9;              // in scope 3 at ui/panic-runtime/unwind-interleaved.rs:14:9: 14:11
        }
        scope 4 {
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = const 4_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 4_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [i32; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _17 = (((_7.0: std::ptr::Unique<[i32; 1]>).0: std::ptr::NonNull<[i32; 1]>).0: *const [i32; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_17) = [const 0_i32];          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = a() -> [return: bb3, unwind: bb10]; // scope 1 at ui/panic-runtime/unwind-interleaved.rs:13:5: 13:8
                                         // mir::Constant
                                         // + span: ui/panic-runtime/unwind-interleaved.rs:13:5: 13:6
                                         // + literal: Const { ty: fn() {a}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = const 4_usize;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _13 = const 4_usize;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _14 = alloc::alloc::exchange_malloc(move _12, move _13) -> [return: bb4, unwind: bb10]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = ShallowInitBox(move _14, [i32; 1]); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _18 = (((_15.0: std::ptr::Unique<[i32; 1]>).0: std::ptr::NonNull<[i32; 1]>).0: *const [i32; 1]); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_18) = [const 0_i32];          // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _11 = move _15;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _10 = move _11 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _10) -> [return: bb5, unwind: bb10]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb5: {
        _16 = b() -> [return: bb6, unwind: bb9]; // scope 3 at ui/panic-runtime/unwind-interleaved.rs:15:5: 15:8
                                         // mir::Constant
                                         // + span: ui/panic-runtime/unwind-interleaved.rs:15:5: 15:6
                                         // + literal: Const { ty: fn() {b}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_9) -> [return: bb7, unwind: bb10]; // scope 1 at ui/panic-runtime/unwind-interleaved.rs:16:1: 16:2
    }

    bb7: {
        drop(_1) -> bb8;                 // scope 0 at ui/panic-runtime/unwind-interleaved.rs:16:1: 16:2
    }

    bb8: {
        return;                          // scope 0 at ui/panic-runtime/unwind-interleaved.rs:16:2: 16:2
    }

    bb9 (cleanup): {
        drop(_9) -> bb10;                // scope 1 at ui/panic-runtime/unwind-interleaved.rs:16:1: 16:2
    }

    bb10 (cleanup): {
        drop(_1) -> bb11;                // scope 0 at ui/panic-runtime/unwind-interleaved.rs:16:1: 16:2
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/panic-runtime/unwind-interleaved.rs:11:1: 16:2
    }
}
