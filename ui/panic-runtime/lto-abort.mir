// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/panic-runtime/lto-abort.rs:13:1: 13:19>::drop(_1: &mut Bomb) -> () {
    debug self => _1;                    // in scope 0 at ui/panic-runtime/lto-abort.rs:14:13: 14:22
    let mut _0: ();                      // return place in scope 0 at ui/panic-runtime/lto-abort.rs:14:24: 14:24
    let _2: !;                           // in scope 0 at ui/panic-runtime/lto-abort.rs:15:9: 15:30

    bb0: {
        _2 = exit(const 0_i32);          // scope 0 at ui/panic-runtime/lto-abort.rs:15:9: 15:30
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-abort.rs:15:9: 15:27
                                         // + literal: Const { ty: fn(i32) -> ! {exit}, val: Value(<ZST>) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/panic-runtime/lto-abort.rs:19:11: 19:11
    let mut _1: std::env::ArgsOs;        // in scope 0 at ui/panic-runtime/lto-abort.rs:20:9: 20:17
    let mut _3: std::option::Option<std::ffi::OsString>; // in scope 0 at ui/panic-runtime/lto-abort.rs:21:14: 21:25
    let mut _4: &mut std::env::ArgsOs;   // in scope 0 at ui/panic-runtime/lto-abort.rs:21:14: 21:25
    let mut _5: std::option::Option<std::ffi::OsString>; // in scope 0 at ui/panic-runtime/lto-abort.rs:23:22: 23:33
    let mut _6: &mut std::env::ArgsOs;   // in scope 0 at ui/panic-runtime/lto-abort.rs:23:22: 23:33
    let mut _7: isize;                   // in scope 0 at ui/panic-runtime/lto-abort.rs:23:12: 23:19
    let mut _9: bool;                    // in scope 0 at ui/panic-runtime/lto-abort.rs:24:12: 24:24
    let mut _10: &&std::ffi::OsStr;      // in scope 0 at ui/panic-runtime/lto-abort.rs:24:12: 24:15
    let _11: &std::ffi::OsStr;           // in scope 0 at ui/panic-runtime/lto-abort.rs:24:12: 24:15
    let _12: &std::ffi::OsStr;           // in scope 0 at ui/panic-runtime/lto-abort.rs:24:13: 24:15
    let mut _13: &std::ffi::OsString;    // in scope 0 at ui/panic-runtime/lto-abort.rs:24:14: 24:15
    let mut _14: &&str;                  // in scope 0 at ui/panic-runtime/lto-abort.rs:24:19: 24:24
    let mut _16: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _18: &mut std::process::Command; // in scope 0 at ui/panic-runtime/lto-abort.rs:31:13: 31:77
    let mut _19: &mut std::process::Command; // in scope 0 at ui/panic-runtime/lto-abort.rs:31:13: 31:68
    let mut _20: &mut std::process::Command; // in scope 0 at ui/panic-runtime/lto-abort.rs:31:13: 31:68
    let mut _21: std::process::Command;  // in scope 0 at ui/panic-runtime/lto-abort.rs:31:13: 31:57
    let mut _22: std::ffi::OsString;     // in scope 0 at ui/panic-runtime/lto-abort.rs:31:26: 31:56
    let mut _23: std::option::Option<std::ffi::OsString>; // in scope 0 at ui/panic-runtime/lto-abort.rs:31:26: 31:47
    let mut _24: &mut std::env::ArgsOs;  // in scope 0 at ui/panic-runtime/lto-abort.rs:31:26: 31:47
    let mut _25: std::env::ArgsOs;       // in scope 0 at ui/panic-runtime/lto-abort.rs:31:26: 31:40
    let mut _26: bool;                   // in scope 0 at ui/panic-runtime/lto-abort.rs:32:5: 32:42
    let mut _27: bool;                   // in scope 0 at ui/panic-runtime/lto-abort.rs:32:13: 32:41
    let mut _28: &std::option::Option<i32>; // in scope 0 at ui/panic-runtime/lto-abort.rs:32:13: 32:30
    let _29: std::option::Option<i32>;   // in scope 0 at ui/panic-runtime/lto-abort.rs:32:13: 32:30
    let mut _30: &std::process::ExitStatus; // in scope 0 at ui/panic-runtime/lto-abort.rs:32:13: 32:30
    let _31: std::process::ExitStatus;   // in scope 0 at ui/panic-runtime/lto-abort.rs:32:13: 32:23
    let mut _32: std::result::Result<std::process::ExitStatus, std::io::Error>; // in scope 0 at ui/panic-runtime/lto-abort.rs:32:13: 32:14
    let mut _33: &std::option::Option<i32>; // in scope 0 at ui/panic-runtime/lto-abort.rs:32:34: 32:41
    let mut _34: !;                      // in scope 0 at ui/panic-runtime/lto-abort.rs:32:5: 32:42
    let mut _37: bool;                   // in scope 0 at ui/panic-runtime/lto-abort.rs:30:5: 30:6
    let mut _38: bool;                   // in scope 0 at ui/panic-runtime/lto-abort.rs:33:1: 33:2
    let mut _39: isize;                  // in scope 0 at ui/panic-runtime/lto-abort.rs:30:5: 30:6
    scope 1 {
        debug args => _1;                // in scope 1 at ui/panic-runtime/lto-abort.rs:20:9: 20:17
        let _2: std::ffi::OsString;      // in scope 1 at ui/panic-runtime/lto-abort.rs:21:9: 21:11
        scope 2 {
            debug me => _2;              // in scope 2 at ui/panic-runtime/lto-abort.rs:21:9: 21:11
            let _17: std::result::Result<std::process::ExitStatus, std::io::Error>; // in scope 2 at ui/panic-runtime/lto-abort.rs:31:9: 31:10
            scope 3 {
                debug s => _8;           // in scope 3 at ui/panic-runtime/lto-abort.rs:23:17: 23:18
                let _8: std::ffi::OsString; // in scope 3 at ui/panic-runtime/lto-abort.rs:23:17: 23:18
                let _15: Bomb;           // in scope 3 at ui/panic-runtime/lto-abort.rs:26:17: 26:22
                let mut _36: &&str;      // in scope 3 at ui/panic-runtime/lto-abort.rs:24:19: 24:24
                scope 4 {
                    debug _bomb => _15;  // in scope 4 at ui/panic-runtime/lto-abort.rs:26:17: 26:22
                }
            }
            scope 5 {
                debug s => _17;          // in scope 5 at ui/panic-runtime/lto-abort.rs:31:9: 31:10
                let mut _35: &std::option::Option<i32>; // in scope 5 at ui/panic-runtime/lto-abort.rs:32:34: 32:41
            }
        }
    }

    bb0: {
        _37 = const false;               // scope 0 at ui/panic-runtime/lto-abort.rs:20:9: 20:17
        _38 = const false;               // scope 0 at ui/panic-runtime/lto-abort.rs:20:9: 20:17
        _1 = args_os() -> bb1;           // scope 0 at ui/panic-runtime/lto-abort.rs:20:20: 20:34
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-abort.rs:20:20: 20:32
                                         // + literal: Const { ty: fn() -> ArgsOs {args_os}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut _1;                    // scope 1 at ui/panic-runtime/lto-abort.rs:21:14: 21:25
        _3 = <ArgsOs as Iterator>::next(move _4) -> [return: bb2, unwind: bb31]; // scope 1 at ui/panic-runtime/lto-abort.rs:21:14: 21:25
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-abort.rs:21:19: 21:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut ArgsOs) -> Option<<ArgsOs as Iterator>::Item> {<ArgsOs as Iterator>::next}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = Option::<OsString>::unwrap(move _3) -> [return: bb3, unwind: bb31]; // scope 1 at ui/panic-runtime/lto-abort.rs:21:14: 21:34
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-abort.rs:21:26: 21:32
                                         // + literal: Const { ty: fn(Option<OsString>) -> OsString {Option::<OsString>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = &mut _1;                    // scope 3 at ui/panic-runtime/lto-abort.rs:23:22: 23:33
        _5 = <ArgsOs as Iterator>::next(move _6) -> [return: bb4, unwind: bb30]; // scope 3 at ui/panic-runtime/lto-abort.rs:23:22: 23:33
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-abort.rs:23:27: 23:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut ArgsOs) -> Option<<ArgsOs as Iterator>::Item> {<ArgsOs as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _37 = const true;                // scope 3 at ui/panic-runtime/lto-abort.rs:23:32: 23:33
        _7 = discriminant(_5);           // scope 3 at ui/panic-runtime/lto-abort.rs:23:12: 23:19
        switchInt(move _7) -> [1: bb5, otherwise: bb36]; // scope 3 at ui/panic-runtime/lto-abort.rs:23:12: 23:19
    }

    bb5: {
        _37 = const false;               // scope 3 at ui/panic-runtime/lto-abort.rs:23:17: 23:18
        _8 = move ((_5 as Some).0: std::ffi::OsString); // scope 3 at ui/panic-runtime/lto-abort.rs:23:17: 23:18
        _13 = &_8;                       // scope 3 at ui/panic-runtime/lto-abort.rs:24:14: 24:15
        _12 = <OsString as Deref>::deref(move _13) -> [return: bb6, unwind: bb29]; // scope 3 at ui/panic-runtime/lto-abort.rs:24:13: 24:15
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-abort.rs:24:13: 24:15
                                         // + literal: Const { ty: for<'a> fn(&'a OsString) -> &'a <OsString as Deref>::Target {<OsString as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _11 = _12;                       // scope 3 at ui/panic-runtime/lto-abort.rs:24:12: 24:15
        _10 = &_11;                      // scope 3 at ui/panic-runtime/lto-abort.rs:24:12: 24:15
        _36 = const _;                   // scope 3 at ui/panic-runtime/lto-abort.rs:24:19: 24:24
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-abort.rs:24:19: 24:24
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[1])) }
        _14 = _36;                       // scope 3 at ui/panic-runtime/lto-abort.rs:24:19: 24:24
        _9 = <&OsStr as PartialEq<&str>>::eq(move _10, move _14) -> [return: bb7, unwind: bb29]; // scope 3 at ui/panic-runtime/lto-abort.rs:24:12: 24:24
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-abort.rs:24:12: 24:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &OsStr, &'b &str) -> bool {<&OsStr as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        switchInt(move _9) -> [0: bb9, otherwise: bb8]; // scope 3 at ui/panic-runtime/lto-abort.rs:24:12: 24:24
    }

    bb8: {
        _16 = begin_panic::<&str>(const "try to catch me") -> bb28; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-abort.rs:28:20: 28:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        drop(_8) -> [return: bb36, unwind: bb30]; // scope 2 at ui/panic-runtime/lto-abort.rs:30:5: 30:6
    }

    bb10: {
        _24 = &mut _25;                  // scope 2 at ui/panic-runtime/lto-abort.rs:31:26: 31:47
        _23 = <ArgsOs as Iterator>::next(move _24) -> [return: bb11, unwind: bb27]; // scope 2 at ui/panic-runtime/lto-abort.rs:31:26: 31:47
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-abort.rs:31:41: 31:45
                                         // + literal: Const { ty: for<'a> fn(&'a mut ArgsOs) -> Option<<ArgsOs as Iterator>::Item> {<ArgsOs as Iterator>::next}, val: Value(<ZST>) }
    }

    bb11: {
        _22 = Option::<OsString>::unwrap(move _23) -> [return: bb12, unwind: bb27]; // scope 2 at ui/panic-runtime/lto-abort.rs:31:26: 31:56
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-abort.rs:31:48: 31:54
                                         // + literal: Const { ty: fn(Option<OsString>) -> OsString {Option::<OsString>::unwrap}, val: Value(<ZST>) }
    }

    bb12: {
        _21 = Command::new::<OsString>(move _22) -> [return: bb13, unwind: bb27]; // scope 2 at ui/panic-runtime/lto-abort.rs:31:13: 31:57
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-abort.rs:31:13: 31:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(OsString) -> Command {Command::new::<OsString>}, val: Value(<ZST>) }
    }

    bb13: {
        _20 = &mut _21;                  // scope 2 at ui/panic-runtime/lto-abort.rs:31:13: 31:68
        _19 = Command::arg::<&str>(move _20, const "foo") -> [return: bb14, unwind: bb26]; // scope 2 at ui/panic-runtime/lto-abort.rs:31:13: 31:68
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-abort.rs:31:58: 31:61
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-abort.rs:31:62: 31:67
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb14: {
        _18 = &mut (*_19);               // scope 2 at ui/panic-runtime/lto-abort.rs:31:13: 31:77
        _17 = Command::status(move _18) -> [return: bb15, unwind: bb26]; // scope 2 at ui/panic-runtime/lto-abort.rs:31:13: 31:77
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-abort.rs:31:69: 31:75
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<ExitStatus, std::io::Error> {Command::status}, val: Value(<ZST>) }
    }

    bb15: {
        _38 = const true;                // scope 2 at ui/panic-runtime/lto-abort.rs:31:76: 31:77
        drop(_21) -> [return: bb16, unwind: bb25]; // scope 2 at ui/panic-runtime/lto-abort.rs:31:77: 31:78
    }

    bb16: {
        drop(_25) -> [return: bb17, unwind: bb38]; // scope 2 at ui/panic-runtime/lto-abort.rs:31:77: 31:78
    }

    bb17: {
        _38 = const false;               // scope 5 at ui/panic-runtime/lto-abort.rs:32:13: 32:14
        _32 = move _17;                  // scope 5 at ui/panic-runtime/lto-abort.rs:32:13: 32:14
        _31 = Result::<ExitStatus, std::io::Error>::unwrap(move _32) -> [return: bb18, unwind: bb38]; // scope 5 at ui/panic-runtime/lto-abort.rs:32:13: 32:23
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-abort.rs:32:15: 32:21
                                         // + literal: Const { ty: fn(Result<ExitStatus, std::io::Error>) -> ExitStatus {Result::<ExitStatus, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb18: {
        _30 = &_31;                      // scope 5 at ui/panic-runtime/lto-abort.rs:32:13: 32:30
        _29 = ExitStatus::code(move _30) -> [return: bb19, unwind: bb38]; // scope 5 at ui/panic-runtime/lto-abort.rs:32:13: 32:30
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-abort.rs:32:24: 32:28
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> Option<i32> {ExitStatus::code}, val: Value(<ZST>) }
    }

    bb19: {
        _28 = &_29;                      // scope 5 at ui/panic-runtime/lto-abort.rs:32:13: 32:30
        _35 = const _;                   // scope 5 at ui/panic-runtime/lto-abort.rs:32:34: 32:41
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-abort.rs:32:34: 32:41
                                         // + literal: Const { ty: &Option<i32>, val: Unevaluated(main, [], Some(promoted[0])) }
        _33 = _35;                       // scope 5 at ui/panic-runtime/lto-abort.rs:32:34: 32:41
        _27 = <Option<i32> as PartialEq>::ne(move _28, move _33) -> [return: bb20, unwind: bb38]; // scope 5 at ui/panic-runtime/lto-abort.rs:32:13: 32:41
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-abort.rs:32:13: 32:41
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<i32>, &'b Option<i32>) -> bool {<Option<i32> as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb20: {
        _26 = Not(move _27);             // scope 5 at ui/panic-runtime/lto-abort.rs:32:5: 32:42
        switchInt(move _26) -> [0: bb22, otherwise: bb21]; // scope 5 at ui/panic-runtime/lto-abort.rs:32:5: 32:42
    }

    bb21: {
        _34 = core::panicking::panic(const "assertion failed: s.unwrap().code() != Some(0)") -> bb38; // scope 5 at ui/panic-runtime/lto-abort.rs:32:5: 32:42
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-abort.rs:32:5: 32:42
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb22: {
        _38 = const false;               // scope 2 at ui/panic-runtime/lto-abort.rs:33:1: 33:2
        drop(_2) -> [return: bb23, unwind: bb31]; // scope 1 at ui/panic-runtime/lto-abort.rs:33:1: 33:2
    }

    bb23: {
        drop(_1) -> bb24;                // scope 0 at ui/panic-runtime/lto-abort.rs:33:1: 33:2
    }

    bb24: {
        return;                          // scope 0 at ui/panic-runtime/lto-abort.rs:33:2: 33:2
    }

    bb25 (cleanup): {
        drop(_25) -> bb38;               // scope 2 at ui/panic-runtime/lto-abort.rs:31:77: 31:78
    }

    bb26 (cleanup): {
        drop(_21) -> bb27;               // scope 2 at ui/panic-runtime/lto-abort.rs:31:77: 31:78
    }

    bb27 (cleanup): {
        drop(_25) -> bb30;               // scope 2 at ui/panic-runtime/lto-abort.rs:31:77: 31:78
    }

    bb28 (cleanup): {
        drop(_15) -> bb29;               // scope 3 at ui/panic-runtime/lto-abort.rs:29:9: 29:10
    }

    bb29 (cleanup): {
        drop(_8) -> bb30;                // scope 2 at ui/panic-runtime/lto-abort.rs:30:5: 30:6
    }

    bb30 (cleanup): {
        drop(_2) -> bb31;                // scope 1 at ui/panic-runtime/lto-abort.rs:33:1: 33:2
    }

    bb31 (cleanup): {
        drop(_1) -> bb32;                // scope 0 at ui/panic-runtime/lto-abort.rs:33:1: 33:2
    }

    bb32 (cleanup): {
        resume;                          // scope 0 at ui/panic-runtime/lto-abort.rs:19:1: 33:2
    }

    bb33: {
        _37 = const false;               // scope 2 at ui/panic-runtime/lto-abort.rs:30:5: 30:6
        _25 = args_os() -> [return: bb10, unwind: bb30]; // scope 2 at ui/panic-runtime/lto-abort.rs:31:26: 31:40
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-abort.rs:31:26: 31:38
                                         // + literal: Const { ty: fn() -> ArgsOs {args_os}, val: Value(<ZST>) }
    }

    bb34: {
        switchInt(_37) -> [0: bb33, otherwise: bb35]; // scope 2 at ui/panic-runtime/lto-abort.rs:30:5: 30:6
    }

    bb35: {
        drop(((_5 as Some).0: std::ffi::OsString)) -> [return: bb33, unwind: bb30]; // scope 2 at ui/panic-runtime/lto-abort.rs:30:5: 30:6
    }

    bb36: {
        _39 = discriminant(_5);          // scope 2 at ui/panic-runtime/lto-abort.rs:30:5: 30:6
        switchInt(move _39) -> [1: bb34, otherwise: bb33]; // scope 2 at ui/panic-runtime/lto-abort.rs:30:5: 30:6
    }

    bb37 (cleanup): {
        drop(_17) -> bb30;               // scope 2 at ui/panic-runtime/lto-abort.rs:33:1: 33:2
    }

    bb38 (cleanup): {
        switchInt(_38) -> [0: bb30, otherwise: bb37]; // scope 2 at ui/panic-runtime/lto-abort.rs:33:1: 33:2
    }
}

promoted[0] in main: &Option<i32> = {
    let mut _0: &std::option::Option<i32>; // return place in scope 0 at ui/panic-runtime/lto-abort.rs:32:34: 32:41
    let mut _1: std::option::Option<i32>; // in scope 0 at ui/panic-runtime/lto-abort.rs:32:34: 32:41

    bb0: {
        _1 = Option::<i32>::Some(const 0_i32); // scope 0 at ui/panic-runtime/lto-abort.rs:32:34: 32:41
        _0 = &_1;                        // scope 0 at ui/panic-runtime/lto-abort.rs:32:34: 32:41
        return;                          // scope 0 at ui/panic-runtime/lto-abort.rs:32:34: 32:41
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/panic-runtime/lto-abort.rs:24:19: 24:24
    let mut _1: &str;                    // in scope 0 at ui/panic-runtime/lto-abort.rs:24:19: 24:24

    bb0: {
        _1 = const "foo";                // scope 0 at ui/panic-runtime/lto-abort.rs:24:19: 24:24
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-abort.rs:24:19: 24:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/panic-runtime/lto-abort.rs:24:19: 24:24
        return;                          // scope 0 at ui/panic-runtime/lto-abort.rs:24:19: 24:24
    }
}
