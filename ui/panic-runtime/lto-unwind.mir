// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/panic-runtime/lto-unwind.rs:15:1: 15:19>::drop(_1: &mut Bomb) -> () {
    debug self => _1;                    // in scope 0 at ui/panic-runtime/lto-unwind.rs:16:13: 16:22
    let mut _0: ();                      // return place in scope 0 at ui/panic-runtime/lto-unwind.rs:16:24: 16:24
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/panic-runtime/lto-unwind.rs:17:18: 17:37
    let mut _5: &[&str; 1];              // in scope 0 at ui/panic-runtime/lto-unwind.rs:17:18: 17:37
    let _6: &[&str; 1];                  // in scope 0 at ui/panic-runtime/lto-unwind.rs:17:18: 17:37
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: &[&str; 1];             // in scope 0 at ui/panic-runtime/lto-unwind.rs:17:18: 17:37

    bb0: {
        _11 = const _;                   // scope 0 at ui/panic-runtime/lto-unwind.rs:17:18: 17:37
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:17:18: 17:37
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<Bomb as Drop>::drop, [], Some(promoted[1])) }
        _6 = _11;                        // scope 0 at ui/panic-runtime/lto-unwind.rs:17:18: 17:37
        _5 = _6;                         // scope 0 at ui/panic-runtime/lto-unwind.rs:17:18: 17:37
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/panic-runtime/lto-unwind.rs:17:18: 17:37
        _10 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(<Bomb as Drop>::drop, [], Some(promoted[0])) }
        _9 = _10;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _print(move _3) -> bb2;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/panic-runtime/lto-unwind.rs:18:6: 18:6
    }
}

promoted[0] in <impl at ui/panic-runtime/lto-unwind.rs:15:1: 15:19>::drop: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in <impl at ui/panic-runtime/lto-unwind.rs:15:1: 15:19>::drop: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/panic-runtime/lto-unwind.rs:17:18: 17:37
    let mut _1: [&str; 1];               // in scope 0 at ui/panic-runtime/lto-unwind.rs:17:18: 17:37

    bb0: {
        _1 = [const "hurray you ran me\n"]; // scope 0 at ui/panic-runtime/lto-unwind.rs:17:18: 17:37
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:17:18: 17:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/panic-runtime/lto-unwind.rs:17:18: 17:37
        return;                          // scope 0 at ui/panic-runtime/lto-unwind.rs:17:18: 17:37
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/panic-runtime/lto-unwind.rs:21:11: 21:11
    let mut _1: std::env::ArgsOs;        // in scope 0 at ui/panic-runtime/lto-unwind.rs:22:9: 22:17
    let mut _3: std::option::Option<std::ffi::OsString>; // in scope 0 at ui/panic-runtime/lto-unwind.rs:23:14: 23:25
    let mut _4: &mut std::env::ArgsOs;   // in scope 0 at ui/panic-runtime/lto-unwind.rs:23:14: 23:25
    let mut _5: std::option::Option<std::ffi::OsString>; // in scope 0 at ui/panic-runtime/lto-unwind.rs:25:22: 25:33
    let mut _6: &mut std::env::ArgsOs;   // in scope 0 at ui/panic-runtime/lto-unwind.rs:25:22: 25:33
    let mut _7: isize;                   // in scope 0 at ui/panic-runtime/lto-unwind.rs:25:12: 25:19
    let mut _9: bool;                    // in scope 0 at ui/panic-runtime/lto-unwind.rs:26:12: 26:24
    let mut _10: &&std::ffi::OsStr;      // in scope 0 at ui/panic-runtime/lto-unwind.rs:26:12: 26:15
    let _11: &std::ffi::OsStr;           // in scope 0 at ui/panic-runtime/lto-unwind.rs:26:12: 26:15
    let _12: &std::ffi::OsStr;           // in scope 0 at ui/panic-runtime/lto-unwind.rs:26:13: 26:15
    let mut _13: &std::ffi::OsString;    // in scope 0 at ui/panic-runtime/lto-unwind.rs:26:14: 26:15
    let mut _14: &&str;                  // in scope 0 at ui/panic-runtime/lto-unwind.rs:26:19: 26:24
    let mut _16: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _18: &mut std::process::Command; // in scope 0 at ui/panic-runtime/lto-unwind.rs:33:13: 33:77
    let mut _19: &mut std::process::Command; // in scope 0 at ui/panic-runtime/lto-unwind.rs:33:13: 33:68
    let mut _20: &mut std::process::Command; // in scope 0 at ui/panic-runtime/lto-unwind.rs:33:13: 33:68
    let mut _21: std::process::Command;  // in scope 0 at ui/panic-runtime/lto-unwind.rs:33:13: 33:57
    let mut _22: std::ffi::OsString;     // in scope 0 at ui/panic-runtime/lto-unwind.rs:33:26: 33:56
    let mut _23: std::option::Option<std::ffi::OsString>; // in scope 0 at ui/panic-runtime/lto-unwind.rs:33:26: 33:47
    let mut _24: &mut std::env::ArgsOs;  // in scope 0 at ui/panic-runtime/lto-unwind.rs:33:26: 33:47
    let mut _25: std::env::ArgsOs;       // in scope 0 at ui/panic-runtime/lto-unwind.rs:33:26: 33:40
    let mut _27: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/panic-runtime/lto-unwind.rs:34:13: 34:14
    let mut _28: bool;                   // in scope 0 at ui/panic-runtime/lto-unwind.rs:35:5: 35:33
    let mut _29: bool;                   // in scope 0 at ui/panic-runtime/lto-unwind.rs:35:13: 35:32
    let mut _30: bool;                   // in scope 0 at ui/panic-runtime/lto-unwind.rs:35:14: 35:32
    let mut _31: &std::process::ExitStatus; // in scope 0 at ui/panic-runtime/lto-unwind.rs:35:14: 35:32
    let mut _32: !;                      // in scope 0 at ui/panic-runtime/lto-unwind.rs:35:5: 35:33
    let mut _33: bool;                   // in scope 0 at ui/panic-runtime/lto-unwind.rs:36:5: 36:78
    let mut _34: bool;                   // in scope 0 at ui/panic-runtime/lto-unwind.rs:36:13: 36:77
    let mut _35: &str;                   // in scope 0 at ui/panic-runtime/lto-unwind.rs:36:13: 36:77
    let _36: &str;                       // in scope 0 at ui/panic-runtime/lto-unwind.rs:36:13: 36:77
    let mut _37: &std::borrow::Cow<'_, str>; // in scope 0 at ui/panic-runtime/lto-unwind.rs:36:13: 36:77
    let _38: std::borrow::Cow<'_, str>;  // in scope 0 at ui/panic-runtime/lto-unwind.rs:36:13: 36:47
    let mut _39: &[u8];                  // in scope 0 at ui/panic-runtime/lto-unwind.rs:36:37: 36:46
    let _40: &[u8];                      // in scope 0 at ui/panic-runtime/lto-unwind.rs:36:37: 36:46
    let mut _41: &std::vec::Vec<u8>;     // in scope 0 at ui/panic-runtime/lto-unwind.rs:36:37: 36:46
    let _42: &std::vec::Vec<u8>;         // in scope 0 at ui/panic-runtime/lto-unwind.rs:36:37: 36:46
    let mut _43: !;                      // in scope 0 at ui/panic-runtime/lto-unwind.rs:36:5: 36:78
    let mut _45: bool;                   // in scope 0 at ui/panic-runtime/lto-unwind.rs:32:5: 32:6
    let mut _46: bool;                   // in scope 0 at ui/panic-runtime/lto-unwind.rs:37:1: 37:2
    let mut _47: isize;                  // in scope 0 at ui/panic-runtime/lto-unwind.rs:32:5: 32:6
    scope 1 {
        debug args => _1;                // in scope 1 at ui/panic-runtime/lto-unwind.rs:22:9: 22:17
        let _2: std::ffi::OsString;      // in scope 1 at ui/panic-runtime/lto-unwind.rs:23:9: 23:11
        scope 2 {
            debug me => _2;              // in scope 2 at ui/panic-runtime/lto-unwind.rs:23:9: 23:11
            let _17: std::result::Result<std::process::Output, std::io::Error>; // in scope 2 at ui/panic-runtime/lto-unwind.rs:33:9: 33:10
            scope 3 {
                debug s => _8;           // in scope 3 at ui/panic-runtime/lto-unwind.rs:25:17: 25:18
                let _8: std::ffi::OsString; // in scope 3 at ui/panic-runtime/lto-unwind.rs:25:17: 25:18
                let _15: Bomb;           // in scope 3 at ui/panic-runtime/lto-unwind.rs:28:17: 28:22
                let mut _44: &&str;      // in scope 3 at ui/panic-runtime/lto-unwind.rs:26:19: 26:24
                scope 4 {
                    debug _bomb => _15;  // in scope 4 at ui/panic-runtime/lto-unwind.rs:28:17: 28:22
                }
            }
            scope 5 {
                debug s => _17;          // in scope 5 at ui/panic-runtime/lto-unwind.rs:33:9: 33:10
                let _26: std::process::Output; // in scope 5 at ui/panic-runtime/lto-unwind.rs:34:9: 34:10
                scope 6 {
                    debug s => _26;      // in scope 6 at ui/panic-runtime/lto-unwind.rs:34:9: 34:10
                }
            }
        }
    }

    bb0: {
        _45 = const false;               // scope 0 at ui/panic-runtime/lto-unwind.rs:22:9: 22:17
        _46 = const false;               // scope 0 at ui/panic-runtime/lto-unwind.rs:22:9: 22:17
        _1 = args_os() -> bb1;           // scope 0 at ui/panic-runtime/lto-unwind.rs:22:20: 22:34
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:22:20: 22:32
                                         // + literal: Const { ty: fn() -> ArgsOs {args_os}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut _1;                    // scope 1 at ui/panic-runtime/lto-unwind.rs:23:14: 23:25
        _3 = <ArgsOs as Iterator>::next(move _4) -> [return: bb2, unwind: bb40]; // scope 1 at ui/panic-runtime/lto-unwind.rs:23:14: 23:25
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:23:19: 23:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut ArgsOs) -> Option<<ArgsOs as Iterator>::Item> {<ArgsOs as Iterator>::next}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = Option::<OsString>::unwrap(move _3) -> [return: bb3, unwind: bb40]; // scope 1 at ui/panic-runtime/lto-unwind.rs:23:14: 23:34
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:23:26: 23:32
                                         // + literal: Const { ty: fn(Option<OsString>) -> OsString {Option::<OsString>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = &mut _1;                    // scope 3 at ui/panic-runtime/lto-unwind.rs:25:22: 25:33
        _5 = <ArgsOs as Iterator>::next(move _6) -> [return: bb4, unwind: bb39]; // scope 3 at ui/panic-runtime/lto-unwind.rs:25:22: 25:33
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:25:27: 25:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut ArgsOs) -> Option<<ArgsOs as Iterator>::Item> {<ArgsOs as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _45 = const true;                // scope 3 at ui/panic-runtime/lto-unwind.rs:25:32: 25:33
        _7 = discriminant(_5);           // scope 3 at ui/panic-runtime/lto-unwind.rs:25:12: 25:19
        switchInt(move _7) -> [1: bb5, otherwise: bb45]; // scope 3 at ui/panic-runtime/lto-unwind.rs:25:12: 25:19
    }

    bb5: {
        _45 = const false;               // scope 3 at ui/panic-runtime/lto-unwind.rs:25:17: 25:18
        _8 = move ((_5 as Some).0: std::ffi::OsString); // scope 3 at ui/panic-runtime/lto-unwind.rs:25:17: 25:18
        _13 = &_8;                       // scope 3 at ui/panic-runtime/lto-unwind.rs:26:14: 26:15
        _12 = <OsString as Deref>::deref(move _13) -> [return: bb6, unwind: bb38]; // scope 3 at ui/panic-runtime/lto-unwind.rs:26:13: 26:15
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:26:13: 26:15
                                         // + literal: Const { ty: for<'a> fn(&'a OsString) -> &'a <OsString as Deref>::Target {<OsString as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _11 = _12;                       // scope 3 at ui/panic-runtime/lto-unwind.rs:26:12: 26:15
        _10 = &_11;                      // scope 3 at ui/panic-runtime/lto-unwind.rs:26:12: 26:15
        _44 = const _;                   // scope 3 at ui/panic-runtime/lto-unwind.rs:26:19: 26:24
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:26:19: 26:24
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[0])) }
        _14 = _44;                       // scope 3 at ui/panic-runtime/lto-unwind.rs:26:19: 26:24
        _9 = <&OsStr as PartialEq<&str>>::eq(move _10, move _14) -> [return: bb7, unwind: bb38]; // scope 3 at ui/panic-runtime/lto-unwind.rs:26:12: 26:24
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:26:12: 26:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &OsStr, &'b &str) -> bool {<&OsStr as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        switchInt(move _9) -> [0: bb9, otherwise: bb8]; // scope 3 at ui/panic-runtime/lto-unwind.rs:26:12: 26:24
    }

    bb8: {
        _16 = begin_panic::<&str>(const "try to catch me") -> bb37; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:30:20: 30:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        drop(_8) -> [return: bb45, unwind: bb39]; // scope 2 at ui/panic-runtime/lto-unwind.rs:32:5: 32:6
    }

    bb10: {
        _24 = &mut _25;                  // scope 2 at ui/panic-runtime/lto-unwind.rs:33:26: 33:47
        _23 = <ArgsOs as Iterator>::next(move _24) -> [return: bb11, unwind: bb36]; // scope 2 at ui/panic-runtime/lto-unwind.rs:33:26: 33:47
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:33:41: 33:45
                                         // + literal: Const { ty: for<'a> fn(&'a mut ArgsOs) -> Option<<ArgsOs as Iterator>::Item> {<ArgsOs as Iterator>::next}, val: Value(<ZST>) }
    }

    bb11: {
        _22 = Option::<OsString>::unwrap(move _23) -> [return: bb12, unwind: bb36]; // scope 2 at ui/panic-runtime/lto-unwind.rs:33:26: 33:56
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:33:48: 33:54
                                         // + literal: Const { ty: fn(Option<OsString>) -> OsString {Option::<OsString>::unwrap}, val: Value(<ZST>) }
    }

    bb12: {
        _21 = Command::new::<OsString>(move _22) -> [return: bb13, unwind: bb36]; // scope 2 at ui/panic-runtime/lto-unwind.rs:33:13: 33:57
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:33:13: 33:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(OsString) -> Command {Command::new::<OsString>}, val: Value(<ZST>) }
    }

    bb13: {
        _20 = &mut _21;                  // scope 2 at ui/panic-runtime/lto-unwind.rs:33:13: 33:68
        _19 = Command::arg::<&str>(move _20, const "foo") -> [return: bb14, unwind: bb35]; // scope 2 at ui/panic-runtime/lto-unwind.rs:33:13: 33:68
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:33:58: 33:61
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:33:62: 33:67
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb14: {
        _18 = &mut (*_19);               // scope 2 at ui/panic-runtime/lto-unwind.rs:33:13: 33:77
        _17 = Command::output(move _18) -> [return: bb15, unwind: bb35]; // scope 2 at ui/panic-runtime/lto-unwind.rs:33:13: 33:77
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:33:69: 33:75
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb15: {
        _46 = const true;                // scope 2 at ui/panic-runtime/lto-unwind.rs:33:76: 33:77
        drop(_21) -> [return: bb16, unwind: bb34]; // scope 2 at ui/panic-runtime/lto-unwind.rs:33:77: 33:78
    }

    bb16: {
        drop(_25) -> [return: bb17, unwind: bb47]; // scope 2 at ui/panic-runtime/lto-unwind.rs:33:77: 33:78
    }

    bb17: {
        _46 = const false;               // scope 5 at ui/panic-runtime/lto-unwind.rs:34:13: 34:14
        _27 = move _17;                  // scope 5 at ui/panic-runtime/lto-unwind.rs:34:13: 34:14
        _26 = Result::<Output, std::io::Error>::unwrap(move _27) -> [return: bb18, unwind: bb47]; // scope 5 at ui/panic-runtime/lto-unwind.rs:34:13: 34:23
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:34:15: 34:21
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb18: {
        _31 = &(_26.0: std::process::ExitStatus); // scope 6 at ui/panic-runtime/lto-unwind.rs:35:14: 35:32
        _30 = ExitStatus::success(move _31) -> [return: bb19, unwind: bb33]; // scope 6 at ui/panic-runtime/lto-unwind.rs:35:14: 35:32
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:35:23: 35:30
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb19: {
        _29 = Not(move _30);             // scope 6 at ui/panic-runtime/lto-unwind.rs:35:13: 35:32
        _28 = Not(move _29);             // scope 6 at ui/panic-runtime/lto-unwind.rs:35:5: 35:33
        switchInt(move _28) -> [0: bb21, otherwise: bb20]; // scope 6 at ui/panic-runtime/lto-unwind.rs:35:5: 35:33
    }

    bb20: {
        _32 = core::panicking::panic(const "assertion failed: !s.status.success()") -> bb33; // scope 6 at ui/panic-runtime/lto-unwind.rs:35:5: 35:33
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:35:5: 35:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _42 = &(_26.1: std::vec::Vec<u8>); // scope 6 at ui/panic-runtime/lto-unwind.rs:36:37: 36:46
        _41 = _42;                       // scope 6 at ui/panic-runtime/lto-unwind.rs:36:37: 36:46
        _40 = <Vec<u8> as Deref>::deref(move _41) -> [return: bb22, unwind: bb33]; // scope 6 at ui/panic-runtime/lto-unwind.rs:36:37: 36:46
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:36:37: 36:46
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb22: {
        _39 = _40;                       // scope 6 at ui/panic-runtime/lto-unwind.rs:36:37: 36:46
        _38 = String::from_utf8_lossy(move _39) -> [return: bb23, unwind: bb33]; // scope 6 at ui/panic-runtime/lto-unwind.rs:36:13: 36:47
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:36:13: 36:36
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Cow<'a, str> {String::from_utf8_lossy}, val: Value(<ZST>) }
    }

    bb23: {
        _37 = &_38;                      // scope 6 at ui/panic-runtime/lto-unwind.rs:36:13: 36:77
        _36 = <Cow<'_, str> as Deref>::deref(move _37) -> [return: bb24, unwind: bb32]; // scope 6 at ui/panic-runtime/lto-unwind.rs:36:13: 36:77
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:36:13: 36:77
                                         // + literal: Const { ty: for<'a> fn(&'a Cow<'_, str>) -> &'a <Cow<'_, str> as Deref>::Target {<Cow<'_, str> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb24: {
        _35 = _36;                       // scope 6 at ui/panic-runtime/lto-unwind.rs:36:13: 36:77
        _34 = core::str::<impl str>::contains::<'_, &str>(move _35, const "hurray you ran me") -> [return: bb25, unwind: bb32]; // scope 6 at ui/panic-runtime/lto-unwind.rs:36:13: 36:77
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:36:48: 36:56
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::contains::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:36:57: 36:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb25: {
        _33 = Not(move _34);             // scope 6 at ui/panic-runtime/lto-unwind.rs:36:5: 36:78
        drop(_38) -> [return: bb26, unwind: bb33]; // scope 6 at ui/panic-runtime/lto-unwind.rs:36:77: 36:78
    }

    bb26: {
        switchInt(move _33) -> [0: bb28, otherwise: bb27]; // scope 6 at ui/panic-runtime/lto-unwind.rs:36:5: 36:78
    }

    bb27: {
        _43 = core::panicking::panic(const "assertion failed: String::from_utf8_lossy(&s.stdout).contains(\\\"hurray you ran me\\\")") -> bb33; // scope 6 at ui/panic-runtime/lto-unwind.rs:36:5: 36:78
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:36:5: 36:78
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb28: {
        drop(_26) -> [return: bb29, unwind: bb47]; // scope 5 at ui/panic-runtime/lto-unwind.rs:37:1: 37:2
    }

    bb29: {
        _46 = const false;               // scope 2 at ui/panic-runtime/lto-unwind.rs:37:1: 37:2
        drop(_2) -> [return: bb30, unwind: bb40]; // scope 1 at ui/panic-runtime/lto-unwind.rs:37:1: 37:2
    }

    bb30: {
        drop(_1) -> bb31;                // scope 0 at ui/panic-runtime/lto-unwind.rs:37:1: 37:2
    }

    bb31: {
        return;                          // scope 0 at ui/panic-runtime/lto-unwind.rs:37:2: 37:2
    }

    bb32 (cleanup): {
        drop(_38) -> bb33;               // scope 6 at ui/panic-runtime/lto-unwind.rs:36:77: 36:78
    }

    bb33 (cleanup): {
        drop(_26) -> bb47;               // scope 5 at ui/panic-runtime/lto-unwind.rs:37:1: 37:2
    }

    bb34 (cleanup): {
        drop(_25) -> bb47;               // scope 2 at ui/panic-runtime/lto-unwind.rs:33:77: 33:78
    }

    bb35 (cleanup): {
        drop(_21) -> bb36;               // scope 2 at ui/panic-runtime/lto-unwind.rs:33:77: 33:78
    }

    bb36 (cleanup): {
        drop(_25) -> bb39;               // scope 2 at ui/panic-runtime/lto-unwind.rs:33:77: 33:78
    }

    bb37 (cleanup): {
        drop(_15) -> bb38;               // scope 3 at ui/panic-runtime/lto-unwind.rs:31:9: 31:10
    }

    bb38 (cleanup): {
        drop(_8) -> bb39;                // scope 2 at ui/panic-runtime/lto-unwind.rs:32:5: 32:6
    }

    bb39 (cleanup): {
        drop(_2) -> bb40;                // scope 1 at ui/panic-runtime/lto-unwind.rs:37:1: 37:2
    }

    bb40 (cleanup): {
        drop(_1) -> bb41;                // scope 0 at ui/panic-runtime/lto-unwind.rs:37:1: 37:2
    }

    bb41 (cleanup): {
        resume;                          // scope 0 at ui/panic-runtime/lto-unwind.rs:21:1: 37:2
    }

    bb42: {
        _45 = const false;               // scope 2 at ui/panic-runtime/lto-unwind.rs:32:5: 32:6
        _25 = args_os() -> [return: bb10, unwind: bb39]; // scope 2 at ui/panic-runtime/lto-unwind.rs:33:26: 33:40
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:33:26: 33:38
                                         // + literal: Const { ty: fn() -> ArgsOs {args_os}, val: Value(<ZST>) }
    }

    bb43: {
        switchInt(_45) -> [0: bb42, otherwise: bb44]; // scope 2 at ui/panic-runtime/lto-unwind.rs:32:5: 32:6
    }

    bb44: {
        drop(((_5 as Some).0: std::ffi::OsString)) -> [return: bb42, unwind: bb39]; // scope 2 at ui/panic-runtime/lto-unwind.rs:32:5: 32:6
    }

    bb45: {
        _47 = discriminant(_5);          // scope 2 at ui/panic-runtime/lto-unwind.rs:32:5: 32:6
        switchInt(move _47) -> [1: bb43, otherwise: bb42]; // scope 2 at ui/panic-runtime/lto-unwind.rs:32:5: 32:6
    }

    bb46 (cleanup): {
        drop(_17) -> bb39;               // scope 2 at ui/panic-runtime/lto-unwind.rs:37:1: 37:2
    }

    bb47 (cleanup): {
        switchInt(_46) -> [0: bb39, otherwise: bb46]; // scope 2 at ui/panic-runtime/lto-unwind.rs:37:1: 37:2
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/panic-runtime/lto-unwind.rs:26:19: 26:24
    let mut _1: &str;                    // in scope 0 at ui/panic-runtime/lto-unwind.rs:26:19: 26:24

    bb0: {
        _1 = const "foo";                // scope 0 at ui/panic-runtime/lto-unwind.rs:26:19: 26:24
                                         // mir::Constant
                                         // + span: ui/panic-runtime/lto-unwind.rs:26:19: 26:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/panic-runtime/lto-unwind.rs:26:19: 26:24
        return;                          // scope 0 at ui/panic-runtime/lto-unwind.rs:26:19: 26:24
    }
}
