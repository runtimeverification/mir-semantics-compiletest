// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/panic-runtime/lto-unwind.rs:15:1: 15:19>::drop(_1: &mut Bomb) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[&str; 1];

    bb0: {
        _5 = const _;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = _print(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in <impl at ui/panic-runtime/lto-unwind.rs:15:1: 15:19>::drop: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "hurray you ran me\n"];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::env::ArgsOs;
    let mut _3: std::option::Option<std::ffi::OsString>;
    let mut _4: &mut std::env::ArgsOs;
    let mut _5: std::option::Option<std::ffi::OsString>;
    let mut _6: &mut std::env::ArgsOs;
    let mut _7: isize;
    let mut _9: bool;
    let mut _10: &&std::ffi::OsStr;
    let _11: &std::ffi::OsStr;
    let _12: &std::ffi::OsStr;
    let mut _13: &std::ffi::OsString;
    let _15: !;
    let mut _17: &mut std::process::Command;
    let mut _18: &mut std::process::Command;
    let mut _19: &mut std::process::Command;
    let mut _20: std::process::Command;
    let mut _21: std::ffi::OsString;
    let mut _22: std::option::Option<std::ffi::OsString>;
    let mut _23: &mut std::env::ArgsOs;
    let mut _24: std::env::ArgsOs;
    let mut _26: std::result::Result<std::process::Output, std::io::Error>;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: &std::process::ExitStatus;
    let mut _31: !;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: &str;
    let _35: &str;
    let mut _36: &std::borrow::Cow<'_, str>;
    let _37: std::borrow::Cow<'_, str>;
    let mut _38: &[u8];
    let _39: &[u8];
    let _40: &std::vec::Vec<u8>;
    let mut _41: !;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: isize;
    scope 1 {
        debug args => _1;
        let _2: std::ffi::OsString;
        scope 2 {
            debug me => _2;
            let _16: std::result::Result<std::process::Output, std::io::Error>;
            scope 3 {
                debug s => _8;
                let _8: std::ffi::OsString;
                let _14: Bomb;
                let mut _42: &&str;
                scope 4 {
                    debug _bomb => const Bomb;
                }
            }
            scope 5 {
                debug s => _16;
                let _25: std::process::Output;
                scope 6 {
                    debug s => _25;
                }
            }
        }
    }

    bb0: {
        _44 = const false;
        _43 = const false;
        _1 = args_os() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _1;
        _3 = <ArgsOs as Iterator>::next(move _4) -> [return: bb2, unwind: bb40];
    }

    bb2: {
        _2 = Option::<OsString>::unwrap(move _3) -> [return: bb3, unwind: bb40];
    }

    bb3: {
        _6 = &mut _1;
        _5 = <ArgsOs as Iterator>::next(move _6) -> [return: bb4, unwind: bb39];
    }

    bb4: {
        _43 = const true;
        _7 = discriminant(_5);
        switchInt(move _7) -> [1: bb5, otherwise: bb45];
    }

    bb5: {
        _43 = const false;
        _8 = move ((_5 as Some).0: std::ffi::OsString);
        _13 = &_8;
        _12 = <OsString as Deref>::deref(move _13) -> [return: bb6, unwind: bb38];
    }

    bb6: {
        _11 = _12;
        _10 = &_11;
        _42 = const _;
        _9 = <&OsStr as PartialEq<&str>>::eq(move _10, _42) -> [return: bb7, unwind: bb38];
    }

    bb7: {
        switchInt(move _9) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _15 = begin_panic::<&str>(const "try to catch me") -> bb37;
    }

    bb9: {
        drop(_8) -> [return: bb45, unwind: bb39];
    }

    bb10: {
        _23 = &mut _24;
        _22 = <ArgsOs as Iterator>::next(move _23) -> [return: bb11, unwind: bb36];
    }

    bb11: {
        _21 = Option::<OsString>::unwrap(move _22) -> [return: bb12, unwind: bb36];
    }

    bb12: {
        _20 = Command::new::<OsString>(move _21) -> [return: bb13, unwind: bb36];
    }

    bb13: {
        _19 = &mut _20;
        _18 = Command::arg::<&str>(move _19, const "foo") -> [return: bb14, unwind: bb35];
    }

    bb14: {
        _17 = _18;
        _16 = Command::output(move _17) -> [return: bb15, unwind: bb35];
    }

    bb15: {
        _44 = const true;
        drop(_20) -> [return: bb16, unwind: bb34];
    }

    bb16: {
        drop(_24) -> [return: bb17, unwind: bb47];
    }

    bb17: {
        _44 = const false;
        _26 = move _16;
        _25 = Result::<Output, std::io::Error>::unwrap(move _26) -> [return: bb18, unwind: bb47];
    }

    bb18: {
        _30 = &(_25.0: std::process::ExitStatus);
        _29 = ExitStatus::success(move _30) -> [return: bb19, unwind: bb33];
    }

    bb19: {
        _28 = Not(move _29);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _31 = core::panicking::panic(const "assertion failed: !s.status.success()") -> bb33;
    }

    bb21: {
        _40 = &(_25.1: std::vec::Vec<u8>);
        _39 = <Vec<u8> as Deref>::deref(_40) -> [return: bb22, unwind: bb33];
    }

    bb22: {
        _38 = _39;
        _37 = String::from_utf8_lossy(move _38) -> [return: bb23, unwind: bb33];
    }

    bb23: {
        _36 = &_37;
        _35 = <Cow<'_, str> as Deref>::deref(move _36) -> [return: bb24, unwind: bb32];
    }

    bb24: {
        _34 = _35;
        _33 = core::str::<impl str>::contains::<'_, &str>(move _34, const "hurray you ran me") -> [return: bb25, unwind: bb32];
    }

    bb25: {
        _32 = Not(move _33);
        drop(_37) -> [return: bb26, unwind: bb33];
    }

    bb26: {
        switchInt(move _32) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _41 = core::panicking::panic(const "assertion failed: String::from_utf8_lossy(&s.stdout).contains(\\\"hurray you ran me\\\")") -> bb33;
    }

    bb28: {
        drop(_25) -> [return: bb29, unwind: bb47];
    }

    bb29: {
        _44 = const false;
        drop(_2) -> [return: bb30, unwind: bb40];
    }

    bb30: {
        drop(_1) -> [return: bb31, unwind continue];
    }

    bb31: {
        return;
    }

    bb32 (cleanup): {
        drop(_37) -> [return: bb33, unwind terminate];
    }

    bb33 (cleanup): {
        drop(_25) -> [return: bb47, unwind terminate];
    }

    bb34 (cleanup): {
        drop(_24) -> [return: bb47, unwind terminate];
    }

    bb35 (cleanup): {
        drop(_20) -> [return: bb36, unwind terminate];
    }

    bb36 (cleanup): {
        drop(_24) -> [return: bb39, unwind terminate];
    }

    bb37 (cleanup): {
        drop(_14) -> [return: bb38, unwind terminate];
    }

    bb38 (cleanup): {
        drop(_8) -> [return: bb39, unwind terminate];
    }

    bb39 (cleanup): {
        drop(_2) -> [return: bb40, unwind terminate];
    }

    bb40 (cleanup): {
        drop(_1) -> [return: bb41, unwind terminate];
    }

    bb41 (cleanup): {
        resume;
    }

    bb42: {
        _43 = const false;
        _24 = args_os() -> [return: bb10, unwind: bb39];
    }

    bb43: {
        switchInt(_43) -> [0: bb42, otherwise: bb44];
    }

    bb44: {
        drop(((_5 as Some).0: std::ffi::OsString)) -> [return: bb42, unwind: bb39];
    }

    bb45: {
        _45 = discriminant(_5);
        switchInt(move _45) -> [1: bb43, otherwise: bb42];
    }

    bb46 (cleanup): {
        drop(_16) -> [return: bb39, unwind terminate];
    }

    bb47 (cleanup): {
        switchInt(_44) -> [0: bb39, otherwise: bb46];
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "foo";
        _0 = &_1;
        return;
    }
}
