// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn build1() -> Vec<isize> {
    let mut _0: std::vec::Vec<isize>;    // return place in scope 0 at ui/panic-runtime/unwind-rec2.rs:5:16: 5:26
    let mut _1: std::boxed::Box<[isize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _2: std::boxed::Box<[isize; 7]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: std::boxed::Box<[isize; 7]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: *const [isize; 7];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
    }

    bb0: {
        _3 = const 56_usize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _4 = const 8_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [isize; 7]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = (((_6.0: std::ptr::Unique<[isize; 7]>).0: std::ptr::NonNull<[isize; 7]>).0: *const [isize; 7]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_7) = [const 0_isize, const 0_isize, const 0_isize, const 0_isize, const 0_isize, const 0_isize, const 0_isize]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _2 = move _6;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = move _2 as std::boxed::Box<[isize]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _0 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _1) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[isize]>) -> Vec<isize> {slice::<impl [isize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/panic-runtime/unwind-rec2.rs:7:2: 7:2
    }
}

fn build2() -> Vec<isize> {
    let mut _0: std::vec::Vec<isize>;    // return place in scope 0 at ui/panic-runtime/unwind-rec2.rs:9:16: 9:26
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _1 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/panic-runtime/unwind-rec2.rs:18:11: 18:11
    let _1: Blk;                         // in scope 0 at ui/panic-runtime/unwind-rec2.rs:19:9: 19:13
    let mut _2: std::vec::Vec<isize>;    // in scope 0 at ui/panic-runtime/unwind-rec2.rs:20:15: 20:23
    let mut _3: std::vec::Vec<isize>;    // in scope 0 at ui/panic-runtime/unwind-rec2.rs:21:15: 21:23
    scope 1 {
        debug _blk => _1;                // in scope 1 at ui/panic-runtime/unwind-rec2.rs:19:9: 19:13
    }

    bb0: {
        _2 = build1() -> bb1;            // scope 0 at ui/panic-runtime/unwind-rec2.rs:20:15: 20:23
                                         // mir::Constant
                                         // + span: ui/panic-runtime/unwind-rec2.rs:20:15: 20:21
                                         // + literal: Const { ty: fn() -> Vec<isize> {build1}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = build2() -> [return: bb2, unwind: bb4]; // scope 0 at ui/panic-runtime/unwind-rec2.rs:21:15: 21:23
                                         // mir::Constant
                                         // + span: ui/panic-runtime/unwind-rec2.rs:21:15: 21:21
                                         // + literal: Const { ty: fn() -> Vec<isize> {build2}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = Blk { node: move _2, span: move _3 }; // scope 0 at ui/panic-runtime/unwind-rec2.rs:19:16: 22:6
        drop(_1) -> bb3;                 // scope 0 at ui/panic-runtime/unwind-rec2.rs:23:1: 23:2
    }

    bb3: {
        return;                          // scope 0 at ui/panic-runtime/unwind-rec2.rs:23:2: 23:2
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/panic-runtime/unwind-rec2.rs:22:5: 22:6
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/panic-runtime/unwind-rec2.rs:18:1: 23:2
    }
}
