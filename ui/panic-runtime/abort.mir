// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/panic-runtime/abort.rs:14:1: 14:19>::drop(_1: &mut Bomb) -> () {
    debug self => _1;                    // in scope 0 at ui/panic-runtime/abort.rs:15:13: 15:22
    let mut _0: ();                      // return place in scope 0 at ui/panic-runtime/abort.rs:15:24: 15:24
    let _2: !;                           // in scope 0 at ui/panic-runtime/abort.rs:16:9: 16:30

    bb0: {
        _2 = exit(const 0_i32);          // scope 0 at ui/panic-runtime/abort.rs:16:9: 16:30
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:16:9: 16:27
                                         // + literal: Const { ty: fn(i32) -> ! {exit}, val: Value(<ZST>) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/panic-runtime/abort.rs:20:11: 20:11
    let mut _1: std::env::ArgsOs;        // in scope 0 at ui/panic-runtime/abort.rs:21:9: 21:17
    let mut _3: std::option::Option<std::ffi::OsString>; // in scope 0 at ui/panic-runtime/abort.rs:22:14: 22:25
    let mut _4: &mut std::env::ArgsOs;   // in scope 0 at ui/panic-runtime/abort.rs:22:14: 22:25
    let mut _5: std::option::Option<std::ffi::OsString>; // in scope 0 at ui/panic-runtime/abort.rs:24:22: 24:33
    let mut _6: &mut std::env::ArgsOs;   // in scope 0 at ui/panic-runtime/abort.rs:24:22: 24:33
    let mut _7: isize;                   // in scope 0 at ui/panic-runtime/abort.rs:24:12: 24:19
    let mut _9: bool;                    // in scope 0 at ui/panic-runtime/abort.rs:25:12: 25:24
    let mut _10: &&std::ffi::OsStr;      // in scope 0 at ui/panic-runtime/abort.rs:25:12: 25:15
    let _11: &std::ffi::OsStr;           // in scope 0 at ui/panic-runtime/abort.rs:25:12: 25:15
    let _12: &std::ffi::OsStr;           // in scope 0 at ui/panic-runtime/abort.rs:25:13: 25:15
    let mut _13: &std::ffi::OsString;    // in scope 0 at ui/panic-runtime/abort.rs:25:14: 25:15
    let mut _14: &&str;                  // in scope 0 at ui/panic-runtime/abort.rs:25:19: 25:24
    let mut _16: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _18: std::ffi::OsString;     // in scope 0 at ui/panic-runtime/abort.rs:33:32: 33:62
    let mut _19: std::option::Option<std::ffi::OsString>; // in scope 0 at ui/panic-runtime/abort.rs:33:32: 33:53
    let mut _20: &mut std::env::ArgsOs;  // in scope 0 at ui/panic-runtime/abort.rs:33:32: 33:53
    let mut _21: std::env::ArgsOs;       // in scope 0 at ui/panic-runtime/abort.rs:33:32: 33:46
    let _22: &mut std::process::Command; // in scope 0 at ui/panic-runtime/abort.rs:34:5: 34:19
    let mut _23: &mut std::process::Command; // in scope 0 at ui/panic-runtime/abort.rs:34:5: 34:19
    let mut _24: bool;                   // in scope 0 at ui/panic-runtime/abort.rs:37:8: 37:61
    let _25: &mut std::process::Command; // in scope 0 at ui/panic-runtime/abort.rs:38:9: 38:39
    let mut _26: &mut std::process::Command; // in scope 0 at ui/panic-runtime/abort.rs:38:9: 38:39
    let mut _28: &mut std::process::Command; // in scope 0 at ui/panic-runtime/abort.rs:41:13: 41:25
    let mut _29: bool;                   // in scope 0 at ui/panic-runtime/abort.rs:42:5: 42:42
    let mut _30: bool;                   // in scope 0 at ui/panic-runtime/abort.rs:42:13: 42:41
    let mut _31: &std::option::Option<i32>; // in scope 0 at ui/panic-runtime/abort.rs:42:13: 42:30
    let _32: std::option::Option<i32>;   // in scope 0 at ui/panic-runtime/abort.rs:42:13: 42:30
    let mut _33: &std::process::ExitStatus; // in scope 0 at ui/panic-runtime/abort.rs:42:13: 42:30
    let _34: std::process::ExitStatus;   // in scope 0 at ui/panic-runtime/abort.rs:42:13: 42:23
    let mut _35: std::result::Result<std::process::ExitStatus, std::io::Error>; // in scope 0 at ui/panic-runtime/abort.rs:42:13: 42:14
    let mut _36: &std::option::Option<i32>; // in scope 0 at ui/panic-runtime/abort.rs:42:34: 42:41
    let mut _37: !;                      // in scope 0 at ui/panic-runtime/abort.rs:42:5: 42:42
    let mut _40: bool;                   // in scope 0 at ui/panic-runtime/abort.rs:31:5: 31:6
    let mut _41: isize;                  // in scope 0 at ui/panic-runtime/abort.rs:31:5: 31:6
    scope 1 {
        debug args => _1;                // in scope 1 at ui/panic-runtime/abort.rs:21:9: 21:17
        let _2: std::ffi::OsString;      // in scope 1 at ui/panic-runtime/abort.rs:22:9: 22:11
        scope 2 {
            debug me => _2;              // in scope 2 at ui/panic-runtime/abort.rs:22:9: 22:11
            let mut _17: std::process::Command; // in scope 2 at ui/panic-runtime/abort.rs:33:9: 33:16
            scope 3 {
                debug s => _8;           // in scope 3 at ui/panic-runtime/abort.rs:24:17: 24:18
                let _8: std::ffi::OsString; // in scope 3 at ui/panic-runtime/abort.rs:24:17: 24:18
                let _15: Bomb;           // in scope 3 at ui/panic-runtime/abort.rs:27:17: 27:22
                let mut _39: &&str;      // in scope 3 at ui/panic-runtime/abort.rs:25:19: 25:24
                scope 4 {
                    debug _bomb => _15;  // in scope 4 at ui/panic-runtime/abort.rs:27:17: 27:22
                }
            }
            scope 5 {
                debug cmd => _17;        // in scope 5 at ui/panic-runtime/abort.rs:33:9: 33:16
                let _27: std::result::Result<std::process::ExitStatus, std::io::Error>; // in scope 5 at ui/panic-runtime/abort.rs:41:9: 41:10
                scope 6 {
                    debug s => _27;      // in scope 6 at ui/panic-runtime/abort.rs:41:9: 41:10
                    let mut _38: &std::option::Option<i32>; // in scope 6 at ui/panic-runtime/abort.rs:42:34: 42:41
                }
            }
        }
    }

    bb0: {
        _40 = const false;               // scope 0 at ui/panic-runtime/abort.rs:21:9: 21:17
        _1 = args_os() -> bb1;           // scope 0 at ui/panic-runtime/abort.rs:21:20: 21:34
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:21:20: 21:32
                                         // + literal: Const { ty: fn() -> ArgsOs {args_os}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut _1;                    // scope 1 at ui/panic-runtime/abort.rs:22:14: 22:25
        _3 = <ArgsOs as Iterator>::next(move _4) -> [return: bb2, unwind: bb32]; // scope 1 at ui/panic-runtime/abort.rs:22:14: 22:25
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:22:19: 22:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut ArgsOs) -> Option<<ArgsOs as Iterator>::Item> {<ArgsOs as Iterator>::next}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = Option::<OsString>::unwrap(move _3) -> [return: bb3, unwind: bb32]; // scope 1 at ui/panic-runtime/abort.rs:22:14: 22:34
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:22:26: 22:32
                                         // + literal: Const { ty: fn(Option<OsString>) -> OsString {Option::<OsString>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = &mut _1;                    // scope 3 at ui/panic-runtime/abort.rs:24:22: 24:33
        _5 = <ArgsOs as Iterator>::next(move _6) -> [return: bb4, unwind: bb31]; // scope 3 at ui/panic-runtime/abort.rs:24:22: 24:33
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:24:27: 24:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut ArgsOs) -> Option<<ArgsOs as Iterator>::Item> {<ArgsOs as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _40 = const true;                // scope 3 at ui/panic-runtime/abort.rs:24:32: 24:33
        _7 = discriminant(_5);           // scope 3 at ui/panic-runtime/abort.rs:24:12: 24:19
        switchInt(move _7) -> [1: bb5, otherwise: bb37]; // scope 3 at ui/panic-runtime/abort.rs:24:12: 24:19
    }

    bb5: {
        _40 = const false;               // scope 3 at ui/panic-runtime/abort.rs:24:17: 24:18
        _8 = move ((_5 as Some).0: std::ffi::OsString); // scope 3 at ui/panic-runtime/abort.rs:24:17: 24:18
        _13 = &_8;                       // scope 3 at ui/panic-runtime/abort.rs:25:14: 25:15
        _12 = <OsString as Deref>::deref(move _13) -> [return: bb6, unwind: bb30]; // scope 3 at ui/panic-runtime/abort.rs:25:13: 25:15
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:25:13: 25:15
                                         // + literal: Const { ty: for<'a> fn(&'a OsString) -> &'a <OsString as Deref>::Target {<OsString as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _11 = _12;                       // scope 3 at ui/panic-runtime/abort.rs:25:12: 25:15
        _10 = &_11;                      // scope 3 at ui/panic-runtime/abort.rs:25:12: 25:15
        _39 = const _;                   // scope 3 at ui/panic-runtime/abort.rs:25:19: 25:24
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:25:19: 25:24
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[1])) }
        _14 = _39;                       // scope 3 at ui/panic-runtime/abort.rs:25:19: 25:24
        _9 = <&OsStr as PartialEq<&str>>::eq(move _10, move _14) -> [return: bb7, unwind: bb30]; // scope 3 at ui/panic-runtime/abort.rs:25:12: 25:24
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:25:12: 25:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &OsStr, &'b &str) -> bool {<&OsStr as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        switchInt(move _9) -> [0: bb9, otherwise: bb8]; // scope 3 at ui/panic-runtime/abort.rs:25:12: 25:24
    }

    bb8: {
        _16 = begin_panic::<&str>(const "try to catch me") -> bb29; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:29:20: 29:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        drop(_8) -> [return: bb37, unwind: bb31]; // scope 2 at ui/panic-runtime/abort.rs:31:5: 31:6
    }

    bb10: {
        _20 = &mut _21;                  // scope 2 at ui/panic-runtime/abort.rs:33:32: 33:53
        _19 = <ArgsOs as Iterator>::next(move _20) -> [return: bb11, unwind: bb28]; // scope 2 at ui/panic-runtime/abort.rs:33:32: 33:53
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:33:47: 33:51
                                         // + literal: Const { ty: for<'a> fn(&'a mut ArgsOs) -> Option<<ArgsOs as Iterator>::Item> {<ArgsOs as Iterator>::next}, val: Value(<ZST>) }
    }

    bb11: {
        _18 = Option::<OsString>::unwrap(move _19) -> [return: bb12, unwind: bb28]; // scope 2 at ui/panic-runtime/abort.rs:33:32: 33:62
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:33:54: 33:60
                                         // + literal: Const { ty: fn(Option<OsString>) -> OsString {Option::<OsString>::unwrap}, val: Value(<ZST>) }
    }

    bb12: {
        _17 = Command::new::<OsString>(move _18) -> [return: bb13, unwind: bb28]; // scope 2 at ui/panic-runtime/abort.rs:33:19: 33:63
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:33:19: 33:31
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(OsString) -> Command {Command::new::<OsString>}, val: Value(<ZST>) }
    }

    bb13: {
        drop(_21) -> [return: bb14, unwind: bb27]; // scope 2 at ui/panic-runtime/abort.rs:33:63: 33:64
    }

    bb14: {
        _23 = &mut _17;                  // scope 5 at ui/panic-runtime/abort.rs:34:5: 34:19
        _22 = Command::arg::<&str>(move _23, const "foo") -> [return: bb15, unwind: bb27]; // scope 5 at ui/panic-runtime/abort.rs:34:5: 34:19
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:34:9: 34:12
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:34:13: 34:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _24 = const false;               // scope 5 at ui/panic-runtime/abort.rs:37:8: 37:61
        switchInt(move _24) -> [0: bb17, otherwise: bb16]; // scope 5 at ui/panic-runtime/abort.rs:37:8: 37:61
    }

    bb16: {
        _26 = &mut _17;                  // scope 5 at ui/panic-runtime/abort.rs:38:9: 38:39
        _25 = Command::env::<&str, &str>(move _26, const "RUST_BACKTRACE", const "0") -> [return: bb38, unwind: bb27]; // scope 5 at ui/panic-runtime/abort.rs:38:9: 38:39
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:38:13: 38:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str, &str) -> &'a mut Command {Command::env::<&str, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:38:17: 38:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:38:35: 38:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        _28 = &mut _17;                  // scope 5 at ui/panic-runtime/abort.rs:41:13: 41:25
        _27 = Command::status(move _28) -> [return: bb18, unwind: bb27]; // scope 5 at ui/panic-runtime/abort.rs:41:13: 41:25
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:41:17: 41:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<ExitStatus, std::io::Error> {Command::status}, val: Value(<ZST>) }
    }

    bb18: {
        _35 = move _27;                  // scope 6 at ui/panic-runtime/abort.rs:42:13: 42:14
        _34 = Result::<ExitStatus, std::io::Error>::unwrap(move _35) -> [return: bb19, unwind: bb27]; // scope 6 at ui/panic-runtime/abort.rs:42:13: 42:23
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:42:15: 42:21
                                         // + literal: Const { ty: fn(Result<ExitStatus, std::io::Error>) -> ExitStatus {Result::<ExitStatus, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb19: {
        _33 = &_34;                      // scope 6 at ui/panic-runtime/abort.rs:42:13: 42:30
        _32 = ExitStatus::code(move _33) -> [return: bb20, unwind: bb27]; // scope 6 at ui/panic-runtime/abort.rs:42:13: 42:30
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:42:24: 42:28
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> Option<i32> {ExitStatus::code}, val: Value(<ZST>) }
    }

    bb20: {
        _31 = &_32;                      // scope 6 at ui/panic-runtime/abort.rs:42:13: 42:30
        _38 = const _;                   // scope 6 at ui/panic-runtime/abort.rs:42:34: 42:41
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:42:34: 42:41
                                         // + literal: Const { ty: &Option<i32>, val: Unevaluated(main, [], Some(promoted[0])) }
        _36 = _38;                       // scope 6 at ui/panic-runtime/abort.rs:42:34: 42:41
        _30 = <Option<i32> as PartialEq>::ne(move _31, move _36) -> [return: bb21, unwind: bb27]; // scope 6 at ui/panic-runtime/abort.rs:42:13: 42:41
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:42:13: 42:41
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<i32>, &'b Option<i32>) -> bool {<Option<i32> as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb21: {
        _29 = Not(move _30);             // scope 6 at ui/panic-runtime/abort.rs:42:5: 42:42
        switchInt(move _29) -> [0: bb23, otherwise: bb22]; // scope 6 at ui/panic-runtime/abort.rs:42:5: 42:42
    }

    bb22: {
        _37 = core::panicking::panic(const "assertion failed: s.unwrap().code() != Some(0)") -> bb27; // scope 6 at ui/panic-runtime/abort.rs:42:5: 42:42
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:42:5: 42:42
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb23: {
        drop(_17) -> [return: bb24, unwind: bb31]; // scope 2 at ui/panic-runtime/abort.rs:43:1: 43:2
    }

    bb24: {
        drop(_2) -> [return: bb25, unwind: bb32]; // scope 1 at ui/panic-runtime/abort.rs:43:1: 43:2
    }

    bb25: {
        drop(_1) -> bb26;                // scope 0 at ui/panic-runtime/abort.rs:43:1: 43:2
    }

    bb26: {
        return;                          // scope 0 at ui/panic-runtime/abort.rs:43:2: 43:2
    }

    bb27 (cleanup): {
        drop(_17) -> bb31;               // scope 2 at ui/panic-runtime/abort.rs:43:1: 43:2
    }

    bb28 (cleanup): {
        drop(_21) -> bb31;               // scope 2 at ui/panic-runtime/abort.rs:33:63: 33:64
    }

    bb29 (cleanup): {
        drop(_15) -> bb30;               // scope 3 at ui/panic-runtime/abort.rs:30:9: 30:10
    }

    bb30 (cleanup): {
        drop(_8) -> bb31;                // scope 2 at ui/panic-runtime/abort.rs:31:5: 31:6
    }

    bb31 (cleanup): {
        drop(_2) -> bb32;                // scope 1 at ui/panic-runtime/abort.rs:43:1: 43:2
    }

    bb32 (cleanup): {
        drop(_1) -> bb33;                // scope 0 at ui/panic-runtime/abort.rs:43:1: 43:2
    }

    bb33 (cleanup): {
        resume;                          // scope 0 at ui/panic-runtime/abort.rs:20:1: 43:2
    }

    bb34: {
        _40 = const false;               // scope 2 at ui/panic-runtime/abort.rs:31:5: 31:6
        _21 = args_os() -> [return: bb10, unwind: bb31]; // scope 2 at ui/panic-runtime/abort.rs:33:32: 33:46
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:33:32: 33:44
                                         // + literal: Const { ty: fn() -> ArgsOs {args_os}, val: Value(<ZST>) }
    }

    bb35: {
        switchInt(_40) -> [0: bb34, otherwise: bb36]; // scope 2 at ui/panic-runtime/abort.rs:31:5: 31:6
    }

    bb36: {
        drop(((_5 as Some).0: std::ffi::OsString)) -> [return: bb34, unwind: bb31]; // scope 2 at ui/panic-runtime/abort.rs:31:5: 31:6
    }

    bb37: {
        _41 = discriminant(_5);          // scope 2 at ui/panic-runtime/abort.rs:31:5: 31:6
        switchInt(move _41) -> [1: bb35, otherwise: bb34]; // scope 2 at ui/panic-runtime/abort.rs:31:5: 31:6
    }

    bb38: {
        goto -> bb17;                    // scope 5 at ui/panic-runtime/abort.rs:38:9: 38:39
    }
}

promoted[0] in main: &Option<i32> = {
    let mut _0: &std::option::Option<i32>; // return place in scope 0 at ui/panic-runtime/abort.rs:42:34: 42:41
    let mut _1: std::option::Option<i32>; // in scope 0 at ui/panic-runtime/abort.rs:42:34: 42:41

    bb0: {
        _1 = Option::<i32>::Some(const 0_i32); // scope 0 at ui/panic-runtime/abort.rs:42:34: 42:41
        _0 = &_1;                        // scope 0 at ui/panic-runtime/abort.rs:42:34: 42:41
        return;                          // scope 0 at ui/panic-runtime/abort.rs:42:34: 42:41
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/panic-runtime/abort.rs:25:19: 25:24
    let mut _1: &str;                    // in scope 0 at ui/panic-runtime/abort.rs:25:19: 25:24

    bb0: {
        _1 = const "foo";                // scope 0 at ui/panic-runtime/abort.rs:25:19: 25:24
                                         // mir::Constant
                                         // + span: ui/panic-runtime/abort.rs:25:19: 25:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/panic-runtime/abort.rs:25:19: 25:24
        return;                          // scope 0 at ui/panic-runtime/abort.rs:25:19: 25:24
    }
}
