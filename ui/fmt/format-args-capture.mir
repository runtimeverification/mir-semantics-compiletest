// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();
    let _5: ();
    let _6: ();

    bb0: {
        _1 = named_argument_takes_precedence_to_captured() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = formatting_parameters_can_be_captured() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = capture_raw_strings_and_idents() -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = repeated_capture() -> [return: bb4, unwind continue];
    }

    bb4: {
        _5 = panic_with_single_argument_does_not_get_formatted() -> [return: bb5, unwind continue];
    }

    bb5: {
        _6 = panic_with_multiple_arguments_is_formatted() -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn named_argument_takes_precedence_to_captured() -> () {
    let mut _0: ();
    let _1: &str;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 0];
    let _8: [core::fmt::rt::Argument<'_>; 0];
    let mut _9: (&&std::string::String, &&str);
    let mut _10: &&std::string::String;
    let _11: &std::string::String;
    let mut _14: bool;
    let mut _15: bool;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let mut _23: &[core::fmt::rt::Argument<'_>];
    let _24: &[core::fmt::rt::Argument<'_>; 0];
    let _25: [core::fmt::rt::Argument<'_>; 0];
    let mut _26: (&&std::string::String, &&str);
    let mut _27: &&std::string::String;
    let _28: &std::string::String;
    let mut _31: bool;
    let mut _32: bool;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: std::fmt::Arguments<'_>;
    let mut _39: &[&str];
    let mut _40: &[core::fmt::rt::Argument<'_>];
    let _41: &[core::fmt::rt::Argument<'_>; 1];
    let _42: [core::fmt::rt::Argument<'_>; 1];
    let mut _43: core::fmt::rt::Argument<'_>;
    let _44: &&str;
    let mut _45: (&&std::string::String, &&str);
    let mut _46: &&std::string::String;
    let _47: &std::string::String;
    let mut _50: bool;
    let mut _51: bool;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug foo => const "captured";
        let _2: std::string::String;
        let _3: std::string::String;
        let mut _60: &[&str; 1];
        scope 2 {
            debug s => _2;
            let _12: &&std::string::String;
            let _13: &&str;
            let _19: std::string::String;
            let _20: std::string::String;
            let mut _58: &[&str; 1];
            let mut _59: &&str;
            scope 4 {
                debug left_val => _12;
                debug right_val => _13;
                let _16: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _16;
                }
            }
            scope 6 {
                debug s => _19;
                let _29: &&std::string::String;
                let _30: &&str;
                let _36: std::string::String;
                let _37: std::string::String;
                let mut _56: &[&str; 1];
                let mut _57: &&str;
                scope 8 {
                    debug left_val => _29;
                    debug right_val => _30;
                    let _33: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _33;
                    }
                }
                scope 10 {
                    debug s => _36;
                    let _48: &&std::string::String;
                    let _49: &&str;
                    let mut _55: &&str;
                    scope 12 {
                        debug left_val => _48;
                        debug right_val => _49;
                        let _52: core::panicking::AssertKind;
                        scope 13 {
                            debug kind => _52;
                        }
                    }
                }
                scope 11 {
                    debug res => _37;
                }
            }
            scope 7 {
                debug res => _20;
            }
        }
        scope 3 {
            debug res => _3;
        }
    }

    bb0: {
        _1 = const "captured";
        _60 = const _;
        _5 = _60 as &[&str] (Pointer(Unsize));
        _8 = core::fmt::rt::Argument::<'_>::none() -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _2 = move _3;
        _11 = &_2;
        _10 = &_11;
        _59 = const _;
        _9 = (move _10, _59);
        _12 = (_9.0: &&std::string::String);
        _13 = (_9.1: &&str);
        _15 = <&String as PartialEq<&str>>::eq(_12, _13) -> [return: bb4, unwind: bb24];
    }

    bb4: {
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<&String, &str>(move _16, _12, _13, move _18) -> bb24;
    }

    bb6: {
        _58 = const _;
        _22 = _58 as &[&str] (Pointer(Unsize));
        _25 = core::fmt::rt::Argument::<'_>::none() -> [return: bb7, unwind: bb24];
    }

    bb7: {
        _24 = &_25;
        _23 = _24 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _21 = Arguments::<'_>::new_v1(move _22, move _23) -> [return: bb8, unwind: bb24];
    }

    bb8: {
        _20 = format(move _21) -> [return: bb9, unwind: bb24];
    }

    bb9: {
        _19 = move _20;
        _28 = &_19;
        _27 = &_28;
        _57 = const _;
        _26 = (move _27, _57);
        _29 = (_26.0: &&std::string::String);
        _30 = (_26.1: &&str);
        _32 = <&String as PartialEq<&str>>::eq(_29, _30) -> [return: bb10, unwind: bb23];
    }

    bb10: {
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<&String, &str>(move _33, _29, _30, move _35) -> bb23;
    }

    bb12: {
        _56 = const _;
        _39 = _56 as &[&str] (Pointer(Unsize));
        _44 = &_1;
        _43 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_44) -> [return: bb13, unwind: bb23];
    }

    bb13: {
        _42 = [move _43];
        _41 = &_42;
        _40 = _41 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _38 = Arguments::<'_>::new_v1(move _39, move _40) -> [return: bb14, unwind: bb23];
    }

    bb14: {
        _37 = format(move _38) -> [return: bb15, unwind: bb23];
    }

    bb15: {
        _36 = move _37;
        _47 = &_36;
        _46 = &_47;
        _55 = const _;
        _45 = (move _46, _55);
        _48 = (_45.0: &&std::string::String);
        _49 = (_45.1: &&str);
        _51 = <&String as PartialEq<&str>>::eq(_48, _49) -> [return: bb16, unwind: bb22];
    }

    bb16: {
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<&String, &str>(move _52, _48, _49, move _54) -> bb22;
    }

    bb18: {
        drop(_36) -> [return: bb19, unwind: bb23];
    }

    bb19: {
        drop(_19) -> [return: bb20, unwind: bb24];
    }

    bb20: {
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_36) -> [return: bb23, unwind terminate];
    }

    bb23 (cleanup): {
        drop(_19) -> [return: bb24, unwind terminate];
    }

    bb24 (cleanup): {
        drop(_2) -> [return: bb25, unwind terminate];
    }

    bb25 (cleanup): {
        resume;
    }
}

promoted[0] in named_argument_takes_precedence_to_captured: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "positional-named-captured";
        _0 = &_1;
        return;
    }
}

promoted[1] in named_argument_takes_precedence_to_captured: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "positional-named-"];
        _0 = &_1;
        return;
    }
}

promoted[2] in named_argument_takes_precedence_to_captured: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "named-named-named";
        _0 = &_1;
        return;
    }
}

promoted[3] in named_argument_takes_precedence_to_captured: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "named-named-named"];
        _0 = &_1;
        return;
    }
}

promoted[4] in named_argument_takes_precedence_to_captured: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "named";
        _0 = &_1;
        return;
    }
}

promoted[5] in named_argument_takes_precedence_to_captured: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "named"];
        _0 = &_1;
        return;
    }
}

fn capture_raw_strings_and_idents() -> () {
    let mut _0: ();
    let _1: &str;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &&str;
    let mut _11: (&&std::string::String, &&str);
    let mut _12: &&std::string::String;
    let _13: &std::string::String;
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let mut _26: &[core::fmt::rt::Argument<'_>];
    let _27: &[core::fmt::rt::Argument<'_>; 1];
    let _28: [core::fmt::rt::Argument<'_>; 1];
    let mut _29: core::fmt::rt::Argument<'_>;
    let _30: &&str;
    let mut _31: (&&std::string::String, &&str);
    let mut _32: &&std::string::String;
    let _33: &std::string::String;
    let mut _36: bool;
    let mut _37: bool;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug type => const "apple";
        let _2: std::string::String;
        let _3: std::string::String;
        let mut _44: &[&str; 1];
        scope 2 {
            debug s => _2;
            let _14: &&std::string::String;
            let _15: &&str;
            let _21: &str;
            let mut _43: &&str;
            scope 4 {
                debug left_val => _14;
                debug right_val => _15;
                let _18: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _18;
                }
            }
            scope 6 {
                debug type => const "orange";
                let _22: std::string::String;
                let _23: std::string::String;
                let mut _42: &[&str; 1];
                scope 7 {
                    debug s => _22;
                    let _34: &&std::string::String;
                    let _35: &&str;
                    let mut _41: &&str;
                    scope 9 {
                        debug left_val => _34;
                        debug right_val => _35;
                        let _38: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _38;
                        }
                    }
                }
                scope 8 {
                    debug res => _23;
                }
            }
        }
        scope 3 {
            debug res => _3;
        }
    }

    bb0: {
        _1 = const "apple";
        _44 = const _;
        _5 = _44 as &[&str] (Pointer(Unsize));
        _10 = &_1;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _2 = move _3;
        _13 = &_2;
        _12 = &_13;
        _43 = const _;
        _11 = (move _12, _43);
        _14 = (_11.0: &&std::string::String);
        _15 = (_11.1: &&str);
        _17 = <&String as PartialEq<&str>>::eq(_14, _15) -> [return: bb4, unwind: bb16];
    }

    bb4: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<&String, &str>(move _18, _14, _15, move _20) -> bb16;
    }

    bb6: {
        _21 = const "orange";
        _42 = const _;
        _25 = _42 as &[&str] (Pointer(Unsize));
        _30 = &_21;
        _29 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_30) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _28 = [move _29];
        _27 = &_28;
        _26 = _27 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _24 = Arguments::<'_>::new_v1(move _25, move _26) -> [return: bb8, unwind: bb16];
    }

    bb8: {
        _23 = format(move _24) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        _22 = move _23;
        _33 = &_22;
        _32 = &_33;
        _41 = const _;
        _31 = (move _32, _41);
        _34 = (_31.0: &&std::string::String);
        _35 = (_31.1: &&str);
        _37 = <&String as PartialEq<&str>>::eq(_34, _35) -> [return: bb10, unwind: bb15];
    }

    bb10: {
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<&String, &str>(move _38, _34, _35, move _40) -> bb15;
    }

    bb12: {
        drop(_22) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        drop(_2) -> [return: bb14, unwind continue];
    }

    bb14: {
        return;
    }

    bb15 (cleanup): {
        drop(_22) -> [return: bb16, unwind terminate];
    }

    bb16 (cleanup): {
        drop(_2) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        resume;
    }
}

promoted[0] in capture_raw_strings_and_idents: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "The fruit is an orange";
        _0 = &_1;
        return;
    }
}

promoted[1] in capture_raw_strings_and_idents: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "The fruit is an "];
        _0 = &_1;
        return;
    }
}

promoted[2] in capture_raw_strings_and_idents: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "The fruit is an apple";
        _0 = &_1;
        return;
    }
}

promoted[3] in capture_raw_strings_and_idents: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "The fruit is an "];
        _0 = &_1;
        return;
    }
}

fn panic_with_single_argument_does_not_get_formatted() -> () {
    let mut _0: ();
    let mut _2: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _3: (&std::option::Option<&&str>, &std::option::Option<&&str>);
    let mut _4: &std::option::Option<&&str>;
    let _5: std::option::Option<&&str>;
    let mut _6: &dyn std::any::Any + std::marker::Send;
    let mut _9: bool;
    let mut _10: bool;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: *const dyn std::any::Any + std::marker::Send;
    scope 1 {
        debug msg => _1;
        let _7: &std::option::Option<&&str>;
        let _8: &std::option::Option<&&str>;
        let mut _14: &std::option::Option<&&str>;
        scope 3 {
            debug left_val => _7;
            debug right_val => _8;
            let _11: core::panicking::AssertKind;
            scope 4 {
                debug kind => _11;
            }
        }
    }
    scope 2 {
        let _1: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    }

    bb0: {
        _2 = catch_unwind::<[closure@ui/fmt/format-args-capture.rs:45:40: 45:42], ()>(const ZeroSized: [closure@ui/fmt/format-args-capture.rs:45:40: 45:42]) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = Result::<(), Box<dyn Any + Send>>::unwrap_err(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _15 = (((_1.0: std::ptr::Unique<dyn std::any::Any + std::marker::Send>).0: std::ptr::NonNull<dyn std::any::Any + std::marker::Send>).0: *const dyn std::any::Any + std::marker::Send);
        _6 = &(*_15);
        _5 = <(dyn Any + Send + 'static)>::downcast_ref::<&str>(move _6) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _4 = &_5;
        _14 = const _;
        _3 = (move _4, _14);
        _7 = (_3.0: &std::option::Option<&&str>);
        _8 = (_3.1: &std::option::Option<&&str>);
        _10 = <Option<&&str> as PartialEq>::eq(_7, _8) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<Option<&&str>, Option<&&str>>(move _11, _7, _8, move _13) -> bb8;
    }

    bb6: {
        drop(_1) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

promoted[0] in panic_with_single_argument_does_not_get_formatted: &Option<&&str> = {
    let mut _0: &std::option::Option<&&str>;
    let mut _1: std::option::Option<&&str>;
    let mut _2: &&str;
    let mut _3: &str;

    bb0: {
        _3 = const "{foo}";
        _2 = &_3;
        _1 = Option::<&&str>::Some(move _2);
        _0 = &_1;
        return;
    }
}

fn panic_with_single_argument_does_not_get_formatted::{closure#0}(_1: [closure@ui/fmt/format-args-capture.rs:45:40: 45:42]) -> () {
    let mut _0: ();
    let _2: !;

    bb0: {
        _2 = begin_panic::<&str>(const "{foo}") -> unwind continue;
    }
}

fn panic_with_multiple_arguments_is_formatted() -> () {
    let mut _0: ();
    let _1: &str;
    let mut _3: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _4: [closure@ui/fmt/format-args-capture.rs:57:40: 57:42];
    let mut _5: &&str;
    let mut _6: (&std::option::Option<&std::string::String>, &std::option::Option<&std::string::String>);
    let mut _7: &std::option::Option<&std::string::String>;
    let _8: std::option::Option<&std::string::String>;
    let mut _9: &dyn std::any::Any + std::marker::Send;
    let mut _10: &std::option::Option<&std::string::String>;
    let _11: std::option::Option<&std::string::String>;
    let mut _12: &std::string::String;
    let _13: std::string::String;
    let _14: &str;
    let mut _17: bool;
    let mut _18: bool;
    let _20: !;
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: *const dyn std::any::Any + std::marker::Send;
    scope 1 {
        debug foo => const "captured";
        let _2: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
        scope 2 {
            debug msg => _2;
            let _15: &std::option::Option<&std::string::String>;
            let _16: &std::option::Option<&std::string::String>;
            scope 3 {
                debug left_val => _15;
                debug right_val => _16;
                let _19: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _19;
                }
            }
        }
    }

    bb0: {
        _1 = const "captured";
        _5 = &_1;
        _4 = [closure@ui/fmt/format-args-capture.rs:57:40: 57:42] { foo: move _5 };
        _3 = catch_unwind::<[closure@ui/fmt/format-args-capture.rs:57:40: 57:42], ()>(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Result::<(), Box<dyn Any + Send>>::unwrap_err(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _22 = (((_2.0: std::ptr::Unique<dyn std::any::Any + std::marker::Send>).0: std::ptr::NonNull<dyn std::any::Any + std::marker::Send>).0: *const dyn std::any::Any + std::marker::Send);
        _9 = &(*_22);
        _8 = <(dyn Any + Send + 'static)>::downcast_ref::<String>(move _9) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _7 = &_8;
        _14 = const "positional-named-captured";
        _13 = <str as ToString>::to_string(_14) -> [return: bb4, unwind: bb12];
    }

    bb4: {
        _12 = &_13;
        _11 = Option::<&String>::Some(move _12);
        _10 = &_11;
        _6 = (move _7, move _10);
        _15 = (_6.0: &std::option::Option<&std::string::String>);
        _16 = (_6.1: &std::option::Option<&std::string::String>);
        _18 = <Option<&String> as PartialEq>::eq(_15, _16) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _19 = core::panicking::AssertKind::Eq;
        _21 = Option::<Arguments<'_>>::None;
        _20 = core::panicking::assert_failed::<Option<&String>, Option<&String>>(move _19, _15, _16, move _21) -> bb10;
    }

    bb7: {
        drop(_2) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        drop(_13) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        drop(_13) -> [return: bb13, unwind terminate];
    }

    bb12 (cleanup): {
        drop(_2) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }
}

fn panic_with_multiple_arguments_is_formatted::{closure#0}(_1: [closure@ui/fmt/format-args-capture.rs:57:40: 57:42]) -> () {
    debug foo => (*(_1.0: &&str));
    let mut _0: ();
    let _2: !;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let mut _9: &[&str; 1];
    let mut _10: &&str;

    bb0: {
        _9 = const _;
        _4 = _9 as &[&str] (Pointer(Unsize));
        _10 = deref_copy (_1.0: &&str);
        _8 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = panic_fmt(move _3) -> unwind continue;
    }
}

promoted[0] in panic_with_multiple_arguments_is_formatted::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "positional-named-"];
        _0 = &_1;
        return;
    }
}

fn formatting_parameters_can_be_captured() -> () {
    let mut _0: ();
    let _1: usize;
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 2];
    let _10: [core::fmt::rt::Argument<'_>; 2];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &f64;
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &usize;
    let mut _15: &[core::fmt::rt::Placeholder];
    let _16: &[core::fmt::rt::Placeholder; 1];
    let _17: [core::fmt::rt::Placeholder; 1];
    let mut _18: core::fmt::rt::Placeholder;
    let mut _19: core::fmt::rt::Alignment;
    let mut _20: core::fmt::rt::Count;
    let mut _21: core::fmt::rt::Count;
    let mut _22: core::fmt::rt::UnsafeArg;
    let mut _23: (&&std::string::String, &&str);
    let mut _24: &&std::string::String;
    let _25: &std::string::String;
    let mut _28: bool;
    let mut _29: bool;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let mut _37: &[core::fmt::rt::Argument<'_>];
    let _38: &[core::fmt::rt::Argument<'_>; 2];
    let _39: [core::fmt::rt::Argument<'_>; 2];
    let mut _40: core::fmt::rt::Argument<'_>;
    let _41: &f64;
    let mut _42: core::fmt::rt::Argument<'_>;
    let _43: &usize;
    let mut _44: &[core::fmt::rt::Placeholder];
    let _45: &[core::fmt::rt::Placeholder; 1];
    let _46: [core::fmt::rt::Placeholder; 1];
    let mut _47: core::fmt::rt::Placeholder;
    let mut _48: core::fmt::rt::Alignment;
    let mut _49: core::fmt::rt::Count;
    let mut _50: core::fmt::rt::Count;
    let mut _51: core::fmt::rt::UnsafeArg;
    let mut _52: (&&std::string::String, &&str);
    let mut _53: &&std::string::String;
    let _54: &std::string::String;
    let mut _57: bool;
    let mut _58: bool;
    let _60: !;
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _64: std::fmt::Arguments<'_>;
    let mut _65: &[&str];
    let mut _66: &[core::fmt::rt::Argument<'_>];
    let _67: &[core::fmt::rt::Argument<'_>; 2];
    let _68: [core::fmt::rt::Argument<'_>; 2];
    let mut _69: core::fmt::rt::Argument<'_>;
    let _70: &f64;
    let mut _71: core::fmt::rt::Argument<'_>;
    let _72: &usize;
    let mut _73: &[core::fmt::rt::Placeholder];
    let _74: &[core::fmt::rt::Placeholder; 1];
    let _75: [core::fmt::rt::Placeholder; 1];
    let mut _76: core::fmt::rt::Placeholder;
    let mut _77: core::fmt::rt::Alignment;
    let mut _78: core::fmt::rt::Count;
    let mut _79: core::fmt::rt::Count;
    let mut _80: core::fmt::rt::UnsafeArg;
    let mut _81: (&&std::string::String, &&str);
    let mut _82: &&std::string::String;
    let _83: &std::string::String;
    let mut _86: bool;
    let mut _87: bool;
    let _89: !;
    let mut _90: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _93: std::fmt::Arguments<'_>;
    let mut _94: &[&str];
    let mut _95: &[core::fmt::rt::Argument<'_>];
    let _96: &[core::fmt::rt::Argument<'_>; 3];
    let _97: [core::fmt::rt::Argument<'_>; 3];
    let mut _98: core::fmt::rt::Argument<'_>;
    let _99: &f64;
    let mut _100: core::fmt::rt::Argument<'_>;
    let _101: &usize;
    let mut _102: core::fmt::rt::Argument<'_>;
    let _103: &usize;
    let mut _104: &[core::fmt::rt::Placeholder];
    let _105: &[core::fmt::rt::Placeholder; 1];
    let _106: [core::fmt::rt::Placeholder; 1];
    let mut _107: core::fmt::rt::Placeholder;
    let mut _108: core::fmt::rt::Alignment;
    let mut _109: core::fmt::rt::Count;
    let mut _110: core::fmt::rt::Count;
    let mut _111: core::fmt::rt::UnsafeArg;
    let mut _112: (&&std::string::String, &&str);
    let mut _113: &&std::string::String;
    let _114: &std::string::String;
    let mut _117: bool;
    let mut _118: bool;
    let _120: !;
    let mut _121: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug width => const 9_usize;
        let _2: usize;
        scope 2 {
            debug precision => const 3_usize;
            let _3: f64;
            scope 3 {
                debug x => const 7f64;
                let _4: std::string::String;
                let _5: std::string::String;
                let mut _129: &[&str; 1];
                scope 4 {
                    debug s => _4;
                    let _26: &&std::string::String;
                    let _27: &&str;
                    let _33: std::string::String;
                    let _34: std::string::String;
                    let mut _127: &[&str; 1];
                    let mut _128: &&str;
                    scope 7 {
                        debug left_val => _26;
                        debug right_val => _27;
                        let _30: core::panicking::AssertKind;
                        scope 8 {
                            debug kind => _30;
                        }
                    }
                    scope 9 {
                        debug s => _33;
                        let _55: &&std::string::String;
                        let _56: &&str;
                        let _62: std::string::String;
                        let _63: std::string::String;
                        let mut _125: &[&str; 1];
                        let mut _126: &&str;
                        scope 12 {
                            debug left_val => _55;
                            debug right_val => _56;
                            let _59: core::panicking::AssertKind;
                            scope 13 {
                                debug kind => _59;
                            }
                        }
                        scope 14 {
                            debug s => _62;
                            let _84: &&std::string::String;
                            let _85: &&str;
                            let _91: std::string::String;
                            let _92: std::string::String;
                            let mut _123: &[&str; 1];
                            let mut _124: &&str;
                            scope 17 {
                                debug left_val => _84;
                                debug right_val => _85;
                                let _88: core::panicking::AssertKind;
                                scope 18 {
                                    debug kind => _88;
                                }
                            }
                            scope 19 {
                                debug s => _91;
                                let _115: &&std::string::String;
                                let _116: &&str;
                                let mut _122: &&str;
                                scope 22 {
                                    debug left_val => _115;
                                    debug right_val => _116;
                                    let _119: core::panicking::AssertKind;
                                    scope 23 {
                                        debug kind => _119;
                                    }
                                }
                            }
                            scope 20 {
                                debug res => _92;
                            }
                            scope 21 {
                            }
                        }
                        scope 15 {
                            debug res => _63;
                        }
                        scope 16 {
                        }
                    }
                    scope 10 {
                        debug res => _34;
                    }
                    scope 11 {
                    }
                }
                scope 5 {
                    debug res => _5;
                }
                scope 6 {
                }
            }
        }
    }

    bb0: {
        _1 = const 9_usize;
        _2 = const 3_usize;
        _3 = const 7f64;
        _129 = const _;
        _7 = _129 as &[&str] (Pointer(Unsize));
        _12 = &_3;
        _11 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_12) -> [return: bb1, unwind continue];
    }

    bb1: {
        _14 = &_1;
        _13 = core::fmt::rt::Argument::<'_>::from_usize(_14) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = [move _11, move _13];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _19 = core::fmt::rt::Alignment::Unknown;
        _20 = core::fmt::rt::Count::Implied;
        _21 = core::fmt::rt::Count::Param(const 1_usize) -> [return: bb3, unwind continue];
    }

    bb3: {
        _18 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _19, const 0_u32, move _20, move _21) -> [return: bb4, unwind continue];
    }

    bb4: {
        _17 = [move _18];
        _16 = &_17;
        _15 = _16 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _22 = core::fmt::rt::UnsafeArg::new() -> [return: bb5, unwind continue];
    }

    bb5: {
        _6 = Arguments::<'_>::new_v1_formatted(move _7, move _8, move _15, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb6, unwind continue];
    }

    bb6: {
        _5 = format(move _6) -> [return: bb7, unwind continue];
    }

    bb7: {
        _4 = move _5;
        _25 = &_4;
        _24 = &_25;
        _128 = const _;
        _23 = (move _24, _128);
        _26 = (_23.0: &&std::string::String);
        _27 = (_23.1: &&str);
        _29 = <&String as PartialEq<&str>>::eq(_26, _27) -> [return: bb8, unwind: bb50];
    }

    bb8: {
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<&String, &str>(move _30, _26, _27, move _32) -> bb50;
    }

    bb10: {
        _127 = const _;
        _36 = _127 as &[&str] (Pointer(Unsize));
        _41 = &_3;
        _40 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_41) -> [return: bb11, unwind: bb50];
    }

    bb11: {
        _43 = &_1;
        _42 = core::fmt::rt::Argument::<'_>::from_usize(_43) -> [return: bb12, unwind: bb50];
    }

    bb12: {
        _39 = [move _40, move _42];
        _38 = &_39;
        _37 = _38 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _48 = core::fmt::rt::Alignment::Left;
        _49 = core::fmt::rt::Count::Implied;
        _50 = core::fmt::rt::Count::Param(const 1_usize) -> [return: bb13, unwind: bb50];
    }

    bb13: {
        _47 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _48, const 0_u32, move _49, move _50) -> [return: bb14, unwind: bb50];
    }

    bb14: {
        _46 = [move _47];
        _45 = &_46;
        _44 = _45 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _51 = core::fmt::rt::UnsafeArg::new() -> [return: bb15, unwind: bb50];
    }

    bb15: {
        _35 = Arguments::<'_>::new_v1_formatted(move _36, move _37, move _44, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb16, unwind: bb50];
    }

    bb16: {
        _34 = format(move _35) -> [return: bb17, unwind: bb50];
    }

    bb17: {
        _33 = move _34;
        _54 = &_33;
        _53 = &_54;
        _126 = const _;
        _52 = (move _53, _126);
        _55 = (_52.0: &&std::string::String);
        _56 = (_52.1: &&str);
        _58 = <&String as PartialEq<&str>>::eq(_55, _56) -> [return: bb18, unwind: bb49];
    }

    bb18: {
        _57 = Not(move _58);
        switchInt(move _57) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _59 = core::panicking::AssertKind::Eq;
        _61 = Option::<Arguments<'_>>::None;
        _60 = core::panicking::assert_failed::<&String, &str>(move _59, _55, _56, move _61) -> bb49;
    }

    bb20: {
        _125 = const _;
        _65 = _125 as &[&str] (Pointer(Unsize));
        _70 = &_3;
        _69 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_70) -> [return: bb21, unwind: bb49];
    }

    bb21: {
        _72 = &_1;
        _71 = core::fmt::rt::Argument::<'_>::from_usize(_72) -> [return: bb22, unwind: bb49];
    }

    bb22: {
        _68 = [move _69, move _71];
        _67 = &_68;
        _66 = _67 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _77 = core::fmt::rt::Alignment::Center;
        _78 = core::fmt::rt::Count::Implied;
        _79 = core::fmt::rt::Count::Param(const 1_usize) -> [return: bb23, unwind: bb49];
    }

    bb23: {
        _76 = core::fmt::rt::Placeholder::new(const 0_usize, const '-', move _77, const 0_u32, move _78, move _79) -> [return: bb24, unwind: bb49];
    }

    bb24: {
        _75 = [move _76];
        _74 = &_75;
        _73 = _74 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _80 = core::fmt::rt::UnsafeArg::new() -> [return: bb25, unwind: bb49];
    }

    bb25: {
        _64 = Arguments::<'_>::new_v1_formatted(move _65, move _66, move _73, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb26, unwind: bb49];
    }

    bb26: {
        _63 = format(move _64) -> [return: bb27, unwind: bb49];
    }

    bb27: {
        _62 = move _63;
        _83 = &_62;
        _82 = &_83;
        _124 = const _;
        _81 = (move _82, _124);
        _84 = (_81.0: &&std::string::String);
        _85 = (_81.1: &&str);
        _87 = <&String as PartialEq<&str>>::eq(_84, _85) -> [return: bb28, unwind: bb48];
    }

    bb28: {
        _86 = Not(move _87);
        switchInt(move _86) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _88 = core::panicking::AssertKind::Eq;
        _90 = Option::<Arguments<'_>>::None;
        _89 = core::panicking::assert_failed::<&String, &str>(move _88, _84, _85, move _90) -> bb48;
    }

    bb30: {
        _123 = const _;
        _94 = _123 as &[&str] (Pointer(Unsize));
        _99 = &_3;
        _98 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_99) -> [return: bb31, unwind: bb48];
    }

    bb31: {
        _101 = &_2;
        _100 = core::fmt::rt::Argument::<'_>::from_usize(_101) -> [return: bb32, unwind: bb48];
    }

    bb32: {
        _103 = &_1;
        _102 = core::fmt::rt::Argument::<'_>::from_usize(_103) -> [return: bb33, unwind: bb48];
    }

    bb33: {
        _97 = [move _98, move _100, move _102];
        _96 = &_97;
        _95 = _96 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _108 = core::fmt::rt::Alignment::Center;
        _109 = core::fmt::rt::Count::Param(const 1_usize) -> [return: bb34, unwind: bb48];
    }

    bb34: {
        _110 = core::fmt::rt::Count::Param(const 2_usize) -> [return: bb35, unwind: bb48];
    }

    bb35: {
        _107 = core::fmt::rt::Placeholder::new(const 0_usize, const '-', move _108, const 0_u32, move _109, move _110) -> [return: bb36, unwind: bb48];
    }

    bb36: {
        _106 = [move _107];
        _105 = &_106;
        _104 = _105 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _111 = core::fmt::rt::UnsafeArg::new() -> [return: bb37, unwind: bb48];
    }

    bb37: {
        _93 = Arguments::<'_>::new_v1_formatted(move _94, move _95, move _104, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb38, unwind: bb48];
    }

    bb38: {
        _92 = format(move _93) -> [return: bb39, unwind: bb48];
    }

    bb39: {
        _91 = move _92;
        _114 = &_91;
        _113 = &_114;
        _122 = const _;
        _112 = (move _113, _122);
        _115 = (_112.0: &&std::string::String);
        _116 = (_112.1: &&str);
        _118 = <&String as PartialEq<&str>>::eq(_115, _116) -> [return: bb40, unwind: bb47];
    }

    bb40: {
        _117 = Not(move _118);
        switchInt(move _117) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _119 = core::panicking::AssertKind::Eq;
        _121 = Option::<Arguments<'_>>::None;
        _120 = core::panicking::assert_failed::<&String, &str>(move _119, _115, _116, move _121) -> bb47;
    }

    bb42: {
        drop(_91) -> [return: bb43, unwind: bb48];
    }

    bb43: {
        drop(_62) -> [return: bb44, unwind: bb49];
    }

    bb44: {
        drop(_33) -> [return: bb45, unwind: bb50];
    }

    bb45: {
        drop(_4) -> [return: bb46, unwind continue];
    }

    bb46: {
        return;
    }

    bb47 (cleanup): {
        drop(_91) -> [return: bb48, unwind terminate];
    }

    bb48 (cleanup): {
        drop(_62) -> [return: bb49, unwind terminate];
    }

    bb49 (cleanup): {
        drop(_33) -> [return: bb50, unwind terminate];
    }

    bb50 (cleanup): {
        drop(_4) -> [return: bb51, unwind terminate];
    }

    bb51 (cleanup): {
        resume;
    }
}

promoted[0] in formatting_parameters_can_be_captured: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "--7.000--";
        _0 = &_1;
        return;
    }
}

promoted[1] in formatting_parameters_can_be_captured: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[2] in formatting_parameters_can_be_captured: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "----7----";
        _0 = &_1;
        return;
    }
}

promoted[3] in formatting_parameters_can_be_captured: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[4] in formatting_parameters_can_be_captured: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "7        ";
        _0 = &_1;
        return;
    }
}

promoted[5] in formatting_parameters_can_be_captured: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[6] in formatting_parameters_can_be_captured: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "        7";
        _0 = &_1;
        return;
    }
}

promoted[7] in formatting_parameters_can_be_captured: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn repeated_capture() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 2];
    let _9: [core::fmt::rt::Argument<'_>; 2];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &i32;
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &i32;
    let mut _14: &[core::fmt::rt::Placeholder];
    let _15: &[core::fmt::rt::Placeholder; 3];
    let _16: [core::fmt::rt::Placeholder; 3];
    let mut _17: core::fmt::rt::Placeholder;
    let mut _18: core::fmt::rt::Alignment;
    let mut _19: core::fmt::rt::Count;
    let mut _20: core::fmt::rt::Count;
    let mut _21: core::fmt::rt::Placeholder;
    let mut _22: core::fmt::rt::Alignment;
    let mut _23: core::fmt::rt::Count;
    let mut _24: core::fmt::rt::Count;
    let mut _25: core::fmt::rt::Placeholder;
    let mut _26: core::fmt::rt::Alignment;
    let mut _27: core::fmt::rt::Count;
    let mut _28: core::fmt::rt::Count;
    let mut _29: core::fmt::rt::UnsafeArg;
    let mut _30: (&&std::string::String, &&str);
    let mut _31: &&std::string::String;
    let _32: &std::string::String;
    let mut _35: bool;
    let mut _36: bool;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => const 1_i32;
        let _2: i32;
        scope 2 {
            debug b => const 2_i32;
            let _3: std::string::String;
            let _4: std::string::String;
            let mut _41: &[&str; 3];
            scope 3 {
                debug s => _3;
                let _33: &&std::string::String;
                let _34: &&str;
                let mut _40: &&str;
                scope 6 {
                    debug left_val => _33;
                    debug right_val => _34;
                    let _37: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _37;
                    }
                }
            }
            scope 4 {
                debug res => _4;
            }
            scope 5 {
            }
        }
    }

    bb0: {
        _1 = const 1_i32;
        _2 = const 2_i32;
        _41 = const _;
        _6 = _41 as &[&str] (Pointer(Unsize));
        _11 = &_1;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _13 = &_2;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_13) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = [move _10, move _12];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _18 = core::fmt::rt::Alignment::Unknown;
        _19 = core::fmt::rt::Count::Implied;
        _20 = core::fmt::rt::Count::Implied;
        _17 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _18, const 0_u32, move _19, move _20) -> [return: bb3, unwind continue];
    }

    bb3: {
        _22 = core::fmt::rt::Alignment::Unknown;
        _23 = core::fmt::rt::Count::Implied;
        _24 = core::fmt::rt::Count::Implied;
        _21 = core::fmt::rt::Placeholder::new(const 1_usize, const ' ', move _22, const 0_u32, move _23, move _24) -> [return: bb4, unwind continue];
    }

    bb4: {
        _26 = core::fmt::rt::Alignment::Unknown;
        _27 = core::fmt::rt::Count::Implied;
        _28 = core::fmt::rt::Count::Implied;
        _25 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _26, const 0_u32, move _27, move _28) -> [return: bb5, unwind continue];
    }

    bb5: {
        _16 = [move _17, move _21, move _25];
        _15 = &_16;
        _14 = _15 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _29 = core::fmt::rt::UnsafeArg::new() -> [return: bb6, unwind continue];
    }

    bb6: {
        _5 = Arguments::<'_>::new_v1_formatted(move _6, move _7, move _14, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb7, unwind continue];
    }

    bb7: {
        _4 = format(move _5) -> [return: bb8, unwind continue];
    }

    bb8: {
        _3 = move _4;
        _32 = &_3;
        _31 = &_32;
        _40 = const _;
        _30 = (move _31, _40);
        _33 = (_30.0: &&std::string::String);
        _34 = (_30.1: &&str);
        _36 = <&String as PartialEq<&str>>::eq(_33, _34) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<&String, &str>(move _37, _33, _34, move _39) -> bb13;
    }

    bb11: {
        drop(_3) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_3) -> [return: bb14, unwind terminate];
    }

    bb14 (cleanup): {
        resume;
    }
}

promoted[0] in repeated_capture: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "1 2 1";
        _0 = &_1;
        return;
    }
}

promoted[1] in repeated_capture: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " ", const " "];
        _0 = &_1;
        return;
    }
}
