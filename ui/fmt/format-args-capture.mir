// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/fmt/format-args-capture.rs:3:11: 3:11
    let _1: ();                          // in scope 0 at ui/fmt/format-args-capture.rs:4:5: 4:50
    let _2: ();                          // in scope 0 at ui/fmt/format-args-capture.rs:5:5: 5:44
    let _3: ();                          // in scope 0 at ui/fmt/format-args-capture.rs:6:5: 6:37
    let _4: ();                          // in scope 0 at ui/fmt/format-args-capture.rs:7:5: 7:23
    let _5: ();                          // in scope 0 at ui/fmt/format-args-capture.rs:11:9: 11:60
    let _6: ();                          // in scope 0 at ui/fmt/format-args-capture.rs:12:9: 12:53

    bb0: {
        _1 = named_argument_takes_precedence_to_captured() -> bb1; // scope 0 at ui/fmt/format-args-capture.rs:4:5: 4:50
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:4:5: 4:48
                                         // + literal: Const { ty: fn() {named_argument_takes_precedence_to_captured}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = formatting_parameters_can_be_captured() -> bb2; // scope 0 at ui/fmt/format-args-capture.rs:5:5: 5:44
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:5:5: 5:42
                                         // + literal: Const { ty: fn() {formatting_parameters_can_be_captured}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = capture_raw_strings_and_idents() -> bb3; // scope 0 at ui/fmt/format-args-capture.rs:6:5: 6:37
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:6:5: 6:35
                                         // + literal: Const { ty: fn() {capture_raw_strings_and_idents}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = repeated_capture() -> bb4;  // scope 0 at ui/fmt/format-args-capture.rs:7:5: 7:23
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:7:5: 7:21
                                         // + literal: Const { ty: fn() {repeated_capture}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = panic_with_single_argument_does_not_get_formatted() -> bb5; // scope 0 at ui/fmt/format-args-capture.rs:11:9: 11:60
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:11:9: 11:58
                                         // + literal: Const { ty: fn() {panic_with_single_argument_does_not_get_formatted}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = panic_with_multiple_arguments_is_formatted() -> bb6; // scope 0 at ui/fmt/format-args-capture.rs:12:9: 12:53
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:12:9: 12:51
                                         // + literal: Const { ty: fn() {panic_with_multiple_arguments_is_formatted}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/fmt/format-args-capture.rs:14:2: 14:2
    }
}

fn named_argument_takes_precedence_to_captured() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/fmt/format-args-capture.rs:16:50: 16:50
    let _1: &str;                        // in scope 0 at ui/fmt/format-args-capture.rs:17:9: 17:12
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _5: &[&str];                 // in scope 0 at ui/fmt/format-args-capture.rs:18:21: 18:28
    let mut _6: &[&str; 1];              // in scope 0 at ui/fmt/format-args-capture.rs:18:21: 18:28
    let _7: &[&str; 1];                  // in scope 0 at ui/fmt/format-args-capture.rs:18:21: 18:28
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _11: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fmt/format-args-capture.rs:18:36: 18:43
    let mut _13: &&str;                  // in scope 0 at ui/fmt/format-args-capture.rs:18:36: 18:43
    let _14: &&str;                      // in scope 0 at ui/fmt/format-args-capture.rs:18:36: 18:43
    let mut _15: (&&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _16: &&std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _17: &std::string::String;       // in scope 0 at ui/fmt/format-args-capture.rs:19:16: 19:18
    let mut _18: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _21: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _22: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _23: &&std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _24: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _26: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _27: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _28: &&std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _29: &&std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _30: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _31: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _35: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _36: &[&str];                // in scope 0 at ui/fmt/format-args-capture.rs:21:21: 21:40
    let mut _37: &[&str; 3];             // in scope 0 at ui/fmt/format-args-capture.rs:21:21: 21:40
    let _38: &[&str; 3];                 // in scope 0 at ui/fmt/format-args-capture.rs:21:21: 21:40
    let mut _39: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _40: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _41: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _42: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _43: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fmt/format-args-capture.rs:21:48: 21:55
    let mut _44: &&str;                  // in scope 0 at ui/fmt/format-args-capture.rs:21:48: 21:55
    let _45: &&str;                      // in scope 0 at ui/fmt/format-args-capture.rs:21:48: 21:55
    let mut _46: &[std::fmt::rt::v1::Argument]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _47: &[std::fmt::rt::v1::Argument; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _48: &[std::fmt::rt::v1::Argument; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _49: [std::fmt::rt::v1::Argument; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _50: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _51: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _52: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _53: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _54: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _55: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _56: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _57: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _58: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _59: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _60: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _61: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _62: core::fmt::UnsafeArg;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _63: (&&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _64: &&std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _65: &std::string::String;       // in scope 0 at ui/fmt/format-args-capture.rs:22:16: 22:18
    let mut _66: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _69: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _70: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _71: &&std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _72: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _74: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _75: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _76: &&std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _77: &&std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _78: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _79: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _83: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _84: &[&str];                // in scope 0 at ui/fmt/format-args-capture.rs:24:21: 24:37
    let mut _85: &[&str; 3];             // in scope 0 at ui/fmt/format-args-capture.rs:24:21: 24:37
    let _86: &[&str; 3];                 // in scope 0 at ui/fmt/format-args-capture.rs:24:21: 24:37
    let mut _87: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _88: &[core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _89: &[core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _90: [core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _91: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fmt/format-args-capture.rs:24:39: 24:51
    let mut _92: &&str;                  // in scope 0 at ui/fmt/format-args-capture.rs:24:39: 24:51
    let _93: &&str;                      // in scope 0 at ui/fmt/format-args-capture.rs:24:39: 24:51
    let mut _94: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fmt/format-args-capture.rs:24:59: 24:66
    let mut _95: &&str;                  // in scope 0 at ui/fmt/format-args-capture.rs:24:59: 24:66
    let _96: &&str;                      // in scope 0 at ui/fmt/format-args-capture.rs:24:59: 24:66
    let mut _97: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fmt/format-args-capture.rs:24:32: 24:35
    let mut _98: &&str;                  // in scope 0 at ui/fmt/format-args-capture.rs:24:32: 24:35
    let _99: &&str;                      // in scope 0 at ui/fmt/format-args-capture.rs:24:32: 24:35
    let mut _100: (&&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _101: &&std::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _102: &std::string::String;      // in scope 0 at ui/fmt/format-args-capture.rs:25:16: 25:18
    let mut _103: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _106: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _107: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _108: &&std::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _109: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _111: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _112: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _113: &&std::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _114: &&std::string::String;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _115: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _116: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _117: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug foo => _1;                 // in scope 1 at ui/fmt/format-args-capture.rs:17:9: 17:12
        let _2: std::string::String;     // in scope 1 at ui/fmt/format-args-capture.rs:18:9: 18:10
        let _3: std::string::String;     // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
        let mut _126: &&str;             // in scope 1 at ui/fmt/format-args-capture.rs:18:36: 18:43
        let mut _127: &[&str; 1];        // in scope 1 at ui/fmt/format-args-capture.rs:18:21: 18:28
        scope 2 {
            debug s => _2;               // in scope 2 at ui/fmt/format-args-capture.rs:18:9: 18:10
            let _19: &&std::string::String; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _20: &&str;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _33: std::string::String; // in scope 2 at ui/fmt/format-args-capture.rs:21:9: 21:10
            let _34: std::string::String; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
            let mut _123: &&str;         // in scope 2 at ui/fmt/format-args-capture.rs:21:48: 21:55
            let mut _124: &[&str; 3];    // in scope 2 at ui/fmt/format-args-capture.rs:21:21: 21:40
            let mut _125: &&str;         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 4 {
                debug left_val => _19;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _20;  // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _25: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 5 {
                    debug kind => _25;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 6 {
                debug s => _33;          // in scope 6 at ui/fmt/format-args-capture.rs:21:9: 21:10
                let _67: &&std::string::String; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _68: &&str;          // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _81: std::string::String; // in scope 6 at ui/fmt/format-args-capture.rs:24:9: 24:10
                let _82: std::string::String; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                let mut _119: &&str;     // in scope 6 at ui/fmt/format-args-capture.rs:24:59: 24:66
                let mut _120: &&str;     // in scope 6 at ui/fmt/format-args-capture.rs:24:39: 24:51
                let mut _121: &[&str; 3]; // in scope 6 at ui/fmt/format-args-capture.rs:24:21: 24:37
                let mut _122: &&str;     // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 9 {
                    debug left_val => _67; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _68; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _73: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 10 {
                        debug kind => _73; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 11 {
                    debug s => _81;      // in scope 11 at ui/fmt/format-args-capture.rs:24:9: 24:10
                    let _104: &&std::string::String; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _105: &&str;     // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let mut _118: &&str; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 13 {
                        debug left_val => _104; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _105; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _110: core::panicking::AssertKind; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 14 {
                            debug kind => _110; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                }
                scope 12 {
                    debug res => _82;    // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                }
            }
            scope 7 {
                debug res => _34;        // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
            }
            scope 8 {
            }
        }
        scope 3 {
            debug res => _3;             // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
        }
    }

    bb0: {
        _1 = const "captured";           // scope 0 at ui/fmt/format-args-capture.rs:17:15: 17:25
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:17:15: 17:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _127 = const _;                  // scope 1 at ui/fmt/format-args-capture.rs:18:21: 18:28
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:18:21: 18:28
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(named_argument_takes_precedence_to_captured, [], Some(promoted[9])) }
        _7 = _127;                       // scope 1 at ui/fmt/format-args-capture.rs:18:21: 18:28
        _6 = _7;                         // scope 1 at ui/fmt/format-args-capture.rs:18:21: 18:28
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 1 at ui/fmt/format-args-capture.rs:18:21: 18:28
        _126 = const _;                  // scope 1 at ui/fmt/format-args-capture.rs:18:36: 18:43
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:18:36: 18:43
                                         // + literal: Const { ty: &&str, val: Unevaluated(named_argument_takes_precedence_to_captured, [], Some(promoted[8])) }
        _14 = _126;                      // scope 1 at ui/fmt/format-args-capture.rs:18:36: 18:43
        _13 = _14;                       // scope 1 at ui/fmt/format-args-capture.rs:18:36: 18:43
        _12 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _13) -> bb1; // scope 1 at ui/fmt/format-args-capture.rs:18:36: 18:43
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:18:36: 18:43
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = [move _12];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _10 = &_11;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _9 = _10;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = format(move _4) -> bb3;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = move _3;                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _17 = &_2;                       // scope 2 at ui/fmt/format-args-capture.rs:19:16: 19:18
        _16 = &_17;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _125 = const _;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(named_argument_takes_precedence_to_captured, [], Some(promoted[7])) }
        _18 = _125;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _15 = (move _16, move _18);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _19 = (_15.0: &&std::string::String); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _20 = (_15.1: &&str);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _23 = _19;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _24 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _22 = <&String as PartialEq<&str>>::eq(move _23, move _24) -> [return: bb4, unwind: bb30]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &String, &'b &str) -> bool {<&String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = Not(move _22);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _21) -> [0: bb6, otherwise: bb5]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _25 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _27 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _29 = _19;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _29;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _31 = _20;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _30 = _31;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _32 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _26 = core::panicking::assert_failed::<&String, &str>(move _27, move _28, move _30, move _32) -> bb30; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&String, &str>}, val: Value(<ZST>) }
    }

    bb6: {
        _124 = const _;                  // scope 2 at ui/fmt/format-args-capture.rs:21:21: 21:40
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:21:21: 21:40
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(named_argument_takes_precedence_to_captured, [], Some(promoted[6])) }
        _38 = _124;                      // scope 2 at ui/fmt/format-args-capture.rs:21:21: 21:40
        _37 = _38;                       // scope 2 at ui/fmt/format-args-capture.rs:21:21: 21:40
        _36 = move _37 as &[&str] (Pointer(Unsize)); // scope 2 at ui/fmt/format-args-capture.rs:21:21: 21:40
        _123 = const _;                  // scope 2 at ui/fmt/format-args-capture.rs:21:48: 21:55
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:21:48: 21:55
                                         // + literal: Const { ty: &&str, val: Unevaluated(named_argument_takes_precedence_to_captured, [], Some(promoted[5])) }
        _45 = _123;                      // scope 2 at ui/fmt/format-args-capture.rs:21:48: 21:55
        _44 = _45;                       // scope 2 at ui/fmt/format-args-capture.rs:21:48: 21:55
        _43 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _44) -> [return: bb7, unwind: bb30]; // scope 2 at ui/fmt/format-args-capture.rs:21:48: 21:55
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:21:48: 21:55
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb7: {
        _42 = [move _43];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _41 = &_42;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _40 = _41;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _39 = move _40 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _51 = const std::fmt::rt::v1::Alignment::Unknown; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: std::fmt::rt::v1::Alignment, val: Value(Scalar(0x03)) }
        _52 = Implied;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _53 = Implied;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _50 = Argument::new(const 0_usize, const ' ', move _51, const 0_u32, move _52, move _53) -> [return: bb8, unwind: bb30]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: fn(usize, char, std::fmt::rt::v1::Alignment, u32, Count, Count) -> Argument {Argument::new}, val: Value(<ZST>) }
    }

    bb8: {
        _55 = const std::fmt::rt::v1::Alignment::Unknown; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: std::fmt::rt::v1::Alignment, val: Value(Scalar(0x03)) }
        _56 = Implied;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _57 = Implied;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _54 = Argument::new(const 0_usize, const ' ', move _55, const 0_u32, move _56, move _57) -> [return: bb9, unwind: bb30]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: fn(usize, char, std::fmt::rt::v1::Alignment, u32, Count, Count) -> Argument {Argument::new}, val: Value(<ZST>) }
    }

    bb9: {
        _59 = const std::fmt::rt::v1::Alignment::Unknown; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: std::fmt::rt::v1::Alignment, val: Value(Scalar(0x03)) }
        _60 = Implied;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _61 = Implied;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _58 = Argument::new(const 0_usize, const ' ', move _59, const 0_u32, move _60, move _61) -> [return: bb10, unwind: bb30]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: fn(usize, char, std::fmt::rt::v1::Alignment, u32, Count, Count) -> Argument {Argument::new}, val: Value(<ZST>) }
    }

    bb10: {
        _49 = [move _50, move _54, move _58]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _48 = &_49;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _47 = _48;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _46 = move _47 as &[std::fmt::rt::v1::Argument] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _62 = core::fmt::UnsafeArg::new() -> [return: bb11, unwind: bb30]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: unsafe fn() -> core::fmt::UnsafeArg {core::fmt::UnsafeArg::new}, val: Value(<ZST>) }
    }

    bb11: {
        _35 = Arguments::<'_>::new_v1_formatted(move _36, move _39, move _46, move _62) -> [return: bb12, unwind: bb30]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>], &[Argument], core::fmt::UnsafeArg) -> Arguments<'_> {Arguments::<'_>::new_v1_formatted}, val: Value(<ZST>) }
    }

    bb12: {
        _34 = format(move _35) -> [return: bb13, unwind: bb30]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb13: {
        _33 = move _34;                  // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _65 = &_33;                      // scope 6 at ui/fmt/format-args-capture.rs:22:16: 22:18
        _64 = &_65;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _122 = const _;                  // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(named_argument_takes_precedence_to_captured, [], Some(promoted[4])) }
        _66 = _122;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _63 = (move _64, move _66);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _67 = (_63.0: &&std::string::String); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _68 = (_63.1: &&str);            // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _71 = _67;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _72 = _68;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _70 = <&String as PartialEq<&str>>::eq(move _71, move _72) -> [return: bb14, unwind: bb29]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &String, &'b &str) -> bool {<&String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb14: {
        _69 = Not(move _70);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _69) -> [0: bb16, otherwise: bb15]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _73 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _75 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _77 = _67;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _76 = _77;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _79 = _68;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _78 = _79;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _80 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _74 = core::panicking::assert_failed::<&String, &str>(move _75, move _76, move _78, move _80) -> bb29; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&String, &str>}, val: Value(<ZST>) }
    }

    bb16: {
        _121 = const _;                  // scope 6 at ui/fmt/format-args-capture.rs:24:21: 24:37
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:24:21: 24:37
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(named_argument_takes_precedence_to_captured, [], Some(promoted[3])) }
        _86 = _121;                      // scope 6 at ui/fmt/format-args-capture.rs:24:21: 24:37
        _85 = _86;                       // scope 6 at ui/fmt/format-args-capture.rs:24:21: 24:37
        _84 = move _85 as &[&str] (Pointer(Unsize)); // scope 6 at ui/fmt/format-args-capture.rs:24:21: 24:37
        _120 = const _;                  // scope 6 at ui/fmt/format-args-capture.rs:24:39: 24:51
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:24:39: 24:51
                                         // + literal: Const { ty: &&str, val: Unevaluated(named_argument_takes_precedence_to_captured, [], Some(promoted[2])) }
        _93 = _120;                      // scope 6 at ui/fmt/format-args-capture.rs:24:39: 24:51
        _92 = _93;                       // scope 6 at ui/fmt/format-args-capture.rs:24:39: 24:51
        _91 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _92) -> [return: bb17, unwind: bb29]; // scope 6 at ui/fmt/format-args-capture.rs:24:39: 24:51
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:24:39: 24:51
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb17: {
        _119 = const _;                  // scope 6 at ui/fmt/format-args-capture.rs:24:59: 24:66
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:24:59: 24:66
                                         // + literal: Const { ty: &&str, val: Unevaluated(named_argument_takes_precedence_to_captured, [], Some(promoted[1])) }
        _96 = _119;                      // scope 6 at ui/fmt/format-args-capture.rs:24:59: 24:66
        _95 = _96;                       // scope 6 at ui/fmt/format-args-capture.rs:24:59: 24:66
        _94 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _95) -> [return: bb18, unwind: bb29]; // scope 6 at ui/fmt/format-args-capture.rs:24:59: 24:66
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:24:59: 24:66
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb18: {
        _99 = &_1;                       // scope 6 at ui/fmt/format-args-capture.rs:24:32: 24:35
        _98 = _99;                       // scope 6 at ui/fmt/format-args-capture.rs:24:32: 24:35
        _97 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _98) -> [return: bb19, unwind: bb29]; // scope 6 at ui/fmt/format-args-capture.rs:24:32: 24:35
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:24:32: 24:35
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb19: {
        _90 = [move _91, move _94, move _97]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _89 = &_90;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _88 = _89;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _87 = move _88 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _83 = Arguments::<'_>::new_v1(move _84, move _87) -> [return: bb20, unwind: bb29]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb20: {
        _82 = format(move _83) -> [return: bb21, unwind: bb29]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb21: {
        _81 = move _82;                  // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _102 = &_81;                     // scope 11 at ui/fmt/format-args-capture.rs:25:16: 25:18
        _101 = &_102;                    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _118 = const _;                  // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(named_argument_takes_precedence_to_captured, [], Some(promoted[0])) }
        _103 = _118;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _100 = (move _101, move _103);   // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _104 = (_100.0: &&std::string::String); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _105 = (_100.1: &&str);          // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _108 = _104;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _109 = _105;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _107 = <&String as PartialEq<&str>>::eq(move _108, move _109) -> [return: bb22, unwind: bb28]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &String, &'b &str) -> bool {<&String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb22: {
        _106 = Not(move _107);           // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _106) -> [0: bb24, otherwise: bb23]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb23: {
        _110 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _112 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _114 = _104;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _113 = _114;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _116 = _105;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _115 = _116;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _117 = Option::<Arguments<'_>>::None; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _111 = core::panicking::assert_failed::<&String, &str>(move _112, move _113, move _115, move _117) -> bb28; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&String, &str>}, val: Value(<ZST>) }
    }

    bb24: {
        drop(_81) -> [return: bb25, unwind: bb29]; // scope 6 at ui/fmt/format-args-capture.rs:26:1: 26:2
    }

    bb25: {
        drop(_33) -> [return: bb26, unwind: bb30]; // scope 2 at ui/fmt/format-args-capture.rs:26:1: 26:2
    }

    bb26: {
        drop(_2) -> bb27;                // scope 1 at ui/fmt/format-args-capture.rs:26:1: 26:2
    }

    bb27: {
        return;                          // scope 0 at ui/fmt/format-args-capture.rs:26:2: 26:2
    }

    bb28 (cleanup): {
        drop(_81) -> bb29;               // scope 6 at ui/fmt/format-args-capture.rs:26:1: 26:2
    }

    bb29 (cleanup): {
        drop(_33) -> bb30;               // scope 2 at ui/fmt/format-args-capture.rs:26:1: 26:2
    }

    bb30 (cleanup): {
        drop(_2) -> bb31;                // scope 1 at ui/fmt/format-args-capture.rs:26:1: 26:2
    }

    bb31 (cleanup): {
        resume;                          // scope 0 at ui/fmt/format-args-capture.rs:16:1: 26:2
    }
}

promoted[0] in named_argument_takes_precedence_to_captured: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/fmt/format-args-capture.rs:25:20: 25:47

    bb0: {
        _1 = const "positional-named-captured"; // scope 0 at ui/fmt/format-args-capture.rs:25:20: 25:47
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:25:20: 25:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in named_argument_takes_precedence_to_captured: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/fmt/format-args-capture.rs:24:59: 24:66
    let mut _1: &str;                    // in scope 0 at ui/fmt/format-args-capture.rs:24:59: 24:66

    bb0: {
        _1 = const "named";              // scope 0 at ui/fmt/format-args-capture.rs:24:59: 24:66
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:24:59: 24:66
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/fmt/format-args-capture.rs:24:59: 24:66
        return;                          // scope 0 at ui/fmt/format-args-capture.rs:24:59: 24:66
    }
}

promoted[2] in named_argument_takes_precedence_to_captured: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/fmt/format-args-capture.rs:24:39: 24:51
    let mut _1: &str;                    // in scope 0 at ui/fmt/format-args-capture.rs:24:39: 24:51

    bb0: {
        _1 = const "positional";         // scope 0 at ui/fmt/format-args-capture.rs:24:39: 24:51
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:24:39: 24:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/fmt/format-args-capture.rs:24:39: 24:51
        return;                          // scope 0 at ui/fmt/format-args-capture.rs:24:39: 24:51
    }
}

promoted[3] in named_argument_takes_precedence_to_captured: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ui/fmt/format-args-capture.rs:24:21: 24:37
    let mut _1: [&str; 3];               // in scope 0 at ui/fmt/format-args-capture.rs:24:21: 24:37

    bb0: {
        _1 = [const "", const "-", const "-"]; // scope 0 at ui/fmt/format-args-capture.rs:24:21: 24:37
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:24:21: 24:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:24:21: 24:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:24:21: 24:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/fmt/format-args-capture.rs:24:21: 24:37
        return;                          // scope 0 at ui/fmt/format-args-capture.rs:24:21: 24:37
    }
}

promoted[4] in named_argument_takes_precedence_to_captured: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/fmt/format-args-capture.rs:22:20: 22:39

    bb0: {
        _1 = const "named-named-named";  // scope 0 at ui/fmt/format-args-capture.rs:22:20: 22:39
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:22:20: 22:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in named_argument_takes_precedence_to_captured: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/fmt/format-args-capture.rs:21:48: 21:55
    let mut _1: &str;                    // in scope 0 at ui/fmt/format-args-capture.rs:21:48: 21:55

    bb0: {
        _1 = const "named";              // scope 0 at ui/fmt/format-args-capture.rs:21:48: 21:55
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:21:48: 21:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/fmt/format-args-capture.rs:21:48: 21:55
        return;                          // scope 0 at ui/fmt/format-args-capture.rs:21:48: 21:55
    }
}

promoted[6] in named_argument_takes_precedence_to_captured: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ui/fmt/format-args-capture.rs:21:21: 21:40
    let mut _1: [&str; 3];               // in scope 0 at ui/fmt/format-args-capture.rs:21:21: 21:40

    bb0: {
        _1 = [const "", const "-", const "-"]; // scope 0 at ui/fmt/format-args-capture.rs:21:21: 21:40
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:21:21: 21:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:21:21: 21:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:21:21: 21:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/fmt/format-args-capture.rs:21:21: 21:40
        return;                          // scope 0 at ui/fmt/format-args-capture.rs:21:21: 21:40
    }
}

promoted[7] in named_argument_takes_precedence_to_captured: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/fmt/format-args-capture.rs:19:20: 19:27

    bb0: {
        _1 = const "named";              // scope 0 at ui/fmt/format-args-capture.rs:19:20: 19:27
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:19:20: 19:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[8] in named_argument_takes_precedence_to_captured: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/fmt/format-args-capture.rs:18:36: 18:43
    let mut _1: &str;                    // in scope 0 at ui/fmt/format-args-capture.rs:18:36: 18:43

    bb0: {
        _1 = const "named";              // scope 0 at ui/fmt/format-args-capture.rs:18:36: 18:43
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:18:36: 18:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/fmt/format-args-capture.rs:18:36: 18:43
        return;                          // scope 0 at ui/fmt/format-args-capture.rs:18:36: 18:43
    }
}

promoted[9] in named_argument_takes_precedence_to_captured: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/fmt/format-args-capture.rs:18:21: 18:28
    let mut _1: [&str; 1];               // in scope 0 at ui/fmt/format-args-capture.rs:18:21: 18:28

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/fmt/format-args-capture.rs:18:21: 18:28
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:18:21: 18:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/fmt/format-args-capture.rs:18:21: 18:28
        return;                          // scope 0 at ui/fmt/format-args-capture.rs:18:21: 18:28
    }
}

fn capture_raw_strings_and_idents() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/fmt/format-args-capture.rs:28:37: 28:37
    let _1: &str;                        // in scope 0 at ui/fmt/format-args-capture.rs:29:9: 29:15
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _5: &[&str];                 // in scope 0 at ui/fmt/format-args-capture.rs:30:21: 30:48
    let mut _6: &[&str; 1];              // in scope 0 at ui/fmt/format-args-capture.rs:30:21: 30:48
    let _7: &[&str; 1];                  // in scope 0 at ui/fmt/format-args-capture.rs:30:21: 30:48
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _11: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fmt/format-args-capture.rs:30:41: 30:45
    let mut _13: &&str;                  // in scope 0 at ui/fmt/format-args-capture.rs:30:41: 30:45
    let _14: &&str;                      // in scope 0 at ui/fmt/format-args-capture.rs:30:41: 30:45
    let mut _15: (&&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _16: &&std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _17: &std::string::String;       // in scope 0 at ui/fmt/format-args-capture.rs:31:16: 31:18
    let mut _18: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _21: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _22: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _23: &&std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _24: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _26: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _27: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _28: &&std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _29: &&std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _30: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _31: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _36: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _37: &[&str];                // in scope 0 at ui/fmt/format-args-capture.rs:34:21: 34:46
    let mut _38: &[&str; 1];             // in scope 0 at ui/fmt/format-args-capture.rs:34:21: 34:46
    let _39: &[&str; 1];                 // in scope 0 at ui/fmt/format-args-capture.rs:34:21: 34:46
    let mut _40: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _41: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _42: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _43: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _44: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fmt/format-args-capture.rs:34:40: 34:44
    let mut _45: &&str;                  // in scope 0 at ui/fmt/format-args-capture.rs:34:40: 34:44
    let _46: &&str;                      // in scope 0 at ui/fmt/format-args-capture.rs:34:40: 34:44
    let mut _47: (&&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _48: &&std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _49: &std::string::String;       // in scope 0 at ui/fmt/format-args-capture.rs:35:16: 35:18
    let mut _50: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _53: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _54: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _55: &&std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _56: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _58: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _59: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _60: &&std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _61: &&std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _62: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _63: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug type => _1;                // in scope 1 at ui/fmt/format-args-capture.rs:29:9: 29:15
        let _2: std::string::String;     // in scope 1 at ui/fmt/format-args-capture.rs:30:9: 30:10
        let _3: std::string::String;     // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
        let mut _68: &[&str; 1];         // in scope 1 at ui/fmt/format-args-capture.rs:30:21: 30:48
        scope 2 {
            debug s => _2;               // in scope 2 at ui/fmt/format-args-capture.rs:30:9: 30:10
            let _19: &&std::string::String; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _20: &&str;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _33: &str;               // in scope 2 at ui/fmt/format-args-capture.rs:33:9: 33:15
            let mut _67: &&str;          // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 4 {
                debug left_val => _19;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _20;  // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _25: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 5 {
                    debug kind => _25;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 6 {
                debug type => _33;       // in scope 6 at ui/fmt/format-args-capture.rs:33:9: 33:15
                let _34: std::string::String; // in scope 6 at ui/fmt/format-args-capture.rs:34:9: 34:10
                let _35: std::string::String; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                let mut _66: &[&str; 1]; // in scope 6 at ui/fmt/format-args-capture.rs:34:21: 34:46
                scope 7 {
                    debug s => _34;      // in scope 7 at ui/fmt/format-args-capture.rs:34:9: 34:10
                    let _51: &&std::string::String; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _52: &&str;      // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let mut _65: &&str;  // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 9 {
                        debug left_val => _51; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _52; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _57: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 10 {
                            debug kind => _57; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                }
                scope 8 {
                    debug res => _35;    // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                }
            }
        }
        scope 3 {
            debug res => _3;             // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
        }
    }

    bb0: {
        _1 = const "apple";              // scope 0 at ui/fmt/format-args-capture.rs:29:18: 29:25
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:29:18: 29:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _68 = const _;                   // scope 1 at ui/fmt/format-args-capture.rs:30:21: 30:48
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:30:21: 30:48
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(capture_raw_strings_and_idents, [], Some(promoted[3])) }
        _7 = _68;                        // scope 1 at ui/fmt/format-args-capture.rs:30:21: 30:48
        _6 = _7;                         // scope 1 at ui/fmt/format-args-capture.rs:30:21: 30:48
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 1 at ui/fmt/format-args-capture.rs:30:21: 30:48
        _14 = &_1;                       // scope 1 at ui/fmt/format-args-capture.rs:30:41: 30:45
        _13 = _14;                       // scope 1 at ui/fmt/format-args-capture.rs:30:41: 30:45
        _12 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _13) -> bb1; // scope 1 at ui/fmt/format-args-capture.rs:30:41: 30:45
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:30:41: 30:45
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = [move _12];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _10 = &_11;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _9 = _10;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = format(move _4) -> bb3;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = move _3;                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _17 = &_2;                       // scope 2 at ui/fmt/format-args-capture.rs:31:16: 31:18
        _16 = &_17;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _67 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(capture_raw_strings_and_idents, [], Some(promoted[2])) }
        _18 = _67;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _15 = (move _16, move _18);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _19 = (_15.0: &&std::string::String); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _20 = (_15.1: &&str);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _23 = _19;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _24 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _22 = <&String as PartialEq<&str>>::eq(move _23, move _24) -> [return: bb4, unwind: bb16]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &String, &'b &str) -> bool {<&String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = Not(move _22);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _21) -> [0: bb6, otherwise: bb5]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _25 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _27 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _29 = _19;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _29;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _31 = _20;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _30 = _31;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _32 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _26 = core::panicking::assert_failed::<&String, &str>(move _27, move _28, move _30, move _32) -> bb16; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&String, &str>}, val: Value(<ZST>) }
    }

    bb6: {
        _33 = const "orange";            // scope 2 at ui/fmt/format-args-capture.rs:33:18: 33:26
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:33:18: 33:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _66 = const _;                   // scope 6 at ui/fmt/format-args-capture.rs:34:21: 34:46
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:34:21: 34:46
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(capture_raw_strings_and_idents, [], Some(promoted[1])) }
        _39 = _66;                       // scope 6 at ui/fmt/format-args-capture.rs:34:21: 34:46
        _38 = _39;                       // scope 6 at ui/fmt/format-args-capture.rs:34:21: 34:46
        _37 = move _38 as &[&str] (Pointer(Unsize)); // scope 6 at ui/fmt/format-args-capture.rs:34:21: 34:46
        _46 = &_33;                      // scope 6 at ui/fmt/format-args-capture.rs:34:40: 34:44
        _45 = _46;                       // scope 6 at ui/fmt/format-args-capture.rs:34:40: 34:44
        _44 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _45) -> [return: bb7, unwind: bb16]; // scope 6 at ui/fmt/format-args-capture.rs:34:40: 34:44
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:34:40: 34:44
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb7: {
        _43 = [move _44];                // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _42 = &_43;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _41 = _42;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _40 = move _41 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _36 = Arguments::<'_>::new_v1(move _37, move _40) -> [return: bb8, unwind: bb16]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb8: {
        _35 = format(move _36) -> [return: bb9, unwind: bb16]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb9: {
        _34 = move _35;                  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _49 = &_34;                      // scope 7 at ui/fmt/format-args-capture.rs:35:16: 35:18
        _48 = &_49;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _65 = const _;                   // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(capture_raw_strings_and_idents, [], Some(promoted[0])) }
        _50 = _65;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _47 = (move _48, move _50);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _51 = (_47.0: &&std::string::String); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _52 = (_47.1: &&str);            // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _55 = _51;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _56 = _52;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _54 = <&String as PartialEq<&str>>::eq(move _55, move _56) -> [return: bb10, unwind: bb15]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &String, &'b &str) -> bool {<&String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb10: {
        _53 = Not(move _54);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _53) -> [0: bb12, otherwise: bb11]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _57 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _59 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _61 = _51;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _60 = _61;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _63 = _52;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _62 = _63;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _64 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _58 = core::panicking::assert_failed::<&String, &str>(move _59, move _60, move _62, move _64) -> bb15; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&String, &str>}, val: Value(<ZST>) }
    }

    bb12: {
        drop(_34) -> [return: bb13, unwind: bb16]; // scope 6 at ui/fmt/format-args-capture.rs:36:1: 36:2
    }

    bb13: {
        drop(_2) -> bb14;                // scope 1 at ui/fmt/format-args-capture.rs:36:1: 36:2
    }

    bb14: {
        return;                          // scope 0 at ui/fmt/format-args-capture.rs:36:2: 36:2
    }

    bb15 (cleanup): {
        drop(_34) -> bb16;               // scope 6 at ui/fmt/format-args-capture.rs:36:1: 36:2
    }

    bb16 (cleanup): {
        drop(_2) -> bb17;                // scope 1 at ui/fmt/format-args-capture.rs:36:1: 36:2
    }

    bb17 (cleanup): {
        resume;                          // scope 0 at ui/fmt/format-args-capture.rs:28:1: 36:2
    }
}

promoted[0] in capture_raw_strings_and_idents: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/fmt/format-args-capture.rs:35:20: 35:44

    bb0: {
        _1 = const "The fruit is an orange"; // scope 0 at ui/fmt/format-args-capture.rs:35:20: 35:44
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:35:20: 35:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in capture_raw_strings_and_idents: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/fmt/format-args-capture.rs:34:21: 34:46
    let mut _1: [&str; 1];               // in scope 0 at ui/fmt/format-args-capture.rs:34:21: 34:46

    bb0: {
        _1 = [const "The fruit is an "]; // scope 0 at ui/fmt/format-args-capture.rs:34:21: 34:46
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:34:21: 34:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/fmt/format-args-capture.rs:34:21: 34:46
        return;                          // scope 0 at ui/fmt/format-args-capture.rs:34:21: 34:46
    }
}

promoted[2] in capture_raw_strings_and_idents: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/fmt/format-args-capture.rs:31:20: 31:43

    bb0: {
        _1 = const "The fruit is an apple"; // scope 0 at ui/fmt/format-args-capture.rs:31:20: 31:43
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:31:20: 31:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in capture_raw_strings_and_idents: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/fmt/format-args-capture.rs:30:21: 30:48
    let mut _1: [&str; 1];               // in scope 0 at ui/fmt/format-args-capture.rs:30:21: 30:48

    bb0: {
        _1 = [const "The fruit is an "]; // scope 0 at ui/fmt/format-args-capture.rs:30:21: 30:48
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:30:21: 30:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/fmt/format-args-capture.rs:30:21: 30:48
        return;                          // scope 0 at ui/fmt/format-args-capture.rs:30:21: 30:48
    }
}

fn panic_with_single_argument_does_not_get_formatted() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/fmt/format-args-capture.rs:39:56: 39:56
    let mut _2: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/fmt/format-args-capture.rs:45:15: 47:7
    let mut _3: [closure@ui/fmt/format-args-capture.rs:45:40: 45:42]; // in scope 0 at ui/fmt/format-args-capture.rs:45:40: 47:6
    let mut _4: (&std::option::Option<&&str>, &std::option::Option<&&str>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &std::option::Option<&&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _6: std::option::Option<&&str>;  // in scope 0 at ui/fmt/format-args-capture.rs:50:16: 50:42
    let mut _7: &dyn std::any::Any + std::marker::Send; // in scope 0 at ui/fmt/format-args-capture.rs:50:16: 50:42
    let mut _8: &std::option::Option<&&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: &std::option::Option<&&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: &std::option::Option<&&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &std::option::Option<&&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &std::option::Option<&&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &std::option::Option<&&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &std::option::Option<&&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _24: *const dyn std::any::Any + std::marker::Send; // in scope 0 at ui/fmt/format-args-capture.rs:45:9: 45:12
    scope 1 {
        debug msg => _1;                 // in scope 1 at ui/fmt/format-args-capture.rs:45:9: 45:12
        let _9: &std::option::Option<&&str>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _10: &std::option::Option<&&str>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _23: &std::option::Option<&&str>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 3 {
            debug left_val => _9;        // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _10;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _15: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 4 {
                debug kind => _15;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 2 {
        let _1: std::boxed::Box<dyn std::any::Any + std::marker::Send>; // in scope 2 at ui/fmt/format-args-capture.rs:45:9: 45:12
    }

    bb0: {
        _2 = catch_unwind::<[closure@ui/fmt/format-args-capture.rs:45:40: 45:42], ()>(move _3) -> bb1; // scope 2 at ui/fmt/format-args-capture.rs:45:15: 47:7
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:45:15: 45:39
                                         // + literal: Const { ty: fn([closure@ui/fmt/format-args-capture.rs:45:40: 45:42]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/fmt/format-args-capture.rs:45:40: 45:42], ()>}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Result::<(), Box<dyn Any + Send>>::unwrap_err(move _2) -> bb2; // scope 2 at ui/fmt/format-args-capture.rs:45:15: 48:18
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:48:6: 48:16
                                         // + literal: Const { ty: fn(Result<(), Box<dyn Any + Send>>) -> Box<dyn Any + Send> {Result::<(), Box<dyn Any + Send>>::unwrap_err}, val: Value(<ZST>) }
    }

    bb2: {
        _24 = (((_1.0: std::ptr::Unique<dyn std::any::Any + std::marker::Send>).0: std::ptr::NonNull<dyn std::any::Any + std::marker::Send>).0: *const dyn std::any::Any + std::marker::Send); // scope 1 at ui/fmt/format-args-capture.rs:50:16: 50:42
        _7 = &(*_24);                    // scope 1 at ui/fmt/format-args-capture.rs:50:16: 50:42
        _6 = <(dyn Any + Send + 'static)>::downcast_ref::<&str>(move _7) -> [return: bb3, unwind: bb8]; // scope 1 at ui/fmt/format-args-capture.rs:50:16: 50:42
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:50:20: 50:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a (dyn Any + Send + 'static)) -> Option<&'a &str> {<(dyn Any + Send + 'static)>::downcast_ref::<&str>}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = &_6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _23 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<&&str>, val: Unevaluated(panic_with_single_argument_does_not_get_formatted, [], Some(promoted[0])) }
        _8 = _23;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _8);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_4.0: &std::option::Option<&&str>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_4.1: &std::option::Option<&&str>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = _10;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = <Option<&&str> as PartialEq>::eq(move _13, move _14) -> [return: bb4, unwind: bb8]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&&str>, &'b Option<&&str>) -> bool {<Option<&&str> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = Not(move _12);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb6, otherwise: bb5]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _15 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<Option<&&str>, Option<&&str>>(move _17, move _18, move _20, move _22) -> bb8; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&&str>, &'b Option<&&str>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&&str>, Option<&&str>>}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_1) -> bb7;                 // scope 0 at ui/fmt/format-args-capture.rs:51:1: 51:2
    }

    bb7: {
        return;                          // scope 0 at ui/fmt/format-args-capture.rs:51:2: 51:2
    }

    bb8 (cleanup): {
        drop(_1) -> bb9;                 // scope 0 at ui/fmt/format-args-capture.rs:51:1: 51:2
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/fmt/format-args-capture.rs:39:1: 51:2
    }
}

promoted[0] in panic_with_single_argument_does_not_get_formatted: &Option<&&str> = {
    let mut _0: &std::option::Option<&&str>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<&&str>; // in scope 0 at ui/fmt/format-args-capture.rs:50:44: 50:58
    let mut _2: &&str;                   // in scope 0 at ui/fmt/format-args-capture.rs:50:49: 50:57
    let mut _3: &str;                    // in scope 0 at ui/fmt/format-args-capture.rs:50:50: 50:57

    bb0: {
        _3 = const "{foo}";              // scope 0 at ui/fmt/format-args-capture.rs:50:50: 50:57
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:50:50: 50:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &_3;                        // scope 0 at ui/fmt/format-args-capture.rs:50:49: 50:57
        _1 = Option::<&&str>::Some(move _2); // scope 0 at ui/fmt/format-args-capture.rs:50:44: 50:58
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn panic_with_single_argument_does_not_get_formatted::{closure#0}(_1: [closure@ui/fmt/format-args-capture.rs:45:40: 45:42]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/fmt/format-args-capture.rs:45:43: 45:43
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38

    bb0: {
        _2 = begin_panic::<&str>(const "{foo}"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:46:16: 46:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn panic_with_multiple_arguments_is_formatted() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/fmt/format-args-capture.rs:54:49: 54:49
    let _1: &str;                        // in scope 0 at ui/fmt/format-args-capture.rs:55:9: 55:12
    let mut _3: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/fmt/format-args-capture.rs:57:15: 59:7
    let mut _4: [closure@ui/fmt/format-args-capture.rs:57:40: 57:42]; // in scope 0 at ui/fmt/format-args-capture.rs:57:40: 59:6
    let mut _5: &&str;                   // in scope 0 at ui/fmt/format-args-capture.rs:57:40: 59:6
    let mut _6: (&std::option::Option<&std::string::String>, &std::option::Option<&std::string::String>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _7: &std::option::Option<&std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _8: std::option::Option<&std::string::String>; // in scope 0 at ui/fmt/format-args-capture.rs:62:16: 62:44
    let mut _9: &dyn std::any::Any + std::marker::Send; // in scope 0 at ui/fmt/format-args-capture.rs:62:16: 62:44
    let mut _10: &std::option::Option<&std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _11: std::option::Option<&std::string::String>; // in scope 0 at ui/fmt/format-args-capture.rs:62:46: 62:92
    let mut _12: &std::string::String;   // in scope 0 at ui/fmt/format-args-capture.rs:62:51: 62:91
    let _13: std::string::String;        // in scope 0 at ui/fmt/format-args-capture.rs:62:52: 62:91
    let mut _14: &str;                   // in scope 0 at ui/fmt/format-args-capture.rs:62:52: 62:91
    let _15: &str;                       // in scope 0 at ui/fmt/format-args-capture.rs:62:52: 62:79
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _19: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _20: &std::option::Option<&std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _21: &std::option::Option<&std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _23: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _24: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _25: &std::option::Option<&std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _26: &std::option::Option<&std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _27: &std::option::Option<&std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _28: &std::option::Option<&std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _30: *const dyn std::any::Any + std::marker::Send; // in scope 0 at ui/fmt/format-args-capture.rs:57:9: 57:12
    scope 1 {
        debug foo => _1;                 // in scope 1 at ui/fmt/format-args-capture.rs:55:9: 55:12
        let _2: std::boxed::Box<dyn std::any::Any + std::marker::Send>; // in scope 1 at ui/fmt/format-args-capture.rs:57:9: 57:12
        scope 2 {
            debug msg => _2;             // in scope 2 at ui/fmt/format-args-capture.rs:57:9: 57:12
            let _16: &std::option::Option<&std::string::String>; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _17: &std::option::Option<&std::string::String>; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 3 {
                debug left_val => _16;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _17;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _22: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _22;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = const "captured";           // scope 0 at ui/fmt/format-args-capture.rs:55:15: 55:25
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:55:15: 55:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = &_1;                        // scope 1 at ui/fmt/format-args-capture.rs:57:40: 59:6
        _4 = [closure@ui/fmt/format-args-capture.rs:57:40: 57:42] { foo: move _5 }; // scope 1 at ui/fmt/format-args-capture.rs:57:40: 59:6
                                         // closure
                                         // + def_id: DefId(0:9 ~ format_args_capture[4bd8]::panic_with_multiple_arguments_is_formatted::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (&&str,),
                                         // ]
        _3 = catch_unwind::<[closure@ui/fmt/format-args-capture.rs:57:40: 57:42], ()>(move _4) -> bb1; // scope 1 at ui/fmt/format-args-capture.rs:57:15: 59:7
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:57:15: 57:39
                                         // + literal: Const { ty: fn([closure@ui/fmt/format-args-capture.rs:57:40: 57:42]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/fmt/format-args-capture.rs:57:40: 57:42], ()>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Result::<(), Box<dyn Any + Send>>::unwrap_err(move _3) -> bb2; // scope 1 at ui/fmt/format-args-capture.rs:57:15: 60:18
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:60:6: 60:16
                                         // + literal: Const { ty: fn(Result<(), Box<dyn Any + Send>>) -> Box<dyn Any + Send> {Result::<(), Box<dyn Any + Send>>::unwrap_err}, val: Value(<ZST>) }
    }

    bb2: {
        _30 = (((_2.0: std::ptr::Unique<dyn std::any::Any + std::marker::Send>).0: std::ptr::NonNull<dyn std::any::Any + std::marker::Send>).0: *const dyn std::any::Any + std::marker::Send); // scope 2 at ui/fmt/format-args-capture.rs:62:16: 62:44
        _9 = &(*_30);                    // scope 2 at ui/fmt/format-args-capture.rs:62:16: 62:44
        _8 = <(dyn Any + Send + 'static)>::downcast_ref::<String>(move _9) -> [return: bb3, unwind: bb12]; // scope 2 at ui/fmt/format-args-capture.rs:62:16: 62:44
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:62:20: 62:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a (dyn Any + Send + 'static)) -> Option<&'a String> {<(dyn Any + Send + 'static)>::downcast_ref::<String>}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = &_8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _15 = const "positional-named-captured"; // scope 2 at ui/fmt/format-args-capture.rs:62:52: 62:79
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:62:52: 62:79
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _14 = _15;                       // scope 2 at ui/fmt/format-args-capture.rs:62:52: 62:91
        _13 = <str as ToString>::to_string(move _14) -> [return: bb4, unwind: bb12]; // scope 2 at ui/fmt/format-args-capture.rs:62:52: 62:91
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:62:80: 62:89
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = &_13;                      // scope 2 at ui/fmt/format-args-capture.rs:62:51: 62:91
        _11 = Option::<&String>::Some(move _12); // scope 2 at ui/fmt/format-args-capture.rs:62:46: 62:92
        _10 = &_11;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _6 = (move _7, move _10);        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _16 = (_6.0: &std::option::Option<&std::string::String>); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _17 = (_6.1: &std::option::Option<&std::string::String>); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _20 = _16;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _21 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _19 = <Option<&String> as PartialEq>::eq(move _20, move _21) -> [return: bb5, unwind: bb10]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&String>, &'b Option<&String>) -> bool {<Option<&String> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _18 = Not(move _19);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _18) -> [0: bb7, otherwise: bb6]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _22 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = _16;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _17;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _23 = core::panicking::assert_failed::<Option<&String>, Option<&String>>(move _24, move _25, move _27, move _29) -> bb10; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&String>, &'b Option<&String>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&String>, Option<&String>>}, val: Value(<ZST>) }
    }

    bb7: {
        drop(_2) -> [return: bb8, unwind: bb11]; // scope 1 at ui/fmt/format-args-capture.rs:63:1: 63:2
    }

    bb8: {
        drop(_13) -> bb9;                // scope 0 at ui/fmt/format-args-capture.rs:63:1: 63:2
    }

    bb9: {
        return;                          // scope 0 at ui/fmt/format-args-capture.rs:63:2: 63:2
    }

    bb10 (cleanup): {
        drop(_2) -> bb11;                // scope 1 at ui/fmt/format-args-capture.rs:63:1: 63:2
    }

    bb11 (cleanup): {
        drop(_13) -> bb13;               // scope 0 at ui/fmt/format-args-capture.rs:63:1: 63:2
    }

    bb12 (cleanup): {
        drop(_2) -> bb13;                // scope 1 at ui/fmt/format-args-capture.rs:63:1: 63:2
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/fmt/format-args-capture.rs:54:1: 63:2
    }
}

fn panic_with_multiple_arguments_is_formatted::{closure#0}(_1: [closure@ui/fmt/format-args-capture.rs:57:40: 57:42]) -> () {
    debug foo => (*(_1.0: &&str));       // in scope 0 at ui/fmt/format-args-capture.rs:55:9: 55:12
    let mut _0: ();                      // return place in scope 0 at ui/fmt/format-args-capture.rs:57:43: 57:43
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _4: &[&str];                 // in scope 0 at ui/fmt/format-args-capture.rs:58:16: 58:32
    let mut _5: &[&str; 3];              // in scope 0 at ui/fmt/format-args-capture.rs:58:16: 58:32
    let _6: &[&str; 3];                  // in scope 0 at ui/fmt/format-args-capture.rs:58:16: 58:32
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _8: &[core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _9: &[core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _10: [core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fmt/format-args-capture.rs:58:34: 58:46
    let mut _12: &&str;                  // in scope 0 at ui/fmt/format-args-capture.rs:58:34: 58:46
    let _13: &&str;                      // in scope 0 at ui/fmt/format-args-capture.rs:58:34: 58:46
    let mut _14: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fmt/format-args-capture.rs:58:54: 58:61
    let mut _15: &&str;                  // in scope 0 at ui/fmt/format-args-capture.rs:58:54: 58:61
    let _16: &&str;                      // in scope 0 at ui/fmt/format-args-capture.rs:58:54: 58:61
    let mut _17: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fmt/format-args-capture.rs:58:27: 58:30
    let mut _18: &&str;                  // in scope 0 at ui/fmt/format-args-capture.rs:58:27: 58:30
    let _19: &&str;                      // in scope 0 at ui/fmt/format-args-capture.rs:58:27: 58:30
    let mut _20: &&str;                  // in scope 0 at ui/fmt/format-args-capture.rs:58:54: 58:61
    let mut _21: &&str;                  // in scope 0 at ui/fmt/format-args-capture.rs:58:34: 58:46
    let mut _22: &[&str; 3];             // in scope 0 at ui/fmt/format-args-capture.rs:58:16: 58:32
    let mut _23: &&str;                  // in scope 0 at ui/fmt/format-args-capture.rs:57:40: 59:6

    bb0: {
        _22 = const _;                   // scope 0 at ui/fmt/format-args-capture.rs:58:16: 58:32
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:58:16: 58:32
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(panic_with_multiple_arguments_is_formatted::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[2])) }
        _6 = _22;                        // scope 0 at ui/fmt/format-args-capture.rs:58:16: 58:32
        _5 = _6;                         // scope 0 at ui/fmt/format-args-capture.rs:58:16: 58:32
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/fmt/format-args-capture.rs:58:16: 58:32
        _21 = const _;                   // scope 0 at ui/fmt/format-args-capture.rs:58:34: 58:46
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:58:34: 58:46
                                         // + literal: Const { ty: &&str, val: Unevaluated(panic_with_multiple_arguments_is_formatted::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[1])) }
        _13 = _21;                       // scope 0 at ui/fmt/format-args-capture.rs:58:34: 58:46
        _12 = _13;                       // scope 0 at ui/fmt/format-args-capture.rs:58:34: 58:46
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _12) -> bb1; // scope 0 at ui/fmt/format-args-capture.rs:58:34: 58:46
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:58:34: 58:46
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb1: {
        _20 = const _;                   // scope 0 at ui/fmt/format-args-capture.rs:58:54: 58:61
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:58:54: 58:61
                                         // + literal: Const { ty: &&str, val: Unevaluated(panic_with_multiple_arguments_is_formatted::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _16 = _20;                       // scope 0 at ui/fmt/format-args-capture.rs:58:54: 58:61
        _15 = _16;                       // scope 0 at ui/fmt/format-args-capture.rs:58:54: 58:61
        _14 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _15) -> bb2; // scope 0 at ui/fmt/format-args-capture.rs:58:54: 58:61
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:58:54: 58:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb2: {
        _23 = deref_copy (_1.0: &&str);  // scope 0 at ui/fmt/format-args-capture.rs:58:27: 58:30
        _19 = _23;                       // scope 0 at ui/fmt/format-args-capture.rs:58:27: 58:30
        _18 = _19;                       // scope 0 at ui/fmt/format-args-capture.rs:58:27: 58:30
        _17 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _18) -> bb3; // scope 0 at ui/fmt/format-args-capture.rs:58:27: 58:30
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:58:27: 58:30
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = [move _11, move _14, move _17]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb4; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _2 = panic_fmt(move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }
}

promoted[0] in panic_with_multiple_arguments_is_formatted::{closure#0}: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/fmt/format-args-capture.rs:58:54: 58:61
    let mut _1: &str;                    // in scope 0 at ui/fmt/format-args-capture.rs:58:54: 58:61

    bb0: {
        _1 = const "named";              // scope 0 at ui/fmt/format-args-capture.rs:58:54: 58:61
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:58:54: 58:61
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/fmt/format-args-capture.rs:58:54: 58:61
        return;                          // scope 0 at ui/fmt/format-args-capture.rs:58:54: 58:61
    }
}

promoted[1] in panic_with_multiple_arguments_is_formatted::{closure#0}: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/fmt/format-args-capture.rs:58:34: 58:46
    let mut _1: &str;                    // in scope 0 at ui/fmt/format-args-capture.rs:58:34: 58:46

    bb0: {
        _1 = const "positional";         // scope 0 at ui/fmt/format-args-capture.rs:58:34: 58:46
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:58:34: 58:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/fmt/format-args-capture.rs:58:34: 58:46
        return;                          // scope 0 at ui/fmt/format-args-capture.rs:58:34: 58:46
    }
}

promoted[2] in panic_with_multiple_arguments_is_formatted::{closure#0}: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ui/fmt/format-args-capture.rs:58:16: 58:32
    let mut _1: [&str; 3];               // in scope 0 at ui/fmt/format-args-capture.rs:58:16: 58:32

    bb0: {
        _1 = [const "", const "-", const "-"]; // scope 0 at ui/fmt/format-args-capture.rs:58:16: 58:32
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:58:16: 58:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:58:16: 58:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:58:16: 58:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/fmt/format-args-capture.rs:58:16: 58:32
        return;                          // scope 0 at ui/fmt/format-args-capture.rs:58:16: 58:32
    }
}

fn formatting_parameters_can_be_captured() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/fmt/format-args-capture.rs:65:44: 65:44
    let _1: usize;                       // in scope 0 at ui/fmt/format-args-capture.rs:66:9: 66:14
    let mut _6: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _7: &[&str];                 // in scope 0 at ui/fmt/format-args-capture.rs:71:21: 71:33
    let mut _8: &[&str; 1];              // in scope 0 at ui/fmt/format-args-capture.rs:71:21: 71:33
    let _9: &[&str; 1];                  // in scope 0 at ui/fmt/format-args-capture.rs:71:21: 71:33
    let mut _10: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _11: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _12: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _13: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _14: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fmt/format-args-capture.rs:71:23: 71:24
    let mut _15: &f64;                   // in scope 0 at ui/fmt/format-args-capture.rs:71:23: 71:24
    let _16: &f64;                       // in scope 0 at ui/fmt/format-args-capture.rs:71:23: 71:24
    let mut _17: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fmt/format-args-capture.rs:71:25: 71:30
    let mut _18: &usize;                 // in scope 0 at ui/fmt/format-args-capture.rs:71:25: 71:30
    let _19: &usize;                     // in scope 0 at ui/fmt/format-args-capture.rs:71:25: 71:30
    let mut _20: &[std::fmt::rt::v1::Argument]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _21: &[std::fmt::rt::v1::Argument; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _22: &[std::fmt::rt::v1::Argument; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _23: [std::fmt::rt::v1::Argument; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _24: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _25: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _26: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _27: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _28: core::fmt::UnsafeArg;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _29: (&&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _30: &&std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _31: &std::string::String;       // in scope 0 at ui/fmt/format-args-capture.rs:72:16: 72:18
    let mut _32: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _35: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _36: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _37: &&std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _38: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _40: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _41: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _42: &&std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _43: &&std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _44: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _45: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _49: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _50: &[&str];                // in scope 0 at ui/fmt/format-args-capture.rs:74:21: 74:34
    let mut _51: &[&str; 1];             // in scope 0 at ui/fmt/format-args-capture.rs:74:21: 74:34
    let _52: &[&str; 1];                 // in scope 0 at ui/fmt/format-args-capture.rs:74:21: 74:34
    let mut _53: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _54: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _55: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _56: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _57: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fmt/format-args-capture.rs:74:23: 74:24
    let mut _58: &f64;                   // in scope 0 at ui/fmt/format-args-capture.rs:74:23: 74:24
    let _59: &f64;                       // in scope 0 at ui/fmt/format-args-capture.rs:74:23: 74:24
    let mut _60: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fmt/format-args-capture.rs:74:26: 74:31
    let mut _61: &usize;                 // in scope 0 at ui/fmt/format-args-capture.rs:74:26: 74:31
    let _62: &usize;                     // in scope 0 at ui/fmt/format-args-capture.rs:74:26: 74:31
    let mut _63: &[std::fmt::rt::v1::Argument]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _64: &[std::fmt::rt::v1::Argument; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _65: &[std::fmt::rt::v1::Argument; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _66: [std::fmt::rt::v1::Argument; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _67: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _68: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _69: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _70: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _71: core::fmt::UnsafeArg;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _72: (&&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _73: &&std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _74: &std::string::String;       // in scope 0 at ui/fmt/format-args-capture.rs:75:16: 75:18
    let mut _75: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _78: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _79: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _80: &&std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _81: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _83: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _84: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _85: &&std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _86: &&std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _87: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _88: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _89: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _92: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _93: &[&str];                // in scope 0 at ui/fmt/format-args-capture.rs:77:21: 77:35
    let mut _94: &[&str; 1];             // in scope 0 at ui/fmt/format-args-capture.rs:77:21: 77:35
    let _95: &[&str; 1];                 // in scope 0 at ui/fmt/format-args-capture.rs:77:21: 77:35
    let mut _96: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _97: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _98: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _99: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _100: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fmt/format-args-capture.rs:77:23: 77:24
    let mut _101: &f64;                  // in scope 0 at ui/fmt/format-args-capture.rs:77:23: 77:24
    let _102: &f64;                      // in scope 0 at ui/fmt/format-args-capture.rs:77:23: 77:24
    let mut _103: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fmt/format-args-capture.rs:77:27: 77:32
    let mut _104: &usize;                // in scope 0 at ui/fmt/format-args-capture.rs:77:27: 77:32
    let _105: &usize;                    // in scope 0 at ui/fmt/format-args-capture.rs:77:27: 77:32
    let mut _106: &[std::fmt::rt::v1::Argument]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _107: &[std::fmt::rt::v1::Argument; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _108: &[std::fmt::rt::v1::Argument; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _109: [std::fmt::rt::v1::Argument; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _110: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _111: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _112: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _113: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _114: core::fmt::UnsafeArg;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _115: (&&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _116: &&std::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _117: &std::string::String;      // in scope 0 at ui/fmt/format-args-capture.rs:78:16: 78:18
    let mut _118: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _121: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _122: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _123: &&std::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _124: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _126: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _127: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _128: &&std::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _129: &&std::string::String;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _130: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _131: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _132: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _135: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _136: &[&str];               // in scope 0 at ui/fmt/format-args-capture.rs:80:21: 80:46
    let mut _137: &[&str; 1];            // in scope 0 at ui/fmt/format-args-capture.rs:80:21: 80:46
    let _138: &[&str; 1];                // in scope 0 at ui/fmt/format-args-capture.rs:80:21: 80:46
    let mut _139: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _140: &[core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _141: &[core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _142: [core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _143: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fmt/format-args-capture.rs:80:23: 80:24
    let mut _144: &f64;                  // in scope 0 at ui/fmt/format-args-capture.rs:80:23: 80:24
    let _145: &f64;                      // in scope 0 at ui/fmt/format-args-capture.rs:80:23: 80:24
    let mut _146: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fmt/format-args-capture.rs:80:34: 80:43
    let mut _147: &usize;                // in scope 0 at ui/fmt/format-args-capture.rs:80:34: 80:43
    let _148: &usize;                    // in scope 0 at ui/fmt/format-args-capture.rs:80:34: 80:43
    let mut _149: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fmt/format-args-capture.rs:80:27: 80:32
    let mut _150: &usize;                // in scope 0 at ui/fmt/format-args-capture.rs:80:27: 80:32
    let _151: &usize;                    // in scope 0 at ui/fmt/format-args-capture.rs:80:27: 80:32
    let mut _152: &[std::fmt::rt::v1::Argument]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _153: &[std::fmt::rt::v1::Argument; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _154: &[std::fmt::rt::v1::Argument; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _155: [std::fmt::rt::v1::Argument; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _156: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _157: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _158: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _159: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _160: core::fmt::UnsafeArg;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _161: (&&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _162: &&std::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _163: &std::string::String;      // in scope 0 at ui/fmt/format-args-capture.rs:81:16: 81:18
    let mut _164: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _167: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _168: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _169: &&std::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _170: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _172: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _173: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _174: &&std::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _175: &&std::string::String;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _176: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _177: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _178: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug width => _1;               // in scope 1 at ui/fmt/format-args-capture.rs:66:9: 66:14
        let _2: usize;                   // in scope 1 at ui/fmt/format-args-capture.rs:67:9: 67:18
        scope 2 {
            debug precision => _2;       // in scope 2 at ui/fmt/format-args-capture.rs:67:9: 67:18
            let _3: f64;                 // in scope 2 at ui/fmt/format-args-capture.rs:69:9: 69:10
            scope 3 {
                debug x => _3;           // in scope 3 at ui/fmt/format-args-capture.rs:69:9: 69:10
                let _4: std::string::String; // in scope 3 at ui/fmt/format-args-capture.rs:71:9: 71:10
                let _5: std::string::String; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                let mut _186: &[&str; 1]; // in scope 3 at ui/fmt/format-args-capture.rs:71:21: 71:33
                scope 4 {
                    debug s => _4;       // in scope 4 at ui/fmt/format-args-capture.rs:71:9: 71:10
                    let _33: &&std::string::String; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _34: &&str;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _47: std::string::String; // in scope 4 at ui/fmt/format-args-capture.rs:74:9: 74:10
                    let _48: std::string::String; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                    let mut _184: &[&str; 1]; // in scope 4 at ui/fmt/format-args-capture.rs:74:21: 74:34
                    let mut _185: &&str; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 7 {
                        debug left_val => _33; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _34; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _39: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 8 {
                            debug kind => _39; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 9 {
                        debug s => _47;  // in scope 9 at ui/fmt/format-args-capture.rs:74:9: 74:10
                        let _76: &&std::string::String; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _77: &&str;  // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _90: std::string::String; // in scope 9 at ui/fmt/format-args-capture.rs:77:9: 77:10
                        let _91: std::string::String; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                        let mut _182: &[&str; 1]; // in scope 9 at ui/fmt/format-args-capture.rs:77:21: 77:35
                        let mut _183: &&str; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                        scope 12 {
                            debug left_val => _76; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _77; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _82: core::panicking::AssertKind; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 13 {
                                debug kind => _82; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                        scope 14 {
                            debug s => _90; // in scope 14 at ui/fmt/format-args-capture.rs:77:9: 77:10
                            let _119: &&std::string::String; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            let _120: &&str; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _133: std::string::String; // in scope 14 at ui/fmt/format-args-capture.rs:80:9: 80:10
                            let _134: std::string::String; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                            let mut _180: &[&str; 1]; // in scope 14 at ui/fmt/format-args-capture.rs:80:21: 80:46
                            let mut _181: &&str; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                            scope 17 {
                                debug left_val => _119; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                debug right_val => _120; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let _125: core::panicking::AssertKind; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                scope 18 {
                                    debug kind => _125; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                }
                            }
                            scope 19 {
                                debug s => _133; // in scope 19 at ui/fmt/format-args-capture.rs:80:9: 80:10
                                let _165: &&std::string::String; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                let _166: &&str; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let mut _179: &&str; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                scope 22 {
                                    debug left_val => _165; // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                    debug right_val => _166; // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                    let _171: core::panicking::AssertKind; // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    scope 23 {
                                        debug kind => _171; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    }
                                }
                            }
                            scope 20 {
                                debug res => _134; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                            }
                            scope 21 {
                            }
                        }
                        scope 15 {
                            debug res => _91; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                        }
                        scope 16 {
                        }
                    }
                    scope 10 {
                        debug res => _48; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                    }
                    scope 11 {
                    }
                }
                scope 5 {
                    debug res => _5;     // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                }
                scope 6 {
                }
            }
        }
    }

    bb0: {
        _1 = const 9_usize;              // scope 0 at ui/fmt/format-args-capture.rs:66:17: 66:18
        _2 = const 3_usize;              // scope 1 at ui/fmt/format-args-capture.rs:67:21: 67:22
        _3 = const 7f64;                 // scope 2 at ui/fmt/format-args-capture.rs:69:13: 69:16
        _186 = const _;                  // scope 3 at ui/fmt/format-args-capture.rs:71:21: 71:33
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:71:21: 71:33
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(formatting_parameters_can_be_captured, [], Some(promoted[7])) }
        _9 = _186;                       // scope 3 at ui/fmt/format-args-capture.rs:71:21: 71:33
        _8 = _9;                         // scope 3 at ui/fmt/format-args-capture.rs:71:21: 71:33
        _7 = move _8 as &[&str] (Pointer(Unsize)); // scope 3 at ui/fmt/format-args-capture.rs:71:21: 71:33
        _16 = &_3;                       // scope 3 at ui/fmt/format-args-capture.rs:71:23: 71:24
        _15 = _16;                       // scope 3 at ui/fmt/format-args-capture.rs:71:23: 71:24
        _14 = core::fmt::ArgumentV1::<'_>::new_display::<f64>(move _15) -> bb1; // scope 3 at ui/fmt/format-args-capture.rs:71:23: 71:24
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:71:23: 71:24
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b f64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<f64>}, val: Value(<ZST>) }
    }

    bb1: {
        _19 = &_1;                       // scope 3 at ui/fmt/format-args-capture.rs:71:25: 71:30
        _18 = _19;                       // scope 3 at ui/fmt/format-args-capture.rs:71:25: 71:30
        _17 = core::fmt::ArgumentV1::<'_>::from_usize(move _18) -> bb2; // scope 3 at ui/fmt/format-args-capture.rs:71:25: 71:30
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:71:25: 71:30
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a> fn(&'a usize) -> core::fmt::ArgumentV1<'a> {core::fmt::ArgumentV1::<'_>::from_usize}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = [move _14, move _17];      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _12 = &_13;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _11 = _12;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _10 = move _11 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _25 = const std::fmt::rt::v1::Alignment::Unknown; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: std::fmt::rt::v1::Alignment, val: Value(Scalar(0x03)) }
        _26 = Implied;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _27 = Param(const 1_usize) -> bb3; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: fn(usize) -> Count {Param}, val: Value(<ZST>) }
    }

    bb3: {
        _24 = Argument::new(const 0_usize, const ' ', move _25, const 0_u32, move _26, move _27) -> bb4; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: fn(usize, char, std::fmt::rt::v1::Alignment, u32, Count, Count) -> Argument {Argument::new}, val: Value(<ZST>) }
    }

    bb4: {
        _23 = [move _24];                // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _22 = &_23;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _21 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _20 = move _21 as &[std::fmt::rt::v1::Argument] (Pointer(Unsize)); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _28 = core::fmt::UnsafeArg::new() -> bb5; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: unsafe fn() -> core::fmt::UnsafeArg {core::fmt::UnsafeArg::new}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = Arguments::<'_>::new_v1_formatted(move _7, move _10, move _20, move _28) -> bb6; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>], &[Argument], core::fmt::UnsafeArg) -> Arguments<'_> {Arguments::<'_>::new_v1_formatted}, val: Value(<ZST>) }
    }

    bb6: {
        _5 = format(move _6) -> bb7;     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb7: {
        _4 = move _5;                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _31 = &_4;                       // scope 4 at ui/fmt/format-args-capture.rs:72:16: 72:18
        _30 = &_31;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _185 = const _;                  // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(formatting_parameters_can_be_captured, [], Some(promoted[6])) }
        _32 = _185;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _29 = (move _30, move _32);      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _33 = (_29.0: &&std::string::String); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _34 = (_29.1: &&str);            // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _37 = _33;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _38 = _34;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _36 = <&String as PartialEq<&str>>::eq(move _37, move _38) -> [return: bb8, unwind: bb50]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &String, &'b &str) -> bool {<&String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _35 = Not(move _36);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _35) -> [0: bb10, otherwise: bb9]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _39 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _41 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _43 = _33;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _42 = _43;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _45 = _34;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _44 = _45;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _46 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _40 = core::panicking::assert_failed::<&String, &str>(move _41, move _42, move _44, move _46) -> bb50; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&String, &str>}, val: Value(<ZST>) }
    }

    bb10: {
        _184 = const _;                  // scope 4 at ui/fmt/format-args-capture.rs:74:21: 74:34
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:74:21: 74:34
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(formatting_parameters_can_be_captured, [], Some(promoted[5])) }
        _52 = _184;                      // scope 4 at ui/fmt/format-args-capture.rs:74:21: 74:34
        _51 = _52;                       // scope 4 at ui/fmt/format-args-capture.rs:74:21: 74:34
        _50 = move _51 as &[&str] (Pointer(Unsize)); // scope 4 at ui/fmt/format-args-capture.rs:74:21: 74:34
        _59 = &_3;                       // scope 4 at ui/fmt/format-args-capture.rs:74:23: 74:24
        _58 = _59;                       // scope 4 at ui/fmt/format-args-capture.rs:74:23: 74:24
        _57 = core::fmt::ArgumentV1::<'_>::new_display::<f64>(move _58) -> [return: bb11, unwind: bb50]; // scope 4 at ui/fmt/format-args-capture.rs:74:23: 74:24
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:74:23: 74:24
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b> fn(&'b f64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<f64>}, val: Value(<ZST>) }
    }

    bb11: {
        _62 = &_1;                       // scope 4 at ui/fmt/format-args-capture.rs:74:26: 74:31
        _61 = _62;                       // scope 4 at ui/fmt/format-args-capture.rs:74:26: 74:31
        _60 = core::fmt::ArgumentV1::<'_>::from_usize(move _61) -> [return: bb12, unwind: bb50]; // scope 4 at ui/fmt/format-args-capture.rs:74:26: 74:31
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:74:26: 74:31
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'a> fn(&'a usize) -> core::fmt::ArgumentV1<'a> {core::fmt::ArgumentV1::<'_>::from_usize}, val: Value(<ZST>) }
    }

    bb12: {
        _56 = [move _57, move _60];      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _55 = &_56;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _54 = _55;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _53 = move _54 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _68 = const std::fmt::rt::v1::Alignment::Left; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: std::fmt::rt::v1::Alignment, val: Value(Scalar(0x00)) }
        _69 = Implied;                   // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _70 = Param(const 1_usize) -> [return: bb13, unwind: bb50]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: fn(usize) -> Count {Param}, val: Value(<ZST>) }
    }

    bb13: {
        _67 = Argument::new(const 0_usize, const ' ', move _68, const 0_u32, move _69, move _70) -> [return: bb14, unwind: bb50]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: fn(usize, char, std::fmt::rt::v1::Alignment, u32, Count, Count) -> Argument {Argument::new}, val: Value(<ZST>) }
    }

    bb14: {
        _66 = [move _67];                // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _65 = &_66;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _64 = _65;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _63 = move _64 as &[std::fmt::rt::v1::Argument] (Pointer(Unsize)); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _71 = core::fmt::UnsafeArg::new() -> [return: bb15, unwind: bb50]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: unsafe fn() -> core::fmt::UnsafeArg {core::fmt::UnsafeArg::new}, val: Value(<ZST>) }
    }

    bb15: {
        _49 = Arguments::<'_>::new_v1_formatted(move _50, move _53, move _63, move _71) -> [return: bb16, unwind: bb50]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>], &[Argument], core::fmt::UnsafeArg) -> Arguments<'_> {Arguments::<'_>::new_v1_formatted}, val: Value(<ZST>) }
    }

    bb16: {
        _48 = format(move _49) -> [return: bb17, unwind: bb50]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb17: {
        _47 = move _48;                  // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _74 = &_47;                      // scope 9 at ui/fmt/format-args-capture.rs:75:16: 75:18
        _73 = &_74;                      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _183 = const _;                  // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(formatting_parameters_can_be_captured, [], Some(promoted[4])) }
        _75 = _183;                      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _72 = (move _73, move _75);      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _76 = (_72.0: &&std::string::String); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _77 = (_72.1: &&str);            // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _80 = _76;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _81 = _77;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _79 = <&String as PartialEq<&str>>::eq(move _80, move _81) -> [return: bb18, unwind: bb49]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &String, &'b &str) -> bool {<&String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb18: {
        _78 = Not(move _79);             // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _78) -> [0: bb20, otherwise: bb19]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb19: {
        _82 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _84 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _86 = _76;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _85 = _86;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _88 = _77;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _87 = _88;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _89 = Option::<Arguments<'_>>::None; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _83 = core::panicking::assert_failed::<&String, &str>(move _84, move _85, move _87, move _89) -> bb49; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&String, &str>}, val: Value(<ZST>) }
    }

    bb20: {
        _182 = const _;                  // scope 9 at ui/fmt/format-args-capture.rs:77:21: 77:35
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:77:21: 77:35
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(formatting_parameters_can_be_captured, [], Some(promoted[3])) }
        _95 = _182;                      // scope 9 at ui/fmt/format-args-capture.rs:77:21: 77:35
        _94 = _95;                       // scope 9 at ui/fmt/format-args-capture.rs:77:21: 77:35
        _93 = move _94 as &[&str] (Pointer(Unsize)); // scope 9 at ui/fmt/format-args-capture.rs:77:21: 77:35
        _102 = &_3;                      // scope 9 at ui/fmt/format-args-capture.rs:77:23: 77:24
        _101 = _102;                     // scope 9 at ui/fmt/format-args-capture.rs:77:23: 77:24
        _100 = core::fmt::ArgumentV1::<'_>::new_display::<f64>(move _101) -> [return: bb21, unwind: bb49]; // scope 9 at ui/fmt/format-args-capture.rs:77:23: 77:24
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:77:23: 77:24
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'b> fn(&'b f64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<f64>}, val: Value(<ZST>) }
    }

    bb21: {
        _105 = &_1;                      // scope 9 at ui/fmt/format-args-capture.rs:77:27: 77:32
        _104 = _105;                     // scope 9 at ui/fmt/format-args-capture.rs:77:27: 77:32
        _103 = core::fmt::ArgumentV1::<'_>::from_usize(move _104) -> [return: bb22, unwind: bb49]; // scope 9 at ui/fmt/format-args-capture.rs:77:27: 77:32
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:77:27: 77:32
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: for<'a> fn(&'a usize) -> core::fmt::ArgumentV1<'a> {core::fmt::ArgumentV1::<'_>::from_usize}, val: Value(<ZST>) }
    }

    bb22: {
        _99 = [move _100, move _103];    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _98 = &_99;                      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _97 = _98;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _96 = move _97 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _111 = const std::fmt::rt::v1::Alignment::Center; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: std::fmt::rt::v1::Alignment, val: Value(Scalar(0x02)) }
        _112 = Implied;                  // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _113 = Param(const 1_usize) -> [return: bb23, unwind: bb49]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: fn(usize) -> Count {Param}, val: Value(<ZST>) }
    }

    bb23: {
        _110 = Argument::new(const 0_usize, const '-', move _111, const 0_u32, move _112, move _113) -> [return: bb24, unwind: bb49]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: fn(usize, char, std::fmt::rt::v1::Alignment, u32, Count, Count) -> Argument {Argument::new}, val: Value(<ZST>) }
    }

    bb24: {
        _109 = [move _110];              // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _108 = &_109;                    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _107 = _108;                     // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _106 = move _107 as &[std::fmt::rt::v1::Argument] (Pointer(Unsize)); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _114 = core::fmt::UnsafeArg::new() -> [return: bb25, unwind: bb49]; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: unsafe fn() -> core::fmt::UnsafeArg {core::fmt::UnsafeArg::new}, val: Value(<ZST>) }
    }

    bb25: {
        _92 = Arguments::<'_>::new_v1_formatted(move _93, move _96, move _106, move _114) -> [return: bb26, unwind: bb49]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>], &[Argument], core::fmt::UnsafeArg) -> Arguments<'_> {Arguments::<'_>::new_v1_formatted}, val: Value(<ZST>) }
    }

    bb26: {
        _91 = format(move _92) -> [return: bb27, unwind: bb49]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb27: {
        _90 = move _91;                  // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _117 = &_90;                     // scope 14 at ui/fmt/format-args-capture.rs:78:16: 78:18
        _116 = &_117;                    // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _181 = const _;                  // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(formatting_parameters_can_be_captured, [], Some(promoted[2])) }
        _118 = _181;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _115 = (move _116, move _118);   // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _119 = (_115.0: &&std::string::String); // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _120 = (_115.1: &&str);          // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _123 = _119;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _124 = _120;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _122 = <&String as PartialEq<&str>>::eq(move _123, move _124) -> [return: bb28, unwind: bb48]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &String, &'b &str) -> bool {<&String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb28: {
        _121 = Not(move _122);           // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _121) -> [0: bb30, otherwise: bb29]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb29: {
        _125 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _127 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _129 = _119;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _128 = _129;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _131 = _120;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _130 = _131;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _132 = Option::<Arguments<'_>>::None; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _126 = core::panicking::assert_failed::<&String, &str>(move _127, move _128, move _130, move _132) -> bb48; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&String, &str>}, val: Value(<ZST>) }
    }

    bb30: {
        _180 = const _;                  // scope 14 at ui/fmt/format-args-capture.rs:80:21: 80:46
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:80:21: 80:46
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(formatting_parameters_can_be_captured, [], Some(promoted[1])) }
        _138 = _180;                     // scope 14 at ui/fmt/format-args-capture.rs:80:21: 80:46
        _137 = _138;                     // scope 14 at ui/fmt/format-args-capture.rs:80:21: 80:46
        _136 = move _137 as &[&str] (Pointer(Unsize)); // scope 14 at ui/fmt/format-args-capture.rs:80:21: 80:46
        _145 = &_3;                      // scope 14 at ui/fmt/format-args-capture.rs:80:23: 80:24
        _144 = _145;                     // scope 14 at ui/fmt/format-args-capture.rs:80:23: 80:24
        _143 = core::fmt::ArgumentV1::<'_>::new_display::<f64>(move _144) -> [return: bb31, unwind: bb48]; // scope 14 at ui/fmt/format-args-capture.rs:80:23: 80:24
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:80:23: 80:24
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: for<'b> fn(&'b f64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<f64>}, val: Value(<ZST>) }
    }

    bb31: {
        _148 = &_2;                      // scope 14 at ui/fmt/format-args-capture.rs:80:34: 80:43
        _147 = _148;                     // scope 14 at ui/fmt/format-args-capture.rs:80:34: 80:43
        _146 = core::fmt::ArgumentV1::<'_>::from_usize(move _147) -> [return: bb32, unwind: bb48]; // scope 14 at ui/fmt/format-args-capture.rs:80:34: 80:43
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:80:34: 80:43
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: for<'a> fn(&'a usize) -> core::fmt::ArgumentV1<'a> {core::fmt::ArgumentV1::<'_>::from_usize}, val: Value(<ZST>) }
    }

    bb32: {
        _151 = &_1;                      // scope 14 at ui/fmt/format-args-capture.rs:80:27: 80:32
        _150 = _151;                     // scope 14 at ui/fmt/format-args-capture.rs:80:27: 80:32
        _149 = core::fmt::ArgumentV1::<'_>::from_usize(move _150) -> [return: bb33, unwind: bb48]; // scope 14 at ui/fmt/format-args-capture.rs:80:27: 80:32
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:80:27: 80:32
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: for<'a> fn(&'a usize) -> core::fmt::ArgumentV1<'a> {core::fmt::ArgumentV1::<'_>::from_usize}, val: Value(<ZST>) }
    }

    bb33: {
        _142 = [move _143, move _146, move _149]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _141 = &_142;                    // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _140 = _141;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _139 = move _140 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _157 = const std::fmt::rt::v1::Alignment::Center; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: std::fmt::rt::v1::Alignment, val: Value(Scalar(0x02)) }
        _158 = Param(const 1_usize) -> [return: bb34, unwind: bb48]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: fn(usize) -> Count {Param}, val: Value(<ZST>) }
    }

    bb34: {
        _159 = Param(const 2_usize) -> [return: bb35, unwind: bb48]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: fn(usize) -> Count {Param}, val: Value(<ZST>) }
    }

    bb35: {
        _156 = Argument::new(const 0_usize, const '-', move _157, const 0_u32, move _158, move _159) -> [return: bb36, unwind: bb48]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: fn(usize, char, std::fmt::rt::v1::Alignment, u32, Count, Count) -> Argument {Argument::new}, val: Value(<ZST>) }
    }

    bb36: {
        _155 = [move _156];              // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _154 = &_155;                    // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _153 = _154;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _152 = move _153 as &[std::fmt::rt::v1::Argument] (Pointer(Unsize)); // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _160 = core::fmt::UnsafeArg::new() -> [return: bb37, unwind: bb48]; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: unsafe fn() -> core::fmt::UnsafeArg {core::fmt::UnsafeArg::new}, val: Value(<ZST>) }
    }

    bb37: {
        _135 = Arguments::<'_>::new_v1_formatted(move _136, move _139, move _152, move _160) -> [return: bb38, unwind: bb48]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>], &[Argument], core::fmt::UnsafeArg) -> Arguments<'_> {Arguments::<'_>::new_v1_formatted}, val: Value(<ZST>) }
    }

    bb38: {
        _134 = format(move _135) -> [return: bb39, unwind: bb48]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb39: {
        _133 = move _134;                // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _163 = &_133;                    // scope 19 at ui/fmt/format-args-capture.rs:81:16: 81:18
        _162 = &_163;                    // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _179 = const _;                  // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(formatting_parameters_can_be_captured, [], Some(promoted[0])) }
        _164 = _179;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _161 = (move _162, move _164);   // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _165 = (_161.0: &&std::string::String); // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _166 = (_161.1: &&str);          // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _169 = _165;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _170 = _166;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _168 = <&String as PartialEq<&str>>::eq(move _169, move _170) -> [return: bb40, unwind: bb47]; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &String, &'b &str) -> bool {<&String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb40: {
        _167 = Not(move _168);           // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _167) -> [0: bb42, otherwise: bb41]; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb41: {
        _171 = const core::panicking::AssertKind::Eq; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _173 = const core::panicking::AssertKind::Eq; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _175 = _165;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _174 = _175;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _177 = _166;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _176 = _177;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _178 = Option::<Arguments<'_>>::None; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _172 = core::panicking::assert_failed::<&String, &str>(move _173, move _174, move _176, move _178) -> bb47; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&String, &str>}, val: Value(<ZST>) }
    }

    bb42: {
        drop(_133) -> [return: bb43, unwind: bb48]; // scope 14 at ui/fmt/format-args-capture.rs:82:1: 82:2
    }

    bb43: {
        drop(_90) -> [return: bb44, unwind: bb49]; // scope 9 at ui/fmt/format-args-capture.rs:82:1: 82:2
    }

    bb44: {
        drop(_47) -> [return: bb45, unwind: bb50]; // scope 4 at ui/fmt/format-args-capture.rs:82:1: 82:2
    }

    bb45: {
        drop(_4) -> bb46;                // scope 3 at ui/fmt/format-args-capture.rs:82:1: 82:2
    }

    bb46: {
        return;                          // scope 0 at ui/fmt/format-args-capture.rs:82:2: 82:2
    }

    bb47 (cleanup): {
        drop(_133) -> bb48;              // scope 14 at ui/fmt/format-args-capture.rs:82:1: 82:2
    }

    bb48 (cleanup): {
        drop(_90) -> bb49;               // scope 9 at ui/fmt/format-args-capture.rs:82:1: 82:2
    }

    bb49 (cleanup): {
        drop(_47) -> bb50;               // scope 4 at ui/fmt/format-args-capture.rs:82:1: 82:2
    }

    bb50 (cleanup): {
        drop(_4) -> bb51;                // scope 3 at ui/fmt/format-args-capture.rs:82:1: 82:2
    }

    bb51 (cleanup): {
        resume;                          // scope 0 at ui/fmt/format-args-capture.rs:65:1: 82:2
    }
}

promoted[0] in formatting_parameters_can_be_captured: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/fmt/format-args-capture.rs:81:20: 81:31

    bb0: {
        _1 = const "--7.000--";          // scope 0 at ui/fmt/format-args-capture.rs:81:20: 81:31
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:81:20: 81:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in formatting_parameters_can_be_captured: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/fmt/format-args-capture.rs:80:21: 80:46
    let mut _1: [&str; 1];               // in scope 0 at ui/fmt/format-args-capture.rs:80:21: 80:46

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/fmt/format-args-capture.rs:80:21: 80:46
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:80:21: 80:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/fmt/format-args-capture.rs:80:21: 80:46
        return;                          // scope 0 at ui/fmt/format-args-capture.rs:80:21: 80:46
    }
}

promoted[2] in formatting_parameters_can_be_captured: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/fmt/format-args-capture.rs:78:20: 78:31

    bb0: {
        _1 = const "----7----";          // scope 0 at ui/fmt/format-args-capture.rs:78:20: 78:31
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:78:20: 78:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in formatting_parameters_can_be_captured: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/fmt/format-args-capture.rs:77:21: 77:35
    let mut _1: [&str; 1];               // in scope 0 at ui/fmt/format-args-capture.rs:77:21: 77:35

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/fmt/format-args-capture.rs:77:21: 77:35
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:77:21: 77:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/fmt/format-args-capture.rs:77:21: 77:35
        return;                          // scope 0 at ui/fmt/format-args-capture.rs:77:21: 77:35
    }
}

promoted[4] in formatting_parameters_can_be_captured: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/fmt/format-args-capture.rs:75:20: 75:31

    bb0: {
        _1 = const "7        ";          // scope 0 at ui/fmt/format-args-capture.rs:75:20: 75:31
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:75:20: 75:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in formatting_parameters_can_be_captured: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/fmt/format-args-capture.rs:74:21: 74:34
    let mut _1: [&str; 1];               // in scope 0 at ui/fmt/format-args-capture.rs:74:21: 74:34

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/fmt/format-args-capture.rs:74:21: 74:34
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:74:21: 74:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/fmt/format-args-capture.rs:74:21: 74:34
        return;                          // scope 0 at ui/fmt/format-args-capture.rs:74:21: 74:34
    }
}

promoted[6] in formatting_parameters_can_be_captured: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/fmt/format-args-capture.rs:72:20: 72:31

    bb0: {
        _1 = const "        7";          // scope 0 at ui/fmt/format-args-capture.rs:72:20: 72:31
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:72:20: 72:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[7] in formatting_parameters_can_be_captured: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/fmt/format-args-capture.rs:71:21: 71:33
    let mut _1: [&str; 1];               // in scope 0 at ui/fmt/format-args-capture.rs:71:21: 71:33

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/fmt/format-args-capture.rs:71:21: 71:33
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:71:21: 71:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/fmt/format-args-capture.rs:71:21: 71:33
        return;                          // scope 0 at ui/fmt/format-args-capture.rs:71:21: 71:33
    }
}

fn repeated_capture() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/fmt/format-args-capture.rs:84:23: 84:23
    let _1: i32;                         // in scope 0 at ui/fmt/format-args-capture.rs:85:9: 85:10
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _6: &[&str];                 // in scope 0 at ui/fmt/format-args-capture.rs:87:21: 87:34
    let mut _7: &[&str; 3];              // in scope 0 at ui/fmt/format-args-capture.rs:87:21: 87:34
    let _8: &[&str; 3];                  // in scope 0 at ui/fmt/format-args-capture.rs:87:21: 87:34
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _10: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _11: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _12: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fmt/format-args-capture.rs:87:23: 87:24
    let mut _14: &i32;                   // in scope 0 at ui/fmt/format-args-capture.rs:87:23: 87:24
    let _15: &i32;                       // in scope 0 at ui/fmt/format-args-capture.rs:87:23: 87:24
    let mut _16: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fmt/format-args-capture.rs:87:27: 87:28
    let mut _17: &i32;                   // in scope 0 at ui/fmt/format-args-capture.rs:87:27: 87:28
    let _18: &i32;                       // in scope 0 at ui/fmt/format-args-capture.rs:87:27: 87:28
    let mut _19: &[std::fmt::rt::v1::Argument]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _20: &[std::fmt::rt::v1::Argument; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _21: &[std::fmt::rt::v1::Argument; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _22: [std::fmt::rt::v1::Argument; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _23: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _24: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _25: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _26: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _27: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _28: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _29: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _30: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _31: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _32: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _33: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _34: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _35: core::fmt::UnsafeArg;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _36: (&&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _37: &&std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _38: &std::string::String;       // in scope 0 at ui/fmt/format-args-capture.rs:88:16: 88:18
    let mut _39: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _42: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _43: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _44: &&std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _45: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _47: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _48: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _49: &&std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _50: &&std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _51: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _52: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/fmt/format-args-capture.rs:85:9: 85:10
        let _2: i32;                     // in scope 1 at ui/fmt/format-args-capture.rs:86:9: 86:10
        scope 2 {
            debug b => _2;               // in scope 2 at ui/fmt/format-args-capture.rs:86:9: 86:10
            let _3: std::string::String; // in scope 2 at ui/fmt/format-args-capture.rs:87:9: 87:10
            let _4: std::string::String; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
            let mut _55: &[&str; 3];     // in scope 2 at ui/fmt/format-args-capture.rs:87:21: 87:34
            scope 3 {
                debug s => _3;           // in scope 3 at ui/fmt/format-args-capture.rs:87:9: 87:10
                let _40: &&std::string::String; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _41: &&str;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _54: &&str;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 6 {
                    debug left_val => _40; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _41; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _46: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 7 {
                        debug kind => _46; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
            scope 4 {
                debug res => _4;         // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
            }
            scope 5 {
            }
        }
    }

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/fmt/format-args-capture.rs:85:13: 85:14
        _2 = const 2_i32;                // scope 1 at ui/fmt/format-args-capture.rs:86:13: 86:14
        _55 = const _;                   // scope 2 at ui/fmt/format-args-capture.rs:87:21: 87:34
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:87:21: 87:34
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(repeated_capture, [], Some(promoted[1])) }
        _8 = _55;                        // scope 2 at ui/fmt/format-args-capture.rs:87:21: 87:34
        _7 = _8;                         // scope 2 at ui/fmt/format-args-capture.rs:87:21: 87:34
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 2 at ui/fmt/format-args-capture.rs:87:21: 87:34
        _15 = &_1;                       // scope 2 at ui/fmt/format-args-capture.rs:87:23: 87:24
        _14 = _15;                       // scope 2 at ui/fmt/format-args-capture.rs:87:23: 87:24
        _13 = core::fmt::ArgumentV1::<'_>::new_display::<i32>(move _14) -> bb1; // scope 2 at ui/fmt/format-args-capture.rs:87:23: 87:24
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:87:23: 87:24
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b i32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _18 = &_2;                       // scope 2 at ui/fmt/format-args-capture.rs:87:27: 87:28
        _17 = _18;                       // scope 2 at ui/fmt/format-args-capture.rs:87:27: 87:28
        _16 = core::fmt::ArgumentV1::<'_>::new_display::<i32>(move _17) -> bb2; // scope 2 at ui/fmt/format-args-capture.rs:87:27: 87:28
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:87:27: 87:28
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b i32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<i32>}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = [move _13, move _16];      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _11 = &_12;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _10 = _11;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _24 = const std::fmt::rt::v1::Alignment::Unknown; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: std::fmt::rt::v1::Alignment, val: Value(Scalar(0x03)) }
        _25 = Implied;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _26 = Implied;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _23 = Argument::new(const 0_usize, const ' ', move _24, const 0_u32, move _25, move _26) -> bb3; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: fn(usize, char, std::fmt::rt::v1::Alignment, u32, Count, Count) -> Argument {Argument::new}, val: Value(<ZST>) }
    }

    bb3: {
        _28 = const std::fmt::rt::v1::Alignment::Unknown; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: std::fmt::rt::v1::Alignment, val: Value(Scalar(0x03)) }
        _29 = Implied;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _30 = Implied;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _27 = Argument::new(const 1_usize, const ' ', move _28, const 0_u32, move _29, move _30) -> bb4; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: fn(usize, char, std::fmt::rt::v1::Alignment, u32, Count, Count) -> Argument {Argument::new}, val: Value(<ZST>) }
    }

    bb4: {
        _32 = const std::fmt::rt::v1::Alignment::Unknown; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: std::fmt::rt::v1::Alignment, val: Value(Scalar(0x03)) }
        _33 = Implied;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _34 = Implied;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _31 = Argument::new(const 0_usize, const ' ', move _32, const 0_u32, move _33, move _34) -> bb5; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: fn(usize, char, std::fmt::rt::v1::Alignment, u32, Count, Count) -> Argument {Argument::new}, val: Value(<ZST>) }
    }

    bb5: {
        _22 = [move _23, move _27, move _31]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _21 = &_22;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _20 = _21;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _19 = move _20 as &[std::fmt::rt::v1::Argument] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _35 = core::fmt::UnsafeArg::new() -> bb6; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: unsafe fn() -> core::fmt::UnsafeArg {core::fmt::UnsafeArg::new}, val: Value(<ZST>) }
    }

    bb6: {
        _5 = Arguments::<'_>::new_v1_formatted(move _6, move _9, move _19, move _35) -> bb7; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>], &[Argument], core::fmt::UnsafeArg) -> Arguments<'_> {Arguments::<'_>::new_v1_formatted}, val: Value(<ZST>) }
    }

    bb7: {
        _4 = format(move _5) -> bb8;     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb8: {
        _3 = move _4;                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _38 = &_3;                       // scope 3 at ui/fmt/format-args-capture.rs:88:16: 88:18
        _37 = &_38;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _54 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(repeated_capture, [], Some(promoted[0])) }
        _39 = _54;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _36 = (move _37, move _39);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _40 = (_36.0: &&std::string::String); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _41 = (_36.1: &&str);            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _44 = _40;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _45 = _41;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _43 = <&String as PartialEq<&str>>::eq(move _44, move _45) -> [return: bb9, unwind: bb13]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &String, &'b &str) -> bool {<&String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _42 = Not(move _43);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _42) -> [0: bb11, otherwise: bb10]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _46 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _48 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _50 = _40;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _49 = _50;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _52 = _41;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _51 = _52;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _53 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _47 = core::panicking::assert_failed::<&String, &str>(move _48, move _49, move _51, move _53) -> bb13; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&String, &str>}, val: Value(<ZST>) }
    }

    bb11: {
        drop(_3) -> bb12;                // scope 2 at ui/fmt/format-args-capture.rs:89:1: 89:2
    }

    bb12: {
        return;                          // scope 0 at ui/fmt/format-args-capture.rs:89:2: 89:2
    }

    bb13 (cleanup): {
        drop(_3) -> bb14;                // scope 2 at ui/fmt/format-args-capture.rs:89:1: 89:2
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/fmt/format-args-capture.rs:84:1: 89:2
    }
}

promoted[0] in repeated_capture: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/fmt/format-args-capture.rs:88:20: 88:27

    bb0: {
        _1 = const "1 2 1";              // scope 0 at ui/fmt/format-args-capture.rs:88:20: 88:27
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:88:20: 88:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in repeated_capture: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ui/fmt/format-args-capture.rs:87:21: 87:34
    let mut _1: [&str; 3];               // in scope 0 at ui/fmt/format-args-capture.rs:87:21: 87:34

    bb0: {
        _1 = [const "", const " ", const " "]; // scope 0 at ui/fmt/format-args-capture.rs:87:21: 87:34
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:87:21: 87:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:87:21: 87:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/fmt/format-args-capture.rs:87:21: 87:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/fmt/format-args-capture.rs:87:21: 87:34
        return;                          // scope 0 at ui/fmt/format-args-capture.rs:87:21: 87:34
    }
}
