// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_stack_assign() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/stdlib-unit-tests/istr.rs:5:24: 5:24
    let _1: std::string::String;         // in scope 0 at ui/stdlib-unit-tests/istr.rs:6:9: 6:10
    let mut _2: &str;                    // in scope 0 at ui/stdlib-unit-tests/istr.rs:6:21: 6:36
    let _3: &str;                        // in scope 0 at ui/stdlib-unit-tests/istr.rs:6:21: 6:24
    let _4: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _6: &[&str];                 // in scope 0 at ui/stdlib-unit-tests/istr.rs:7:14: 7:18
    let mut _7: &[&str; 2];              // in scope 0 at ui/stdlib-unit-tests/istr.rs:7:14: 7:18
    let _8: &[&str; 2];                  // in scope 0 at ui/stdlib-unit-tests/istr.rs:7:14: 7:18
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/stdlib-unit-tests/istr.rs:7:20: 7:29
    let mut _14: &std::string::String;   // in scope 0 at ui/stdlib-unit-tests/istr.rs:7:20: 7:29
    let _15: &std::string::String;       // in scope 0 at ui/stdlib-unit-tests/istr.rs:7:20: 7:29
    let _16: std::string::String;        // in scope 0 at ui/stdlib-unit-tests/istr.rs:7:20: 7:29
    let mut _17: &std::string::String;   // in scope 0 at ui/stdlib-unit-tests/istr.rs:7:20: 7:29
    let mut _19: &str;                   // in scope 0 at ui/stdlib-unit-tests/istr.rs:8:21: 8:36
    let _20: &str;                       // in scope 0 at ui/stdlib-unit-tests/istr.rs:8:21: 8:24
    let mut _21: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _22: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _23: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _26: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _27: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _28: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _29: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _31: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _32: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _33: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _34: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _35: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _36: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _39: &str;                   // in scope 0 at ui/stdlib-unit-tests/istr.rs:10:21: 10:36
    let _40: &str;                       // in scope 0 at ui/stdlib-unit-tests/istr.rs:10:21: 10:24
    let mut _41: bool;                   // in scope 0 at ui/stdlib-unit-tests/istr.rs:11:5: 11:22
    let mut _42: bool;                   // in scope 0 at ui/stdlib-unit-tests/istr.rs:11:13: 11:21
    let mut _43: &std::string::String;   // in scope 0 at ui/stdlib-unit-tests/istr.rs:11:14: 11:15
    let mut _44: &std::string::String;   // in scope 0 at ui/stdlib-unit-tests/istr.rs:11:19: 11:20
    let mut _45: !;                      // in scope 0 at ui/stdlib-unit-tests/istr.rs:11:5: 11:22
    scope 1 {
        debug s => _1;                   // in scope 1 at ui/stdlib-unit-tests/istr.rs:6:9: 6:10
        let _18: std::string::String;    // in scope 1 at ui/stdlib-unit-tests/istr.rs:8:9: 8:10
        let mut _46: &[&str; 2];         // in scope 1 at ui/stdlib-unit-tests/istr.rs:7:14: 7:18
        scope 2 {
            debug t => _18;              // in scope 2 at ui/stdlib-unit-tests/istr.rs:8:9: 8:10
            let _24: &std::string::String; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _25: &std::string::String; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _38: std::string::String; // in scope 2 at ui/stdlib-unit-tests/istr.rs:10:9: 10:10
            scope 3 {
                debug left_val => _24;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _25;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _30: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _30;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug u => _38;          // in scope 5 at ui/stdlib-unit-tests/istr.rs:10:9: 10:10
            }
        }
    }

    bb0: {
        _3 = const "a";                  // scope 0 at ui/stdlib-unit-tests/istr.rs:6:21: 6:24
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:6:21: 6:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at ui/stdlib-unit-tests/istr.rs:6:21: 6:36
        _1 = <str as ToString>::to_string(move _2) -> bb1; // scope 0 at ui/stdlib-unit-tests/istr.rs:6:21: 6:36
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:6:25: 6:34
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _46 = const _;                   // scope 1 at ui/stdlib-unit-tests/istr.rs:7:14: 7:18
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:7:14: 7:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(test_stack_assign, [], Some(promoted[0])) }
        _8 = _46;                        // scope 1 at ui/stdlib-unit-tests/istr.rs:7:14: 7:18
        _7 = _8;                         // scope 1 at ui/stdlib-unit-tests/istr.rs:7:14: 7:18
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 1 at ui/stdlib-unit-tests/istr.rs:7:14: 7:18
        _17 = &_1;                       // scope 1 at ui/stdlib-unit-tests/istr.rs:7:20: 7:29
        _16 = <String as Clone>::clone(move _17) -> [return: bb2, unwind: bb21]; // scope 1 at ui/stdlib-unit-tests/istr.rs:7:20: 7:29
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:7:22: 7:27
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> String {<String as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _15 = &_16;                      // scope 1 at ui/stdlib-unit-tests/istr.rs:7:20: 7:29
        _14 = _15;                       // scope 1 at ui/stdlib-unit-tests/istr.rs:7:20: 7:29
        _13 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _14) -> [return: bb3, unwind: bb20]; // scope 1 at ui/stdlib-unit-tests/istr.rs:7:20: 7:29
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:7:20: 7:29
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = [move _13];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = &_12;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = _11;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> [return: bb4, unwind: bb20]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = _print(move _5) -> [return: bb5, unwind: bb20]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_16) -> [return: bb6, unwind: bb21]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb6: {
        _20 = const "a";                 // scope 1 at ui/stdlib-unit-tests/istr.rs:8:21: 8:24
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:8:21: 8:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _19 = _20;                       // scope 1 at ui/stdlib-unit-tests/istr.rs:8:21: 8:36
        _18 = <str as ToString>::to_string(move _19) -> [return: bb7, unwind: bb21]; // scope 1 at ui/stdlib-unit-tests/istr.rs:8:21: 8:36
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:8:25: 8:34
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb7: {
        _22 = &_1;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _23 = &_18;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _21 = (move _22, move _23);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _24 = (_21.0: &std::string::String); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _25 = (_21.1: &std::string::String); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _28 = _24;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _29 = _25;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _27 = <String as PartialEq>::eq(move _28, move _29) -> [return: bb8, unwind: bb19]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _26 = Not(move _27);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _26) -> [0: bb10, otherwise: bb9]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _30 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _32 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _34 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _33 = _34;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _36 = _25;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _35 = _36;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _37 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _31 = core::panicking::assert_failed::<String, String>(move _32, move _33, move _35, move _37) -> bb19; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb10: {
        _40 = const "b";                 // scope 2 at ui/stdlib-unit-tests/istr.rs:10:21: 10:24
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:10:21: 10:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _39 = _40;                       // scope 2 at ui/stdlib-unit-tests/istr.rs:10:21: 10:36
        _38 = <str as ToString>::to_string(move _39) -> [return: bb11, unwind: bb19]; // scope 2 at ui/stdlib-unit-tests/istr.rs:10:21: 10:36
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:10:25: 10:34
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb11: {
        _43 = &_1;                       // scope 5 at ui/stdlib-unit-tests/istr.rs:11:14: 11:15
        _44 = &_38;                      // scope 5 at ui/stdlib-unit-tests/istr.rs:11:19: 11:20
        _42 = <String as PartialEq>::ne(move _43, move _44) -> [return: bb12, unwind: bb18]; // scope 5 at ui/stdlib-unit-tests/istr.rs:11:13: 11:21
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:11:13: 11:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb12: {
        _41 = Not(move _42);             // scope 5 at ui/stdlib-unit-tests/istr.rs:11:5: 11:22
        switchInt(move _41) -> [0: bb14, otherwise: bb13]; // scope 5 at ui/stdlib-unit-tests/istr.rs:11:5: 11:22
    }

    bb13: {
        _45 = core::panicking::panic(const "assertion failed: (s != u)") -> bb18; // scope 5 at ui/stdlib-unit-tests/istr.rs:11:5: 11:22
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:11:5: 11:22
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb14: {
        drop(_38) -> [return: bb15, unwind: bb19]; // scope 2 at ui/stdlib-unit-tests/istr.rs:12:1: 12:2
    }

    bb15: {
        drop(_18) -> [return: bb16, unwind: bb21]; // scope 1 at ui/stdlib-unit-tests/istr.rs:12:1: 12:2
    }

    bb16: {
        drop(_1) -> bb17;                // scope 0 at ui/stdlib-unit-tests/istr.rs:12:1: 12:2
    }

    bb17: {
        return;                          // scope 0 at ui/stdlib-unit-tests/istr.rs:12:2: 12:2
    }

    bb18 (cleanup): {
        drop(_38) -> bb19;               // scope 2 at ui/stdlib-unit-tests/istr.rs:12:1: 12:2
    }

    bb19 (cleanup): {
        drop(_18) -> bb21;               // scope 1 at ui/stdlib-unit-tests/istr.rs:12:1: 12:2
    }

    bb20 (cleanup): {
        drop(_16) -> bb21;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb21 (cleanup): {
        drop(_1) -> bb22;                // scope 0 at ui/stdlib-unit-tests/istr.rs:12:1: 12:2
    }

    bb22 (cleanup): {
        resume;                          // scope 0 at ui/stdlib-unit-tests/istr.rs:5:1: 12:2
    }
}

promoted[0] in test_stack_assign: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/stdlib-unit-tests/istr.rs:7:14: 7:18
    let mut _1: [&str; 2];               // in scope 0 at ui/stdlib-unit-tests/istr.rs:7:14: 7:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/stdlib-unit-tests/istr.rs:7:14: 7:18
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:7:14: 7:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:7:14: 7:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/stdlib-unit-tests/istr.rs:7:14: 7:18
        return;                          // scope 0 at ui/stdlib-unit-tests/istr.rs:7:14: 7:18
    }
}

fn test_heap_lit() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/stdlib-unit-tests/istr.rs:14:20: 14:20
    let _1: std::string::String;         // in scope 0 at ui/stdlib-unit-tests/istr.rs:14:22: 14:48
    let mut _2: &str;                    // in scope 0 at ui/stdlib-unit-tests/istr.rs:14:22: 14:48
    let _3: &str;                        // in scope 0 at ui/stdlib-unit-tests/istr.rs:14:22: 14:36

    bb0: {
        _3 = const "a big string";       // scope 0 at ui/stdlib-unit-tests/istr.rs:14:22: 14:36
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:14:22: 14:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at ui/stdlib-unit-tests/istr.rs:14:22: 14:48
        _1 = <str as ToString>::to_string(move _2) -> bb1; // scope 0 at ui/stdlib-unit-tests/istr.rs:14:22: 14:48
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:14:37: 14:46
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/stdlib-unit-tests/istr.rs:14:48: 14:49
    }

    bb2: {
        return;                          // scope 0 at ui/stdlib-unit-tests/istr.rs:14:51: 14:51
    }
}

fn test_heap_assign() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/stdlib-unit-tests/istr.rs:16:23: 16:23
    let _1: std::string::String;         // in scope 0 at ui/stdlib-unit-tests/istr.rs:17:9: 17:10
    let mut _2: &str;                    // in scope 0 at ui/stdlib-unit-tests/istr.rs:17:21: 17:51
    let _3: &str;                        // in scope 0 at ui/stdlib-unit-tests/istr.rs:17:21: 17:39
    let mut _5: &str;                    // in scope 0 at ui/stdlib-unit-tests/istr.rs:18:21: 18:51
    let _6: &str;                        // in scope 0 at ui/stdlib-unit-tests/istr.rs:18:21: 18:39
    let mut _7: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _9: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _25: &str;                   // in scope 0 at ui/stdlib-unit-tests/istr.rs:20:21: 20:51
    let _26: &str;                       // in scope 0 at ui/stdlib-unit-tests/istr.rs:20:21: 20:39
    let mut _27: bool;                   // in scope 0 at ui/stdlib-unit-tests/istr.rs:21:5: 21:22
    let mut _28: bool;                   // in scope 0 at ui/stdlib-unit-tests/istr.rs:21:13: 21:21
    let mut _29: &std::string::String;   // in scope 0 at ui/stdlib-unit-tests/istr.rs:21:14: 21:15
    let mut _30: &std::string::String;   // in scope 0 at ui/stdlib-unit-tests/istr.rs:21:19: 21:20
    let mut _31: !;                      // in scope 0 at ui/stdlib-unit-tests/istr.rs:21:5: 21:22
    scope 1 {
        debug s => _1;                   // in scope 1 at ui/stdlib-unit-tests/istr.rs:17:9: 17:10
        let _4: std::string::String;     // in scope 1 at ui/stdlib-unit-tests/istr.rs:18:9: 18:10
        scope 2 {
            debug t => _4;               // in scope 2 at ui/stdlib-unit-tests/istr.rs:18:9: 18:10
            let _10: &std::string::String; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _11: &std::string::String; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _24: std::string::String; // in scope 2 at ui/stdlib-unit-tests/istr.rs:20:9: 20:10
            scope 3 {
                debug left_val => _10;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _11;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _16: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _16;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug u => _24;          // in scope 5 at ui/stdlib-unit-tests/istr.rs:20:9: 20:10
            }
        }
    }

    bb0: {
        _3 = const "a big ol' string";   // scope 0 at ui/stdlib-unit-tests/istr.rs:17:21: 17:39
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:17:21: 17:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at ui/stdlib-unit-tests/istr.rs:17:21: 17:51
        _1 = <str as ToString>::to_string(move _2) -> bb1; // scope 0 at ui/stdlib-unit-tests/istr.rs:17:21: 17:51
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:17:40: 17:49
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = const "a big ol' string";   // scope 1 at ui/stdlib-unit-tests/istr.rs:18:21: 18:39
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:18:21: 18:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 1 at ui/stdlib-unit-tests/istr.rs:18:21: 18:51
        _4 = <str as ToString>::to_string(move _5) -> [return: bb2, unwind: bb15]; // scope 1 at ui/stdlib-unit-tests/istr.rs:18:21: 18:51
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:18:40: 18:49
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &_1;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _9 = &_4;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _9);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_7.0: &std::string::String); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_7.1: &std::string::String); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = _10;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = _11;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = <String as PartialEq>::eq(move _14, move _15) -> [return: bb3, unwind: bb14]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = Not(move _13);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb5, otherwise: bb4]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<String, String>(move _18, move _19, move _21, move _23) -> bb14; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb5: {
        _26 = const "a bad ol' string";  // scope 2 at ui/stdlib-unit-tests/istr.rs:20:21: 20:39
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:20:21: 20:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _25 = _26;                       // scope 2 at ui/stdlib-unit-tests/istr.rs:20:21: 20:51
        _24 = <str as ToString>::to_string(move _25) -> [return: bb6, unwind: bb14]; // scope 2 at ui/stdlib-unit-tests/istr.rs:20:21: 20:51
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:20:40: 20:49
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb6: {
        _29 = &_1;                       // scope 5 at ui/stdlib-unit-tests/istr.rs:21:14: 21:15
        _30 = &_24;                      // scope 5 at ui/stdlib-unit-tests/istr.rs:21:19: 21:20
        _28 = <String as PartialEq>::ne(move _29, move _30) -> [return: bb7, unwind: bb13]; // scope 5 at ui/stdlib-unit-tests/istr.rs:21:13: 21:21
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:21:13: 21:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb7: {
        _27 = Not(move _28);             // scope 5 at ui/stdlib-unit-tests/istr.rs:21:5: 21:22
        switchInt(move _27) -> [0: bb9, otherwise: bb8]; // scope 5 at ui/stdlib-unit-tests/istr.rs:21:5: 21:22
    }

    bb8: {
        _31 = core::panicking::panic(const "assertion failed: (s != u)") -> bb13; // scope 5 at ui/stdlib-unit-tests/istr.rs:21:5: 21:22
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:21:5: 21:22
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        drop(_24) -> [return: bb10, unwind: bb14]; // scope 2 at ui/stdlib-unit-tests/istr.rs:22:1: 22:2
    }

    bb10: {
        drop(_4) -> [return: bb11, unwind: bb15]; // scope 1 at ui/stdlib-unit-tests/istr.rs:22:1: 22:2
    }

    bb11: {
        drop(_1) -> bb12;                // scope 0 at ui/stdlib-unit-tests/istr.rs:22:1: 22:2
    }

    bb12: {
        return;                          // scope 0 at ui/stdlib-unit-tests/istr.rs:22:2: 22:2
    }

    bb13 (cleanup): {
        drop(_24) -> bb14;               // scope 2 at ui/stdlib-unit-tests/istr.rs:22:1: 22:2
    }

    bb14 (cleanup): {
        drop(_4) -> bb15;                // scope 1 at ui/stdlib-unit-tests/istr.rs:22:1: 22:2
    }

    bb15 (cleanup): {
        drop(_1) -> bb16;                // scope 0 at ui/stdlib-unit-tests/istr.rs:22:1: 22:2
    }

    bb16 (cleanup): {
        resume;                          // scope 0 at ui/stdlib-unit-tests/istr.rs:16:1: 22:2
    }
}

fn test_heap_log() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/stdlib-unit-tests/istr.rs:24:20: 24:20
    let _1: std::string::String;         // in scope 0 at ui/stdlib-unit-tests/istr.rs:25:9: 25:10
    let mut _2: &str;                    // in scope 0 at ui/stdlib-unit-tests/istr.rs:25:13: 25:43
    let _3: &str;                        // in scope 0 at ui/stdlib-unit-tests/istr.rs:25:13: 25:31
    let _4: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _6: &[&str];                 // in scope 0 at ui/stdlib-unit-tests/istr.rs:26:14: 26:18
    let mut _7: &[&str; 2];              // in scope 0 at ui/stdlib-unit-tests/istr.rs:26:14: 26:18
    let _8: &[&str; 2];                  // in scope 0 at ui/stdlib-unit-tests/istr.rs:26:14: 26:18
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/stdlib-unit-tests/istr.rs:26:20: 26:21
    let mut _14: &std::string::String;   // in scope 0 at ui/stdlib-unit-tests/istr.rs:26:20: 26:21
    let _15: &std::string::String;       // in scope 0 at ui/stdlib-unit-tests/istr.rs:26:20: 26:21
    scope 1 {
        debug s => _1;                   // in scope 1 at ui/stdlib-unit-tests/istr.rs:25:9: 25:10
        let mut _16: &[&str; 2];         // in scope 1 at ui/stdlib-unit-tests/istr.rs:26:14: 26:18
    }

    bb0: {
        _3 = const "a big ol' string";   // scope 0 at ui/stdlib-unit-tests/istr.rs:25:13: 25:31
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:25:13: 25:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at ui/stdlib-unit-tests/istr.rs:25:13: 25:43
        _1 = <str as ToString>::to_string(move _2) -> bb1; // scope 0 at ui/stdlib-unit-tests/istr.rs:25:13: 25:43
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:25:32: 25:41
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _16 = const _;                   // scope 1 at ui/stdlib-unit-tests/istr.rs:26:14: 26:18
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:26:14: 26:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(test_heap_log, [], Some(promoted[0])) }
        _8 = _16;                        // scope 1 at ui/stdlib-unit-tests/istr.rs:26:14: 26:18
        _7 = _8;                         // scope 1 at ui/stdlib-unit-tests/istr.rs:26:14: 26:18
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 1 at ui/stdlib-unit-tests/istr.rs:26:14: 26:18
        _15 = &_1;                       // scope 1 at ui/stdlib-unit-tests/istr.rs:26:20: 26:21
        _14 = _15;                       // scope 1 at ui/stdlib-unit-tests/istr.rs:26:20: 26:21
        _13 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _14) -> [return: bb2, unwind: bb6]; // scope 1 at ui/stdlib-unit-tests/istr.rs:26:20: 26:21
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:26:20: 26:21
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = [move _13];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = &_12;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = _11;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> [return: bb3, unwind: bb6]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = _print(move _5) -> [return: bb4, unwind: bb6]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/stdlib-unit-tests/istr.rs:27:1: 27:2
    }

    bb5: {
        return;                          // scope 0 at ui/stdlib-unit-tests/istr.rs:27:2: 27:2
    }

    bb6 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at ui/stdlib-unit-tests/istr.rs:27:1: 27:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/stdlib-unit-tests/istr.rs:24:1: 27:2
    }
}

promoted[0] in test_heap_log: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/stdlib-unit-tests/istr.rs:26:14: 26:18
    let mut _1: [&str; 2];               // in scope 0 at ui/stdlib-unit-tests/istr.rs:26:14: 26:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/stdlib-unit-tests/istr.rs:26:14: 26:18
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:26:14: 26:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:26:14: 26:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/stdlib-unit-tests/istr.rs:26:14: 26:18
        return;                          // scope 0 at ui/stdlib-unit-tests/istr.rs:26:14: 26:18
    }
}

fn test_append() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/stdlib-unit-tests/istr.rs:29:18: 29:18
    let mut _1: std::string::String;     // in scope 0 at ui/stdlib-unit-tests/istr.rs:30:9: 30:14
    let _2: ();                          // in scope 0 at ui/stdlib-unit-tests/istr.rs:31:5: 31:20
    let mut _3: &mut std::string::String; // in scope 0 at ui/stdlib-unit-tests/istr.rs:31:5: 31:20
    let mut _4: &str;                    // in scope 0 at ui/stdlib-unit-tests/istr.rs:31:16: 31:19
    let _5: &str;                        // in scope 0 at ui/stdlib-unit-tests/istr.rs:31:16: 31:19
    let mut _6: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _7: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _8: &&str;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _24: ();                         // in scope 0 at ui/stdlib-unit-tests/istr.rs:35:5: 35:20
    let mut _25: &mut std::string::String; // in scope 0 at ui/stdlib-unit-tests/istr.rs:35:5: 35:20
    let mut _26: &str;                   // in scope 0 at ui/stdlib-unit-tests/istr.rs:35:16: 35:19
    let _27: &str;                       // in scope 0 at ui/stdlib-unit-tests/istr.rs:35:16: 35:19
    let _28: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _29: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _30: &[&str];                // in scope 0 at ui/stdlib-unit-tests/istr.rs:36:14: 36:18
    let mut _31: &[&str; 2];             // in scope 0 at ui/stdlib-unit-tests/istr.rs:36:14: 36:18
    let _32: &[&str; 2];                 // in scope 0 at ui/stdlib-unit-tests/istr.rs:36:14: 36:18
    let mut _33: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _34: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _35: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _36: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _37: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/stdlib-unit-tests/istr.rs:36:20: 36:29
    let mut _38: &std::string::String;   // in scope 0 at ui/stdlib-unit-tests/istr.rs:36:20: 36:29
    let _39: &std::string::String;       // in scope 0 at ui/stdlib-unit-tests/istr.rs:36:20: 36:29
    let _40: std::string::String;        // in scope 0 at ui/stdlib-unit-tests/istr.rs:36:20: 36:29
    let mut _41: &std::string::String;   // in scope 0 at ui/stdlib-unit-tests/istr.rs:36:20: 36:29
    let mut _42: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _43: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _44: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _47: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _48: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _49: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _50: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _52: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _53: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _54: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _55: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _56: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _57: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _60: ();                         // in scope 0 at ui/stdlib-unit-tests/istr.rs:40:5: 40:24
    let mut _61: &mut std::string::String; // in scope 0 at ui/stdlib-unit-tests/istr.rs:40:5: 40:24
    let mut _62: &str;                   // in scope 0 at ui/stdlib-unit-tests/istr.rs:40:16: 40:23
    let _63: &str;                       // in scope 0 at ui/stdlib-unit-tests/istr.rs:40:16: 40:23
    let mut _64: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _65: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _66: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _69: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _70: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _71: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _72: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _74: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _75: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _76: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _77: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _78: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _79: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _81: ();                         // in scope 0 at ui/stdlib-unit-tests/istr.rs:43:5: 43:23
    let mut _82: &mut std::string::String; // in scope 0 at ui/stdlib-unit-tests/istr.rs:43:5: 43:23
    let mut _83: &str;                   // in scope 0 at ui/stdlib-unit-tests/istr.rs:43:16: 43:22
    let _84: &str;                       // in scope 0 at ui/stdlib-unit-tests/istr.rs:43:16: 43:22
    let mut _85: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _86: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _87: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _90: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _91: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _92: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _93: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _95: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _96: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _97: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _98: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _99: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _100: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _101: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug s => _1;                   // in scope 1 at ui/stdlib-unit-tests/istr.rs:30:9: 30:14
        let _9: &std::string::String;    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _10: &&str;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _23: std::string::String; // in scope 1 at ui/stdlib-unit-tests/istr.rs:34:9: 34:14
        let mut _106: &&str;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _9;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _10;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _15: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _15;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug s => _23;              // in scope 4 at ui/stdlib-unit-tests/istr.rs:34:9: 34:14
            let _45: &std::string::String; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _46: &&str;              // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _59: std::string::String; // in scope 4 at ui/stdlib-unit-tests/istr.rs:39:9: 39:14
            let mut _104: &&str;         // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _105: &[&str; 2];    // in scope 4 at ui/stdlib-unit-tests/istr.rs:36:14: 36:18
            scope 5 {
                debug left_val => _45;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _46;  // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _51: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 6 {
                    debug kind => _51;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 7 {
                debug s => _59;          // in scope 7 at ui/stdlib-unit-tests/istr.rs:39:9: 39:14
                let _67: &std::string::String; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _68: &&str;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _88: &std::string::String; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _89: &&str;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _102: &&str;     // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                let mut _103: &&str;     // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 8 {
                    debug left_val => _67; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _68; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _73: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 9 {
                        debug kind => _73; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 10 {
                    debug left_val => _88; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _89; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _94: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 11 {
                        debug kind => _94; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _1 = String::new() -> bb1;       // scope 0 at ui/stdlib-unit-tests/istr.rs:30:17: 30:30
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:30:17: 30:28
                                         // + literal: Const { ty: fn() -> String {String::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &mut _1;                    // scope 1 at ui/stdlib-unit-tests/istr.rs:31:5: 31:20
        _5 = const "a";                  // scope 1 at ui/stdlib-unit-tests/istr.rs:31:16: 31:19
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:31:16: 31:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 1 at ui/stdlib-unit-tests/istr.rs:31:16: 31:19
        _2 = String::push_str(move _3, move _4) -> [return: bb2, unwind: bb31]; // scope 1 at ui/stdlib-unit-tests/istr.rs:31:5: 31:20
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:31:7: 31:15
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut String, &'b str) {String::push_str}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _106 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(test_append, [], Some(promoted[4])) }
        _8 = _106;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _6 = (move _7, move _8);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_6.0: &std::string::String); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_6.1: &&str);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = _10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = <String as PartialEq<&str>>::eq(move _13, move _14) -> [return: bb3, unwind: bb31]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = Not(move _12);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb5, otherwise: bb4]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<String, &str>(move _17, move _18, move _20, move _22) -> bb31; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb5: {
        _23 = <String as From<&str>>::from(const "a") -> [return: bb6, unwind: bb31]; // scope 1 at ui/stdlib-unit-tests/istr.rs:34:17: 34:34
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:34:17: 34:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> String {<String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:34:30: 34:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _25 = &mut _23;                  // scope 4 at ui/stdlib-unit-tests/istr.rs:35:5: 35:20
        _27 = const "b";                 // scope 4 at ui/stdlib-unit-tests/istr.rs:35:16: 35:19
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:35:16: 35:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _26 = _27;                       // scope 4 at ui/stdlib-unit-tests/istr.rs:35:16: 35:19
        _24 = String::push_str(move _25, move _26) -> [return: bb7, unwind: bb30]; // scope 4 at ui/stdlib-unit-tests/istr.rs:35:5: 35:20
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:35:7: 35:15
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut String, &'b str) {String::push_str}, val: Value(<ZST>) }
    }

    bb7: {
        _105 = const _;                  // scope 4 at ui/stdlib-unit-tests/istr.rs:36:14: 36:18
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:36:14: 36:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(test_append, [], Some(promoted[3])) }
        _32 = _105;                      // scope 4 at ui/stdlib-unit-tests/istr.rs:36:14: 36:18
        _31 = _32;                       // scope 4 at ui/stdlib-unit-tests/istr.rs:36:14: 36:18
        _30 = move _31 as &[&str] (Pointer(Unsize)); // scope 4 at ui/stdlib-unit-tests/istr.rs:36:14: 36:18
        _41 = &_23;                      // scope 4 at ui/stdlib-unit-tests/istr.rs:36:20: 36:29
        _40 = <String as Clone>::clone(move _41) -> [return: bb8, unwind: bb30]; // scope 4 at ui/stdlib-unit-tests/istr.rs:36:20: 36:29
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:36:22: 36:27
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> String {<String as Clone>::clone}, val: Value(<ZST>) }
    }

    bb8: {
        _39 = &_40;                      // scope 4 at ui/stdlib-unit-tests/istr.rs:36:20: 36:29
        _38 = _39;                       // scope 4 at ui/stdlib-unit-tests/istr.rs:36:20: 36:29
        _37 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _38) -> [return: bb9, unwind: bb29]; // scope 4 at ui/stdlib-unit-tests/istr.rs:36:20: 36:29
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:36:20: 36:29
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb9: {
        _36 = [move _37];                // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _35 = &_36;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _34 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _33 = move _34 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _29 = Arguments::<'_>::new_v1(move _30, move _33) -> [return: bb10, unwind: bb29]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb10: {
        _28 = _print(move _29) -> [return: bb11, unwind: bb29]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb11: {
        drop(_40) -> [return: bb12, unwind: bb30]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb12: {
        _43 = &_23;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _104 = const _;                  // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(test_append, [], Some(promoted[2])) }
        _44 = _104;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _42 = (move _43, move _44);      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _45 = (_42.0: &std::string::String); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _46 = (_42.1: &&str);            // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _49 = _45;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _50 = _46;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _48 = <String as PartialEq<&str>>::eq(move _49, move _50) -> [return: bb13, unwind: bb30]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb13: {
        _47 = Not(move _48);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _47) -> [0: bb15, otherwise: bb14]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb14: {
        _51 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _53 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _55 = _45;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _54 = _55;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _46;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _56 = _57;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _58 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _52 = core::panicking::assert_failed::<String, &str>(move _53, move _54, move _56, move _58) -> bb30; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb15: {
        _59 = <String as From<&str>>::from(const "c") -> [return: bb16, unwind: bb30]; // scope 4 at ui/stdlib-unit-tests/istr.rs:39:17: 39:34
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:39:17: 39:29
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&str) -> String {<String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:39:30: 39:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb16: {
        _61 = &mut _59;                  // scope 7 at ui/stdlib-unit-tests/istr.rs:40:5: 40:24
        _63 = const "offee";             // scope 7 at ui/stdlib-unit-tests/istr.rs:40:16: 40:23
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:40:16: 40:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _62 = _63;                       // scope 7 at ui/stdlib-unit-tests/istr.rs:40:16: 40:23
        _60 = String::push_str(move _61, move _62) -> [return: bb17, unwind: bb28]; // scope 7 at ui/stdlib-unit-tests/istr.rs:40:5: 40:24
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:40:7: 40:15
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut String, &'b str) {String::push_str}, val: Value(<ZST>) }
    }

    bb17: {
        _65 = &_59;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _103 = const _;                  // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(test_append, [], Some(promoted[1])) }
        _66 = _103;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _64 = (move _65, move _66);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _67 = (_64.0: &std::string::String); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _68 = (_64.1: &&str);            // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _71 = _67;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _72 = _68;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _70 = <String as PartialEq<&str>>::eq(move _71, move _72) -> [return: bb18, unwind: bb28]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb18: {
        _69 = Not(move _70);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _69) -> [0: bb20, otherwise: bb19]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb19: {
        _73 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _75 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _77 = _67;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _76 = _77;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _79 = _68;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _78 = _79;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _80 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _74 = core::panicking::assert_failed::<String, &str>(move _75, move _76, move _78, move _80) -> bb28; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb20: {
        _82 = &mut _59;                  // scope 7 at ui/stdlib-unit-tests/istr.rs:43:5: 43:23
        _84 = const "&tea";              // scope 7 at ui/stdlib-unit-tests/istr.rs:43:16: 43:22
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:43:16: 43:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _83 = _84;                       // scope 7 at ui/stdlib-unit-tests/istr.rs:43:16: 43:22
        _81 = String::push_str(move _82, move _83) -> [return: bb21, unwind: bb28]; // scope 7 at ui/stdlib-unit-tests/istr.rs:43:5: 43:23
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:43:7: 43:15
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut String, &'b str) {String::push_str}, val: Value(<ZST>) }
    }

    bb21: {
        _86 = &_59;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _102 = const _;                  // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(test_append, [], Some(promoted[0])) }
        _87 = _102;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _85 = (move _86, move _87);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _88 = (_85.0: &std::string::String); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _89 = (_85.1: &&str);            // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _92 = _88;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _93 = _89;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _91 = <String as PartialEq<&str>>::eq(move _92, move _93) -> [return: bb22, unwind: bb28]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb22: {
        _90 = Not(move _91);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _90) -> [0: bb24, otherwise: bb23]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb23: {
        _94 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _96 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _98 = _88;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _97 = _98;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _100 = _89;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _99 = _100;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _101 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _95 = core::panicking::assert_failed::<String, &str>(move _96, move _97, move _99, move _101) -> bb28; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb24: {
        drop(_59) -> [return: bb25, unwind: bb30]; // scope 4 at ui/stdlib-unit-tests/istr.rs:45:1: 45:2
    }

    bb25: {
        drop(_23) -> [return: bb26, unwind: bb31]; // scope 1 at ui/stdlib-unit-tests/istr.rs:45:1: 45:2
    }

    bb26: {
        drop(_1) -> bb27;                // scope 0 at ui/stdlib-unit-tests/istr.rs:45:1: 45:2
    }

    bb27: {
        return;                          // scope 0 at ui/stdlib-unit-tests/istr.rs:45:2: 45:2
    }

    bb28 (cleanup): {
        drop(_59) -> bb30;               // scope 4 at ui/stdlib-unit-tests/istr.rs:45:1: 45:2
    }

    bb29 (cleanup): {
        drop(_40) -> bb30;               // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb30 (cleanup): {
        drop(_23) -> bb31;               // scope 1 at ui/stdlib-unit-tests/istr.rs:45:1: 45:2
    }

    bb31 (cleanup): {
        drop(_1) -> bb32;                // scope 0 at ui/stdlib-unit-tests/istr.rs:45:1: 45:2
    }

    bb32 (cleanup): {
        resume;                          // scope 0 at ui/stdlib-unit-tests/istr.rs:29:1: 45:2
    }
}

promoted[0] in test_append: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/stdlib-unit-tests/istr.rs:44:19: 44:31

    bb0: {
        _1 = const "coffee&tea";         // scope 0 at ui/stdlib-unit-tests/istr.rs:44:19: 44:31
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:44:19: 44:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in test_append: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/stdlib-unit-tests/istr.rs:41:19: 41:27

    bb0: {
        _1 = const "coffee";             // scope 0 at ui/stdlib-unit-tests/istr.rs:41:19: 41:27
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:41:19: 41:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in test_append: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/stdlib-unit-tests/istr.rs:37:19: 37:23

    bb0: {
        _1 = const "ab";                 // scope 0 at ui/stdlib-unit-tests/istr.rs:37:19: 37:23
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:37:19: 37:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in test_append: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/stdlib-unit-tests/istr.rs:36:14: 36:18
    let mut _1: [&str; 2];               // in scope 0 at ui/stdlib-unit-tests/istr.rs:36:14: 36:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/stdlib-unit-tests/istr.rs:36:14: 36:18
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:36:14: 36:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:36:14: 36:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/stdlib-unit-tests/istr.rs:36:14: 36:18
        return;                          // scope 0 at ui/stdlib-unit-tests/istr.rs:36:14: 36:18
    }
}

promoted[4] in test_append: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/stdlib-unit-tests/istr.rs:32:19: 32:22

    bb0: {
        _1 = const "a";                  // scope 0 at ui/stdlib-unit-tests/istr.rs:32:19: 32:22
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:32:19: 32:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/stdlib-unit-tests/istr.rs:47:15: 47:15
    let _1: ();                          // in scope 0 at ui/stdlib-unit-tests/istr.rs:48:5: 48:24
    let _2: ();                          // in scope 0 at ui/stdlib-unit-tests/istr.rs:49:5: 49:20
    let _3: ();                          // in scope 0 at ui/stdlib-unit-tests/istr.rs:50:5: 50:23
    let _4: ();                          // in scope 0 at ui/stdlib-unit-tests/istr.rs:51:5: 51:20
    let _5: ();                          // in scope 0 at ui/stdlib-unit-tests/istr.rs:52:5: 52:18

    bb0: {
        _1 = test_stack_assign() -> bb1; // scope 0 at ui/stdlib-unit-tests/istr.rs:48:5: 48:24
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:48:5: 48:22
                                         // + literal: Const { ty: fn() {test_stack_assign}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = test_heap_lit() -> bb2;     // scope 0 at ui/stdlib-unit-tests/istr.rs:49:5: 49:20
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:49:5: 49:18
                                         // + literal: Const { ty: fn() {test_heap_lit}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = test_heap_assign() -> bb3;  // scope 0 at ui/stdlib-unit-tests/istr.rs:50:5: 50:23
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:50:5: 50:21
                                         // + literal: Const { ty: fn() {test_heap_assign}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = test_heap_log() -> bb4;     // scope 0 at ui/stdlib-unit-tests/istr.rs:51:5: 51:20
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:51:5: 51:18
                                         // + literal: Const { ty: fn() {test_heap_log}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = test_append() -> bb5;       // scope 0 at ui/stdlib-unit-tests/istr.rs:52:5: 52:18
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/istr.rs:52:5: 52:16
                                         // + literal: Const { ty: fn() {test_append}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/stdlib-unit-tests/istr.rs:53:2: 53:2
    }
}
