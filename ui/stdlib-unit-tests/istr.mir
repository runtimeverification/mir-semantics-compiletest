// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_stack_assign() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let _2: &str;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::string::String;
    let _11: std::string::String;
    let mut _12: &std::string::String;
    let _14: &str;
    let mut _15: (&std::string::String, &std::string::String);
    let mut _16: &std::string::String;
    let mut _17: &std::string::String;
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let _26: &str;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: &std::string::String;
    let mut _30: &std::string::String;
    let mut _31: !;
    scope 1 {
        debug s => _1;
        let _13: std::string::String;
        let mut _32: &[&str; 2];
        scope 2 {
            debug t => _13;
            let _18: &std::string::String;
            let _19: &std::string::String;
            let _25: std::string::String;
            scope 3 {
                debug left_val => _18;
                debug right_val => _19;
                let _22: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _22;
                }
            }
            scope 5 {
                debug u => _25;
            }
        }
    }

    bb0: {
        _2 = const "a";
        _1 = <str as ToString>::to_string(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _32 = const _;
        _5 = _32 as &[&str] (Pointer(Unsize));
        _12 = &_1;
        _11 = <String as Clone>::clone(move _12) -> [return: bb2, unwind: bb21];
    }

    bb2: {
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<String>(_10) -> [return: bb3, unwind: bb20];
    }

    bb3: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb4, unwind: bb20];
    }

    bb4: {
        _3 = _print(move _4) -> [return: bb5, unwind: bb20];
    }

    bb5: {
        drop(_11) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        _14 = const "a";
        _13 = <str as ToString>::to_string(_14) -> [return: bb7, unwind: bb21];
    }

    bb7: {
        _16 = &_1;
        _17 = &_13;
        _15 = (move _16, move _17);
        _18 = (_15.0: &std::string::String);
        _19 = (_15.1: &std::string::String);
        _21 = <String as PartialEq>::eq(_18, _19) -> [return: bb8, unwind: bb19];
    }

    bb8: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<String, String>(move _22, _18, _19, move _24) -> bb19;
    }

    bb10: {
        _26 = const "b";
        _25 = <str as ToString>::to_string(_26) -> [return: bb11, unwind: bb19];
    }

    bb11: {
        _29 = &_1;
        _30 = &_25;
        _28 = <String as PartialEq>::ne(move _29, move _30) -> [return: bb12, unwind: bb18];
    }

    bb12: {
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _31 = core::panicking::panic(const "assertion failed: (s != u)") -> bb18;
    }

    bb14: {
        drop(_25) -> [return: bb15, unwind: bb19];
    }

    bb15: {
        drop(_13) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        drop(_1) -> [return: bb17, unwind continue];
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop(_25) -> [return: bb19, unwind terminate];
    }

    bb19 (cleanup): {
        drop(_13) -> [return: bb21, unwind terminate];
    }

    bb20 (cleanup): {
        drop(_11) -> [return: bb21, unwind terminate];
    }

    bb21 (cleanup): {
        drop(_1) -> [return: bb22, unwind terminate];
    }

    bb22 (cleanup): {
        resume;
    }
}

promoted[0] in test_stack_assign: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn test_heap_lit() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let _2: &str;

    bb0: {
        _2 = const "a big string";
        _1 = <str as ToString>::to_string(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn test_heap_assign() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let _2: &str;
    let _4: &str;
    let mut _5: (&std::string::String, &std::string::String);
    let mut _6: &std::string::String;
    let mut _7: &std::string::String;
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let _16: &str;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: &std::string::String;
    let mut _20: &std::string::String;
    let mut _21: !;
    scope 1 {
        debug s => _1;
        let _3: std::string::String;
        scope 2 {
            debug t => _3;
            let _8: &std::string::String;
            let _9: &std::string::String;
            let _15: std::string::String;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _12: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _12;
                }
            }
            scope 5 {
                debug u => _15;
            }
        }
    }

    bb0: {
        _2 = const "a big ol' string";
        _1 = <str as ToString>::to_string(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = const "a big ol' string";
        _3 = <str as ToString>::to_string(_4) -> [return: bb2, unwind: bb15];
    }

    bb2: {
        _6 = &_1;
        _7 = &_3;
        _5 = (move _6, move _7);
        _8 = (_5.0: &std::string::String);
        _9 = (_5.1: &std::string::String);
        _11 = <String as PartialEq>::eq(_8, _9) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<String, String>(move _12, _8, _9, move _14) -> bb14;
    }

    bb5: {
        _16 = const "a bad ol' string";
        _15 = <str as ToString>::to_string(_16) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        _19 = &_1;
        _20 = &_15;
        _18 = <String as PartialEq>::ne(move _19, move _20) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _21 = core::panicking::panic(const "assertion failed: (s != u)") -> bb13;
    }

    bb9: {
        drop(_15) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        drop(_3) -> [return: bb11, unwind: bb15];
    }

    bb11: {
        drop(_1) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_15) -> [return: bb14, unwind terminate];
    }

    bb14 (cleanup): {
        drop(_3) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        drop(_1) -> [return: bb16, unwind terminate];
    }

    bb16 (cleanup): {
        resume;
    }
}

fn test_heap_log() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let _2: &str;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::string::String;
    scope 1 {
        debug s => _1;
        let mut _11: &[&str; 2];
    }

    bb0: {
        _2 = const "a big ol' string";
        _1 = <str as ToString>::to_string(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _11 = const _;
        _5 = _11 as &[&str] (Pointer(Unsize));
        _10 = &_1;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<String>(_10) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _3 = _print(move _4) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_1) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in test_heap_log: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn test_append() -> () {
    let mut _0: ();
    let mut _1: std::string::String;
    let _2: ();
    let mut _3: &mut std::string::String;
    let _4: &str;
    let mut _5: (&std::string::String, &&str);
    let mut _6: &std::string::String;
    let mut _9: bool;
    let mut _10: bool;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let _15: ();
    let mut _16: &mut std::string::String;
    let _17: &str;
    let _18: ();
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let mut _21: &[core::fmt::rt::Argument<'_>];
    let _22: &[core::fmt::rt::Argument<'_>; 1];
    let _23: [core::fmt::rt::Argument<'_>; 1];
    let mut _24: core::fmt::rt::Argument<'_>;
    let _25: &std::string::String;
    let _26: std::string::String;
    let mut _27: &std::string::String;
    let mut _28: (&std::string::String, &&str);
    let mut _29: &std::string::String;
    let mut _32: bool;
    let mut _33: bool;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let _38: ();
    let mut _39: &mut std::string::String;
    let _40: &str;
    let mut _41: (&std::string::String, &&str);
    let mut _42: &std::string::String;
    let mut _45: bool;
    let mut _46: bool;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let _50: ();
    let mut _51: &mut std::string::String;
    let _52: &str;
    let mut _53: (&std::string::String, &&str);
    let mut _54: &std::string::String;
    let mut _57: bool;
    let mut _58: bool;
    let _60: !;
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug s => _1;
        let _7: &std::string::String;
        let _8: &&str;
        let mut _14: std::string::String;
        let mut _66: &&str;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _11: core::panicking::AssertKind;
            scope 3 {
                debug kind => _11;
            }
        }
        scope 4 {
            debug s => _14;
            let _30: &std::string::String;
            let _31: &&str;
            let mut _37: std::string::String;
            let mut _64: &&str;
            let mut _65: &[&str; 2];
            scope 5 {
                debug left_val => _30;
                debug right_val => _31;
                let _34: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _34;
                }
            }
            scope 7 {
                debug s => _37;
                let _43: &std::string::String;
                let _44: &&str;
                let _55: &std::string::String;
                let _56: &&str;
                let mut _62: &&str;
                let mut _63: &&str;
                scope 8 {
                    debug left_val => _43;
                    debug right_val => _44;
                    let _47: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _47;
                    }
                }
                scope 10 {
                    debug left_val => _55;
                    debug right_val => _56;
                    let _59: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _59;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = String::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &mut _1;
        _4 = const "a";
        _2 = String::push_str(move _3, _4) -> [return: bb2, unwind: bb31];
    }

    bb2: {
        _6 = &_1;
        _66 = const _;
        _5 = (move _6, _66);
        _7 = (_5.0: &std::string::String);
        _8 = (_5.1: &&str);
        _10 = <String as PartialEq<&str>>::eq(_7, _8) -> [return: bb3, unwind: bb31];
    }

    bb3: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<String, &str>(move _11, _7, _8, move _13) -> bb31;
    }

    bb5: {
        _14 = <String as From<&str>>::from(const "a") -> [return: bb6, unwind: bb31];
    }

    bb6: {
        _16 = &mut _14;
        _17 = const "b";
        _15 = String::push_str(move _16, _17) -> [return: bb7, unwind: bb30];
    }

    bb7: {
        _65 = const _;
        _20 = _65 as &[&str] (Pointer(Unsize));
        _27 = &_14;
        _26 = <String as Clone>::clone(move _27) -> [return: bb8, unwind: bb30];
    }

    bb8: {
        _25 = &_26;
        _24 = core::fmt::rt::Argument::<'_>::new_display::<String>(_25) -> [return: bb9, unwind: bb29];
    }

    bb9: {
        _23 = [move _24];
        _22 = &_23;
        _21 = _22 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _19 = Arguments::<'_>::new_v1(move _20, move _21) -> [return: bb10, unwind: bb29];
    }

    bb10: {
        _18 = _print(move _19) -> [return: bb11, unwind: bb29];
    }

    bb11: {
        drop(_26) -> [return: bb12, unwind: bb30];
    }

    bb12: {
        _29 = &_14;
        _64 = const _;
        _28 = (move _29, _64);
        _30 = (_28.0: &std::string::String);
        _31 = (_28.1: &&str);
        _33 = <String as PartialEq<&str>>::eq(_30, _31) -> [return: bb13, unwind: bb30];
    }

    bb13: {
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<String, &str>(move _34, _30, _31, move _36) -> bb30;
    }

    bb15: {
        _37 = <String as From<&str>>::from(const "c") -> [return: bb16, unwind: bb30];
    }

    bb16: {
        _39 = &mut _37;
        _40 = const "offee";
        _38 = String::push_str(move _39, _40) -> [return: bb17, unwind: bb28];
    }

    bb17: {
        _42 = &_37;
        _63 = const _;
        _41 = (move _42, _63);
        _43 = (_41.0: &std::string::String);
        _44 = (_41.1: &&str);
        _46 = <String as PartialEq<&str>>::eq(_43, _44) -> [return: bb18, unwind: bb28];
    }

    bb18: {
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<String, &str>(move _47, _43, _44, move _49) -> bb28;
    }

    bb20: {
        _51 = &mut _37;
        _52 = const "&tea";
        _50 = String::push_str(move _51, _52) -> [return: bb21, unwind: bb28];
    }

    bb21: {
        _54 = &_37;
        _62 = const _;
        _53 = (move _54, _62);
        _55 = (_53.0: &std::string::String);
        _56 = (_53.1: &&str);
        _58 = <String as PartialEq<&str>>::eq(_55, _56) -> [return: bb22, unwind: bb28];
    }

    bb22: {
        _57 = Not(move _58);
        switchInt(move _57) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _59 = core::panicking::AssertKind::Eq;
        _61 = Option::<Arguments<'_>>::None;
        _60 = core::panicking::assert_failed::<String, &str>(move _59, _55, _56, move _61) -> bb28;
    }

    bb24: {
        drop(_37) -> [return: bb25, unwind: bb30];
    }

    bb25: {
        drop(_14) -> [return: bb26, unwind: bb31];
    }

    bb26: {
        drop(_1) -> [return: bb27, unwind continue];
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_37) -> [return: bb30, unwind terminate];
    }

    bb29 (cleanup): {
        drop(_26) -> [return: bb30, unwind terminate];
    }

    bb30 (cleanup): {
        drop(_14) -> [return: bb31, unwind terminate];
    }

    bb31 (cleanup): {
        drop(_1) -> [return: bb32, unwind terminate];
    }

    bb32 (cleanup): {
        resume;
    }
}

promoted[0] in test_append: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "coffee&tea";
        _0 = &_1;
        return;
    }
}

promoted[1] in test_append: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "coffee";
        _0 = &_1;
        return;
    }
}

promoted[2] in test_append: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "ab";
        _0 = &_1;
        return;
    }
}

promoted[3] in test_append: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in test_append: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "a";
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();
    let _5: ();

    bb0: {
        _1 = test_stack_assign() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = test_heap_lit() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = test_heap_assign() -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = test_heap_log() -> [return: bb4, unwind continue];
    }

    bb4: {
        _5 = test_append() -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}
