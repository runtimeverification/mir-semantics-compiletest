// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&&str, &&str);
    let mut _2: &&str;
    let _3: &str;
    let _4: &&str;
    let _5: &&str;
    let mut _6: bool;
    let mut _7: bool;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&&str, &&str);
    let mut _12: &&str;
    let _13: &str;
    let _14: &&str;
    let _15: &&str;
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&&str, &&str);
    let mut _22: &&str;
    let _23: &str;
    let _24: &&str;
    let _25: &&str;
    let mut _26: bool;
    let mut _27: bool;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&&str, &&str);
    let mut _32: &&str;
    let _33: &str;
    let _34: &&str;
    let _35: &&str;
    let mut _36: bool;
    let mut _37: bool;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&&str, &&str);
    let mut _42: &&str;
    let _43: &str;
    let _44: &&str;
    let _45: &&str;
    let mut _46: bool;
    let mut _47: bool;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: (&&str, &&str);
    let mut _52: &&str;
    let _53: &str;
    let _54: &&str;
    let _55: &&str;
    let mut _56: bool;
    let mut _57: bool;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&&str, &&str);
    let mut _62: &&str;
    let _63: &str;
    let _64: &&str;
    let _65: &&str;
    let mut _66: bool;
    let mut _67: bool;
    let _69: !;
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _71: (&&str, &&str);
    let mut _72: &&str;
    let _73: &str;
    let _74: &&str;
    let _75: &&str;
    let mut _76: bool;
    let mut _77: bool;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _81: (&&str, &&str);
    let mut _82: &&str;
    let _83: &str;
    let mut _84: impl std::fmt::Debug;
    let _85: &&str;
    let _86: &&str;
    let mut _87: bool;
    let mut _88: bool;
    let _90: !;
    let mut _91: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _92: (&&str, &&str);
    let mut _93: &&str;
    let _94: &str;
    let _95: &&str;
    let _96: &&str;
    let mut _97: bool;
    let mut _98: bool;
    let _100: !;
    let mut _101: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _102: (&&str, &&str);
    let mut _103: &&str;
    let _104: &str;
    let _105: &&str;
    let _106: &&str;
    let mut _107: bool;
    let mut _108: bool;
    let _110: !;
    let mut _111: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _112: (&&str, &&str);
    let mut _113: &&str;
    let _114: &str;
    let _115: &&str;
    let _116: &&str;
    let mut _117: bool;
    let mut _118: bool;
    let _120: !;
    let mut _121: std::option::Option<std::fmt::Arguments<'_>>;
    let _122: ();
    let mut _123: &&str;
    let mut _124: &&str;
    let mut _125: &&str;
    let mut _126: &&str;
    let mut _127: &&str;
    let mut _128: &&str;
    let mut _129: &&str;
    let mut _130: &&str;
    let mut _131: &&str;
    let mut _132: &&str;
    let mut _133: &&str;
    let mut _134: &&str;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _14;
        debug right_val => _15;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug left_val => _24;
        debug right_val => _25;
        let _28: core::panicking::AssertKind;
        scope 6 {
            debug kind => _28;
        }
    }
    scope 7 {
        debug left_val => _34;
        debug right_val => _35;
        let _38: core::panicking::AssertKind;
        scope 8 {
            debug kind => _38;
        }
    }
    scope 9 {
        debug left_val => _44;
        debug right_val => _45;
        let _48: core::panicking::AssertKind;
        scope 10 {
            debug kind => _48;
        }
    }
    scope 11 {
        debug left_val => _54;
        debug right_val => _55;
        let _58: core::panicking::AssertKind;
        scope 12 {
            debug kind => _58;
        }
    }
    scope 13 {
        debug left_val => _64;
        debug right_val => _65;
        let _68: core::panicking::AssertKind;
        scope 14 {
            debug kind => _68;
        }
    }
    scope 15 {
        debug left_val => _74;
        debug right_val => _75;
        let _78: core::panicking::AssertKind;
        scope 16 {
            debug kind => _78;
        }
    }
    scope 17 {
        debug left_val => _85;
        debug right_val => _86;
        let _89: core::panicking::AssertKind;
        scope 18 {
            debug kind => _89;
        }
    }
    scope 19 {
        debug left_val => _95;
        debug right_val => _96;
        let _99: core::panicking::AssertKind;
        scope 20 {
            debug kind => _99;
        }
    }
    scope 21 {
        debug left_val => _105;
        debug right_val => _106;
        let _109: core::panicking::AssertKind;
        scope 22 {
            debug kind => _109;
        }
    }
    scope 23 {
        debug left_val => _115;
        debug right_val => _116;
        let _119: core::panicking::AssertKind;
        scope 24 {
            debug kind => _119;
        }
    }

    bb0: {
        _3 = std::any::type_name::<[u8]>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _134 = const _;
        _1 = (move _2, _134);
        _4 = (_1.0: &&str);
        _5 = (_1.1: &&str);
        _7 = <&str as PartialEq>::eq(_4, _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<&str, &str>(move _8, _4, _5, move _10) -> unwind continue;
    }

    bb4: {
        _13 = std::any::type_name::<str>() -> [return: bb5, unwind continue];
    }

    bb5: {
        _12 = &_13;
        _133 = const _;
        _11 = (move _12, _133);
        _14 = (_11.0: &&str);
        _15 = (_11.1: &&str);
        _17 = <&str as PartialEq>::eq(_14, _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<&str, &str>(move _18, _14, _15, move _20) -> unwind continue;
    }

    bb8: {
        _23 = std::any::type_name::<dyn Send>() -> [return: bb9, unwind continue];
    }

    bb9: {
        _22 = &_23;
        _132 = const _;
        _21 = (move _22, _132);
        _24 = (_21.0: &&str);
        _25 = (_21.1: &&str);
        _27 = <&str as PartialEq>::eq(_24, _25) -> [return: bb10, unwind continue];
    }

    bb10: {
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<&str, &str>(move _28, _24, _25, move _30) -> unwind continue;
    }

    bb12: {
        _33 = std::any::type_name::<NT>() -> [return: bb13, unwind continue];
    }

    bb13: {
        _32 = &_33;
        _131 = const _;
        _31 = (move _32, _131);
        _34 = (_31.0: &&str);
        _35 = (_31.1: &&str);
        _37 = <&str as PartialEq>::eq(_34, _35) -> [return: bb14, unwind continue];
    }

    bb14: {
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<&str, &str>(move _38, _34, _35, move _40) -> unwind continue;
    }

    bb16: {
        _43 = std::any::type_name::<DST>() -> [return: bb17, unwind continue];
    }

    bb17: {
        _42 = &_43;
        _130 = const _;
        _41 = (move _42, _130);
        _44 = (_41.0: &&str);
        _45 = (_41.1: &&str);
        _47 = <&str as PartialEq>::eq(_44, _45) -> [return: bb18, unwind continue];
    }

    bb18: {
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<&str, &str>(move _48, _44, _45, move _50) -> unwind continue;
    }

    bb20: {
        _53 = std::any::type_name::<&i32>() -> [return: bb21, unwind continue];
    }

    bb21: {
        _52 = &_53;
        _129 = const _;
        _51 = (move _52, _129);
        _54 = (_51.0: &&str);
        _55 = (_51.1: &&str);
        _57 = <&str as PartialEq>::eq(_54, _55) -> [return: bb22, unwind continue];
    }

    bb22: {
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<&str, &str>(move _58, _54, _55, move _60) -> unwind continue;
    }

    bb24: {
        _63 = std::any::type_name::<&i32>() -> [return: bb25, unwind continue];
    }

    bb25: {
        _62 = &_63;
        _128 = const _;
        _61 = (move _62, _128);
        _64 = (_61.0: &&str);
        _65 = (_61.1: &&str);
        _67 = <&str as PartialEq>::eq(_64, _65) -> [return: bb26, unwind continue];
    }

    bb26: {
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _68 = core::panicking::AssertKind::Eq;
        _70 = Option::<Arguments<'_>>::None;
        _69 = core::panicking::assert_failed::<&str, &str>(move _68, _64, _65, move _70) -> unwind continue;
    }

    bb28: {
        _73 = std::any::type_name::<(i32, u32)>() -> [return: bb29, unwind continue];
    }

    bb29: {
        _72 = &_73;
        _127 = const _;
        _71 = (move _72, _127);
        _74 = (_71.0: &&str);
        _75 = (_71.1: &&str);
        _77 = <&str as PartialEq>::eq(_74, _75) -> [return: bb30, unwind continue];
    }

    bb30: {
        _76 = Not(move _77);
        switchInt(move _76) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<&str, &str>(move _78, _74, _75, move _80) -> unwind continue;
    }

    bb32: {
        _84 = foo() -> [return: bb33, unwind continue];
    }

    bb33: {
        _83 = type_name_of_val::<impl Debug>(const ZeroSized: impl Debug) -> [return: bb34, unwind continue];
    }

    bb34: {
        _82 = &_83;
        _126 = const _;
        _81 = (move _82, _126);
        _85 = (_81.0: &&str);
        _86 = (_81.1: &&str);
        _88 = <&str as PartialEq>::eq(_85, _86) -> [return: bb35, unwind continue];
    }

    bb35: {
        _87 = Not(move _88);
        switchInt(move _87) -> [0: bb37, otherwise: bb36];
    }

    bb36: {
        _89 = core::panicking::AssertKind::Eq;
        _91 = Option::<Arguments<'_>>::None;
        _90 = core::panicking::assert_failed::<&str, &str>(move _89, _85, _86, move _91) -> unwind continue;
    }

    bb37: {
        _94 = type_name_of_val::<fn() -> Foo {Foo::new}>(Foo::new) -> [return: bb38, unwind continue];
    }

    bb38: {
        _93 = &_94;
        _125 = const _;
        _92 = (move _93, _125);
        _95 = (_92.0: &&str);
        _96 = (_92.1: &&str);
        _98 = <&str as PartialEq>::eq(_95, _96) -> [return: bb39, unwind continue];
    }

    bb39: {
        _97 = Not(move _98);
        switchInt(move _97) -> [0: bb41, otherwise: bb40];
    }

    bb40: {
        _99 = core::panicking::AssertKind::Eq;
        _101 = Option::<Arguments<'_>>::None;
        _100 = core::panicking::assert_failed::<&str, &str>(move _99, _95, _96, move _101) -> unwind continue;
    }

    bb41: {
        _104 = type_name_of_val::<for<'a, 'b, 'c> fn(&'a Foo, &'b mut Formatter<'c>) -> Result<(), std::fmt::Error> {<Foo as Debug>::fmt}>(<Foo as Debug>::fmt) -> [return: bb42, unwind continue];
    }

    bb42: {
        _103 = &_104;
        _124 = const _;
        _102 = (move _103, _124);
        _105 = (_102.0: &&str);
        _106 = (_102.1: &&str);
        _108 = <&str as PartialEq>::eq(_105, _106) -> [return: bb43, unwind continue];
    }

    bb43: {
        _107 = Not(move _108);
        switchInt(move _107) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _109 = core::panicking::AssertKind::Eq;
        _111 = Option::<Arguments<'_>>::None;
        _110 = core::panicking::assert_failed::<&str, &str>(move _109, _105, _106, move _111) -> unwind continue;
    }

    bb45: {
        _114 = type_name_of_val::<[closure@ui/stdlib-unit-tests/issue-21058.rs:34:17: 34:19]>(const ZeroSized: [closure@ui/stdlib-unit-tests/issue-21058.rs:34:17: 34:19]) -> [return: bb46, unwind continue];
    }

    bb46: {
        _113 = &_114;
        _123 = const _;
        _112 = (move _113, _123);
        _115 = (_112.0: &&str);
        _116 = (_112.1: &&str);
        _118 = <&str as PartialEq>::eq(_115, _116) -> [return: bb47, unwind continue];
    }

    bb47: {
        _117 = Not(move _118);
        switchInt(move _117) -> [0: bb49, otherwise: bb48];
    }

    bb48: {
        _119 = core::panicking::AssertKind::Eq;
        _121 = Option::<Arguments<'_>>::None;
        _120 = core::panicking::assert_failed::<&str, &str>(move _119, _115, _116, move _121) -> unwind continue;
    }

    bb49: {
        _122 = bar::<i32>() -> [return: bb50, unwind continue];
    }

    bb50: {
        return;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "issue_21058::main::{{closure}}";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "<issue_21058::Foo as core::fmt::Debug>::fmt";
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "issue_21058::Foo::new";
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "issue_21058::Foo";
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "(i32, u32)";
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "&i32";
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "&i32";
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "issue_21058::DST";
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "issue_21058::NT";
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "dyn core::marker::Send";
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "str";
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "[u8]";
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/stdlib-unit-tests/issue-21058.rs:34:17: 34:19]) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn bar() -> () {
    let mut _0: ();
    let mut _1: (&&str, &&str);
    let mut _2: &&str;
    let _3: &str;
    let _4: &&str;
    let _5: &&str;
    let mut _6: bool;
    let mut _7: bool;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&&str, &&str);
    let mut _12: &&str;
    let _13: &str;
    let _14: &&str;
    let _15: &&str;
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: &&str;
    let mut _22: &&str;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _14;
        debug right_val => _15;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }

    bb0: {
        _3 = std::any::type_name::<<T as Trait>::Assoc>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _22 = const _;
        _1 = (move _2, _22);
        _4 = (_1.0: &&str);
        _5 = (_1.1: &&str);
        _7 = <&str as PartialEq>::eq(_4, _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<&str, &str>(move _8, _4, _5, move _10) -> unwind continue;
    }

    bb4: {
        _13 = std::any::type_name::<T>() -> [return: bb5, unwind continue];
    }

    bb5: {
        _12 = &_13;
        _21 = const _;
        _11 = (move _12, _21);
        _14 = (_11.0: &&str);
        _15 = (_11.1: &&str);
        _17 = <&str as PartialEq>::eq(_14, _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<&str, &str>(move _18, _14, _15, move _20) -> unwind continue;
    }

    bb8: {
        return;
    }
}

promoted[0] in bar: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "i32";
        _0 = &_1;
        return;
    }
}

promoted[1] in bar: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "alloc::string::String";
        _0 = &_1;
        return;
    }
}

fn type_name_of_val(_1: T) -> &str {
    let mut _0: &str;

    bb0: {
        _0 = std::any::type_name::<T>() -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn <impl at ui/stdlib-unit-tests/issue-21058.rs:55:10: 55:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Foo";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/stdlib-unit-tests/issue-21058.rs:58:1: 58:9>::new() -> Foo {
    let mut _0: Foo;

    bb0: {
        return;
    }
}

fn foo() -> impl Debug {
    let mut _0: impl std::fmt::Debug;

    bb0: {
        return;
    }
}

fn NT(_1: str) -> NT {
    let mut _0: NT;

    bb0: {
        _0 = NT(move _1);
        return;
    }
}

// MIR FOR CTFE
fn NT(_1: str) -> NT {
    let mut _0: NT;

    bb0: {
        _0 = NT(move _1);
        return;
    }
}
