// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:10: 5:15>::clone(_1: &foo) -> foo {
    debug self => _1;                    // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:10: 5:15
    let mut _0: foo;                     // return place in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:10: 5:15
    let mut _2: isize;                   // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:10: 5:15
    let _3: &usize;                      // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:7:5: 7:10
    let mut _4: usize;                   // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:7:5: 7:10
    let mut _5: &usize;                  // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:7:5: 7:10
    let _6: &std::string::String;        // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:8:5: 8:11
    let mut _7: std::string::String;     // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:8:5: 8:11
    let mut _8: &std::string::String;    // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:8:5: 8:11
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:7:5: 7:10
    }
    scope 2 {
        debug __self_0 => _6;            // in scope 2 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:8:5: 8:11
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:10: 5:15
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:10: 5:15
    }

    bb1: {
        _6 = &(((*_1) as b).0: std::string::String); // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:8:5: 8:11
        _8 = _6;                         // scope 2 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:8:5: 8:11
        _7 = <String as Clone>::clone(move _8) -> bb4; // scope 2 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:8:5: 8:11
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:8:5: 8:11
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> String {<String as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:10: 5:15
    }

    bb3: {
        _3 = &(((*_1) as a).0: usize);   // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:7:5: 7:10
        _5 = _3;                         // scope 1 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:7:5: 7:10
        _4 = (*_5);                      // scope 1 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:7:5: 7:10
        _0 = foo::a(move _4);            // scope 1 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:10: 5:15
        goto -> bb5;                     // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:14: 5:15
    }

    bb4: {
        _0 = foo::b(move _7);            // scope 2 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:10: 5:15
        goto -> bb5;                     // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:14: 5:15
    }

    bb5: {
        return;                          // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:15: 5:15
    }
}

fn <impl at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22>::fmt(_1: &foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
    debug f => _2;                       // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
    let mut _3: isize;                   // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
    let _4: &usize;                      // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:7:5: 7:10
    let mut _5: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
    let mut _6: &str;                    // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
    let _7: &str;                        // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:7:5: 7:10
    let mut _9: &&usize;                 // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:7:5: 7:10
    let _10: &&usize;                    // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:7:5: 7:10
    let _11: &std::string::String;       // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:8:5: 8:11
    let mut _12: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
    let mut _13: &str;                   // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
    let _14: &str;                       // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
    let mut _15: &dyn std::fmt::Debug;   // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:8:5: 8:11
    let mut _16: &&std::string::String;  // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:8:5: 8:11
    let _17: &&std::string::String;      // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:8:5: 8:11
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:7:5: 7:10
    }
    scope 2 {
        debug __self_0 => _11;           // in scope 2 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:8:5: 8:11
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
    }

    bb1: {
        _11 = &(((*_1) as b).0: std::string::String); // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:8:5: 8:11
        _12 = &mut (*_2);                // scope 2 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
        _14 = const "b";                 // scope 2 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = _14;                       // scope 2 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
        _17 = &_11;                      // scope 2 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:8:5: 8:11
        _16 = _17;                       // scope 2 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:8:5: 8:11
        _15 = move _16 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:8:5: 8:11
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _12, move _13, move _15) -> bb4; // scope 2 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
    }

    bb3: {
        _4 = &(((*_1) as a).0: usize);   // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:7:5: 7:10
        _5 = &mut (*_2);                 // scope 1 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
        _7 = const "a";                  // scope 1 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 1 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
        _10 = &_4;                       // scope 1 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:7:5: 7:10
        _9 = _10;                        // scope 1 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:7:5: 7:10
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:7:5: 7:10
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _5, move _6, move _8) -> bb4; // scope 1 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:17: 5:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:5:22: 5:22
    }
}

fn check_log(_1: String, _2: T) -> () {
    debug exp => _1;                     // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:11:34: 11:37
    debug v => _2;                       // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:11:47: 11:48
    let mut _0: ();                      // return place in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:11:53: 11:53
    let mut _3: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _5: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _6: std::string::String;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let _7: std::string::String;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _8: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _9: &[&str];                 // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:12:29: 12:35
    let mut _10: &[&str; 1];             // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:12:29: 12:35
    let _11: &[&str; 1];                 // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:12:29: 12:35
    let mut _12: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _13: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _14: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _15: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _16: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:12:37: 12:38
    let mut _17: &T;                     // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:12:37: 12:38
    let _18: &T;                         // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:12:37: 12:38
    let _19: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _20: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _21: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _22: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _23: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _24: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _26: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _27: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _28: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _29: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _30: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _31: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _33: &[&str; 1];             // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:12:29: 12:35
    scope 1 {
        debug res => _7;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }
    scope 2 {
        debug left_val => _19;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _20;          // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _25: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 3 {
            debug kind => _25;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _4 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _33 = const _;                   // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:12:29: 12:35
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:12:29: 12:35
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(check_log, [T], Some(promoted[0])) }
        _11 = _33;                       // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:12:29: 12:35
        _10 = _11;                       // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:12:29: 12:35
        _9 = move _10 as &[&str] (Pointer(Unsize)); // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:12:29: 12:35
        _18 = &_2;                       // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:12:37: 12:38
        _17 = _18;                       // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:12:37: 12:38
        _16 = core::fmt::ArgumentV1::<'_>::new_debug::<T>(move _17) -> [return: bb1, unwind: bb11]; // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:12:37: 12:38
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:12:37: 12:38
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b T) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _15 = [move _16];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _14 = &_15;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _13 = _14;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _12 = move _13 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _8 = Arguments::<'_>::new_v1(move _9, move _12) -> [return: bb2, unwind: bb11]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = format(move _8) -> [return: bb3, unwind: bb11]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = move _7;                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _5 = &_6;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _19 = (_3.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _20 = (_3.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _23 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _24 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _22 = <String as PartialEq>::eq(move _23, move _24) -> [return: bb4, unwind: bb10]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = Not(move _22);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _21) -> [0: bb6, otherwise: bb5]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _25 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _27 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _29 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _29;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _31 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _30 = _31;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _32 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _26 = core::panicking::assert_failed::<String, String>(move _27, move _28, move _30, move _32) -> bb10; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_6) -> [return: bb7, unwind: bb11]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb7: {
        drop(_2) -> [return: bb8, unwind: bb12]; // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:13:1: 13:2
    }

    bb8: {
        drop(_1) -> bb9;                 // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:13:1: 13:2
    }

    bb9: {
        return;                          // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:13:2: 13:2
    }

    bb10 (cleanup): {
        drop(_6) -> bb11;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb11 (cleanup): {
        drop(_2) -> bb12;                // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:13:1: 13:2
    }

    bb12 (cleanup): {
        drop(_1) -> bb13;                // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:13:1: 13:2
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:11:1: 13:2
    }
}

promoted[0] in check_log: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:12:29: 12:35
    let mut _1: [&str; 1];               // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:12:29: 12:35

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:12:29: 12:35
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:12:29: 12:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:12:29: 12:35
        return;                          // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:12:29: 12:35
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:15:15: 15:15
    let mut _1: std::option::Option<foo>; // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:16:9: 16:14
    let mut _2: foo;                     // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:16:22: 16:32
    let mut _4: &str;                    // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:17:15: 17:40
    let _5: &str;                        // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:17:15: 17:28
    let mut _8: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _9: &[&str];                 // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:18:23: 18:29
    let mut _10: &[&str; 1];             // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:18:23: 18:29
    let _11: &[&str; 1];                 // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:18:23: 18:29
    let mut _12: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _13: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _14: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _15: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _16: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:18:31: 18:32
    let mut _17: &std::option::Option<foo>; // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:18:31: 18:32
    let _18: &std::option::Option<foo>;  // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:18:31: 18:32
    let mut _19: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _20: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _21: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _24: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _26: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _27: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _29: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _30: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _31: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _32: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _33: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _34: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _36: ();                         // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:20:5: 20:22
    let mut _37: std::string::String;    // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:20:15: 20:18
    let mut _38: std::option::Option<foo>; // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:20:20: 20:21
    let mut _39: std::option::Option<foo>; // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:22:9: 22:13
    let mut _41: &str;                   // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:23:15: 23:33
    let _42: &str;                       // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:23:15: 23:21
    let mut _45: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _46: &[&str];                // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:24:23: 24:29
    let mut _47: &[&str; 1];             // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:24:23: 24:29
    let _48: &[&str; 1];                 // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:24:23: 24:29
    let mut _49: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _50: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _51: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _52: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _53: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:24:31: 24:32
    let mut _54: &std::option::Option<foo>; // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:24:31: 24:32
    let _55: &std::option::Option<foo>;  // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:24:31: 24:32
    let mut _56: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _57: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _58: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _61: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _62: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _63: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _64: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _66: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _67: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _68: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _69: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _70: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _71: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _73: ();                         // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:26:5: 26:22
    let mut _74: std::string::String;    // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:26:15: 26:18
    let mut _75: std::option::Option<foo>; // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:26:20: 26:21
    let mut _78: bool;                   // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:27:1: 27:2
    let mut _79: bool;                   // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:27:1: 27:2
    let mut _80: bool;                   // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:27:1: 27:2
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:16:9: 16:14
        let _3: std::string::String;     // in scope 1 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:17:9: 17:12
        scope 2 {
            debug exp => _3;             // in scope 2 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:17:9: 17:12
            let _6: std::string::String; // in scope 2 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:18:9: 18:12
            let _7: std::string::String; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
            let mut _77: &[&str; 1];     // in scope 2 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:18:23: 18:29
            scope 3 {
                debug act => _6;         // in scope 3 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:18:9: 18:12
                let _22: &std::string::String; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _23: &std::string::String; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _40: std::string::String; // in scope 3 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:23:9: 23:12
                scope 5 {
                    debug left_val => _22; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _23; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _28: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 6 {
                        debug kind => _28; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 7 {
                    debug exp => _40;    // in scope 7 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:23:9: 23:12
                    let _43: std::string::String; // in scope 7 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:24:9: 24:12
                    let _44: std::string::String; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                    let mut _76: &[&str; 1]; // in scope 7 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:24:23: 24:29
                    scope 8 {
                        debug act => _43; // in scope 8 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:24:9: 24:12
                        let _59: &std::string::String; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _60: &std::string::String; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        scope 10 {
                            debug left_val => _59; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _60; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _65: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 11 {
                                debug kind => _65; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                    }
                    scope 9 {
                        debug res => _44; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                    }
                }
            }
            scope 4 {
                debug res => _7;         // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
            }
        }
    }

    bb0: {
        _79 = const false;               // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:16:9: 16:14
        _80 = const false;               // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:16:9: 16:14
        _78 = const false;               // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:16:9: 16:14
        _2 = foo::a(const 22_usize);     // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:16:22: 16:32
        _80 = const true;                // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:16:17: 16:33
        _1 = Option::<foo>::Some(move _2); // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:16:17: 16:33
        _5 = const "Some(a(22))";        // scope 1 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:17:15: 17:28
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:17:15: 17:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 1 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:17:15: 17:40
        _3 = <str as ToString>::to_string(move _4) -> [return: bb1, unwind: bb21]; // scope 1 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:17:15: 17:40
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:17:29: 17:38
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _79 = const true;                // scope 1 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:17:39: 17:40
        _77 = const _;                   // scope 2 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:18:23: 18:29
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:18:23: 18:29
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[1])) }
        _11 = _77;                       // scope 2 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:18:23: 18:29
        _10 = _11;                       // scope 2 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:18:23: 18:29
        _9 = move _10 as &[&str] (Pointer(Unsize)); // scope 2 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:18:23: 18:29
        _18 = &_1;                       // scope 2 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:18:31: 18:32
        _17 = _18;                       // scope 2 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:18:31: 18:32
        _16 = core::fmt::ArgumentV1::<'_>::new_debug::<Option<foo>>(move _17) -> [return: bb2, unwind: bb26]; // scope 2 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:18:31: 18:32
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:18:31: 18:32
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b Option<foo>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Option<foo>>}, val: Value(<ZST>) }
    }

    bb2: {
        _15 = [move _16];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _14 = &_15;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _13 = _14;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _12 = move _13 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _8 = Arguments::<'_>::new_v1(move _9, move _12) -> [return: bb3, unwind: bb26]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = format(move _8) -> [return: bb4, unwind: bb26]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = move _7;                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _20 = &_6;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _21 = &_3;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _19 = (move _20, move _21);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _22 = (_19.0: &std::string::String); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _23 = (_19.1: &std::string::String); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _26 = _22;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _27 = _23;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _25 = <String as PartialEq>::eq(move _26, move _27) -> [return: bb5, unwind: bb20]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _24 = Not(move _25);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _24) -> [0: bb7, otherwise: bb6]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _28 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _30 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _32 = _22;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _31 = _32;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _23;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _33 = _34;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _35 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _29 = core::panicking::assert_failed::<String, String>(move _30, move _31, move _33, move _35) -> bb20; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb7: {
        _79 = const false;               // scope 3 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:20:15: 20:18
        _37 = move _3;                   // scope 3 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:20:15: 20:18
        _80 = const false;               // scope 3 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:20:20: 20:21
        _38 = move _1;                   // scope 3 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:20:20: 20:21
        _36 = check_log::<Option<foo>>(move _37, move _38) -> [return: bb8, unwind: bb20]; // scope 3 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:20:5: 20:22
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:20:5: 20:14
                                         // + literal: Const { ty: fn(String, Option<foo>) {check_log::<Option<foo>>}, val: Value(<ZST>) }
    }

    bb8: {
        _39 = Option::<foo>::None;       // scope 3 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:22:9: 22:13
        _80 = const true;                // scope 3 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:22:5: 22:6
        _1 = move _39;                   // scope 3 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:22:5: 22:6
        _42 = const "None";              // scope 3 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:23:15: 23:21
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:23:15: 23:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _41 = _42;                       // scope 3 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:23:15: 23:33
        _40 = <str as ToString>::to_string(move _41) -> [return: bb9, unwind: bb20]; // scope 3 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:23:15: 23:33
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:23:22: 23:31
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb9: {
        _78 = const true;                // scope 3 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:23:32: 23:33
        _76 = const _;                   // scope 7 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:24:23: 24:29
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:24:23: 24:29
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[0])) }
        _48 = _76;                       // scope 7 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:24:23: 24:29
        _47 = _48;                       // scope 7 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:24:23: 24:29
        _46 = move _47 as &[&str] (Pointer(Unsize)); // scope 7 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:24:23: 24:29
        _55 = &_1;                       // scope 7 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:24:31: 24:32
        _54 = _55;                       // scope 7 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:24:31: 24:32
        _53 = core::fmt::ArgumentV1::<'_>::new_debug::<Option<foo>>(move _54) -> [return: bb10, unwind: bb24]; // scope 7 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:24:31: 24:32
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:24:31: 24:32
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b Option<foo>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Option<foo>>}, val: Value(<ZST>) }
    }

    bb10: {
        _52 = [move _53];                // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _51 = &_52;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _50 = _51;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _49 = move _50 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _45 = Arguments::<'_>::new_v1(move _46, move _49) -> [return: bb11, unwind: bb24]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb11: {
        _44 = format(move _45) -> [return: bb12, unwind: bb24]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb12: {
        _43 = move _44;                  // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _57 = &_43;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _58 = &_40;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _56 = (move _57, move _58);      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _59 = (_56.0: &std::string::String); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _60 = (_56.1: &std::string::String); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _63 = _59;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _64 = _60;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _62 = <String as PartialEq>::eq(move _63, move _64) -> [return: bb13, unwind: bb19]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb13: {
        _61 = Not(move _62);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _61) -> [0: bb15, otherwise: bb14]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb14: {
        _65 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _67 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _69 = _59;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _68 = _69;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _71 = _60;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _70 = _71;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _72 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _66 = core::panicking::assert_failed::<String, String>(move _67, move _68, move _70, move _72) -> bb19; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb15: {
        _78 = const false;               // scope 8 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:26:15: 26:18
        _74 = move _40;                  // scope 8 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:26:15: 26:18
        _80 = const false;               // scope 8 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:26:20: 26:21
        _75 = move _1;                   // scope 8 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:26:20: 26:21
        _73 = check_log::<Option<foo>>(move _74, move _75) -> [return: bb16, unwind: bb19]; // scope 8 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:26:5: 26:22
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:26:5: 26:14
                                         // + literal: Const { ty: fn(String, Option<foo>) {check_log::<Option<foo>>}, val: Value(<ZST>) }
    }

    bb16: {
        drop(_43) -> [return: bb17, unwind: bb24]; // scope 7 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:27:1: 27:2
    }

    bb17: {
        _78 = const false;               // scope 3 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:27:1: 27:2
        drop(_6) -> [return: bb18, unwind: bb26]; // scope 2 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:27:1: 27:2
    }

    bb18: {
        _79 = const false;               // scope 1 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:27:1: 27:2
        _80 = const false;               // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:27:1: 27:2
        return;                          // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:27:2: 27:2
    }

    bb19 (cleanup): {
        drop(_43) -> bb24;               // scope 7 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:27:1: 27:2
    }

    bb20 (cleanup): {
        drop(_6) -> bb26;                // scope 2 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:27:1: 27:2
    }

    bb21 (cleanup): {
        switchInt(_80) -> [0: bb22, otherwise: bb27]; // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:27:1: 27:2
    }

    bb22 (cleanup): {
        resume;                          // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:15:1: 27:2
    }

    bb23 (cleanup): {
        drop(_40) -> bb20;               // scope 3 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:27:1: 27:2
    }

    bb24 (cleanup): {
        switchInt(_78) -> [0: bb20, otherwise: bb23]; // scope 3 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:27:1: 27:2
    }

    bb25 (cleanup): {
        drop(_3) -> bb21;                // scope 1 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:27:1: 27:2
    }

    bb26 (cleanup): {
        switchInt(_79) -> [0: bb21, otherwise: bb25]; // scope 1 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:27:1: 27:2
    }

    bb27 (cleanup): {
        drop(_1) -> bb22;                // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:27:1: 27:2
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:24:23: 24:29
    let mut _1: [&str; 1];               // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:24:23: 24:29

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:24:23: 24:29
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:24:23: 24:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:24:23: 24:29
        return;                          // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:24:23: 24:29
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:18:23: 18:29
    let mut _1: [&str; 1];               // in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:18:23: 18:29

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:18:23: 18:29
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:18:23: 18:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:18:23: 18:29
        return;                          // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:18:23: 18:29
    }
}

fn foo::a(_1: usize) -> foo {
    let mut _0: foo;                     // return place in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:7:3: 7:4

    bb0: {
        _0 = foo::a(move _1);            // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:7:3: 7:4
        return;                          // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:7:3: 7:4
    }
}

// MIR FOR CTFE
fn foo::a(_1: usize) -> foo {
    let mut _0: foo;                     // return place in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:7:3: 7:4

    bb0: {
        _0 = foo::a(move _1);            // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:7:3: 7:4
        return;                          // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:7:3: 7:4
    }
}

fn foo::b(_1: String) -> foo {
    let mut _0: foo;                     // return place in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:8:3: 8:4

    bb0: {
        _0 = foo::b(move _1);            // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:8:3: 8:4
        return;                          // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:8:3: 8:4
    }
}

// MIR FOR CTFE
fn foo::b(_1: String) -> foo {
    let mut _0: foo;                     // return place in scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:8:3: 8:4

    bb0: {
        _0 = foo::b(move _1);            // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:8:3: 8:4
        return;                          // scope 0 at ui/stdlib-unit-tests/log-knows-the-names-of-variants-in-std.rs:8:3: 8:4
    }
}
