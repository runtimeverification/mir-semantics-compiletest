// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_clone(_1: T) -> () {
    debug arg => _1;                     // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:6:25: 6:28
    let mut _0: ();                      // return place in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:6:33: 6:33
    let mut _2: T;                       // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:7:13: 7:24
    let mut _3: &T;                      // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:7:13: 7:24
    scope 1 {
    }

    bb0: {
        _3 = &_1;                        // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:7:13: 7:24
        _2 = <T as Clone>::clone(move _3) -> [return: bb1, unwind: bb4]; // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:7:13: 7:24
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:7:17: 7:22
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind: bb4]; // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:7:24: 7:25
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:8:1: 8:2
    }

    bb3: {
        return;                          // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:8:2: 8:2
    }

    bb4 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:8:1: 8:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:6:1: 8:2
    }
}

fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:10:10: 10:10

    bb0: {
        return;                          // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:10:13: 10:13
    }
}

fn <impl at ui/stdlib-unit-tests/builtin-clone.rs:12:10: 12:15>::fmt(_1: &S, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:12:10: 12:15
    debug f => _2;                       // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:12:10: 12:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:12:10: 12:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:12:10: 12:15
    let mut _4: &str;                    // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:12:10: 12:15
    let _5: &str;                        // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:12:10: 12:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:13:10: 13:13
    let mut _7: &&i32;                   // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:13:10: 13:13
    let _8: &&i32;                       // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:13:10: 13:13
    let _9: &i32;                        // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:13:10: 13:13

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:12:10: 12:15
        _5 = const "S";                  // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:12:10: 12:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:12:10: 12:15
        _9 = &((*_1).0: i32);            // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:13:10: 13:13
        _8 = &_9;                        // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:13:10: 13:13
        _7 = _8;                         // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:13:10: 13:13
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:13:10: 13:13
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:12:10: 12:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:12:15: 12:15
    }
}

fn <impl at ui/stdlib-unit-tests/builtin-clone.rs:12:17: 12:26>::eq(_1: &S, _2: &S) -> bool {
    debug self => _1;                    // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:12:17: 12:26
    debug other => _2;                   // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:12:17: 12:26
    let mut _0: bool;                    // return place in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:12:17: 12:26
    let mut _3: i32;                     // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:13:10: 13:13
    let mut _4: i32;                     // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:13:10: 13:13

    bb0: {
        _3 = ((*_1).0: i32);             // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:13:10: 13:13
        _4 = ((*_2).0: i32);             // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:13:10: 13:13
        _0 = Eq(move _3, move _4);       // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:13:10: 13:13
        return;                          // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:12:26: 12:26
    }
}

fn <impl at ui/stdlib-unit-tests/builtin-clone.rs:12:28: 12:30>::assert_receiver_is_total_eq(_1: &S) -> () {
    debug self => _1;                    // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:12:28: 12:30
    let mut _0: ();                      // return place in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:12:28: 12:30
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:12:30: 12:30
    }
}

fn <impl at ui/stdlib-unit-tests/builtin-clone.rs:15:1: 15:17>::clone(_1: &S) -> S {
    debug self => _1;                    // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:16:14: 16:19
    let mut _0: S;                       // return place in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:16:24: 16:28
    let mut _2: i32;                     // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:17:11: 17:21
    let mut _3: i32;                     // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:17:11: 17:17
    let mut _4: (i32, bool);             // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:17:11: 17:21

    bb0: {
        _3 = ((*_1).0: i32);             // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:17:11: 17:17
        _4 = CheckedAdd(_3, const 1_i32); // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:17:11: 17:21
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, const 1_i32) -> bb1; // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:17:11: 17:21
    }

    bb1: {
        _2 = move (_4.0: i32);           // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:17:11: 17:21
        _0 = S(move _2);                 // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:17:9: 17:22
        return;                          // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:18:6: 18:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:21:11: 21:11
    let _1: ();                          // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:22:5: 22:20
    let _2: ();                          // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:23:5: 23:24
    let mut _3: [i32; 56];               // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:23:16: 23:23
    let _4: ();                          // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:24:5: 24:68
    let mut _5: (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32); // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:24:16: 24:67
    let _6: [S; 3];                      // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:26:9: 26:10
    let mut _7: S;                       // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:26:14: 26:18
    let mut _8: S;                       // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:26:20: 26:24
    let mut _9: S;                       // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:26:26: 26:30
    let mut _11: S;                      // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:27:14: 27:18
    let mut _12: S;                      // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:27:20: 27:24
    let mut _13: S;                      // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:27:26: 27:30
    let mut _14: (&[S; 3], &[S; 3]);     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _15: &[S; 3];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _16: &[S; 3];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _17: [S; 3];                     // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:28:19: 28:28
    let mut _18: &[S; 3];                // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:28:19: 28:28
    let mut _21: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _22: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _23: &[S; 3];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _24: &[S; 3];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _26: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _27: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _28: &[S; 3];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _29: &[S; 3];                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _30: &[S; 3];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _31: &[S; 3];                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _34: (S, S);                 // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:31:9: 31:21
    let mut _35: ((S, S, S), S);         // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:32:9: 35:10
    let mut _36: (S, S, S);              // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:33:13: 33:31
    let mut _37: S;                      // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:33:14: 33:18
    let mut _38: S;                      // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:33:20: 33:24
    let mut _39: S;                      // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:33:26: 33:30
    let mut _40: S;                      // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:34:13: 34:17
    let mut _42: (S, S);                 // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:38:9: 38:21
    let mut _43: ((S, S, S), S);         // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:39:9: 42:10
    let mut _44: (S, S, S);              // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:40:13: 40:31
    let mut _45: S;                      // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:40:14: 40:18
    let mut _46: S;                      // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:40:20: 40:24
    let mut _47: S;                      // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:40:26: 40:30
    let mut _48: S;                      // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:41:13: 41:17
    let mut _49: (&((S, S), ((S, S, S), S)), &((S, S), ((S, S, S), S))); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _50: &((S, S), ((S, S, S), S)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _51: &((S, S), ((S, S, S), S)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _52: ((S, S), ((S, S, S), S));   // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:44:19: 44:28
    let mut _53: &((S, S), ((S, S, S), S)); // in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:44:19: 44:28
    let mut _56: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _57: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _58: &((S, S), ((S, S, S), S)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _59: &((S, S), ((S, S, S), S)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _61: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _62: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _63: &((S, S), ((S, S, S), S)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _64: &((S, S), ((S, S, S), S));  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _65: &((S, S), ((S, S, S), S)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _66: &((S, S), ((S, S, S), S));  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _67: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug a => _6;                   // in scope 1 at ui/stdlib-unit-tests/builtin-clone.rs:26:9: 26:10
        let _10: [S; 3];                 // in scope 1 at ui/stdlib-unit-tests/builtin-clone.rs:27:9: 27:10
        scope 2 {
            debug b => _10;              // in scope 2 at ui/stdlib-unit-tests/builtin-clone.rs:27:9: 27:10
            let _19: &[S; 3];            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _20: &[S; 3];            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _33: ((S, S), ((S, S, S), S)); // in scope 2 at ui/stdlib-unit-tests/builtin-clone.rs:30:9: 30:10
            scope 3 {
                debug left_val => _19;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _20;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _25: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _25;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug a => _33;          // in scope 5 at ui/stdlib-unit-tests/builtin-clone.rs:30:9: 30:10
                let _41: ((S, S), ((S, S, S), S)); // in scope 5 at ui/stdlib-unit-tests/builtin-clone.rs:37:9: 37:10
                scope 6 {
                    debug b => _41;      // in scope 6 at ui/stdlib-unit-tests/builtin-clone.rs:37:9: 37:10
                    let _54: &((S, S), ((S, S, S), S)); // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _55: &((S, S), ((S, S, S), S)); // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    scope 7 {
                        debug left_val => _54; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _55; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _60: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 8 {
                            debug kind => _60; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = test_clone::<fn() {foo}>(foo) -> bb1; // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:22:5: 22:20
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:22:5: 22:15
                                         // + literal: Const { ty: fn(fn() {foo}) {test_clone::<fn() {foo}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:22:16: 22:19
                                         // + literal: Const { ty: fn() {foo}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = [const 1_i32; 56];          // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:23:16: 23:23
        _2 = test_clone::<[i32; 56]>(move _3) -> bb2; // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:23:5: 23:24
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:23:5: 23:15
                                         // + literal: Const { ty: fn([i32; 56]) {test_clone::<[i32; 56]>}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = (const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32, const 1_i32); // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:24:16: 24:67
        _4 = test_clone::<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>(move _5) -> bb3; // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:24:5: 24:68
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:24:5: 24:15
                                         // + literal: Const { ty: fn((i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)) {test_clone::<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = const S(0_i32);             // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:26:14: 26:18
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:26:14: 26:18
                                         // + literal: Const { ty: S, val: Value(Scalar(0x00000000)) }
        _8 = const S(1_i32);             // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:26:20: 26:24
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:26:20: 26:24
                                         // + literal: Const { ty: S, val: Value(Scalar(0x00000001)) }
        _9 = const S(2_i32);             // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:26:26: 26:30
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:26:26: 26:30
                                         // + literal: Const { ty: S, val: Value(Scalar(0x00000002)) }
        _6 = [move _7, move _8, move _9]; // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:26:13: 26:31
        _11 = const S(1_i32);            // scope 1 at ui/stdlib-unit-tests/builtin-clone.rs:27:14: 27:18
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:27:14: 27:18
                                         // + literal: Const { ty: S, val: Value(Scalar(0x00000001)) }
        _12 = const S(2_i32);            // scope 1 at ui/stdlib-unit-tests/builtin-clone.rs:27:20: 27:24
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:27:20: 27:24
                                         // + literal: Const { ty: S, val: Value(Scalar(0x00000002)) }
        _13 = const S(3_i32);            // scope 1 at ui/stdlib-unit-tests/builtin-clone.rs:27:26: 27:30
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:27:26: 27:30
                                         // + literal: Const { ty: S, val: Value(Scalar(0x00000003)) }
        _10 = [move _11, move _12, move _13]; // scope 1 at ui/stdlib-unit-tests/builtin-clone.rs:27:13: 27:31
        _15 = &_10;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _18 = &_6;                       // scope 2 at ui/stdlib-unit-tests/builtin-clone.rs:28:19: 28:28
        _17 = <[S; 3] as Clone>::clone(move _18) -> bb4; // scope 2 at ui/stdlib-unit-tests/builtin-clone.rs:28:19: 28:28
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:28:21: 28:26
                                         // + literal: Const { ty: for<'a> fn(&'a [S; 3]) -> [S; 3] {<[S; 3] as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _16 = &_17;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _14 = (move _15, move _16);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _19 = (_14.0: &[S; 3]);          // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _20 = (_14.1: &[S; 3]);          // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _23 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _24 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _22 = <[S; 3] as PartialEq>::eq(move _23, move _24) -> bb5; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [S; 3], &'b [S; 3]) -> bool {<[S; 3] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _21 = Not(move _22);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _21) -> [0: bb7, otherwise: bb6]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _25 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _27 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _29 = _19;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _29;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _31 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _30 = _31;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _32 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _26 = core::panicking::assert_failed::<[S; 3], [S; 3]>(move _27, move _28, move _30, move _32); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [S; 3], &'b [S; 3], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[S; 3], [S; 3]>}, val: Value(<ZST>) }
    }

    bb7: {
        _34 = const (S(1_i32), S(0_i32)); // scope 2 at ui/stdlib-unit-tests/builtin-clone.rs:31:9: 31:21
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:31:9: 31:21
                                         // + literal: Const { ty: (S, S), val: Value(ByRef(..)) }
        _37 = const S(0_i32);            // scope 2 at ui/stdlib-unit-tests/builtin-clone.rs:33:14: 33:18
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:33:14: 33:18
                                         // + literal: Const { ty: S, val: Value(Scalar(0x00000000)) }
        _38 = const S(0_i32);            // scope 2 at ui/stdlib-unit-tests/builtin-clone.rs:33:20: 33:24
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:33:20: 33:24
                                         // + literal: Const { ty: S, val: Value(Scalar(0x00000000)) }
        _39 = const S(1_i32);            // scope 2 at ui/stdlib-unit-tests/builtin-clone.rs:33:26: 33:30
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:33:26: 33:30
                                         // + literal: Const { ty: S, val: Value(Scalar(0x00000001)) }
        _36 = (move _37, move _38, move _39); // scope 2 at ui/stdlib-unit-tests/builtin-clone.rs:33:13: 33:31
        _40 = const S(0_i32);            // scope 2 at ui/stdlib-unit-tests/builtin-clone.rs:34:13: 34:17
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:34:13: 34:17
                                         // + literal: Const { ty: S, val: Value(Scalar(0x00000000)) }
        _35 = (move _36, move _40);      // scope 2 at ui/stdlib-unit-tests/builtin-clone.rs:32:9: 35:10
        _33 = (move _34, move _35);      // scope 2 at ui/stdlib-unit-tests/builtin-clone.rs:30:13: 36:6
        _42 = const (S(2_i32), S(1_i32)); // scope 5 at ui/stdlib-unit-tests/builtin-clone.rs:38:9: 38:21
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:38:9: 38:21
                                         // + literal: Const { ty: (S, S), val: Value(ByRef(..)) }
        _45 = const S(1_i32);            // scope 5 at ui/stdlib-unit-tests/builtin-clone.rs:40:14: 40:18
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:40:14: 40:18
                                         // + literal: Const { ty: S, val: Value(Scalar(0x00000001)) }
        _46 = const S(1_i32);            // scope 5 at ui/stdlib-unit-tests/builtin-clone.rs:40:20: 40:24
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:40:20: 40:24
                                         // + literal: Const { ty: S, val: Value(Scalar(0x00000001)) }
        _47 = const S(2_i32);            // scope 5 at ui/stdlib-unit-tests/builtin-clone.rs:40:26: 40:30
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:40:26: 40:30
                                         // + literal: Const { ty: S, val: Value(Scalar(0x00000002)) }
        _44 = (move _45, move _46, move _47); // scope 5 at ui/stdlib-unit-tests/builtin-clone.rs:40:13: 40:31
        _48 = const S(1_i32);            // scope 5 at ui/stdlib-unit-tests/builtin-clone.rs:41:13: 41:17
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:41:13: 41:17
                                         // + literal: Const { ty: S, val: Value(Scalar(0x00000001)) }
        _43 = (move _44, move _48);      // scope 5 at ui/stdlib-unit-tests/builtin-clone.rs:39:9: 42:10
        _41 = (move _42, move _43);      // scope 5 at ui/stdlib-unit-tests/builtin-clone.rs:37:13: 43:6
        _50 = &_41;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _53 = &_33;                      // scope 6 at ui/stdlib-unit-tests/builtin-clone.rs:44:19: 44:28
        _52 = <((S, S), ((S, S, S), S)) as Clone>::clone(move _53) -> bb8; // scope 6 at ui/stdlib-unit-tests/builtin-clone.rs:44:19: 44:28
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/builtin-clone.rs:44:21: 44:26
                                         // + literal: Const { ty: for<'a> fn(&'a ((S, S), ((S, S, S), S))) -> ((S, S), ((S, S, S), S)) {<((S, S), ((S, S, S), S)) as Clone>::clone}, val: Value(<ZST>) }
    }

    bb8: {
        _51 = &_52;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _49 = (move _50, move _51);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _54 = (_49.0: &((S, S), ((S, S, S), S))); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _55 = (_49.1: &((S, S), ((S, S, S), S))); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _58 = _54;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _59 = _55;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _57 = <((S, S), ((S, S, S), S)) as PartialEq>::eq(move _58, move _59) -> bb9; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ((S, S), ((S, S, S), S)), &'b ((S, S), ((S, S, S), S))) -> bool {<((S, S), ((S, S, S), S)) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _56 = Not(move _57);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _56) -> [0: bb11, otherwise: bb10]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _60 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _62 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _64 = _54;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _63 = _64;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _66 = _55;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _65 = _66;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _67 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _61 = core::panicking::assert_failed::<((S, S), ((S, S, S), S)), ((S, S), ((S, S, S), S))>(move _62, move _63, move _65, move _67); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a ((S, S), ((S, S, S), S)), &'b ((S, S), ((S, S, S), S)), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<((S, S), ((S, S, S), S)), ((S, S), ((S, S, S), S))>}, val: Value(<ZST>) }
    }

    bb11: {
        return;                          // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:45:2: 45:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:23:20: 23:22

    bb0: {
        _0 = const 56_usize;             // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:23:20: 23:22
        return;                          // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:23:20: 23:22
    }
}

fn S(_1: i32) -> S {
    let mut _0: S;                       // return place in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:13:1: 13:9

    bb0: {
        _0 = S(move _1);                 // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:13:1: 13:9
        return;                          // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:13:1: 13:9
    }
}

// MIR FOR CTFE
fn S(_1: i32) -> S {
    let mut _0: S;                       // return place in scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:13:1: 13:9

    bb0: {
        _0 = S(move _1);                 // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:13:1: 13:9
        return;                          // scope 0 at ui/stdlib-unit-tests/builtin-clone.rs:13:1: 13:9
    }
}
