// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn assert_inorder(_1: &[T]) -> () {
    debug a => _1;                       // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:6:46: 6:47
    let mut _0: ();                      // return place in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:6:55: 6:55
    let mut _2: std::ops::Range<usize>;  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:14: 7:24
    let mut _3: std::ops::Range<usize>;  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:14: 7:24
    let mut _4: usize;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:17: 7:24
    let mut _5: &[T];                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:17: 7:24
    let mut _6: std::ops::Range<usize>;  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:14: 7:24
    let mut _7: std::option::Option<usize>; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:14: 7:24
    let mut _8: &mut std::ops::Range<usize>; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:14: 7:24
    let mut _9: &mut std::ops::Range<usize>; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:14: 7:24
    let mut _10: isize;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:5: 32:6
    let mut _12: std::ops::Range<usize>; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:18: 8:28
    let mut _13: std::ops::Range<usize>; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:18: 8:28
    let mut _14: usize;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:21: 8:28
    let mut _15: &[T];                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:21: 8:28
    let mut _17: std::option::Option<usize>; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:18: 8:28
    let mut _18: &mut std::ops::Range<usize>; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:18: 8:28
    let mut _19: &mut std::ops::Range<usize>; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:18: 8:28
    let mut _20: isize;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:9: 31:10
    let mut _22: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:9:16: 9:21
    let mut _23: usize;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:9:16: 9:17
    let mut _24: usize;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:9:20: 9:21
    let mut _25: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:17: 10:37
    let mut _26: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:25: 10:36
    let mut _27: &T;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:25: 10:29
    let _28: usize;                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:27: 10:28
    let mut _29: usize;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:25: 10:29
    let mut _30: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:25: 10:29
    let mut _31: &T;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:32: 10:36
    let _32: usize;                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:34: 10:35
    let mut _33: usize;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:32: 10:36
    let mut _34: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:32: 10:36
    let mut _35: !;                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:17: 10:37
    let mut _36: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:17: 11:38
    let mut _37: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:25: 11:37
    let mut _38: &T;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:25: 11:29
    let _39: usize;                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:27: 11:28
    let mut _40: usize;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:25: 11:29
    let mut _41: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:25: 11:29
    let mut _42: &T;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:33: 11:37
    let _43: usize;                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:35: 11:36
    let mut _44: usize;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:33: 11:37
    let mut _45: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:33: 11:37
    let mut _46: !;                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:17: 11:38
    let mut _47: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:17: 12:41
    let mut _48: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:25: 12:40
    let mut _49: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:26: 12:40
    let mut _50: &T;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:27: 12:31
    let _51: usize;                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:29: 12:30
    let mut _52: usize;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:27: 12:31
    let mut _53: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:27: 12:31
    let mut _54: &T;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:35: 12:39
    let _55: usize;                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:37: 12:38
    let mut _56: usize;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:35: 12:39
    let mut _57: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:35: 12:39
    let mut _58: !;                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:17: 12:41
    let mut _59: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:17: 13:38
    let mut _60: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:25: 13:37
    let mut _61: &T;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:25: 13:29
    let _62: usize;                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:27: 13:28
    let mut _63: usize;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:25: 13:29
    let mut _64: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:25: 13:29
    let mut _65: &T;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:33: 13:37
    let _66: usize;                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:35: 13:36
    let mut _67: usize;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:33: 13:37
    let mut _68: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:33: 13:37
    let mut _69: !;                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:17: 13:38
    let mut _70: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:17: 14:41
    let mut _71: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:25: 14:40
    let mut _72: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:26: 14:40
    let mut _73: &T;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:27: 14:31
    let _74: usize;                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:29: 14:30
    let mut _75: usize;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:27: 14:31
    let mut _76: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:27: 14:31
    let mut _77: &T;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:35: 14:39
    let _78: usize;                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:37: 14:38
    let mut _79: usize;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:35: 14:39
    let mut _80: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:35: 14:39
    let mut _81: !;                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:17: 14:41
    let mut _82: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:17: 15:40
    let mut _83: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:25: 15:39
    let mut _84: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:26: 15:39
    let mut _85: &T;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:27: 15:31
    let _86: usize;                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:29: 15:30
    let mut _87: usize;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:27: 15:31
    let mut _88: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:27: 15:31
    let mut _89: &T;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:34: 15:38
    let _90: usize;                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:36: 15:37
    let mut _91: usize;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:34: 15:38
    let mut _92: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:34: 15:38
    let mut _93: !;                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:17: 15:40
    let mut _94: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:16:23: 16:29
    let mut _95: usize;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:16:23: 16:24
    let mut _96: usize;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:16:28: 16:29
    let mut _97: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:17: 17:40
    let mut _98: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:25: 17:39
    let mut _99: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:26: 17:39
    let mut _100: &T;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:27: 17:31
    let _101: usize;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:29: 17:30
    let mut _102: usize;                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:27: 17:31
    let mut _103: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:27: 17:31
    let mut _104: &T;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:34: 17:38
    let _105: usize;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:36: 17:37
    let mut _106: usize;                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:34: 17:38
    let mut _107: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:34: 17:38
    let mut _108: !;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:17: 17:40
    let mut _109: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:17: 18:38
    let mut _110: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:25: 18:37
    let mut _111: &T;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:25: 18:29
    let _112: usize;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:27: 18:28
    let mut _113: usize;                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:25: 18:29
    let mut _114: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:25: 18:29
    let mut _115: &T;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:33: 18:37
    let _116: usize;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:35: 18:36
    let mut _117: usize;                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:33: 18:37
    let mut _118: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:33: 18:37
    let mut _119: !;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:17: 18:38
    let mut _120: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:17: 19:38
    let mut _121: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:25: 19:37
    let mut _122: &T;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:25: 19:29
    let _123: usize;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:27: 19:28
    let mut _124: usize;                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:25: 19:29
    let mut _125: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:25: 19:29
    let mut _126: &T;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:33: 19:37
    let _127: usize;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:35: 19:36
    let mut _128: usize;                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:33: 19:37
    let mut _129: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:33: 19:37
    let mut _130: !;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:17: 19:38
    let mut _131: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:17: 20:41
    let mut _132: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:25: 20:40
    let mut _133: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:26: 20:40
    let mut _134: &T;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:27: 20:31
    let _135: usize;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:29: 20:30
    let mut _136: usize;                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:27: 20:31
    let mut _137: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:27: 20:31
    let mut _138: &T;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:35: 20:39
    let _139: usize;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:37: 20:38
    let mut _140: usize;                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:35: 20:39
    let mut _141: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:35: 20:39
    let mut _142: !;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:17: 20:41
    let mut _143: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:17: 21:38
    let mut _144: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:25: 21:37
    let mut _145: &T;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:25: 21:29
    let _146: usize;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:27: 21:28
    let mut _147: usize;                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:25: 21:29
    let mut _148: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:25: 21:29
    let mut _149: &T;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:33: 21:37
    let _150: usize;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:35: 21:36
    let mut _151: usize;                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:33: 21:37
    let mut _152: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:33: 21:37
    let mut _153: !;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:17: 21:38
    let mut _154: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:17: 22:40
    let mut _155: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:25: 22:39
    let mut _156: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:26: 22:39
    let mut _157: &T;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:27: 22:31
    let _158: usize;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:29: 22:30
    let mut _159: usize;                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:27: 22:31
    let mut _160: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:27: 22:31
    let mut _161: &T;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:34: 22:38
    let _162: usize;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:36: 22:37
    let mut _163: usize;                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:34: 22:38
    let mut _164: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:34: 22:38
    let mut _165: !;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:17: 22:40
    let mut _166: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:17: 24:40
    let mut _167: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:25: 24:39
    let mut _168: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:26: 24:39
    let mut _169: &T;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:27: 24:31
    let _170: usize;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:29: 24:30
    let mut _171: usize;                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:27: 24:31
    let mut _172: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:27: 24:31
    let mut _173: &T;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:34: 24:38
    let _174: usize;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:36: 24:37
    let mut _175: usize;                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:34: 24:38
    let mut _176: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:34: 24:38
    let mut _177: !;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:17: 24:40
    let mut _178: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:17: 25:41
    let mut _179: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:25: 25:40
    let mut _180: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:26: 25:40
    let mut _181: &T;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:27: 25:31
    let _182: usize;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:29: 25:30
    let mut _183: usize;                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:27: 25:31
    let mut _184: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:27: 25:31
    let mut _185: &T;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:35: 25:39
    let _186: usize;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:37: 25:38
    let mut _187: usize;                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:35: 25:39
    let mut _188: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:35: 25:39
    let mut _189: !;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:17: 25:41
    let mut _190: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:17: 26:41
    let mut _191: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:25: 26:40
    let mut _192: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:26: 26:40
    let mut _193: &T;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:27: 26:31
    let _194: usize;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:29: 26:30
    let mut _195: usize;                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:27: 26:31
    let mut _196: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:27: 26:31
    let mut _197: &T;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:35: 26:39
    let _198: usize;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:37: 26:38
    let mut _199: usize;                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:35: 26:39
    let mut _200: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:35: 26:39
    let mut _201: !;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:17: 26:41
    let mut _202: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:17: 27:38
    let mut _203: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:25: 27:37
    let mut _204: &T;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:25: 27:29
    let _205: usize;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:27: 27:28
    let mut _206: usize;                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:25: 27:29
    let mut _207: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:25: 27:29
    let mut _208: &T;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:33: 27:37
    let _209: usize;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:35: 27:36
    let mut _210: usize;                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:33: 27:37
    let mut _211: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:33: 27:37
    let mut _212: !;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:17: 27:38
    let mut _213: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:17: 28:38
    let mut _214: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:25: 28:37
    let mut _215: &T;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:25: 28:29
    let _216: usize;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:27: 28:28
    let mut _217: usize;                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:25: 28:29
    let mut _218: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:25: 28:29
    let mut _219: &T;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:33: 28:37
    let _220: usize;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:35: 28:36
    let mut _221: usize;                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:33: 28:37
    let mut _222: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:33: 28:37
    let mut _223: !;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:17: 28:38
    let mut _224: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:17: 29:37
    let mut _225: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:25: 29:36
    let mut _226: &T;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:25: 29:29
    let _227: usize;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:27: 29:28
    let mut _228: usize;                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:25: 29:29
    let mut _229: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:25: 29:29
    let mut _230: &T;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:32: 29:36
    let _231: usize;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:34: 29:35
    let mut _232: usize;                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:32: 29:36
    let mut _233: bool;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:32: 29:36
    let mut _234: !;                     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:17: 29:37
    scope 1 {
        debug iter => _6;                // in scope 1 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:14: 7:24
        let _11: usize;                  // in scope 1 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:9: 7:10
        scope 2 {
            debug i => _11;              // in scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:9: 7:10
            let mut _16: std::ops::Range<usize>; // in scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:18: 8:28
            scope 3 {
                debug iter => _16;       // in scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:18: 8:28
                let _21: usize;          // in scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:13: 8:14
                scope 4 {
                    debug j => _21;      // in scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:13: 8:14
                }
            }
        }
    }

    bb0: {
        _5 = _1;                         // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:17: 7:24
        _4 = Len((*_5));                 // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:17: 7:24
        _3 = std::ops::Range::<usize> { start: const 0_usize, end: move _4 }; // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:14: 7:24
        _2 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _3) -> bb1; // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:14: 7:24
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:7:14: 7:24
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = move _2;                    // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:14: 7:24
        goto -> bb2;                     // scope 1 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:5: 32:6
    }

    bb2: {
        _9 = &mut _6;                    // scope 1 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:14: 7:24
        _8 = &mut (*_9);                 // scope 1 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:14: 7:24
        _7 = <std::ops::Range<usize> as Iterator>::next(move _8) -> bb3; // scope 1 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:14: 7:24
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:7:14: 7:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = discriminant(_7);          // scope 1 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:14: 7:24
        switchInt(move _10) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:14: 7:24
    }

    bb4: {
        _11 = ((_7 as Some).0: usize);   // scope 1 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:9: 7:10
        _15 = _1;                        // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:21: 8:28
        _14 = Len((*_15));               // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:21: 8:28
        _13 = std::ops::Range::<usize> { start: const 0_usize, end: move _14 }; // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:18: 8:28
        _12 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _13) -> bb7; // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:18: 8:28
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:8:18: 8:28
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 1 at ui/stdlib-unit-tests/raw-fat-ptr.rs:7:14: 7:24
    }

    bb6: {
        return;                          // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:33:2: 33:2
    }

    bb7: {
        _16 = move _12;                  // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:18: 8:28
        goto -> bb8;                     // scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:9: 31:10
    }

    bb8: {
        _19 = &mut _16;                  // scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:18: 8:28
        _18 = &mut (*_19);               // scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:18: 8:28
        _17 = <std::ops::Range<usize> as Iterator>::next(move _18) -> bb9; // scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:18: 8:28
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:8:18: 8:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb9: {
        _20 = discriminant(_17);         // scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:18: 8:28
        switchInt(move _20) -> [0: bb2, 1: bb10, otherwise: bb11]; // scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:18: 8:28
    }

    bb10: {
        _21 = ((_17 as Some).0: usize);  // scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:13: 8:14
        _23 = _11;                       // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:9:16: 9:17
        _24 = _21;                       // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:9:20: 9:21
        _22 = Lt(move _23, move _24);    // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:9:16: 9:21
        switchInt(move _22) -> [0: bb42, otherwise: bb12]; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:9:16: 9:21
    }

    bb11: {
        unreachable;                     // scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:8:18: 8:28
    }

    bb12: {
        _28 = _11;                       // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:27: 10:28
        _29 = Len((*_1));                // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:25: 10:29
        _30 = Lt(_28, _29);              // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:25: 10:29
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> bb13; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:25: 10:29
    }

    bb13: {
        _27 = &(*_1)[_28];               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:25: 10:29
        _32 = _21;                       // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:34: 10:35
        _33 = Len((*_1));                // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:32: 10:36
        _34 = Lt(_32, _33);              // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:32: 10:36
        assert(move _34, "index out of bounds: the length is {} but the index is {}", move _33, _32) -> bb14; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:32: 10:36
    }

    bb14: {
        _31 = &(*_1)[_32];               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:32: 10:36
        _26 = <T as PartialOrd>::lt(move _27, move _31) -> bb15; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:25: 10:36
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:10:25: 10:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialOrd>::lt}, val: Value(<ZST>) }
    }

    bb15: {
        _25 = Not(move _26);             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:17: 10:37
        switchInt(move _25) -> [0: bb17, otherwise: bb16]; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:17: 10:37
    }

    bb16: {
        _35 = core::panicking::panic(const "assertion failed: a[i] < a[j]"); // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:10:17: 10:37
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:10:17: 10:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        _39 = _11;                       // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:27: 11:28
        _40 = Len((*_1));                // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:25: 11:29
        _41 = Lt(_39, _40);              // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:25: 11:29
        assert(move _41, "index out of bounds: the length is {} but the index is {}", move _40, _39) -> bb18; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:25: 11:29
    }

    bb18: {
        _38 = &(*_1)[_39];               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:25: 11:29
        _43 = _21;                       // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:35: 11:36
        _44 = Len((*_1));                // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:33: 11:37
        _45 = Lt(_43, _44);              // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:33: 11:37
        assert(move _45, "index out of bounds: the length is {} but the index is {}", move _44, _43) -> bb19; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:33: 11:37
    }

    bb19: {
        _42 = &(*_1)[_43];               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:33: 11:37
        _37 = <T as PartialOrd>::le(move _38, move _42) -> bb20; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:25: 11:37
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:11:25: 11:37
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialOrd>::le}, val: Value(<ZST>) }
    }

    bb20: {
        _36 = Not(move _37);             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:17: 11:38
        switchInt(move _36) -> [0: bb22, otherwise: bb21]; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:17: 11:38
    }

    bb21: {
        _46 = core::panicking::panic(const "assertion failed: a[i] <= a[j]"); // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:11:17: 11:38
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:11:17: 11:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb22: {
        _51 = _11;                       // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:29: 12:30
        _52 = Len((*_1));                // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:27: 12:31
        _53 = Lt(_51, _52);              // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:27: 12:31
        assert(move _53, "index out of bounds: the length is {} but the index is {}", move _52, _51) -> bb23; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:27: 12:31
    }

    bb23: {
        _50 = &(*_1)[_51];               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:27: 12:31
        _55 = _21;                       // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:37: 12:38
        _56 = Len((*_1));                // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:35: 12:39
        _57 = Lt(_55, _56);              // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:35: 12:39
        assert(move _57, "index out of bounds: the length is {} but the index is {}", move _56, _55) -> bb24; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:35: 12:39
    }

    bb24: {
        _54 = &(*_1)[_55];               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:35: 12:39
        _49 = <T as PartialEq>::eq(move _50, move _54) -> bb25; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:26: 12:40
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:12:26: 12:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb25: {
        _48 = Not(move _49);             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:25: 12:40
        _47 = Not(move _48);             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:17: 12:41
        switchInt(move _47) -> [0: bb27, otherwise: bb26]; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:17: 12:41
    }

    bb26: {
        _58 = core::panicking::panic(const "assertion failed: !(a[i] == a[j])"); // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:12:17: 12:41
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:12:17: 12:41
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb27: {
        _62 = _11;                       // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:27: 13:28
        _63 = Len((*_1));                // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:25: 13:29
        _64 = Lt(_62, _63);              // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:25: 13:29
        assert(move _64, "index out of bounds: the length is {} but the index is {}", move _63, _62) -> bb28; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:25: 13:29
    }

    bb28: {
        _61 = &(*_1)[_62];               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:25: 13:29
        _66 = _21;                       // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:35: 13:36
        _67 = Len((*_1));                // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:33: 13:37
        _68 = Lt(_66, _67);              // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:33: 13:37
        assert(move _68, "index out of bounds: the length is {} but the index is {}", move _67, _66) -> bb29; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:33: 13:37
    }

    bb29: {
        _65 = &(*_1)[_66];               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:33: 13:37
        _60 = <T as PartialEq>::ne(move _61, move _65) -> bb30; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:25: 13:37
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:13:25: 13:37
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb30: {
        _59 = Not(move _60);             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:17: 13:38
        switchInt(move _59) -> [0: bb32, otherwise: bb31]; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:17: 13:38
    }

    bb31: {
        _69 = core::panicking::panic(const "assertion failed: a[i] != a[j]"); // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:13:17: 13:38
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:13:17: 13:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb32: {
        _74 = _11;                       // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:29: 14:30
        _75 = Len((*_1));                // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:27: 14:31
        _76 = Lt(_74, _75);              // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:27: 14:31
        assert(move _76, "index out of bounds: the length is {} but the index is {}", move _75, _74) -> bb33; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:27: 14:31
    }

    bb33: {
        _73 = &(*_1)[_74];               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:27: 14:31
        _78 = _21;                       // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:37: 14:38
        _79 = Len((*_1));                // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:35: 14:39
        _80 = Lt(_78, _79);              // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:35: 14:39
        assert(move _80, "index out of bounds: the length is {} but the index is {}", move _79, _78) -> bb34; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:35: 14:39
    }

    bb34: {
        _77 = &(*_1)[_78];               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:35: 14:39
        _72 = <T as PartialOrd>::ge(move _73, move _77) -> bb35; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:26: 14:40
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:14:26: 14:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialOrd>::ge}, val: Value(<ZST>) }
    }

    bb35: {
        _71 = Not(move _72);             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:25: 14:40
        _70 = Not(move _71);             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:17: 14:41
        switchInt(move _70) -> [0: bb37, otherwise: bb36]; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:17: 14:41
    }

    bb36: {
        _81 = core::panicking::panic(const "assertion failed: !(a[i] >= a[j])"); // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:14:17: 14:41
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:14:17: 14:41
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb37: {
        _86 = _11;                       // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:29: 15:30
        _87 = Len((*_1));                // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:27: 15:31
        _88 = Lt(_86, _87);              // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:27: 15:31
        assert(move _88, "index out of bounds: the length is {} but the index is {}", move _87, _86) -> bb38; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:27: 15:31
    }

    bb38: {
        _85 = &(*_1)[_86];               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:27: 15:31
        _90 = _21;                       // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:36: 15:37
        _91 = Len((*_1));                // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:34: 15:38
        _92 = Lt(_90, _91);              // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:34: 15:38
        assert(move _92, "index out of bounds: the length is {} but the index is {}", move _91, _90) -> bb39; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:34: 15:38
    }

    bb39: {
        _89 = &(*_1)[_90];               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:34: 15:38
        _84 = <T as PartialOrd>::gt(move _85, move _89) -> bb40; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:26: 15:39
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:15:26: 15:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialOrd>::gt}, val: Value(<ZST>) }
    }

    bb40: {
        _83 = Not(move _84);             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:25: 15:39
        _82 = Not(move _83);             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:17: 15:40
        switchInt(move _82) -> [0: bb8, otherwise: bb41]; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:17: 15:40
    }

    bb41: {
        _93 = core::panicking::panic(const "assertion failed: !(a[i] > a[j])"); // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:15:17: 15:40
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:15:17: 15:40
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb42: {
        _95 = _11;                       // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:16:23: 16:24
        _96 = _21;                       // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:16:28: 16:29
        _94 = Eq(move _95, move _96);    // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:16:23: 16:29
        switchInt(move _94) -> [0: bb73, otherwise: bb43]; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:16:23: 16:29
    }

    bb43: {
        _101 = _11;                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:29: 17:30
        _102 = Len((*_1));               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:27: 17:31
        _103 = Lt(_101, _102);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:27: 17:31
        assert(move _103, "index out of bounds: the length is {} but the index is {}", move _102, _101) -> bb44; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:27: 17:31
    }

    bb44: {
        _100 = &(*_1)[_101];             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:27: 17:31
        _105 = _21;                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:36: 17:37
        _106 = Len((*_1));               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:34: 17:38
        _107 = Lt(_105, _106);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:34: 17:38
        assert(move _107, "index out of bounds: the length is {} but the index is {}", move _106, _105) -> bb45; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:34: 17:38
    }

    bb45: {
        _104 = &(*_1)[_105];             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:34: 17:38
        _99 = <T as PartialOrd>::lt(move _100, move _104) -> bb46; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:26: 17:39
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:17:26: 17:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialOrd>::lt}, val: Value(<ZST>) }
    }

    bb46: {
        _98 = Not(move _99);             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:25: 17:39
        _97 = Not(move _98);             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:17: 17:40
        switchInt(move _97) -> [0: bb48, otherwise: bb47]; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:17: 17:40
    }

    bb47: {
        _108 = core::panicking::panic(const "assertion failed: !(a[i] < a[j])"); // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:17:17: 17:40
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:17:17: 17:40
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb48: {
        _112 = _11;                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:27: 18:28
        _113 = Len((*_1));               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:25: 18:29
        _114 = Lt(_112, _113);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:25: 18:29
        assert(move _114, "index out of bounds: the length is {} but the index is {}", move _113, _112) -> bb49; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:25: 18:29
    }

    bb49: {
        _111 = &(*_1)[_112];             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:25: 18:29
        _116 = _21;                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:35: 18:36
        _117 = Len((*_1));               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:33: 18:37
        _118 = Lt(_116, _117);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:33: 18:37
        assert(move _118, "index out of bounds: the length is {} but the index is {}", move _117, _116) -> bb50; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:33: 18:37
    }

    bb50: {
        _115 = &(*_1)[_116];             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:33: 18:37
        _110 = <T as PartialOrd>::le(move _111, move _115) -> bb51; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:25: 18:37
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:18:25: 18:37
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialOrd>::le}, val: Value(<ZST>) }
    }

    bb51: {
        _109 = Not(move _110);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:17: 18:38
        switchInt(move _109) -> [0: bb53, otherwise: bb52]; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:17: 18:38
    }

    bb52: {
        _119 = core::panicking::panic(const "assertion failed: a[i] <= a[j]"); // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:18:17: 18:38
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:18:17: 18:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb53: {
        _123 = _11;                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:27: 19:28
        _124 = Len((*_1));               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:25: 19:29
        _125 = Lt(_123, _124);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:25: 19:29
        assert(move _125, "index out of bounds: the length is {} but the index is {}", move _124, _123) -> bb54; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:25: 19:29
    }

    bb54: {
        _122 = &(*_1)[_123];             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:25: 19:29
        _127 = _21;                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:35: 19:36
        _128 = Len((*_1));               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:33: 19:37
        _129 = Lt(_127, _128);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:33: 19:37
        assert(move _129, "index out of bounds: the length is {} but the index is {}", move _128, _127) -> bb55; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:33: 19:37
    }

    bb55: {
        _126 = &(*_1)[_127];             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:33: 19:37
        _121 = <T as PartialEq>::eq(move _122, move _126) -> bb56; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:25: 19:37
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:19:25: 19:37
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb56: {
        _120 = Not(move _121);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:17: 19:38
        switchInt(move _120) -> [0: bb58, otherwise: bb57]; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:17: 19:38
    }

    bb57: {
        _130 = core::panicking::panic(const "assertion failed: a[i] == a[j]"); // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:19:17: 19:38
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:19:17: 19:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb58: {
        _135 = _11;                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:29: 20:30
        _136 = Len((*_1));               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:27: 20:31
        _137 = Lt(_135, _136);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:27: 20:31
        assert(move _137, "index out of bounds: the length is {} but the index is {}", move _136, _135) -> bb59; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:27: 20:31
    }

    bb59: {
        _134 = &(*_1)[_135];             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:27: 20:31
        _139 = _21;                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:37: 20:38
        _140 = Len((*_1));               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:35: 20:39
        _141 = Lt(_139, _140);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:35: 20:39
        assert(move _141, "index out of bounds: the length is {} but the index is {}", move _140, _139) -> bb60; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:35: 20:39
    }

    bb60: {
        _138 = &(*_1)[_139];             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:35: 20:39
        _133 = <T as PartialEq>::ne(move _134, move _138) -> bb61; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:26: 20:40
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:20:26: 20:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb61: {
        _132 = Not(move _133);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:25: 20:40
        _131 = Not(move _132);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:17: 20:41
        switchInt(move _131) -> [0: bb63, otherwise: bb62]; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:17: 20:41
    }

    bb62: {
        _142 = core::panicking::panic(const "assertion failed: !(a[i] != a[j])"); // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:20:17: 20:41
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:20:17: 20:41
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb63: {
        _146 = _11;                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:27: 21:28
        _147 = Len((*_1));               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:25: 21:29
        _148 = Lt(_146, _147);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:25: 21:29
        assert(move _148, "index out of bounds: the length is {} but the index is {}", move _147, _146) -> bb64; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:25: 21:29
    }

    bb64: {
        _145 = &(*_1)[_146];             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:25: 21:29
        _150 = _21;                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:35: 21:36
        _151 = Len((*_1));               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:33: 21:37
        _152 = Lt(_150, _151);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:33: 21:37
        assert(move _152, "index out of bounds: the length is {} but the index is {}", move _151, _150) -> bb65; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:33: 21:37
    }

    bb65: {
        _149 = &(*_1)[_150];             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:33: 21:37
        _144 = <T as PartialOrd>::ge(move _145, move _149) -> bb66; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:25: 21:37
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:21:25: 21:37
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialOrd>::ge}, val: Value(<ZST>) }
    }

    bb66: {
        _143 = Not(move _144);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:17: 21:38
        switchInt(move _143) -> [0: bb68, otherwise: bb67]; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:17: 21:38
    }

    bb67: {
        _153 = core::panicking::panic(const "assertion failed: a[i] >= a[j]"); // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:21:17: 21:38
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:21:17: 21:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb68: {
        _158 = _11;                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:29: 22:30
        _159 = Len((*_1));               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:27: 22:31
        _160 = Lt(_158, _159);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:27: 22:31
        assert(move _160, "index out of bounds: the length is {} but the index is {}", move _159, _158) -> bb69; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:27: 22:31
    }

    bb69: {
        _157 = &(*_1)[_158];             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:27: 22:31
        _162 = _21;                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:36: 22:37
        _163 = Len((*_1));               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:34: 22:38
        _164 = Lt(_162, _163);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:34: 22:38
        assert(move _164, "index out of bounds: the length is {} but the index is {}", move _163, _162) -> bb70; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:34: 22:38
    }

    bb70: {
        _161 = &(*_1)[_162];             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:34: 22:38
        _156 = <T as PartialOrd>::gt(move _157, move _161) -> bb71; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:26: 22:39
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:22:26: 22:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialOrd>::gt}, val: Value(<ZST>) }
    }

    bb71: {
        _155 = Not(move _156);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:25: 22:39
        _154 = Not(move _155);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:17: 22:40
        switchInt(move _154) -> [0: bb8, otherwise: bb72]; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:17: 22:40
    }

    bb72: {
        _165 = core::panicking::panic(const "assertion failed: !(a[i] > a[j])"); // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:22:17: 22:40
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:22:17: 22:40
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb73: {
        _170 = _11;                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:29: 24:30
        _171 = Len((*_1));               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:27: 24:31
        _172 = Lt(_170, _171);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:27: 24:31
        assert(move _172, "index out of bounds: the length is {} but the index is {}", move _171, _170) -> bb74; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:27: 24:31
    }

    bb74: {
        _169 = &(*_1)[_170];             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:27: 24:31
        _174 = _21;                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:36: 24:37
        _175 = Len((*_1));               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:34: 24:38
        _176 = Lt(_174, _175);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:34: 24:38
        assert(move _176, "index out of bounds: the length is {} but the index is {}", move _175, _174) -> bb75; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:34: 24:38
    }

    bb75: {
        _173 = &(*_1)[_174];             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:34: 24:38
        _168 = <T as PartialOrd>::lt(move _169, move _173) -> bb76; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:26: 24:39
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:24:26: 24:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialOrd>::lt}, val: Value(<ZST>) }
    }

    bb76: {
        _167 = Not(move _168);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:25: 24:39
        _166 = Not(move _167);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:17: 24:40
        switchInt(move _166) -> [0: bb78, otherwise: bb77]; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:17: 24:40
    }

    bb77: {
        _177 = core::panicking::panic(const "assertion failed: !(a[i] < a[j])"); // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:24:17: 24:40
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:24:17: 24:40
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb78: {
        _182 = _11;                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:29: 25:30
        _183 = Len((*_1));               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:27: 25:31
        _184 = Lt(_182, _183);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:27: 25:31
        assert(move _184, "index out of bounds: the length is {} but the index is {}", move _183, _182) -> bb79; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:27: 25:31
    }

    bb79: {
        _181 = &(*_1)[_182];             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:27: 25:31
        _186 = _21;                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:37: 25:38
        _187 = Len((*_1));               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:35: 25:39
        _188 = Lt(_186, _187);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:35: 25:39
        assert(move _188, "index out of bounds: the length is {} but the index is {}", move _187, _186) -> bb80; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:35: 25:39
    }

    bb80: {
        _185 = &(*_1)[_186];             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:35: 25:39
        _180 = <T as PartialOrd>::le(move _181, move _185) -> bb81; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:26: 25:40
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:25:26: 25:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialOrd>::le}, val: Value(<ZST>) }
    }

    bb81: {
        _179 = Not(move _180);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:25: 25:40
        _178 = Not(move _179);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:17: 25:41
        switchInt(move _178) -> [0: bb83, otherwise: bb82]; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:17: 25:41
    }

    bb82: {
        _189 = core::panicking::panic(const "assertion failed: !(a[i] <= a[j])"); // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:25:17: 25:41
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:25:17: 25:41
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb83: {
        _194 = _11;                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:29: 26:30
        _195 = Len((*_1));               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:27: 26:31
        _196 = Lt(_194, _195);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:27: 26:31
        assert(move _196, "index out of bounds: the length is {} but the index is {}", move _195, _194) -> bb84; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:27: 26:31
    }

    bb84: {
        _193 = &(*_1)[_194];             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:27: 26:31
        _198 = _21;                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:37: 26:38
        _199 = Len((*_1));               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:35: 26:39
        _200 = Lt(_198, _199);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:35: 26:39
        assert(move _200, "index out of bounds: the length is {} but the index is {}", move _199, _198) -> bb85; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:35: 26:39
    }

    bb85: {
        _197 = &(*_1)[_198];             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:35: 26:39
        _192 = <T as PartialEq>::eq(move _193, move _197) -> bb86; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:26: 26:40
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:26:26: 26:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb86: {
        _191 = Not(move _192);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:25: 26:40
        _190 = Not(move _191);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:17: 26:41
        switchInt(move _190) -> [0: bb88, otherwise: bb87]; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:17: 26:41
    }

    bb87: {
        _201 = core::panicking::panic(const "assertion failed: !(a[i] == a[j])"); // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:26:17: 26:41
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:26:17: 26:41
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb88: {
        _205 = _11;                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:27: 27:28
        _206 = Len((*_1));               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:25: 27:29
        _207 = Lt(_205, _206);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:25: 27:29
        assert(move _207, "index out of bounds: the length is {} but the index is {}", move _206, _205) -> bb89; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:25: 27:29
    }

    bb89: {
        _204 = &(*_1)[_205];             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:25: 27:29
        _209 = _21;                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:35: 27:36
        _210 = Len((*_1));               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:33: 27:37
        _211 = Lt(_209, _210);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:33: 27:37
        assert(move _211, "index out of bounds: the length is {} but the index is {}", move _210, _209) -> bb90; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:33: 27:37
    }

    bb90: {
        _208 = &(*_1)[_209];             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:33: 27:37
        _203 = <T as PartialEq>::ne(move _204, move _208) -> bb91; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:25: 27:37
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:27:25: 27:37
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb91: {
        _202 = Not(move _203);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:17: 27:38
        switchInt(move _202) -> [0: bb93, otherwise: bb92]; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:17: 27:38
    }

    bb92: {
        _212 = core::panicking::panic(const "assertion failed: a[i] != a[j]"); // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:27:17: 27:38
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:27:17: 27:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb93: {
        _216 = _11;                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:27: 28:28
        _217 = Len((*_1));               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:25: 28:29
        _218 = Lt(_216, _217);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:25: 28:29
        assert(move _218, "index out of bounds: the length is {} but the index is {}", move _217, _216) -> bb94; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:25: 28:29
    }

    bb94: {
        _215 = &(*_1)[_216];             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:25: 28:29
        _220 = _21;                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:35: 28:36
        _221 = Len((*_1));               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:33: 28:37
        _222 = Lt(_220, _221);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:33: 28:37
        assert(move _222, "index out of bounds: the length is {} but the index is {}", move _221, _220) -> bb95; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:33: 28:37
    }

    bb95: {
        _219 = &(*_1)[_220];             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:33: 28:37
        _214 = <T as PartialOrd>::ge(move _215, move _219) -> bb96; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:25: 28:37
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:28:25: 28:37
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialOrd>::ge}, val: Value(<ZST>) }
    }

    bb96: {
        _213 = Not(move _214);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:17: 28:38
        switchInt(move _213) -> [0: bb98, otherwise: bb97]; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:17: 28:38
    }

    bb97: {
        _223 = core::panicking::panic(const "assertion failed: a[i] >= a[j]"); // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:28:17: 28:38
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:28:17: 28:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb98: {
        _227 = _11;                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:27: 29:28
        _228 = Len((*_1));               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:25: 29:29
        _229 = Lt(_227, _228);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:25: 29:29
        assert(move _229, "index out of bounds: the length is {} but the index is {}", move _228, _227) -> bb99; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:25: 29:29
    }

    bb99: {
        _226 = &(*_1)[_227];             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:25: 29:29
        _231 = _21;                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:34: 29:35
        _232 = Len((*_1));               // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:32: 29:36
        _233 = Lt(_231, _232);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:32: 29:36
        assert(move _233, "index out of bounds: the length is {} but the index is {}", move _232, _231) -> bb100; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:32: 29:36
    }

    bb100: {
        _230 = &(*_1)[_231];             // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:32: 29:36
        _225 = <T as PartialOrd>::gt(move _226, move _230) -> bb101; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:25: 29:36
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:29:25: 29:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialOrd>::gt}, val: Value(<ZST>) }
    }

    bb101: {
        _224 = Not(move _225);           // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:17: 29:37
        switchInt(move _224) -> [0: bb8, otherwise: bb102]; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:17: 29:37
    }

    bb102: {
        _234 = core::panicking::panic(const "assertion failed: a[i] > a[j]"); // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:29:17: 29:37
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:29:17: 29:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn <impl at ui/stdlib-unit-tests/raw-fat-ptr.rs:36:1: 36:18>::foo(_1: &T) -> usize {
    debug self => _1;                    // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:37:12: 37:17
    let mut _0: usize;                   // return place in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:37:22: 37:27

    bb0: {
        _0 = std::mem::size_of::<T>() -> bb1; // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:38:9: 38:28
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:38:9: 38:26
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:39:6: 39:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:45:11: 45:11
    let mut _1: [u8; 5];                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:46:9: 46:18
    let mut _4: std::boxed::Box<[*const [u8]]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: std::boxed::Box<[*const [u8]; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: std::boxed::Box<[*const [u8]; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _10: *const [u8];            // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:9: 53:21
    let _11: &[u8];                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:9: 53:21
    let _12: &[u8];                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:10: 53:21
    let mut _13: &[u8; 5];               // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:10: 53:15
    let mut _14: std::ops::Range<usize>; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:16: 53:20
    let mut _15: *const [u8];            // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:23: 53:35
    let _16: &[u8];                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:23: 53:35
    let _17: &[u8];                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:24: 53:35
    let mut _18: &[u8; 5];               // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:24: 53:29
    let mut _19: std::ops::Range<usize>; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:30: 53:34
    let mut _20: *const [u8];            // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:37: 53:43
    let mut _21: *const [u8; 5];         // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:37: 53:43
    let _22: &[u8; 5];                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:37: 53:43
    let mut _23: *const [u8];            // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:45: 53:56
    let _24: &[u8];                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:45: 53:56
    let _25: &[u8];                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:46: 53:56
    let mut _26: &[u8; 5];               // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:46: 53:51
    let mut _27: std::ops::RangeFrom<usize>; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:52: 53:55
    let mut _29: *const u8;              // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:56:22: 56:56
    let mut _30: *const [u8];            // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:56:22: 56:43
    let mut _31: *const [u8; 5];         // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:56:22: 56:28
    let _32: &[u8; 5];                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:56:22: 56:28
    let mut _34: *const u8;              // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:57:23: 57:58
    let mut _35: *const [u8];            // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:57:23: 57:45
    let mut _36: *const [u8; 5];         // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:57:23: 57:30
    let _37: &[u8; 5];                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:57:23: 57:30
    let mut _38: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:58:8: 58:32
    let mut _39: usize;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:58:8: 58:19
    let mut _40: usize;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:58:22: 58:32
    let _41: ();                         // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:59:9: 59:32
    let mut _42: &mut std::vec::Vec<*const [u8]>; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:59:9: 59:32
    let mut _43: *const [u8];            // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:59:24: 59:31
    let mut _44: *const [u8; 5];         // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:59:24: 59:31
    let _45: &[u8; 5];                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:59:24: 59:31
    let _46: ();                         // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:61:9: 61:27
    let mut _47: &mut std::vec::Vec<*const [u8]>; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:61:9: 61:27
    let mut _48: *const [u8];            // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:61:19: 61:26
    let mut _49: *const [u8; 5];         // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:61:19: 61:26
    let _50: &[u8; 5];                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:61:19: 61:26
    let _51: ();                         // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:63:5: 63:26
    let mut _52: &[*const [u8]];         // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:63:20: 63:25
    let _53: &[*const [u8]];             // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:63:20: 63:25
    let mut _54: &std::vec::Vec<*const [u8]>; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:63:20: 63:25
    let _55: &std::vec::Vec<*const [u8]>; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:63:20: 63:25
    let mut _57: std::boxed::Box<[*mut [u8]]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _58: std::boxed::Box<[*mut [u8]; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _59: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _60: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _61: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _62: std::boxed::Box<[*mut [u8]; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _63: *mut [u8];              // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:9: 67:25
    let mut _64: &mut [u8];              // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:9: 67:25
    let mut _65: &mut [u8];              // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:14: 67:25
    let mut _66: &mut [u8; 5];           // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:14: 67:19
    let mut _67: std::ops::Range<usize>; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:20: 67:24
    let mut _68: *mut [u8];              // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:27: 67:43
    let mut _69: &mut [u8];              // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:27: 67:43
    let mut _70: &mut [u8];              // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:32: 67:43
    let mut _71: &mut [u8; 5];           // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:32: 67:37
    let mut _72: std::ops::Range<usize>; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:38: 67:42
    let mut _73: *mut [u8];              // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:45: 67:55
    let mut _74: *mut [u8; 5];           // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:45: 67:55
    let mut _75: &mut [u8; 5];           // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:45: 67:55
    let mut _76: *mut [u8];              // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:57: 67:72
    let mut _77: &mut [u8];              // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:57: 67:72
    let mut _78: &mut [u8];              // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:62: 67:72
    let mut _79: &mut [u8; 5];           // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:62: 67:67
    let mut _80: std::ops::RangeFrom<usize>; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:68: 67:71
    let mut _82: *mut u8;                // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:70:22: 70:56
    let mut _83: *mut [u8];              // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:70:22: 70:45
    let mut _84: *mut [u8; 5];           // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:70:22: 70:32
    let mut _85: &mut [u8; 5];           // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:70:22: 70:32
    let mut _87: *mut u8;                // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:71:23: 71:58
    let mut _88: *mut [u8];              // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:71:23: 71:47
    let mut _89: *mut [u8; 5];           // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:71:23: 71:34
    let mut _90: &mut [u8; 5];           // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:71:23: 71:34
    let mut _91: bool;                   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:72:8: 72:32
    let mut _92: usize;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:72:8: 72:19
    let mut _93: usize;                  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:72:22: 72:32
    let _94: ();                         // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:73:9: 73:36
    let mut _95: &mut std::vec::Vec<*mut [u8]>; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:73:9: 73:36
    let mut _96: *mut [u8];              // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:73:24: 73:35
    let mut _97: *mut [u8; 5];           // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:73:24: 73:35
    let mut _98: &mut [u8; 5];           // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:73:24: 73:35
    let _99: ();                         // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:75:9: 75:31
    let mut _100: &mut std::vec::Vec<*mut [u8]>; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:75:9: 75:31
    let mut _101: *mut [u8];             // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:75:19: 75:30
    let mut _102: *mut [u8; 5];          // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:75:19: 75:30
    let mut _103: &mut [u8; 5];          // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:75:19: 75:30
    let _104: ();                        // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:77:5: 77:26
    let mut _105: &[*mut [u8]];          // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:77:20: 77:25
    let _106: &[*mut [u8]];              // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:77:20: 77:25
    let mut _107: &std::vec::Vec<*mut [u8]>; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:77:20: 77:25
    let _108: &std::vec::Vec<*mut [u8]>; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:77:20: 77:25
    let mut _112: &mut [*const dyn Foo; 4]; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:83:38: 86:6
    let mut _113: &mut [*const dyn Foo; 4]; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:83:38: 86:6
    let mut _114: [*const dyn Foo; 4];   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:83:43: 86:6
    let mut _115: *const dyn Foo;        // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:84:9: 84:13
    let mut _116: *const (u8, u8);       // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:84:9: 84:13
    let _117: &(u8, u8);                 // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:84:9: 84:13
    let mut _118: *const dyn Foo;        // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:84:15: 84:21
    let mut _119: *const u8;             // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:84:15: 84:21
    let _120: &u8;                       // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:84:15: 84:21
    let mut _121: *const dyn Foo;        // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:85:9: 85:14
    let mut _122: *const (u32, u32);     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:85:9: 85:14
    let _123: &(u32, u32);               // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:85:9: 85:14
    let mut _124: *const dyn Foo;        // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:85:16: 85:23
    let mut _125: *const u32;            // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:85:16: 85:23
    let _126: &u32;                      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:85:16: 85:23
    let _127: ();                        // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:87:5: 91:7
    let mut _128: &mut [*const dyn Foo]; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:87:5: 91:7
    let mut _129: [closure@ui/stdlib-unit-tests/raw-fat-ptr.rs:87:17: 87:22]; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:87:17: 91:6
    let _130: ();                        // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:92:5: 92:24
    let mut _131: &[*const dyn Foo];     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:92:20: 92:23
    let mut _133: &mut [*mut dyn Foo; 4]; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:95:36: 98:6
    let mut _134: &mut [*mut dyn Foo; 4]; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:95:36: 98:6
    let mut _135: [*mut dyn Foo; 4];     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:95:41: 98:6
    let mut _136: *mut dyn Foo;          // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:96:9: 96:17
    let mut _137: *mut (u8, u8);         // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:96:9: 96:17
    let mut _138: &mut (u8, u8);         // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:96:9: 96:17
    let mut _139: *mut dyn Foo;          // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:96:19: 96:29
    let mut _140: *mut u8;               // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:96:19: 96:29
    let mut _141: &mut u8;               // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:96:19: 96:29
    let mut _142: *mut dyn Foo;          // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:97:9: 97:18
    let mut _143: *mut (u32, u32);       // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:97:9: 97:18
    let mut _144: &mut (u32, u32);       // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:97:9: 97:18
    let mut _145: *mut dyn Foo;          // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:97:20: 97:31
    let mut _146: *mut u32;              // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:97:20: 97:31
    let mut _147: &mut u32;              // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:97:20: 97:31
    let _148: ();                        // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:99:5: 103:7
    let mut _149: &mut [*mut dyn Foo];   // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:99:5: 103:7
    let mut _150: [closure@ui/stdlib-unit-tests/raw-fat-ptr.rs:99:17: 99:22]; // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:99:17: 103:6
    let _151: ();                        // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:104:5: 104:24
    let mut _152: &[*mut dyn Foo];       // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:104:20: 104:23
    let mut _154: S<[u8; 2]>;            // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:110:9: 110:21
    let mut _155: [u8; 2];               // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:110:14: 110:20
    let mut _156: S<[u8; 3]>;            // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:111:9: 111:28
    let mut _157: [u8; 3];               // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:111:15: 111:27
    let mut _158: S<[u8; 2]>;            // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:112:9: 112:21
    let mut _159: [u8; 2];               // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:112:14: 112:20
    let _160: ();                        // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:114:5: 118:7
    let mut _161: &[*const S<[u8]>];     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:114:20: 118:6
    let mut _162: &[*const S<[u8]>; 3];  // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:114:20: 118:6
    let _163: &[*const S<[u8]>; 3];      // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:114:20: 118:6
    let _164: [*const S<[u8]>; 3];       // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:114:21: 118:6
    let mut _165: *const S<[u8]>;        // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:115:9: 115:32
    let mut _166: *const S<[u8; 2]>;     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:115:9: 115:14
    let _167: &S<[u8; 2]>;               // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:115:9: 115:14
    let mut _168: *const S<[u8]>;        // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:116:9: 116:32
    let mut _169: *const S<[u8; 3]>;     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:116:9: 116:14
    let _170: &S<[u8; 3]>;               // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:116:9: 116:14
    let mut _171: *const S<[u8]>;        // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:117:9: 117:32
    let mut _172: *const S<[u8; 2]>;     // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:117:9: 117:14
    let _173: &S<[u8; 2]>;               // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:117:9: 117:14
    let mut _174: ();                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _175: ();                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _176: *const [*const [u8]; 4]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _177: *const [*mut [u8]; 4]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug array => _1;               // in scope 1 at ui/stdlib-unit-tests/raw-fat-ptr.rs:46:9: 46:18
        let mut _2: [u8; 5];             // in scope 1 at ui/stdlib-unit-tests/raw-fat-ptr.rs:47:9: 47:19
        scope 2 {
            debug array2 => _2;          // in scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:47:9: 47:19
            let mut _3: std::vec::Vec<*const [u8]>; // in scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:52:9: 52:17
            scope 3 {
                debug ptrs => _3;        // in scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:52:9: 52:17
                let _28: usize;          // in scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:56:9: 56:19
                scope 5 {
                    debug array_addr => _28; // in scope 5 at ui/stdlib-unit-tests/raw-fat-ptr.rs:56:9: 56:19
                    let _33: usize;      // in scope 5 at ui/stdlib-unit-tests/raw-fat-ptr.rs:57:9: 57:20
                    scope 6 {
                        debug array2_addr => _33; // in scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:57:9: 57:20
                        let mut _56: std::vec::Vec<*mut [u8]>; // in scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:66:9: 66:17
                        scope 7 {
                            debug ptrs => _56; // in scope 7 at ui/stdlib-unit-tests/raw-fat-ptr.rs:66:9: 66:17
                            let _81: usize; // in scope 7 at ui/stdlib-unit-tests/raw-fat-ptr.rs:70:9: 70:19
                            scope 9 {
                                debug array_addr => _81; // in scope 9 at ui/stdlib-unit-tests/raw-fat-ptr.rs:70:9: 70:19
                                let _86: usize; // in scope 9 at ui/stdlib-unit-tests/raw-fat-ptr.rs:71:9: 71:20
                                scope 10 {
                                    debug array2_addr => _86; // in scope 10 at ui/stdlib-unit-tests/raw-fat-ptr.rs:71:9: 71:20
                                    let mut _109: (u8, u8); // in scope 10 at ui/stdlib-unit-tests/raw-fat-ptr.rs:79:9: 79:16
                                    scope 11 {
                                        debug u8_ => _109; // in scope 11 at ui/stdlib-unit-tests/raw-fat-ptr.rs:79:9: 79:16
                                        let mut _110: (u32, u32); // in scope 11 at ui/stdlib-unit-tests/raw-fat-ptr.rs:80:9: 80:17
                                        scope 12 {
                                            debug u32_ => _110; // in scope 12 at ui/stdlib-unit-tests/raw-fat-ptr.rs:80:9: 80:17
                                            let _111: &mut [*const dyn Foo]; // in scope 12 at ui/stdlib-unit-tests/raw-fat-ptr.rs:83:9: 83:12
                                            scope 13 {
                                                debug buf => _111; // in scope 13 at ui/stdlib-unit-tests/raw-fat-ptr.rs:83:9: 83:12
                                                let _132: &mut [*mut dyn Foo]; // in scope 13 at ui/stdlib-unit-tests/raw-fat-ptr.rs:95:9: 95:12
                                                scope 14 {
                                                    debug buf => _132; // in scope 14 at ui/stdlib-unit-tests/raw-fat-ptr.rs:95:9: 95:12
                                                    let _153: (S<[u8; 2]>, S<[u8; 3]>, S<[u8; 2]>); // in scope 14 at ui/stdlib-unit-tests/raw-fat-ptr.rs:107:9: 107:11
                                                    scope 15 {
                                                        debug ss => _153; // in scope 15 at ui/stdlib-unit-tests/raw-fat-ptr.rs:107:9: 107:11
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        scope 8 {
                        }
                    }
                }
            }
            scope 4 {
            }
        }
    }

    bb0: {
        _1 = [const 0_u8, const 1_u8, const 2_u8, const 3_u8, const 4_u8]; // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:46:21: 46:32
        _2 = [const 5_u8, const 6_u8, const 7_u8, const 8_u8, const 9_u8]; // scope 1 at ui/stdlib-unit-tests/raw-fat-ptr.rs:47:22: 47:33
        _6 = const 64_usize;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = const 8_usize;              // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _8 = alloc::alloc::exchange_malloc(move _6, move _7) -> bb1; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = ShallowInitBox(move _8, [*const [u8]; 4]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _13 = &_1;                       // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:10: 53:15
        _14 = std::ops::Range::<usize> { start: const 0_usize, end: const 0_usize }; // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:16: 53:20
        _12 = <[u8; 5] as Index<std::ops::Range<usize>>>::index(move _13, move _14) -> [return: bb2, unwind: bb32]; // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:10: 53:21
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:53:10: 53:21
                                         // + literal: Const { ty: for<'a> fn(&'a [u8; 5], std::ops::Range<usize>) -> &'a <[u8; 5] as Index<std::ops::Range<usize>>>::Output {<[u8; 5] as Index<std::ops::Range<usize>>>::index}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = _12;                       // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:9: 53:21
        _10 = &raw const (*_11);         // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:9: 53:21
        _18 = &_1;                       // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:24: 53:29
        _19 = std::ops::Range::<usize> { start: const 0_usize, end: const 1_usize }; // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:30: 53:34
        _17 = <[u8; 5] as Index<std::ops::Range<usize>>>::index(move _18, move _19) -> [return: bb3, unwind: bb32]; // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:24: 53:35
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:53:24: 53:35
                                         // + literal: Const { ty: for<'a> fn(&'a [u8; 5], std::ops::Range<usize>) -> &'a <[u8; 5] as Index<std::ops::Range<usize>>>::Output {<[u8; 5] as Index<std::ops::Range<usize>>>::index}, val: Value(<ZST>) }
    }

    bb3: {
        _16 = _17;                       // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:23: 53:35
        _15 = &raw const (*_16);         // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:23: 53:35
        _22 = &_1;                       // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:37: 53:43
        _21 = &raw const (*_22);         // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:37: 53:43
        _20 = move _21 as *const [u8] (Pointer(Unsize)); // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:37: 53:43
        _26 = &_1;                       // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:46: 53:51
        _27 = const RangeFrom::<usize> {{ start: 1_usize }}; // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:52: 53:55
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:53:52: 53:55
                                         // + literal: Const { ty: RangeFrom<usize>, val: Value(Scalar(0x0000000000000001)) }
        _25 = <[u8; 5] as Index<RangeFrom<usize>>>::index(move _26, move _27) -> [return: bb4, unwind: bb32]; // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:46: 53:56
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:53:46: 53:56
                                         // + literal: Const { ty: for<'a> fn(&'a [u8; 5], RangeFrom<usize>) -> &'a <[u8; 5] as Index<RangeFrom<usize>>>::Output {<[u8; 5] as Index<RangeFrom<usize>>>::index}, val: Value(<ZST>) }
    }

    bb4: {
        _24 = _25;                       // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:45: 53:56
        _23 = &raw const (*_24);         // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:53:45: 53:56
        _176 = (((_9.0: std::ptr::Unique<[*const [u8]; 4]>).0: std::ptr::NonNull<[*const [u8]; 4]>).0: *const [*const [u8]; 4]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_176) = [move _10, move _15, move _20, move _23]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _5 = move _9;                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _4 = move _5 as std::boxed::Box<[*const [u8]]> (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _3 = slice::<impl [*const [u8]]>::into_vec::<std::alloc::Global>(move _4) -> bb5; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[*const [u8]]>) -> Vec<*const [u8]> {slice::<impl [*const [u8]]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb5: {
        _32 = &_1;                       // scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:56:22: 56:28
        _31 = &raw const (*_32);         // scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:56:22: 56:28
        _30 = move _31 as *const [u8] (Pointer(Unsize)); // scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:56:22: 56:28
        _29 = move _30 as *const u8 (PtrToPtr); // scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:56:22: 56:56
        _28 = move _29 as usize (PointerExposeAddress); // scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:56:22: 56:65
        _37 = &_2;                       // scope 5 at ui/stdlib-unit-tests/raw-fat-ptr.rs:57:23: 57:30
        _36 = &raw const (*_37);         // scope 5 at ui/stdlib-unit-tests/raw-fat-ptr.rs:57:23: 57:30
        _35 = move _36 as *const [u8] (Pointer(Unsize)); // scope 5 at ui/stdlib-unit-tests/raw-fat-ptr.rs:57:23: 57:30
        _34 = move _35 as *const u8 (PtrToPtr); // scope 5 at ui/stdlib-unit-tests/raw-fat-ptr.rs:57:23: 57:58
        _33 = move _34 as usize (PointerExposeAddress); // scope 5 at ui/stdlib-unit-tests/raw-fat-ptr.rs:57:23: 57:67
        _39 = _33;                       // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:58:8: 58:19
        _40 = _28;                       // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:58:22: 58:32
        _38 = Lt(move _39, move _40);    // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:58:8: 58:32
        switchInt(move _38) -> [0: bb7, otherwise: bb6]; // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:58:8: 58:32
    }

    bb6: {
        _42 = &mut _3;                   // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:59:9: 59:32
        _45 = &_2;                       // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:59:24: 59:31
        _44 = &raw const (*_45);         // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:59:24: 59:31
        _43 = move _44 as *const [u8] (Pointer(Unsize)); // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:59:24: 59:31
        _41 = Vec::<*const [u8]>::insert(move _42, const 0_usize, move _43) -> [return: bb33, unwind: bb29]; // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:59:9: 59:32
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:59:14: 59:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<*const [u8]>, usize, *const [u8]) {Vec::<*const [u8]>::insert}, val: Value(<ZST>) }
    }

    bb7: {
        _47 = &mut _3;                   // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:61:9: 61:27
        _50 = &_2;                       // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:61:19: 61:26
        _49 = &raw const (*_50);         // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:61:19: 61:26
        _48 = move _49 as *const [u8] (Pointer(Unsize)); // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:61:19: 61:26
        _46 = Vec::<*const [u8]>::push(move _47, move _48) -> [return: bb34, unwind: bb29]; // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:61:9: 61:27
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:61:14: 61:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<*const [u8]>, *const [u8]) {Vec::<*const [u8]>::push}, val: Value(<ZST>) }
    }

    bb8: {
        _55 = &_3;                       // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:63:20: 63:25
        _54 = _55;                       // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:63:20: 63:25
        _53 = <Vec<*const [u8]> as Deref>::deref(move _54) -> [return: bb9, unwind: bb29]; // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:63:20: 63:25
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:63:20: 63:25
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<*const [u8]>) -> &'a <Vec<*const [u8]> as Deref>::Target {<Vec<*const [u8]> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb9: {
        _52 = _53;                       // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:63:20: 63:25
        _51 = assert_inorder::<*const [u8]>(move _52) -> [return: bb10, unwind: bb29]; // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:63:5: 63:26
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:63:5: 63:19
                                         // + literal: Const { ty: for<'a> fn(&'a [*const [u8]]) {assert_inorder::<*const [u8]>}, val: Value(<ZST>) }
    }

    bb10: {
        _59 = const 64_usize;            // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _60 = const 8_usize;             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _61 = alloc::alloc::exchange_malloc(move _59, move _60) -> [return: bb11, unwind: bb29]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb11: {
        _62 = ShallowInitBox(move _61, [*mut [u8]; 4]); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _66 = &mut _1;                   // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:14: 67:19
        _67 = std::ops::Range::<usize> { start: const 0_usize, end: const 0_usize }; // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:20: 67:24
        _65 = <[u8; 5] as IndexMut<std::ops::Range<usize>>>::index_mut(move _66, move _67) -> [return: bb12, unwind: bb31]; // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:14: 67:25
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:67:14: 67:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut [u8; 5], std::ops::Range<usize>) -> &'a mut <[u8; 5] as Index<std::ops::Range<usize>>>::Output {<[u8; 5] as IndexMut<std::ops::Range<usize>>>::index_mut}, val: Value(<ZST>) }
    }

    bb12: {
        _64 = &mut (*_65);               // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:9: 67:25
        _63 = &raw mut (*_64);           // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:9: 67:25
        _71 = &mut _1;                   // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:32: 67:37
        _72 = std::ops::Range::<usize> { start: const 0_usize, end: const 1_usize }; // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:38: 67:42
        _70 = <[u8; 5] as IndexMut<std::ops::Range<usize>>>::index_mut(move _71, move _72) -> [return: bb13, unwind: bb31]; // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:32: 67:43
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:67:32: 67:43
                                         // + literal: Const { ty: for<'a> fn(&'a mut [u8; 5], std::ops::Range<usize>) -> &'a mut <[u8; 5] as Index<std::ops::Range<usize>>>::Output {<[u8; 5] as IndexMut<std::ops::Range<usize>>>::index_mut}, val: Value(<ZST>) }
    }

    bb13: {
        _69 = &mut (*_70);               // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:27: 67:43
        _68 = &raw mut (*_69);           // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:27: 67:43
        _75 = &mut _1;                   // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:45: 67:55
        _74 = &raw mut (*_75);           // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:45: 67:55
        _73 = move _74 as *mut [u8] (Pointer(Unsize)); // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:45: 67:55
        _79 = &mut _1;                   // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:62: 67:67
        _80 = const RangeFrom::<usize> {{ start: 1_usize }}; // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:68: 67:71
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:67:68: 67:71
                                         // + literal: Const { ty: RangeFrom<usize>, val: Value(Scalar(0x0000000000000001)) }
        _78 = <[u8; 5] as IndexMut<RangeFrom<usize>>>::index_mut(move _79, move _80) -> [return: bb14, unwind: bb31]; // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:62: 67:72
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:67:62: 67:72
                                         // + literal: Const { ty: for<'a> fn(&'a mut [u8; 5], RangeFrom<usize>) -> &'a mut <[u8; 5] as Index<RangeFrom<usize>>>::Output {<[u8; 5] as IndexMut<RangeFrom<usize>>>::index_mut}, val: Value(<ZST>) }
    }

    bb14: {
        _77 = &mut (*_78);               // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:57: 67:72
        _76 = &raw mut (*_77);           // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:67:57: 67:72
        _177 = (((_62.0: std::ptr::Unique<[*mut [u8]; 4]>).0: std::ptr::NonNull<[*mut [u8]; 4]>).0: *const [*mut [u8]; 4]); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_177) = [move _63, move _68, move _73, move _76]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _58 = move _62;                  // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _57 = move _58 as std::boxed::Box<[*mut [u8]]> (Pointer(Unsize)); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _56 = slice::<impl [*mut [u8]]>::into_vec::<std::alloc::Global>(move _57) -> [return: bb15, unwind: bb29]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(Box<[*mut [u8]]>) -> Vec<*mut [u8]> {slice::<impl [*mut [u8]]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb15: {
        _85 = &mut _1;                   // scope 7 at ui/stdlib-unit-tests/raw-fat-ptr.rs:70:22: 70:32
        _84 = &raw mut (*_85);           // scope 7 at ui/stdlib-unit-tests/raw-fat-ptr.rs:70:22: 70:32
        _83 = move _84 as *mut [u8] (Pointer(Unsize)); // scope 7 at ui/stdlib-unit-tests/raw-fat-ptr.rs:70:22: 70:32
        _82 = move _83 as *mut u8 (PtrToPtr); // scope 7 at ui/stdlib-unit-tests/raw-fat-ptr.rs:70:22: 70:56
        _81 = move _82 as usize (PointerExposeAddress); // scope 7 at ui/stdlib-unit-tests/raw-fat-ptr.rs:70:22: 70:65
        _90 = &mut _2;                   // scope 9 at ui/stdlib-unit-tests/raw-fat-ptr.rs:71:23: 71:34
        _89 = &raw mut (*_90);           // scope 9 at ui/stdlib-unit-tests/raw-fat-ptr.rs:71:23: 71:34
        _88 = move _89 as *mut [u8] (Pointer(Unsize)); // scope 9 at ui/stdlib-unit-tests/raw-fat-ptr.rs:71:23: 71:34
        _87 = move _88 as *mut u8 (PtrToPtr); // scope 9 at ui/stdlib-unit-tests/raw-fat-ptr.rs:71:23: 71:58
        _86 = move _87 as usize (PointerExposeAddress); // scope 9 at ui/stdlib-unit-tests/raw-fat-ptr.rs:71:23: 71:67
        _92 = _86;                       // scope 10 at ui/stdlib-unit-tests/raw-fat-ptr.rs:72:8: 72:19
        _93 = _81;                       // scope 10 at ui/stdlib-unit-tests/raw-fat-ptr.rs:72:22: 72:32
        _91 = Lt(move _92, move _93);    // scope 10 at ui/stdlib-unit-tests/raw-fat-ptr.rs:72:8: 72:32
        switchInt(move _91) -> [0: bb17, otherwise: bb16]; // scope 10 at ui/stdlib-unit-tests/raw-fat-ptr.rs:72:8: 72:32
    }

    bb16: {
        _95 = &mut _56;                  // scope 10 at ui/stdlib-unit-tests/raw-fat-ptr.rs:73:9: 73:36
        _98 = &mut _2;                   // scope 10 at ui/stdlib-unit-tests/raw-fat-ptr.rs:73:24: 73:35
        _97 = &raw mut (*_98);           // scope 10 at ui/stdlib-unit-tests/raw-fat-ptr.rs:73:24: 73:35
        _96 = move _97 as *mut [u8] (Pointer(Unsize)); // scope 10 at ui/stdlib-unit-tests/raw-fat-ptr.rs:73:24: 73:35
        _94 = Vec::<*mut [u8]>::insert(move _95, const 0_usize, move _96) -> [return: bb35, unwind: bb28]; // scope 10 at ui/stdlib-unit-tests/raw-fat-ptr.rs:73:9: 73:36
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:73:14: 73:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<*mut [u8]>, usize, *mut [u8]) {Vec::<*mut [u8]>::insert}, val: Value(<ZST>) }
    }

    bb17: {
        _100 = &mut _56;                 // scope 10 at ui/stdlib-unit-tests/raw-fat-ptr.rs:75:9: 75:31
        _103 = &mut _2;                  // scope 10 at ui/stdlib-unit-tests/raw-fat-ptr.rs:75:19: 75:30
        _102 = &raw mut (*_103);         // scope 10 at ui/stdlib-unit-tests/raw-fat-ptr.rs:75:19: 75:30
        _101 = move _102 as *mut [u8] (Pointer(Unsize)); // scope 10 at ui/stdlib-unit-tests/raw-fat-ptr.rs:75:19: 75:30
        _99 = Vec::<*mut [u8]>::push(move _100, move _101) -> [return: bb36, unwind: bb28]; // scope 10 at ui/stdlib-unit-tests/raw-fat-ptr.rs:75:9: 75:31
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:75:14: 75:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<*mut [u8]>, *mut [u8]) {Vec::<*mut [u8]>::push}, val: Value(<ZST>) }
    }

    bb18: {
        _108 = &_56;                     // scope 10 at ui/stdlib-unit-tests/raw-fat-ptr.rs:77:20: 77:25
        _107 = _108;                     // scope 10 at ui/stdlib-unit-tests/raw-fat-ptr.rs:77:20: 77:25
        _106 = <Vec<*mut [u8]> as Deref>::deref(move _107) -> [return: bb19, unwind: bb28]; // scope 10 at ui/stdlib-unit-tests/raw-fat-ptr.rs:77:20: 77:25
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:77:20: 77:25
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<*mut [u8]>) -> &'a <Vec<*mut [u8]> as Deref>::Target {<Vec<*mut [u8]> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb19: {
        _105 = _106;                     // scope 10 at ui/stdlib-unit-tests/raw-fat-ptr.rs:77:20: 77:25
        _104 = assert_inorder::<*mut [u8]>(move _105) -> [return: bb20, unwind: bb28]; // scope 10 at ui/stdlib-unit-tests/raw-fat-ptr.rs:77:5: 77:26
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:77:5: 77:19
                                         // + literal: Const { ty: for<'a> fn(&'a [*mut [u8]]) {assert_inorder::<*mut [u8]>}, val: Value(<ZST>) }
    }

    bb20: {
        _109 = (const 0_u8, const 1_u8); // scope 10 at ui/stdlib-unit-tests/raw-fat-ptr.rs:79:19: 79:29
        _110 = (const 4_u32, const 5_u32); // scope 11 at ui/stdlib-unit-tests/raw-fat-ptr.rs:80:20: 80:32
        _117 = &_109;                    // scope 12 at ui/stdlib-unit-tests/raw-fat-ptr.rs:84:9: 84:13
        _116 = &raw const (*_117);       // scope 12 at ui/stdlib-unit-tests/raw-fat-ptr.rs:84:9: 84:13
        _115 = move _116 as *const dyn Foo (Pointer(Unsize)); // scope 12 at ui/stdlib-unit-tests/raw-fat-ptr.rs:84:9: 84:13
        _120 = &(_109.0: u8);            // scope 12 at ui/stdlib-unit-tests/raw-fat-ptr.rs:84:15: 84:21
        _119 = &raw const (*_120);       // scope 12 at ui/stdlib-unit-tests/raw-fat-ptr.rs:84:15: 84:21
        _118 = move _119 as *const dyn Foo (Pointer(Unsize)); // scope 12 at ui/stdlib-unit-tests/raw-fat-ptr.rs:84:15: 84:21
        _123 = &_110;                    // scope 12 at ui/stdlib-unit-tests/raw-fat-ptr.rs:85:9: 85:14
        _122 = &raw const (*_123);       // scope 12 at ui/stdlib-unit-tests/raw-fat-ptr.rs:85:9: 85:14
        _121 = move _122 as *const dyn Foo (Pointer(Unsize)); // scope 12 at ui/stdlib-unit-tests/raw-fat-ptr.rs:85:9: 85:14
        _126 = &(_110.0: u32);           // scope 12 at ui/stdlib-unit-tests/raw-fat-ptr.rs:85:16: 85:23
        _125 = &raw const (*_126);       // scope 12 at ui/stdlib-unit-tests/raw-fat-ptr.rs:85:16: 85:23
        _124 = move _125 as *const dyn Foo (Pointer(Unsize)); // scope 12 at ui/stdlib-unit-tests/raw-fat-ptr.rs:85:16: 85:23
        _114 = [move _115, move _118, move _121, move _124]; // scope 12 at ui/stdlib-unit-tests/raw-fat-ptr.rs:83:43: 86:6
        _113 = &mut _114;                // scope 12 at ui/stdlib-unit-tests/raw-fat-ptr.rs:83:38: 86:6
        _112 = &mut (*_113);             // scope 12 at ui/stdlib-unit-tests/raw-fat-ptr.rs:83:38: 86:6
        _111 = move _112 as &mut [*const dyn Foo] (Pointer(Unsize)); // scope 12 at ui/stdlib-unit-tests/raw-fat-ptr.rs:83:38: 86:6
        _128 = &mut (*_111);             // scope 13 at ui/stdlib-unit-tests/raw-fat-ptr.rs:87:5: 91:7
        _127 = slice::<impl [*const dyn Foo]>::sort_by::<[closure@ui/stdlib-unit-tests/raw-fat-ptr.rs:87:17: 87:22]>(move _128, move _129) -> [return: bb21, unwind: bb28]; // scope 13 at ui/stdlib-unit-tests/raw-fat-ptr.rs:87:5: 91:7
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:87:9: 87:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut [*const dyn Foo], [closure@ui/stdlib-unit-tests/raw-fat-ptr.rs:87:17: 87:22]) {slice::<impl [*const dyn Foo]>::sort_by::<[closure@ui/stdlib-unit-tests/raw-fat-ptr.rs:87:17: 87:22]>}, val: Value(<ZST>) }
    }

    bb21: {
        _131 = &(*_111);                 // scope 13 at ui/stdlib-unit-tests/raw-fat-ptr.rs:92:20: 92:23
        _130 = assert_inorder::<*const dyn Foo>(move _131) -> [return: bb22, unwind: bb28]; // scope 13 at ui/stdlib-unit-tests/raw-fat-ptr.rs:92:5: 92:24
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:92:5: 92:19
                                         // + literal: Const { ty: for<'a> fn(&'a [*const dyn Foo]) {assert_inorder::<*const dyn Foo>}, val: Value(<ZST>) }
    }

    bb22: {
        _138 = &mut _109;                // scope 13 at ui/stdlib-unit-tests/raw-fat-ptr.rs:96:9: 96:17
        _137 = &raw mut (*_138);         // scope 13 at ui/stdlib-unit-tests/raw-fat-ptr.rs:96:9: 96:17
        _136 = move _137 as *mut dyn Foo (Pointer(Unsize)); // scope 13 at ui/stdlib-unit-tests/raw-fat-ptr.rs:96:9: 96:17
        _141 = &mut (_109.0: u8);        // scope 13 at ui/stdlib-unit-tests/raw-fat-ptr.rs:96:19: 96:29
        _140 = &raw mut (*_141);         // scope 13 at ui/stdlib-unit-tests/raw-fat-ptr.rs:96:19: 96:29
        _139 = move _140 as *mut dyn Foo (Pointer(Unsize)); // scope 13 at ui/stdlib-unit-tests/raw-fat-ptr.rs:96:19: 96:29
        _144 = &mut _110;                // scope 13 at ui/stdlib-unit-tests/raw-fat-ptr.rs:97:9: 97:18
        _143 = &raw mut (*_144);         // scope 13 at ui/stdlib-unit-tests/raw-fat-ptr.rs:97:9: 97:18
        _142 = move _143 as *mut dyn Foo (Pointer(Unsize)); // scope 13 at ui/stdlib-unit-tests/raw-fat-ptr.rs:97:9: 97:18
        _147 = &mut (_110.0: u32);       // scope 13 at ui/stdlib-unit-tests/raw-fat-ptr.rs:97:20: 97:31
        _146 = &raw mut (*_147);         // scope 13 at ui/stdlib-unit-tests/raw-fat-ptr.rs:97:20: 97:31
        _145 = move _146 as *mut dyn Foo (Pointer(Unsize)); // scope 13 at ui/stdlib-unit-tests/raw-fat-ptr.rs:97:20: 97:31
        _135 = [move _136, move _139, move _142, move _145]; // scope 13 at ui/stdlib-unit-tests/raw-fat-ptr.rs:95:41: 98:6
        _134 = &mut _135;                // scope 13 at ui/stdlib-unit-tests/raw-fat-ptr.rs:95:36: 98:6
        _133 = &mut (*_134);             // scope 13 at ui/stdlib-unit-tests/raw-fat-ptr.rs:95:36: 98:6
        _132 = move _133 as &mut [*mut dyn Foo] (Pointer(Unsize)); // scope 13 at ui/stdlib-unit-tests/raw-fat-ptr.rs:95:36: 98:6
        _149 = &mut (*_132);             // scope 14 at ui/stdlib-unit-tests/raw-fat-ptr.rs:99:5: 103:7
        _148 = slice::<impl [*mut dyn Foo]>::sort_by::<[closure@ui/stdlib-unit-tests/raw-fat-ptr.rs:99:17: 99:22]>(move _149, move _150) -> [return: bb23, unwind: bb28]; // scope 14 at ui/stdlib-unit-tests/raw-fat-ptr.rs:99:5: 103:7
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:99:9: 99:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut [*mut dyn Foo], [closure@ui/stdlib-unit-tests/raw-fat-ptr.rs:99:17: 99:22]) {slice::<impl [*mut dyn Foo]>::sort_by::<[closure@ui/stdlib-unit-tests/raw-fat-ptr.rs:99:17: 99:22]>}, val: Value(<ZST>) }
    }

    bb23: {
        _152 = &(*_132);                 // scope 14 at ui/stdlib-unit-tests/raw-fat-ptr.rs:104:20: 104:23
        _151 = assert_inorder::<*mut dyn Foo>(move _152) -> [return: bb24, unwind: bb28]; // scope 14 at ui/stdlib-unit-tests/raw-fat-ptr.rs:104:5: 104:24
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:104:5: 104:19
                                         // + literal: Const { ty: for<'a> fn(&'a [*mut dyn Foo]) {assert_inorder::<*mut dyn Foo>}, val: Value(<ZST>) }
    }

    bb24: {
        _155 = [const 8_u8, const 9_u8]; // scope 14 at ui/stdlib-unit-tests/raw-fat-ptr.rs:110:14: 110:20
        _154 = S::<[u8; 2]>(const 7_u32, move _155); // scope 14 at ui/stdlib-unit-tests/raw-fat-ptr.rs:110:9: 110:21
        _157 = [const 11_u8, const 12_u8, const 13_u8]; // scope 14 at ui/stdlib-unit-tests/raw-fat-ptr.rs:111:15: 111:27
        _156 = S::<[u8; 3]>(const 10_u32, move _157); // scope 14 at ui/stdlib-unit-tests/raw-fat-ptr.rs:111:9: 111:28
        _159 = [const 5_u8, const 6_u8]; // scope 14 at ui/stdlib-unit-tests/raw-fat-ptr.rs:112:14: 112:20
        _158 = S::<[u8; 2]>(const 4_u32, move _159); // scope 14 at ui/stdlib-unit-tests/raw-fat-ptr.rs:112:9: 112:21
        _153 = (move _154, move _156, move _158); // scope 14 at ui/stdlib-unit-tests/raw-fat-ptr.rs:109:28: 113:6
        _167 = &(_153.0: S<[u8; 2]>);    // scope 15 at ui/stdlib-unit-tests/raw-fat-ptr.rs:115:9: 115:14
        _166 = &raw const (*_167);       // scope 15 at ui/stdlib-unit-tests/raw-fat-ptr.rs:115:9: 115:14
        _165 = move _166 as *const S<[u8]> (Pointer(Unsize)); // scope 15 at ui/stdlib-unit-tests/raw-fat-ptr.rs:115:9: 115:14
        _170 = &(_153.1: S<[u8; 3]>);    // scope 15 at ui/stdlib-unit-tests/raw-fat-ptr.rs:116:9: 116:14
        _169 = &raw const (*_170);       // scope 15 at ui/stdlib-unit-tests/raw-fat-ptr.rs:116:9: 116:14
        _168 = move _169 as *const S<[u8]> (Pointer(Unsize)); // scope 15 at ui/stdlib-unit-tests/raw-fat-ptr.rs:116:9: 116:14
        _173 = &(_153.2: S<[u8; 2]>);    // scope 15 at ui/stdlib-unit-tests/raw-fat-ptr.rs:117:9: 117:14
        _172 = &raw const (*_173);       // scope 15 at ui/stdlib-unit-tests/raw-fat-ptr.rs:117:9: 117:14
        _171 = move _172 as *const S<[u8]> (Pointer(Unsize)); // scope 15 at ui/stdlib-unit-tests/raw-fat-ptr.rs:117:9: 117:14
        _164 = [move _165, move _168, move _171]; // scope 15 at ui/stdlib-unit-tests/raw-fat-ptr.rs:114:21: 118:6
        _163 = &_164;                    // scope 15 at ui/stdlib-unit-tests/raw-fat-ptr.rs:114:20: 118:6
        _162 = _163;                     // scope 15 at ui/stdlib-unit-tests/raw-fat-ptr.rs:114:20: 118:6
        _161 = move _162 as &[*const S<[u8]>] (Pointer(Unsize)); // scope 15 at ui/stdlib-unit-tests/raw-fat-ptr.rs:114:20: 118:6
        _160 = assert_inorder::<*const S<[u8]>>(move _161) -> [return: bb25, unwind: bb28]; // scope 15 at ui/stdlib-unit-tests/raw-fat-ptr.rs:114:5: 118:7
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:114:5: 114:19
                                         // + literal: Const { ty: for<'a> fn(&'a [*const S<[u8]>]) {assert_inorder::<*const S<[u8]>>}, val: Value(<ZST>) }
    }

    bb25: {
        drop(_56) -> [return: bb26, unwind: bb29]; // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:119:1: 119:2
    }

    bb26: {
        drop(_3) -> bb27;                // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:119:1: 119:2
    }

    bb27: {
        return;                          // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:119:2: 119:2
    }

    bb28 (cleanup): {
        drop(_56) -> bb29;               // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:119:1: 119:2
    }

    bb29 (cleanup): {
        drop(_3) -> bb30;                // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:119:1: 119:2
    }

    bb30 (cleanup): {
        resume;                          // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:45:1: 119:2
    }

    bb31 (cleanup): {
        _174 = alloc::alloc::box_free::<[*mut [u8]; 4], std::alloc::Global>(move (_62.0: std::ptr::Unique<[*mut [u8]; 4]>), move (_62.1: std::alloc::Global)) -> bb29; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[*mut [u8]; 4]>, std::alloc::Global) {alloc::alloc::box_free::<[*mut [u8]; 4], std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb32 (cleanup): {
        _175 = alloc::alloc::box_free::<[*const [u8]; 4], std::alloc::Global>(move (_9.0: std::ptr::Unique<[*const [u8]; 4]>), move (_9.1: std::alloc::Global)) -> bb30; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[*const [u8]; 4]>, std::alloc::Global) {alloc::alloc::box_free::<[*const [u8]; 4], std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb33: {
        goto -> bb8;                     // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:59:9: 59:32
    }

    bb34: {
        goto -> bb8;                     // scope 6 at ui/stdlib-unit-tests/raw-fat-ptr.rs:61:9: 61:27
    }

    bb35: {
        goto -> bb18;                    // scope 10 at ui/stdlib-unit-tests/raw-fat-ptr.rs:73:9: 73:36
    }

    bb36: {
        goto -> bb18;                    // scope 10 at ui/stdlib-unit-tests/raw-fat-ptr.rs:75:9: 75:31
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/stdlib-unit-tests/raw-fat-ptr.rs:87:17: 87:22], _2: &*const dyn Foo, _3: &*const dyn Foo) -> std::cmp::Ordering {
    debug u => _2;                       // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:87:18: 87:19
    debug v => _3;                       // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:87:20: 87:21
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:87:23: 87:23
    let _4: [*const (); 2];              // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:88:13: 88:14
    let mut _5: *const dyn Foo;          // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:88:58: 88:60
    let mut _7: *const dyn Foo;          // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:89:58: 89:60
    let mut _8: &[*const (); 2];         // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:90:9: 90:18
    let mut _9: &[*const (); 2];         // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:90:15: 90:17
    let _10: &[*const (); 2];            // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:90:15: 90:17
    scope 1 {
        debug u => _4;                   // in scope 1 at ui/stdlib-unit-tests/raw-fat-ptr.rs:88:13: 88:14
        let _6: [*const (); 2];          // in scope 1 at ui/stdlib-unit-tests/raw-fat-ptr.rs:89:13: 89:14
        scope 3 {
            debug v => _6;               // in scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:89:13: 89:14
        }
        scope 4 {
        }
    }
    scope 2 {
    }

    bb0: {
        _5 = (*_2);                      // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:88:58: 88:60
        _4 = transmute::<*const dyn Foo, [*const (); 2]>(move _5) -> bb1; // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:88:43: 88:61
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:88:43: 88:57
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(*const dyn Foo) -> [*const (); 2] {transmute::<*const dyn Foo, [*const (); 2]>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = (*_3);                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:89:58: 89:60
        _6 = transmute::<*const dyn Foo, [*const (); 2]>(move _7) -> bb2; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:89:43: 89:61
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:89:43: 89:57
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(*const dyn Foo) -> [*const (); 2] {transmute::<*const dyn Foo, [*const (); 2]>}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &_4;                        // scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:90:9: 90:18
        _10 = &_6;                       // scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:90:15: 90:17
        _9 = _10;                        // scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:90:15: 90:17
        _0 = <[*const (); 2] as Ord>::cmp(move _8, move _9) -> bb3; // scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:90:9: 90:18
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:90:11: 90:14
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [*const (); 2], &'b [*const (); 2]) -> std::cmp::Ordering {<[*const (); 2] as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:91:6: 91:6
    }
}

main::{closure#0}::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:88:29: 88:30

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:88:29: 88:30
        return;                          // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:88:29: 88:30
    }
}

main::{closure#0}::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:89:29: 89:30

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:89:29: 89:30
        return;                          // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:89:29: 89:30
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/stdlib-unit-tests/raw-fat-ptr.rs:99:17: 99:22], _2: &*mut dyn Foo, _3: &*mut dyn Foo) -> std::cmp::Ordering {
    debug u => _2;                       // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:99:18: 99:19
    debug v => _3;                       // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:99:20: 99:21
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:99:23: 99:23
    let _4: [*const (); 2];              // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:100:13: 100:14
    let mut _5: *mut dyn Foo;            // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:100:58: 100:60
    let mut _7: *mut dyn Foo;            // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:101:58: 101:60
    let mut _8: &[*const (); 2];         // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:102:9: 102:18
    let mut _9: &[*const (); 2];         // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:102:15: 102:17
    let _10: &[*const (); 2];            // in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:102:15: 102:17
    scope 1 {
        debug u => _4;                   // in scope 1 at ui/stdlib-unit-tests/raw-fat-ptr.rs:100:13: 100:14
        let _6: [*const (); 2];          // in scope 1 at ui/stdlib-unit-tests/raw-fat-ptr.rs:101:13: 101:14
        scope 3 {
            debug v => _6;               // in scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:101:13: 101:14
        }
        scope 4 {
        }
    }
    scope 2 {
    }

    bb0: {
        _5 = (*_2);                      // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:100:58: 100:60
        _4 = transmute::<*mut dyn Foo, [*const (); 2]>(move _5) -> bb1; // scope 2 at ui/stdlib-unit-tests/raw-fat-ptr.rs:100:43: 100:61
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:100:43: 100:57
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(*mut dyn Foo) -> [*const (); 2] {transmute::<*mut dyn Foo, [*const (); 2]>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = (*_3);                      // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:101:58: 101:60
        _6 = transmute::<*mut dyn Foo, [*const (); 2]>(move _7) -> bb2; // scope 4 at ui/stdlib-unit-tests/raw-fat-ptr.rs:101:43: 101:61
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:101:43: 101:57
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(*mut dyn Foo) -> [*const (); 2] {transmute::<*mut dyn Foo, [*const (); 2]>}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &_4;                        // scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:102:9: 102:18
        _10 = &_6;                       // scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:102:15: 102:17
        _9 = _10;                        // scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:102:15: 102:17
        _0 = <[*const (); 2] as Ord>::cmp(move _8, move _9) -> bb3; // scope 3 at ui/stdlib-unit-tests/raw-fat-ptr.rs:102:9: 102:18
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/raw-fat-ptr.rs:102:11: 102:14
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [*const (); 2], &'b [*const (); 2]) -> std::cmp::Ordering {<[*const (); 2] as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:103:6: 103:6
    }
}

main::{closure#1}::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:100:29: 100:30

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:100:29: 100:30
        return;                          // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:100:29: 100:30
    }
}

main::{closure#1}::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:101:29: 101:30

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:101:29: 101:30
        return;                          // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:101:29: 101:30
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:107:21: 107:22

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:107:21: 107:22
        return;                          // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:107:21: 107:22
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:108:21: 108:22

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:108:21: 108:22
        return;                          // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:108:21: 108:22
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:109:21: 109:22

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:109:21: 109:22
        return;                          // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:109:21: 109:22
    }
}

fn S(_1: u32, _2: T) -> S<T> {
    let mut _0: S<T>;                    // return place in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:43:1: 43:19

    bb0: {
        _0 = S::<T>(move _1, move _2);   // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:43:1: 43:19
        return;                          // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:43:1: 43:19
    }
}

// MIR FOR CTFE
fn S(_1: u32, _2: T) -> S<T> {
    let mut _0: S<T>;                    // return place in scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:43:1: 43:19

    bb0: {
        _0 = S::<T>(move _1, move _2);   // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:43:1: 43:19
        return;                          // scope 0 at ui/stdlib-unit-tests/raw-fat-ptr.rs:43:1: 43:19
    }
}
