// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: &str;
    let mut _3: *const &str;
    let _4: &&str;
    let mut _5: (&&str, &&str);
    let mut _6: &&str;
    let mut _9: bool;
    let mut _10: bool;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let _14: ();
    let mut _15: *mut &str;
    let mut _16: &mut &str;
    let mut _17: (&&str, &&str);
    let mut _18: &&str;
    let mut _21: bool;
    let mut _22: bool;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        scope 2 {
            let _2: &str;
            scope 3 {
                debug a => _2;
                let _7: &&str;
                let _8: &&str;
                let _19: &&str;
                let _20: &&str;
                let mut _26: &&str;
                let mut _27: &&str;
                scope 4 {
                    debug left_val => _7;
                    debug right_val => _8;
                    let _11: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _11;
                    }
                }
                scope 6 {
                    debug left_val => _19;
                    debug right_val => _20;
                    let _23: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _23;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const "test";
        _4 = &_1;
        _3 = &raw const (*_4);
        _2 = read_volatile::<&str>(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_2;
        _27 = const _;
        _5 = (move _6, _27);
        _7 = (_5.0: &&str);
        _8 = (_5.1: &&str);
        _10 = <&str as PartialEq>::eq(_7, _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<&str, &str>(move _11, _7, _8, move _13) -> unwind continue;
    }

    bb4: {
        _16 = &mut _1;
        _15 = &raw mut (*_16);
        _14 = write_volatile::<&str>(move _15, const "foo") -> [return: bb5, unwind continue];
    }

    bb5: {
        _18 = &_1;
        _26 = const _;
        _17 = (move _18, _26);
        _19 = (_17.0: &&str);
        _20 = (_17.1: &&str);
        _22 = <&str as PartialEq>::eq(_19, _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<&str, &str>(move _23, _19, _20, move _25) -> unwind continue;
    }

    bb8: {
        return;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "foo";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "test";
        _0 = &_1;
        return;
    }
}
