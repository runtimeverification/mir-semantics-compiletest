// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:10: 6:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:10: 6:15
    debug f => _2;                       // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:10: 6:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:10: 6:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:10: 6:15
    let mut _4: &str;                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:10: 6:15
    let _5: &str;                        // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:10: 6:15
    let mut _6: &str;                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:8:5: 8:10
    let _7: &str;                        // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:8:5: 8:10
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:8:5: 8:10
    let mut _9: &u8;                     // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:8:5: 8:10
    let _10: &u8;                        // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:8:5: 8:10
    let mut _11: &str;                   // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23
    let _12: &str;                       // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23
    let mut _13: &dyn std::fmt::Debug;   // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23
    let mut _14: &&&str;                 // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23
    let _15: &&&str;                     // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23
    let _16: &&str;                      // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:10: 6:15
        _5 = const "Foo";                // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:10: 6:15
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:10: 6:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:10: 6:15
        _7 = const "n";                  // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:8:5: 8:10
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:8:5: 8:10
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:8:5: 8:10
        _10 = &((*_1).0: u8);            // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:8:5: 8:10
        _9 = _10;                        // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:8:5: 8:10
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:8:5: 8:10
        _12 = const "name";              // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23
        _16 = &((*_1).1: &str);          // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23
        _15 = &_16;                      // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23
        _14 = _15;                       // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23
        _13 = move _14 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23
        _0 = Formatter::<'_>::debug_struct_field2_finish(move _3, move _4, move _6, move _8, move _11, move _13) -> bb1; // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:10: 6:15
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:10: 6:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:15: 6:15
    }
}

fn <impl at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:23: 6:28>::clone(_1: &Foo) -> Foo {
    debug self => _1;                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:23: 6:28
    let mut _0: Foo;                     // return place in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:23: 6:28
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);                      // scope 2 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:23: 6:28
        return;                          // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:28: 6:28
    }
}

fn <impl at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:30: 6:39>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:30: 6:39
    debug other => _2;                   // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:30: 6:39
    let mut _0: bool;                    // return place in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:30: 6:39
    let mut _3: bool;                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:8:5: 8:10
    let mut _4: u8;                      // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:8:5: 8:10
    let mut _5: u8;                      // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:8:5: 8:10
    let mut _6: bool;                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23
    let mut _7: &&str;                   // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23
    let mut _8: &&str;                   // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23

    bb0: {
        _4 = ((*_1).0: u8);              // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:8:5: 8:10
        _5 = ((*_2).0: u8);              // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:8:5: 8:10
        _3 = Eq(move _4, move _5);       // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:8:5: 8:10
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23
        goto -> bb3;                     // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23
    }

    bb2: {
        _7 = &((*_1).1: &str);           // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23
        _8 = &((*_2).1: &str);           // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23
        _6 = <&str as PartialEq>::eq(move _7, move _8) -> bb4; // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:39: 6:39
    }

    bb4: {
        _0 = move _6;                    // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23
        goto -> bb3;                     // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:9:5: 9:23
    }
}

fn <impl at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:41: 6:43>::assert_receiver_is_total_eq(_1: &Foo) -> () {
    debug self => _1;                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:41: 6:43
    let mut _0: ();                      // return place in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:41: 6:43
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;                          // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:6:43: 6:43
    }
}

fn <impl at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:12:1: 12:24>::partial_cmp(_1: &Foo, _2: &Foo) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:13:20: 13:25
    debug other => _2;                   // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:13:27: 13:32
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:13:43: 13:59
    let mut _3: std::cmp::Ordering;      // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:14:14: 14:29
    let mut _4: &Foo;                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:14:14: 14:29
    let mut _5: &Foo;                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:14:23: 14:28

    bb0: {
        _4 = _1;                         // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:14:14: 14:29
        _5 = _2;                         // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:14:23: 14:28
        _3 = <Foo as Ord>::cmp(move _4, move _5) -> bb1; // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:14:14: 14:29
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:14:19: 14:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> std::cmp::Ordering {<Foo as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Option::<std::cmp::Ordering>::Some(move _3); // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:14:9: 14:30
        return;                          // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:15:6: 15:6
    }
}

fn <impl at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:18:1: 18:17>::cmp(_1: &Foo, _2: &Foo) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:19:12: 19:17
    debug other => _2;                   // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:19:19: 19:24
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:19:35: 19:43
    let mut _3: &u8;                     // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:20:9: 20:29
    let mut _4: &u8;                     // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:20:20: 20:28
    let _5: &u8;                         // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:20:20: 20:28

    bb0: {
        _3 = &((*_1).0: u8);             // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:20:9: 20:29
        _5 = &((*_2).0: u8);             // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:20:20: 20:28
        _4 = _5;                         // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:20:20: 20:28
        _0 = <u8 as Ord>::cmp(move _3, move _4) -> bb1; // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:20:9: 20:29
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:20:16: 20:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u8, &'b u8) -> std::cmp::Ordering {<u8 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:21:6: 21:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:24:11: 24:11
    let _1: Foo;                         // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:25:9: 25:10
    let mut _8: Foo;                     // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:32:17: 32:18
    let mut _9: Foo;                     // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:32:20: 32:21
    let mut _10: Foo;                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:32:23: 32:24
    let mut _11: Foo;                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:32:26: 32:27
    let mut _12: Foo;                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:32:29: 32:30
    let mut _13: Foo;                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:32:32: 32:33
    let mut _14: (&std::option::Option<&Foo>, &std::option::Option<&Foo>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _15: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _16: std::option::Option<&Foo>;  // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:35:16: 35:33
    let mut _17: std::slice::Iter<'_, Foo>; // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:35:16: 35:27
    let mut _18: &[Foo];                 // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:35:16: 35:27
    let mut _19: &[Foo; 6];              // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:35:16: 35:27
    let mut _20: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _21: std::option::Option<&Foo>;  // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:35:35: 35:43
    let mut _22: &Foo;                   // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:35:40: 35:42
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _26: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _27: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _28: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _30: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _31: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _32: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _33: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _34: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _35: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _37: (&std::option::Option<&Foo>, &std::option::Option<&Foo>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _38: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _39: std::option::Option<&Foo>;  // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:16: 36:47
    let mut _40: std::slice::Iter<'_, Foo>; // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:16: 36:27
    let mut _41: &[Foo];                 // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:16: 36:27
    let mut _42: &[Foo; 6];              // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:16: 36:27
    let mut _43: [closure@ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:39: 36:42]; // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:39: 36:46
    let mut _44: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _45: std::option::Option<&Foo>;  // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:49: 36:57
    let mut _46: &Foo;                   // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:54: 36:56
    let mut _49: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _50: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _51: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _52: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _54: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _55: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _56: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _57: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _58: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _59: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _61: (&Foo, &Foo);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _62: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _63: Foo;                        // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:37:16: 37:30
    let mut _64: Foo;                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:37:25: 37:26
    let mut _65: Foo;                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:37:28: 37:29
    let mut _66: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _69: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _70: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _71: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _72: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _74: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _75: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _76: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _77: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _78: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _79: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _81: (&Foo, &Foo);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _82: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _83: Foo;                        // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:38:16: 38:30
    let mut _84: Foo;                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:38:25: 38:26
    let mut _85: Foo;                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:38:28: 38:29
    let mut _86: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _89: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _90: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _91: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _92: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _94: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _95: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _96: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _97: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _98: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _99: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _100: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _101: (&std::option::Option<&Foo>, &std::option::Option<&Foo>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _102: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _103: std::option::Option<&Foo>; // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:41:16: 41:33
    let mut _104: std::slice::Iter<'_, Foo>; // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:41:16: 41:27
    let mut _105: &[Foo];                // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:41:16: 41:27
    let mut _106: &[Foo; 6];             // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:41:16: 41:27
    let mut _107: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _108: std::option::Option<&Foo>; // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:41:35: 41:43
    let mut _109: &Foo;                  // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:41:40: 41:42
    let mut _112: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _113: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _114: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _115: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _117: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _118: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _119: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _120: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _121: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _122: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _123: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _124: (&std::option::Option<&Foo>, &std::option::Option<&Foo>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _125: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _126: std::option::Option<&Foo>; // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:16: 42:47
    let mut _127: std::slice::Iter<'_, Foo>; // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:16: 42:27
    let mut _128: &[Foo];                // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:16: 42:27
    let mut _129: &[Foo; 6];             // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:16: 42:27
    let mut _130: [closure@ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:39: 42:42]; // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:39: 42:46
    let mut _131: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _132: std::option::Option<&Foo>; // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:49: 42:57
    let mut _133: &Foo;                  // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:54: 42:56
    let mut _136: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _137: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _138: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _139: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _141: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _142: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _143: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _144: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _145: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _146: &std::option::Option<&Foo>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _147: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _148: (&Foo, &Foo);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _149: &Foo;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _150: Foo;                       // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:43:16: 43:30
    let mut _151: Foo;                   // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:43:25: 43:26
    let mut _152: Foo;                   // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:43:28: 43:29
    let mut _153: &Foo;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _156: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _157: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _158: &Foo;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _159: &Foo;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _161: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _162: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _163: &Foo;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _164: &Foo;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _165: &Foo;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _166: &Foo;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _167: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _168: (&Foo, &Foo);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _169: &Foo;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _170: Foo;                       // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:44:16: 44:30
    let mut _171: Foo;                   // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:44:25: 44:26
    let mut _172: Foo;                   // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:44:28: 44:29
    let mut _173: &Foo;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _176: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _177: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _178: &Foo;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _179: &Foo;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _181: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _182: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _183: &Foo;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _184: &Foo;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _185: &Foo;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _186: &Foo;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _187: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _189: &[Foo];                // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:46:25: 46:38
    let mut _190: &[Foo; 6];             // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:46:25: 46:38
    let _191: ();                        // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:47:5: 47:21
    let mut _192: &mut [Foo];            // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:47:5: 47:21
    let mut _193: &mut [Foo];            // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:47:5: 47:21
    let mut _194: &mut std::vec::Vec<Foo>; // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:47:5: 47:21
    let _195: ();                        // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:48:5: 48:30
    let mut _196: &[Foo];                // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:48:19: 48:29
    let _197: &[Foo];                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:48:19: 48:29
    let mut _198: &std::vec::Vec<Foo>;   // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:48:19: 48:29
    let _199: &std::vec::Vec<Foo>;       // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:48:19: 48:29
    let mut _201: &[Foo];                // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:50:25: 50:38
    let mut _202: &[Foo; 6];             // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:50:25: 50:38
    let _203: ();                        // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:5: 51:39
    let mut _204: &mut [Foo];            // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:5: 51:39
    let mut _205: &mut [Foo];            // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:5: 51:39
    let mut _206: &mut std::vec::Vec<Foo>; // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:5: 51:39
    let mut _207: [closure@ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:23: 51:29]; // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:23: 51:38
    let _208: ();                        // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:52:5: 52:30
    let mut _209: &[Foo];                // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:52:19: 52:29
    let _210: &[Foo];                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:52:19: 52:29
    let mut _211: &std::vec::Vec<Foo>;   // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:52:19: 52:29
    let _212: &std::vec::Vec<Foo>;       // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:52:19: 52:29
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:25:9: 25:10
        let _2: Foo;                     // in scope 1 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:26:9: 26:10
        scope 2 {
            debug b => _2;               // in scope 2 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:26:9: 26:10
            let _3: Foo;                 // in scope 2 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:27:9: 27:10
            scope 3 {
                debug c => _3;           // in scope 3 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:27:9: 27:10
                let _4: Foo;             // in scope 3 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:28:9: 28:10
                scope 4 {
                    debug d => _4;       // in scope 4 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:28:9: 28:10
                    let _5: Foo;         // in scope 4 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:29:9: 29:10
                    scope 5 {
                        debug e => _5;   // in scope 5 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:29:9: 29:10
                        let _6: Foo;     // in scope 5 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:30:9: 30:10
                        scope 6 {
                            debug f => _6; // in scope 6 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:30:9: 30:10
                            let _7: [Foo; 6]; // in scope 6 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:32:9: 32:13
                            scope 7 {
                                debug data => _7; // in scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:32:9: 32:13
                                let _23: &std::option::Option<&Foo>; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                let _24: &std::option::Option<&Foo>; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let _47: &std::option::Option<&Foo>; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                let _48: &std::option::Option<&Foo>; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let _67: &Foo; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                let _68: &Foo; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let _87: &Foo; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                let _88: &Foo; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let _110: &std::option::Option<&Foo>; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                let _111: &std::option::Option<&Foo>; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let _134: &std::option::Option<&Foo>; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                let _135: &std::option::Option<&Foo>; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let _154: &Foo; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                let _155: &Foo; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let _174: &Foo; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                let _175: &Foo; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let mut _188: std::vec::Vec<Foo>; // in scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:46:9: 46:22
                                scope 8 {
                                    debug left_val => _23; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                    debug right_val => _24; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                    let _29: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    scope 9 {
                                        debug kind => _29; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    }
                                }
                                scope 10 {
                                    debug left_val => _47; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                    debug right_val => _48; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                    let _53: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    scope 11 {
                                        debug kind => _53; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    }
                                }
                                scope 12 {
                                    debug left_val => _67; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                    debug right_val => _68; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                    let _73: core::panicking::AssertKind; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    scope 13 {
                                        debug kind => _73; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    }
                                }
                                scope 14 {
                                    debug left_val => _87; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                    debug right_val => _88; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                    let _93: core::panicking::AssertKind; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    scope 15 {
                                        debug kind => _93; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    }
                                }
                                scope 16 {
                                    debug left_val => _110; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                    debug right_val => _111; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                    let _116: core::panicking::AssertKind; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    scope 17 {
                                        debug kind => _116; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    }
                                }
                                scope 18 {
                                    debug left_val => _134; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                    debug right_val => _135; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                    let _140: core::panicking::AssertKind; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    scope 19 {
                                        debug kind => _140; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    }
                                }
                                scope 20 {
                                    debug left_val => _154; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                    debug right_val => _155; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                    let _160: core::panicking::AssertKind; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    scope 21 {
                                        debug kind => _160; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    }
                                }
                                scope 22 {
                                    debug left_val => _174; // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                    debug right_val => _175; // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                    let _180: core::panicking::AssertKind; // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    scope 23 {
                                        debug kind => _180; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    }
                                }
                                scope 24 {
                                    debug presorted => _188; // in scope 24 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:46:9: 46:22
                                    let mut _200: std::vec::Vec<Foo>; // in scope 24 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:50:9: 50:22
                                    scope 25 {
                                        debug presorted => _200; // in scope 25 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:50:9: 50:22
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Foo { n: const 4_u8, name: const "a" }; // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:25:13: 25:36
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:25:31: 25:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = Foo { n: const 4_u8, name: const "b" }; // scope 1 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:26:13: 26:36
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:26:31: 26:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = Foo { n: const 8_u8, name: const "c" }; // scope 2 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:27:13: 27:36
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:27:31: 27:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = Foo { n: const 8_u8, name: const "d" }; // scope 3 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:28:13: 28:36
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:28:31: 28:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = Foo { n: const 22_u8, name: const "e" }; // scope 4 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:29:13: 29:37
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:29:32: 29:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = Foo { n: const 22_u8, name: const "f" }; // scope 5 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:30:13: 30:37
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:30:32: 30:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = _1;                         // scope 6 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:32:17: 32:18
        _9 = _2;                         // scope 6 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:32:20: 32:21
        _10 = _3;                        // scope 6 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:32:23: 32:24
        _11 = _4;                        // scope 6 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:32:26: 32:27
        _12 = _5;                        // scope 6 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:32:29: 32:30
        _13 = _6;                        // scope 6 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:32:32: 32:33
        _7 = [move _8, move _9, move _10, move _11, move _12, move _13]; // scope 6 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:32:16: 32:34
        _19 = &_7;                       // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:35:16: 35:27
        _18 = move _19 as &[Foo] (Pointer(Unsize)); // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:35:16: 35:27
        _17 = core::slice::<impl [Foo]>::iter(move _18) -> bb1; // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:35:16: 35:27
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:35:21: 35:25
                                         // + literal: Const { ty: for<'a> fn(&'a [Foo]) -> std::slice::Iter<'a, Foo> {core::slice::<impl [Foo]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        _16 = <std::slice::Iter<'_, Foo> as Iterator>::min(move _17) -> bb2; // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:35:16: 35:33
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:35:28: 35:31
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, Foo>) -> Option<<std::slice::Iter<'_, Foo> as Iterator>::Item> {<std::slice::Iter<'_, Foo> as Iterator>::min}, val: Value(<ZST>) }
    }

    bb2: {
        _15 = &_16;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _22 = &_1;                       // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:35:40: 35:42
        _21 = Option::<&Foo>::Some(move _22); // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:35:35: 35:43
        _20 = &_21;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _14 = (move _15, move _20);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _23 = (_14.0: &std::option::Option<&Foo>); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _24 = (_14.1: &std::option::Option<&Foo>); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _27 = _23;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _28 = _24;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _26 = <Option<&Foo> as PartialEq>::eq(move _27, move _28) -> bb3; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Foo>, &'b Option<&Foo>) -> bool {<Option<&Foo> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _25 = Not(move _26);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _25) -> [0: bb5, otherwise: bb4]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _29 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _31 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = _23;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _32 = _33;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _35 = _24;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _34 = _35;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _30 = core::panicking::assert_failed::<Option<&Foo>, Option<&Foo>>(move _31, move _32, move _34, move _36); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Foo>, &'b Option<&Foo>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Foo>, Option<&Foo>>}, val: Value(<ZST>) }
    }

    bb5: {
        _42 = &_7;                       // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:16: 36:27
        _41 = move _42 as &[Foo] (Pointer(Unsize)); // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:16: 36:27
        _40 = core::slice::<impl [Foo]>::iter(move _41) -> bb6; // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:16: 36:27
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:21: 36:25
                                         // + literal: Const { ty: for<'a> fn(&'a [Foo]) -> std::slice::Iter<'a, Foo> {core::slice::<impl [Foo]>::iter}, val: Value(<ZST>) }
    }

    bb6: {
        _39 = <std::slice::Iter<'_, Foo> as Iterator>::min_by_key::<u8, [closure@ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:39: 36:42]>(move _40, move _43) -> bb7; // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:16: 36:47
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:28: 36:38
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, Foo>, [closure@ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:39: 36:42]) -> Option<<std::slice::Iter<'_, Foo> as Iterator>::Item> {<std::slice::Iter<'_, Foo> as Iterator>::min_by_key::<u8, [closure@ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:39: 36:42]>}, val: Value(<ZST>) }
    }

    bb7: {
        _38 = &_39;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _46 = &_1;                       // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:54: 36:56
        _45 = Option::<&Foo>::Some(move _46); // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:49: 36:57
        _44 = &_45;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _37 = (move _38, move _44);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _47 = (_37.0: &std::option::Option<&Foo>); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _48 = (_37.1: &std::option::Option<&Foo>); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _51 = _47;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _52 = _48;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _50 = <Option<&Foo> as PartialEq>::eq(move _51, move _52) -> bb8; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Foo>, &'b Option<&Foo>) -> bool {<Option<&Foo> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _49 = Not(move _50);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _49) -> [0: bb10, otherwise: bb9]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _53 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _55 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _57 = _47;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _56 = _57;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _59 = _48;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _58 = _59;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _60 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _54 = core::panicking::assert_failed::<Option<&Foo>, Option<&Foo>>(move _55, move _56, move _58, move _60); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Foo>, &'b Option<&Foo>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Foo>, Option<&Foo>>}, val: Value(<ZST>) }
    }

    bb10: {
        _64 = _1;                        // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:37:25: 37:26
        _65 = _2;                        // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:37:28: 37:29
        _63 = std::cmp::min::<Foo>(move _64, move _65) -> bb11; // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:37:16: 37:30
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:37:16: 37:24
                                         // + literal: Const { ty: fn(Foo, Foo) -> Foo {std::cmp::min::<Foo>}, val: Value(<ZST>) }
    }

    bb11: {
        _62 = &_63;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _66 = &_1;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _61 = (move _62, move _66);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _67 = (_61.0: &Foo);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _68 = (_61.1: &Foo);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _71 = _67;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _72 = _68;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _70 = <Foo as PartialEq>::eq(move _71, move _72) -> bb12; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb12: {
        _69 = Not(move _70);             // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _69) -> [0: bb14, otherwise: bb13]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb13: {
        _73 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _75 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _77 = _67;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _76 = _77;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _79 = _68;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _78 = _79;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _80 = Option::<Arguments<'_>>::None; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _74 = core::panicking::assert_failed::<Foo, Foo>(move _75, move _76, move _78, move _80); // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Foo, &'b Foo, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Foo, Foo>}, val: Value(<ZST>) }
    }

    bb14: {
        _84 = _2;                        // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:38:25: 38:26
        _85 = _1;                        // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:38:28: 38:29
        _83 = std::cmp::min::<Foo>(move _84, move _85) -> bb15; // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:38:16: 38:30
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:38:16: 38:24
                                         // + literal: Const { ty: fn(Foo, Foo) -> Foo {std::cmp::min::<Foo>}, val: Value(<ZST>) }
    }

    bb15: {
        _82 = &_83;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _86 = &_2;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _81 = (move _82, move _86);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _87 = (_81.0: &Foo);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _88 = (_81.1: &Foo);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _91 = _87;                       // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _92 = _88;                       // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _90 = <Foo as PartialEq>::eq(move _91, move _92) -> bb16; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb16: {
        _89 = Not(move _90);             // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _89) -> [0: bb18, otherwise: bb17]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb17: {
        _93 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _95 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _97 = _87;                       // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _96 = _97;                       // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _99 = _88;                       // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _98 = _99;                       // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _100 = Option::<Arguments<'_>>::None; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _94 = core::panicking::assert_failed::<Foo, Foo>(move _95, move _96, move _98, move _100); // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Foo, &'b Foo, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Foo, Foo>}, val: Value(<ZST>) }
    }

    bb18: {
        _106 = &_7;                      // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:41:16: 41:27
        _105 = move _106 as &[Foo] (Pointer(Unsize)); // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:41:16: 41:27
        _104 = core::slice::<impl [Foo]>::iter(move _105) -> bb19; // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:41:16: 41:27
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:41:21: 41:25
                                         // + literal: Const { ty: for<'a> fn(&'a [Foo]) -> std::slice::Iter<'a, Foo> {core::slice::<impl [Foo]>::iter}, val: Value(<ZST>) }
    }

    bb19: {
        _103 = <std::slice::Iter<'_, Foo> as Iterator>::max(move _104) -> bb20; // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:41:16: 41:33
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:41:28: 41:31
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, Foo>) -> Option<<std::slice::Iter<'_, Foo> as Iterator>::Item> {<std::slice::Iter<'_, Foo> as Iterator>::max}, val: Value(<ZST>) }
    }

    bb20: {
        _102 = &_103;                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _109 = &_6;                      // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:41:40: 41:42
        _108 = Option::<&Foo>::Some(move _109); // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:41:35: 41:43
        _107 = &_108;                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _101 = (move _102, move _107);   // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _110 = (_101.0: &std::option::Option<&Foo>); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _111 = (_101.1: &std::option::Option<&Foo>); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _114 = _110;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _115 = _111;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _113 = <Option<&Foo> as PartialEq>::eq(move _114, move _115) -> bb21; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Foo>, &'b Option<&Foo>) -> bool {<Option<&Foo> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb21: {
        _112 = Not(move _113);           // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _112) -> [0: bb23, otherwise: bb22]; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb22: {
        _116 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _118 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _120 = _110;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _119 = _120;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _122 = _111;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _121 = _122;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _123 = Option::<Arguments<'_>>::None; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _117 = core::panicking::assert_failed::<Option<&Foo>, Option<&Foo>>(move _118, move _119, move _121, move _123); // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Foo>, &'b Option<&Foo>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Foo>, Option<&Foo>>}, val: Value(<ZST>) }
    }

    bb23: {
        _129 = &_7;                      // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:16: 42:27
        _128 = move _129 as &[Foo] (Pointer(Unsize)); // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:16: 42:27
        _127 = core::slice::<impl [Foo]>::iter(move _128) -> bb24; // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:16: 42:27
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:21: 42:25
                                         // + literal: Const { ty: for<'a> fn(&'a [Foo]) -> std::slice::Iter<'a, Foo> {core::slice::<impl [Foo]>::iter}, val: Value(<ZST>) }
    }

    bb24: {
        _126 = <std::slice::Iter<'_, Foo> as Iterator>::max_by_key::<u8, [closure@ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:39: 42:42]>(move _127, move _130) -> bb25; // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:16: 42:47
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:28: 42:38
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, Foo>, [closure@ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:39: 42:42]) -> Option<<std::slice::Iter<'_, Foo> as Iterator>::Item> {<std::slice::Iter<'_, Foo> as Iterator>::max_by_key::<u8, [closure@ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:39: 42:42]>}, val: Value(<ZST>) }
    }

    bb25: {
        _125 = &_126;                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _133 = &_6;                      // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:54: 42:56
        _132 = Option::<&Foo>::Some(move _133); // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:49: 42:57
        _131 = &_132;                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _124 = (move _125, move _131);   // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _134 = (_124.0: &std::option::Option<&Foo>); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _135 = (_124.1: &std::option::Option<&Foo>); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _138 = _134;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _139 = _135;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _137 = <Option<&Foo> as PartialEq>::eq(move _138, move _139) -> bb26; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Foo>, &'b Option<&Foo>) -> bool {<Option<&Foo> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb26: {
        _136 = Not(move _137);           // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _136) -> [0: bb28, otherwise: bb27]; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb27: {
        _140 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _142 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _144 = _134;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _143 = _144;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _146 = _135;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _145 = _146;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _147 = Option::<Arguments<'_>>::None; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _141 = core::panicking::assert_failed::<Option<&Foo>, Option<&Foo>>(move _142, move _143, move _145, move _147); // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Foo>, &'b Option<&Foo>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Foo>, Option<&Foo>>}, val: Value(<ZST>) }
    }

    bb28: {
        _151 = _5;                       // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:43:25: 43:26
        _152 = _6;                       // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:43:28: 43:29
        _150 = std::cmp::max::<Foo>(move _151, move _152) -> bb29; // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:43:16: 43:30
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:43:16: 43:24
                                         // + literal: Const { ty: fn(Foo, Foo) -> Foo {std::cmp::max::<Foo>}, val: Value(<ZST>) }
    }

    bb29: {
        _149 = &_150;                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _153 = &_6;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _148 = (move _149, move _153);   // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _154 = (_148.0: &Foo);           // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _155 = (_148.1: &Foo);           // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _158 = _154;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _159 = _155;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _157 = <Foo as PartialEq>::eq(move _158, move _159) -> bb30; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb30: {
        _156 = Not(move _157);           // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _156) -> [0: bb32, otherwise: bb31]; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb31: {
        _160 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _162 = const core::panicking::AssertKind::Eq; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _164 = _154;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _163 = _164;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _166 = _155;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _165 = _166;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _167 = Option::<Arguments<'_>>::None; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _161 = core::panicking::assert_failed::<Foo, Foo>(move _162, move _163, move _165, move _167); // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Foo, &'b Foo, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Foo, Foo>}, val: Value(<ZST>) }
    }

    bb32: {
        _171 = _6;                       // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:44:25: 44:26
        _172 = _5;                       // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:44:28: 44:29
        _170 = std::cmp::max::<Foo>(move _171, move _172) -> bb33; // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:44:16: 44:30
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:44:16: 44:24
                                         // + literal: Const { ty: fn(Foo, Foo) -> Foo {std::cmp::max::<Foo>}, val: Value(<ZST>) }
    }

    bb33: {
        _169 = &_170;                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _173 = &_5;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _168 = (move _169, move _173);   // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _174 = (_168.0: &Foo);           // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _175 = (_168.1: &Foo);           // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _178 = _174;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _179 = _175;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _177 = <Foo as PartialEq>::eq(move _178, move _179) -> bb34; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb34: {
        _176 = Not(move _177);           // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _176) -> [0: bb36, otherwise: bb35]; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb35: {
        _180 = const core::panicking::AssertKind::Eq; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _182 = const core::panicking::AssertKind::Eq; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _184 = _174;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _183 = _184;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _186 = _175;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _185 = _186;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _187 = Option::<Arguments<'_>>::None; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _181 = core::panicking::assert_failed::<Foo, Foo>(move _182, move _183, move _185, move _187); // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Foo, &'b Foo, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Foo, Foo>}, val: Value(<ZST>) }
    }

    bb36: {
        _190 = &_7;                      // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:46:25: 46:38
        _189 = move _190 as &[Foo] (Pointer(Unsize)); // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:46:25: 46:38
        _188 = slice::<impl [Foo]>::to_vec(move _189) -> bb37; // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:46:25: 46:38
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:46:30: 46:36
                                         // + literal: Const { ty: for<'a> fn(&'a [Foo]) -> Vec<Foo> {slice::<impl [Foo]>::to_vec}, val: Value(<ZST>) }
    }

    bb37: {
        _194 = &mut _188;                // scope 24 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:47:5: 47:21
        _193 = <Vec<Foo> as DerefMut>::deref_mut(move _194) -> [return: bb38, unwind: bb50]; // scope 24 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:47:5: 47:21
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:47:5: 47:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<Foo>) -> &'a mut <Vec<Foo> as Deref>::Target {<Vec<Foo> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb38: {
        _192 = &mut (*_193);             // scope 24 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:47:5: 47:21
        _191 = slice::<impl [Foo]>::sort(move _192) -> [return: bb39, unwind: bb50]; // scope 24 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:47:5: 47:21
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:47:15: 47:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut [Foo]) {slice::<impl [Foo]>::sort}, val: Value(<ZST>) }
    }

    bb39: {
        _199 = &_188;                    // scope 24 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:48:19: 48:29
        _198 = _199;                     // scope 24 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:48:19: 48:29
        _197 = <Vec<Foo> as Deref>::deref(move _198) -> [return: bb40, unwind: bb50]; // scope 24 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:48:19: 48:29
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:48:19: 48:29
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Foo>) -> &'a <Vec<Foo> as Deref>::Target {<Vec<Foo> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb40: {
        _196 = _197;                     // scope 24 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:48:19: 48:29
        _195 = assert_stable::<Foo>(move _196) -> [return: bb41, unwind: bb50]; // scope 24 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:48:5: 48:30
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:48:5: 48:18
                                         // + literal: Const { ty: for<'a> fn(&'a [Foo]) {assert_stable::<Foo>}, val: Value(<ZST>) }
    }

    bb41: {
        _202 = &_7;                      // scope 24 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:50:25: 50:38
        _201 = move _202 as &[Foo] (Pointer(Unsize)); // scope 24 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:50:25: 50:38
        _200 = slice::<impl [Foo]>::to_vec(move _201) -> [return: bb42, unwind: bb50]; // scope 24 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:50:25: 50:38
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:50:30: 50:36
                                         // + literal: Const { ty: for<'a> fn(&'a [Foo]) -> Vec<Foo> {slice::<impl [Foo]>::to_vec}, val: Value(<ZST>) }
    }

    bb42: {
        _206 = &mut _200;                // scope 25 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:5: 51:39
        _205 = <Vec<Foo> as DerefMut>::deref_mut(move _206) -> [return: bb43, unwind: bb49]; // scope 25 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:5: 51:39
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:5: 51:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<Foo>) -> &'a mut <Vec<Foo> as Deref>::Target {<Vec<Foo> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb43: {
        _204 = &mut (*_205);             // scope 25 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:5: 51:39
        _203 = slice::<impl [Foo]>::sort_by::<[closure@ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:23: 51:29]>(move _204, move _207) -> [return: bb44, unwind: bb49]; // scope 25 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:5: 51:39
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:15: 51:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut [Foo], [closure@ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:23: 51:29]) {slice::<impl [Foo]>::sort_by::<[closure@ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:23: 51:29]>}, val: Value(<ZST>) }
    }

    bb44: {
        _212 = &_200;                    // scope 25 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:52:19: 52:29
        _211 = _212;                     // scope 25 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:52:19: 52:29
        _210 = <Vec<Foo> as Deref>::deref(move _211) -> [return: bb45, unwind: bb49]; // scope 25 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:52:19: 52:29
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:52:19: 52:29
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Foo>) -> &'a <Vec<Foo> as Deref>::Target {<Vec<Foo> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb45: {
        _209 = _210;                     // scope 25 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:52:19: 52:29
        _208 = assert_stable::<Foo>(move _209) -> [return: bb46, unwind: bb49]; // scope 25 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:52:5: 52:30
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:52:5: 52:18
                                         // + literal: Const { ty: for<'a> fn(&'a [Foo]) {assert_stable::<Foo>}, val: Value(<ZST>) }
    }

    bb46: {
        drop(_200) -> [return: bb47, unwind: bb50]; // scope 24 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:64:1: 64:2
    }

    bb47: {
        drop(_188) -> bb48;              // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:64:1: 64:2
    }

    bb48: {
        return;                          // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:64:2: 64:2
    }

    bb49 (cleanup): {
        drop(_200) -> bb50;              // scope 24 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:64:1: 64:2
    }

    bb50 (cleanup): {
        drop(_188) -> bb51;              // scope 7 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:64:1: 64:2
    }

    bb51 (cleanup): {
        resume;                          // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:24:1: 64:2
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:39: 36:42], _2: &&Foo) -> u8 {
    debug a => _2;                       // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:40: 36:41
    let mut _0: u8;                      // return place in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:43: 36:43
    let mut _3: &Foo;                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:40: 36:41

    bb0: {
        _3 = deref_copy (*_2);           // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:43: 36:46
        _0 = ((*_3).0: u8);              // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:43: 36:46
        return;                          // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:36:46: 36:46
    }
}

fn main::{closure#2}(_1: &mut [closure@ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:39: 42:42], _2: &&Foo) -> u8 {
    debug a => _2;                       // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:40: 42:41
    let mut _0: u8;                      // return place in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:43: 42:43
    let mut _3: &Foo;                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:40: 42:41

    bb0: {
        _3 = deref_copy (*_2);           // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:43: 42:46
        _0 = ((*_3).0: u8);              // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:43: 42:46
        return;                          // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:42:46: 42:46
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:23: 51:29], _2: &Foo, _3: &Foo) -> std::cmp::Ordering {
    debug a => _2;                       // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:24: 51:25
    debug b => _3;                       // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:27: 51:28
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:30: 51:30
    let mut _4: &Foo;                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:30: 51:38
    let mut _5: &Foo;                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:36: 51:37

    bb0: {
        _4 = _2;                         // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:30: 51:38
        _5 = _3;                         // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:36: 51:37
        _0 = <Foo as Ord>::cmp(move _4, move _5) -> bb1; // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:30: 51:38
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:32: 51:35
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> std::cmp::Ordering {<Foo as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:51:38: 51:38
    }
}

fn assert_stable(_1: &[T]) -> () {
    debug presorted => _1;               // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:55:38: 55:47
    let mut _0: ();                      // return place in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:55:55: 55:55
    let mut _2: std::slice::Windows<'_, T>; // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:22: 56:42
    let mut _3: std::slice::Windows<'_, T>; // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:22: 56:42
    let mut _4: &[T];                    // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:22: 56:42
    let mut _5: std::slice::Windows<'_, T>; // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:22: 56:42
    let mut _6: std::option::Option<&[T]>; // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:22: 56:42
    let mut _7: &mut std::slice::Windows<'_, T>; // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:22: 56:42
    let mut _8: &mut std::slice::Windows<'_, T>; // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:22: 56:42
    let mut _9: isize;                   // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:9: 62:10
    let _12: usize;                      // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:57:28: 57:29
    let mut _13: usize;                  // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:57:22: 57:30
    let mut _14: bool;                   // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:57:22: 57:30
    let _16: usize;                      // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:58:28: 58:29
    let mut _17: usize;                  // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:58:22: 58:30
    let mut _18: bool;                   // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:58:22: 58:30
    let mut _19: (&&T, &&T);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _20: &&T;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _21: &&T;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _22: &T;                         // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:60:27: 60:41
    let mut _23: &T;                     // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:60:36: 60:37
    let mut _24: &T;                     // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:60:39: 60:40
    let mut _27: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _28: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _29: &&T;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _30: &&T;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _32: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _33: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _34: &&T;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _35: &&T;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _36: &&T;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _37: &&T;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _39: (&&T, &&T);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _40: &&T;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _41: &&T;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _42: &T;                         // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:61:27: 61:41
    let mut _43: &T;                     // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:61:36: 61:37
    let mut _44: &T;                     // in scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:61:39: 61:40
    let mut _47: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _48: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _49: &&T;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _50: &&T;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _52: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _53: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _54: &&T;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _55: &&T;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _56: &&T;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _57: &&T;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug iter => _5;                // in scope 1 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:22: 56:42
        let _10: &[T];                   // in scope 1 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:13: 56:18
        scope 2 {
            debug slice => _10;          // in scope 2 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:13: 56:18
            let _11: &T;                 // in scope 2 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:57:17: 57:18
            scope 3 {
                debug a => _11;          // in scope 3 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:57:17: 57:18
                let _15: &T;             // in scope 3 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:58:17: 58:18
                scope 4 {
                    debug b => _15;      // in scope 4 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:58:17: 58:18
                    let _25: &&T;        // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _26: &&T;        // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _45: &&T;        // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _46: &&T;        // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    scope 5 {
                        debug left_val => _25; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _26; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _31: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 6 {
                            debug kind => _31; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 7 {
                        debug left_val => _45; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _46; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _51: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 8 {
                            debug kind => _51; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:22: 56:42
        _3 = core::slice::<impl [T]>::windows(move _4, const 2_usize) -> bb1; // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:22: 56:42
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:32: 56:39
                                         // + literal: Const { ty: for<'a> fn(&'a [T], usize) -> Windows<'a, T> {core::slice::<impl [T]>::windows}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Windows<'_, T> as IntoIterator>::into_iter(move _3) -> bb2; // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:22: 56:42
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:22: 56:42
                                         // + literal: Const { ty: fn(Windows<'_, T>) -> <Windows<'_, T> as IntoIterator>::IntoIter {<Windows<'_, T> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = move _2;                    // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:22: 56:42
        goto -> bb3;                     // scope 1 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:9: 62:10
    }

    bb3: {
        _8 = &mut _5;                    // scope 1 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:22: 56:42
        _7 = &mut (*_8);                 // scope 1 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:22: 56:42
        _6 = <Windows<'_, T> as Iterator>::next(move _7) -> bb4; // scope 1 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:22: 56:42
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:22: 56:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut Windows<'_, T>) -> Option<<Windows<'_, T> as Iterator>::Item> {<Windows<'_, T> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = discriminant(_6);           // scope 1 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:22: 56:42
        switchInt(move _9) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 1 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:22: 56:42
    }

    bb5: {
        _10 = ((_6 as Some).0: &[T]);    // scope 1 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:13: 56:18
        _12 = const 0_usize;             // scope 2 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:57:28: 57:29
        _13 = Len((*_10));               // scope 2 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:57:22: 57:30
        _14 = Lt(_12, _13);              // scope 2 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:57:22: 57:30
        assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _12) -> bb8; // scope 2 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:57:22: 57:30
    }

    bb6: {
        unreachable;                     // scope 1 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:56:22: 56:42
    }

    bb7: {
        return;                          // scope 0 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:63:6: 63:6
    }

    bb8: {
        _11 = &(*_10)[_12];              // scope 2 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:57:21: 57:30
        _16 = const 1_usize;             // scope 3 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:58:28: 58:29
        _17 = Len((*_10));               // scope 3 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:58:22: 58:30
        _18 = Lt(_16, _17);              // scope 3 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:58:22: 58:30
        assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, _16) -> bb9; // scope 3 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:58:22: 58:30
    }

    bb9: {
        _15 = &(*_10)[_16];              // scope 3 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:58:21: 58:30
        _20 = &_11;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _23 = _11;                       // scope 4 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:60:36: 60:37
        _24 = _15;                       // scope 4 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:60:39: 60:40
        _22 = std::cmp::min::<&T>(move _23, move _24) -> bb10; // scope 4 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:60:27: 60:41
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:60:27: 60:35
                                         // + literal: Const { ty: fn(&T, &T) -> &T {std::cmp::min::<&T>}, val: Value(<ZST>) }
    }

    bb10: {
        _21 = &_22;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _19 = (move _20, move _21);      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _25 = (_19.0: &&T);              // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _26 = (_19.1: &&T);              // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _29 = _25;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _30 = _26;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _28 = <&T as PartialEq>::eq(move _29, move _30) -> bb11; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &T, &'b &T) -> bool {<&T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb11: {
        _27 = Not(move _28);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _27) -> [0: bb13, otherwise: bb12]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb12: {
        _31 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = _25;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _35;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _26;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = _37;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _32 = core::panicking::assert_failed::<&T, &T>(move _33, move _34, move _36, move _38); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &T, &'b &T, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&T, &T>}, val: Value(<ZST>) }
    }

    bb13: {
        _40 = &_15;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _43 = _11;                       // scope 4 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:61:36: 61:37
        _44 = _15;                       // scope 4 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:61:39: 61:40
        _42 = std::cmp::max::<&T>(move _43, move _44) -> bb14; // scope 4 at ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:61:27: 61:41
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/minmax-stability-issue-23687.rs:61:27: 61:35
                                         // + literal: Const { ty: fn(&T, &T) -> &T {std::cmp::max::<&T>}, val: Value(<ZST>) }
    }

    bb14: {
        _41 = &_42;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _39 = (move _40, move _41);      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _45 = (_39.0: &&T);              // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _46 = (_39.1: &&T);              // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _49 = _45;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _50 = _46;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _48 = <&T as PartialEq>::eq(move _49, move _50) -> bb15; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &T, &'b &T) -> bool {<&T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb15: {
        _47 = Not(move _48);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _47) -> [0: bb3, otherwise: bb16]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb16: {
        _51 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _53 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _55 = _45;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _54 = _55;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _46;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _56 = _57;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _58 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _52 = core::panicking::assert_failed::<&T, &T>(move _53, move _54, move _56, move _58); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &T, &'b &T, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&T, &T>}, val: Value(<ZST>) }
    }
}
