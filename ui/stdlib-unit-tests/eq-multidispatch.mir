// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/stdlib-unit-tests/eq-multidispatch.rs:3:10: 3:19>::eq(_1: &Bar, _2: &Bar) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at ui/stdlib-unit-tests/eq-multidispatch.rs:3:21: 3:26>::fmt(_1: &Bar, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Bar";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/stdlib-unit-tests/eq-multidispatch.rs:5:10: 5:15>::fmt(_1: &Baz, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Baz";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/stdlib-unit-tests/eq-multidispatch.rs:7:10: 7:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Foo";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/stdlib-unit-tests/eq-multidispatch.rs:9:10: 9:15>::fmt(_1: &Fu, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Fu";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/stdlib-unit-tests/eq-multidispatch.rs:12:1: 12:23>::eq(_1: &Baz, _2: &Baz) -> bool {
    debug self => _1;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at ui/stdlib-unit-tests/eq-multidispatch.rs:14:1: 14:27>::eq(_1: &Foo, _2: &Fu) -> bool {
    debug self => _1;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at ui/stdlib-unit-tests/eq-multidispatch.rs:15:1: 15:27>::eq(_1: &Fu, _2: &Foo) -> bool {
    debug self => _1;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at ui/stdlib-unit-tests/eq-multidispatch.rs:17:1: 17:28>::eq(_1: &Foo, _2: &Bar) -> bool {
    debug self => _1;
    let mut _0: bool;

    bb0: {
        _0 = const false;
        return;
    }
}

fn <impl at ui/stdlib-unit-tests/eq-multidispatch.rs:18:1: 18:28>::eq(_1: &Bar, _2: &Foo) -> bool {
    debug self => _1;
    let mut _0: bool;

    bb0: {
        _0 = const false;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: !;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: !;
    let mut _7: (&Bar, &Bar);
    let _8: &Bar;
    let _9: &Bar;
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&Baz, &Baz);
    let _16: &Baz;
    let _17: &Baz;
    let mut _18: bool;
    let mut _19: bool;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: (&Foo, &Fu);
    let _24: &Foo;
    let _25: &Fu;
    let mut _26: bool;
    let mut _27: bool;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&Fu, &Foo);
    let _32: &Fu;
    let _33: &Foo;
    let mut _34: bool;
    let mut _35: bool;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: &Foo;
    let mut _40: &Fu;
    let mut _41: &Fu;
    let mut _42: &Foo;
    let mut _43: &Baz;
    let mut _44: &Baz;
    let mut _45: &Bar;
    let mut _46: &Bar;
    let mut _47: &Bar;
    let mut _48: &Foo;
    let mut _49: &Foo;
    let mut _50: &Bar;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _16;
        debug right_val => _17;
        let _20: core::panicking::AssertKind;
        scope 4 {
            debug kind => _20;
        }
    }
    scope 5 {
        debug left_val => _24;
        debug right_val => _25;
        let _28: core::panicking::AssertKind;
        scope 6 {
            debug kind => _28;
        }
    }
    scope 7 {
        debug left_val => _32;
        debug right_val => _33;
        let _36: core::panicking::AssertKind;
        scope 8 {
            debug kind => _36;
        }
    }

    bb0: {
        _50 = const _;
        _49 = const _;
        _2 = <Bar as PartialEq<Foo>>::ne(_50, _49) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _3 = core::panicking::panic(const "assertion failed: Bar != Foo") -> unwind continue;
    }

    bb3: {
        _48 = const _;
        _47 = const _;
        _5 = <Foo as PartialEq<Bar>>::ne(_48, _47) -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _6 = core::panicking::panic(const "assertion failed: Foo != Bar") -> unwind continue;
    }

    bb6: {
        _46 = const _;
        _45 = const _;
        _7 = (_46, _45);
        _8 = (_7.0: &Bar);
        _9 = (_7.1: &Bar);
        _11 = <Bar as PartialEq>::eq(_8, _9) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<Bar, Bar>(move _12, _8, _9, move _14) -> unwind continue;
    }

    bb9: {
        _44 = const _;
        _43 = const _;
        _15 = (_44, _43);
        _16 = (_15.0: &Baz);
        _17 = (_15.1: &Baz);
        _19 = <Baz as PartialEq>::eq(_16, _17) -> [return: bb10, unwind continue];
    }

    bb10: {
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<Baz, Baz>(move _20, _16, _17, move _22) -> unwind continue;
    }

    bb12: {
        _42 = const _;
        _41 = const _;
        _23 = (_42, _41);
        _24 = (_23.0: &Foo);
        _25 = (_23.1: &Fu);
        _27 = <Foo as PartialEq<Fu>>::eq(_24, _25) -> [return: bb13, unwind continue];
    }

    bb13: {
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<Foo, Fu>(move _28, _24, _25, move _30) -> unwind continue;
    }

    bb15: {
        _40 = const _;
        _39 = const _;
        _31 = (_40, _39);
        _32 = (_31.0: &Fu);
        _33 = (_31.1: &Foo);
        _35 = <Fu as PartialEq<Foo>>::eq(_32, _33) -> [return: bb16, unwind continue];
    }

    bb16: {
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<Fu, Foo>(move _36, _32, _33, move _38) -> unwind continue;
    }

    bb18: {
        return;
    }
}

promoted[0] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Fu = {
    let mut _0: &Fu;
    let mut _1: Fu;

    bb0: {
        _1 = Fu;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &Fu = {
    let mut _0: &Fu;
    let mut _1: Fu;

    bb0: {
        _1 = Fu;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &Baz = {
    let mut _0: &Baz;
    let mut _1: Baz;

    bb0: {
        _1 = Baz;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &Baz = {
    let mut _0: &Baz;
    let mut _1: Baz;

    bb0: {
        _1 = Baz;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &Bar = {
    let mut _0: &Bar;
    let mut _1: Bar;

    bb0: {
        _1 = Bar;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &Bar = {
    let mut _0: &Bar;
    let mut _1: Bar;

    bb0: {
        _1 = Bar;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &Bar = {
    let mut _0: &Bar;
    let mut _1: Bar;

    bb0: {
        _1 = Bar;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &Bar = {
    let mut _0: &Bar;
    let mut _1: Bar;

    bb0: {
        _1 = Bar;
        _0 = &_1;
        return;
    }
}
