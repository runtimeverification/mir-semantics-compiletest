// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/stdlib-unit-tests/eq-multidispatch.rs:3:10: 3:19>::eq(_1: &Bar, _2: &Bar) -> bool {
    debug self => _1;                    // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:3:10: 3:19
    debug other => _2;                   // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:3:10: 3:19
    let mut _0: bool;                    // return place in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:3:10: 3:19

    bb0: {
        _0 = const true;                 // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:3:10: 3:19
        return;                          // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:3:19: 3:19
    }
}

fn <impl at ui/stdlib-unit-tests/eq-multidispatch.rs:3:21: 3:26>::fmt(_1: &Bar, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:3:21: 3:26
    debug f => _2;                       // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:3:21: 3:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:3:21: 3:26
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:3:21: 3:26
    let mut _4: &str;                    // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:3:21: 3:26
    let _5: &str;                        // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:3:21: 3:26

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:3:21: 3:26
        _5 = const "Bar";                // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:3:21: 3:26
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/eq-multidispatch.rs:3:21: 3:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:3:21: 3:26
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:3:21: 3:26
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/eq-multidispatch.rs:3:21: 3:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:3:26: 3:26
    }
}

fn <impl at ui/stdlib-unit-tests/eq-multidispatch.rs:5:10: 5:15>::fmt(_1: &Baz, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:5:10: 5:15
    debug f => _2;                       // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:5:10: 5:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:5:10: 5:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:5:10: 5:15
    let mut _4: &str;                    // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:5:10: 5:15
    let _5: &str;                        // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:5:10: 5:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:5:10: 5:15
        _5 = const "Baz";                // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/eq-multidispatch.rs:5:10: 5:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:5:10: 5:15
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/eq-multidispatch.rs:5:10: 5:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:5:15: 5:15
    }
}

fn <impl at ui/stdlib-unit-tests/eq-multidispatch.rs:7:10: 7:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:7:10: 7:15
    debug f => _2;                       // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:7:10: 7:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:7:10: 7:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:7:10: 7:15
    let mut _4: &str;                    // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:7:10: 7:15
    let _5: &str;                        // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:7:10: 7:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:7:10: 7:15
        _5 = const "Foo";                // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/eq-multidispatch.rs:7:10: 7:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:7:10: 7:15
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/eq-multidispatch.rs:7:10: 7:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:7:15: 7:15
    }
}

fn <impl at ui/stdlib-unit-tests/eq-multidispatch.rs:9:10: 9:15>::fmt(_1: &Fu, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:9:10: 9:15
    debug f => _2;                       // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:9:10: 9:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:9:10: 9:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:9:10: 9:15
    let mut _4: &str;                    // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:9:10: 9:15
    let _5: &str;                        // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:9:10: 9:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:9:10: 9:15
        _5 = const "Fu";                 // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:9:10: 9:15
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/eq-multidispatch.rs:9:10: 9:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:9:10: 9:15
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:9:10: 9:15
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/eq-multidispatch.rs:9:10: 9:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:9:15: 9:15
    }
}

fn <impl at ui/stdlib-unit-tests/eq-multidispatch.rs:12:1: 12:23>::eq(_1: &Baz, _2: &Baz) -> bool {
    debug self => _1;                    // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:12:32: 12:37
    let mut _0: bool;                    // return place in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:12:51: 12:55

    bb0: {
        _0 = const true;                 // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:12:59: 12:63
        return;                          // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:12:65: 12:65
    }
}

fn <impl at ui/stdlib-unit-tests/eq-multidispatch.rs:14:1: 14:27>::eq(_1: &Foo, _2: &Fu) -> bool {
    debug self => _1;                    // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:14:36: 14:41
    let mut _0: bool;                    // return place in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:14:54: 14:58

    bb0: {
        _0 = const true;                 // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:14:61: 14:65
        return;                          // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:14:67: 14:67
    }
}

fn <impl at ui/stdlib-unit-tests/eq-multidispatch.rs:15:1: 15:27>::eq(_1: &Fu, _2: &Foo) -> bool {
    debug self => _1;                    // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:15:36: 15:41
    let mut _0: bool;                    // return place in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:15:55: 15:59

    bb0: {
        _0 = const true;                 // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:15:62: 15:66
        return;                          // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:15:68: 15:68
    }
}

fn <impl at ui/stdlib-unit-tests/eq-multidispatch.rs:17:1: 17:28>::eq(_1: &Foo, _2: &Bar) -> bool {
    debug self => _1;                    // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:17:37: 17:42
    let mut _0: bool;                    // return place in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:17:56: 17:60

    bb0: {
        _0 = const false;                // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:17:63: 17:68
        return;                          // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:17:70: 17:70
    }
}

fn <impl at ui/stdlib-unit-tests/eq-multidispatch.rs:18:1: 18:28>::eq(_1: &Bar, _2: &Foo) -> bool {
    debug self => _1;                    // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:18:37: 18:42
    let mut _0: bool;                    // return place in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:18:56: 18:60

    bb0: {
        _0 = const false;                // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:18:63: 18:68
        return;                          // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:18:70: 18:70
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:20:11: 20:11
    let mut _1: bool;                    // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:5: 21:24
    let mut _2: bool;                    // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:13: 21:23
    let mut _3: &Bar;                    // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:13: 21:16
    let mut _4: &Foo;                    // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:20: 21:23
    let mut _5: !;                       // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:5: 21:24
    let mut _6: bool;                    // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:5: 22:24
    let mut _7: bool;                    // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:13: 22:23
    let mut _8: &Foo;                    // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:13: 22:16
    let mut _9: &Bar;                    // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:20: 22:23
    let mut _10: !;                      // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:5: 22:24
    let mut _11: (&Bar, &Bar);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _12: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _13: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _14: &Bar;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _15: &Bar;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _17: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _18: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _19: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _21: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _22: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _23: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _24: &Bar;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _25: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _26: &Bar;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _28: (&Baz, &Baz);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _29: &Baz;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _30: &Baz;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _31: &Baz;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _32: &Baz;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _33: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _34: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _35: &Baz;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _36: &Baz;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _38: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _39: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _40: &Baz;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _41: &Baz;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _42: &Baz;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _43: &Baz;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _45: (&Foo, &Fu);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _46: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _47: &Fu;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _48: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _49: &Fu;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _50: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _51: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _52: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _53: &Fu;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _55: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _56: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _57: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _58: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _59: &Fu;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _60: &Fu;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _62: (&Fu, &Foo);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _63: &Fu;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _64: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _65: &Fu;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _66: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _67: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _68: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _69: &Fu;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _70: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _72: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _73: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _74: &Fu;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _75: &Fu;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _76: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _77: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _79: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _80: &Fu;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _81: &Fu;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _82: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _83: &Baz;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _84: &Baz;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _85: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _86: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _87: &Bar;                   // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:20: 22:23
    let mut _88: &Foo;                   // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:13: 22:16
    let mut _89: &Foo;                   // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:20: 21:23
    let mut _90: &Bar;                   // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:13: 21:16
    scope 1 {
        debug left_val => _14;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _15;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _20: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _20;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _31;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _32;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _37: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _37;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _48;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _49;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _54: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _54;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug left_val => _65;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _66;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _71: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 8 {
            debug kind => _71;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _90 = const _;                   // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:13: 21:16
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/eq-multidispatch.rs:21:13: 21:16
                                         // + literal: Const { ty: &Bar, val: Unevaluated(main, [], Some(promoted[11])) }
        _3 = _90;                        // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:13: 21:16
        _89 = const _;                   // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:20: 21:23
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/eq-multidispatch.rs:21:20: 21:23
                                         // + literal: Const { ty: &Foo, val: Unevaluated(main, [], Some(promoted[10])) }
        _4 = _89;                        // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:20: 21:23
        _2 = <Bar as PartialEq<Foo>>::ne(move _3, move _4) -> bb1; // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:13: 21:23
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/eq-multidispatch.rs:21:13: 21:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Bar, &'b Foo) -> bool {<Bar as PartialEq<Foo>>::ne}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Not(move _2);               // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:5: 21:24
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:5: 21:24
    }

    bb2: {
        _5 = core::panicking::panic(const "assertion failed: Bar != Foo"); // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:5: 21:24
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/eq-multidispatch.rs:21:5: 21:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _88 = const _;                   // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:13: 22:16
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/eq-multidispatch.rs:22:13: 22:16
                                         // + literal: Const { ty: &Foo, val: Unevaluated(main, [], Some(promoted[9])) }
        _8 = _88;                        // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:13: 22:16
        _87 = const _;                   // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:20: 22:23
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/eq-multidispatch.rs:22:20: 22:23
                                         // + literal: Const { ty: &Bar, val: Unevaluated(main, [], Some(promoted[8])) }
        _9 = _87;                        // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:20: 22:23
        _7 = <Foo as PartialEq<Bar>>::ne(move _8, move _9) -> bb4; // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:13: 22:23
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/eq-multidispatch.rs:22:13: 22:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Bar) -> bool {<Foo as PartialEq<Bar>>::ne}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = Not(move _7);               // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:5: 22:24
        switchInt(move _6) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:5: 22:24
    }

    bb5: {
        _10 = core::panicking::panic(const "assertion failed: Foo != Bar"); // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:5: 22:24
                                         // mir::Constant
                                         // + span: ui/stdlib-unit-tests/eq-multidispatch.rs:22:5: 22:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _86 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Bar, val: Unevaluated(main, [], Some(promoted[7])) }
        _12 = _86;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _85 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Bar, val: Unevaluated(main, [], Some(promoted[6])) }
        _13 = _85;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _11 = (move _12, move _13);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _14 = (_11.0: &Bar);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _15 = (_11.1: &Bar);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _18 = _14;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _19 = _15;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _17 = <Bar as PartialEq>::eq(move _18, move _19) -> bb7; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Bar, &'b Bar) -> bool {<Bar as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = Not(move _17);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _16) -> [0: bb9, otherwise: bb8]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _20 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = _14;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _24;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _26 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = _26;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _21 = core::panicking::assert_failed::<Bar, Bar>(move _22, move _23, move _25, move _27); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Bar, &'b Bar, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Bar, Bar>}, val: Value(<ZST>) }
    }

    bb9: {
        _84 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Baz, val: Unevaluated(main, [], Some(promoted[5])) }
        _29 = _84;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _83 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Baz, val: Unevaluated(main, [], Some(promoted[4])) }
        _30 = _83;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _28 = (move _29, move _30);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _31 = (_28.0: &Baz);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _32 = (_28.1: &Baz);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _35 = _31;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _36 = _32;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _34 = <Baz as PartialEq>::eq(move _35, move _36) -> bb10; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Baz, &'b Baz) -> bool {<Baz as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb10: {
        _33 = Not(move _34);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _33) -> [0: bb12, otherwise: bb11]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _37 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _41 = _31;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _40 = _41;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _43 = _32;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = _43;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _44 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _38 = core::panicking::assert_failed::<Baz, Baz>(move _39, move _40, move _42, move _44); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Baz, &'b Baz, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Baz, Baz>}, val: Value(<ZST>) }
    }

    bb12: {
        _82 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Foo, val: Unevaluated(main, [], Some(promoted[3])) }
        _46 = _82;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _81 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Fu, val: Unevaluated(main, [], Some(promoted[2])) }
        _47 = _81;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _45 = (move _46, move _47);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _48 = (_45.0: &Foo);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _49 = (_45.1: &Fu);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _52 = _48;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _53 = _49;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _51 = <Foo as PartialEq<Fu>>::eq(move _52, move _53) -> bb13; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Fu) -> bool {<Foo as PartialEq<Fu>>::eq}, val: Value(<ZST>) }
    }

    bb13: {
        _50 = Not(move _51);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _50) -> [0: bb15, otherwise: bb14]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb14: {
        _54 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _56 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = _48;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _58;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _60 = _49;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _59 = _60;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _55 = core::panicking::assert_failed::<Foo, Fu>(move _56, move _57, move _59, move _61); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Foo, &'b Fu, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Foo, Fu>}, val: Value(<ZST>) }
    }

    bb15: {
        _80 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Fu, val: Unevaluated(main, [], Some(promoted[1])) }
        _63 = _80;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _79 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Foo, val: Unevaluated(main, [], Some(promoted[0])) }
        _64 = _79;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _62 = (move _63, move _64);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _65 = (_62.0: &Fu);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _66 = (_62.1: &Foo);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _69 = _65;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _70 = _66;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _68 = <Fu as PartialEq<Foo>>::eq(move _69, move _70) -> bb16; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Fu, &'b Foo) -> bool {<Fu as PartialEq<Foo>>::eq}, val: Value(<ZST>) }
    }

    bb16: {
        _67 = Not(move _68);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _67) -> [0: bb18, otherwise: bb17]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb17: {
        _71 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _73 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _75 = _65;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _74 = _75;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _77 = _66;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _76 = _77;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _78 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _72 = core::panicking::assert_failed::<Fu, Foo>(move _73, move _74, move _76, move _78); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Fu, &'b Foo, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Fu, Foo>}, val: Value(<ZST>) }
    }

    bb18: {
        return;                          // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:30:2: 30:2
    }
}

promoted[0] in main: &Foo = {
    let mut _0: &Foo;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Foo;                     // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:29:20: 29:23

    bb0: {
        _1 = Foo;                        // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:29:20: 29:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &Fu = {
    let mut _0: &Fu;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: Fu;                      // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:29:16: 29:18

    bb0: {
        _1 = Fu;                         // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:29:16: 29:18
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[2] in main: &Fu = {
    let mut _0: &Fu;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Fu;                      // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:28:21: 28:23

    bb0: {
        _1 = Fu;                         // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:28:21: 28:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &Foo = {
    let mut _0: &Foo;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: Foo;                     // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:28:16: 28:19

    bb0: {
        _1 = Foo;                        // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:28:16: 28:19
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[4] in main: &Baz = {
    let mut _0: &Baz;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Baz;                     // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:26:21: 26:24

    bb0: {
        _1 = Baz;                        // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:26:21: 26:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in main: &Baz = {
    let mut _0: &Baz;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: Baz;                     // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:26:16: 26:19

    bb0: {
        _1 = Baz;                        // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:26:16: 26:19
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[6] in main: &Bar = {
    let mut _0: &Bar;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Bar;                     // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:24:21: 24:24

    bb0: {
        _1 = Bar;                        // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:24:21: 24:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[7] in main: &Bar = {
    let mut _0: &Bar;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: Bar;                     // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:24:16: 24:19

    bb0: {
        _1 = Bar;                        // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:24:16: 24:19
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[8] in main: &Bar = {
    let mut _0: &Bar;                    // return place in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:20: 22:23
    let mut _1: Bar;                     // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:20: 22:23

    bb0: {
        _1 = Bar;                        // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:20: 22:23
        _0 = &_1;                        // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:20: 22:23
        return;                          // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:20: 22:23
    }
}

promoted[9] in main: &Foo = {
    let mut _0: &Foo;                    // return place in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:13: 22:16
    let mut _1: Foo;                     // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:13: 22:16

    bb0: {
        _1 = Foo;                        // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:13: 22:16
        _0 = &_1;                        // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:13: 22:16
        return;                          // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:22:13: 22:16
    }
}

promoted[10] in main: &Foo = {
    let mut _0: &Foo;                    // return place in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:20: 21:23
    let mut _1: Foo;                     // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:20: 21:23

    bb0: {
        _1 = Foo;                        // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:20: 21:23
        _0 = &_1;                        // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:20: 21:23
        return;                          // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:20: 21:23
    }
}

promoted[11] in main: &Bar = {
    let mut _0: &Bar;                    // return place in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:13: 21:16
    let mut _1: Bar;                     // in scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:13: 21:16

    bb0: {
        _1 = Bar;                        // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:13: 21:16
        _0 = &_1;                        // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:13: 21:16
        return;                          // scope 0 at ui/stdlib-unit-tests/eq-multidispatch.rs:21:13: 21:16
    }
}
