// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Foo::foo(_1: &Self, _2: T) -> u32 {
    debug self => _1;                    // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:8:12: 8:17
    let mut _0: u32;                     // return place in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:8:28: 8:31

    bb0: {
        _0 = const 42_u32;               // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:8:34: 8:36
        drop(_2) -> bb1;                 // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:8:37: 8:38
    }

    bb1: {
        return;                          // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:8:38: 8:38
    }
}

fn Bar::bar(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:12:12: 12:17
    let mut _0: ();                      // return place in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:12:19: 12:19
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:12:30: 12:36
    let mut _5: &[&str; 1];              // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:12:30: 12:36
    let _6: &[&str; 1];                  // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:12:30: 12:36
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: &[&str; 1];             // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:12:30: 12:36

    bb0: {
        _11 = const _;                   // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:12:30: 12:36
                                         // mir::Constant
                                         // + span: ui/cast/cast-rfc0401-vtable-kinds.rs:12:30: 12:36
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Bar::bar, [Self], Some(promoted[1])) }
        _6 = _11;                        // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:12:30: 12:36
        _5 = _6;                         // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:12:30: 12:36
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:12:30: 12:36
        _10 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(Bar::bar, [Self], Some(promoted[0])) }
        _9 = _10;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _print(move _3) -> bb2;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:12:40: 12:40
    }
}

promoted[0] in Bar::bar: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in Bar::bar: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:12:30: 12:36
    let mut _1: [&str; 1];               // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:12:30: 12:36

    bb0: {
        _1 = [const "Bar!\n"];           // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:12:30: 12:36
                                         // mir::Constant
                                         // + span: ui/cast/cast-rfc0401-vtable-kinds.rs:12:30: 12:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:12:30: 12:36
        return;                          // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:12:30: 12:36
    }
}

fn <impl at ui/cast/cast-rfc0401-vtable-kinds.rs:16:1: 16:22>::foo(_1: &u32, _2: u32) -> u32 {
    debug self => _1;                    // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:16:32: 16:37
    let mut _0: u32;                     // return place in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:16:50: 16:53
    let mut _3: &u32;                    // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:16:56: 16:60

    bb0: {
        _3 = _1;                         // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:16:56: 16:60
        _0 = <&u32 as Add<u32>>::add(move _3, const 43_u32) -> bb1; // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:16:56: 16:63
                                         // mir::Constant
                                         // + span: ui/cast/cast-rfc0401-vtable-kinds.rs:16:56: 16:63
                                         // + literal: Const { ty: fn(&u32, u32) -> <&u32 as Add<u32>>::Output {<&u32 as Add<u32>>::add}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:16:65: 16:65
    }
}

fn round_trip_and_call(_1: *const dyn Foo<u32>) -> u32 {
    debug t => _1;                       // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:19:35: 19:36
    let mut _0: u32;                     // return place in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:19:67: 19:70
    let _2: *const dyn Foo<u16>;         // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:20:9: 20:14
    let mut _3: *const dyn Foo<u16>;     // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:20:39: 20:52
    let mut _4: *const dyn Foo<u32>;     // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:20:39: 20:40
    let mut _6: *mut dyn Foo<u32>;       // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:21:15: 21:41
    let mut _7: *const dyn Foo<u16>;     // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:21:15: 21:20
    let mut _8: &dyn Foo<u32>;           // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:23:5: 23:19
    let _9: &dyn Foo<u32>;               // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:23:5: 23:12
    scope 1 {
        debug foo_e => _2;               // in scope 1 at ui/cast/cast-rfc0401-vtable-kinds.rs:20:9: 20:14
        let _5: *mut dyn Foo<u32>;       // in scope 1 at ui/cast/cast-rfc0401-vtable-kinds.rs:21:9: 21:12
        scope 2 {
            debug r_1 => _5;             // in scope 2 at ui/cast/cast-rfc0401-vtable-kinds.rs:21:9: 21:12
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:20:39: 20:40
        _3 = move _4 as *const dyn Foo<u16> (PtrToPtr); // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:20:39: 20:52
        _2 = _3;                         // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:20:39: 20:52
        _7 = _2;                         // scope 1 at ui/cast/cast-rfc0401-vtable-kinds.rs:21:15: 21:20
        _6 = move _7 as *mut dyn Foo<u32> (PtrToPtr); // scope 1 at ui/cast/cast-rfc0401-vtable-kinds.rs:21:15: 21:41
        _5 = _6;                         // scope 1 at ui/cast/cast-rfc0401-vtable-kinds.rs:21:15: 21:41
        _9 = &(*_5);                     // scope 2 at ui/cast/cast-rfc0401-vtable-kinds.rs:23:5: 23:12
        _8 = _9;                         // scope 2 at ui/cast/cast-rfc0401-vtable-kinds.rs:23:5: 23:19
        _0 = <dyn Foo<u32> as Foo<u32>>::foo(move _8, const 0_u32) -> bb1; // scope 2 at ui/cast/cast-rfc0401-vtable-kinds.rs:23:5: 23:19
                                         // mir::Constant
                                         // + span: ui/cast/cast-rfc0401-vtable-kinds.rs:23:13: 23:16
                                         // + literal: Const { ty: for<'a> fn(&'a dyn Foo<u32>, u32) -> u32 {<dyn Foo<u32> as Foo<u32>>::foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:24:2: 24:2
    }
}

fn foo_to_bar(_1: *const FooS<T>) -> *const BarS<T> {
    debug u => _1;                       // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:31:25: 31:26
    let mut _0: *const BarS<T>;          // return place in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:31:47: 31:61
    let mut _2: *const FooS<T>;          // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:32:5: 32:6

    bb0: {
        _2 = _1;                         // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:32:5: 32:6
        _0 = move _2 as *const BarS<T> (PtrToPtr); // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:32:5: 32:24
        return;                          // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:33:2: 33:2
    }
}

fn tuple_i32_to_u32(_1: *const (i32, T)) -> *const (u32, T) {
    debug u => _1;                       // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:35:31: 35:32
    let mut _0: *const (u32, T);         // return place in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:35:54: 35:69
    let mut _2: *const (i32, T);         // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:36:5: 36:6

    bb0: {
        _2 = _1;                         // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:36:5: 36:6
        _0 = move _2 as *const (u32, T) (PtrToPtr); // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:36:5: 36:25
        return;                          // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:37:2: 37:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:40:11: 40:11
    let _1: u32;                         // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:41:9: 41:10
    let mut _3: &u32;                    // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:42:29: 42:31
    let _4: &u32;                        // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:42:29: 42:31
    let mut _6: *const dyn Foo<u32>;     // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:43:43: 43:67
    let mut _7: *const dyn Foo<u32>;     // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:43:43: 43:67
    let mut _8: *const dyn Foo<u32>;     // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:43:43: 43:67
    let mut _9: *const dyn Foo<u32>;     // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:43:43: 43:44
    let mut _10: (&u32, &u32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _11: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _12: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _17: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _18: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _20: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _21: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _22: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _23: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _24: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _25: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _28: [u32; 3];               // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:46:18: 46:25
    let mut _30: &FooS<[u32; 3]>;        // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:47:27: 47:29
    let _31: &FooS<[u32; 3]>;            // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:47:27: 47:29
    let mut _34: *const FooS<[u32]>;     // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:49:51: 49:52
    let _36: &BarS<[u32]>;               // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:50:35: 50:44
    let mut _37: (&&[u32], &&[u32; 3]);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _38: &&[u32];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _39: &[u32];                     // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:51:16: 51:20
    let mut _40: &&[u32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _43: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _44: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _45: &&[u32];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _46: &&[u32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _48: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _49: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _50: &&[u32];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _51: &&[u32];                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _52: &&[u32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _53: &&[u32; 3];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _56: [u8; 3];                // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:55:20: 55:29
    let mut _58: &(i32, [u8; 3]);        // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:56:27: 56:29
    let _59: &(i32, [u8; 3]);            // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:56:27: 56:29
    let mut _62: *const (i32, [u8]);     // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:58:55: 58:56
    let mut _63: (&&[u8], &&[u8; 3]);    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _64: &&[u8];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _65: &[u8];                      // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:60:20: 60:31
    let mut _66: &&[u8; 3];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _69: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _70: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _71: &&[u8];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _72: &&[u8; 3];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _74: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _75: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _76: &&[u8];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _77: &&[u8];                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _78: &&[u8; 3];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _79: &&[u8; 3];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/cast/cast-rfc0401-vtable-kinds.rs:41:9: 41:10
        let _2: &dyn Foo<u32>;           // in scope 1 at ui/cast/cast-rfc0401-vtable-kinds.rs:42:9: 42:10
        scope 2 {
            debug y => _2;               // in scope 2 at ui/cast/cast-rfc0401-vtable-kinds.rs:42:9: 42:10
            let _5: u32;                 // in scope 2 at ui/cast/cast-rfc0401-vtable-kinds.rs:43:9: 43:11
            scope 3 {
                debug fl => _5;          // in scope 3 at ui/cast/cast-rfc0401-vtable-kinds.rs:43:9: 43:11
                let _13: &u32;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _14: &u32;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _27: FooS<[u32; 3]>; // in scope 3 at ui/cast/cast-rfc0401-vtable-kinds.rs:46:9: 46:10
                let mut _83: &u32;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 5 {
                    debug left_val => _13; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _14; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _19: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 6 {
                        debug kind => _19; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 7 {
                    debug s => _27;      // in scope 7 at ui/cast/cast-rfc0401-vtable-kinds.rs:46:9: 46:10
                    let _29: &FooS<[u32]>; // in scope 7 at ui/cast/cast-rfc0401-vtable-kinds.rs:47:9: 47:10
                    scope 8 {
                        debug u => _29;  // in scope 8 at ui/cast/cast-rfc0401-vtable-kinds.rs:47:9: 47:10
                        let _32: *const FooS<[u32]>; // in scope 8 at ui/cast/cast-rfc0401-vtable-kinds.rs:48:9: 48:10
                        scope 9 {
                            debug u => _32; // in scope 9 at ui/cast/cast-rfc0401-vtable-kinds.rs:48:9: 48:10
                            let _33: *const BarS<[u32]>; // in scope 9 at ui/cast/cast-rfc0401-vtable-kinds.rs:49:9: 49:16
                            scope 10 {
                                debug bar_ref => _33; // in scope 10 at ui/cast/cast-rfc0401-vtable-kinds.rs:49:9: 49:16
                                let _35: &BarS<[u32]>; // in scope 10 at ui/cast/cast-rfc0401-vtable-kinds.rs:50:9: 50:10
                                scope 11 {
                                    debug z => _35; // in scope 11 at ui/cast/cast-rfc0401-vtable-kinds.rs:50:9: 50:10
                                    let _41: &&[u32]; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                    let _42: &&[u32; 3]; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                    let _55: (i32, [u8; 3]); // in scope 11 at ui/cast/cast-rfc0401-vtable-kinds.rs:55:9: 55:10
                                    let mut _82: &&[u32; 3]; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                    scope 13 {
                                        debug left_val => _41; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                        debug right_val => _42; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                        let _47: core::panicking::AssertKind; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                        scope 14 {
                                            debug kind => _47; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                        }
                                    }
                                    scope 15 {
                                        debug s => _55; // in scope 15 at ui/cast/cast-rfc0401-vtable-kinds.rs:55:9: 55:10
                                        let _57: &(i32, [u8]); // in scope 15 at ui/cast/cast-rfc0401-vtable-kinds.rs:56:9: 56:10
                                        scope 16 {
                                            debug u => _57; // in scope 16 at ui/cast/cast-rfc0401-vtable-kinds.rs:56:9: 56:10
                                            let _60: *const (i32, [u8]); // in scope 16 at ui/cast/cast-rfc0401-vtable-kinds.rs:57:9: 57:10
                                            scope 17 {
                                                debug u => _60; // in scope 17 at ui/cast/cast-rfc0401-vtable-kinds.rs:57:9: 57:10
                                                let _61: *const (u32, [u8]); // in scope 17 at ui/cast/cast-rfc0401-vtable-kinds.rs:58:9: 58:14
                                                scope 18 {
                                                    debug u_u32 => _61; // in scope 18 at ui/cast/cast-rfc0401-vtable-kinds.rs:58:9: 58:14
                                                    scope 19 {
                                                        let _67: &&[u8]; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                        let _68: &&[u8; 3]; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                        let mut _81: &&[u8; 3]; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                        scope 20 {
                                                            debug left_val => _67; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                            debug right_val => _68; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                            let _73: core::panicking::AssertKind; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                            scope 21 {
                                                                debug kind => _73; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                scope 12 {
                                }
                            }
                        }
                    }
                }
            }
            scope 4 {
            }
        }
    }

    bb0: {
        _1 = const 4_u32;                // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:41:13: 41:17
        _4 = &_1;                        // scope 1 at ui/cast/cast-rfc0401-vtable-kinds.rs:42:29: 42:31
        _3 = _4;                         // scope 1 at ui/cast/cast-rfc0401-vtable-kinds.rs:42:29: 42:31
        _2 = move _3 as &dyn Foo<u32> (Pointer(Unsize)); // scope 1 at ui/cast/cast-rfc0401-vtable-kinds.rs:42:29: 42:31
        _9 = &raw const (*_2);           // scope 4 at ui/cast/cast-rfc0401-vtable-kinds.rs:43:43: 43:44
        _8 = move _9 as *const dyn Foo<u32> (Pointer(Unsize)); // scope 4 at ui/cast/cast-rfc0401-vtable-kinds.rs:43:43: 43:44
        _7 = _8;                         // scope 4 at ui/cast/cast-rfc0401-vtable-kinds.rs:43:43: 43:67
        _6 = move _7 as *const dyn Foo<u32> (Pointer(Unsize)); // scope 4 at ui/cast/cast-rfc0401-vtable-kinds.rs:43:43: 43:67
        _5 = round_trip_and_call(move _6) -> bb1; // scope 4 at ui/cast/cast-rfc0401-vtable-kinds.rs:43:23: 43:68
                                         // mir::Constant
                                         // + span: ui/cast/cast-rfc0401-vtable-kinds.rs:43:23: 43:42
                                         // + literal: Const { ty: for<'a> unsafe fn(*const (dyn Foo<u32> + 'a)) -> u32 {round_trip_and_call}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = &_5;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _83 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[2])) }
        _12 = _83;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _10 = (move _11, move _12);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _13 = (_10.0: &u32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _14 = (_10.1: &u32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _17 = (*_13);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _18 = const 47_u32;              // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _16 = Eq(move _17, move _18);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _15 = Not(move _16);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _15) -> [0: bb3, otherwise: bb2]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _19 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _23 = _13;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _23;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _14;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = _25;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _20 = core::panicking::assert_failed::<u32, u32>(move _21, move _22, move _24, move _26); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb3: {
        _28 = [const 0_u32, const 1_u32, const 2_u32]; // scope 3 at ui/cast/cast-rfc0401-vtable-kinds.rs:46:18: 46:25
        _27 = FooS::<[u32; 3]>(move _28); // scope 3 at ui/cast/cast-rfc0401-vtable-kinds.rs:46:13: 46:26
        _31 = &_27;                      // scope 7 at ui/cast/cast-rfc0401-vtable-kinds.rs:47:27: 47:29
        _30 = _31;                       // scope 7 at ui/cast/cast-rfc0401-vtable-kinds.rs:47:27: 47:29
        _29 = move _30 as &FooS<[u32]> (Pointer(Unsize)); // scope 7 at ui/cast/cast-rfc0401-vtable-kinds.rs:47:27: 47:29
        _32 = &raw const (*_29);         // scope 8 at ui/cast/cast-rfc0401-vtable-kinds.rs:48:33: 48:34
        _34 = _32;                       // scope 9 at ui/cast/cast-rfc0401-vtable-kinds.rs:49:51: 49:52
        _33 = foo_to_bar::<[u32]>(move _34) -> bb4; // scope 9 at ui/cast/cast-rfc0401-vtable-kinds.rs:49:40: 49:53
                                         // mir::Constant
                                         // + span: ui/cast/cast-rfc0401-vtable-kinds.rs:49:40: 49:50
                                         // + literal: Const { ty: fn(*const FooS<[u32]>) -> *const BarS<[u32]> {foo_to_bar::<[u32]>}, val: Value(<ZST>) }
    }

    bb4: {
        _36 = &(*_33);                   // scope 12 at ui/cast/cast-rfc0401-vtable-kinds.rs:50:35: 50:44
        _35 = _36;                       // scope 12 at ui/cast/cast-rfc0401-vtable-kinds.rs:50:35: 50:44
        _39 = &((*_35).0: [u32]);        // scope 11 at ui/cast/cast-rfc0401-vtable-kinds.rs:51:16: 51:20
        _38 = &_39;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _82 = const _;                   // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u32; 3], val: Unevaluated(main, [], Some(promoted[1])) }
        _40 = _82;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _37 = (move _38, move _40);      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _41 = (_37.0: &&[u32]);          // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _42 = (_37.1: &&[u32; 3]);       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _45 = _41;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _46 = _42;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _44 = <&[u32] as PartialEq<&[u32; 3]>>::eq(move _45, move _46) -> bb5; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[u32], &'b &[u32; 3]) -> bool {<&[u32] as PartialEq<&[u32; 3]>>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _43 = Not(move _44);             // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _43) -> [0: bb7, otherwise: bb6]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _47 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _49 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _51 = _41;                       // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _50 = _51;                       // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _53 = _42;                       // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _52 = _53;                       // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _54 = Option::<Arguments<'_>>::None; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _48 = core::panicking::assert_failed::<&[u32], &[u32; 3]>(move _49, move _50, move _52, move _54); // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[u32], &'b &[u32; 3], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[u32], &[u32; 3]>}, val: Value(<ZST>) }
    }

    bb7: {
        _56 = [const 0_u8, const 1_u8, const 2_u8]; // scope 11 at ui/cast/cast-rfc0401-vtable-kinds.rs:55:20: 55:29
        _55 = (const 0_i32, move _56);   // scope 11 at ui/cast/cast-rfc0401-vtable-kinds.rs:55:13: 55:30
        _59 = &_55;                      // scope 15 at ui/cast/cast-rfc0401-vtable-kinds.rs:56:27: 56:29
        _58 = _59;                       // scope 15 at ui/cast/cast-rfc0401-vtable-kinds.rs:56:27: 56:29
        _57 = move _58 as &(i32, [u8]) (Pointer(Unsize)); // scope 15 at ui/cast/cast-rfc0401-vtable-kinds.rs:56:27: 56:29
        _60 = &raw const (*_57);         // scope 16 at ui/cast/cast-rfc0401-vtable-kinds.rs:57:33: 57:34
        _62 = _60;                       // scope 17 at ui/cast/cast-rfc0401-vtable-kinds.rs:58:55: 58:56
        _61 = tuple_i32_to_u32::<[u8]>(move _62) -> bb8; // scope 17 at ui/cast/cast-rfc0401-vtable-kinds.rs:58:38: 58:57
                                         // mir::Constant
                                         // + span: ui/cast/cast-rfc0401-vtable-kinds.rs:58:38: 58:54
                                         // + literal: Const { ty: fn(*const (i32, [u8])) -> *const (u32, [u8]) {tuple_i32_to_u32::<[u8]>}, val: Value(<ZST>) }
    }

    bb8: {
        _65 = &((*_61).1: [u8]);         // scope 19 at ui/cast/cast-rfc0401-vtable-kinds.rs:60:20: 60:31
        _64 = &_65;                      // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _81 = const _;                   // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u8; 3], val: Unevaluated(main, [], Some(promoted[0])) }
        _66 = _81;                       // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _63 = (move _64, move _66);      // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _67 = (_63.0: &&[u8]);           // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _68 = (_63.1: &&[u8; 3]);        // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _71 = _67;                       // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _72 = _68;                       // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _70 = <&[u8] as PartialEq<&[u8; 3]>>::eq(move _71, move _72) -> bb9; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[u8], &'b &[u8; 3]) -> bool {<&[u8] as PartialEq<&[u8; 3]>>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _69 = Not(move _70);             // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _69) -> [0: bb11, otherwise: bb10]; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _73 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _75 = const core::panicking::AssertKind::Eq; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _77 = _67;                       // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _76 = _77;                       // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _79 = _68;                       // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _78 = _79;                       // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _80 = Option::<Arguments<'_>>::None; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _74 = core::panicking::assert_failed::<&[u8], &[u8; 3]>(move _75, move _76, move _78, move _80); // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[u8], &'b &[u8; 3], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[u8], &[u8; 3]>}, val: Value(<ZST>) }
    }

    bb11: {
        return;                          // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:62:2: 62:2
    }
}

promoted[0] in main: &&[u8; 3] = {
    let mut _0: &&[u8; 3];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u8; 3];                // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:60:33: 60:43
    let mut _2: [u8; 3];                 // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:60:34: 60:43

    bb0: {
        _2 = [const 0_u8, const 1_u8, const 2_u8]; // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:60:34: 60:43
        _1 = &_2;                        // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:60:33: 60:43
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &&[u32; 3] = {
    let mut _0: &&[u32; 3];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u32; 3];               // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:51:22: 51:30
    let mut _2: [u32; 3];                // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:51:23: 51:30

    bb0: {
        _2 = [const 0_u32, const 1_u32, const 2_u32]; // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:51:23: 51:30
        _1 = &_2;                        // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:51:22: 51:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:44:20: 44:26
    let mut _2: (u32, bool);             // in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:44:20: 44:26

    bb0: {
        _2 = CheckedAdd(const 43_u32, const 4_u32); // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:44:20: 44:26
        _1 = move (_2.0: u32);           // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:44:20: 44:26
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn FooS(_1: T) -> FooS<T> {
    let mut _0: FooS<T>;                 // return place in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:27:1: 27:22

    bb0: {
        _0 = FooS::<T>(move _1);         // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:27:1: 27:22
        return;                          // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:27:1: 27:22
    }
}

// MIR FOR CTFE
fn FooS(_1: T) -> FooS<T> {
    let mut _0: FooS<T>;                 // return place in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:27:1: 27:22

    bb0: {
        _0 = FooS::<T>(move _1);         // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:27:1: 27:22
        return;                          // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:27:1: 27:22
    }
}

fn BarS(_1: T) -> BarS<T> {
    let mut _0: BarS<T>;                 // return place in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:29:1: 29:22

    bb0: {
        _0 = BarS::<T>(move _1);         // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:29:1: 29:22
        return;                          // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:29:1: 29:22
    }
}

// MIR FOR CTFE
fn BarS(_1: T) -> BarS<T> {
    let mut _0: BarS<T>;                 // return place in scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:29:1: 29:22

    bb0: {
        _0 = BarS::<T>(move _1);         // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:29:1: 29:22
        return;                          // scope 0 at ui/cast/cast-rfc0401-vtable-kinds.rs:29:1: 29:22
    }
}
