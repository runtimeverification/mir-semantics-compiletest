// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Foo::foo(_1: &Self, _2: T) -> u32 {
    debug self => _1;
    let mut _0: u32;

    bb0: {
        _0 = const 42_u32;
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn Bar::bar(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[&str; 1];

    bb0: {
        _5 = const _;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = _print(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in Bar::bar: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Bar!\n"];
        _0 = &_1;
        return;
    }
}

fn <impl at ui/cast/cast-rfc0401-vtable-kinds.rs:16:1: 16:22>::foo(_1: &u32, _2: u32) -> u32 {
    debug self => _1;
    let mut _0: u32;

    bb0: {
        _0 = <&u32 as Add<u32>>::add(_1, const 43_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn round_trip_and_call(_1: *const dyn Foo<u32>) -> u32 {
    debug t => _1;
    let mut _0: u32;
    let mut _2: *const dyn Foo<u16>;
    let mut _3: *mut dyn Foo<u32>;
    let _4: &dyn Foo<u32>;
    scope 1 {
        debug foo_e => _2;
        scope 2 {
            debug r_1 => _3;
        }
    }

    bb0: {
        _2 = _1 as *const dyn Foo<u16> (PtrToPtr);
        _3 = _2 as *mut dyn Foo<u32> (PtrToPtr);
        _4 = &(*_3);
        _0 = <dyn Foo<u32> as Foo<u32>>::foo(_4, const 0_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn foo_to_bar(_1: *const FooS<T>) -> *const BarS<T> {
    debug u => _1;
    let mut _0: *const BarS<T>;

    bb0: {
        _0 = _1 as *const BarS<T> (PtrToPtr);
        return;
    }
}

fn tuple_i32_to_u32(_1: *const (i32, T)) -> *const (u32, T) {
    debug u => _1;
    let mut _0: *const (u32, T);

    bb0: {
        _0 = _1 as *const (u32, T) (PtrToPtr);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: u32;
    let _3: &u32;
    let mut _5: *const dyn Foo<u32>;
    let mut _6: (&u32, &u32);
    let mut _7: &u32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: u32;
    let mut _13: u32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: [u32; 3];
    let _20: &FooS<[u32; 3]>;
    let _23: &BarS<[u32]>;
    let mut _24: (&&[u32], &&[u32; 3]);
    let mut _25: &&[u32];
    let _26: &[u32];
    let mut _29: bool;
    let mut _30: bool;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: [u8; 3];
    let _37: &(i32, [u8; 3]);
    let mut _40: (&&[u8], &&[u8; 3]);
    let mut _41: &&[u8];
    let _42: &[u8];
    let mut _45: bool;
    let mut _46: bool;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => const 4_u32;
        let _2: &dyn Foo<u32>;
        scope 2 {
            debug y => _2;
            let _4: u32;
            scope 3 {
                debug fl => _4;
                let _8: &u32;
                let _9: &u32;
                let _17: FooS<[u32; 3]>;
                let mut _52: &u32;
                scope 5 {
                    debug left_val => _8;
                    debug right_val => _9;
                    let _14: core::panicking::AssertKind;
                    scope 6 {
                        debug kind => _14;
                    }
                }
                scope 7 {
                    debug s => _17;
                    let _19: &FooS<[u32]>;
                    scope 8 {
                        debug u => _19;
                        let _21: *const FooS<[u32]>;
                        scope 9 {
                            debug u => _21;
                            let _22: *const BarS<[u32]>;
                            scope 10 {
                                debug bar_ref => _22;
                                scope 11 {
                                    debug z => _23;
                                    let _27: &&[u32];
                                    let _28: &&[u32; 3];
                                    let _34: (i32, [u8; 3]);
                                    let mut _51: &&[u32; 3];
                                    scope 13 {
                                        debug left_val => _27;
                                        debug right_val => _28;
                                        let _31: core::panicking::AssertKind;
                                        scope 14 {
                                            debug kind => _31;
                                        }
                                    }
                                    scope 15 {
                                        debug s => _34;
                                        let _36: &(i32, [u8]);
                                        scope 16 {
                                            debug u => _36;
                                            let _38: *const (i32, [u8]);
                                            scope 17 {
                                                debug u => _38;
                                                let _39: *const (u32, [u8]);
                                                scope 18 {
                                                    debug u_u32 => _39;
                                                    scope 19 {
                                                        let _43: &&[u8];
                                                        let _44: &&[u8; 3];
                                                        let mut _50: &&[u8; 3];
                                                        scope 20 {
                                                            debug left_val => _43;
                                                            debug right_val => _44;
                                                            let _47: core::panicking::AssertKind;
                                                            scope 21 {
                                                                debug kind => _47;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                scope 12 {
                                }
                            }
                        }
                    }
                }
            }
            scope 4 {
            }
        }
    }

    bb0: {
        _1 = const 4_u32;
        _3 = &_1;
        _2 = _3 as &dyn Foo<u32> (Pointer(Unsize));
        _5 = &raw const (*_2);
        _4 = round_trip_and_call(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &_4;
        _52 = const _;
        _6 = (move _7, _52);
        _8 = (_6.0: &u32);
        _9 = (_6.1: &u32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<u32, u32>(move _14, _8, _9, move _16) -> unwind continue;
    }

    bb3: {
        _18 = [const 0_u32, const 1_u32, const 2_u32];
        _17 = FooS::<[u32; 3]>(move _18);
        _20 = &_17;
        _19 = _20 as &FooS<[u32]> (Pointer(Unsize));
        _21 = &raw const (*_19);
        _22 = foo_to_bar::<[u32]>(_21) -> [return: bb4, unwind continue];
    }

    bb4: {
        _23 = &(*_22);
        _26 = &((*_23).0: [u32]);
        _25 = &_26;
        _51 = const _;
        _24 = (move _25, _51);
        _27 = (_24.0: &&[u32]);
        _28 = (_24.1: &&[u32; 3]);
        _30 = <&[u32] as PartialEq<&[u32; 3]>>::eq(_27, _28) -> [return: bb5, unwind continue];
    }

    bb5: {
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<&[u32], &[u32; 3]>(move _31, _27, _28, move _33) -> unwind continue;
    }

    bb7: {
        _35 = [const 0_u8, const 1_u8, const 2_u8];
        _34 = (const 0_i32, move _35);
        _37 = &_34;
        _36 = _37 as &(i32, [u8]) (Pointer(Unsize));
        _38 = &raw const (*_36);
        _39 = tuple_i32_to_u32::<[u8]>(_38) -> [return: bb8, unwind continue];
    }

    bb8: {
        _42 = &((*_39).1: [u8]);
        _41 = &_42;
        _50 = const _;
        _40 = (move _41, _50);
        _43 = (_40.0: &&[u8]);
        _44 = (_40.1: &&[u8; 3]);
        _46 = <&[u8] as PartialEq<&[u8; 3]>>::eq(_43, _44) -> [return: bb9, unwind continue];
    }

    bb9: {
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<&[u8], &[u8; 3]>(move _47, _43, _44, move _49) -> unwind continue;
    }

    bb11: {
        return;
    }
}

promoted[0] in main: &&[u8; 3] = {
    let mut _0: &&[u8; 3];
    let mut _1: &[u8; 3];
    let mut _2: [u8; 3];

    bb0: {
        _2 = [const 0_u8, const 1_u8, const 2_u8];
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&[u32; 3] = {
    let mut _0: &&[u32; 3];
    let mut _1: &[u32; 3];
    let mut _2: [u32; 3];

    bb0: {
        _2 = [const 0_u32, const 1_u32, const 2_u32];
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = Add(const 43_u32, const 4_u32);
        _0 = &_1;
        return;
    }
}

fn FooS(_1: T) -> FooS<T> {
    let mut _0: FooS<T>;

    bb0: {
        _0 = FooS::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn FooS(_1: T) -> FooS<T> {
    let mut _0: FooS<T>;

    bb0: {
        _0 = FooS::<T>(move _1);
        return;
    }
}

fn BarS(_1: T) -> BarS<T> {
    let mut _0: BarS<T>;

    bb0: {
        _0 = BarS::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn BarS(_1: T) -> BarS<T> {
    let mut _0: BarS<T>;

    bb0: {
        _0 = BarS::<T>(move _1);
        return;
    }
}
