// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: u8;
    let mut _2: u8;
    let _3: i32;
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let mut _8: bool;
    let mut _9: i32;
    let mut _10: i32;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: &u8;
    let mut _16: &u8;
    scope 1 {
        debug cap => _3;
        let _6: &i32;
        let _7: &i32;
        let mut _14: &i32;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _11: core::panicking::AssertKind;
            scope 3 {
                debug kind => _11;
            }
        }
    }

    bb0: {
        _16 = const _;
        _1 = <&u8 as Shr<i32>>::shr(_16, const 4_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _15 = const _;
        _2 = <&u8 as Shl<i32>>::shl(_15, const 4_i32) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = Mul(const 512_i32, const 512_i32);
        _5 = &_3;
        _14 = const _;
        _4 = (move _5, _14);
        _6 = (_4.0: &i32);
        _7 = (_4.1: &i32);
        _9 = (*_6);
        _10 = (*_7);
        _8 = Eq(move _9, move _10);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _11 = core::panicking::AssertKind::Ne;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<i32, i32>(move _11, _6, _7, move _13) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 42_u8;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 42_u8;
        _0 = &_1;
        return;
    }
}
