// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/cast/cast-does-fallback.rs:3:15: 3:15
    let mut _1: u8;                      // in scope 0 at ui/cast/cast-does-fallback.rs:5:5: 5:17
    let mut _2: &u8;                     // in scope 0 at ui/cast/cast-does-fallback.rs:5:6: 5:11
    let mut _3: u8;                      // in scope 0 at ui/cast/cast-does-fallback.rs:6:5: 6:17
    let mut _4: &u8;                     // in scope 0 at ui/cast/cast-does-fallback.rs:6:6: 6:11
    let _5: i32;                         // in scope 0 at ui/cast/cast-does-fallback.rs:8:9: 8:12
    let mut _6: (i32, bool);             // in scope 0 at ui/cast/cast-does-fallback.rs:8:15: 8:24
    let mut _7: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:15: 88:32
    let mut _8: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
    let mut _9: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
    let mut _13: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:29
    let mut _14: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:33: 90:43
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
    let mut _18: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
    let _19: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
    let mut _20: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
    let _21: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:85: 95:113
    let mut _24: &u8;                    // in scope 0 at ui/cast/cast-does-fallback.rs:6:6: 6:11
    let mut _25: &u8;                    // in scope 0 at ui/cast/cast-does-fallback.rs:5:6: 5:11
    scope 1 {
        debug cap => _5;                 // in scope 1 at ui/cast/cast-does-fallback.rs:8:9: 8:12
        let _10: &i32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
        let _11: &i32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
        let mut _23: &i32;               // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
        scope 2 {
            debug left_val => _10;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
            debug right_val => _11;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
            let _15: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:25: 91:29
            scope 3 {
                debug kind => _15;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:25: 91:29
            }
        }
    }

    bb0: {
        _25 = const _;                   // scope 0 at ui/cast/cast-does-fallback.rs:5:6: 5:11
                                         // mir::Constant
                                         // + span: ui/cast/cast-does-fallback.rs:5:6: 5:11
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[2])) }
        _2 = _25;                        // scope 0 at ui/cast/cast-does-fallback.rs:5:6: 5:11
        _1 = <&u8 as Shr<i32>>::shr(move _2, const 4_i32) -> bb1; // scope 0 at ui/cast/cast-does-fallback.rs:5:5: 5:17
                                         // mir::Constant
                                         // + span: ui/cast/cast-does-fallback.rs:5:5: 5:17
                                         // + literal: Const { ty: fn(&u8, i32) -> <&u8 as Shr<i32>>::Output {<&u8 as Shr<i32>>::shr}, val: Value(<ZST>) }
    }

    bb1: {
        _24 = const _;                   // scope 0 at ui/cast/cast-does-fallback.rs:6:6: 6:11
                                         // mir::Constant
                                         // + span: ui/cast/cast-does-fallback.rs:6:6: 6:11
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[1])) }
        _4 = _24;                        // scope 0 at ui/cast/cast-does-fallback.rs:6:6: 6:11
        _3 = <&u8 as Shl<i32>>::shl(move _4, const 4_i32) -> bb2; // scope 0 at ui/cast/cast-does-fallback.rs:6:5: 6:17
                                         // mir::Constant
                                         // + span: ui/cast/cast-does-fallback.rs:6:5: 6:17
                                         // + literal: Const { ty: fn(&u8, i32) -> <&u8 as Shl<i32>>::Output {<&u8 as Shl<i32>>::shl}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = const (262144_i32, false);  // scope 0 at ui/cast/cast-does-fallback.rs:8:15: 8:24
        _5 = move (_6.0: i32);           // scope 0 at ui/cast/cast-does-fallback.rs:8:15: 8:24
        _8 = &_5;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
        _23 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _9 = _23;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
        _7 = (move _8, move _9);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:15: 88:32
        _10 = (_7.0: &i32);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
        _11 = (_7.1: &i32);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
        _13 = (*_10);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:29
        _14 = const 0_i32;               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:33: 90:43
        _12 = Eq(move _13, move _14);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
        switchInt(move _12) -> [0: bb4, otherwise: bb3]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
    }

    bb3: {
        _15 = const core::panicking::AssertKind::Ne; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:32: 91:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:32: 91:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x01)) }
        _17 = const core::panicking::AssertKind::Ne; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x01)) }
        _19 = _10;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
        _18 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
        _21 = _11;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
        _20 = _21;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
        _22 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:85: 95:113
        _16 = core::panicking::assert_failed::<i32, i32>(move _17, move _18, move _20, move _22); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/cast/cast-does-fallback.rs:12:2: 12:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
    let mut _1: i32;                     // in scope 0 at ui/cast/cast-does-fallback.rs:11:21: 11:22

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/cast/cast-does-fallback.rs:11:21: 11:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
    }
}

promoted[1] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/cast/cast-does-fallback.rs:6:6: 6:11
    let mut _1: u8;                      // in scope 0 at ui/cast/cast-does-fallback.rs:6:7: 6:11

    bb0: {
        _1 = const 42_u8;                // scope 0 at ui/cast/cast-does-fallback.rs:6:7: 6:11
        _0 = &_1;                        // scope 0 at ui/cast/cast-does-fallback.rs:6:6: 6:11
        return;                          // scope 0 at ui/cast/cast-does-fallback.rs:6:6: 6:11
    }
}

promoted[2] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/cast/cast-does-fallback.rs:5:6: 5:11
    let mut _1: u8;                      // in scope 0 at ui/cast/cast-does-fallback.rs:5:7: 5:11

    bb0: {
        _1 = const 42_u8;                // scope 0 at ui/cast/cast-does-fallback.rs:5:7: 5:11
        _0 = &_1;                        // scope 0 at ui/cast/cast-does-fallback.rs:5:6: 5:11
        return;                          // scope 0 at ui/cast/cast-does-fallback.rs:5:6: 5:11
    }
}
