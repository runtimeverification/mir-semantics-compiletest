// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/cast/issue-89497_fixed.rs:5:11: 5:11
    let _1: usize;                       // in scope 0 at ui/cast/issue-89497_fixed.rs:6:9: 6:16
    let mut _2: *const i32;              // in scope 0 at ui/cast/issue-89497_fixed.rs:6:26: 6:46
    let _3: &i32;                        // in scope 0 at ui/cast/issue-89497_fixed.rs:6:26: 6:32
    let _5: &i32;                        // in scope 0 at ui/cast/issue-89497_fixed.rs:7:45: 7:70
    let _6: *const i32;                  // in scope 0 at ui/cast/issue-89497_fixed.rs:7:47: 7:70
    let mut _7: usize;                   // in scope 0 at ui/cast/issue-89497_fixed.rs:7:48: 7:55
    let mut _8: &i32;                    // in scope 0 at ui/cast/issue-89497_fixed.rs:6:26: 6:32
    scope 1 {
        debug pointer => _1;             // in scope 1 at ui/cast/issue-89497_fixed.rs:6:9: 6:16
        let _4: &i32;                    // in scope 1 at ui/cast/issue-89497_fixed.rs:7:9: 7:19
        scope 2 {
            debug _reference => _4;      // in scope 2 at ui/cast/issue-89497_fixed.rs:7:9: 7:19
        }
        scope 3 {
        }
    }

    bb0: {
        _8 = const _;                    // scope 0 at ui/cast/issue-89497_fixed.rs:6:26: 6:32
                                         // mir::Constant
                                         // + span: ui/cast/issue-89497_fixed.rs:6:26: 6:32
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _8;                         // scope 0 at ui/cast/issue-89497_fixed.rs:6:26: 6:32
        _2 = &raw const (*_3);           // scope 0 at ui/cast/issue-89497_fixed.rs:6:26: 6:32
        _1 = move _2 as usize (PointerExposeAddress); // scope 0 at ui/cast/issue-89497_fixed.rs:6:26: 6:55
        _7 = _1;                         // scope 3 at ui/cast/issue-89497_fixed.rs:7:48: 7:55
        _6 = move _7 as *const i32 (PointerFromExposedAddress); // scope 3 at ui/cast/issue-89497_fixed.rs:7:47: 7:70
        _5 = &(*_6);                     // scope 3 at ui/cast/issue-89497_fixed.rs:7:45: 7:70
        _4 = _5;                         // scope 3 at ui/cast/issue-89497_fixed.rs:7:45: 7:70
        return;                          // scope 0 at ui/cast/issue-89497_fixed.rs:10:2: 10:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/cast/issue-89497_fixed.rs:6:26: 6:32
    let mut _1: i32;                     // in scope 0 at ui/cast/issue-89497_fixed.rs:6:27: 6:32

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/cast/issue-89497_fixed.rs:6:27: 6:32
        _0 = &_1;                        // scope 0 at ui/cast/issue-89497_fixed.rs:6:26: 6:32
        return;                          // scope 0 at ui/cast/issue-89497_fixed.rs:6:26: 6:32
    }
}
