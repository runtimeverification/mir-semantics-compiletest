// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Valued::H8::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 163_isize;
        return;
    }
}

Valued::Z::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 0_isize;
        return;
    }
}

Valued::X::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 256_isize;
        return;
    }
}

Valued::H7::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 67_isize;
        return;
    }
}

ValuedSigned::M1::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const -1_isize;
        return;
    }
}

ValuedSigned::P1::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 1_isize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::vec::IntoIter<u32>;
    let mut _2: std::vec::Vec<u32>;
    let mut _3: std::boxed::Box<[u32]>;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: *mut u8;
    let mut _7: std::boxed::Box<[u32; 1]>;
    let mut _8: &mut std::vec::IntoIter<u32>;
    let mut _9: (&std::option::Option<u32>, &std::option::Option<u32>);
    let mut _10: &std::option::Option<u32>;
    let _11: std::option::Option<u32>;
    let mut _12: &mut dyn std::iter::Iterator<Item = u32>;
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: (&std::option::Option<u32>, &std::option::Option<u32>);
    let mut _21: &std::option::Option<u32>;
    let _22: std::option::Option<u32>;
    let mut _23: &mut dyn std::iter::Iterator<Item = u32>;
    let mut _26: bool;
    let mut _27: bool;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&std::option::Option<u32>, &std::option::Option<u32>);
    let mut _34: bool;
    let mut _35: bool;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: (&(u32, u32), &(u32, u32));
    let mut _42: bool;
    let mut _43: bool;
    let _45: !;
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _47: (&bool, &bool);
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: (&bool, &bool);
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _69: (&u32, &u32);
    let mut _70: &u32;
    let _71: u32;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: u32;
    let mut _77: u32;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _81: (&u8, &u8);
    let mut _82: &u8;
    let _83: u8;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: u8;
    let mut _89: u8;
    let _91: !;
    let mut _92: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _93: (&i8, &i8);
    let mut _94: &i8;
    let _95: i8;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: i8;
    let mut _101: i8;
    let _103: !;
    let mut _104: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _105: (&u32, &u32);
    let mut _106: &u32;
    let _107: u32;
    let mut _110: bool;
    let mut _111: bool;
    let mut _112: u32;
    let mut _113: u32;
    let _115: !;
    let mut _116: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _117: (&u32, &u32);
    let mut _118: &u32;
    let _119: u32;
    let mut _120: usize;
    let mut _121: u32;
    let mut _122: &u32;
    let _123: u32;
    let mut _126: bool;
    let mut _127: bool;
    let mut _128: u32;
    let mut _129: u32;
    let _131: !;
    let mut _132: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _133: (&i32, &i32);
    let mut _134: &i32;
    let _135: i32;
    let mut _138: bool;
    let mut _139: bool;
    let mut _140: i32;
    let mut _141: i32;
    let _143: !;
    let mut _144: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _145: (&i32, &i32);
    let mut _146: &i32;
    let _147: i32;
    let mut _148: isize;
    let mut _149: i32;
    let mut _150: &i32;
    let _151: i32;
    let mut _154: bool;
    let mut _155: bool;
    let mut _156: i32;
    let mut _157: i32;
    let _159: !;
    let mut _160: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _161: (&i64, &i64);
    let mut _162: &i64;
    let _163: i64;
    let mut _166: bool;
    let mut _167: bool;
    let mut _168: i64;
    let mut _169: i64;
    let _171: !;
    let mut _172: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _173: (&f64, &f64);
    let mut _176: bool;
    let mut _177: bool;
    let mut _178: f64;
    let mut _179: f64;
    let _181: !;
    let mut _182: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _183: (&f64, &f64);
    let mut _186: bool;
    let mut _187: bool;
    let mut _188: f64;
    let mut _189: f64;
    let _191: !;
    let mut _192: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _193: (&f64, &f64);
    let mut _194: &f64;
    let _195: f64;
    let mut _198: bool;
    let mut _199: bool;
    let mut _200: f64;
    let mut _201: f64;
    let _203: !;
    let mut _204: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _205: (&f64, &f64);
    let mut _206: &f64;
    let _207: f64;
    let mut _208: i64;
    let mut _211: bool;
    let mut _212: bool;
    let mut _213: f64;
    let mut _214: f64;
    let _216: !;
    let mut _217: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _218: (&u32, &u32);
    let mut _221: bool;
    let mut _222: bool;
    let mut _223: u32;
    let mut _224: u32;
    let _226: !;
    let mut _227: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _228: (&u64, &u64);
    let mut _231: bool;
    let mut _232: bool;
    let mut _233: u64;
    let mut _234: u64;
    let _236: !;
    let mut _237: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _238: (&i64, &i64);
    let mut _241: bool;
    let mut _242: bool;
    let mut _243: i64;
    let mut _244: i64;
    let _246: !;
    let mut _247: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _248: (&i64, &i64);
    let mut _251: bool;
    let mut _252: bool;
    let mut _253: i64;
    let mut _254: i64;
    let _256: !;
    let mut _257: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _259: usize;
    let mut _260: (&usize, &usize);
    let mut _261: &usize;
    let _262: usize;
    let mut _263: &usize;
    let mut _266: bool;
    let mut _267: bool;
    let mut _268: usize;
    let mut _269: usize;
    let _271: !;
    let mut _272: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _274: (&usize, &usize);
    let mut _275: &usize;
    let _276: usize;
    let mut _277: &usize;
    let mut _280: bool;
    let mut _281: bool;
    let mut _282: usize;
    let mut _283: usize;
    let _285: !;
    let mut _286: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _288: *const [u8; 1];
    let _289: &[u8; 1];
    let mut _290: (&*const u8, &*const u8);
    let mut _291: &*const u8;
    let _292: *const u8;
    let mut _293: &*const u8;
    let _294: *const u8;
    let mut _297: bool;
    let mut _298: bool;
    let mut _299: *const u8;
    let mut _300: *const u8;
    let _302: !;
    let mut _303: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _304: (&*const u16, &*const u16);
    let mut _305: &*const u16;
    let _306: *const u16;
    let mut _307: &*const u16;
    let _308: *const u16;
    let mut _311: bool;
    let mut _312: bool;
    let mut _313: *const u16;
    let mut _314: *const u16;
    let _316: !;
    let mut _317: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _319: *mut [u16; 2];
    let mut _320: *mut [u8; 2];
    let mut _321: &mut [u8; 2];
    let mut _323: *mut [u16; 2];
    let mut _324: &mut [u16; 2];
    let mut _326: (&&[u8], &&[u8; 2]);
    let mut _327: &&[u8];
    let _328: &[u8];
    let mut _329: &&[u8; 2];
    let _330: &[u8; 2];
    let mut _333: bool;
    let mut _334: bool;
    let _336: !;
    let mut _337: std::option::Option<std::fmt::Arguments<'_>>;
    let _340: *const [u8];
    let mut _341: (&&[u8; 2], &&[u8]);
    let mut _342: &&[u8; 2];
    let _343: &[u8; 2];
    let mut _344: &&[u8];
    let mut _347: bool;
    let mut _348: bool;
    let _350: !;
    let mut _351: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _353: [u8; 3];
    let mut _354: [u8; 3];
    let mut _356: *const [[u8; 3]; 2];
    let _357: &[[u8; 3]; 2];
    let _359: &[[u8; 2]];
    let _360: *const [[u8; 2]];
    let mut _361: (&&[[u8; 2]], &[[u8; 2]; 2]);
    let mut _362: &&[[u8; 2]];
    let mut _365: bool;
    let mut _366: bool;
    let _368: !;
    let mut _369: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _370: (&u8, &u8);
    let mut _373: bool;
    let mut _374: bool;
    let mut _375: u8;
    let mut _376: u8;
    let _378: !;
    let mut _379: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _380: (&u8, &u8);
    let mut _383: bool;
    let mut _384: bool;
    let mut _385: u8;
    let mut _386: u8;
    let _388: !;
    let mut _389: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _390: (&i8, &i8);
    let mut _393: bool;
    let mut _394: bool;
    let mut _395: i8;
    let mut _396: i8;
    let _398: !;
    let mut _399: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _400: (&i8, &i8);
    let mut _403: bool;
    let mut _404: bool;
    let mut _405: i8;
    let mut _406: i8;
    let _408: !;
    let mut _409: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _410: (&i8, &i8);
    let mut _413: bool;
    let mut _414: bool;
    let mut _415: i8;
    let mut _416: i8;
    let _418: !;
    let mut _419: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _420: (&u8, &u8);
    let mut _423: bool;
    let mut _424: bool;
    let mut _425: u8;
    let mut _426: u8;
    let _428: !;
    let mut _429: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _430: (&u8, &u8);
    let mut _433: bool;
    let mut _434: bool;
    let mut _435: u8;
    let mut _436: u8;
    let _438: !;
    let mut _439: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _440: (&u8, &u8);
    let mut _443: bool;
    let mut _444: bool;
    let mut _445: u8;
    let mut _446: u8;
    let _448: !;
    let mut _449: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _450: (&u16, &u16);
    let mut _453: bool;
    let mut _454: bool;
    let mut _455: u16;
    let mut _456: u16;
    let _458: !;
    let mut _459: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _460: (&u16, &u16);
    let mut _463: bool;
    let mut _464: bool;
    let mut _465: u16;
    let mut _466: u16;
    let _468: !;
    let mut _469: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _470: (&u16, &u16);
    let mut _473: bool;
    let mut _474: bool;
    let mut _475: u16;
    let mut _476: u16;
    let _478: !;
    let mut _479: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _480: (&u16, &u16);
    let mut _483: bool;
    let mut _484: bool;
    let mut _485: u16;
    let mut _486: u16;
    let _488: !;
    let mut _489: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _490: (&u16, &u16);
    let mut _493: bool;
    let mut _494: bool;
    let mut _495: u16;
    let mut _496: u16;
    let _498: !;
    let mut _499: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _500: (&i16, &i16);
    let mut _503: bool;
    let mut _504: bool;
    let mut _505: i16;
    let mut _506: i16;
    let _508: !;
    let mut _509: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _510: (&u16, &u16);
    let mut _513: bool;
    let mut _514: bool;
    let mut _515: u16;
    let mut _516: u16;
    let _518: !;
    let mut _519: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _520: (&i16, &i16);
    let mut _523: bool;
    let mut _524: bool;
    let mut _525: i16;
    let mut _526: i16;
    let _528: !;
    let mut _529: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _530: (&u16, &u16);
    let mut _533: bool;
    let mut _534: bool;
    let mut _535: u16;
    let mut _536: u16;
    let _538: !;
    let mut _539: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _540: (&u16, &u16);
    let mut _543: bool;
    let mut _544: bool;
    let mut _545: u16;
    let mut _546: u16;
    let _548: !;
    let mut _549: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _550: (&i64, &i64);
    let mut _553: bool;
    let mut _554: bool;
    let mut _555: i64;
    let mut _556: i64;
    let _558: !;
    let mut _559: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _560: (&i64, &i64);
    let mut _563: bool;
    let mut _564: bool;
    let mut _565: i64;
    let mut _566: i64;
    let _568: !;
    let mut _569: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _570: (&u32, &u32);
    let mut _573: bool;
    let mut _574: bool;
    let mut _575: u32;
    let mut _576: u32;
    let _578: !;
    let mut _579: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _580: (&u16, &u16);
    let mut _583: bool;
    let mut _584: bool;
    let mut _585: u16;
    let mut _586: u16;
    let _588: !;
    let mut _589: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _590: (&u8, &u8);
    let mut _593: bool;
    let mut _594: bool;
    let mut _595: u8;
    let mut _596: u8;
    let _598: !;
    let mut _599: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _600: (&u8, &u8);
    let mut _603: bool;
    let mut _604: bool;
    let mut _605: u8;
    let mut _606: u8;
    let _608: !;
    let mut _609: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _610: (&u16, &u16);
    let mut _613: bool;
    let mut _614: bool;
    let mut _615: u16;
    let mut _616: u16;
    let _618: !;
    let mut _619: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _620: (&u32, &u32);
    let mut _623: bool;
    let mut _624: bool;
    let mut _625: u32;
    let mut _626: u32;
    let _628: !;
    let mut _629: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _630: (&u8, &u8);
    let mut _633: bool;
    let mut _634: bool;
    let mut _635: u8;
    let mut _636: u8;
    let _638: !;
    let mut _639: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _640: (&u16, &u16);
    let mut _643: bool;
    let mut _644: bool;
    let mut _645: u16;
    let mut _646: u16;
    let _648: !;
    let mut _649: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _650: (&u32, &u32);
    let mut _653: bool;
    let mut _654: bool;
    let mut _655: u32;
    let mut _656: u32;
    let _658: !;
    let mut _659: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _660: (&i16, &i16);
    let mut _663: bool;
    let mut _664: bool;
    let mut _665: i16;
    let mut _666: i16;
    let _668: !;
    let mut _669: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _670: (&u16, &u16);
    let mut _673: bool;
    let mut _674: bool;
    let mut _675: u16;
    let mut _676: u16;
    let _678: !;
    let mut _679: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _680: (&char, &char);
    let mut _683: bool;
    let mut _684: bool;
    let mut _685: char;
    let mut _686: char;
    let _688: !;
    let mut _689: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _690: (&char, &char);
    let mut _693: bool;
    let mut _694: bool;
    let mut _695: char;
    let mut _696: char;
    let _698: !;
    let mut _699: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _700: (&char, &char);
    let mut _703: bool;
    let mut _704: bool;
    let mut _705: char;
    let mut _706: char;
    let _708: !;
    let mut _709: std::option::Option<std::fmt::Arguments<'_>>;
    let _712: &u32;
    let _713: usize;
    let mut _714: usize;
    let mut _715: bool;
    let mut _716: (&*const u32, &*const u32);
    let mut _717: &*const u32;
    let mut _718: &*const u32;
    let _719: *const u32;
    let mut _720: *const [u32; 3];
    let _721: &[u32; 3];
    let mut _724: bool;
    let mut _725: bool;
    let mut _726: *const u32;
    let mut _727: *const u32;
    let _729: !;
    let mut _730: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _731: (&*const u32, &*const u32);
    let mut _732: &*const u32;
    let mut _733: &*const u32;
    let _734: *const u32;
    let mut _735: *const [u32; 3];
    let _736: &[u32; 3];
    let mut _739: bool;
    let mut _740: bool;
    let mut _741: *const u32;
    let mut _742: *const u32;
    let _744: !;
    let mut _745: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _746: bool;
    let mut _747: bool;
    let mut _748: usize;
    let mut _749: fn();
    let mut _750: usize;
    let mut _751: fn();
    let mut _752: !;
    let mut _753: (&i16, &i16);
    let mut _754: &i16;
    let _755: i16;
    let mut _756: fn();
    let mut _757: &i16;
    let _758: i16;
    let mut _759: usize;
    let mut _760: fn();
    let mut _763: bool;
    let mut _764: bool;
    let mut _765: i16;
    let mut _766: i16;
    let _768: !;
    let mut _769: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _770: (&usize, &usize);
    let mut _771: &usize;
    let _772: usize;
    let mut _773: *const u8;
    let mut _774: fn();
    let mut _775: &usize;
    let _776: usize;
    let mut _777: fn();
    let mut _780: bool;
    let mut _781: bool;
    let mut _782: usize;
    let mut _783: usize;
    let _785: !;
    let mut _786: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _787: bool;
    let mut _788: bool;
    let mut _789: *const u32;
    let mut _790: fn();
    let mut _791: *const u32;
    let mut _792: !;
    let mut _892: *const [u32; 1];
    let mut _905: *const ();
    let mut _906: usize;
    let mut _907: usize;
    let mut _908: usize;
    let mut _909: usize;
    let mut _910: bool;
    scope 1 {
        debug it => _1;
        scope 3 {
            debug itr => _8;
            let _13: &std::option::Option<u32>;
            let _14: &std::option::Option<u32>;
            let _24: &std::option::Option<u32>;
            let _25: &std::option::Option<u32>;
            let _32: &std::option::Option<u32>;
            let _33: &std::option::Option<u32>;
            let _40: &(u32, u32);
            let _41: &(u32, u32);
            let _48: &bool;
            let _49: &bool;
            let _58: &bool;
            let _59: &bool;
            let _67: u64;
            let mut _882: &bool;
            let mut _883: &bool;
            let mut _884: &bool;
            let mut _885: &bool;
            let mut _886: &(u32, u32);
            let mut _887: &(u32, u32);
            let mut _888: &std::option::Option<u32>;
            let mut _889: &std::option::Option<u32>;
            let mut _890: &std::option::Option<u32>;
            let mut _891: &std::option::Option<u32>;
            scope 4 {
                debug left_val => _13;
                debug right_val => _14;
                let _17: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _17;
                }
            }
            scope 6 {
                debug left_val => _24;
                debug right_val => _25;
                let _28: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _28;
                }
            }
            scope 8 {
                debug left_val => _32;
                debug right_val => _33;
                let _36: core::panicking::AssertKind;
                scope 9 {
                    debug kind => _36;
                }
            }
            scope 10 {
                debug left_val => _40;
                debug right_val => _41;
                let _44: core::panicking::AssertKind;
                scope 11 {
                    debug kind => _44;
                }
            }
            scope 12 {
                debug left_val => _48;
                debug right_val => _49;
                let _54: core::panicking::AssertKind;
                scope 13 {
                    debug kind => _54;
                }
            }
            scope 14 {
                debug left_val => _58;
                debug right_val => _59;
                let _64: core::panicking::AssertKind;
                scope 15 {
                    debug kind => _64;
                }
            }
            scope 16 {
                debug l => const 9264081114510713072_u64;
                let _68: usize;
                scope 17 {
                    debug lsz => _68;
                    let _72: &u32;
                    let _73: &u32;
                    let _84: &u8;
                    let _85: &u8;
                    let _96: &i8;
                    let _97: &i8;
                    let _108: &u32;
                    let _109: &u32;
                    let _124: &u32;
                    let _125: &u32;
                    let _136: &i32;
                    let _137: &i32;
                    let _152: &i32;
                    let _153: &i32;
                    let _164: &i64;
                    let _165: &i64;
                    let _174: &f64;
                    let _175: &f64;
                    let _184: &f64;
                    let _185: &f64;
                    let _196: &f64;
                    let _197: &f64;
                    let _209: &f64;
                    let _210: &f64;
                    let _219: &u32;
                    let _220: &u32;
                    let _229: &u64;
                    let _230: &u64;
                    let _239: &i64;
                    let _240: &i64;
                    let _249: &i64;
                    let _250: &i64;
                    let _258: *const [u8; 1];
                    let mut _862: &i64;
                    let mut _863: &i64;
                    let mut _864: &i64;
                    let mut _865: &i64;
                    let mut _866: &u64;
                    let mut _867: &u64;
                    let mut _868: &u32;
                    let mut _869: &u32;
                    let mut _870: &f64;
                    let mut _871: &f64;
                    let mut _872: &f64;
                    let mut _873: &f64;
                    let mut _874: &f64;
                    let mut _875: &f64;
                    let mut _876: &i64;
                    let mut _877: &i32;
                    let mut _878: &u32;
                    let mut _879: &i8;
                    let mut _880: &u8;
                    let mut _881: &u32;
                    scope 18 {
                        debug left_val => _72;
                        debug right_val => _73;
                        let _78: core::panicking::AssertKind;
                        scope 19 {
                            debug kind => _78;
                        }
                    }
                    scope 20 {
                        debug left_val => _84;
                        debug right_val => _85;
                        let _90: core::panicking::AssertKind;
                        scope 21 {
                            debug kind => _90;
                        }
                    }
                    scope 22 {
                        debug left_val => _96;
                        debug right_val => _97;
                        let _102: core::panicking::AssertKind;
                        scope 23 {
                            debug kind => _102;
                        }
                    }
                    scope 24 {
                        debug left_val => _108;
                        debug right_val => _109;
                        let _114: core::panicking::AssertKind;
                        scope 25 {
                            debug kind => _114;
                        }
                    }
                    scope 26 {
                        debug left_val => _124;
                        debug right_val => _125;
                        let _130: core::panicking::AssertKind;
                        scope 27 {
                            debug kind => _130;
                        }
                    }
                    scope 28 {
                        debug left_val => _136;
                        debug right_val => _137;
                        let _142: core::panicking::AssertKind;
                        scope 29 {
                            debug kind => _142;
                        }
                    }
                    scope 30 {
                        debug left_val => _152;
                        debug right_val => _153;
                        let _158: core::panicking::AssertKind;
                        scope 31 {
                            debug kind => _158;
                        }
                    }
                    scope 32 {
                        debug left_val => _164;
                        debug right_val => _165;
                        let _170: core::panicking::AssertKind;
                        scope 33 {
                            debug kind => _170;
                        }
                    }
                    scope 34 {
                        debug left_val => _174;
                        debug right_val => _175;
                        let _180: core::panicking::AssertKind;
                        scope 35 {
                            debug kind => _180;
                        }
                    }
                    scope 36 {
                        debug left_val => _184;
                        debug right_val => _185;
                        let _190: core::panicking::AssertKind;
                        scope 37 {
                            debug kind => _190;
                        }
                    }
                    scope 38 {
                        debug left_val => _196;
                        debug right_val => _197;
                        let _202: core::panicking::AssertKind;
                        scope 39 {
                            debug kind => _202;
                        }
                    }
                    scope 40 {
                        debug left_val => _209;
                        debug right_val => _210;
                        let _215: core::panicking::AssertKind;
                        scope 41 {
                            debug kind => _215;
                        }
                    }
                    scope 42 {
                        debug left_val => _219;
                        debug right_val => _220;
                        let _225: core::panicking::AssertKind;
                        scope 43 {
                            debug kind => _225;
                        }
                    }
                    scope 44 {
                        debug left_val => _229;
                        debug right_val => _230;
                        let _235: core::panicking::AssertKind;
                        scope 45 {
                            debug kind => _235;
                        }
                    }
                    scope 46 {
                        debug left_val => _239;
                        debug right_val => _240;
                        let _245: core::panicking::AssertKind;
                        scope 47 {
                            debug kind => _245;
                        }
                    }
                    scope 48 {
                        debug left_val => _249;
                        debug right_val => _250;
                        let _255: core::panicking::AssertKind;
                        scope 49 {
                            debug kind => _255;
                        }
                    }
                    scope 50 {
                        debug p => _258;
                        let _264: &usize;
                        let _265: &usize;
                        let _273: *const ();
                        scope 51 {
                            debug left_val => _264;
                            debug right_val => _265;
                            let _270: core::panicking::AssertKind;
                            scope 52 {
                                debug kind => _270;
                            }
                        }
                        scope 53 {
                            debug w => _273;
                            let _278: &usize;
                            let _279: &usize;
                            let _287: *const [u8];
                            scope 54 {
                                debug left_val => _278;
                                debug right_val => _279;
                                let _284: core::panicking::AssertKind;
                                scope 55 {
                                    debug kind => _284;
                                }
                            }
                            scope 56 {
                                debug u => _287;
                                let _295: &*const u8;
                                let _296: &*const u8;
                                let _309: &*const u16;
                                let _310: &*const u16;
                                let mut _318: [u8; 2];
                                scope 58 {
                                    debug left_val => _295;
                                    debug right_val => _296;
                                    let _301: core::panicking::AssertKind;
                                    scope 59 {
                                        debug kind => _301;
                                    }
                                }
                                scope 60 {
                                    debug left_val => _309;
                                    debug right_val => _310;
                                    let _315: core::panicking::AssertKind;
                                    scope 61 {
                                        debug kind => _315;
                                    }
                                }
                                scope 62 {
                                    debug l => _318;
                                    scope 63 {
                                        debug w => _319;
                                        let _322: *mut [u16];
                                        scope 64 {
                                            debug w => _322;
                                            let _325: *const [u8];
                                            scope 66 {
                                                debug w_u8 => _325;
                                                let _331: &&[u8];
                                                let _332: &&[u8; 2];
                                                let _338: *mut str;
                                                scope 67 {
                                                }
                                                scope 68 {
                                                    debug left_val => _331;
                                                    debug right_val => _332;
                                                    let _335: core::panicking::AssertKind;
                                                    scope 69 {
                                                        debug kind => _335;
                                                    }
                                                }
                                                scope 70 {
                                                    debug s => _338;
                                                    let _339: &[u8];
                                                    scope 71 {
                                                        debug l_via_str => _339;
                                                        let _345: &&[u8; 2];
                                                        let _346: &&[u8];
                                                        let _352: [[u8; 3]; 2];
                                                        scope 73 {
                                                            debug left_val => _345;
                                                            debug right_val => _346;
                                                            let _349: core::panicking::AssertKind;
                                                            scope 74 {
                                                                debug kind => _349;
                                                            }
                                                        }
                                                        scope 75 {
                                                            debug l => _352;
                                                            let _355: *const [[u8; 3]];
                                                            scope 76 {
                                                                debug p => _355;
                                                                let _358: &[[u8; 2]];
                                                                scope 77 {
                                                                    debug p => _358;
                                                                    let _363: &&[[u8; 2]];
                                                                    let _364: &[[u8; 2]; 2];
                                                                    let _371: &u8;
                                                                    let _372: &u8;
                                                                    let _381: &u8;
                                                                    let _382: &u8;
                                                                    let _391: &i8;
                                                                    let _392: &i8;
                                                                    let _401: &i8;
                                                                    let _402: &i8;
                                                                    let _411: &i8;
                                                                    let _412: &i8;
                                                                    let _421: &u8;
                                                                    let _422: &u8;
                                                                    let _431: &u8;
                                                                    let _432: &u8;
                                                                    let _441: &u8;
                                                                    let _442: &u8;
                                                                    let _451: &u16;
                                                                    let _452: &u16;
                                                                    let _461: &u16;
                                                                    let _462: &u16;
                                                                    let _471: &u16;
                                                                    let _472: &u16;
                                                                    let _481: &u16;
                                                                    let _482: &u16;
                                                                    let _491: &u16;
                                                                    let _492: &u16;
                                                                    let _501: &i16;
                                                                    let _502: &i16;
                                                                    let _511: &u16;
                                                                    let _512: &u16;
                                                                    let _521: &i16;
                                                                    let _522: &i16;
                                                                    let _531: &u16;
                                                                    let _532: &u16;
                                                                    let _541: &u16;
                                                                    let _542: &u16;
                                                                    let _551: &i64;
                                                                    let _552: &i64;
                                                                    let _561: &i64;
                                                                    let _562: &i64;
                                                                    let _571: &u32;
                                                                    let _572: &u32;
                                                                    let _581: &u16;
                                                                    let _582: &u16;
                                                                    let _591: &u8;
                                                                    let _592: &u8;
                                                                    let _601: &u8;
                                                                    let _602: &u8;
                                                                    let _611: &u16;
                                                                    let _612: &u16;
                                                                    let _621: &u32;
                                                                    let _622: &u32;
                                                                    let _631: &u8;
                                                                    let _632: &u8;
                                                                    let _641: &u16;
                                                                    let _642: &u16;
                                                                    let _651: &u32;
                                                                    let _652: &u32;
                                                                    let _661: &i16;
                                                                    let _662: &i16;
                                                                    let _671: &u16;
                                                                    let _672: &u16;
                                                                    let _681: &char;
                                                                    let _682: &char;
                                                                    let _691: &char;
                                                                    let _692: &char;
                                                                    let _701: &char;
                                                                    let _702: &char;
                                                                    let _710: [u32; 3];
                                                                    let mut _793: &char;
                                                                    let mut _794: &char;
                                                                    let mut _795: &char;
                                                                    let mut _796: &char;
                                                                    let mut _797: &char;
                                                                    let mut _798: &char;
                                                                    let mut _799: &u16;
                                                                    let mut _800: &u16;
                                                                    let mut _801: &i16;
                                                                    let mut _802: &i16;
                                                                    let mut _803: &u32;
                                                                    let mut _804: &u32;
                                                                    let mut _805: &u16;
                                                                    let mut _806: &u16;
                                                                    let mut _807: &u8;
                                                                    let mut _808: &u8;
                                                                    let mut _809: &u32;
                                                                    let mut _810: &u32;
                                                                    let mut _811: &u16;
                                                                    let mut _812: &u16;
                                                                    let mut _813: &u8;
                                                                    let mut _814: &u8;
                                                                    let mut _815: &u8;
                                                                    let mut _816: &u8;
                                                                    let mut _817: &u16;
                                                                    let mut _818: &u16;
                                                                    let mut _819: &u32;
                                                                    let mut _820: &u32;
                                                                    let mut _821: &i64;
                                                                    let mut _822: &i64;
                                                                    let mut _823: &i64;
                                                                    let mut _824: &i64;
                                                                    let mut _825: &u16;
                                                                    let mut _826: &u16;
                                                                    let mut _827: &u16;
                                                                    let mut _828: &u16;
                                                                    let mut _829: &i16;
                                                                    let mut _830: &i16;
                                                                    let mut _831: &u16;
                                                                    let mut _832: &u16;
                                                                    let mut _833: &i16;
                                                                    let mut _834: &i16;
                                                                    let mut _835: &u16;
                                                                    let mut _836: &u16;
                                                                    let mut _837: &u16;
                                                                    let mut _838: &u16;
                                                                    let mut _839: &u16;
                                                                    let mut _840: &u16;
                                                                    let mut _841: &u16;
                                                                    let mut _842: &u16;
                                                                    let mut _843: &u16;
                                                                    let mut _844: &u16;
                                                                    let mut _845: &u8;
                                                                    let mut _846: &u8;
                                                                    let mut _847: &u8;
                                                                    let mut _848: &u8;
                                                                    let mut _849: &u8;
                                                                    let mut _850: &u8;
                                                                    let mut _851: &i8;
                                                                    let mut _852: &i8;
                                                                    let mut _853: &i8;
                                                                    let mut _854: &i8;
                                                                    let mut _855: &i8;
                                                                    let mut _856: &i8;
                                                                    let mut _857: &u8;
                                                                    let mut _858: &u8;
                                                                    let mut _859: &u8;
                                                                    let mut _860: &u8;
                                                                    let mut _861: &[[u8; 2]; 2];
                                                                    scope 79 {
                                                                        debug left_val => _363;
                                                                        debug right_val => _364;
                                                                        let _367: core::panicking::AssertKind;
                                                                        scope 80 {
                                                                            debug kind => _367;
                                                                        }
                                                                    }
                                                                    scope 81 {
                                                                        debug left_val => _371;
                                                                        debug right_val => _372;
                                                                        let _377: core::panicking::AssertKind;
                                                                        scope 82 {
                                                                            debug kind => _377;
                                                                        }
                                                                    }
                                                                    scope 83 {
                                                                        debug left_val => _381;
                                                                        debug right_val => _382;
                                                                        let _387: core::panicking::AssertKind;
                                                                        scope 84 {
                                                                            debug kind => _387;
                                                                        }
                                                                    }
                                                                    scope 85 {
                                                                        debug left_val => _391;
                                                                        debug right_val => _392;
                                                                        let _397: core::panicking::AssertKind;
                                                                        scope 86 {
                                                                            debug kind => _397;
                                                                        }
                                                                    }
                                                                    scope 87 {
                                                                        debug left_val => _401;
                                                                        debug right_val => _402;
                                                                        let _407: core::panicking::AssertKind;
                                                                        scope 88 {
                                                                            debug kind => _407;
                                                                        }
                                                                    }
                                                                    scope 89 {
                                                                        debug left_val => _411;
                                                                        debug right_val => _412;
                                                                        let _417: core::panicking::AssertKind;
                                                                        scope 90 {
                                                                            debug kind => _417;
                                                                        }
                                                                    }
                                                                    scope 91 {
                                                                        debug left_val => _421;
                                                                        debug right_val => _422;
                                                                        let _427: core::panicking::AssertKind;
                                                                        scope 92 {
                                                                            debug kind => _427;
                                                                        }
                                                                    }
                                                                    scope 93 {
                                                                        debug left_val => _431;
                                                                        debug right_val => _432;
                                                                        let _437: core::panicking::AssertKind;
                                                                        scope 94 {
                                                                            debug kind => _437;
                                                                        }
                                                                    }
                                                                    scope 95 {
                                                                        debug left_val => _441;
                                                                        debug right_val => _442;
                                                                        let _447: core::panicking::AssertKind;
                                                                        scope 96 {
                                                                            debug kind => _447;
                                                                        }
                                                                    }
                                                                    scope 97 {
                                                                        debug left_val => _451;
                                                                        debug right_val => _452;
                                                                        let _457: core::panicking::AssertKind;
                                                                        scope 98 {
                                                                            debug kind => _457;
                                                                        }
                                                                    }
                                                                    scope 99 {
                                                                        debug left_val => _461;
                                                                        debug right_val => _462;
                                                                        let _467: core::panicking::AssertKind;
                                                                        scope 100 {
                                                                            debug kind => _467;
                                                                        }
                                                                    }
                                                                    scope 101 {
                                                                        debug left_val => _471;
                                                                        debug right_val => _472;
                                                                        let _477: core::panicking::AssertKind;
                                                                        scope 102 {
                                                                            debug kind => _477;
                                                                        }
                                                                    }
                                                                    scope 103 {
                                                                        debug left_val => _481;
                                                                        debug right_val => _482;
                                                                        let _487: core::panicking::AssertKind;
                                                                        scope 104 {
                                                                            debug kind => _487;
                                                                        }
                                                                    }
                                                                    scope 105 {
                                                                        debug left_val => _491;
                                                                        debug right_val => _492;
                                                                        let _497: core::panicking::AssertKind;
                                                                        scope 106 {
                                                                            debug kind => _497;
                                                                        }
                                                                    }
                                                                    scope 107 {
                                                                        debug left_val => _501;
                                                                        debug right_val => _502;
                                                                        let _507: core::panicking::AssertKind;
                                                                        scope 108 {
                                                                            debug kind => _507;
                                                                        }
                                                                    }
                                                                    scope 109 {
                                                                        debug left_val => _511;
                                                                        debug right_val => _512;
                                                                        let _517: core::panicking::AssertKind;
                                                                        scope 110 {
                                                                            debug kind => _517;
                                                                        }
                                                                    }
                                                                    scope 111 {
                                                                        debug left_val => _521;
                                                                        debug right_val => _522;
                                                                        let _527: core::panicking::AssertKind;
                                                                        scope 112 {
                                                                            debug kind => _527;
                                                                        }
                                                                    }
                                                                    scope 113 {
                                                                        debug left_val => _531;
                                                                        debug right_val => _532;
                                                                        let _537: core::panicking::AssertKind;
                                                                        scope 114 {
                                                                            debug kind => _537;
                                                                        }
                                                                    }
                                                                    scope 115 {
                                                                        debug left_val => _541;
                                                                        debug right_val => _542;
                                                                        let _547: core::panicking::AssertKind;
                                                                        scope 116 {
                                                                            debug kind => _547;
                                                                        }
                                                                    }
                                                                    scope 117 {
                                                                        debug left_val => _551;
                                                                        debug right_val => _552;
                                                                        let _557: core::panicking::AssertKind;
                                                                        scope 118 {
                                                                            debug kind => _557;
                                                                        }
                                                                    }
                                                                    scope 119 {
                                                                        debug left_val => _561;
                                                                        debug right_val => _562;
                                                                        let _567: core::panicking::AssertKind;
                                                                        scope 120 {
                                                                            debug kind => _567;
                                                                        }
                                                                    }
                                                                    scope 121 {
                                                                        debug left_val => _571;
                                                                        debug right_val => _572;
                                                                        let _577: core::panicking::AssertKind;
                                                                        scope 122 {
                                                                            debug kind => _577;
                                                                        }
                                                                    }
                                                                    scope 123 {
                                                                        debug left_val => _581;
                                                                        debug right_val => _582;
                                                                        let _587: core::panicking::AssertKind;
                                                                        scope 124 {
                                                                            debug kind => _587;
                                                                        }
                                                                    }
                                                                    scope 125 {
                                                                        debug left_val => _591;
                                                                        debug right_val => _592;
                                                                        let _597: core::panicking::AssertKind;
                                                                        scope 126 {
                                                                            debug kind => _597;
                                                                        }
                                                                    }
                                                                    scope 127 {
                                                                        debug left_val => _601;
                                                                        debug right_val => _602;
                                                                        let _607: core::panicking::AssertKind;
                                                                        scope 128 {
                                                                            debug kind => _607;
                                                                        }
                                                                    }
                                                                    scope 129 {
                                                                        debug left_val => _611;
                                                                        debug right_val => _612;
                                                                        let _617: core::panicking::AssertKind;
                                                                        scope 130 {
                                                                            debug kind => _617;
                                                                        }
                                                                    }
                                                                    scope 131 {
                                                                        debug left_val => _621;
                                                                        debug right_val => _622;
                                                                        let _627: core::panicking::AssertKind;
                                                                        scope 132 {
                                                                            debug kind => _627;
                                                                        }
                                                                    }
                                                                    scope 133 {
                                                                        debug left_val => _631;
                                                                        debug right_val => _632;
                                                                        let _637: core::panicking::AssertKind;
                                                                        scope 134 {
                                                                            debug kind => _637;
                                                                        }
                                                                    }
                                                                    scope 135 {
                                                                        debug left_val => _641;
                                                                        debug right_val => _642;
                                                                        let _647: core::panicking::AssertKind;
                                                                        scope 136 {
                                                                            debug kind => _647;
                                                                        }
                                                                    }
                                                                    scope 137 {
                                                                        debug left_val => _651;
                                                                        debug right_val => _652;
                                                                        let _657: core::panicking::AssertKind;
                                                                        scope 138 {
                                                                            debug kind => _657;
                                                                        }
                                                                    }
                                                                    scope 139 {
                                                                        debug left_val => _661;
                                                                        debug right_val => _662;
                                                                        let _667: core::panicking::AssertKind;
                                                                        scope 140 {
                                                                            debug kind => _667;
                                                                        }
                                                                    }
                                                                    scope 141 {
                                                                        debug left_val => _671;
                                                                        debug right_val => _672;
                                                                        let _677: core::panicking::AssertKind;
                                                                        scope 142 {
                                                                            debug kind => _677;
                                                                        }
                                                                    }
                                                                    scope 143 {
                                                                        debug left_val => _681;
                                                                        debug right_val => _682;
                                                                        let _687: core::panicking::AssertKind;
                                                                        scope 144 {
                                                                            debug kind => _687;
                                                                        }
                                                                    }
                                                                    scope 145 {
                                                                        debug left_val => _691;
                                                                        debug right_val => _692;
                                                                        let _697: core::panicking::AssertKind;
                                                                        scope 146 {
                                                                            debug kind => _697;
                                                                        }
                                                                    }
                                                                    scope 147 {
                                                                        debug left_val => _701;
                                                                        debug right_val => _702;
                                                                        let _707: core::panicking::AssertKind;
                                                                        scope 148 {
                                                                            debug kind => _707;
                                                                        }
                                                                    }
                                                                    scope 149 {
                                                                        debug x => _710;
                                                                        let _711: *const u32;
                                                                        scope 150 {
                                                                            debug first => _711;
                                                                            let _722: &*const u32;
                                                                            let _723: &*const u32;
                                                                            let _737: &*const u32;
                                                                            let _738: &*const u32;
                                                                            let _761: &i16;
                                                                            let _762: &i16;
                                                                            let _778: &usize;
                                                                            let _779: &usize;
                                                                            scope 151 {
                                                                                debug left_val => _722;
                                                                                debug right_val => _723;
                                                                                let _728: core::panicking::AssertKind;
                                                                                scope 152 {
                                                                                    debug kind => _728;
                                                                                }
                                                                            }
                                                                            scope 153 {
                                                                                debug left_val => _737;
                                                                                debug right_val => _738;
                                                                                let _743: core::panicking::AssertKind;
                                                                                scope 154 {
                                                                                    debug kind => _743;
                                                                                }
                                                                            }
                                                                            scope 155 {
                                                                                debug left_val => _761;
                                                                                debug right_val => _762;
                                                                                let _767: core::panicking::AssertKind;
                                                                                scope 156 {
                                                                                    debug kind => _767;
                                                                                }
                                                                            }
                                                                            scope 157 {
                                                                                debug left_val => _778;
                                                                                debug right_val => _779;
                                                                                let _784: core::panicking::AssertKind;
                                                                                scope 158 {
                                                                                    debug kind => _784;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 78 {
                                                                    let mut _893: *const ();
                                                                    let mut _894: usize;
                                                                    let mut _895: usize;
                                                                    let mut _896: usize;
                                                                    let mut _897: usize;
                                                                    let mut _898: bool;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 72 {
                                                    }
                                                }
                                            }
                                        }
                                        scope 65 {
                                            let mut _899: *const ();
                                            let mut _900: usize;
                                            let mut _901: usize;
                                            let mut _902: usize;
                                            let mut _903: usize;
                                            let mut _904: bool;
                                        }
                                    }
                                }
                            }
                            scope 57 {
                            }
                        }
                    }
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = SizeOf([u32; 1]);
        _5 = AlignOf([u32; 1]);
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [u32; 1]);
        _892 = (((_7.0: std::ptr::Unique<[u32; 1]>).0: std::ptr::NonNull<[u32; 1]>).0: *const [u32; 1]);
        _905 = _892 as *const () (PtrToPtr);
        _906 = _905 as usize (Transmute);
        _907 = AlignOf(u32);
        _908 = Sub(_907, const 1_usize);
        _909 = BitAnd(_906, _908);
        _910 = Eq(_909, const 0_usize);
        assert(_910, "misaligned pointer dereference: address must be a multiple of {} but is {}", _907, _906) -> [success: bb157, unwind unreachable];
    }

    bb2: {
        _1 = <Vec<u32> as IntoIterator>::into_iter(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = &mut _1;
        _12 = _8 as &mut dyn std::iter::Iterator<Item = u32> (Pointer(Unsize));
        _11 = <dyn Iterator<Item = u32> as Iterator>::next(_12) -> [return: bb4, unwind: bb153];
    }

    bb4: {
        _10 = &_11;
        _891 = const _;
        _9 = (move _10, _891);
        _13 = (_9.0: &std::option::Option<u32>);
        _14 = (_9.1: &std::option::Option<u32>);
        _16 = <Option<u32> as PartialEq>::eq(_13, _14) -> [return: bb5, unwind: bb153];
    }

    bb5: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<Option<u32>, Option<u32>>(move _17, _13, _14, move _19) -> bb153;
    }

    bb7: {
        _23 = _8 as &mut dyn std::iter::Iterator<Item = u32> (Pointer(Unsize));
        _22 = <dyn Iterator<Item = u32> as Iterator>::next(_23) -> [return: bb8, unwind: bb153];
    }

    bb8: {
        _21 = &_22;
        _890 = const _;
        _20 = (move _21, _890);
        _24 = (_20.0: &std::option::Option<u32>);
        _25 = (_20.1: &std::option::Option<u32>);
        _27 = <Option<u32> as PartialEq>::eq(_24, _25) -> [return: bb9, unwind: bb153];
    }

    bb9: {
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<Option<u32>, Option<u32>>(move _28, _24, _25, move _30) -> bb153;
    }

    bb11: {
        _889 = const _;
        _888 = const _;
        _31 = (_889, _888);
        _32 = (_31.0: &std::option::Option<u32>);
        _33 = (_31.1: &std::option::Option<u32>);
        _35 = <Option<u32> as PartialEq>::eq(_32, _33) -> [return: bb12, unwind: bb153];
    }

    bb12: {
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<Option<u32>, Option<u32>>(move _36, _32, _33, move _38) -> bb153;
    }

    bb14: {
        _887 = const _;
        _886 = const _;
        _39 = (_887, _886);
        _40 = (_39.0: &(u32, u32));
        _41 = (_39.1: &(u32, u32));
        _43 = <(u32, u32) as PartialEq>::eq(_40, _41) -> [return: bb15, unwind: bb153];
    }

    bb15: {
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _44 = core::panicking::AssertKind::Eq;
        _46 = Option::<Arguments<'_>>::None;
        _45 = core::panicking::assert_failed::<(u32, u32), (u32, u32)>(move _44, _40, _41, move _46) -> bb153;
    }

    bb17: {
        _885 = const _;
        _884 = const _;
        _47 = (_885, _884);
        _48 = (_47.0: &bool);
        _49 = (_47.1: &bool);
        _52 = (*_48);
        _53 = (*_49);
        _51 = Eq(move _52, move _53);
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<bool, bool>(move _54, _48, _49, move _56) -> bb153;
    }

    bb19: {
        _883 = const _;
        _882 = const _;
        _57 = (_883, _882);
        _58 = (_57.0: &bool);
        _59 = (_57.1: &bool);
        _62 = (*_58);
        _63 = (*_59);
        _61 = Eq(move _62, move _63);
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<bool, bool>(move _64, _58, _59, move _66) -> bb153;
    }

    bb21: {
        _67 = const 9264081114510713072_u64;
        _68 = _67 as usize (IntToInt);
        _71 = _67 as u32 (IntToInt);
        _70 = &_71;
        _881 = const _;
        _69 = (move _70, _881);
        _72 = (_69.0: &u32);
        _73 = (_69.1: &u32);
        _76 = (*_72);
        _77 = (*_73);
        _75 = Eq(move _76, move _77);
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<u32, u32>(move _78, _72, _73, move _80) -> bb153;
    }

    bb23: {
        _83 = _67 as u8 (IntToInt);
        _82 = &_83;
        _880 = const _;
        _81 = (move _82, _880);
        _84 = (_81.0: &u8);
        _85 = (_81.1: &u8);
        _88 = (*_84);
        _89 = (*_85);
        _87 = Eq(move _88, move _89);
        _86 = Not(move _87);
        switchInt(move _86) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _90 = core::panicking::AssertKind::Eq;
        _92 = Option::<Arguments<'_>>::None;
        _91 = core::panicking::assert_failed::<u8, u8>(move _90, _84, _85, move _92) -> bb153;
    }

    bb25: {
        _95 = _67 as i8 (IntToInt);
        _94 = &_95;
        _879 = const _;
        _93 = (move _94, _879);
        _96 = (_93.0: &i8);
        _97 = (_93.1: &i8);
        _100 = (*_96);
        _101 = (*_97);
        _99 = Eq(move _100, move _101);
        _98 = Not(move _99);
        switchInt(move _98) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _102 = core::panicking::AssertKind::Eq;
        _104 = Option::<Arguments<'_>>::None;
        _103 = core::panicking::assert_failed::<i8, i8>(move _102, _96, _97, move _104) -> bb153;
    }

    bb27: {
        _107 = _67 as u32 (IntToInt);
        _106 = &_107;
        _878 = const _;
        _105 = (move _106, _878);
        _108 = (_105.0: &u32);
        _109 = (_105.1: &u32);
        _112 = (*_108);
        _113 = (*_109);
        _111 = Eq(move _112, move _113);
        _110 = Not(move _111);
        switchInt(move _110) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _114 = core::panicking::AssertKind::Eq;
        _116 = Option::<Arguments<'_>>::None;
        _115 = core::panicking::assert_failed::<u32, u32>(move _114, _108, _109, move _116) -> bb153;
    }

    bb29: {
        _121 = _67 as u32 (IntToInt);
        _120 = move _121 as usize (IntToInt);
        _119 = move _120 as u32 (IntToInt);
        _118 = &_119;
        _123 = _67 as u32 (IntToInt);
        _122 = &_123;
        _117 = (move _118, move _122);
        _124 = (_117.0: &u32);
        _125 = (_117.1: &u32);
        _128 = (*_124);
        _129 = (*_125);
        _127 = Eq(move _128, move _129);
        _126 = Not(move _127);
        switchInt(move _126) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        _130 = core::panicking::AssertKind::Eq;
        _132 = Option::<Arguments<'_>>::None;
        _131 = core::panicking::assert_failed::<u32, u32>(move _130, _124, _125, move _132) -> bb153;
    }

    bb31: {
        _135 = _67 as i32 (IntToInt);
        _134 = &_135;
        _877 = const _;
        _133 = (move _134, _877);
        _136 = (_133.0: &i32);
        _137 = (_133.1: &i32);
        _140 = (*_136);
        _141 = (*_137);
        _139 = Eq(move _140, move _141);
        _138 = Not(move _139);
        switchInt(move _138) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _142 = core::panicking::AssertKind::Eq;
        _144 = Option::<Arguments<'_>>::None;
        _143 = core::panicking::assert_failed::<i32, i32>(move _142, _136, _137, move _144) -> bb153;
    }

    bb33: {
        _149 = _67 as i32 (IntToInt);
        _148 = move _149 as isize (IntToInt);
        _147 = move _148 as i32 (IntToInt);
        _146 = &_147;
        _151 = _67 as i32 (IntToInt);
        _150 = &_151;
        _145 = (move _146, move _150);
        _152 = (_145.0: &i32);
        _153 = (_145.1: &i32);
        _156 = (*_152);
        _157 = (*_153);
        _155 = Eq(move _156, move _157);
        _154 = Not(move _155);
        switchInt(move _154) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _158 = core::panicking::AssertKind::Eq;
        _160 = Option::<Arguments<'_>>::None;
        _159 = core::panicking::assert_failed::<i32, i32>(move _158, _152, _153, move _160) -> bb153;
    }

    bb35: {
        _163 = _67 as i64 (IntToInt);
        _162 = &_163;
        _876 = const _;
        _161 = (move _162, _876);
        _164 = (_161.0: &i64);
        _165 = (_161.1: &i64);
        _168 = (*_164);
        _169 = (*_165);
        _167 = Eq(move _168, move _169);
        _166 = Not(move _167);
        switchInt(move _166) -> [0: bb37, otherwise: bb36];
    }

    bb36: {
        _170 = core::panicking::AssertKind::Eq;
        _172 = Option::<Arguments<'_>>::None;
        _171 = core::panicking::assert_failed::<i64, i64>(move _170, _164, _165, move _172) -> bb153;
    }

    bb37: {
        _875 = const _;
        _874 = const _;
        _173 = (_875, _874);
        _174 = (_173.0: &f64);
        _175 = (_173.1: &f64);
        _178 = (*_174);
        _179 = (*_175);
        _177 = Eq(move _178, move _179);
        _176 = Not(move _177);
        switchInt(move _176) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _180 = core::panicking::AssertKind::Eq;
        _182 = Option::<Arguments<'_>>::None;
        _181 = core::panicking::assert_failed::<f64, f64>(move _180, _174, _175, move _182) -> bb153;
    }

    bb39: {
        _873 = const _;
        _872 = const _;
        _183 = (_873, _872);
        _184 = (_183.0: &f64);
        _185 = (_183.1: &f64);
        _188 = (*_184);
        _189 = (*_185);
        _187 = Eq(move _188, move _189);
        _186 = Not(move _187);
        switchInt(move _186) -> [0: bb41, otherwise: bb40];
    }

    bb40: {
        _190 = core::panicking::AssertKind::Eq;
        _192 = Option::<Arguments<'_>>::None;
        _191 = core::panicking::assert_failed::<f64, f64>(move _190, _184, _185, move _192) -> bb153;
    }

    bb41: {
        _195 = _67 as f64 (IntToFloat);
        _194 = &_195;
        _871 = const _;
        _193 = (move _194, _871);
        _196 = (_193.0: &f64);
        _197 = (_193.1: &f64);
        _200 = (*_196);
        _201 = (*_197);
        _199 = Eq(move _200, move _201);
        _198 = Not(move _199);
        switchInt(move _198) -> [0: bb43, otherwise: bb42];
    }

    bb42: {
        _202 = core::panicking::AssertKind::Eq;
        _204 = Option::<Arguments<'_>>::None;
        _203 = core::panicking::assert_failed::<f64, f64>(move _202, _196, _197, move _204) -> bb153;
    }

    bb43: {
        _208 = _67 as i64 (IntToInt);
        _207 = move _208 as f64 (IntToFloat);
        _206 = &_207;
        _870 = const _;
        _205 = (move _206, _870);
        _209 = (_205.0: &f64);
        _210 = (_205.1: &f64);
        _213 = (*_209);
        _214 = (*_210);
        _212 = Eq(move _213, move _214);
        _211 = Not(move _212);
        switchInt(move _211) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _215 = core::panicking::AssertKind::Eq;
        _217 = Option::<Arguments<'_>>::None;
        _216 = core::panicking::assert_failed::<f64, f64>(move _215, _209, _210, move _217) -> bb153;
    }

    bb45: {
        _869 = const _;
        _868 = const _;
        _218 = (_869, _868);
        _219 = (_218.0: &u32);
        _220 = (_218.1: &u32);
        _223 = (*_219);
        _224 = (*_220);
        _222 = Eq(move _223, move _224);
        _221 = Not(move _222);
        switchInt(move _221) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        _225 = core::panicking::AssertKind::Eq;
        _227 = Option::<Arguments<'_>>::None;
        _226 = core::panicking::assert_failed::<u32, u32>(move _225, _219, _220, move _227) -> bb153;
    }

    bb47: {
        _867 = const _;
        _866 = const _;
        _228 = (_867, _866);
        _229 = (_228.0: &u64);
        _230 = (_228.1: &u64);
        _233 = (*_229);
        _234 = (*_230);
        _232 = Eq(move _233, move _234);
        _231 = Not(move _232);
        switchInt(move _231) -> [0: bb49, otherwise: bb48];
    }

    bb48: {
        _235 = core::panicking::AssertKind::Eq;
        _237 = Option::<Arguments<'_>>::None;
        _236 = core::panicking::assert_failed::<u64, u64>(move _235, _229, _230, move _237) -> bb153;
    }

    bb49: {
        _865 = const _;
        _864 = const _;
        _238 = (_865, _864);
        _239 = (_238.0: &i64);
        _240 = (_238.1: &i64);
        _243 = (*_239);
        _244 = (*_240);
        _242 = Eq(move _243, move _244);
        _241 = Not(move _242);
        switchInt(move _241) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _245 = core::panicking::AssertKind::Eq;
        _247 = Option::<Arguments<'_>>::None;
        _246 = core::panicking::assert_failed::<i64, i64>(move _245, _239, _240, move _247) -> bb153;
    }

    bb51: {
        _863 = const _;
        _862 = const _;
        _248 = (_863, _862);
        _249 = (_248.0: &i64);
        _250 = (_248.1: &i64);
        _253 = (*_249);
        _254 = (*_250);
        _252 = Eq(move _253, move _254);
        _251 = Not(move _252);
        switchInt(move _251) -> [0: bb53, otherwise: bb52];
    }

    bb52: {
        _255 = core::panicking::AssertKind::Eq;
        _257 = Option::<Arguments<'_>>::None;
        _256 = core::panicking::assert_failed::<i64, i64>(move _255, _249, _250, move _257) -> bb153;
    }

    bb53: {
        _259 = _68;
        _258 = move _259 as *const [u8; 1] (PointerFromExposedAddress);
        _262 = _258 as usize (PointerExposeAddress);
        _261 = &_262;
        _263 = &_68;
        _260 = (move _261, move _263);
        _264 = (_260.0: &usize);
        _265 = (_260.1: &usize);
        _268 = (*_264);
        _269 = (*_265);
        _267 = Eq(move _268, move _269);
        _266 = Not(move _267);
        switchInt(move _266) -> [0: bb55, otherwise: bb54];
    }

    bb54: {
        _270 = core::panicking::AssertKind::Eq;
        _272 = Option::<Arguments<'_>>::None;
        _271 = core::panicking::assert_failed::<usize, usize>(move _270, _264, _265, move _272) -> bb153;
    }

    bb55: {
        _273 = _258 as *const () (PtrToPtr);
        _276 = _273 as usize (PointerExposeAddress);
        _275 = &_276;
        _277 = &_68;
        _274 = (move _275, move _277);
        _278 = (_274.0: &usize);
        _279 = (_274.1: &usize);
        _282 = (*_278);
        _283 = (*_279);
        _281 = Eq(move _282, move _283);
        _280 = Not(move _281);
        switchInt(move _280) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _284 = core::panicking::AssertKind::Eq;
        _286 = Option::<Arguments<'_>>::None;
        _285 = core::panicking::assert_failed::<usize, usize>(move _284, _278, _279, move _286) -> bb153;
    }

    bb57: {
        _289 = &(*_258);
        _288 = &raw const (*_289);
        _287 = move _288 as *const [u8] (Pointer(Unsize));
        _292 = _287 as *const u8 (PtrToPtr);
        _291 = &_292;
        _294 = _258 as *const u8 (PtrToPtr);
        _293 = &_294;
        _290 = (move _291, move _293);
        _295 = (_290.0: &*const u8);
        _296 = (_290.1: &*const u8);
        _299 = (*_295);
        _300 = (*_296);
        _298 = Eq(move _299, move _300);
        _297 = Not(move _298);
        switchInt(move _297) -> [0: bb59, otherwise: bb58];
    }

    bb58: {
        _301 = core::panicking::AssertKind::Eq;
        _303 = Option::<Arguments<'_>>::None;
        _302 = core::panicking::assert_failed::<*const u8, *const u8>(move _301, _295, _296, move _303) -> bb153;
    }

    bb59: {
        _306 = _287 as *const u16 (PtrToPtr);
        _305 = &_306;
        _308 = _258 as *const u16 (PtrToPtr);
        _307 = &_308;
        _304 = (move _305, move _307);
        _309 = (_304.0: &*const u16);
        _310 = (_304.1: &*const u16);
        _313 = (*_309);
        _314 = (*_310);
        _312 = Eq(move _313, move _314);
        _311 = Not(move _312);
        switchInt(move _311) -> [0: bb61, otherwise: bb60];
    }

    bb60: {
        _315 = core::panicking::AssertKind::Eq;
        _317 = Option::<Arguments<'_>>::None;
        _316 = core::panicking::assert_failed::<*const u16, *const u16>(move _315, _309, _310, move _317) -> bb153;
    }

    bb61: {
        _318 = [const 0_u8, const 1_u8];
        _321 = &mut _318;
        _320 = &raw mut (*_321);
        _319 = move _320 as *mut [u16; 2] (PtrToPtr);
        _899 = _319 as *const () (PtrToPtr);
        _900 = _899 as usize (Transmute);
        _901 = AlignOf(u16);
        _902 = Sub(_901, const 1_usize);
        _903 = BitAnd(_900, _902);
        _904 = Eq(_903, const 0_usize);
        assert(_904, "misaligned pointer dereference: address must be a multiple of {} but is {}", _901, _900) -> [success: bb156, unwind unreachable];
    }

    bb62: {
        _333 = Not(move _334);
        switchInt(move _333) -> [0: bb64, otherwise: bb63];
    }

    bb63: {
        _335 = core::panicking::AssertKind::Eq;
        _337 = Option::<Arguments<'_>>::None;
        _336 = core::panicking::assert_failed::<&[u8], &[u8; 2]>(move _335, _331, _332, move _337) -> bb153;
    }

    bb64: {
        _338 = _322 as *mut str (PtrToPtr);
        _340 = _338 as *const [u8] (PtrToPtr);
        _339 = &(*_340);
        _343 = &_318;
        _342 = &_343;
        _344 = &_339;
        _341 = (move _342, move _344);
        _345 = (_341.0: &&[u8; 2]);
        _346 = (_341.1: &&[u8]);
        _348 = <&[u8; 2] as PartialEq<&[u8]>>::eq(_345, _346) -> [return: bb65, unwind: bb153];
    }

    bb65: {
        _347 = Not(move _348);
        switchInt(move _347) -> [0: bb67, otherwise: bb66];
    }

    bb66: {
        _349 = core::panicking::AssertKind::Eq;
        _351 = Option::<Arguments<'_>>::None;
        _350 = core::panicking::assert_failed::<&[u8; 2], &[u8]>(move _349, _345, _346, move _351) -> bb153;
    }

    bb67: {
        _353 = [const 3_u8, const 2_u8, const 6_u8];
        _354 = [const 4_u8, const 5_u8, const 1_u8];
        _352 = [move _353, move _354];
        _357 = &_352;
        _356 = &raw const (*_357);
        _355 = move _356 as *const [[u8; 3]] (Pointer(Unsize));
        _360 = _355 as *const [[u8; 2]] (PtrToPtr);
        _893 = _360 as *const () (PtrToPtr);
        _894 = _893 as usize (Transmute);
        _895 = AlignOf([u8; 2]);
        _896 = Sub(_895, const 1_usize);
        _897 = BitAnd(_894, _896);
        _898 = Eq(_897, const 0_usize);
        assert(_898, "misaligned pointer dereference: address must be a multiple of {} but is {}", _895, _894) -> [success: bb155, unwind unreachable];
    }

    bb68: {
        _365 = Not(move _366);
        switchInt(move _365) -> [0: bb70, otherwise: bb69];
    }

    bb69: {
        _367 = core::panicking::AssertKind::Eq;
        _369 = Option::<Arguments<'_>>::None;
        _368 = core::panicking::assert_failed::<&[[u8; 2]], [[u8; 2]; 2]>(move _367, _363, _364, move _369) -> bb153;
    }

    bb70: {
        _860 = const _;
        _859 = const _;
        _370 = (_860, _859);
        _371 = (_370.0: &u8);
        _372 = (_370.1: &u8);
        _375 = (*_371);
        _376 = (*_372);
        _374 = Eq(move _375, move _376);
        _373 = Not(move _374);
        switchInt(move _373) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _377 = core::panicking::AssertKind::Eq;
        _379 = Option::<Arguments<'_>>::None;
        _378 = core::panicking::assert_failed::<u8, u8>(move _377, _371, _372, move _379) -> bb153;
    }

    bb72: {
        _858 = const _;
        _857 = const _;
        _380 = (_858, _857);
        _381 = (_380.0: &u8);
        _382 = (_380.1: &u8);
        _385 = (*_381);
        _386 = (*_382);
        _384 = Eq(move _385, move _386);
        _383 = Not(move _384);
        switchInt(move _383) -> [0: bb74, otherwise: bb73];
    }

    bb73: {
        _387 = core::panicking::AssertKind::Eq;
        _389 = Option::<Arguments<'_>>::None;
        _388 = core::panicking::assert_failed::<u8, u8>(move _387, _381, _382, move _389) -> bb153;
    }

    bb74: {
        _856 = const _;
        _855 = const _;
        _390 = (_856, _855);
        _391 = (_390.0: &i8);
        _392 = (_390.1: &i8);
        _395 = (*_391);
        _396 = (*_392);
        _394 = Eq(move _395, move _396);
        _393 = Not(move _394);
        switchInt(move _393) -> [0: bb76, otherwise: bb75];
    }

    bb75: {
        _397 = core::panicking::AssertKind::Eq;
        _399 = Option::<Arguments<'_>>::None;
        _398 = core::panicking::assert_failed::<i8, i8>(move _397, _391, _392, move _399) -> bb153;
    }

    bb76: {
        _854 = const _;
        _853 = const _;
        _400 = (_854, _853);
        _401 = (_400.0: &i8);
        _402 = (_400.1: &i8);
        _405 = (*_401);
        _406 = (*_402);
        _404 = Eq(move _405, move _406);
        _403 = Not(move _404);
        switchInt(move _403) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        _407 = core::panicking::AssertKind::Eq;
        _409 = Option::<Arguments<'_>>::None;
        _408 = core::panicking::assert_failed::<i8, i8>(move _407, _401, _402, move _409) -> bb153;
    }

    bb78: {
        _852 = const _;
        _851 = const _;
        _410 = (_852, _851);
        _411 = (_410.0: &i8);
        _412 = (_410.1: &i8);
        _415 = (*_411);
        _416 = (*_412);
        _414 = Eq(move _415, move _416);
        _413 = Not(move _414);
        switchInt(move _413) -> [0: bb80, otherwise: bb79];
    }

    bb79: {
        _417 = core::panicking::AssertKind::Eq;
        _419 = Option::<Arguments<'_>>::None;
        _418 = core::panicking::assert_failed::<i8, i8>(move _417, _411, _412, move _419) -> bb153;
    }

    bb80: {
        _850 = const _;
        _849 = const _;
        _420 = (_850, _849);
        _421 = (_420.0: &u8);
        _422 = (_420.1: &u8);
        _425 = (*_421);
        _426 = (*_422);
        _424 = Eq(move _425, move _426);
        _423 = Not(move _424);
        switchInt(move _423) -> [0: bb82, otherwise: bb81];
    }

    bb81: {
        _427 = core::panicking::AssertKind::Eq;
        _429 = Option::<Arguments<'_>>::None;
        _428 = core::panicking::assert_failed::<u8, u8>(move _427, _421, _422, move _429) -> bb153;
    }

    bb82: {
        _848 = const _;
        _847 = const _;
        _430 = (_848, _847);
        _431 = (_430.0: &u8);
        _432 = (_430.1: &u8);
        _435 = (*_431);
        _436 = (*_432);
        _434 = Eq(move _435, move _436);
        _433 = Not(move _434);
        switchInt(move _433) -> [0: bb84, otherwise: bb83];
    }

    bb83: {
        _437 = core::panicking::AssertKind::Eq;
        _439 = Option::<Arguments<'_>>::None;
        _438 = core::panicking::assert_failed::<u8, u8>(move _437, _431, _432, move _439) -> bb153;
    }

    bb84: {
        _846 = const _;
        _845 = const _;
        _440 = (_846, _845);
        _441 = (_440.0: &u8);
        _442 = (_440.1: &u8);
        _445 = (*_441);
        _446 = (*_442);
        _444 = Eq(move _445, move _446);
        _443 = Not(move _444);
        switchInt(move _443) -> [0: bb86, otherwise: bb85];
    }

    bb85: {
        _447 = core::panicking::AssertKind::Eq;
        _449 = Option::<Arguments<'_>>::None;
        _448 = core::panicking::assert_failed::<u8, u8>(move _447, _441, _442, move _449) -> bb153;
    }

    bb86: {
        _844 = const _;
        _843 = const _;
        _450 = (_844, _843);
        _451 = (_450.0: &u16);
        _452 = (_450.1: &u16);
        _455 = (*_451);
        _456 = (*_452);
        _454 = Eq(move _455, move _456);
        _453 = Not(move _454);
        switchInt(move _453) -> [0: bb88, otherwise: bb87];
    }

    bb87: {
        _457 = core::panicking::AssertKind::Eq;
        _459 = Option::<Arguments<'_>>::None;
        _458 = core::panicking::assert_failed::<u16, u16>(move _457, _451, _452, move _459) -> bb153;
    }

    bb88: {
        _842 = const _;
        _841 = const _;
        _460 = (_842, _841);
        _461 = (_460.0: &u16);
        _462 = (_460.1: &u16);
        _465 = (*_461);
        _466 = (*_462);
        _464 = Eq(move _465, move _466);
        _463 = Not(move _464);
        switchInt(move _463) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        _467 = core::panicking::AssertKind::Eq;
        _469 = Option::<Arguments<'_>>::None;
        _468 = core::panicking::assert_failed::<u16, u16>(move _467, _461, _462, move _469) -> bb153;
    }

    bb90: {
        _840 = const _;
        _839 = const _;
        _470 = (_840, _839);
        _471 = (_470.0: &u16);
        _472 = (_470.1: &u16);
        _475 = (*_471);
        _476 = (*_472);
        _474 = Eq(move _475, move _476);
        _473 = Not(move _474);
        switchInt(move _473) -> [0: bb92, otherwise: bb91];
    }

    bb91: {
        _477 = core::panicking::AssertKind::Eq;
        _479 = Option::<Arguments<'_>>::None;
        _478 = core::panicking::assert_failed::<u16, u16>(move _477, _471, _472, move _479) -> bb153;
    }

    bb92: {
        _838 = const _;
        _837 = const _;
        _480 = (_838, _837);
        _481 = (_480.0: &u16);
        _482 = (_480.1: &u16);
        _485 = (*_481);
        _486 = (*_482);
        _484 = Eq(move _485, move _486);
        _483 = Not(move _484);
        switchInt(move _483) -> [0: bb94, otherwise: bb93];
    }

    bb93: {
        _487 = core::panicking::AssertKind::Eq;
        _489 = Option::<Arguments<'_>>::None;
        _488 = core::panicking::assert_failed::<u16, u16>(move _487, _481, _482, move _489) -> bb153;
    }

    bb94: {
        _836 = const _;
        _835 = const _;
        _490 = (_836, _835);
        _491 = (_490.0: &u16);
        _492 = (_490.1: &u16);
        _495 = (*_491);
        _496 = (*_492);
        _494 = Eq(move _495, move _496);
        _493 = Not(move _494);
        switchInt(move _493) -> [0: bb96, otherwise: bb95];
    }

    bb95: {
        _497 = core::panicking::AssertKind::Eq;
        _499 = Option::<Arguments<'_>>::None;
        _498 = core::panicking::assert_failed::<u16, u16>(move _497, _491, _492, move _499) -> bb153;
    }

    bb96: {
        _834 = const _;
        _833 = const _;
        _500 = (_834, _833);
        _501 = (_500.0: &i16);
        _502 = (_500.1: &i16);
        _505 = (*_501);
        _506 = (*_502);
        _504 = Eq(move _505, move _506);
        _503 = Not(move _504);
        switchInt(move _503) -> [0: bb98, otherwise: bb97];
    }

    bb97: {
        _507 = core::panicking::AssertKind::Eq;
        _509 = Option::<Arguments<'_>>::None;
        _508 = core::panicking::assert_failed::<i16, i16>(move _507, _501, _502, move _509) -> bb153;
    }

    bb98: {
        _832 = const _;
        _831 = const _;
        _510 = (_832, _831);
        _511 = (_510.0: &u16);
        _512 = (_510.1: &u16);
        _515 = (*_511);
        _516 = (*_512);
        _514 = Eq(move _515, move _516);
        _513 = Not(move _514);
        switchInt(move _513) -> [0: bb100, otherwise: bb99];
    }

    bb99: {
        _517 = core::panicking::AssertKind::Eq;
        _519 = Option::<Arguments<'_>>::None;
        _518 = core::panicking::assert_failed::<u16, u16>(move _517, _511, _512, move _519) -> bb153;
    }

    bb100: {
        _830 = const _;
        _829 = const _;
        _520 = (_830, _829);
        _521 = (_520.0: &i16);
        _522 = (_520.1: &i16);
        _525 = (*_521);
        _526 = (*_522);
        _524 = Eq(move _525, move _526);
        _523 = Not(move _524);
        switchInt(move _523) -> [0: bb102, otherwise: bb101];
    }

    bb101: {
        _527 = core::panicking::AssertKind::Eq;
        _529 = Option::<Arguments<'_>>::None;
        _528 = core::panicking::assert_failed::<i16, i16>(move _527, _521, _522, move _529) -> bb153;
    }

    bb102: {
        _828 = const _;
        _827 = const _;
        _530 = (_828, _827);
        _531 = (_530.0: &u16);
        _532 = (_530.1: &u16);
        _535 = (*_531);
        _536 = (*_532);
        _534 = Eq(move _535, move _536);
        _533 = Not(move _534);
        switchInt(move _533) -> [0: bb104, otherwise: bb103];
    }

    bb103: {
        _537 = core::panicking::AssertKind::Eq;
        _539 = Option::<Arguments<'_>>::None;
        _538 = core::panicking::assert_failed::<u16, u16>(move _537, _531, _532, move _539) -> bb153;
    }

    bb104: {
        _826 = const _;
        _825 = const _;
        _540 = (_826, _825);
        _541 = (_540.0: &u16);
        _542 = (_540.1: &u16);
        _545 = (*_541);
        _546 = (*_542);
        _544 = Eq(move _545, move _546);
        _543 = Not(move _544);
        switchInt(move _543) -> [0: bb106, otherwise: bb105];
    }

    bb105: {
        _547 = core::panicking::AssertKind::Eq;
        _549 = Option::<Arguments<'_>>::None;
        _548 = core::panicking::assert_failed::<u16, u16>(move _547, _541, _542, move _549) -> bb153;
    }

    bb106: {
        _824 = const _;
        _823 = const _;
        _550 = (_824, _823);
        _551 = (_550.0: &i64);
        _552 = (_550.1: &i64);
        _555 = (*_551);
        _556 = (*_552);
        _554 = Eq(move _555, move _556);
        _553 = Not(move _554);
        switchInt(move _553) -> [0: bb108, otherwise: bb107];
    }

    bb107: {
        _557 = core::panicking::AssertKind::Eq;
        _559 = Option::<Arguments<'_>>::None;
        _558 = core::panicking::assert_failed::<i64, i64>(move _557, _551, _552, move _559) -> bb153;
    }

    bb108: {
        _822 = const _;
        _821 = const _;
        _560 = (_822, _821);
        _561 = (_560.0: &i64);
        _562 = (_560.1: &i64);
        _565 = (*_561);
        _566 = (*_562);
        _564 = Eq(move _565, move _566);
        _563 = Not(move _564);
        switchInt(move _563) -> [0: bb110, otherwise: bb109];
    }

    bb109: {
        _567 = core::panicking::AssertKind::Eq;
        _569 = Option::<Arguments<'_>>::None;
        _568 = core::panicking::assert_failed::<i64, i64>(move _567, _561, _562, move _569) -> bb153;
    }

    bb110: {
        _820 = const _;
        _819 = const _;
        _570 = (_820, _819);
        _571 = (_570.0: &u32);
        _572 = (_570.1: &u32);
        _575 = (*_571);
        _576 = (*_572);
        _574 = Eq(move _575, move _576);
        _573 = Not(move _574);
        switchInt(move _573) -> [0: bb112, otherwise: bb111];
    }

    bb111: {
        _577 = core::panicking::AssertKind::Eq;
        _579 = Option::<Arguments<'_>>::None;
        _578 = core::panicking::assert_failed::<u32, u32>(move _577, _571, _572, move _579) -> bb153;
    }

    bb112: {
        _818 = const _;
        _817 = const _;
        _580 = (_818, _817);
        _581 = (_580.0: &u16);
        _582 = (_580.1: &u16);
        _585 = (*_581);
        _586 = (*_582);
        _584 = Eq(move _585, move _586);
        _583 = Not(move _584);
        switchInt(move _583) -> [0: bb114, otherwise: bb113];
    }

    bb113: {
        _587 = core::panicking::AssertKind::Eq;
        _589 = Option::<Arguments<'_>>::None;
        _588 = core::panicking::assert_failed::<u16, u16>(move _587, _581, _582, move _589) -> bb153;
    }

    bb114: {
        _816 = const _;
        _815 = const _;
        _590 = (_816, _815);
        _591 = (_590.0: &u8);
        _592 = (_590.1: &u8);
        _595 = (*_591);
        _596 = (*_592);
        _594 = Eq(move _595, move _596);
        _593 = Not(move _594);
        switchInt(move _593) -> [0: bb116, otherwise: bb115];
    }

    bb115: {
        _597 = core::panicking::AssertKind::Eq;
        _599 = Option::<Arguments<'_>>::None;
        _598 = core::panicking::assert_failed::<u8, u8>(move _597, _591, _592, move _599) -> bb153;
    }

    bb116: {
        _814 = const _;
        _813 = const _;
        _600 = (_814, _813);
        _601 = (_600.0: &u8);
        _602 = (_600.1: &u8);
        _605 = (*_601);
        _606 = (*_602);
        _604 = Eq(move _605, move _606);
        _603 = Not(move _604);
        switchInt(move _603) -> [0: bb118, otherwise: bb117];
    }

    bb117: {
        _607 = core::panicking::AssertKind::Eq;
        _609 = Option::<Arguments<'_>>::None;
        _608 = core::panicking::assert_failed::<u8, u8>(move _607, _601, _602, move _609) -> bb153;
    }

    bb118: {
        _812 = const _;
        _811 = const _;
        _610 = (_812, _811);
        _611 = (_610.0: &u16);
        _612 = (_610.1: &u16);
        _615 = (*_611);
        _616 = (*_612);
        _614 = Eq(move _615, move _616);
        _613 = Not(move _614);
        switchInt(move _613) -> [0: bb120, otherwise: bb119];
    }

    bb119: {
        _617 = core::panicking::AssertKind::Eq;
        _619 = Option::<Arguments<'_>>::None;
        _618 = core::panicking::assert_failed::<u16, u16>(move _617, _611, _612, move _619) -> bb153;
    }

    bb120: {
        _810 = const _;
        _809 = const _;
        _620 = (_810, _809);
        _621 = (_620.0: &u32);
        _622 = (_620.1: &u32);
        _625 = (*_621);
        _626 = (*_622);
        _624 = Eq(move _625, move _626);
        _623 = Not(move _624);
        switchInt(move _623) -> [0: bb122, otherwise: bb121];
    }

    bb121: {
        _627 = core::panicking::AssertKind::Eq;
        _629 = Option::<Arguments<'_>>::None;
        _628 = core::panicking::assert_failed::<u32, u32>(move _627, _621, _622, move _629) -> bb153;
    }

    bb122: {
        _808 = const _;
        _807 = const _;
        _630 = (_808, _807);
        _631 = (_630.0: &u8);
        _632 = (_630.1: &u8);
        _635 = (*_631);
        _636 = (*_632);
        _634 = Eq(move _635, move _636);
        _633 = Not(move _634);
        switchInt(move _633) -> [0: bb124, otherwise: bb123];
    }

    bb123: {
        _637 = core::panicking::AssertKind::Eq;
        _639 = Option::<Arguments<'_>>::None;
        _638 = core::panicking::assert_failed::<u8, u8>(move _637, _631, _632, move _639) -> bb153;
    }

    bb124: {
        _806 = const _;
        _805 = const _;
        _640 = (_806, _805);
        _641 = (_640.0: &u16);
        _642 = (_640.1: &u16);
        _645 = (*_641);
        _646 = (*_642);
        _644 = Eq(move _645, move _646);
        _643 = Not(move _644);
        switchInt(move _643) -> [0: bb126, otherwise: bb125];
    }

    bb125: {
        _647 = core::panicking::AssertKind::Eq;
        _649 = Option::<Arguments<'_>>::None;
        _648 = core::panicking::assert_failed::<u16, u16>(move _647, _641, _642, move _649) -> bb153;
    }

    bb126: {
        _804 = const _;
        _803 = const _;
        _650 = (_804, _803);
        _651 = (_650.0: &u32);
        _652 = (_650.1: &u32);
        _655 = (*_651);
        _656 = (*_652);
        _654 = Eq(move _655, move _656);
        _653 = Not(move _654);
        switchInt(move _653) -> [0: bb128, otherwise: bb127];
    }

    bb127: {
        _657 = core::panicking::AssertKind::Eq;
        _659 = Option::<Arguments<'_>>::None;
        _658 = core::panicking::assert_failed::<u32, u32>(move _657, _651, _652, move _659) -> bb153;
    }

    bb128: {
        _802 = const _;
        _801 = const _;
        _660 = (_802, _801);
        _661 = (_660.0: &i16);
        _662 = (_660.1: &i16);
        _665 = (*_661);
        _666 = (*_662);
        _664 = Eq(move _665, move _666);
        _663 = Not(move _664);
        switchInt(move _663) -> [0: bb130, otherwise: bb129];
    }

    bb129: {
        _667 = core::panicking::AssertKind::Eq;
        _669 = Option::<Arguments<'_>>::None;
        _668 = core::panicking::assert_failed::<i16, i16>(move _667, _661, _662, move _669) -> bb153;
    }

    bb130: {
        _800 = const _;
        _799 = const _;
        _670 = (_800, _799);
        _671 = (_670.0: &u16);
        _672 = (_670.1: &u16);
        _675 = (*_671);
        _676 = (*_672);
        _674 = Eq(move _675, move _676);
        _673 = Not(move _674);
        switchInt(move _673) -> [0: bb132, otherwise: bb131];
    }

    bb131: {
        _677 = core::panicking::AssertKind::Eq;
        _679 = Option::<Arguments<'_>>::None;
        _678 = core::panicking::assert_failed::<u16, u16>(move _677, _671, _672, move _679) -> bb153;
    }

    bb132: {
        _798 = const _;
        _797 = const _;
        _680 = (_798, _797);
        _681 = (_680.0: &char);
        _682 = (_680.1: &char);
        _685 = (*_681);
        _686 = (*_682);
        _684 = Eq(move _685, move _686);
        _683 = Not(move _684);
        switchInt(move _683) -> [0: bb134, otherwise: bb133];
    }

    bb133: {
        _687 = core::panicking::AssertKind::Eq;
        _689 = Option::<Arguments<'_>>::None;
        _688 = core::panicking::assert_failed::<char, char>(move _687, _681, _682, move _689) -> bb153;
    }

    bb134: {
        _796 = const _;
        _795 = const _;
        _690 = (_796, _795);
        _691 = (_690.0: &char);
        _692 = (_690.1: &char);
        _695 = (*_691);
        _696 = (*_692);
        _694 = Eq(move _695, move _696);
        _693 = Not(move _694);
        switchInt(move _693) -> [0: bb136, otherwise: bb135];
    }

    bb135: {
        _697 = core::panicking::AssertKind::Eq;
        _699 = Option::<Arguments<'_>>::None;
        _698 = core::panicking::assert_failed::<char, char>(move _697, _691, _692, move _699) -> bb153;
    }

    bb136: {
        _794 = const _;
        _793 = const _;
        _700 = (_794, _793);
        _701 = (_700.0: &char);
        _702 = (_700.1: &char);
        _705 = (*_701);
        _706 = (*_702);
        _704 = Eq(move _705, move _706);
        _703 = Not(move _704);
        switchInt(move _703) -> [0: bb138, otherwise: bb137];
    }

    bb137: {
        _707 = core::panicking::AssertKind::Eq;
        _709 = Option::<Arguments<'_>>::None;
        _708 = core::panicking::assert_failed::<char, char>(move _707, _701, _702, move _709) -> bb153;
    }

    bb138: {
        _710 = [const 1_u32, const 2_u32, const 3_u32];
        _713 = const 0_usize;
        _714 = const 3_usize;
        _715 = Lt(_713, _714);
        assert(move _715, "index out of bounds: the length is {} but the index is {}", move _714, _713) -> [success: bb139, unwind: bb153];
    }

    bb139: {
        _712 = &_710[_713];
        _711 = &raw const (*_712);
        _717 = &_711;
        _721 = &_710;
        _720 = &raw const (*_721);
        _719 = move _720 as *const u32 (Pointer(ArrayToPointer));
        _718 = &_719;
        _716 = (move _717, move _718);
        _722 = (_716.0: &*const u32);
        _723 = (_716.1: &*const u32);
        _726 = (*_722);
        _727 = (*_723);
        _725 = Eq(move _726, move _727);
        _724 = Not(move _725);
        switchInt(move _724) -> [0: bb141, otherwise: bb140];
    }

    bb140: {
        _728 = core::panicking::AssertKind::Eq;
        _730 = Option::<Arguments<'_>>::None;
        _729 = core::panicking::assert_failed::<*const u32, *const u32>(move _728, _722, _723, move _730) -> bb153;
    }

    bb141: {
        _732 = &_711;
        _736 = &_710;
        _735 = &raw const (*_736);
        _734 = move _735 as *const u32 (Pointer(ArrayToPointer));
        _733 = &_734;
        _731 = (move _732, move _733);
        _737 = (_731.0: &*const u32);
        _738 = (_731.1: &*const u32);
        _741 = (*_737);
        _742 = (*_738);
        _740 = Eq(move _741, move _742);
        _739 = Not(move _740);
        switchInt(move _739) -> [0: bb143, otherwise: bb142];
    }

    bb142: {
        _743 = core::panicking::AssertKind::Eq;
        _745 = Option::<Arguments<'_>>::None;
        _744 = core::panicking::assert_failed::<*const u32, *const u32>(move _743, _737, _738, move _745) -> bb153;
    }

    bb143: {
        _749 = main::foo as fn() (Pointer(ReifyFnPointer));
        _748 = move _749 as usize (PointerExposeAddress);
        _751 = bar as fn() (Pointer(ReifyFnPointer));
        _750 = move _751 as usize (PointerExposeAddress);
        _747 = Ne(move _748, move _750);
        _746 = Not(move _747);
        switchInt(move _746) -> [0: bb145, otherwise: bb144];
    }

    bb144: {
        _752 = core::panicking::panic(const "assertion failed: foo as usize != bar as usize") -> bb153;
    }

    bb145: {
        _756 = main::foo as fn() (Pointer(ReifyFnPointer));
        _755 = move _756 as i16 (PointerExposeAddress);
        _754 = &_755;
        _760 = main::foo as fn() (Pointer(ReifyFnPointer));
        _759 = move _760 as usize (PointerExposeAddress);
        _758 = move _759 as i16 (IntToInt);
        _757 = &_758;
        _753 = (move _754, move _757);
        _761 = (_753.0: &i16);
        _762 = (_753.1: &i16);
        _765 = (*_761);
        _766 = (*_762);
        _764 = Eq(move _765, move _766);
        _763 = Not(move _764);
        switchInt(move _763) -> [0: bb147, otherwise: bb146];
    }

    bb146: {
        _767 = core::panicking::AssertKind::Eq;
        _769 = Option::<Arguments<'_>>::None;
        _768 = core::panicking::assert_failed::<i16, i16>(move _767, _761, _762, move _769) -> bb153;
    }

    bb147: {
        _774 = main::foo as fn() (Pointer(ReifyFnPointer));
        _773 = move _774 as *const u8 (FnPtrToPtr);
        _772 = move _773 as usize (PointerExposeAddress);
        _771 = &_772;
        _777 = main::foo as fn() (Pointer(ReifyFnPointer));
        _776 = move _777 as usize (PointerExposeAddress);
        _775 = &_776;
        _770 = (move _771, move _775);
        _778 = (_770.0: &usize);
        _779 = (_770.1: &usize);
        _782 = (*_778);
        _783 = (*_779);
        _781 = Eq(move _782, move _783);
        _780 = Not(move _781);
        switchInt(move _780) -> [0: bb149, otherwise: bb148];
    }

    bb148: {
        _784 = core::panicking::AssertKind::Eq;
        _786 = Option::<Arguments<'_>>::None;
        _785 = core::panicking::assert_failed::<usize, usize>(move _784, _778, _779, move _786) -> bb153;
    }

    bb149: {
        _790 = main::foo as fn() (Pointer(ReifyFnPointer));
        _789 = move _790 as *const u32 (FnPtrToPtr);
        _791 = _711;
        _788 = Ne(move _789, move _791);
        _787 = Not(move _788);
        switchInt(move _787) -> [0: bb151, otherwise: bb150];
    }

    bb150: {
        _792 = core::panicking::panic(const "assertion failed: foo as *const u32 != first") -> bb153;
    }

    bb151: {
        drop(_1) -> [return: bb152, unwind continue];
    }

    bb152: {
        return;
    }

    bb153 (cleanup): {
        drop(_1) -> [return: bb154, unwind terminate];
    }

    bb154 (cleanup): {
        resume;
    }

    bb155: {
        _359 = &(*_360);
        _358 = _359;
        _362 = &_358;
        _861 = const _;
        _361 = (move _362, _861);
        _363 = (_361.0: &&[[u8; 2]]);
        _364 = (_361.1: &[[u8; 2]; 2]);
        _366 = <&[[u8; 2]] as PartialEq<[[u8; 2]; 2]>>::eq(_363, _364) -> [return: bb68, unwind: bb153];
    }

    bb156: {
        _324 = &mut (*_319);
        _323 = &raw mut (*_324);
        _322 = move _323 as *mut [u16] (Pointer(Unsize));
        _325 = _322 as *const [u8] (PtrToPtr);
        _328 = &(*_325);
        _327 = &_328;
        _330 = &_318;
        _329 = &_330;
        _326 = (move _327, move _329);
        _331 = (_326.0: &&[u8]);
        _332 = (_326.1: &&[u8; 2]);
        _334 = <&[u8] as PartialEq<&[u8; 2]>>::eq(_331, _332) -> [return: bb62, unwind: bb153];
    }

    bb157: {
        (*_892) = [const 137_u32];
        _3 = move _7 as std::boxed::Box<[u32]> (Pointer(Unsize));
        _2 = slice::<impl [u32]>::into_vec::<std::alloc::Global>(move _3) -> [return: bb2, unwind continue];
    }
}

promoted[0] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const '×';
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 215_u8 as char (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const '\0';
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 0_u8 as char (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 'a';
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 97_u8 as char (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 33521_u16;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const '英' as u16 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const -32015_i16;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const '英' as i16 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 128053_u32;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const '🐵' as u32 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 62517_u16;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const '🐵' as u16 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 53_u8;
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const '🐵' as u8 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 1488_u32;
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 'א' as u32 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 1488_u16;
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 'א' as u16 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 208_u8;
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 'א' as u8 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 97_u8;
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 'a' as u8 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[24] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 97_u16;
        _0 = &_1;
        return;
    }
}

promoted[25] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 'a' as u16 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[26] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 97_u32;
        _0 = &_1;
        return;
    }
}

promoted[27] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 'a' as u32 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[28] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 1_i64;
        _0 = &_1;
        return;
    }
}

promoted[29] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const true as i64 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[30] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 0_i64;
        _0 = &_1;
        return;
    }
}

promoted[31] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const false as i64 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[32] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 1_u16;
        _0 = &_1;
        return;
    }
}

promoted[33] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const true as u16 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[34] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 0_u16;
        _0 = &_1;
        return;
    }
}

promoted[35] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const false as u16 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[36] in main: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const 1_i16;
        _0 = &_1;
        return;
    }
}

promoted[37] in main: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;
    let mut _2: isize;

    bb0: {
        _2 = Add(const _, const 0_isize);
        _1 = move _2 as i16 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[38] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 1_u16;
        _0 = &_1;
        return;
    }
}

promoted[39] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;
    let mut _2: isize;

    bb0: {
        _2 = Add(const _, const 0_isize);
        _1 = move _2 as u16 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[40] in main: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const -1_i16;
        _0 = &_1;
        return;
    }
}

promoted[41] in main: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;
    let mut _2: isize;

    bb0: {
        _2 = Add(const _, const 0_isize);
        _1 = move _2 as i16 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[42] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const u16::MAX;
        _0 = &_1;
        return;
    }
}

promoted[43] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;
    let mut _2: isize;

    bb0: {
        _2 = Add(const _, const 0_isize);
        _1 = move _2 as u16 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[44] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 0_u16;
        _0 = &_1;
        return;
    }
}

promoted[45] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;
    let mut _2: isize;

    bb0: {
        _2 = Add(const _, const 0_isize);
        _1 = move _2 as u16 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[46] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 163_u16;
        _0 = &_1;
        return;
    }
}

promoted[47] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;
    let mut _2: isize;

    bb0: {
        _2 = Add(const _, const 0_isize);
        _1 = move _2 as u16 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[48] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 0_u16;
        _0 = &_1;
        return;
    }
}

promoted[49] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;
    let mut _2: isize;

    bb0: {
        _2 = Add(const _, const 0_isize);
        _1 = move _2 as u16 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[50] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 163_u16;
        _0 = &_1;
        return;
    }
}

promoted[51] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;
    let mut _2: isize;

    bb0: {
        _2 = Add(const _, const 0_isize);
        _1 = move _2 as u16 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[52] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[53] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;
    let mut _2: isize;

    bb0: {
        _2 = Add(const _, const 0_isize);
        _1 = move _2 as u8 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[54] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 67_u8;
        _0 = &_1;
        return;
    }
}

promoted[55] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;
    let mut _2: isize;

    bb0: {
        _2 = Add(const _, const 0_isize);
        _1 = move _2 as u8 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[56] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 163_u8;
        _0 = &_1;
        return;
    }
}

promoted[57] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;
    let mut _2: isize;

    bb0: {
        _2 = Add(const _, const 0_isize);
        _1 = move _2 as u8 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[58] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 0_i8;
        _0 = &_1;
        return;
    }
}

promoted[59] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;
    let mut _2: isize;

    bb0: {
        _2 = Add(const _, const 0_isize);
        _1 = move _2 as i8 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[60] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 67_i8;
        _0 = &_1;
        return;
    }
}

promoted[61] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;
    let mut _2: isize;

    bb0: {
        _2 = Add(const _, const 0_isize);
        _1 = move _2 as i8 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[62] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const -93_i8;
        _0 = &_1;
        return;
    }
}

promoted[63] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;
    let mut _2: isize;

    bb0: {
        _2 = Add(const _, const 0_isize);
        _1 = move _2 as i8 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[64] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[65] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_isize as u8 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[66] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[67] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_isize as u8 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[68] in main: &[[u8; 2]; 2] = {
    let mut _0: &[[u8; 2]; 2];
    let mut _1: [[u8; 2]; 2];
    let mut _2: [u8; 2];
    let mut _3: [u8; 2];

    bb0: {
        _2 = [const 3_u8, const 2_u8];
        _3 = [const 6_u8, const 4_u8];
        _1 = [move _2, move _3];
        _0 = &_1;
        return;
    }
}

promoted[69] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 9223372036854775808_u64 as i64 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[70] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const -9.2233720368547758E+18f64 as i64 (FloatToInt);
        _0 = &_1;
        return;
    }
}

promoted[71] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 9223372036854774784_i64;
        _0 = &_1;
        return;
    }
}

promoted[72] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 9.2233720368547748E+18f64 as i64 (FloatToInt);
        _0 = &_1;
        return;
    }
}

promoted[73] in main: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const 18446744073709549568_u64;
        _0 = &_1;
        return;
    }
}

promoted[74] in main: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const 1.844674407370955E+19f64 as u64 (FloatToInt);
        _0 = &_1;
        return;
    }
}

promoted[75] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 4294967040_u32;
        _0 = &_1;
        return;
    }
}

promoted[76] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 4.29496704E+9f32 as u32 (FloatToInt);
        _0 = &_1;
        return;
    }
}

promoted[77] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const -9.1826629591988388E+18f64;
        _0 = &_1;
        return;
    }
}

promoted[78] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 9.2640811145107128E+18f64;
        _0 = &_1;
        return;
    }
}

promoted[79] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 1f64;
        _0 = &_1;
        return;
    }
}

promoted[80] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 1_i32 as f64 (IntToFloat);
        _0 = &_1;
        return;
    }
}

promoted[81] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 0f64;
        _0 = &_1;
        return;
    }
}

promoted[82] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 0_i32 as f64 (IntToFloat);
        _0 = &_1;
        return;
    }
}

promoted[83] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const -9182662959198838544_i64;
        _0 = &_1;
        return;
    }
}

promoted[84] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const -1060052752_i32;
        _0 = &_1;
        return;
    }
}

promoted[85] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 3234914544_u32;
        _0 = &_1;
        return;
    }
}

promoted[86] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const -16_i8;
        _0 = &_1;
        return;
    }
}

promoted[87] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 240_u8;
        _0 = &_1;
        return;
    }
}

promoted[88] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 3234914544_u32;
        _0 = &_1;
        return;
    }
}

promoted[89] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[90] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[91] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const false;
        _0 = &_1;
        return;
    }
}

promoted[92] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const false;
        _0 = &_1;
        return;
    }
}

promoted[93] in main: &(u32, u32) = {
    let mut _0: &(u32, u32);
    let mut _1: (u32, u32);

    bb0: {
        _1 = (const 1_u32, const 2_u32);
        _0 = &_1;
        return;
    }
}

promoted[94] in main: &(u32, u32) = {
    let mut _0: &(u32, u32);
    let mut _1: (u32, u32);

    bb0: {
        _1 = (const 1_u32, const 2_u32);
        _0 = &_1;
        return;
    }
}

promoted[95] in main: &Option<u32> = {
    let mut _0: &std::option::Option<u32>;
    let mut _1: std::option::Option<u32>;

    bb0: {
        _1 = Option::<u32>::Some(const 4_u32);
        _0 = &_1;
        return;
    }
}

promoted[96] in main: &Option<u32> = {
    let mut _0: &std::option::Option<u32>;
    let mut _1: std::option::Option<u32>;

    bb0: {
        _1 = Option::<u32>::Some(const 4_u32);
        _0 = &_1;
        return;
    }
}

promoted[97] in main: &Option<u32> = {
    let mut _0: &std::option::Option<u32>;
    let mut _1: std::option::Option<u32>;

    bb0: {
        _1 = Option::<u32>::None;
        _0 = &_1;
        return;
    }
}

promoted[98] in main: &Option<u32> = {
    let mut _0: &std::option::Option<u32>;
    let mut _1: std::option::Option<u32>;

    bb0: {
        _1 = Option::<u32>::Some(const 137_u32);
        _0 = &_1;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

main::{constant#4}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

main::{constant#5}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#6}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

main::{constant#7}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#9}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

main::{constant#8}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn main::foo() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[&str; 1];

    bb0: {
        _4 = const _;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_const(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = _print(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in main::foo: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "foo!\n"];
        _0 = &_1;
        return;
    }
}

fn bar() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[&str; 1];

    bb0: {
        _4 = const _;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_const(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = _print(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in bar: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "bar!\n"];
        _0 = &_1;
        return;
    }
}

fn foo() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
