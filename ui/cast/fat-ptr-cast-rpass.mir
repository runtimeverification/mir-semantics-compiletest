// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Foo::foo(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: *const [i32];
    let mut _2: *const [i32; 3];
    let mut _4: (&[i32; 2], &[i32; 2]);
    let mut _5: &[i32; 2];
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&usize, &usize);
    let mut _16: &usize;
    let _17: usize;
    let mut _18: &usize;
    let _19: usize;
    let mut _20: *const ();
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: usize;
    let mut _26: usize;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: *mut Bar;
    let mut _32: &mut Bar;
    let mut _33: Bar;
    let mut _35: *mut ();
    let mut _37: *const ();
    let mut _39: *mut ();
    let mut _40: (*mut (), std::ptr::DynMetadata<dyn Foo>);
    let mut _41: (&usize, &usize);
    let mut _42: &usize;
    let mut _43: &usize;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: usize;
    let mut _49: usize;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&usize, &usize);
    let mut _54: &usize;
    let mut _55: &usize;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: usize;
    let mut _61: usize;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: &[i32; 3];
    scope 1 {
        debug a => _1;
        let _3: *const [i32; 2];
        scope 2 {
            debug b => _3;
            let _13: *const [i32; 3];
            let mut _65: &[i32; 3];
            scope 3 {
                let _6: &[i32; 2];
                let _7: &[i32; 2];
                let mut _66: &[i32; 2];
                let mut _68: *const ();
                let mut _69: usize;
                let mut _70: usize;
                let mut _71: usize;
                let mut _72: usize;
                let mut _73: bool;
                scope 4 {
                    debug left_val => _6;
                    debug right_val => _7;
                    let _10: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _10;
                    }
                }
            }
            scope 6 {
                debug a => _13;
                let _14: *const [i32];
                scope 7 {
                    debug b => _14;
                    let _21: &usize;
                    let _22: &usize;
                    let _30: *mut dyn Foo;
                    scope 8 {
                        debug left_val => _21;
                        debug right_val => _22;
                        let _27: core::panicking::AssertKind;
                        scope 9 {
                            debug kind => _27;
                        }
                    }
                    scope 10 {
                        debug a => _30;
                        let _34: usize;
                        scope 11 {
                            debug b => _34;
                            let _36: usize;
                            scope 12 {
                                debug c => _36;
                                let _38: usize;
                                scope 13 {
                                    debug d => _38;
                                    let _44: &usize;
                                    let _45: &usize;
                                    let _56: &usize;
                                    let _57: &usize;
                                    scope 14 {
                                        debug left_val => _44;
                                        debug right_val => _45;
                                        let _50: core::panicking::AssertKind;
                                        scope 15 {
                                            debug kind => _50;
                                        }
                                    }
                                    scope 16 {
                                        debug left_val => _56;
                                        debug right_val => _57;
                                        let _62: core::panicking::AssertKind;
                                        scope 17 {
                                            debug kind => _62;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _67 = const _;
        _2 = &raw const (*_67);
        _1 = move _2 as *const [i32] (Pointer(Unsize));
        _3 = _1 as *const [i32; 2] (PtrToPtr);
        _68 = _3 as *const () (PtrToPtr);
        _69 = _68 as usize (Transmute);
        _70 = AlignOf(i32);
        _71 = Sub(_70, const 1_usize);
        _72 = BitAnd(_69, _71);
        _73 = Eq(_72, const 0_usize);
        assert(_73, "misaligned pointer dereference: address must be a multiple of {} but is {}", _70, _69) -> [success: bb11, unwind unreachable];
    }

    bb1: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<[i32; 2], [i32; 2]>(move _10, _6, _7, move _12) -> unwind continue;
    }

    bb3: {
        _65 = const _;
        _13 = &raw const (*_65);
        _14 = _13 as *const [i32] (Pointer(Unsize));
        _17 = _13 as usize (PointerExposeAddress);
        _16 = &_17;
        _20 = _14 as *const () (PtrToPtr);
        _19 = move _20 as usize (PointerExposeAddress);
        _18 = &_19;
        _15 = (move _16, move _18);
        _21 = (_15.0: &usize);
        _22 = (_15.1: &usize);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<usize, usize>(move _27, _21, _22, move _29) -> unwind continue;
    }

    bb5: {
        _32 = &mut _33;
        _31 = &raw mut (*_32);
        _30 = move _31 as *mut dyn Foo (Pointer(Unsize));
        _35 = _30 as *mut () (PtrToPtr);
        _34 = move _35 as usize (PointerExposeAddress);
        _37 = _30 as *const () (PtrToPtr);
        _36 = move _37 as usize (PointerExposeAddress);
        _40 = ptr::mut_ptr::<impl *mut dyn Foo>::to_raw_parts(_30) -> [return: bb6, unwind continue];
    }

    bb6: {
        _39 = (_40.0: *mut ());
        _38 = move _39 as usize (PointerExposeAddress);
        _42 = &_34;
        _43 = &_38;
        _41 = (move _42, move _43);
        _44 = (_41.0: &usize);
        _45 = (_41.1: &usize);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<usize, usize>(move _50, _44, _45, move _52) -> unwind continue;
    }

    bb8: {
        _54 = &_36;
        _55 = &_38;
        _53 = (move _54, move _55);
        _56 = (_53.0: &usize);
        _57 = (_53.1: &usize);
        _60 = (*_56);
        _61 = (*_57);
        _59 = Eq(move _60, move _61);
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<usize, usize>(move _62, _56, _57, move _64) -> unwind continue;
    }

    bb10: {
        return;
    }

    bb11: {
        _5 = &(*_3);
        _66 = const _;
        _4 = (move _5, _66);
        _6 = (_4.0: &[i32; 2]);
        _7 = (_4.1: &[i32; 2]);
        _9 = <[i32; 2] as PartialEq>::eq(_6, _7) -> [return: bb1, unwind continue];
    }
}

promoted[0] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];
    let mut _1: [i32; 3];

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];
    let mut _1: [i32; 2];

    bb0: {
        _1 = [const 1_i32, const 2_i32];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];
    let mut _1: [i32; 3];

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32];
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}
