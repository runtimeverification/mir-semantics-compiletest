// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::string::String, &std::string::String);
    let mut _2: &std::string::String;
    let _3: std::string::String;
    let mut _4: for<'a> fn(&'a dyn std::string::ToString) -> std::string::String;
    let mut _5: &dyn std::string::ToString;
    let mut _6: &std::string::String;
    let _7: std::string::String;
    let _8: &std::string::String;
    let _9: &std::string::String;
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: &&str;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }

    bb0: {
        _4 = <dyn ToString as ToString>::to_string as for<'a> fn(&'a dyn std::string::ToString) -> std::string::String (Pointer(ReifyFnPointer));
        _15 = const _;
        _5 = _15 as &dyn std::string::ToString (Pointer(Unsize));
        _3 = _4(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _7 = <String as From<&str>>::from(const "foo") -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _6 = &_7;
        _1 = (move _2, move _6);
        _8 = (_1.0: &std::string::String);
        _9 = (_1.1: &std::string::String);
        _11 = <String as PartialEq>::eq(_8, _9) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<String, String>(move _12, _8, _9, move _14) -> bb8;
    }

    bb5: {
        drop(_7) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        drop(_3) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_7) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "foo";
        _0 = &_1;
        return;
    }
}
