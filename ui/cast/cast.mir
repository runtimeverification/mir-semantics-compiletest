// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: isize;
    let mut _2: (&isize, &isize);
    let mut _3: &isize;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: isize;
    let mut _9: isize;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: isize;
    let mut _15: (&u32, &u32);
    let mut _16: &u32;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: u32;
    let mut _22: u32;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _26: (&u32, &u32);
    let mut _27: &u32;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: u32;
    let mut _33: u32;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&u8, &u8);
    let mut _38: &u8;
    let _39: u8;
    let mut _40: isize;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: u8;
    let mut _46: u8;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _50: (&i8, &i8);
    let mut _51: &i8;
    let _52: i8;
    let mut _53: u8;
    let mut _54: isize;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: i8;
    let mut _60: i8;
    let _62: !;
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _64: (&char, &char);
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: char;
    let mut _70: char;
    let _72: !;
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _74: (&u32, &u32);
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: u32;
    let mut _80: u32;
    let _82: !;
    let mut _83: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: *const &str;
    let mut _86: *mut &str;
    scope 1 {
        debug i => _1;
        let _4: &isize;
        let _5: &isize;
        let _13: u32;
        let mut _96: &isize;
        scope 2 {
            debug left_val => _4;
            debug right_val => _5;
            let _10: core::panicking::AssertKind;
            scope 3 {
                debug kind => _10;
            }
        }
        scope 4 {
            debug u => _13;
            let _17: &u32;
            let _18: &u32;
            let _28: &u32;
            let _29: &u32;
            let _41: &u8;
            let _42: &u8;
            let _55: &i8;
            let _56: &i8;
            let _65: &char;
            let _66: &char;
            let _75: &u32;
            let _76: &u32;
            let mut _87: &&str;
            let mut _88: &u32;
            let mut _89: &u32;
            let mut _90: &char;
            let mut _91: &char;
            let mut _92: &i8;
            let mut _93: &u8;
            let mut _94: &u32;
            let mut _95: &u32;
            scope 5 {
                debug left_val => _17;
                debug right_val => _18;
                let _23: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _23;
                }
            }
            scope 7 {
                debug left_val => _28;
                debug right_val => _29;
                let _34: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _34;
                }
            }
            scope 9 {
                debug left_val => _41;
                debug right_val => _42;
                let _47: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _47;
                }
            }
            scope 11 {
                debug left_val => _55;
                debug right_val => _56;
                let _61: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _61;
                }
            }
            scope 13 {
                debug left_val => _65;
                debug right_val => _66;
                let _71: core::panicking::AssertKind;
                scope 14 {
                    debug kind => _71;
                }
            }
            scope 15 {
                debug left_val => _75;
                debug right_val => _76;
                let _81: core::panicking::AssertKind;
                scope 16 {
                    debug kind => _81;
                }
            }
            scope 17 {
                debug x => const _;
                let mut _84: *const &str;
                scope 18 {
                    debug y => _84;
                }
            }
        }
    }

    bb0: {
        _1 = const 'Q' as isize (IntToInt);
        _3 = &_1;
        _96 = const _;
        _2 = (move _3, _96);
        _4 = (_2.0: &isize);
        _5 = (_2.1: &isize);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = assert_failed::<isize, isize>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb2: {
        _14 = _1;
        _13 = move _14 as u32 (IntToInt);
        _16 = &_13;
        _95 = const _;
        _15 = (move _16, _95);
        _17 = (_15.0: &u32);
        _18 = (_15.1: &u32);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = assert_failed::<u32, u32>(move _23, _17, _18, move _25) -> unwind continue;
    }

    bb4: {
        _27 = &_13;
        _94 = const _;
        _26 = (move _27, _94);
        _28 = (_26.0: &u32);
        _29 = (_26.1: &u32);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = assert_failed::<u32, u32>(move _34, _28, _29, move _36) -> unwind continue;
    }

    bb6: {
        _40 = _1;
        _39 = move _40 as u8 (IntToInt);
        _38 = &_39;
        _93 = const _;
        _37 = (move _38, _93);
        _41 = (_37.0: &u8);
        _42 = (_37.1: &u8);
        _45 = (*_41);
        _46 = (*_42);
        _44 = Eq(move _45, move _46);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = assert_failed::<u8, u8>(move _47, _41, _42, move _49) -> unwind continue;
    }

    bb8: {
        _54 = _1;
        _53 = move _54 as u8 (IntToInt);
        _52 = move _53 as i8 (IntToInt);
        _51 = &_52;
        _92 = const _;
        _50 = (move _51, _92);
        _55 = (_50.0: &i8);
        _56 = (_50.1: &i8);
        _59 = (*_55);
        _60 = (*_56);
        _58 = Eq(move _59, move _60);
        _57 = Not(move _58);
        switchInt(move _57) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _61 = core::panicking::AssertKind::Eq;
        _63 = Option::<Arguments<'_>>::None;
        _62 = assert_failed::<i8, i8>(move _61, _55, _56, move _63) -> unwind continue;
    }

    bb10: {
        _91 = const _;
        _90 = const _;
        _64 = (_91, _90);
        _65 = (_64.0: &char);
        _66 = (_64.1: &char);
        _69 = (*_65);
        _70 = (*_66);
        _68 = Eq(move _69, move _70);
        _67 = Not(move _68);
        switchInt(move _67) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _71 = core::panicking::AssertKind::Eq;
        _73 = Option::<Arguments<'_>>::None;
        _72 = assert_failed::<char, char>(move _71, _65, _66, move _73) -> unwind continue;
    }

    bb12: {
        _89 = const _;
        _88 = const _;
        _74 = (_89, _88);
        _75 = (_74.0: &u32);
        _76 = (_74.1: &u32);
        _79 = (*_75);
        _80 = (*_76);
        _78 = Eq(move _79, move _80);
        _77 = Not(move _78);
        switchInt(move _77) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _81 = core::panicking::AssertKind::Eq;
        _83 = Option::<Arguments<'_>>::None;
        _82 = assert_failed::<u32, u32>(move _81, _75, _76, move _83) -> unwind continue;
    }

    bb14: {
        _87 = const _;
        _85 = &raw const (*_87);
        _84 = _85;
        _86 = null_mut::<&str>() -> [return: bb15, unwind continue];
    }

    bb15: {
        _84 = move _86 as *const &str (Pointer(MutToConstPointer));
        return;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "hello";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const false as u32 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 0_u32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 'Q';
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 81_u8 as char (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;
    let mut _2: u8;

    bb0: {
        _2 = const 'Q' as u8 (IntToInt);
        _1 = move _2 as i8 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 'Q' as u8 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 'Q' as u32 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 81_u32;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 81_isize;
        _0 = &_1;
        return;
    }
}
