// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn pad() -> usize {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

const ONE: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn b::pad() -> usize {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

static THREE: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const _, const _);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn a::pad() -> usize {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

const TWO: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const _, const _);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let _2: &usize;
    let _3: &usize;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&usize, &usize);
    let _12: &usize;
    let _13: &usize;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: usize;
    let mut _17: usize;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&usize, &usize);
    let _22: &usize;
    let _23: &usize;
    let _24: &usize;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: usize;
    let mut _28: usize;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: &usize;
    let mut _33: &usize;
    let mut _34: &usize;
    let mut _35: &usize;
    let mut _36: &usize;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _12;
        debug right_val => _13;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug left_val => _23;
        debug right_val => _24;
        let _29: core::panicking::AssertKind;
        scope 6 {
            debug kind => _29;
        }
    }

    bb0: {
        _36 = const _;
        _35 = const _;
        _1 = (_36, _35);
        _2 = (_1.0: &usize);
        _3 = (_1.1: &usize);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<usize, usize>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        _34 = const _;
        _33 = const _;
        _11 = (_34, _33);
        _12 = (_11.0: &usize);
        _13 = (_11.1: &usize);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<usize, usize>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb4: {
        _22 = const {alloc1: &usize};
        _32 = const _;
        _21 = (_22, _32);
        _23 = (_21.0: &usize);
        _24 = (_21.1: &usize);
        _27 = (*_23);
        _28 = (*_24);
        _26 = Eq(move _27, move _28);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<usize, usize>(move _29, _23, _24, move _31) -> unwind continue;
    }

    bb6: {
        return;
    }
}

alloc1 (static: THREE, size: 8, align: 8) {
    03 00 00 00 00 00 00 00                         â”‚ ........
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}
