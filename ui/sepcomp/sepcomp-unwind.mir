// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn pad() -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/sepcomp/sepcomp-unwind.rs:19:13: 19:18

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/sepcomp/sepcomp-unwind.rs:19:21: 19:22
        return;                          // scope 0 at ui/sepcomp/sepcomp-unwind.rs:19:24: 19:24
    }
}

fn f() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/sepcomp/sepcomp-unwind.rs:22:16: 22:16
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _1 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn g() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/sepcomp/sepcomp-unwind.rs:28:16: 28:16
    let _1: ();                          // in scope 0 at ui/sepcomp/sepcomp-unwind.rs:29:9: 29:17

    bb0: {
        _1 = f() -> bb1;                 // scope 0 at ui/sepcomp/sepcomp-unwind.rs:29:9: 29:17
                                         // mir::Constant
                                         // + span: ui/sepcomp/sepcomp-unwind.rs:29:9: 29:15
                                         // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/sepcomp/sepcomp-unwind.rs:30:6: 30:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/sepcomp/sepcomp-unwind.rs:33:11: 33:11
    let _1: std::boxed::Box<dyn std::any::Any + std::marker::Send>; // in scope 0 at ui/sepcomp/sepcomp-unwind.rs:34:5: 34:59
    let mut _2: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/sepcomp/sepcomp-unwind.rs:34:5: 34:46
    let mut _3: std::thread::JoinHandle<()>; // in scope 0 at ui/sepcomp/sepcomp-unwind.rs:34:5: 34:39
    let mut _4: [closure@ui/sepcomp/sepcomp-unwind.rs:34:19: 34:25]; // in scope 0 at ui/sepcomp/sepcomp-unwind.rs:34:19: 34:38

    bb0: {
        _3 = spawn::<[closure@ui/sepcomp/sepcomp-unwind.rs:34:19: 34:25], ()>(move _4) -> bb1; // scope 0 at ui/sepcomp/sepcomp-unwind.rs:34:5: 34:39
                                         // mir::Constant
                                         // + span: ui/sepcomp/sepcomp-unwind.rs:34:5: 34:18
                                         // + literal: Const { ty: fn([closure@ui/sepcomp/sepcomp-unwind.rs:34:19: 34:25]) -> JoinHandle<()> {spawn::<[closure@ui/sepcomp/sepcomp-unwind.rs:34:19: 34:25], ()>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = JoinHandle::<()>::join(move _3) -> bb2; // scope 0 at ui/sepcomp/sepcomp-unwind.rs:34:5: 34:46
                                         // mir::Constant
                                         // + span: ui/sepcomp/sepcomp-unwind.rs:34:40: 34:44
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = Result::<(), Box<dyn Any + Send>>::unwrap_err(move _2) -> bb3; // scope 0 at ui/sepcomp/sepcomp-unwind.rs:34:5: 34:59
                                         // mir::Constant
                                         // + span: ui/sepcomp/sepcomp-unwind.rs:34:47: 34:57
                                         // + literal: Const { ty: fn(Result<(), Box<dyn Any + Send>>) -> Box<dyn Any + Send> {Result::<(), Box<dyn Any + Send>>::unwrap_err}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/sepcomp/sepcomp-unwind.rs:34:59: 34:60
    }

    bb4: {
        return;                          // scope 0 at ui/sepcomp/sepcomp-unwind.rs:35:2: 35:2
    }
}

fn main::{closure#0}(_1: [closure@ui/sepcomp/sepcomp-unwind.rs:34:19: 34:25]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/sepcomp/sepcomp-unwind.rs:34:26: 34:26

    bb0: {
        _0 = g() -> bb1;                 // scope 0 at ui/sepcomp/sepcomp-unwind.rs:34:28: 34:36
                                         // mir::Constant
                                         // + span: ui/sepcomp/sepcomp-unwind.rs:34:28: 34:34
                                         // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/sepcomp/sepcomp-unwind.rs:34:38: 34:38
    }
}
