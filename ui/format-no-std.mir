// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn start(_1: isize, _2: *const *const u8) -> isize {
    debug _argc => _1;
    debug _argv => _2;
    let mut _0: isize;
    let _3: other::string::String;
    let _4: other::string::String;
    let mut _5: core::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 0];
    let _9: [core::fmt::rt::Argument<'_>; 0];
    let mut _10: (&other::string::String, &other::string::String);
    let mut _11: &other::string::String;
    let mut _12: &other::string::String;
    let _13: other::string::String;
    let _14: &str;
    let mut _17: bool;
    let mut _18: bool;
    let _20: !;
    let mut _21: core::option::Option<core::fmt::Arguments<'_>>;
    let mut _24: core::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let mut _26: (&other::string::String, &other::string::String);
    let mut _27: &other::string::String;
    let mut _28: &other::string::String;
    let _29: other::string::String;
    let _30: &str;
    let mut _33: bool;
    let mut _34: bool;
    let _36: !;
    let mut _37: core::option::Option<core::fmt::Arguments<'_>>;
    let mut _40: core::fmt::Arguments<'_>;
    let mut _41: &[&str];
    let mut _42: &[core::fmt::rt::Argument<'_>];
    let _43: &[core::fmt::rt::Argument<'_>; 0];
    let _44: [core::fmt::rt::Argument<'_>; 0];
    let mut _45: (&other::string::String, &other::string::String);
    let mut _46: &other::string::String;
    let mut _47: &other::string::String;
    let _48: other::string::String;
    let _49: &str;
    let mut _52: bool;
    let mut _53: bool;
    let _55: !;
    let mut _56: core::option::Option<core::fmt::Arguments<'_>>;
    let mut _59: core::fmt::Arguments<'_>;
    let mut _60: &[&str];
    let mut _61: &[core::fmt::rt::Argument<'_>];
    let _62: &[core::fmt::rt::Argument<'_>; 0];
    let _63: [core::fmt::rt::Argument<'_>; 0];
    let mut _64: (&other::string::String, &other::string::String);
    let mut _65: &other::string::String;
    let mut _66: &other::string::String;
    let _67: other::string::String;
    let _68: &str;
    let mut _71: bool;
    let mut _72: bool;
    let _74: !;
    let mut _75: core::option::Option<core::fmt::Arguments<'_>>;
    let mut _79: &[&str; 1];
    scope 1 {
        debug s => _3;
        let _15: &other::string::String;
        let _16: &other::string::String;
        let _22: other::string::String;
        let _23: other::string::String;
        let mut _78: &[&str; 1];
        scope 3 {
            debug left_val => _15;
            debug right_val => _16;
            let _19: core::panicking::AssertKind;
            scope 4 {
                debug kind => _19;
            }
        }
        scope 5 {
            debug s => _22;
            let _31: &other::string::String;
            let _32: &other::string::String;
            let _38: other::string::String;
            let _39: other::string::String;
            let mut _77: &[&str; 1];
            scope 7 {
                debug left_val => _31;
                debug right_val => _32;
                let _35: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _35;
                }
            }
            scope 9 {
                debug s => _38;
                let _50: &other::string::String;
                let _51: &other::string::String;
                let _57: other::string::String;
                let _58: other::string::String;
                let mut _76: &[&str; 1];
                scope 11 {
                    debug left_val => _50;
                    debug right_val => _51;
                    let _54: core::panicking::AssertKind;
                    scope 12 {
                        debug kind => _54;
                    }
                }
                scope 13 {
                    debug s => _57;
                    let _69: &other::string::String;
                    let _70: &other::string::String;
                    scope 15 {
                        debug left_val => _69;
                        debug right_val => _70;
                        let _73: core::panicking::AssertKind;
                        scope 16 {
                            debug kind => _73;
                        }
                    }
                }
                scope 14 {
                    debug res => _58;
                }
            }
            scope 10 {
                debug res => _39;
            }
        }
        scope 6 {
            debug res => _23;
        }
    }
    scope 2 {
        debug res => _4;
    }

    bb0: {
        _79 = const _;
        _6 = _79 as &[&str] (Pointer(Unsize));
        _9 = core::fmt::rt::Argument::<'_>::none() -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = format(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _3 = move _4;
        _11 = &_3;
        _14 = const "1";
        _13 = <str as ToString>::to_string(_14) -> [return: bb4, unwind: bb43];
    }

    bb4: {
        _12 = &_13;
        _10 = (move _11, move _12);
        _15 = (_10.0: &other::string::String);
        _16 = (_10.1: &other::string::String);
        _18 = <String as PartialEq>::eq(_15, _16) -> [return: bb5, unwind: bb42];
    }

    bb5: {
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _19 = core::panicking::AssertKind::Eq;
        _21 = Option::<Arguments<'_>>::None;
        _20 = assert_failed::<String, String>(move _19, _15, _16, move _21) -> bb42;
    }

    bb7: {
        drop(_13) -> [return: bb8, unwind: bb43];
    }

    bb8: {
        _78 = const _;
        _25 = _78 as &[&str] (Pointer(Unsize));
        _24 = Arguments::<'_>::new_const(move _25) -> [return: bb9, unwind: bb43];
    }

    bb9: {
        _23 = format(move _24) -> [return: bb10, unwind: bb43];
    }

    bb10: {
        _22 = move _23;
        _27 = &_22;
        _30 = const "test";
        _29 = <str as ToString>::to_string(_30) -> [return: bb11, unwind: bb41];
    }

    bb11: {
        _28 = &_29;
        _26 = (move _27, move _28);
        _31 = (_26.0: &other::string::String);
        _32 = (_26.1: &other::string::String);
        _34 = <String as PartialEq>::eq(_31, _32) -> [return: bb12, unwind: bb40];
    }

    bb12: {
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = assert_failed::<String, String>(move _35, _31, _32, move _37) -> bb40;
    }

    bb14: {
        drop(_29) -> [return: bb15, unwind: bb41];
    }

    bb15: {
        _77 = const _;
        _41 = _77 as &[&str] (Pointer(Unsize));
        _44 = core::fmt::rt::Argument::<'_>::none() -> [return: bb16, unwind: bb41];
    }

    bb16: {
        _43 = &_44;
        _42 = _43 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _40 = Arguments::<'_>::new_v1(move _41, move _42) -> [return: bb17, unwind: bb41];
    }

    bb17: {
        _39 = format(move _40) -> [return: bb18, unwind: bb41];
    }

    bb18: {
        _38 = move _39;
        _46 = &_38;
        _49 = const "3";
        _48 = <str as ToString>::to_string(_49) -> [return: bb19, unwind: bb39];
    }

    bb19: {
        _47 = &_48;
        _45 = (move _46, move _47);
        _50 = (_45.0: &other::string::String);
        _51 = (_45.1: &other::string::String);
        _53 = <String as PartialEq>::eq(_50, _51) -> [return: bb20, unwind: bb38];
    }

    bb20: {
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = assert_failed::<String, String>(move _54, _50, _51, move _56) -> bb38;
    }

    bb22: {
        drop(_48) -> [return: bb23, unwind: bb39];
    }

    bb23: {
        _76 = const _;
        _60 = _76 as &[&str] (Pointer(Unsize));
        _63 = core::fmt::rt::Argument::<'_>::none() -> [return: bb24, unwind: bb39];
    }

    bb24: {
        _62 = &_63;
        _61 = _62 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _59 = Arguments::<'_>::new_v1(move _60, move _61) -> [return: bb25, unwind: bb39];
    }

    bb25: {
        _58 = format(move _59) -> [return: bb26, unwind: bb39];
    }

    bb26: {
        _57 = move _58;
        _65 = &_57;
        _68 = const "hello world";
        _67 = <str as ToString>::to_string(_68) -> [return: bb27, unwind: bb37];
    }

    bb27: {
        _66 = &_67;
        _64 = (move _65, move _66);
        _69 = (_64.0: &other::string::String);
        _70 = (_64.1: &other::string::String);
        _72 = <String as PartialEq>::eq(_69, _70) -> [return: bb28, unwind: bb36];
    }

    bb28: {
        _71 = Not(move _72);
        switchInt(move _71) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _73 = core::panicking::AssertKind::Eq;
        _75 = Option::<Arguments<'_>>::None;
        _74 = assert_failed::<String, String>(move _73, _69, _70, move _75) -> bb36;
    }

    bb30: {
        drop(_67) -> [return: bb31, unwind: bb37];
    }

    bb31: {
        _0 = const 0_isize;
        drop(_57) -> [return: bb32, unwind: bb39];
    }

    bb32: {
        drop(_38) -> [return: bb33, unwind: bb41];
    }

    bb33: {
        drop(_22) -> [return: bb34, unwind: bb43];
    }

    bb34: {
        drop(_3) -> [return: bb35, unwind continue];
    }

    bb35: {
        return;
    }

    bb36 (cleanup): {
        drop(_67) -> [return: bb37, unwind terminate];
    }

    bb37 (cleanup): {
        drop(_57) -> [return: bb39, unwind terminate];
    }

    bb38 (cleanup): {
        drop(_48) -> [return: bb39, unwind terminate];
    }

    bb39 (cleanup): {
        drop(_38) -> [return: bb41, unwind terminate];
    }

    bb40 (cleanup): {
        drop(_29) -> [return: bb41, unwind terminate];
    }

    bb41 (cleanup): {
        drop(_22) -> [return: bb43, unwind terminate];
    }

    bb42 (cleanup): {
        drop(_13) -> [return: bb43, unwind terminate];
    }

    bb43 (cleanup): {
        drop(_3) -> [return: bb44, unwind terminate];
    }

    bb44 (cleanup): {
        resume;
    }
}

promoted[0] in start: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "hello world"];
        _0 = &_1;
        return;
    }
}

promoted[1] in start: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "3"];
        _0 = &_1;
        return;
    }
}

promoted[2] in start: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "test"];
        _0 = &_1;
        return;
    }
}

promoted[3] in start: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "1"];
        _0 = &_1;
        return;
    }
}
