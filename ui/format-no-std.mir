// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn start(_1: isize, _2: *const *const u8) -> isize {
    debug _argc => _1;                   // in scope 0 at ui/format-no-std.rs:14:10: 14:15
    debug _argv => _2;                   // in scope 0 at ui/format-no-std.rs:14:24: 14:29
    let mut _0: isize;                   // return place in scope 0 at ui/format-no-std.rs:14:52: 14:57
    let _3: other::string::String;       // in scope 0 at ui/format-no-std.rs:15:9: 15:10
    let _4: other::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _5: core::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _6: &[&str];                 // in scope 0 at ui/format-no-std.rs:15:21: 15:25
    let mut _7: &[&str; 1];              // in scope 0 at ui/format-no-std.rs:15:21: 15:25
    let _8: &[&str; 1];                  // in scope 0 at ui/format-no-std.rs:15:21: 15:25
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/format-no-std.rs:15:27: 15:34
    let mut _14: &isize;                 // in scope 0 at ui/format-no-std.rs:15:27: 15:34
    let _15: &isize;                     // in scope 0 at ui/format-no-std.rs:15:27: 15:34
    let mut _16: (&other::string::String, &other::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _17: &other::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _18: &other::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _19: other::string::String;      // in scope 0 at ui/format-no-std.rs:16:19: 16:34
    let mut _20: &str;                   // in scope 0 at ui/format-no-std.rs:16:19: 16:34
    let _21: &str;                       // in scope 0 at ui/format-no-std.rs:16:19: 16:22
    let mut _24: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _26: &other::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _27: &other::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _29: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _30: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _31: &other::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _32: &other::string::String;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _33: &other::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _34: &other::string::String;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _35: core::option::Option<core::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _38: core::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _39: &[&str];                // in scope 0 at ui/format-no-std.rs:18:21: 18:27
    let mut _40: &[&str; 1];             // in scope 0 at ui/format-no-std.rs:18:21: 18:27
    let _41: &[&str; 1];                 // in scope 0 at ui/format-no-std.rs:18:21: 18:27
    let mut _42: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _43: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _44: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _45: (&other::string::String, &other::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _46: &other::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _47: &other::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _48: other::string::String;      // in scope 0 at ui/format-no-std.rs:19:19: 19:37
    let mut _49: &str;                   // in scope 0 at ui/format-no-std.rs:19:19: 19:37
    let _50: &str;                       // in scope 0 at ui/format-no-std.rs:19:19: 19:25
    let mut _53: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _54: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _55: &other::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _56: &other::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _58: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _59: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _60: &other::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _61: &other::string::String;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _62: &other::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _63: &other::string::String;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _64: core::option::Option<core::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _67: core::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _68: &[&str];                // in scope 0 at ui/format-no-std.rs:21:21: 21:29
    let mut _69: &[&str; 1];             // in scope 0 at ui/format-no-std.rs:21:21: 21:29
    let _70: &[&str; 1];                 // in scope 0 at ui/format-no-std.rs:21:21: 21:29
    let mut _71: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _72: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _73: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _74: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _75: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/format-no-std.rs:21:36: 21:43
    let mut _76: &isize;                 // in scope 0 at ui/format-no-std.rs:21:36: 21:43
    let _77: &isize;                     // in scope 0 at ui/format-no-std.rs:21:36: 21:43
    let mut _78: (&other::string::String, &other::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _79: &other::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _80: &other::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _81: other::string::String;      // in scope 0 at ui/format-no-std.rs:22:19: 22:34
    let mut _82: &str;                   // in scope 0 at ui/format-no-std.rs:22:19: 22:34
    let _83: &str;                       // in scope 0 at ui/format-no-std.rs:22:19: 22:22
    let mut _86: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _87: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _88: &other::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _89: &other::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _91: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _92: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _93: &other::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _94: &other::string::String;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _95: &other::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _96: &other::string::String;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _97: core::option::Option<core::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _100: core::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _101: &[&str];               // in scope 0 at ui/format-no-std.rs:24:21: 24:31
    let mut _102: &[&str; 1];            // in scope 0 at ui/format-no-std.rs:24:21: 24:31
    let _103: &[&str; 1];                // in scope 0 at ui/format-no-std.rs:24:21: 24:31
    let mut _104: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _105: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _106: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _107: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _108: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/format-no-std.rs:24:33: 24:40
    let mut _109: &&str;                 // in scope 0 at ui/format-no-std.rs:24:33: 24:40
    let _110: &&str;                     // in scope 0 at ui/format-no-std.rs:24:33: 24:40
    let mut _111: (&other::string::String, &other::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _112: &other::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _113: &other::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _114: other::string::String;     // in scope 0 at ui/format-no-std.rs:25:19: 25:44
    let mut _115: &str;                  // in scope 0 at ui/format-no-std.rs:25:19: 25:44
    let _116: &str;                      // in scope 0 at ui/format-no-std.rs:25:19: 25:32
    let mut _119: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _120: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _121: &other::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _122: &other::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _124: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _125: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _126: &other::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _127: &other::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _128: &other::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _129: &other::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _130: core::option::Option<core::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _137: &isize;                // in scope 0 at ui/format-no-std.rs:15:27: 15:34
    let mut _138: &[&str; 1];            // in scope 0 at ui/format-no-std.rs:15:21: 15:25
    scope 1 {
        debug s => _3;                   // in scope 1 at ui/format-no-std.rs:15:9: 15:10
        let _22: &other::string::String; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _23: &other::string::String; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _36: other::string::String;  // in scope 1 at ui/format-no-std.rs:18:9: 18:10
        let _37: other::string::String;  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
        let mut _135: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        let mut _136: &[&str; 1];        // in scope 1 at ui/format-no-std.rs:18:21: 18:27
        scope 3 {
            debug left_val => _22;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _23;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _28: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 4 {
                debug kind => _28;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 5 {
            debug s => _36;              // in scope 5 at ui/format-no-std.rs:18:9: 18:10
            let _51: &other::string::String; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _52: &other::string::String; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _65: other::string::String; // in scope 5 at ui/format-no-std.rs:21:9: 21:10
            let _66: other::string::String; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
            let mut _133: &isize;        // in scope 5 at ui/format-no-std.rs:21:36: 21:43
            let mut _134: &[&str; 1];    // in scope 5 at ui/format-no-std.rs:21:21: 21:29
            scope 7 {
                debug left_val => _51;   // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _52;  // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _57: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 8 {
                    debug kind => _57;   // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 9 {
                debug s => _65;          // in scope 9 at ui/format-no-std.rs:21:9: 21:10
                let _84: &other::string::String; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _85: &other::string::String; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _98: other::string::String; // in scope 9 at ui/format-no-std.rs:24:9: 24:10
                let _99: other::string::String; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                let mut _131: &&str;     // in scope 9 at ui/format-no-std.rs:24:33: 24:40
                let mut _132: &[&str; 1]; // in scope 9 at ui/format-no-std.rs:24:21: 24:31
                scope 11 {
                    debug left_val => _84; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _85; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _90: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 12 {
                        debug kind => _90; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 13 {
                    debug s => _98;      // in scope 13 at ui/format-no-std.rs:24:9: 24:10
                    let _117: &other::string::String; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _118: &other::string::String; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    scope 15 {
                        debug left_val => _117; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _118; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _123: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 16 {
                            debug kind => _123; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                }
                scope 14 {
                    debug res => _99;    // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                }
            }
            scope 10 {
                debug res => _66;        // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
            }
        }
        scope 6 {
            debug res => _37;            // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
        }
    }
    scope 2 {
        debug res => _4;                 // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }

    bb0: {
        _138 = const _;                  // scope 0 at ui/format-no-std.rs:15:21: 15:25
                                         // mir::Constant
                                         // + span: ui/format-no-std.rs:15:21: 15:25
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(start, [], Some(promoted[7])) }
        _8 = _138;                       // scope 0 at ui/format-no-std.rs:15:21: 15:25
        _7 = _8;                         // scope 0 at ui/format-no-std.rs:15:21: 15:25
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 0 at ui/format-no-std.rs:15:21: 15:25
        _137 = const _;                  // scope 0 at ui/format-no-std.rs:15:27: 15:34
                                         // mir::Constant
                                         // + span: ui/format-no-std.rs:15:27: 15:34
                                         // + literal: Const { ty: &isize, val: Unevaluated(start, [], Some(promoted[6])) }
        _15 = _137;                      // scope 0 at ui/format-no-std.rs:15:27: 15:34
        _14 = _15;                       // scope 0 at ui/format-no-std.rs:15:27: 15:34
        _13 = ArgumentV1::<'_>::new_display::<isize>(move _14) -> bb1; // scope 0 at ui/format-no-std.rs:15:27: 15:34
                                         // mir::Constant
                                         // + span: ui/format-no-std.rs:15:27: 15:34
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> ArgumentV1<'b> {ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = [move _13];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _11 = &_12;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _10 = _11;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = format(move _5) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = move _4;                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _17 = &_3;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _21 = const "1";                 // scope 1 at ui/format-no-std.rs:16:19: 16:22
                                         // mir::Constant
                                         // + span: ui/format-no-std.rs:16:19: 16:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _20 = _21;                       // scope 1 at ui/format-no-std.rs:16:19: 16:34
        _19 = <str as ToString>::to_string(move _20) -> [return: bb4, unwind: bb43]; // scope 1 at ui/format-no-std.rs:16:19: 16:34
                                         // mir::Constant
                                         // + span: ui/format-no-std.rs:16:23: 16:32
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb4: {
        _18 = &_19;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _16 = (move _17, move _18);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _22 = (_16.0: &other::string::String); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _23 = (_16.1: &other::string::String); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _26 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _27 = _23;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _25 = <String as PartialEq>::eq(move _26, move _27) -> [return: bb5, unwind: bb42]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _24 = Not(move _25);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _24) -> [0: bb7, otherwise: bb6]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _28 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _30 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _32 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _31 = _32;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _33 = _34;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _35 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _29 = assert_failed::<String, String>(move _30, move _31, move _33, move _35) -> bb42; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb7: {
        drop(_19) -> [return: bb8, unwind: bb43]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb8: {
        _136 = const _;                  // scope 1 at ui/format-no-std.rs:18:21: 18:27
                                         // mir::Constant
                                         // + span: ui/format-no-std.rs:18:21: 18:27
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(start, [], Some(promoted[5])) }
        _41 = _136;                      // scope 1 at ui/format-no-std.rs:18:21: 18:27
        _40 = _41;                       // scope 1 at ui/format-no-std.rs:18:21: 18:27
        _39 = move _40 as &[&str] (Pointer(Unsize)); // scope 1 at ui/format-no-std.rs:18:21: 18:27
        _135 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: &[ArgumentV1<'_>; 0], val: Unevaluated(start, [], Some(promoted[4])) }
        _44 = _135;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _43 = _44;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _42 = move _43 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _38 = Arguments::<'_>::new_v1(move _39, move _42) -> [return: bb9, unwind: bb43]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _37 = format(move _38) -> [return: bb10, unwind: bb43]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb10: {
        _36 = move _37;                  // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _46 = &_36;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _50 = const "test";              // scope 5 at ui/format-no-std.rs:19:19: 19:25
                                         // mir::Constant
                                         // + span: ui/format-no-std.rs:19:19: 19:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _49 = _50;                       // scope 5 at ui/format-no-std.rs:19:19: 19:37
        _48 = <str as ToString>::to_string(move _49) -> [return: bb11, unwind: bb41]; // scope 5 at ui/format-no-std.rs:19:19: 19:37
                                         // mir::Constant
                                         // + span: ui/format-no-std.rs:19:26: 19:35
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb11: {
        _47 = &_48;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _45 = (move _46, move _47);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _51 = (_45.0: &other::string::String); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _52 = (_45.1: &other::string::String); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _55 = _51;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _56 = _52;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _54 = <String as PartialEq>::eq(move _55, move _56) -> [return: bb12, unwind: bb40]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb12: {
        _53 = Not(move _54);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _53) -> [0: bb14, otherwise: bb13]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb13: {
        _57 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _59 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _61 = _51;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _60 = _61;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _63 = _52;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _62 = _63;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _64 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _58 = assert_failed::<String, String>(move _59, move _60, move _62, move _64) -> bb40; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb14: {
        drop(_48) -> [return: bb15, unwind: bb41]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb15: {
        _134 = const _;                  // scope 5 at ui/format-no-std.rs:21:21: 21:29
                                         // mir::Constant
                                         // + span: ui/format-no-std.rs:21:21: 21:29
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(start, [], Some(promoted[3])) }
        _70 = _134;                      // scope 5 at ui/format-no-std.rs:21:21: 21:29
        _69 = _70;                       // scope 5 at ui/format-no-std.rs:21:21: 21:29
        _68 = move _69 as &[&str] (Pointer(Unsize)); // scope 5 at ui/format-no-std.rs:21:21: 21:29
        _133 = const _;                  // scope 5 at ui/format-no-std.rs:21:36: 21:43
                                         // mir::Constant
                                         // + span: ui/format-no-std.rs:21:36: 21:43
                                         // + literal: Const { ty: &isize, val: Unevaluated(start, [], Some(promoted[2])) }
        _77 = _133;                      // scope 5 at ui/format-no-std.rs:21:36: 21:43
        _76 = _77;                       // scope 5 at ui/format-no-std.rs:21:36: 21:43
        _75 = ArgumentV1::<'_>::new_display::<isize>(move _76) -> [return: bb16, unwind: bb41]; // scope 5 at ui/format-no-std.rs:21:36: 21:43
                                         // mir::Constant
                                         // + span: ui/format-no-std.rs:21:36: 21:43
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> ArgumentV1<'b> {ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb16: {
        _74 = [move _75];                // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _73 = &_74;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _72 = _73;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _71 = move _72 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _67 = Arguments::<'_>::new_v1(move _68, move _71) -> [return: bb17, unwind: bb41]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb17: {
        _66 = format(move _67) -> [return: bb18, unwind: bb41]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb18: {
        _65 = move _66;                  // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _79 = &_65;                      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _83 = const "3";                 // scope 9 at ui/format-no-std.rs:22:19: 22:22
                                         // mir::Constant
                                         // + span: ui/format-no-std.rs:22:19: 22:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _82 = _83;                       // scope 9 at ui/format-no-std.rs:22:19: 22:34
        _81 = <str as ToString>::to_string(move _82) -> [return: bb19, unwind: bb39]; // scope 9 at ui/format-no-std.rs:22:19: 22:34
                                         // mir::Constant
                                         // + span: ui/format-no-std.rs:22:23: 22:32
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb19: {
        _80 = &_81;                      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _78 = (move _79, move _80);      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _84 = (_78.0: &other::string::String); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _85 = (_78.1: &other::string::String); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _88 = _84;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _89 = _85;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _87 = <String as PartialEq>::eq(move _88, move _89) -> [return: bb20, unwind: bb38]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb20: {
        _86 = Not(move _87);             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _86) -> [0: bb22, otherwise: bb21]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb21: {
        _90 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _92 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _94 = _84;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _93 = _94;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _96 = _85;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _95 = _96;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _97 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _91 = assert_failed::<String, String>(move _92, move _93, move _95, move _97) -> bb38; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb22: {
        drop(_81) -> [return: bb23, unwind: bb39]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb23: {
        _132 = const _;                  // scope 9 at ui/format-no-std.rs:24:21: 24:31
                                         // mir::Constant
                                         // + span: ui/format-no-std.rs:24:21: 24:31
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(start, [], Some(promoted[1])) }
        _103 = _132;                     // scope 9 at ui/format-no-std.rs:24:21: 24:31
        _102 = _103;                     // scope 9 at ui/format-no-std.rs:24:21: 24:31
        _101 = move _102 as &[&str] (Pointer(Unsize)); // scope 9 at ui/format-no-std.rs:24:21: 24:31
        _131 = const _;                  // scope 9 at ui/format-no-std.rs:24:33: 24:40
                                         // mir::Constant
                                         // + span: ui/format-no-std.rs:24:33: 24:40
                                         // + literal: Const { ty: &&str, val: Unevaluated(start, [], Some(promoted[0])) }
        _110 = _131;                     // scope 9 at ui/format-no-std.rs:24:33: 24:40
        _109 = _110;                     // scope 9 at ui/format-no-std.rs:24:33: 24:40
        _108 = ArgumentV1::<'_>::new_display::<&str>(move _109) -> [return: bb24, unwind: bb39]; // scope 9 at ui/format-no-std.rs:24:33: 24:40
                                         // mir::Constant
                                         // + span: ui/format-no-std.rs:24:33: 24:40
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> ArgumentV1<'b> {ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb24: {
        _107 = [move _108];              // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _106 = &_107;                    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _105 = _106;                     // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _104 = move _105 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _100 = Arguments::<'_>::new_v1(move _101, move _104) -> [return: bb25, unwind: bb39]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(&[&'static str], &[ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb25: {
        _99 = format(move _100) -> [return: bb26, unwind: bb39]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb26: {
        _98 = move _99;                  // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _112 = &_98;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _116 = const "hello world";      // scope 13 at ui/format-no-std.rs:25:19: 25:32
                                         // mir::Constant
                                         // + span: ui/format-no-std.rs:25:19: 25:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _115 = _116;                     // scope 13 at ui/format-no-std.rs:25:19: 25:44
        _114 = <str as ToString>::to_string(move _115) -> [return: bb27, unwind: bb37]; // scope 13 at ui/format-no-std.rs:25:19: 25:44
                                         // mir::Constant
                                         // + span: ui/format-no-std.rs:25:33: 25:42
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb27: {
        _113 = &_114;                    // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _111 = (move _112, move _113);   // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _117 = (_111.0: &other::string::String); // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _118 = (_111.1: &other::string::String); // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _121 = _117;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _122 = _118;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _120 = <String as PartialEq>::eq(move _121, move _122) -> [return: bb28, unwind: bb36]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb28: {
        _119 = Not(move _120);           // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _119) -> [0: bb30, otherwise: bb29]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb29: {
        _123 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _125 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _127 = _117;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _126 = _127;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _129 = _118;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _128 = _129;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _130 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _124 = assert_failed::<String, String>(move _125, move _126, move _128, move _130) -> bb36; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb30: {
        drop(_114) -> [return: bb31, unwind: bb37]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb31: {
        _0 = const 0_isize;              // scope 13 at ui/format-no-std.rs:27:5: 27:6
        drop(_98) -> [return: bb32, unwind: bb39]; // scope 9 at ui/format-no-std.rs:28:1: 28:2
    }

    bb32: {
        drop(_65) -> [return: bb33, unwind: bb41]; // scope 5 at ui/format-no-std.rs:28:1: 28:2
    }

    bb33: {
        drop(_36) -> [return: bb34, unwind: bb43]; // scope 1 at ui/format-no-std.rs:28:1: 28:2
    }

    bb34: {
        drop(_3) -> bb35;                // scope 0 at ui/format-no-std.rs:28:1: 28:2
    }

    bb35: {
        return;                          // scope 0 at ui/format-no-std.rs:28:2: 28:2
    }

    bb36 (cleanup): {
        drop(_114) -> bb37;              // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb37 (cleanup): {
        drop(_98) -> bb39;               // scope 9 at ui/format-no-std.rs:28:1: 28:2
    }

    bb38 (cleanup): {
        drop(_81) -> bb39;               // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb39 (cleanup): {
        drop(_65) -> bb41;               // scope 5 at ui/format-no-std.rs:28:1: 28:2
    }

    bb40 (cleanup): {
        drop(_48) -> bb41;               // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb41 (cleanup): {
        drop(_36) -> bb43;               // scope 1 at ui/format-no-std.rs:28:1: 28:2
    }

    bb42 (cleanup): {
        drop(_19) -> bb43;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb43 (cleanup): {
        drop(_3) -> bb44;                // scope 0 at ui/format-no-std.rs:28:1: 28:2
    }

    bb44 (cleanup): {
        resume;                          // scope 0 at ui/format-no-std.rs:14:1: 28:2
    }
}

promoted[0] in start: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/format-no-std.rs:24:33: 24:40
    let mut _1: &str;                    // in scope 0 at ui/format-no-std.rs:24:33: 24:40

    bb0: {
        _1 = const "world";              // scope 0 at ui/format-no-std.rs:24:33: 24:40
                                         // mir::Constant
                                         // + span: ui/format-no-std.rs:24:33: 24:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/format-no-std.rs:24:33: 24:40
        return;                          // scope 0 at ui/format-no-std.rs:24:33: 24:40
    }
}

promoted[1] in start: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/format-no-std.rs:24:21: 24:31
    let mut _1: [&str; 1];               // in scope 0 at ui/format-no-std.rs:24:21: 24:31

    bb0: {
        _1 = [const "hello "];           // scope 0 at ui/format-no-std.rs:24:21: 24:31
                                         // mir::Constant
                                         // + span: ui/format-no-std.rs:24:21: 24:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/format-no-std.rs:24:21: 24:31
        return;                          // scope 0 at ui/format-no-std.rs:24:21: 24:31
    }
}

promoted[2] in start: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at ui/format-no-std.rs:21:36: 21:43
    let mut _1: isize;                   // in scope 0 at ui/format-no-std.rs:21:36: 21:43

    bb0: {
        _1 = const 3_isize;              // scope 0 at ui/format-no-std.rs:21:36: 21:43
        _0 = &_1;                        // scope 0 at ui/format-no-std.rs:21:36: 21:43
        return;                          // scope 0 at ui/format-no-std.rs:21:36: 21:43
    }
}

promoted[3] in start: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/format-no-std.rs:21:21: 21:29
    let mut _1: [&str; 1];               // in scope 0 at ui/format-no-std.rs:21:21: 21:29

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/format-no-std.rs:21:21: 21:29
                                         // mir::Constant
                                         // + span: ui/format-no-std.rs:21:21: 21:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/format-no-std.rs:21:21: 21:29
        return;                          // scope 0 at ui/format-no-std.rs:21:21: 21:29
    }
}

promoted[4] in start: &[ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    }
}

promoted[5] in start: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/format-no-std.rs:18:21: 18:27
    let mut _1: [&str; 1];               // in scope 0 at ui/format-no-std.rs:18:21: 18:27

    bb0: {
        _1 = [const "test"];             // scope 0 at ui/format-no-std.rs:18:21: 18:27
                                         // mir::Constant
                                         // + span: ui/format-no-std.rs:18:21: 18:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/format-no-std.rs:18:21: 18:27
        return;                          // scope 0 at ui/format-no-std.rs:18:21: 18:27
    }
}

promoted[6] in start: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at ui/format-no-std.rs:15:27: 15:34
    let mut _1: isize;                   // in scope 0 at ui/format-no-std.rs:15:27: 15:34

    bb0: {
        _1 = const 1_isize;              // scope 0 at ui/format-no-std.rs:15:27: 15:34
        _0 = &_1;                        // scope 0 at ui/format-no-std.rs:15:27: 15:34
        return;                          // scope 0 at ui/format-no-std.rs:15:27: 15:34
    }
}

promoted[7] in start: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/format-no-std.rs:15:21: 15:25
    let mut _1: [&str; 1];               // in scope 0 at ui/format-no-std.rs:15:21: 15:25

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/format-no-std.rs:15:21: 15:25
                                         // mir::Constant
                                         // + span: ui/format-no-std.rs:15:21: 15:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/format-no-std.rs:15:21: 15:25
        return;                          // scope 0 at ui/format-no-std.rs:15:21: 15:25
    }
}
