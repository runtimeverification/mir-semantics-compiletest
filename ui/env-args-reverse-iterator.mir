// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn assert_reverse_iterator_for_program_arguments(_1: &str) -> () {
    debug program_name => _1;            // in scope 0 at ui/env-args-reverse-iterator.rs:8:50: 8:62
    let mut _0: ();                      // return place in scope 0 at ui/env-args-reverse-iterator.rs:8:70: 8:70
    let _2: std::vec::Vec<std::string::String>; // in scope 0 at ui/env-args-reverse-iterator.rs:9:9: 9:13
    let mut _3: std::iter::Rev<std::env::Args>; // in scope 0 at ui/env-args-reverse-iterator.rs:9:24: 9:36
    let mut _4: std::env::Args;          // in scope 0 at ui/env-args-reverse-iterator.rs:9:24: 9:30
    let mut _5: bool;                    // in scope 0 at ui/env-args-reverse-iterator.rs:11:5: 11:29
    let mut _6: bool;                    // in scope 0 at ui/env-args-reverse-iterator.rs:11:13: 11:28
    let mut _7: usize;                   // in scope 0 at ui/env-args-reverse-iterator.rs:11:13: 11:23
    let mut _8: &std::vec::Vec<std::string::String>; // in scope 0 at ui/env-args-reverse-iterator.rs:11:13: 11:23
    let mut _9: !;                       // in scope 0 at ui/env-args-reverse-iterator.rs:11:5: 11:29
    let mut _10: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _11: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _12: &std::string::String;       // in scope 0 at ui/env-args-reverse-iterator.rs:12:16: 12:23
    let mut _13: &std::vec::Vec<std::string::String>; // in scope 0 at ui/env-args-reverse-iterator.rs:12:16: 12:20
    let mut _14: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _17: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _19: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _20: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _22: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _23: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _24: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _25: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _26: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _27: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _29: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _30: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _31: &std::string::String;       // in scope 0 at ui/env-args-reverse-iterator.rs:13:16: 13:23
    let mut _32: &std::vec::Vec<std::string::String>; // in scope 0 at ui/env-args-reverse-iterator.rs:13:16: 13:20
    let mut _33: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _36: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _37: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _38: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _39: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _41: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _42: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _43: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _44: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _45: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _46: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _47: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _48: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _49: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _50: &std::string::String;       // in scope 0 at ui/env-args-reverse-iterator.rs:14:16: 14:23
    let mut _51: &std::vec::Vec<std::string::String>; // in scope 0 at ui/env-args-reverse-iterator.rs:14:16: 14:20
    let mut _52: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _55: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _56: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _57: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _58: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _60: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _61: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _62: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _63: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _64: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _65: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _67: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _68: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _69: &std::string::String;       // in scope 0 at ui/env-args-reverse-iterator.rs:15:16: 15:23
    let mut _70: &std::vec::Vec<std::string::String>; // in scope 0 at ui/env-args-reverse-iterator.rs:15:16: 15:20
    let mut _71: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _74: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _75: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _76: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _77: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _79: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _80: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _81: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _82: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _83: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _84: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _85: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _86: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _87: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _88: &[&str];                // in scope 0 at ui/env-args-reverse-iterator.rs:17:14: 17:22
    let mut _89: &[&str; 1];             // in scope 0 at ui/env-args-reverse-iterator.rs:17:14: 17:22
    let _90: &[&str; 1];                 // in scope 0 at ui/env-args-reverse-iterator.rs:17:14: 17:22
    let mut _91: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _92: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _93: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    scope 1 {
        debug args => _2;                // in scope 1 at ui/env-args-reverse-iterator.rs:9:9: 9:13
        let _15: &std::string::String;   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _16: &&str;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _34: &std::string::String;   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _35: &&str;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _53: &std::string::String;   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _54: &&str;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _72: &std::string::String;   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _73: &&str;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _94: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        let mut _95: &[&str; 1];         // in scope 1 at ui/env-args-reverse-iterator.rs:17:14: 17:22
        let mut _96: &&str;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _97: &&str;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _98: &&str;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _15;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _16;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _21: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _21;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug left_val => _34;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _35;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _40: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _40;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 6 {
            debug left_val => _53;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _54;      // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _59: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 7 {
                debug kind => _59;       // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 8 {
            debug left_val => _72;       // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _73;      // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _78: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 9 {
                debug kind => _78;       // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _4 = args() -> bb1;              // scope 0 at ui/env-args-reverse-iterator.rs:9:24: 9:30
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:9:24: 9:28
                                         // + literal: Const { ty: fn() -> Args {args}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <Args as Iterator>::rev(move _4) -> bb2; // scope 0 at ui/env-args-reverse-iterator.rs:9:24: 9:36
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:9:31: 9:34
                                         // + literal: Const { ty: fn(Args) -> Rev<Args> {<Args as Iterator>::rev}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = <Rev<Args> as Iterator>::collect::<Vec<String>>(move _3) -> bb3; // scope 0 at ui/env-args-reverse-iterator.rs:9:24: 9:46
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:9:37: 9:44
                                         // + literal: Const { ty: fn(Rev<Args>) -> Vec<String> {<Rev<Args> as Iterator>::collect::<Vec<String>>}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = &_2;                        // scope 1 at ui/env-args-reverse-iterator.rs:11:13: 11:23
        _7 = Vec::<String>::len(move _8) -> [return: bb4, unwind: bb26]; // scope 1 at ui/env-args-reverse-iterator.rs:11:13: 11:23
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:11:18: 11:21
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>) -> usize {Vec::<String>::len}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = Eq(move _7, const 4_usize); // scope 1 at ui/env-args-reverse-iterator.rs:11:13: 11:28
        _5 = Not(move _6);               // scope 1 at ui/env-args-reverse-iterator.rs:11:5: 11:29
        switchInt(move _5) -> [0: bb6, otherwise: bb5]; // scope 1 at ui/env-args-reverse-iterator.rs:11:5: 11:29
    }

    bb5: {
        _9 = core::panicking::panic(const "assertion failed: args.len() == 4") -> bb26; // scope 1 at ui/env-args-reverse-iterator.rs:11:5: 11:29
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:11:5: 11:29
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _13 = &_2;                       // scope 1 at ui/env-args-reverse-iterator.rs:12:16: 12:20
        _12 = <Vec<String> as Index<usize>>::index(move _13, const 0_usize) -> [return: bb7, unwind: bb26]; // scope 1 at ui/env-args-reverse-iterator.rs:12:16: 12:23
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:12:16: 12:23
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>, usize) -> &'a <Vec<String> as Index<usize>>::Output {<Vec<String> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = _12;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _98 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(assert_reverse_iterator_for_program_arguments, [], Some(promoted[4])) }
        _14 = _98;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _10 = (move _11, move _14);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _15 = (_10.0: &std::string::String); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _16 = (_10.1: &&str);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _19 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _20 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _18 = <String as PartialEq<&str>>::eq(move _19, move _20) -> [return: bb8, unwind: bb26]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _17 = Not(move _18);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _17) -> [0: bb10, otherwise: bb9]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _21 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _23 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _25 = _15;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _25;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _27 = _16;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = _27;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _28 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _22 = core::panicking::assert_failed::<String, &str>(move _23, move _24, move _26, move _28) -> bb26; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb10: {
        _32 = &_2;                       // scope 1 at ui/env-args-reverse-iterator.rs:13:16: 13:20
        _31 = <Vec<String> as Index<usize>>::index(move _32, const 1_usize) -> [return: bb11, unwind: bb26]; // scope 1 at ui/env-args-reverse-iterator.rs:13:16: 13:23
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:13:16: 13:23
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>, usize) -> &'a <Vec<String> as Index<usize>>::Output {<Vec<String> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb11: {
        _30 = _31;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _97 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(assert_reverse_iterator_for_program_arguments, [], Some(promoted[3])) }
        _33 = _97;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _29 = (move _30, move _33);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _34 = (_29.0: &std::string::String); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _35 = (_29.1: &&str);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _38 = _34;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _39 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _37 = <String as PartialEq<&str>>::eq(move _38, move _39) -> [return: bb12, unwind: bb26]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb12: {
        _36 = Not(move _37);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _36) -> [0: bb14, otherwise: bb13]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb13: {
        _40 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _42 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _44 = _34;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _43 = _44;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _46 = _35;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _45 = _46;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _47 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _41 = core::panicking::assert_failed::<String, &str>(move _42, move _43, move _45, move _47) -> bb26; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb14: {
        _51 = &_2;                       // scope 1 at ui/env-args-reverse-iterator.rs:14:16: 14:20
        _50 = <Vec<String> as Index<usize>>::index(move _51, const 2_usize) -> [return: bb15, unwind: bb26]; // scope 1 at ui/env-args-reverse-iterator.rs:14:16: 14:23
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:14:16: 14:23
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>, usize) -> &'a <Vec<String> as Index<usize>>::Output {<Vec<String> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb15: {
        _49 = _50;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _96 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(assert_reverse_iterator_for_program_arguments, [], Some(promoted[2])) }
        _52 = _96;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _48 = (move _49, move _52);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _53 = (_48.0: &std::string::String); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _54 = (_48.1: &&str);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _57 = _53;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _58 = _54;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _56 = <String as PartialEq<&str>>::eq(move _57, move _58) -> [return: bb16, unwind: bb26]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb16: {
        _55 = Not(move _56);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _55) -> [0: bb18, otherwise: bb17]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb17: {
        _59 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _61 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _63 = _53;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _62 = _63;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _65 = _54;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _64 = _65;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _66 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _60 = core::panicking::assert_failed::<String, &str>(move _61, move _62, move _64, move _66) -> bb26; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb18: {
        _70 = &_2;                       // scope 1 at ui/env-args-reverse-iterator.rs:15:16: 15:20
        _69 = <Vec<String> as Index<usize>>::index(move _70, const 3_usize) -> [return: bb19, unwind: bb26]; // scope 1 at ui/env-args-reverse-iterator.rs:15:16: 15:23
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:15:16: 15:23
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>, usize) -> &'a <Vec<String> as Index<usize>>::Output {<Vec<String> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb19: {
        _68 = _69;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _71 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _67 = (move _68, move _71);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _72 = (_67.0: &std::string::String); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _73 = (_67.1: &&str);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _76 = _72;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _77 = _73;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _75 = <String as PartialEq<&str>>::eq(move _76, move _77) -> [return: bb20, unwind: bb26]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb20: {
        _74 = Not(move _75);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _74) -> [0: bb22, otherwise: bb21]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb21: {
        _78 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _80 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _82 = _72;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _81 = _82;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _84 = _73;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _83 = _84;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _85 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _79 = core::panicking::assert_failed::<String, &str>(move _80, move _81, move _83, move _85) -> bb26; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb22: {
        _95 = const _;                   // scope 1 at ui/env-args-reverse-iterator.rs:17:14: 17:22
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:17:14: 17:22
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(assert_reverse_iterator_for_program_arguments, [], Some(promoted[1])) }
        _90 = _95;                       // scope 1 at ui/env-args-reverse-iterator.rs:17:14: 17:22
        _89 = _90;                       // scope 1 at ui/env-args-reverse-iterator.rs:17:14: 17:22
        _88 = move _89 as &[&str] (Pointer(Unsize)); // scope 1 at ui/env-args-reverse-iterator.rs:17:14: 17:22
        _94 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(assert_reverse_iterator_for_program_arguments, [], Some(promoted[0])) }
        _93 = _94;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _92 = _93;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _91 = move _92 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _87 = Arguments::<'_>::new_v1(move _88, move _91) -> [return: bb23, unwind: bb26]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb23: {
        _86 = _print(move _87) -> [return: bb24, unwind: bb26]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb24: {
        drop(_2) -> bb25;                // scope 0 at ui/env-args-reverse-iterator.rs:18:1: 18:2
    }

    bb25: {
        return;                          // scope 0 at ui/env-args-reverse-iterator.rs:18:2: 18:2
    }

    bb26 (cleanup): {
        drop(_2) -> bb27;                // scope 0 at ui/env-args-reverse-iterator.rs:18:1: 18:2
    }

    bb27 (cleanup): {
        resume;                          // scope 0 at ui/env-args-reverse-iterator.rs:8:1: 18:2
    }
}

promoted[0] in assert_reverse_iterator_for_program_arguments: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in assert_reverse_iterator_for_program_arguments: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/env-args-reverse-iterator.rs:17:14: 17:22
    let mut _1: [&str; 1];               // in scope 0 at ui/env-args-reverse-iterator.rs:17:14: 17:22

    bb0: {
        _1 = [const "passed\n"];         // scope 0 at ui/env-args-reverse-iterator.rs:17:14: 17:22
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:17:14: 17:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/env-args-reverse-iterator.rs:17:14: 17:22
        return;                          // scope 0 at ui/env-args-reverse-iterator.rs:17:14: 17:22
    }
}

promoted[2] in assert_reverse_iterator_for_program_arguments: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/env-args-reverse-iterator.rs:14:25: 14:28

    bb0: {
        _1 = const "a";                  // scope 0 at ui/env-args-reverse-iterator.rs:14:25: 14:28
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:14:25: 14:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in assert_reverse_iterator_for_program_arguments: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/env-args-reverse-iterator.rs:13:25: 13:28

    bb0: {
        _1 = const "b";                  // scope 0 at ui/env-args-reverse-iterator.rs:13:25: 13:28
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:13:25: 13:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in assert_reverse_iterator_for_program_arguments: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/env-args-reverse-iterator.rs:12:25: 12:28

    bb0: {
        _1 = const "c";                  // scope 0 at ui/env-args-reverse-iterator.rs:12:25: 12:28
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:12:25: 12:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/env-args-reverse-iterator.rs:20:11: 20:11
    let mut _1: std::env::Args;          // in scope 0 at ui/env-args-reverse-iterator.rs:21:9: 21:17
    let mut _3: std::option::Option<std::string::String>; // in scope 0 at ui/env-args-reverse-iterator.rs:22:14: 22:25
    let mut _4: &mut std::env::Args;     // in scope 0 at ui/env-args-reverse-iterator.rs:22:14: 22:25
    let mut _5: std::option::Option<std::string::String>; // in scope 0 at ui/env-args-reverse-iterator.rs:24:22: 24:33
    let mut _6: &mut std::env::Args;     // in scope 0 at ui/env-args-reverse-iterator.rs:24:22: 24:33
    let mut _7: isize;                   // in scope 0 at ui/env-args-reverse-iterator.rs:24:12: 24:19
    let _8: ();                          // in scope 0 at ui/env-args-reverse-iterator.rs:25:9: 25:59
    let mut _9: &str;                    // in scope 0 at ui/env-args-reverse-iterator.rs:25:55: 25:58
    let _10: &str;                       // in scope 0 at ui/env-args-reverse-iterator.rs:25:55: 25:58
    let mut _11: &std::string::String;   // in scope 0 at ui/env-args-reverse-iterator.rs:25:55: 25:58
    let _12: &std::string::String;       // in scope 0 at ui/env-args-reverse-iterator.rs:25:55: 25:58
    let mut _14: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/env-args-reverse-iterator.rs:29:18: 33:18
    let mut _15: &mut std::process::Command; // in scope 0 at ui/env-args-reverse-iterator.rs:29:18: 33:18
    let mut _16: &mut std::process::Command; // in scope 0 at ui/env-args-reverse-iterator.rs:29:18: 32:18
    let mut _17: &mut std::process::Command; // in scope 0 at ui/env-args-reverse-iterator.rs:29:18: 32:18
    let mut _18: &mut std::process::Command; // in scope 0 at ui/env-args-reverse-iterator.rs:29:18: 31:18
    let mut _19: &mut std::process::Command; // in scope 0 at ui/env-args-reverse-iterator.rs:29:18: 31:18
    let mut _20: &mut std::process::Command; // in scope 0 at ui/env-args-reverse-iterator.rs:29:18: 30:18
    let mut _21: &mut std::process::Command; // in scope 0 at ui/env-args-reverse-iterator.rs:29:18: 30:18
    let mut _22: std::process::Command;  // in scope 0 at ui/env-args-reverse-iterator.rs:29:18: 29:35
    let mut _23: &std::string::String;   // in scope 0 at ui/env-args-reverse-iterator.rs:29:31: 29:34
    let mut _24: bool;                   // in scope 0 at ui/env-args-reverse-iterator.rs:35:5: 35:37
    let mut _25: bool;                   // in scope 0 at ui/env-args-reverse-iterator.rs:35:13: 35:36
    let mut _26: &std::process::ExitStatus; // in scope 0 at ui/env-args-reverse-iterator.rs:35:13: 35:36
    let mut _27: !;                      // in scope 0 at ui/env-args-reverse-iterator.rs:35:5: 35:37
    let mut _28: bool;                   // in scope 0 at ui/env-args-reverse-iterator.rs:36:5: 36:38
    let mut _29: bool;                   // in scope 0 at ui/env-args-reverse-iterator.rs:36:13: 36:37
    let mut _30: &std::vec::Vec<u8>;     // in scope 0 at ui/env-args-reverse-iterator.rs:36:13: 36:37
    let mut _31: !;                      // in scope 0 at ui/env-args-reverse-iterator.rs:36:5: 36:38
    let mut _32: (&std::vec::Vec<u8>, &&[u8; 7]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _33: &std::vec::Vec<u8>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _34: &&[u8; 7];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _37: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _38: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _39: &std::vec::Vec<u8>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _40: &&[u8; 7];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _42: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _43: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _44: &std::vec::Vec<u8>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _45: &std::vec::Vec<u8>;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _46: &&[u8; 7];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _47: &&[u8; 7];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug args => _1;                // in scope 1 at ui/env-args-reverse-iterator.rs:21:9: 21:17
        let _2: std::string::String;     // in scope 1 at ui/env-args-reverse-iterator.rs:22:9: 22:11
        scope 2 {
            debug me => _2;              // in scope 2 at ui/env-args-reverse-iterator.rs:22:9: 22:11
            let _13: std::process::Output; // in scope 2 at ui/env-args-reverse-iterator.rs:29:9: 29:15
            scope 3 {
            }
            scope 4 {
                debug output => _13;     // in scope 4 at ui/env-args-reverse-iterator.rs:29:9: 29:15
                let _35: &std::vec::Vec<u8>; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _36: &&[u8; 7];      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _49: &&[u8; 7];  // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 5 {
                    debug left_val => _35; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _36; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _41: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 6 {
                        debug kind => _41; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _1 = args() -> bb1;              // scope 0 at ui/env-args-reverse-iterator.rs:21:20: 21:26
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:21:20: 21:24
                                         // + literal: Const { ty: fn() -> Args {args}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut _1;                    // scope 1 at ui/env-args-reverse-iterator.rs:22:14: 22:25
        _3 = <Args as Iterator>::next(move _4) -> [return: bb2, unwind: bb35]; // scope 1 at ui/env-args-reverse-iterator.rs:22:14: 22:25
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:22:19: 22:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut Args) -> Option<<Args as Iterator>::Item> {<Args as Iterator>::next}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = Option::<String>::unwrap(move _3) -> [return: bb3, unwind: bb35]; // scope 1 at ui/env-args-reverse-iterator.rs:22:14: 22:34
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:22:26: 22:32
                                         // + literal: Const { ty: fn(Option<String>) -> String {Option::<String>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = &mut _1;                    // scope 3 at ui/env-args-reverse-iterator.rs:24:22: 24:33
        _5 = <Args as Iterator>::next(move _6) -> [return: bb4, unwind: bb34]; // scope 3 at ui/env-args-reverse-iterator.rs:24:22: 24:33
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:24:27: 24:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut Args) -> Option<<Args as Iterator>::Item> {<Args as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = discriminant(_5);           // scope 3 at ui/env-args-reverse-iterator.rs:24:12: 24:19
        switchInt(move _7) -> [1: bb5, otherwise: bb8]; // scope 3 at ui/env-args-reverse-iterator.rs:24:12: 24:19
    }

    bb5: {
        _12 = &_2;                       // scope 3 at ui/env-args-reverse-iterator.rs:25:55: 25:58
        _11 = _12;                       // scope 3 at ui/env-args-reverse-iterator.rs:25:55: 25:58
        _10 = <String as Deref>::deref(move _11) -> [return: bb6, unwind: bb33]; // scope 3 at ui/env-args-reverse-iterator.rs:25:55: 25:58
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:25:55: 25:58
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _9 = _10;                        // scope 3 at ui/env-args-reverse-iterator.rs:25:55: 25:58
        _8 = assert_reverse_iterator_for_program_arguments(move _9) -> [return: bb7, unwind: bb33]; // scope 3 at ui/env-args-reverse-iterator.rs:25:9: 25:59
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:25:9: 25:54
                                         // + literal: Const { ty: for<'a> fn(&'a str) {assert_reverse_iterator_for_program_arguments}, val: Value(<ZST>) }
    }

    bb7: {
        drop(_5) -> [return: bb28, unwind: bb34]; // scope 2 at ui/env-args-reverse-iterator.rs:27:5: 27:6
    }

    bb8: {
        drop(_5) -> [return: bb9, unwind: bb34]; // scope 2 at ui/env-args-reverse-iterator.rs:27:5: 27:6
    }

    bb9: {
        _23 = &_2;                       // scope 2 at ui/env-args-reverse-iterator.rs:29:31: 29:34
        _22 = Command::new::<&String>(move _23) -> [return: bb10, unwind: bb34]; // scope 2 at ui/env-args-reverse-iterator.rs:29:18: 29:35
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:29:18: 29:30
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&String) -> Command {Command::new::<&String>}, val: Value(<ZST>) }
    }

    bb10: {
        _21 = &mut _22;                  // scope 2 at ui/env-args-reverse-iterator.rs:29:18: 30:18
        _20 = Command::arg::<&str>(move _21, const "a") -> [return: bb11, unwind: bb32]; // scope 2 at ui/env-args-reverse-iterator.rs:29:18: 30:18
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:30:10: 30:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:30:14: 30:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        _19 = &mut (*_20);               // scope 2 at ui/env-args-reverse-iterator.rs:29:18: 31:18
        _18 = Command::arg::<&str>(move _19, const "b") -> [return: bb12, unwind: bb32]; // scope 2 at ui/env-args-reverse-iterator.rs:29:18: 31:18
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:31:10: 31:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:31:14: 31:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _17 = &mut (*_18);               // scope 2 at ui/env-args-reverse-iterator.rs:29:18: 32:18
        _16 = Command::arg::<&str>(move _17, const "c") -> [return: bb13, unwind: bb32]; // scope 2 at ui/env-args-reverse-iterator.rs:29:18: 32:18
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:32:10: 32:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:32:14: 32:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        _15 = &mut (*_16);               // scope 2 at ui/env-args-reverse-iterator.rs:29:18: 33:18
        _14 = Command::output(move _15) -> [return: bb14, unwind: bb32]; // scope 2 at ui/env-args-reverse-iterator.rs:29:18: 33:18
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:33:10: 33:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb14: {
        _13 = Result::<Output, std::io::Error>::unwrap(move _14) -> [return: bb15, unwind: bb32]; // scope 2 at ui/env-args-reverse-iterator.rs:29:18: 34:18
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:34:10: 34:16
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb15: {
        drop(_22) -> [return: bb16, unwind: bb31]; // scope 2 at ui/env-args-reverse-iterator.rs:34:18: 34:19
    }

    bb16: {
        _26 = &(_13.0: std::process::ExitStatus); // scope 4 at ui/env-args-reverse-iterator.rs:35:13: 35:36
        _25 = ExitStatus::success(move _26) -> [return: bb17, unwind: bb31]; // scope 4 at ui/env-args-reverse-iterator.rs:35:13: 35:36
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:35:27: 35:34
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb17: {
        _24 = Not(move _25);             // scope 4 at ui/env-args-reverse-iterator.rs:35:5: 35:37
        switchInt(move _24) -> [0: bb19, otherwise: bb18]; // scope 4 at ui/env-args-reverse-iterator.rs:35:5: 35:37
    }

    bb18: {
        _27 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb31; // scope 4 at ui/env-args-reverse-iterator.rs:35:5: 35:37
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:35:5: 35:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb19: {
        _30 = &(_13.2: std::vec::Vec<u8>); // scope 4 at ui/env-args-reverse-iterator.rs:36:13: 36:37
        _29 = Vec::<u8>::is_empty(move _30) -> [return: bb20, unwind: bb31]; // scope 4 at ui/env-args-reverse-iterator.rs:36:13: 36:37
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:36:27: 36:35
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> bool {Vec::<u8>::is_empty}, val: Value(<ZST>) }
    }

    bb20: {
        _28 = Not(move _29);             // scope 4 at ui/env-args-reverse-iterator.rs:36:5: 36:38
        switchInt(move _28) -> [0: bb22, otherwise: bb21]; // scope 4 at ui/env-args-reverse-iterator.rs:36:5: 36:38
    }

    bb21: {
        _31 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb31; // scope 4 at ui/env-args-reverse-iterator.rs:36:5: 36:38
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:36:5: 36:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb22: {
        _33 = &(_13.1: std::vec::Vec<u8>); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _49 = const _;                   // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u8; 7], val: Unevaluated(main, [], Some(promoted[0])) }
        _34 = _49;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _32 = (move _33, move _34);      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _35 = (_32.0: &std::vec::Vec<u8>); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _36 = (_32.1: &&[u8; 7]);        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _39 = _35;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _40 = _36;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _38 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(move _39, move _40) -> [return: bb23, unwind: bb31]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u8>, &'b &[u8; 7]) -> bool {<Vec<u8> as PartialEq<&[u8; 7]>>::eq}, val: Value(<ZST>) }
    }

    bb23: {
        _37 = Not(move _38);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _37) -> [0: bb25, otherwise: bb24]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb24: {
        _41 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _43 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _45 = _35;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _44 = _45;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _47 = _36;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _46 = _47;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _48 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _42 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _43, move _44, move _46, move _48) -> bb31; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u8>, &'b &[u8; 7], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>}, val: Value(<ZST>) }
    }

    bb25: {
        drop(_13) -> [return: bb26, unwind: bb34]; // scope 2 at ui/env-args-reverse-iterator.rs:38:1: 38:2
    }

    bb26: {
        drop(_2) -> [return: bb27, unwind: bb35]; // scope 1 at ui/env-args-reverse-iterator.rs:38:1: 38:2
    }

    bb27: {
        drop(_1) -> bb30;                // scope 0 at ui/env-args-reverse-iterator.rs:38:1: 38:2
    }

    bb28: {
        drop(_2) -> [return: bb29, unwind: bb35]; // scope 1 at ui/env-args-reverse-iterator.rs:38:1: 38:2
    }

    bb29: {
        drop(_1) -> bb30;                // scope 0 at ui/env-args-reverse-iterator.rs:38:1: 38:2
    }

    bb30: {
        return;                          // scope 0 at ui/env-args-reverse-iterator.rs:38:2: 38:2
    }

    bb31 (cleanup): {
        drop(_13) -> bb34;               // scope 2 at ui/env-args-reverse-iterator.rs:38:1: 38:2
    }

    bb32 (cleanup): {
        drop(_22) -> bb34;               // scope 2 at ui/env-args-reverse-iterator.rs:34:18: 34:19
    }

    bb33 (cleanup): {
        drop(_5) -> bb34;                // scope 2 at ui/env-args-reverse-iterator.rs:27:5: 27:6
    }

    bb34 (cleanup): {
        drop(_2) -> bb35;                // scope 1 at ui/env-args-reverse-iterator.rs:38:1: 38:2
    }

    bb35 (cleanup): {
        drop(_1) -> bb36;                // scope 0 at ui/env-args-reverse-iterator.rs:38:1: 38:2
    }

    bb36 (cleanup): {
        resume;                          // scope 0 at ui/env-args-reverse-iterator.rs:20:1: 38:2
    }
}

promoted[0] in main: &&[u8; 7] = {
    let mut _0: &&[u8; 7];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u8; 7];                // in scope 0 at ui/env-args-reverse-iterator.rs:37:31: 37:42

    bb0: {
        _1 = const b"passed\n";          // scope 0 at ui/env-args-reverse-iterator.rs:37:31: 37:42
                                         // mir::Constant
                                         // + span: ui/env-args-reverse-iterator.rs:37:31: 37:42
                                         // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc1)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

alloc1 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            │ passed.
}
