// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn assert_reverse_iterator_for_program_arguments(_1: &str) -> () {
    debug program_name => _1;
    let mut _0: ();
    let _2: std::vec::Vec<std::string::String>;
    let mut _3: std::iter::Rev<std::env::Args>;
    let mut _4: std::env::Args;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: usize;
    let mut _8: &std::vec::Vec<std::string::String>;
    let mut _9: !;
    let mut _10: (&std::string::String, &&str);
    let mut _11: &std::string::String;
    let _12: &std::string::String;
    let mut _13: &std::vec::Vec<std::string::String>;
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&std::string::String, &&str);
    let mut _22: &std::string::String;
    let _23: &std::string::String;
    let mut _24: &std::vec::Vec<std::string::String>;
    let mut _27: bool;
    let mut _28: bool;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: (&std::string::String, &&str);
    let mut _33: &std::string::String;
    let _34: &std::string::String;
    let mut _35: &std::vec::Vec<std::string::String>;
    let mut _38: bool;
    let mut _39: bool;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&std::string::String, &&str);
    let mut _44: &std::string::String;
    let _45: &std::string::String;
    let mut _46: &std::vec::Vec<std::string::String>;
    let mut _47: &&str;
    let mut _50: bool;
    let mut _51: bool;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    let _55: ();
    let mut _56: std::fmt::Arguments<'_>;
    let mut _57: &[&str];
    scope 1 {
        debug args => _2;
        let _14: &std::string::String;
        let _15: &&str;
        let _25: &std::string::String;
        let _26: &&str;
        let _36: &std::string::String;
        let _37: &&str;
        let _48: &std::string::String;
        let _49: &&str;
        let mut _58: &[&str; 1];
        let mut _59: &&str;
        let mut _60: &&str;
        let mut _61: &&str;
        scope 2 {
            debug left_val => _14;
            debug right_val => _15;
            let _18: core::panicking::AssertKind;
            scope 3 {
                debug kind => _18;
            }
        }
        scope 4 {
            debug left_val => _25;
            debug right_val => _26;
            let _29: core::panicking::AssertKind;
            scope 5 {
                debug kind => _29;
            }
        }
        scope 6 {
            debug left_val => _36;
            debug right_val => _37;
            let _40: core::panicking::AssertKind;
            scope 7 {
                debug kind => _40;
            }
        }
        scope 8 {
            debug left_val => _48;
            debug right_val => _49;
            let _52: core::panicking::AssertKind;
            scope 9 {
                debug kind => _52;
            }
        }
    }

    bb0: {
        _4 = args() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Args as Iterator>::rev(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = <Rev<Args> as Iterator>::collect::<Vec<String>>(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = &_2;
        _7 = Vec::<String>::len(move _8) -> [return: bb4, unwind: bb26];
    }

    bb4: {
        _6 = Eq(move _7, const 4_usize);
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _9 = core::panicking::panic(const "assertion failed: args.len() == 4") -> bb26;
    }

    bb6: {
        _13 = &_2;
        _12 = <Vec<String> as Index<usize>>::index(move _13, const 0_usize) -> [return: bb7, unwind: bb26];
    }

    bb7: {
        _11 = _12;
        _61 = const _;
        _10 = (move _11, _61);
        _14 = (_10.0: &std::string::String);
        _15 = (_10.1: &&str);
        _17 = <String as PartialEq<&str>>::eq(_14, _15) -> [return: bb8, unwind: bb26];
    }

    bb8: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<String, &str>(move _18, _14, _15, move _20) -> bb26;
    }

    bb10: {
        _24 = &_2;
        _23 = <Vec<String> as Index<usize>>::index(move _24, const 1_usize) -> [return: bb11, unwind: bb26];
    }

    bb11: {
        _22 = _23;
        _60 = const _;
        _21 = (move _22, _60);
        _25 = (_21.0: &std::string::String);
        _26 = (_21.1: &&str);
        _28 = <String as PartialEq<&str>>::eq(_25, _26) -> [return: bb12, unwind: bb26];
    }

    bb12: {
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<String, &str>(move _29, _25, _26, move _31) -> bb26;
    }

    bb14: {
        _35 = &_2;
        _34 = <Vec<String> as Index<usize>>::index(move _35, const 2_usize) -> [return: bb15, unwind: bb26];
    }

    bb15: {
        _33 = _34;
        _59 = const _;
        _32 = (move _33, _59);
        _36 = (_32.0: &std::string::String);
        _37 = (_32.1: &&str);
        _39 = <String as PartialEq<&str>>::eq(_36, _37) -> [return: bb16, unwind: bb26];
    }

    bb16: {
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<String, &str>(move _40, _36, _37, move _42) -> bb26;
    }

    bb18: {
        _46 = &_2;
        _45 = <Vec<String> as Index<usize>>::index(move _46, const 3_usize) -> [return: bb19, unwind: bb26];
    }

    bb19: {
        _44 = _45;
        _47 = &_1;
        _43 = (move _44, move _47);
        _48 = (_43.0: &std::string::String);
        _49 = (_43.1: &&str);
        _51 = <String as PartialEq<&str>>::eq(_48, _49) -> [return: bb20, unwind: bb26];
    }

    bb20: {
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<String, &str>(move _52, _48, _49, move _54) -> bb26;
    }

    bb22: {
        _58 = const _;
        _57 = _58 as &[&str] (Pointer(Unsize));
        _56 = Arguments::<'_>::new_const(move _57) -> [return: bb23, unwind: bb26];
    }

    bb23: {
        _55 = _print(move _56) -> [return: bb24, unwind: bb26];
    }

    bb24: {
        drop(_2) -> [return: bb25, unwind continue];
    }

    bb25: {
        return;
    }

    bb26 (cleanup): {
        drop(_2) -> [return: bb27, unwind terminate];
    }

    bb27 (cleanup): {
        resume;
    }
}

promoted[0] in assert_reverse_iterator_for_program_arguments: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "passed\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in assert_reverse_iterator_for_program_arguments: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "a";
        _0 = &_1;
        return;
    }
}

promoted[2] in assert_reverse_iterator_for_program_arguments: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "b";
        _0 = &_1;
        return;
    }
}

promoted[3] in assert_reverse_iterator_for_program_arguments: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "c";
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::env::Args;
    let mut _3: std::option::Option<std::string::String>;
    let mut _4: &mut std::env::Args;
    let mut _5: std::option::Option<std::string::String>;
    let mut _6: &mut std::env::Args;
    let mut _7: isize;
    let _8: ();
    let mut _9: &str;
    let _10: &str;
    let _11: &std::string::String;
    let mut _13: std::result::Result<std::process::Output, std::io::Error>;
    let mut _14: &mut std::process::Command;
    let mut _15: &mut std::process::Command;
    let mut _16: &mut std::process::Command;
    let mut _17: &mut std::process::Command;
    let mut _18: &mut std::process::Command;
    let mut _19: &mut std::process::Command;
    let mut _20: &mut std::process::Command;
    let mut _21: std::process::Command;
    let mut _22: &std::string::String;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: &std::process::ExitStatus;
    let mut _26: !;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: &std::vec::Vec<u8>;
    let mut _30: !;
    let mut _31: (&std::vec::Vec<u8>, &&[u8; 7]);
    let mut _32: &std::vec::Vec<u8>;
    let mut _35: bool;
    let mut _36: bool;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug args => _1;
        let _2: std::string::String;
        scope 2 {
            debug me => _2;
            let _12: std::process::Output;
            scope 3 {
            }
            scope 4 {
                debug output => _12;
                let _33: &std::vec::Vec<u8>;
                let _34: &&[u8; 7];
                let mut _40: &&[u8; 7];
                scope 5 {
                    debug left_val => _33;
                    debug right_val => _34;
                    let _37: core::panicking::AssertKind;
                    scope 6 {
                        debug kind => _37;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = args() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _1;
        _3 = <Args as Iterator>::next(move _4) -> [return: bb2, unwind: bb35];
    }

    bb2: {
        _2 = Option::<String>::unwrap(move _3) -> [return: bb3, unwind: bb35];
    }

    bb3: {
        _6 = &mut _1;
        _5 = <Args as Iterator>::next(move _6) -> [return: bb4, unwind: bb34];
    }

    bb4: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [1: bb5, otherwise: bb8];
    }

    bb5: {
        _11 = &_2;
        _10 = <String as Deref>::deref(_11) -> [return: bb6, unwind: bb33];
    }

    bb6: {
        _9 = _10;
        _8 = assert_reverse_iterator_for_program_arguments(move _9) -> [return: bb7, unwind: bb33];
    }

    bb7: {
        drop(_5) -> [return: bb28, unwind: bb34];
    }

    bb8: {
        drop(_5) -> [return: bb9, unwind: bb34];
    }

    bb9: {
        _22 = &_2;
        _21 = Command::new::<&String>(move _22) -> [return: bb10, unwind: bb34];
    }

    bb10: {
        _20 = &mut _21;
        _19 = Command::arg::<&str>(move _20, const "a") -> [return: bb11, unwind: bb32];
    }

    bb11: {
        _18 = _19;
        _17 = Command::arg::<&str>(move _18, const "b") -> [return: bb12, unwind: bb32];
    }

    bb12: {
        _16 = _17;
        _15 = Command::arg::<&str>(move _16, const "c") -> [return: bb13, unwind: bb32];
    }

    bb13: {
        _14 = _15;
        _13 = Command::output(move _14) -> [return: bb14, unwind: bb32];
    }

    bb14: {
        _12 = Result::<Output, std::io::Error>::unwrap(move _13) -> [return: bb15, unwind: bb32];
    }

    bb15: {
        drop(_21) -> [return: bb16, unwind: bb31];
    }

    bb16: {
        _25 = &(_12.0: std::process::ExitStatus);
        _24 = ExitStatus::success(move _25) -> [return: bb17, unwind: bb31];
    }

    bb17: {
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _26 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb31;
    }

    bb19: {
        _29 = &(_12.2: std::vec::Vec<u8>);
        _28 = Vec::<u8>::is_empty(move _29) -> [return: bb20, unwind: bb31];
    }

    bb20: {
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _30 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb31;
    }

    bb22: {
        _32 = &(_12.1: std::vec::Vec<u8>);
        _40 = const _;
        _31 = (move _32, _40);
        _33 = (_31.0: &std::vec::Vec<u8>);
        _34 = (_31.1: &&[u8; 7]);
        _36 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(_33, _34) -> [return: bb23, unwind: bb31];
    }

    bb23: {
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _37, _33, _34, move _39) -> bb31;
    }

    bb25: {
        drop(_12) -> [return: bb26, unwind: bb34];
    }

    bb26: {
        drop(_2) -> [return: bb27, unwind: bb35];
    }

    bb27: {
        drop(_1) -> [return: bb30, unwind continue];
    }

    bb28: {
        drop(_2) -> [return: bb29, unwind: bb35];
    }

    bb29: {
        drop(_1) -> [return: bb30, unwind continue];
    }

    bb30: {
        return;
    }

    bb31 (cleanup): {
        drop(_12) -> [return: bb34, unwind terminate];
    }

    bb32 (cleanup): {
        drop(_21) -> [return: bb34, unwind terminate];
    }

    bb33 (cleanup): {
        drop(_5) -> [return: bb34, unwind terminate];
    }

    bb34 (cleanup): {
        drop(_2) -> [return: bb35, unwind terminate];
    }

    bb35 (cleanup): {
        drop(_1) -> [return: bb36, unwind terminate];
    }

    bb36 (cleanup): {
        resume;
    }
}

promoted[0] in main: &&[u8; 7] = {
    let mut _0: &&[u8; 7];
    let mut _1: &[u8; 7];

    bb0: {
        _1 = const b"passed\n";
        _0 = &_1;
        return;
    }
}

alloc1 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            │ passed.
}
