// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn on_method() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: i32;
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _3: std::result::Result<i32, std::num::ParseIntError>;
    let _4: &str;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
    let _7: i32;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _9: std::result::Result<i32, std::num::ParseIntError>;
    let _10: &str;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
    let _13: i32;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _12;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _13;
        scope 8 {
        }
    }

    bb0: {
        _4 = const "1";
        _3 = core::str::<impl str>::parse::<i32>(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <Result<i32, ParseIntError> as Try>::branch(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_2);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_2 as Continue).0: i32);
        _10 = const "2";
        _9 = core::str::<impl str>::parse::<i32>(_10) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _6) -> [return: bb10, unwind continue];
    }

    bb6: {
        _8 = <Result<i32, ParseIntError> as Try>::branch(move _9) -> [return: bb7, unwind continue];
    }

    bb7: {
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb8, 1: bb9, otherwise: bb4];
    }

    bb8: {
        _13 = ((_8 as Continue).0: i32);
        _1 = Add(_7, _13);
        _0 = Result::<i32, ParseIntError>::Ok(move _1);
        goto -> bb10;
    }

    bb9: {
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _12) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }
}

fn in_chain() -> Result<String, ParseIntError> {
    let mut _0: std::result::Result<std::string::String, std::num::ParseIntError>;
    let mut _1: std::string::String;
    let mut _2: &i32;
    let _3: i32;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _5: std::result::Result<i32, std::num::ParseIntError>;
    let _6: &str;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
    let _9: i32;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _9;
        scope 4 {
        }
    }

    bb0: {
        _6 = const "3";
        _5 = core::str::<impl str>::parse::<i32>(_6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <Result<i32, ParseIntError> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _9 = ((_4 as Continue).0: i32);
        _3 = _9;
        _2 = &_3;
        _1 = <i32 as ToString>::to_string(move _2) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<String, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _8) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<String, ParseIntError>::Ok(move _1);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn on_call() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _2: std::result::Result<i32, std::num::ParseIntError>;
    let _3: &str;
    let mut _4: isize;
    let _5: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
    let _6: i32;
    scope 1 {
        debug residual => _5;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _3 = const "4";
        _2 = parse::<i32>(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = <Result<i32, ParseIntError> as Try>::branch(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = discriminant(_1);
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_1 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_6);
        goto -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _5 = move ((_1 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _5) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn parse(_1: &str) -> Result<T, <T as FromStr>::Err> {
    debug s => _1;
    let mut _0: std::result::Result<T, <T as std::str::FromStr>::Err>;

    bb0: {
        _0 = core::str::<impl str>::parse::<T>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn nested() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _2: std::result::Result<i32, std::num::ParseIntError>;
    let mut _3: &str;
    let _4: &str;
    let mut _5: &std::string::String;
    let _6: std::string::String;
    let mut _7: &i32;
    let _8: i32;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _10: std::result::Result<i32, std::num::ParseIntError>;
    let _11: &str;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
    let _14: i32;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
    let _17: i32;
    scope 1 {
        debug residual => _13;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _14;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _16;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _17;
        scope 8 {
        }
    }

    bb0: {
        _11 = const "5";
        _10 = core::str::<impl str>::parse::<i32>(_11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = <Result<i32, ParseIntError> as Try>::branch(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        _12 = discriminant(_9);
        switchInt(move _12) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _14 = ((_9 as Continue).0: i32);
        _8 = _14;
        _7 = &_8;
        _6 = <i32 as ToString>::to_string(move _7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _13 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _13) -> [return: bb13, unwind continue];
    }

    bb6: {
        _5 = &_6;
        _4 = <String as Deref>::deref(move _5) -> [return: bb7, unwind: bb14];
    }

    bb7: {
        _3 = _4;
        _2 = core::str::<impl str>::parse::<i32>(move _3) -> [return: bb8, unwind: bb14];
    }

    bb8: {
        _1 = <Result<i32, ParseIntError> as Try>::branch(move _2) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _15 = discriminant(_1);
        switchInt(move _15) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        _17 = ((_1 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_17);
        drop(_6) -> [return: bb13, unwind continue];
    }

    bb11: {
        _16 = move ((_1 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _16) -> [return: bb12, unwind: bb14];
    }

    bb12: {
        drop(_6) -> [return: bb13, unwind continue];
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_6) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }
}

fn on_path() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let _1: std::result::Result<i32, std::num::ParseIntError>;
    let _2: &str;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _4: std::result::Result<i32, std::num::ParseIntError>;
    let mut _5: isize;
    scope 1 {
        debug x => _1;
        let _6: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
        let _7: i32;
        scope 2 {
            debug residual => _6;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _7;
            scope 5 {
            }
        }
    }

    bb0: {
        _2 = const "6";
        _1 = core::str::<impl str>::parse::<i32>(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = move _1;
        _3 = <Result<i32, ParseIntError> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_7);
        goto -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _6) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn on_macro() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _2: std::result::Result<i32, std::num::ParseIntError>;
    let _3: &str;
    let mut _4: isize;
    let _5: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
    let _6: i32;
    scope 1 {
        debug residual => _5;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _3 = const "7";
        _2 = core::str::<impl str>::parse::<i32>(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = <Result<i32, ParseIntError> as Try>::branch(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = discriminant(_1);
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_1 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_6);
        goto -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _5 = move ((_1 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _5) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn on_parens() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let _1: std::result::Result<i32, std::num::ParseIntError>;
    let _2: &str;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _4: std::result::Result<i32, std::num::ParseIntError>;
    let mut _5: isize;
    scope 1 {
        debug x => _1;
        let _6: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
        let _7: i32;
        scope 2 {
            debug residual => _6;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _7;
            scope 5 {
            }
        }
    }

    bb0: {
        _2 = const "8";
        _1 = core::str::<impl str>::parse::<i32>(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = move _1;
        _3 = <Result<i32, ParseIntError> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_7);
        goto -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _6) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn on_block() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let _1: std::result::Result<i32, std::num::ParseIntError>;
    let _2: &str;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _4: std::result::Result<i32, std::num::ParseIntError>;
    let mut _5: isize;
    scope 1 {
        debug x => _1;
        let _6: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
        let _7: i32;
        scope 2 {
            debug residual => _6;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _7;
            scope 5 {
            }
        }
    }

    bb0: {
        _2 = const "9";
        _1 = core::str::<impl str>::parse::<i32>(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = move _1;
        _3 = <Result<i32, ParseIntError> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_7);
        goto -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _6) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn on_field() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let _1: on_field::Pair<std::result::Result<i32, std::num::ParseIntError>, i32>;
    let mut _2: std::result::Result<i32, std::num::ParseIntError>;
    let _3: &str;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _5: std::result::Result<i32, std::num::ParseIntError>;
    let mut _6: isize;
    scope 1 {
        debug x => _1;
        let _7: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
        let _8: i32;
        scope 2 {
            debug residual => _7;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _8;
            scope 5 {
            }
        }
    }

    bb0: {
        _3 = const "10";
        _2 = core::str::<impl str>::parse::<i32>(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = Pair::<Result<i32, ParseIntError>, i32> { a: move _2, b: const 0_i32 };
        _5 = move (_1.0: std::result::Result<i32, std::num::ParseIntError>);
        _4 = <Result<i32, ParseIntError> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = ((_4 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_8);
        goto -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _7) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn on_tuple_field() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let _1: (std::result::Result<i32, std::num::ParseIntError>, i32);
    let mut _2: std::result::Result<i32, std::num::ParseIntError>;
    let _3: &str;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _5: std::result::Result<i32, std::num::ParseIntError>;
    let mut _6: isize;
    scope 1 {
        debug x => _1;
        let _7: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
        let _8: i32;
        scope 2 {
            debug residual => _7;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _8;
            scope 5 {
            }
        }
    }

    bb0: {
        _3 = const "11";
        _2 = core::str::<impl str>::parse::<i32>(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = (move _2, const 0_i32);
        _5 = move (_1.0: std::result::Result<i32, std::num::ParseIntError>);
        _4 = <Result<i32, ParseIntError> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = ((_4 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_8);
        goto -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _7) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn on_try() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let _1: std::result::Result<std::result::Result<i32, std::num::ParseIntError>, std::num::ParseIntError>;
    let mut _2: std::result::Result<i32, std::num::ParseIntError>;
    let _3: &str;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, std::result::Result<i32, std::num::ParseIntError>>;
    let mut _6: std::result::Result<std::result::Result<i32, std::num::ParseIntError>, std::num::ParseIntError>;
    let mut _7: isize;
    let mut _10: isize;
    scope 1 {
        debug x => _1;
        let _8: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
        let _9: std::result::Result<i32, std::num::ParseIntError>;
        let _11: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
        let _12: i32;
        scope 2 {
            debug residual => _8;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _9;
            scope 5 {
            }
        }
        scope 6 {
            debug residual => _11;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _12;
            scope 9 {
            }
        }
    }

    bb0: {
        _3 = const "12";
        _2 = core::str::<impl str>::parse::<i32>(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = Result::<i32, ParseIntError>::map::<Result<i32, ParseIntError>, [closure@ui/try-operator.rs:71:37: 71:40]>(move _2, const ZeroSized: [closure@ui/try-operator.rs:71:37: 71:40]) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = move _1;
        _5 = <Result<Result<i32, ParseIntError>, ParseIntError> as Try>::branch(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _9 = move ((_5 as Continue).0: std::result::Result<i32, std::num::ParseIntError>);
        _4 = <Result<i32, ParseIntError> as Try>::branch(move _9) -> [return: bb7, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _8) -> [return: bb10, unwind continue];
    }

    bb7: {
        _10 = discriminant(_4);
        switchInt(move _10) -> [0: bb8, 1: bb9, otherwise: bb5];
    }

    bb8: {
        _12 = ((_4 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_12);
        goto -> bb10;
    }

    bb9: {
        _11 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _11) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }
}

fn on_try::{closure#0}(_1: [closure@ui/try-operator.rs:71:37: 71:40], _2: i32) -> Result<i32, ParseIntError> {
    debug i => _2;
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let mut _3: &str;
    let _4: &str;
    let mut _5: &std::string::String;
    let _6: std::string::String;
    let mut _7: &i32;

    bb0: {
        _7 = &_2;
        _6 = <i32 as ToString>::to_string(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _4 = <String as Deref>::deref(move _5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _3 = _4;
        _0 = core::str::<impl str>::parse::<i32>(move _3) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_6) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_6) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn on_binary_op() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let _1: i32;
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _3: std::result::Result<i32, std::num::ParseIntError>;
    let _4: &str;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
    let _7: i32;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _10: std::result::Result<i32, std::num::ParseIntError>;
    let _11: &str;
    let mut _12: isize;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _17: std::result::Result<i32, std::num::ParseIntError>;
    let _18: &str;
    let mut _19: isize;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _23: std::result::Result<i32, std::num::ParseIntError>;
    let _24: &str;
    let mut _25: isize;
    let mut _28: i32;
    let mut _29: i32;
    scope 1 {
        debug x => _1;
        let _8: i32;
        let _13: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
        let _14: i32;
        scope 6 {
            debug y => _8;
            let _15: i32;
            let _20: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
            let _21: i32;
            let _26: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
            let _27: i32;
            scope 11 {
                debug z => _15;
            }
            scope 12 {
                debug residual => _20;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _21;
                scope 15 {
                }
            }
            scope 16 {
                debug residual => _26;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _27;
                scope 19 {
                }
            }
        }
        scope 7 {
            debug residual => _13;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _14;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _6;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _7;
        scope 5 {
        }
    }

    bb0: {
        _4 = const "14";
        _3 = core::str::<impl str>::parse::<i32>(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <Result<i32, ParseIntError> as Try>::branch(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_2);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_2 as Continue).0: i32);
        _1 = Sub(const 13_i32, _7);
        _11 = const "15";
        _10 = core::str::<impl str>::parse::<i32>(_11) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _6) -> [return: bb18, unwind continue];
    }

    bb6: {
        _9 = <Result<i32, ParseIntError> as Try>::branch(move _10) -> [return: bb7, unwind continue];
    }

    bb7: {
        _12 = discriminant(_9);
        switchInt(move _12) -> [0: bb8, 1: bb9, otherwise: bb4];
    }

    bb8: {
        _14 = ((_9 as Continue).0: i32);
        _8 = Sub(_14, const 16_i32);
        _18 = const "17";
        _17 = core::str::<impl str>::parse::<i32>(_18) -> [return: bb10, unwind continue];
    }

    bb9: {
        _13 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _13) -> [return: bb18, unwind continue];
    }

    bb10: {
        _16 = <Result<i32, ParseIntError> as Try>::branch(move _17) -> [return: bb11, unwind continue];
    }

    bb11: {
        _19 = discriminant(_16);
        switchInt(move _19) -> [0: bb12, 1: bb13, otherwise: bb4];
    }

    bb12: {
        _21 = ((_16 as Continue).0: i32);
        _24 = const "18";
        _23 = core::str::<impl str>::parse::<i32>(_24) -> [return: bb14, unwind continue];
    }

    bb13: {
        _20 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _20) -> [return: bb18, unwind continue];
    }

    bb14: {
        _22 = <Result<i32, ParseIntError> as Try>::branch(move _23) -> [return: bb15, unwind continue];
    }

    bb15: {
        _25 = discriminant(_22);
        switchInt(move _25) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        _27 = ((_22 as Continue).0: i32);
        _15 = Sub(_21, _27);
        _29 = Add(_1, _8);
        _28 = Add(move _29, _15);
        _0 = Result::<i32, ParseIntError>::Ok(move _28);
        goto -> bb18;
    }

    bb17: {
        _26 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _26) -> [return: bb18, unwind continue];
    }

    bb18: {
        return;
    }
}

fn on_index() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let _1: [i32; 1];
    let _3: &str;
    let mut _4: i32;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, usize>;
    let mut _6: std::result::Result<usize, std::num::ParseIntError>;
    let mut _7: isize;
    let mut _10: usize;
    let mut _11: bool;
    scope 1 {
        debug x => _1;
        let _2: std::result::Result<usize, std::num::ParseIntError>;
        scope 2 {
            debug y => _2;
            let _8: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
            let _9: usize;
            scope 3 {
                debug residual => _8;
                scope 4 {
                }
            }
            scope 5 {
                debug val => _9;
                scope 6 {
                }
            }
        }
    }

    bb0: {
        _1 = [const 19_i32];
        _3 = const "0";
        _2 = core::str::<impl str>::parse::<usize>(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = move _2;
        _5 = <Result<usize, ParseIntError> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _9 = ((_5 as Continue).0: usize);
        _10 = const 1_usize;
        _11 = Lt(_9, _10);
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> [success: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _8) -> [return: bb7, unwind continue];
    }

    bb6: {
        _4 = _1[_9];
        _0 = Result::<i32, ParseIntError>::Ok(move _4);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn on_args() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let _1: std::result::Result<i32, std::num::ParseIntError>;
    let _2: &str;
    let _4: &str;
    let mut _5: i32;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _7: std::result::Result<i32, std::num::ParseIntError>;
    let mut _8: isize;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _12: std::result::Result<i32, std::num::ParseIntError>;
    let mut _13: isize;
    scope 1 {
        debug x => _1;
        let _3: std::result::Result<i32, std::num::ParseIntError>;
        scope 2 {
            debug y => _3;
            let _9: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
            let _10: i32;
            let _14: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
            let _15: i32;
            scope 3 {
                debug residual => _9;
                scope 4 {
                }
            }
            scope 5 {
                debug val => _10;
                scope 6 {
                }
            }
            scope 7 {
                debug residual => _14;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _15;
                scope 10 {
                }
            }
        }
    }

    bb0: {
        _2 = const "20";
        _1 = core::str::<impl str>::parse::<i32>(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = const "21";
        _3 = core::str::<impl str>::parse::<i32>(_4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = move _1;
        _6 = <Result<i32, ParseIntError> as Try>::branch(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _10 = ((_6 as Continue).0: i32);
        _12 = move _3;
        _11 = <Result<i32, ParseIntError> as Try>::branch(move _12) -> [return: bb7, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _9 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _9) -> [return: bb11, unwind continue];
    }

    bb7: {
        _13 = discriminant(_11);
        switchInt(move _13) -> [0: bb8, 1: bb9, otherwise: bb5];
    }

    bb8: {
        _15 = ((_11 as Continue).0: i32);
        _5 = on_args::sub(_10, _15) -> [return: bb10, unwind continue];
    }

    bb9: {
        _14 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _14) -> [return: bb11, unwind continue];
    }

    bb10: {
        _0 = Result::<i32, ParseIntError>::Ok(move _5);
        goto -> bb11;
    }

    bb11: {
        return;
    }
}

fn on_args::sub(_1: i32, _2: i32) -> i32 {
    debug x => _1;
    debug y => _2;
    let mut _0: i32;

    bb0: {
        _0 = Sub(_1, _2);
        return;
    }
}

fn on_if() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _2: std::result::Result<i32, std::num::ParseIntError>;
    let mut _3: bool;
    let _4: &str;
    let _5: &str;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
    let _8: i32;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _8;
        scope 4 {
        }
    }

    bb0: {
        _3 = const true;
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _4 = const "22";
        _2 = core::str::<impl str>::parse::<i32>(_4) -> [return: bb3, unwind continue];
    }

    bb2: {
        _5 = const "23";
        _2 = core::str::<impl str>::parse::<i32>(_5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _1 = <Result<i32, ParseIntError> as Try>::branch(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _6 = discriminant(_1);
        switchInt(move _6) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        _8 = ((_1 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_8);
        goto -> bb8;
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _7 = move ((_1 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _7) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

fn on_if_let() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _2: std::result::Result<i32, std::num::ParseIntError>;
    let mut _3: std::result::Result<i32, std::num::ParseIntError>;
    let _4: &str;
    let mut _5: isize;
    let _6: &str;
    let _7: &str;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
    let _10: i32;
    scope 1 {
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        _4 = const "24";
        _3 = core::str::<impl str>::parse::<i32>(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb2, otherwise: bb3];
    }

    bb2: {
        _6 = const "25";
        _2 = core::str::<impl str>::parse::<i32>(_6) -> [return: bb4, unwind continue];
    }

    bb3: {
        _7 = const "26";
        _2 = core::str::<impl str>::parse::<i32>(_7) -> [return: bb4, unwind continue];
    }

    bb4: {
        _1 = <Result<i32, ParseIntError> as Try>::branch(move _2) -> [return: bb5, unwind continue];
    }

    bb5: {
        _8 = discriminant(_1);
        switchInt(move _8) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        _10 = ((_1 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_10);
        goto -> bb9;
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _9 = move ((_1 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _9) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }
}

fn on_match() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _2: std::result::Result<i32, std::num::ParseIntError>;
    let mut _3: std::result::Result<i32, std::num::ParseIntError>;
    let _4: &str;
    let mut _5: isize;
    let _6: &str;
    let _7: &str;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
    let _10: i32;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _10;
        scope 4 {
        }
    }

    bb0: {
        _4 = const "27";
        _3 = core::str::<impl str>::parse::<i32>(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _7 = const "29";
        _2 = core::str::<impl str>::parse::<i32>(_7) -> [return: bb5, unwind continue];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = const "28";
        _2 = core::str::<impl str>::parse::<i32>(_6) -> [return: bb5, unwind continue];
    }

    bb5: {
        _1 = <Result<i32, ParseIntError> as Try>::branch(move _2) -> [return: bb6, unwind continue];
    }

    bb6: {
        _8 = discriminant(_1);
        switchInt(move _8) -> [0: bb7, 1: bb8, otherwise: bb3];
    }

    bb7: {
        _10 = ((_1 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_10);
        goto -> bb9;
    }

    bb8: {
        _9 = move ((_1 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _9) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }
}

fn tight_binding() -> Result<bool, ()> {
    let mut _0: std::result::Result<bool, ()>;
    let _1: std::result::Result<bool, ()>;
    let mut _2: bool;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>, bool>;
    let mut _4: std::result::Result<bool, ()>;
    let mut _5: isize;
    scope 1 {
        debug x => _1;
        let _6: bool;
        scope 2 {
            debug residual => const Result::<Infallible, ()>::Err(());
            scope 3 {
            }
        }
        scope 4 {
            debug val => _6;
            scope 5 {
            }
        }
    }

    bb0: {
        _1 = ok::<bool>(const true) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = _1;
        _3 = <Result<bool, ()> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: bool);
        _2 = Not(_6);
        _0 = Result::<bool, ()>::Ok(move _2);
        goto -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<bool, ()> as FromResidual<Result<Infallible, ()>>>::from_residual(const Result::<Infallible, ()>::Err(())) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn ok(_1: T) -> Result<T, ()> {
    debug x => _1;
    let mut _0: std::result::Result<T, ()>;

    bb0: {
        _0 = Result::<T, ()>::Ok(move _1);
        return;
    }
}

fn merge_error() -> Result<i32, Error> {
    let mut _0: std::result::Result<i32, Error>;
    let mut _1: std::string::String;
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, usize>;
    let mut _3: std::result::Result<usize, std::io::Error>;
    let mut _4: &mut std::fs::File;
    let mut _5: std::fs::File;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::fs::File>;
    let mut _7: std::result::Result<std::fs::File, std::io::Error>;
    let mut _8: isize;
    let mut _11: &mut std::string::String;
    let mut _12: isize;
    let mut _15: i32;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _17: std::result::Result<i32, std::num::ParseIntError>;
    let mut _18: &str;
    let _19: &str;
    let mut _20: &std::string::String;
    let mut _21: isize;
    scope 1 {
        debug s => _1;
        let _9: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _10: std::fs::File;
        let _13: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _14: usize;
        let _22: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
        let _23: i32;
        scope 2 {
            debug residual => _9;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _10;
            scope 5 {
            }
        }
        scope 6 {
            debug residual => _13;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _14;
            scope 9 {
            }
        }
        scope 10 {
            debug residual => _22;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _23;
            scope 13 {
            }
        }
    }

    bb0: {
        _1 = String::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = File::open::<&str>(const "foo.txt") -> [return: bb2, unwind: bb20];
    }

    bb2: {
        _6 = <Result<File, std::io::Error> as Try>::branch(move _7) -> [return: bb3, unwind: bb20];
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _10 = move ((_6 as Continue).0: std::fs::File);
        _5 = move _10;
        _4 = &mut _5;
        _11 = &mut _1;
        _3 = <File as std::io::Read>::read_to_string(move _4, _11) -> [return: bb7, unwind: bb19];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _9 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<i32, Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _9) -> [return: bb24, unwind: bb20];
    }

    bb7: {
        _2 = <Result<usize, std::io::Error> as Try>::branch(move _3) -> [return: bb8, unwind: bb19];
    }

    bb8: {
        _12 = discriminant(_2);
        switchInt(move _12) -> [0: bb9, 1: bb10, otherwise: bb5];
    }

    bb9: {
        _14 = ((_2 as Continue).0: usize);
        drop(_5) -> [return: bb22, unwind: bb20];
    }

    bb10: {
        _13 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<i32, Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _13) -> [return: bb11, unwind: bb19];
    }

    bb11: {
        drop(_5) -> [return: bb23, unwind: bb20];
    }

    bb12: {
        _18 = _19;
        _17 = core::str::<impl str>::parse::<i32>(move _18) -> [return: bb13, unwind: bb20];
    }

    bb13: {
        _16 = <Result<i32, ParseIntError> as Try>::branch(move _17) -> [return: bb14, unwind: bb20];
    }

    bb14: {
        _21 = discriminant(_16);
        switchInt(move _21) -> [0: bb15, 1: bb16, otherwise: bb5];
    }

    bb15: {
        _23 = ((_16 as Continue).0: i32);
        _15 = Add(_23, const 1_i32);
        _0 = Result::<i32, Error>::Ok(move _15);
        drop(_1) -> [return: bb18, unwind continue];
    }

    bb16: {
        _22 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, Error> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _22) -> [return: bb17, unwind: bb20];
    }

    bb17: {
        drop(_1) -> [return: bb18, unwind continue];
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        drop(_5) -> [return: bb20, unwind terminate];
    }

    bb20 (cleanup): {
        drop(_1) -> [return: bb21, unwind terminate];
    }

    bb21 (cleanup): {
        resume;
    }

    bb22: {
        _20 = &_1;
        _19 = <String as Deref>::deref(move _20) -> [return: bb12, unwind: bb20];
    }

    bb23: {
        drop(_1) -> [return: bb18, unwind continue];
    }

    bb24: {
        goto -> bb23;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _2: &std::result::Result<i32, std::num::ParseIntError>;
    let _3: std::result::Result<i32, std::num::ParseIntError>;
    let _4: &std::result::Result<i32, std::num::ParseIntError>;
    let _5: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _6: bool;
    let mut _7: bool;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&std::result::Result<std::string::String, std::num::ParseIntError>, &std::result::Result<std::string::String, std::num::ParseIntError>);
    let mut _12: &std::result::Result<std::string::String, std::num::ParseIntError>;
    let _13: std::result::Result<std::string::String, std::num::ParseIntError>;
    let mut _14: std::string::String;
    let _15: &str;
    let mut _16: &std::result::Result<std::string::String, std::num::ParseIntError>;
    let _17: std::result::Result<std::string::String, std::num::ParseIntError>;
    let _18: &std::result::Result<std::string::String, std::num::ParseIntError>;
    let _19: &std::result::Result<std::string::String, std::num::ParseIntError>;
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _26: &std::result::Result<i32, std::num::ParseIntError>;
    let _27: std::result::Result<i32, std::num::ParseIntError>;
    let _28: &std::result::Result<i32, std::num::ParseIntError>;
    let _29: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _30: bool;
    let mut _31: bool;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _36: &std::result::Result<i32, std::num::ParseIntError>;
    let _37: std::result::Result<i32, std::num::ParseIntError>;
    let _38: &std::result::Result<i32, std::num::ParseIntError>;
    let _39: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _40: bool;
    let mut _41: bool;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _46: &std::result::Result<i32, std::num::ParseIntError>;
    let _47: std::result::Result<i32, std::num::ParseIntError>;
    let _48: &std::result::Result<i32, std::num::ParseIntError>;
    let _49: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _50: bool;
    let mut _51: bool;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _55: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _56: &std::result::Result<i32, std::num::ParseIntError>;
    let _57: std::result::Result<i32, std::num::ParseIntError>;
    let _58: &std::result::Result<i32, std::num::ParseIntError>;
    let _59: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _60: bool;
    let mut _61: bool;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _66: &std::result::Result<i32, std::num::ParseIntError>;
    let _67: std::result::Result<i32, std::num::ParseIntError>;
    let _68: &std::result::Result<i32, std::num::ParseIntError>;
    let _69: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _70: bool;
    let mut _71: bool;
    let _73: !;
    let mut _74: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _75: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _76: &std::result::Result<i32, std::num::ParseIntError>;
    let _77: std::result::Result<i32, std::num::ParseIntError>;
    let _78: &std::result::Result<i32, std::num::ParseIntError>;
    let _79: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _80: bool;
    let mut _81: bool;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _86: &std::result::Result<i32, std::num::ParseIntError>;
    let _87: std::result::Result<i32, std::num::ParseIntError>;
    let _88: &std::result::Result<i32, std::num::ParseIntError>;
    let _89: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _90: bool;
    let mut _91: bool;
    let _93: !;
    let mut _94: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _95: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _96: &std::result::Result<i32, std::num::ParseIntError>;
    let _97: std::result::Result<i32, std::num::ParseIntError>;
    let _98: &std::result::Result<i32, std::num::ParseIntError>;
    let _99: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _100: bool;
    let mut _101: bool;
    let _103: !;
    let mut _104: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _105: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _106: &std::result::Result<i32, std::num::ParseIntError>;
    let _107: std::result::Result<i32, std::num::ParseIntError>;
    let _108: &std::result::Result<i32, std::num::ParseIntError>;
    let _109: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _110: bool;
    let mut _111: bool;
    let _113: !;
    let mut _114: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _115: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _116: &std::result::Result<i32, std::num::ParseIntError>;
    let _117: std::result::Result<i32, std::num::ParseIntError>;
    let _118: &std::result::Result<i32, std::num::ParseIntError>;
    let _119: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _120: bool;
    let mut _121: bool;
    let _123: !;
    let mut _124: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _125: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _126: &std::result::Result<i32, std::num::ParseIntError>;
    let _127: std::result::Result<i32, std::num::ParseIntError>;
    let _128: &std::result::Result<i32, std::num::ParseIntError>;
    let _129: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _130: bool;
    let mut _131: bool;
    let _133: !;
    let mut _134: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _135: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _136: &std::result::Result<i32, std::num::ParseIntError>;
    let _137: std::result::Result<i32, std::num::ParseIntError>;
    let _138: &std::result::Result<i32, std::num::ParseIntError>;
    let _139: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _140: bool;
    let mut _141: bool;
    let _143: !;
    let mut _144: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _145: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _146: &std::result::Result<i32, std::num::ParseIntError>;
    let _147: std::result::Result<i32, std::num::ParseIntError>;
    let _148: &std::result::Result<i32, std::num::ParseIntError>;
    let _149: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _150: bool;
    let mut _151: bool;
    let _153: !;
    let mut _154: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _155: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _156: &std::result::Result<i32, std::num::ParseIntError>;
    let _157: std::result::Result<i32, std::num::ParseIntError>;
    let _158: &std::result::Result<i32, std::num::ParseIntError>;
    let _159: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _160: bool;
    let mut _161: bool;
    let _163: !;
    let mut _164: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _165: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _166: &std::result::Result<i32, std::num::ParseIntError>;
    let _167: std::result::Result<i32, std::num::ParseIntError>;
    let _168: &std::result::Result<i32, std::num::ParseIntError>;
    let _169: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _170: bool;
    let mut _171: bool;
    let _173: !;
    let mut _174: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _175: (&std::result::Result<bool, ()>, &std::result::Result<bool, ()>);
    let mut _176: &std::result::Result<bool, ()>;
    let _177: std::result::Result<bool, ()>;
    let _178: &std::result::Result<bool, ()>;
    let _179: &std::result::Result<bool, ()>;
    let mut _180: bool;
    let mut _181: bool;
    let _183: !;
    let mut _184: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _185: &std::result::Result<bool, ()>;
    let mut _186: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _187: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _188: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _189: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _190: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _191: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _192: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _193: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _194: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _195: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _196: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _197: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _198: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _199: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _200: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _201: &std::result::Result<i32, std::num::ParseIntError>;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }
    scope 5 {
        debug left_val => _28;
        debug right_val => _29;
        let _32: core::panicking::AssertKind;
        scope 6 {
            debug kind => _32;
        }
    }
    scope 7 {
        debug left_val => _38;
        debug right_val => _39;
        let _42: core::panicking::AssertKind;
        scope 8 {
            debug kind => _42;
        }
    }
    scope 9 {
        debug left_val => _48;
        debug right_val => _49;
        let _52: core::panicking::AssertKind;
        scope 10 {
            debug kind => _52;
        }
    }
    scope 11 {
        debug left_val => _58;
        debug right_val => _59;
        let _62: core::panicking::AssertKind;
        scope 12 {
            debug kind => _62;
        }
    }
    scope 13 {
        debug left_val => _68;
        debug right_val => _69;
        let _72: core::panicking::AssertKind;
        scope 14 {
            debug kind => _72;
        }
    }
    scope 15 {
        debug left_val => _78;
        debug right_val => _79;
        let _82: core::panicking::AssertKind;
        scope 16 {
            debug kind => _82;
        }
    }
    scope 17 {
        debug left_val => _88;
        debug right_val => _89;
        let _92: core::panicking::AssertKind;
        scope 18 {
            debug kind => _92;
        }
    }
    scope 19 {
        debug left_val => _98;
        debug right_val => _99;
        let _102: core::panicking::AssertKind;
        scope 20 {
            debug kind => _102;
        }
    }
    scope 21 {
        debug left_val => _108;
        debug right_val => _109;
        let _112: core::panicking::AssertKind;
        scope 22 {
            debug kind => _112;
        }
    }
    scope 23 {
        debug left_val => _118;
        debug right_val => _119;
        let _122: core::panicking::AssertKind;
        scope 24 {
            debug kind => _122;
        }
    }
    scope 25 {
        debug left_val => _128;
        debug right_val => _129;
        let _132: core::panicking::AssertKind;
        scope 26 {
            debug kind => _132;
        }
    }
    scope 27 {
        debug left_val => _138;
        debug right_val => _139;
        let _142: core::panicking::AssertKind;
        scope 28 {
            debug kind => _142;
        }
    }
    scope 29 {
        debug left_val => _148;
        debug right_val => _149;
        let _152: core::panicking::AssertKind;
        scope 30 {
            debug kind => _152;
        }
    }
    scope 31 {
        debug left_val => _158;
        debug right_val => _159;
        let _162: core::panicking::AssertKind;
        scope 32 {
            debug kind => _162;
        }
    }
    scope 33 {
        debug left_val => _168;
        debug right_val => _169;
        let _172: core::panicking::AssertKind;
        scope 34 {
            debug kind => _172;
        }
    }
    scope 35 {
        debug left_val => _178;
        debug right_val => _179;
        let _182: core::panicking::AssertKind;
        scope 36 {
            debug kind => _182;
        }
    }

    bb0: {
        _201 = const _;
        _3 = on_method() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _1 = (_201, move _2);
        _4 = (_1.0: &std::result::Result<i32, std::num::ParseIntError>);
        _5 = (_1.1: &std::result::Result<i32, std::num::ParseIntError>);
        _7 = <Result<i32, ParseIntError> as PartialEq>::eq(_4, _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _8, _4, _5, move _10) -> unwind continue;
    }

    bb4: {
        _15 = const "3";
        _14 = <str as ToString>::to_string(_15) -> [return: bb5, unwind continue];
    }

    bb5: {
        _13 = Result::<String, ParseIntError>::Ok(move _14);
        _12 = &_13;
        _17 = in_chain() -> [return: bb6, unwind: bb77];
    }

    bb6: {
        _16 = &_17;
        _11 = (move _12, move _16);
        _18 = (_11.0: &std::result::Result<std::string::String, std::num::ParseIntError>);
        _19 = (_11.1: &std::result::Result<std::string::String, std::num::ParseIntError>);
        _21 = <Result<String, ParseIntError> as PartialEq>::eq(_18, _19) -> [return: bb7, unwind: bb76];
    }

    bb7: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<Result<String, ParseIntError>, Result<String, ParseIntError>>(move _22, _18, _19, move _24) -> bb76;
    }

    bb9: {
        drop(_17) -> [return: bb10, unwind: bb77];
    }

    bb10: {
        drop(_13) -> [return: bb11, unwind continue];
    }

    bb11: {
        _200 = const _;
        _27 = on_call() -> [return: bb12, unwind continue];
    }

    bb12: {
        _26 = &_27;
        _25 = (_200, move _26);
        _28 = (_25.0: &std::result::Result<i32, std::num::ParseIntError>);
        _29 = (_25.1: &std::result::Result<i32, std::num::ParseIntError>);
        _31 = <Result<i32, ParseIntError> as PartialEq>::eq(_28, _29) -> [return: bb13, unwind continue];
    }

    bb13: {
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _32, _28, _29, move _34) -> unwind continue;
    }

    bb15: {
        _199 = const _;
        _37 = nested() -> [return: bb16, unwind continue];
    }

    bb16: {
        _36 = &_37;
        _35 = (_199, move _36);
        _38 = (_35.0: &std::result::Result<i32, std::num::ParseIntError>);
        _39 = (_35.1: &std::result::Result<i32, std::num::ParseIntError>);
        _41 = <Result<i32, ParseIntError> as PartialEq>::eq(_38, _39) -> [return: bb17, unwind continue];
    }

    bb17: {
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _42, _38, _39, move _44) -> unwind continue;
    }

    bb19: {
        _198 = const _;
        _47 = on_path() -> [return: bb20, unwind continue];
    }

    bb20: {
        _46 = &_47;
        _45 = (_198, move _46);
        _48 = (_45.0: &std::result::Result<i32, std::num::ParseIntError>);
        _49 = (_45.1: &std::result::Result<i32, std::num::ParseIntError>);
        _51 = <Result<i32, ParseIntError> as PartialEq>::eq(_48, _49) -> [return: bb21, unwind continue];
    }

    bb21: {
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _52, _48, _49, move _54) -> unwind continue;
    }

    bb23: {
        _197 = const _;
        _57 = on_macro() -> [return: bb24, unwind continue];
    }

    bb24: {
        _56 = &_57;
        _55 = (_197, move _56);
        _58 = (_55.0: &std::result::Result<i32, std::num::ParseIntError>);
        _59 = (_55.1: &std::result::Result<i32, std::num::ParseIntError>);
        _61 = <Result<i32, ParseIntError> as PartialEq>::eq(_58, _59) -> [return: bb25, unwind continue];
    }

    bb25: {
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _62, _58, _59, move _64) -> unwind continue;
    }

    bb27: {
        _196 = const _;
        _67 = on_parens() -> [return: bb28, unwind continue];
    }

    bb28: {
        _66 = &_67;
        _65 = (_196, move _66);
        _68 = (_65.0: &std::result::Result<i32, std::num::ParseIntError>);
        _69 = (_65.1: &std::result::Result<i32, std::num::ParseIntError>);
        _71 = <Result<i32, ParseIntError> as PartialEq>::eq(_68, _69) -> [return: bb29, unwind continue];
    }

    bb29: {
        _70 = Not(move _71);
        switchInt(move _70) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        _72 = core::panicking::AssertKind::Eq;
        _74 = Option::<Arguments<'_>>::None;
        _73 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _72, _68, _69, move _74) -> unwind continue;
    }

    bb31: {
        _195 = const _;
        _77 = on_block() -> [return: bb32, unwind continue];
    }

    bb32: {
        _76 = &_77;
        _75 = (_195, move _76);
        _78 = (_75.0: &std::result::Result<i32, std::num::ParseIntError>);
        _79 = (_75.1: &std::result::Result<i32, std::num::ParseIntError>);
        _81 = <Result<i32, ParseIntError> as PartialEq>::eq(_78, _79) -> [return: bb33, unwind continue];
    }

    bb33: {
        _80 = Not(move _81);
        switchInt(move _80) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _82, _78, _79, move _84) -> unwind continue;
    }

    bb35: {
        _194 = const _;
        _87 = on_field() -> [return: bb36, unwind continue];
    }

    bb36: {
        _86 = &_87;
        _85 = (_194, move _86);
        _88 = (_85.0: &std::result::Result<i32, std::num::ParseIntError>);
        _89 = (_85.1: &std::result::Result<i32, std::num::ParseIntError>);
        _91 = <Result<i32, ParseIntError> as PartialEq>::eq(_88, _89) -> [return: bb37, unwind continue];
    }

    bb37: {
        _90 = Not(move _91);
        switchInt(move _90) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _92 = core::panicking::AssertKind::Eq;
        _94 = Option::<Arguments<'_>>::None;
        _93 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _92, _88, _89, move _94) -> unwind continue;
    }

    bb39: {
        _193 = const _;
        _97 = on_tuple_field() -> [return: bb40, unwind continue];
    }

    bb40: {
        _96 = &_97;
        _95 = (_193, move _96);
        _98 = (_95.0: &std::result::Result<i32, std::num::ParseIntError>);
        _99 = (_95.1: &std::result::Result<i32, std::num::ParseIntError>);
        _101 = <Result<i32, ParseIntError> as PartialEq>::eq(_98, _99) -> [return: bb41, unwind continue];
    }

    bb41: {
        _100 = Not(move _101);
        switchInt(move _100) -> [0: bb43, otherwise: bb42];
    }

    bb42: {
        _102 = core::panicking::AssertKind::Eq;
        _104 = Option::<Arguments<'_>>::None;
        _103 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _102, _98, _99, move _104) -> unwind continue;
    }

    bb43: {
        _192 = const _;
        _107 = on_try() -> [return: bb44, unwind continue];
    }

    bb44: {
        _106 = &_107;
        _105 = (_192, move _106);
        _108 = (_105.0: &std::result::Result<i32, std::num::ParseIntError>);
        _109 = (_105.1: &std::result::Result<i32, std::num::ParseIntError>);
        _111 = <Result<i32, ParseIntError> as PartialEq>::eq(_108, _109) -> [return: bb45, unwind continue];
    }

    bb45: {
        _110 = Not(move _111);
        switchInt(move _110) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        _112 = core::panicking::AssertKind::Eq;
        _114 = Option::<Arguments<'_>>::None;
        _113 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _112, _108, _109, move _114) -> unwind continue;
    }

    bb47: {
        _191 = const _;
        _117 = on_binary_op() -> [return: bb48, unwind continue];
    }

    bb48: {
        _116 = &_117;
        _115 = (_191, move _116);
        _118 = (_115.0: &std::result::Result<i32, std::num::ParseIntError>);
        _119 = (_115.1: &std::result::Result<i32, std::num::ParseIntError>);
        _121 = <Result<i32, ParseIntError> as PartialEq>::eq(_118, _119) -> [return: bb49, unwind continue];
    }

    bb49: {
        _120 = Not(move _121);
        switchInt(move _120) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _122 = core::panicking::AssertKind::Eq;
        _124 = Option::<Arguments<'_>>::None;
        _123 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _122, _118, _119, move _124) -> unwind continue;
    }

    bb51: {
        _190 = const _;
        _127 = on_index() -> [return: bb52, unwind continue];
    }

    bb52: {
        _126 = &_127;
        _125 = (_190, move _126);
        _128 = (_125.0: &std::result::Result<i32, std::num::ParseIntError>);
        _129 = (_125.1: &std::result::Result<i32, std::num::ParseIntError>);
        _131 = <Result<i32, ParseIntError> as PartialEq>::eq(_128, _129) -> [return: bb53, unwind continue];
    }

    bb53: {
        _130 = Not(move _131);
        switchInt(move _130) -> [0: bb55, otherwise: bb54];
    }

    bb54: {
        _132 = core::panicking::AssertKind::Eq;
        _134 = Option::<Arguments<'_>>::None;
        _133 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _132, _128, _129, move _134) -> unwind continue;
    }

    bb55: {
        _189 = const _;
        _137 = on_args() -> [return: bb56, unwind continue];
    }

    bb56: {
        _136 = &_137;
        _135 = (_189, move _136);
        _138 = (_135.0: &std::result::Result<i32, std::num::ParseIntError>);
        _139 = (_135.1: &std::result::Result<i32, std::num::ParseIntError>);
        _141 = <Result<i32, ParseIntError> as PartialEq>::eq(_138, _139) -> [return: bb57, unwind continue];
    }

    bb57: {
        _140 = Not(move _141);
        switchInt(move _140) -> [0: bb59, otherwise: bb58];
    }

    bb58: {
        _142 = core::panicking::AssertKind::Eq;
        _144 = Option::<Arguments<'_>>::None;
        _143 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _142, _138, _139, move _144) -> unwind continue;
    }

    bb59: {
        _188 = const _;
        _147 = on_if() -> [return: bb60, unwind continue];
    }

    bb60: {
        _146 = &_147;
        _145 = (_188, move _146);
        _148 = (_145.0: &std::result::Result<i32, std::num::ParseIntError>);
        _149 = (_145.1: &std::result::Result<i32, std::num::ParseIntError>);
        _151 = <Result<i32, ParseIntError> as PartialEq>::eq(_148, _149) -> [return: bb61, unwind continue];
    }

    bb61: {
        _150 = Not(move _151);
        switchInt(move _150) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _152 = core::panicking::AssertKind::Eq;
        _154 = Option::<Arguments<'_>>::None;
        _153 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _152, _148, _149, move _154) -> unwind continue;
    }

    bb63: {
        _187 = const _;
        _157 = on_if_let() -> [return: bb64, unwind continue];
    }

    bb64: {
        _156 = &_157;
        _155 = (_187, move _156);
        _158 = (_155.0: &std::result::Result<i32, std::num::ParseIntError>);
        _159 = (_155.1: &std::result::Result<i32, std::num::ParseIntError>);
        _161 = <Result<i32, ParseIntError> as PartialEq>::eq(_158, _159) -> [return: bb65, unwind continue];
    }

    bb65: {
        _160 = Not(move _161);
        switchInt(move _160) -> [0: bb67, otherwise: bb66];
    }

    bb66: {
        _162 = core::panicking::AssertKind::Eq;
        _164 = Option::<Arguments<'_>>::None;
        _163 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _162, _158, _159, move _164) -> unwind continue;
    }

    bb67: {
        _186 = const _;
        _167 = on_match() -> [return: bb68, unwind continue];
    }

    bb68: {
        _166 = &_167;
        _165 = (_186, move _166);
        _168 = (_165.0: &std::result::Result<i32, std::num::ParseIntError>);
        _169 = (_165.1: &std::result::Result<i32, std::num::ParseIntError>);
        _171 = <Result<i32, ParseIntError> as PartialEq>::eq(_168, _169) -> [return: bb69, unwind continue];
    }

    bb69: {
        _170 = Not(move _171);
        switchInt(move _170) -> [0: bb71, otherwise: bb70];
    }

    bb70: {
        _172 = core::panicking::AssertKind::Eq;
        _174 = Option::<Arguments<'_>>::None;
        _173 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _172, _168, _169, move _174) -> unwind continue;
    }

    bb71: {
        _185 = const _;
        _177 = tight_binding() -> [return: bb72, unwind continue];
    }

    bb72: {
        _176 = &_177;
        _175 = (_185, move _176);
        _178 = (_175.0: &std::result::Result<bool, ()>);
        _179 = (_175.1: &std::result::Result<bool, ()>);
        _181 = <Result<bool, ()> as PartialEq>::eq(_178, _179) -> [return: bb73, unwind continue];
    }

    bb73: {
        _180 = Not(move _181);
        switchInt(move _180) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        _182 = core::panicking::AssertKind::Eq;
        _184 = Option::<Arguments<'_>>::None;
        _183 = core::panicking::assert_failed::<Result<bool, ()>, Result<bool, ()>>(move _182, _178, _179, move _184) -> unwind continue;
    }

    bb75: {
        return;
    }

    bb76 (cleanup): {
        drop(_17) -> [return: bb77, unwind terminate];
    }

    bb77 (cleanup): {
        drop(_13) -> [return: bb78, unwind terminate];
    }

    bb78 (cleanup): {
        resume;
    }
}

promoted[0] in main: &Result<bool, ()> = {
    let mut _0: &std::result::Result<bool, ()>;
    let mut _1: std::result::Result<bool, ()>;

    bb0: {
        _1 = Result::<bool, ()>::Ok(const false);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::result::Result<i32, std::num::ParseIntError>;

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 29_i32);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::result::Result<i32, std::num::ParseIntError>;

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 25_i32);
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::result::Result<i32, std::num::ParseIntError>;

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 22_i32);
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::result::Result<i32, std::num::ParseIntError>;

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const -1_i32);
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::result::Result<i32, std::num::ParseIntError>;

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 19_i32);
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::result::Result<i32, std::num::ParseIntError>;

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const -3_i32);
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::result::Result<i32, std::num::ParseIntError>;

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 12_i32);
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::result::Result<i32, std::num::ParseIntError>;

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 11_i32);
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::result::Result<i32, std::num::ParseIntError>;

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 10_i32);
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::result::Result<i32, std::num::ParseIntError>;

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 9_i32);
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::result::Result<i32, std::num::ParseIntError>;

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 8_i32);
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::result::Result<i32, std::num::ParseIntError>;

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 7_i32);
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::result::Result<i32, std::num::ParseIntError>;

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 6_i32);
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::result::Result<i32, std::num::ParseIntError>;

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 5_i32);
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::result::Result<i32, std::num::ParseIntError>;

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 4_i32);
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::result::Result<i32, std::num::ParseIntError>;

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 3_i32);
        _0 = &_1;
        return;
    }
}

fn <impl at ui/try-operator.rs:182:1: 182:31>::from(_1: std::io::Error) -> Error {
    debug e => _1;
    let mut _0: Error;

    bb0: {
        _0 = Error::Io(move _1);
        return;
    }
}

fn <impl at ui/try-operator.rs:188:1: 188:35>::from(_1: ParseIntError) -> Error {
    debug e => _1;
    let mut _0: Error;

    bb0: {
        _0 = Error::Parse(move _1);
        return;
    }
}

fn Error::Io(_1: std::io::Error) -> Error {
    let mut _0: Error;

    bb0: {
        _0 = Error::Io(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Error::Io(_1: std::io::Error) -> Error {
    let mut _0: Error;

    bb0: {
        _0 = Error::Io(move _1);
        return;
    }
}

fn Error::Parse(_1: ParseIntError) -> Error {
    let mut _0: Error;

    bb0: {
        _0 = Error::Parse(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Error::Parse(_1: ParseIntError) -> Error {
    let mut _0: Error;

    bb0: {
        _0 = Error::Parse(move _1);
        return;
    }
}
