// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn on_method() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at ui/try-operator.rs:10:19: 10:45
    let mut _1: i32;                     // in scope 0 at ui/try-operator.rs:11:8: 11:49
    let mut _2: i32;                     // in scope 0 at ui/try-operator.rs:11:8: 11:27
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator.rs:11:8: 11:27
    let mut _4: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:11:8: 11:26
    let mut _5: &str;                    // in scope 0 at ui/try-operator.rs:11:8: 11:26
    let _6: &str;                        // in scope 0 at ui/try-operator.rs:11:8: 11:11
    let mut _7: isize;                   // in scope 0 at ui/try-operator.rs:11:26: 11:27
    let _8: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:11:26: 11:27
    let mut _9: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:11:26: 11:27
    let _10: i32;                        // in scope 0 at ui/try-operator.rs:11:8: 11:27
    let mut _11: i32;                    // in scope 0 at ui/try-operator.rs:11:30: 11:49
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator.rs:11:30: 11:49
    let mut _13: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:11:30: 11:48
    let mut _14: &str;                   // in scope 0 at ui/try-operator.rs:11:30: 11:48
    let _15: &str;                       // in scope 0 at ui/try-operator.rs:11:30: 11:33
    let mut _16: isize;                  // in scope 0 at ui/try-operator.rs:11:48: 11:49
    let _17: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:11:48: 11:49
    let mut _18: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:11:48: 11:49
    let _19: i32;                        // in scope 0 at ui/try-operator.rs:11:30: 11:49
    let mut _20: (i32, bool);            // in scope 0 at ui/try-operator.rs:11:8: 11:49
    scope 1 {
        debug residual => _8;            // in scope 1 at ui/try-operator.rs:11:26: 11:27
        scope 2 {
        }
    }
    scope 3 {
        debug val => _10;                // in scope 3 at ui/try-operator.rs:11:8: 11:27
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _17;           // in scope 5 at ui/try-operator.rs:11:48: 11:49
        scope 6 {
        }
    }
    scope 7 {
        debug val => _19;                // in scope 7 at ui/try-operator.rs:11:30: 11:49
        scope 8 {
        }
    }

    bb0: {
        _6 = const "1";                  // scope 0 at ui/try-operator.rs:11:8: 11:11
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:11:8: 11:11
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 0 at ui/try-operator.rs:11:8: 11:26
        _4 = core::str::<impl str>::parse::<i32>(move _5) -> bb1; // scope 0 at ui/try-operator.rs:11:8: 11:26
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:11:12: 11:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <Result<i32, ParseIntError> as Try>::branch(move _4) -> bb2; // scope 0 at ui/try-operator.rs:11:8: 11:27
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:11:8: 11:27
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> ControlFlow<<Result<i32, ParseIntError> as Try>::Residual, <Result<i32, ParseIntError> as Try>::Output> {<Result<i32, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = discriminant(_3);           // scope 0 at ui/try-operator.rs:11:8: 11:27
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at ui/try-operator.rs:11:8: 11:27
    }

    bb3: {
        _10 = ((_3 as Continue).0: i32); // scope 0 at ui/try-operator.rs:11:8: 11:27
        _2 = _10;                        // scope 4 at ui/try-operator.rs:11:8: 11:27
        _15 = const "2";                 // scope 0 at ui/try-operator.rs:11:30: 11:33
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:11:30: 11:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _14 = _15;                       // scope 0 at ui/try-operator.rs:11:30: 11:48
        _13 = core::str::<impl str>::parse::<i32>(move _14) -> bb6; // scope 0 at ui/try-operator.rs:11:30: 11:48
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:11:34: 11:39
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb4: {
        unreachable;                     // scope 0 at ui/try-operator.rs:11:8: 11:27
    }

    bb5: {
        _8 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 0 at ui/try-operator.rs:11:26: 11:27
        _9 = move _8;                    // scope 2 at ui/try-operator.rs:11:26: 11:27
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _9) -> bb12; // scope 2 at ui/try-operator.rs:11:8: 11:27
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:11:26: 11:27
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, ParseIntError> {<Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = <Result<i32, ParseIntError> as Try>::branch(move _13) -> bb7; // scope 0 at ui/try-operator.rs:11:30: 11:49
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:11:30: 11:49
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> ControlFlow<<Result<i32, ParseIntError> as Try>::Residual, <Result<i32, ParseIntError> as Try>::Output> {<Result<i32, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = discriminant(_12);         // scope 0 at ui/try-operator.rs:11:30: 11:49
        switchInt(move _16) -> [0: bb8, 1: bb10, otherwise: bb9]; // scope 0 at ui/try-operator.rs:11:30: 11:49
    }

    bb8: {
        _19 = ((_12 as Continue).0: i32); // scope 0 at ui/try-operator.rs:11:30: 11:49
        _11 = _19;                       // scope 8 at ui/try-operator.rs:11:30: 11:49
        _20 = CheckedAdd(_2, _11);       // scope 0 at ui/try-operator.rs:11:8: 11:49
        assert(!move (_20.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _11) -> bb11; // scope 0 at ui/try-operator.rs:11:8: 11:49
    }

    bb9: {
        unreachable;                     // scope 0 at ui/try-operator.rs:11:30: 11:49
    }

    bb10: {
        _17 = move ((_12 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 0 at ui/try-operator.rs:11:48: 11:49
        _18 = move _17;                  // scope 6 at ui/try-operator.rs:11:48: 11:49
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _18) -> bb12; // scope 6 at ui/try-operator.rs:11:30: 11:49
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:11:48: 11:49
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, ParseIntError> {<Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb11: {
        _1 = move (_20.0: i32);          // scope 0 at ui/try-operator.rs:11:8: 11:49
        _0 = Result::<i32, ParseIntError>::Ok(move _1); // scope 0 at ui/try-operator.rs:11:5: 11:50
        goto -> bb12;                    // scope 0 at ui/try-operator.rs:12:2: 12:2
    }

    bb12: {
        return;                          // scope 0 at ui/try-operator.rs:12:2: 12:2
    }
}

fn in_chain() -> Result<String, ParseIntError> {
    let mut _0: std::result::Result<std::string::String, std::num::ParseIntError>; // return place in scope 0 at ui/try-operator.rs:14:18: 14:47
    let mut _1: std::string::String;     // in scope 0 at ui/try-operator.rs:15:8: 15:39
    let mut _2: &i32;                    // in scope 0 at ui/try-operator.rs:15:8: 15:39
    let _3: i32;                         // in scope 0 at ui/try-operator.rs:15:8: 15:27
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator.rs:15:8: 15:27
    let mut _5: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:15:8: 15:26
    let mut _6: &str;                    // in scope 0 at ui/try-operator.rs:15:8: 15:26
    let _7: &str;                        // in scope 0 at ui/try-operator.rs:15:8: 15:11
    let mut _8: isize;                   // in scope 0 at ui/try-operator.rs:15:26: 15:27
    let _9: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:15:26: 15:27
    let mut _10: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:15:26: 15:27
    let _11: i32;                        // in scope 0 at ui/try-operator.rs:15:8: 15:27
    scope 1 {
        debug residual => _9;            // in scope 1 at ui/try-operator.rs:15:26: 15:27
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;                // in scope 3 at ui/try-operator.rs:15:8: 15:27
        scope 4 {
        }
    }

    bb0: {
        _7 = const "3";                  // scope 0 at ui/try-operator.rs:15:8: 15:11
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:15:8: 15:11
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/try-operator.rs:15:8: 15:26
        _5 = core::str::<impl str>::parse::<i32>(move _6) -> bb1; // scope 0 at ui/try-operator.rs:15:8: 15:26
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:15:12: 15:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = <Result<i32, ParseIntError> as Try>::branch(move _5) -> bb2; // scope 0 at ui/try-operator.rs:15:8: 15:27
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:15:8: 15:27
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> ControlFlow<<Result<i32, ParseIntError> as Try>::Residual, <Result<i32, ParseIntError> as Try>::Output> {<Result<i32, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = discriminant(_4);           // scope 0 at ui/try-operator.rs:15:8: 15:27
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at ui/try-operator.rs:15:8: 15:27
    }

    bb3: {
        _11 = ((_4 as Continue).0: i32); // scope 0 at ui/try-operator.rs:15:8: 15:27
        _3 = _11;                        // scope 4 at ui/try-operator.rs:15:8: 15:27
        _2 = &_3;                        // scope 0 at ui/try-operator.rs:15:8: 15:39
        _1 = <i32 as ToString>::to_string(move _2) -> bb6; // scope 0 at ui/try-operator.rs:15:8: 15:39
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:15:28: 15:37
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> String {<i32 as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb4: {
        unreachable;                     // scope 0 at ui/try-operator.rs:15:8: 15:27
    }

    bb5: {
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 0 at ui/try-operator.rs:15:26: 15:27
        _10 = move _9;                   // scope 2 at ui/try-operator.rs:15:26: 15:27
        _0 = <Result<String, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _10) -> bb7; // scope 2 at ui/try-operator.rs:15:8: 15:27
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:15:26: 15:27
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<String, ParseIntError> {<Result<String, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        _0 = Result::<String, ParseIntError>::Ok(move _1); // scope 0 at ui/try-operator.rs:15:5: 15:40
        goto -> bb7;                     // scope 0 at ui/try-operator.rs:16:2: 16:2
    }

    bb7: {
        return;                          // scope 0 at ui/try-operator.rs:16:2: 16:2
    }
}

fn on_call() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at ui/try-operator.rs:18:17: 18:43
    let mut _1: i32;                     // in scope 0 at ui/try-operator.rs:23:8: 23:19
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator.rs:23:8: 23:19
    let mut _3: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:23:8: 23:18
    let mut _4: &str;                    // in scope 0 at ui/try-operator.rs:23:14: 23:17
    let _5: &str;                        // in scope 0 at ui/try-operator.rs:23:14: 23:17
    let mut _6: isize;                   // in scope 0 at ui/try-operator.rs:23:18: 23:19
    let _7: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:23:18: 23:19
    let mut _8: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:23:18: 23:19
    let _9: i32;                         // in scope 0 at ui/try-operator.rs:23:8: 23:19
    scope 1 {
        debug residual => _7;            // in scope 1 at ui/try-operator.rs:23:18: 23:19
        scope 2 {
        }
    }
    scope 3 {
        debug val => _9;                 // in scope 3 at ui/try-operator.rs:23:8: 23:19
        scope 4 {
        }
    }

    bb0: {
        _5 = const "4";                  // scope 0 at ui/try-operator.rs:23:14: 23:17
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:23:14: 23:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/try-operator.rs:23:14: 23:17
        _3 = parse::<i32>(move _4) -> bb1; // scope 0 at ui/try-operator.rs:23:8: 23:18
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:23:8: 23:13
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {parse::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Result<i32, ParseIntError> as Try>::branch(move _3) -> bb2; // scope 0 at ui/try-operator.rs:23:8: 23:19
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:23:8: 23:19
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> ControlFlow<<Result<i32, ParseIntError> as Try>::Residual, <Result<i32, ParseIntError> as Try>::Output> {<Result<i32, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = discriminant(_2);           // scope 0 at ui/try-operator.rs:23:8: 23:19
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at ui/try-operator.rs:23:8: 23:19
    }

    bb3: {
        _9 = ((_2 as Continue).0: i32);  // scope 0 at ui/try-operator.rs:23:8: 23:19
        _1 = _9;                         // scope 4 at ui/try-operator.rs:23:8: 23:19
        _0 = Result::<i32, ParseIntError>::Ok(move _1); // scope 0 at ui/try-operator.rs:23:5: 23:20
        goto -> bb6;                     // scope 0 at ui/try-operator.rs:24:2: 24:2
    }

    bb4: {
        unreachable;                     // scope 0 at ui/try-operator.rs:23:8: 23:19
    }

    bb5: {
        _7 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 0 at ui/try-operator.rs:23:18: 23:19
        _8 = move _7;                    // scope 2 at ui/try-operator.rs:23:18: 23:19
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _8) -> bb6; // scope 2 at ui/try-operator.rs:23:8: 23:19
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:23:18: 23:19
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, ParseIntError> {<Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/try-operator.rs:24:2: 24:2
    }
}

fn parse(_1: &str) -> Result<T, <T as FromStr>::Err> {
    debug s => _1;                       // in scope 0 at ui/try-operator.rs:19:26: 19:27
    let mut _0: std::result::Result<T, <T as std::str::FromStr>::Err>; // return place in scope 0 at ui/try-operator.rs:19:38: 19:55
    let mut _2: &str;                    // in scope 0 at ui/try-operator.rs:20:9: 20:18

    bb0: {
        _2 = _1;                         // scope 0 at ui/try-operator.rs:20:9: 20:18
        _0 = core::str::<impl str>::parse::<T>(move _2) -> bb1; // scope 0 at ui/try-operator.rs:20:9: 20:18
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:20:11: 20:16
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<T, <T as FromStr>::Err> {core::str::<impl str>::parse::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/try-operator.rs:21:6: 21:6
    }
}

fn nested() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at ui/try-operator.rs:26:16: 26:42
    let mut _1: i32;                     // in scope 0 at ui/try-operator.rs:27:8: 27:48
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator.rs:27:8: 27:48
    let mut _3: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:27:8: 27:47
    let mut _4: &str;                    // in scope 0 at ui/try-operator.rs:27:8: 27:47
    let _5: &str;                        // in scope 0 at ui/try-operator.rs:27:8: 27:47
    let mut _6: &std::string::String;    // in scope 0 at ui/try-operator.rs:27:8: 27:47
    let _7: std::string::String;         // in scope 0 at ui/try-operator.rs:27:8: 27:39
    let mut _8: &i32;                    // in scope 0 at ui/try-operator.rs:27:8: 27:39
    let _9: i32;                         // in scope 0 at ui/try-operator.rs:27:8: 27:27
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator.rs:27:8: 27:27
    let mut _11: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:27:8: 27:26
    let mut _12: &str;                   // in scope 0 at ui/try-operator.rs:27:8: 27:26
    let _13: &str;                       // in scope 0 at ui/try-operator.rs:27:8: 27:11
    let mut _14: isize;                  // in scope 0 at ui/try-operator.rs:27:26: 27:27
    let _15: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:27:26: 27:27
    let mut _16: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:27:26: 27:27
    let _17: i32;                        // in scope 0 at ui/try-operator.rs:27:8: 27:27
    let mut _18: isize;                  // in scope 0 at ui/try-operator.rs:27:47: 27:48
    let _19: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:27:47: 27:48
    let mut _20: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:27:47: 27:48
    let _21: i32;                        // in scope 0 at ui/try-operator.rs:27:8: 27:48
    scope 1 {
        debug residual => _15;           // in scope 1 at ui/try-operator.rs:27:26: 27:27
        scope 2 {
        }
    }
    scope 3 {
        debug val => _17;                // in scope 3 at ui/try-operator.rs:27:8: 27:27
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _19;           // in scope 5 at ui/try-operator.rs:27:47: 27:48
        scope 6 {
        }
    }
    scope 7 {
        debug val => _21;                // in scope 7 at ui/try-operator.rs:27:8: 27:48
        scope 8 {
        }
    }

    bb0: {
        _13 = const "5";                 // scope 0 at ui/try-operator.rs:27:8: 27:11
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:27:8: 27:11
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = _13;                       // scope 0 at ui/try-operator.rs:27:8: 27:26
        _11 = core::str::<impl str>::parse::<i32>(move _12) -> bb1; // scope 0 at ui/try-operator.rs:27:8: 27:26
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:27:12: 27:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = <Result<i32, ParseIntError> as Try>::branch(move _11) -> bb2; // scope 0 at ui/try-operator.rs:27:8: 27:27
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:27:8: 27:27
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> ControlFlow<<Result<i32, ParseIntError> as Try>::Residual, <Result<i32, ParseIntError> as Try>::Output> {<Result<i32, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _14 = discriminant(_10);         // scope 0 at ui/try-operator.rs:27:8: 27:27
        switchInt(move _14) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at ui/try-operator.rs:27:8: 27:27
    }

    bb3: {
        _17 = ((_10 as Continue).0: i32); // scope 0 at ui/try-operator.rs:27:8: 27:27
        _9 = _17;                        // scope 4 at ui/try-operator.rs:27:8: 27:27
        _8 = &_9;                        // scope 0 at ui/try-operator.rs:27:8: 27:39
        _7 = <i32 as ToString>::to_string(move _8) -> bb6; // scope 0 at ui/try-operator.rs:27:8: 27:39
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:27:28: 27:37
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> String {<i32 as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb4: {
        unreachable;                     // scope 0 at ui/try-operator.rs:27:8: 27:27
    }

    bb5: {
        _15 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 0 at ui/try-operator.rs:27:26: 27:27
        _16 = move _15;                  // scope 2 at ui/try-operator.rs:27:26: 27:27
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _16) -> bb14; // scope 2 at ui/try-operator.rs:27:8: 27:27
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:27:26: 27:27
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, ParseIntError> {<Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        _6 = &_7;                        // scope 0 at ui/try-operator.rs:27:8: 27:47
        _5 = <String as Deref>::deref(move _6) -> [return: bb7, unwind: bb15]; // scope 0 at ui/try-operator.rs:27:8: 27:47
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:27:8: 27:47
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb7: {
        _4 = _5;                         // scope 0 at ui/try-operator.rs:27:8: 27:47
        _3 = core::str::<impl str>::parse::<i32>(move _4) -> [return: bb8, unwind: bb15]; // scope 0 at ui/try-operator.rs:27:8: 27:47
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:27:40: 27:45
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb8: {
        _2 = <Result<i32, ParseIntError> as Try>::branch(move _3) -> [return: bb9, unwind: bb15]; // scope 0 at ui/try-operator.rs:27:8: 27:48
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:27:8: 27:48
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> ControlFlow<<Result<i32, ParseIntError> as Try>::Residual, <Result<i32, ParseIntError> as Try>::Output> {<Result<i32, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb9: {
        _18 = discriminant(_2);          // scope 0 at ui/try-operator.rs:27:8: 27:48
        switchInt(move _18) -> [0: bb10, 1: bb12, otherwise: bb11]; // scope 0 at ui/try-operator.rs:27:8: 27:48
    }

    bb10: {
        _21 = ((_2 as Continue).0: i32); // scope 0 at ui/try-operator.rs:27:8: 27:48
        _1 = _21;                        // scope 8 at ui/try-operator.rs:27:8: 27:48
        _0 = Result::<i32, ParseIntError>::Ok(move _1); // scope 0 at ui/try-operator.rs:27:5: 27:49
        drop(_7) -> bb14;                // scope 0 at ui/try-operator.rs:28:1: 28:2
    }

    bb11: {
        unreachable;                     // scope 0 at ui/try-operator.rs:27:8: 27:48
    }

    bb12: {
        _19 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 0 at ui/try-operator.rs:27:47: 27:48
        _20 = move _19;                  // scope 6 at ui/try-operator.rs:27:47: 27:48
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _20) -> [return: bb13, unwind: bb15]; // scope 6 at ui/try-operator.rs:27:8: 27:48
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:27:47: 27:48
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, ParseIntError> {<Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb13: {
        drop(_7) -> bb14;                // scope 0 at ui/try-operator.rs:28:1: 28:2
    }

    bb14: {
        return;                          // scope 0 at ui/try-operator.rs:28:2: 28:2
    }

    bb15 (cleanup): {
        drop(_7) -> bb16;                // scope 0 at ui/try-operator.rs:28:1: 28:2
    }

    bb16 (cleanup): {
        resume;                          // scope 0 at ui/try-operator.rs:26:1: 28:2
    }
}

fn on_path() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at ui/try-operator.rs:30:17: 30:43
    let _1: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:31:9: 31:10
    let mut _2: &str;                    // in scope 0 at ui/try-operator.rs:31:13: 31:31
    let _3: &str;                        // in scope 0 at ui/try-operator.rs:31:13: 31:16
    let mut _4: i32;                     // in scope 0 at ui/try-operator.rs:33:8: 33:10
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator.rs:33:8: 33:10
    let mut _6: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:33:8: 33:9
    let mut _7: isize;                   // in scope 0 at ui/try-operator.rs:33:9: 33:10
    let mut _9: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:33:9: 33:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/try-operator.rs:31:9: 31:10
        let _8: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 1 at ui/try-operator.rs:33:9: 33:10
        let _10: i32;                    // in scope 1 at ui/try-operator.rs:33:8: 33:10
        scope 2 {
            debug residual => _8;        // in scope 2 at ui/try-operator.rs:33:9: 33:10
            scope 3 {
            }
        }
        scope 4 {
            debug val => _10;            // in scope 4 at ui/try-operator.rs:33:8: 33:10
            scope 5 {
            }
        }
    }

    bb0: {
        _3 = const "6";                  // scope 0 at ui/try-operator.rs:31:13: 31:16
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:31:13: 31:16
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at ui/try-operator.rs:31:13: 31:31
        _1 = core::str::<impl str>::parse::<i32>(move _2) -> bb1; // scope 0 at ui/try-operator.rs:31:13: 31:31
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:31:17: 31:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = move _1;                    // scope 1 at ui/try-operator.rs:33:8: 33:9
        _5 = <Result<i32, ParseIntError> as Try>::branch(move _6) -> bb2; // scope 1 at ui/try-operator.rs:33:8: 33:10
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:33:8: 33:10
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> ControlFlow<<Result<i32, ParseIntError> as Try>::Residual, <Result<i32, ParseIntError> as Try>::Output> {<Result<i32, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = discriminant(_5);           // scope 1 at ui/try-operator.rs:33:8: 33:10
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 1 at ui/try-operator.rs:33:8: 33:10
    }

    bb3: {
        _10 = ((_5 as Continue).0: i32); // scope 1 at ui/try-operator.rs:33:8: 33:10
        _4 = _10;                        // scope 5 at ui/try-operator.rs:33:8: 33:10
        _0 = Result::<i32, ParseIntError>::Ok(move _4); // scope 1 at ui/try-operator.rs:33:5: 33:11
        goto -> bb6;                     // scope 0 at ui/try-operator.rs:34:2: 34:2
    }

    bb4: {
        unreachable;                     // scope 1 at ui/try-operator.rs:33:8: 33:10
    }

    bb5: {
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 1 at ui/try-operator.rs:33:9: 33:10
        _9 = move _8;                    // scope 3 at ui/try-operator.rs:33:9: 33:10
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _9) -> bb6; // scope 3 at ui/try-operator.rs:33:8: 33:10
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:33:9: 33:10
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, ParseIntError> {<Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/try-operator.rs:34:2: 34:2
    }
}

fn on_macro() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at ui/try-operator.rs:36:18: 36:44
    let mut _1: i32;                     // in scope 0 at ui/try-operator.rs:41:8: 41:32
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator.rs:41:8: 41:32
    let mut _3: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:41:12: 41:30
    let mut _4: &str;                    // in scope 0 at ui/try-operator.rs:41:12: 41:30
    let _5: &str;                        // in scope 0 at ui/try-operator.rs:41:12: 41:15
    let mut _6: isize;                   // in scope 0 at ui/try-operator.rs:41:31: 41:32
    let _7: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:41:31: 41:32
    let mut _8: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:41:31: 41:32
    let _9: i32;                         // in scope 0 at ui/try-operator.rs:41:8: 41:32
    scope 1 {
        debug residual => _7;            // in scope 1 at ui/try-operator.rs:41:31: 41:32
        scope 2 {
        }
    }
    scope 3 {
        debug val => _9;                 // in scope 3 at ui/try-operator.rs:41:8: 41:32
        scope 4 {
        }
    }

    bb0: {
        _5 = const "7";                  // scope 0 at ui/try-operator.rs:41:12: 41:15
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:41:12: 41:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/try-operator.rs:41:12: 41:30
        _3 = core::str::<impl str>::parse::<i32>(move _4) -> bb1; // scope 0 at ui/try-operator.rs:41:12: 41:30
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:41:16: 41:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Result<i32, ParseIntError> as Try>::branch(move _3) -> bb2; // scope 0 at ui/try-operator.rs:41:8: 41:32
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:41:8: 41:32
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> ControlFlow<<Result<i32, ParseIntError> as Try>::Residual, <Result<i32, ParseIntError> as Try>::Output> {<Result<i32, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = discriminant(_2);           // scope 0 at ui/try-operator.rs:41:8: 41:32
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at ui/try-operator.rs:41:8: 41:32
    }

    bb3: {
        _9 = ((_2 as Continue).0: i32);  // scope 0 at ui/try-operator.rs:41:8: 41:32
        _1 = _9;                         // scope 4 at ui/try-operator.rs:41:8: 41:32
        _0 = Result::<i32, ParseIntError>::Ok(move _1); // scope 0 at ui/try-operator.rs:41:5: 41:33
        goto -> bb6;                     // scope 0 at ui/try-operator.rs:42:2: 42:2
    }

    bb4: {
        unreachable;                     // scope 0 at ui/try-operator.rs:41:8: 41:32
    }

    bb5: {
        _7 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 0 at ui/try-operator.rs:41:31: 41:32
        _8 = move _7;                    // scope 2 at ui/try-operator.rs:41:31: 41:32
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _8) -> bb6; // scope 2 at ui/try-operator.rs:41:8: 41:32
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:41:31: 41:32
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, ParseIntError> {<Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/try-operator.rs:42:2: 42:2
    }
}

fn on_parens() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at ui/try-operator.rs:44:19: 44:45
    let _1: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:45:9: 45:10
    let mut _2: &str;                    // in scope 0 at ui/try-operator.rs:45:13: 45:31
    let _3: &str;                        // in scope 0 at ui/try-operator.rs:45:13: 45:16
    let mut _4: i32;                     // in scope 0 at ui/try-operator.rs:47:8: 47:12
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator.rs:47:8: 47:12
    let mut _6: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:47:8: 47:11
    let mut _7: isize;                   // in scope 0 at ui/try-operator.rs:47:11: 47:12
    let mut _9: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:47:11: 47:12
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/try-operator.rs:45:9: 45:10
        let _8: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 1 at ui/try-operator.rs:47:11: 47:12
        let _10: i32;                    // in scope 1 at ui/try-operator.rs:47:8: 47:12
        scope 2 {
            debug residual => _8;        // in scope 2 at ui/try-operator.rs:47:11: 47:12
            scope 3 {
            }
        }
        scope 4 {
            debug val => _10;            // in scope 4 at ui/try-operator.rs:47:8: 47:12
            scope 5 {
            }
        }
    }

    bb0: {
        _3 = const "8";                  // scope 0 at ui/try-operator.rs:45:13: 45:16
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:45:13: 45:16
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at ui/try-operator.rs:45:13: 45:31
        _1 = core::str::<impl str>::parse::<i32>(move _2) -> bb1; // scope 0 at ui/try-operator.rs:45:13: 45:31
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:45:17: 45:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = move _1;                    // scope 1 at ui/try-operator.rs:47:8: 47:11
        _5 = <Result<i32, ParseIntError> as Try>::branch(move _6) -> bb2; // scope 1 at ui/try-operator.rs:47:8: 47:12
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:47:8: 47:12
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> ControlFlow<<Result<i32, ParseIntError> as Try>::Residual, <Result<i32, ParseIntError> as Try>::Output> {<Result<i32, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = discriminant(_5);           // scope 1 at ui/try-operator.rs:47:8: 47:12
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 1 at ui/try-operator.rs:47:8: 47:12
    }

    bb3: {
        _10 = ((_5 as Continue).0: i32); // scope 1 at ui/try-operator.rs:47:8: 47:12
        _4 = _10;                        // scope 5 at ui/try-operator.rs:47:8: 47:12
        _0 = Result::<i32, ParseIntError>::Ok(move _4); // scope 1 at ui/try-operator.rs:47:5: 47:13
        goto -> bb6;                     // scope 0 at ui/try-operator.rs:48:2: 48:2
    }

    bb4: {
        unreachable;                     // scope 1 at ui/try-operator.rs:47:8: 47:12
    }

    bb5: {
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 1 at ui/try-operator.rs:47:11: 47:12
        _9 = move _8;                    // scope 3 at ui/try-operator.rs:47:11: 47:12
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _9) -> bb6; // scope 3 at ui/try-operator.rs:47:8: 47:12
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:47:11: 47:12
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, ParseIntError> {<Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/try-operator.rs:48:2: 48:2
    }
}

fn on_block() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at ui/try-operator.rs:50:18: 50:44
    let _1: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:51:9: 51:10
    let mut _2: &str;                    // in scope 0 at ui/try-operator.rs:51:13: 51:31
    let _3: &str;                        // in scope 0 at ui/try-operator.rs:51:13: 51:16
    let mut _4: i32;                     // in scope 0 at ui/try-operator.rs:53:8: 53:12
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator.rs:53:8: 53:12
    let mut _6: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:53:8: 53:11
    let mut _7: isize;                   // in scope 0 at ui/try-operator.rs:53:11: 53:12
    let mut _9: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:53:11: 53:12
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/try-operator.rs:51:9: 51:10
        let _8: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 1 at ui/try-operator.rs:53:11: 53:12
        let _10: i32;                    // in scope 1 at ui/try-operator.rs:53:8: 53:12
        scope 2 {
            debug residual => _8;        // in scope 2 at ui/try-operator.rs:53:11: 53:12
            scope 3 {
            }
        }
        scope 4 {
            debug val => _10;            // in scope 4 at ui/try-operator.rs:53:8: 53:12
            scope 5 {
            }
        }
    }

    bb0: {
        _3 = const "9";                  // scope 0 at ui/try-operator.rs:51:13: 51:16
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:51:13: 51:16
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at ui/try-operator.rs:51:13: 51:31
        _1 = core::str::<impl str>::parse::<i32>(move _2) -> bb1; // scope 0 at ui/try-operator.rs:51:13: 51:31
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:51:17: 51:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = move _1;                    // scope 1 at ui/try-operator.rs:53:9: 53:10
        _5 = <Result<i32, ParseIntError> as Try>::branch(move _6) -> bb2; // scope 1 at ui/try-operator.rs:53:8: 53:12
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:53:8: 53:12
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> ControlFlow<<Result<i32, ParseIntError> as Try>::Residual, <Result<i32, ParseIntError> as Try>::Output> {<Result<i32, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = discriminant(_5);           // scope 1 at ui/try-operator.rs:53:8: 53:12
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 1 at ui/try-operator.rs:53:8: 53:12
    }

    bb3: {
        _10 = ((_5 as Continue).0: i32); // scope 1 at ui/try-operator.rs:53:8: 53:12
        _4 = _10;                        // scope 5 at ui/try-operator.rs:53:8: 53:12
        _0 = Result::<i32, ParseIntError>::Ok(move _4); // scope 1 at ui/try-operator.rs:53:5: 53:13
        goto -> bb6;                     // scope 0 at ui/try-operator.rs:54:2: 54:2
    }

    bb4: {
        unreachable;                     // scope 1 at ui/try-operator.rs:53:8: 53:12
    }

    bb5: {
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 1 at ui/try-operator.rs:53:11: 53:12
        _9 = move _8;                    // scope 3 at ui/try-operator.rs:53:11: 53:12
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _9) -> bb6; // scope 3 at ui/try-operator.rs:53:8: 53:12
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:53:11: 53:12
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, ParseIntError> {<Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/try-operator.rs:54:2: 54:2
    }
}

fn on_field() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at ui/try-operator.rs:56:18: 56:44
    let _1: on_field::Pair<std::result::Result<i32, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator.rs:59:9: 59:10
    let mut _2: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:59:23: 59:42
    let mut _3: &str;                    // in scope 0 at ui/try-operator.rs:59:23: 59:42
    let _4: &str;                        // in scope 0 at ui/try-operator.rs:59:23: 59:27
    let mut _5: i32;                     // in scope 0 at ui/try-operator.rs:61:8: 61:12
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator.rs:61:8: 61:12
    let mut _7: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:61:8: 61:11
    let mut _8: isize;                   // in scope 0 at ui/try-operator.rs:61:11: 61:12
    let mut _10: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:61:11: 61:12
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/try-operator.rs:59:9: 59:10
        let _9: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 1 at ui/try-operator.rs:61:11: 61:12
        let _11: i32;                    // in scope 1 at ui/try-operator.rs:61:8: 61:12
        scope 2 {
            debug residual => _9;        // in scope 2 at ui/try-operator.rs:61:11: 61:12
            scope 3 {
            }
        }
        scope 4 {
            debug val => _11;            // in scope 4 at ui/try-operator.rs:61:8: 61:12
            scope 5 {
            }
        }
    }

    bb0: {
        _4 = const "10";                 // scope 0 at ui/try-operator.rs:59:23: 59:27
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:59:23: 59:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/try-operator.rs:59:23: 59:42
        _2 = core::str::<impl str>::parse::<i32>(move _3) -> bb1; // scope 0 at ui/try-operator.rs:59:23: 59:42
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:59:28: 59:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Pair::<Result<i32, ParseIntError>, i32> { a: move _2, b: const 0_i32 }; // scope 0 at ui/try-operator.rs:59:13: 59:50
        _7 = move (_1.0: std::result::Result<i32, std::num::ParseIntError>); // scope 1 at ui/try-operator.rs:61:8: 61:11
        _6 = <Result<i32, ParseIntError> as Try>::branch(move _7) -> bb2; // scope 1 at ui/try-operator.rs:61:8: 61:12
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:61:8: 61:12
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> ControlFlow<<Result<i32, ParseIntError> as Try>::Residual, <Result<i32, ParseIntError> as Try>::Output> {<Result<i32, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = discriminant(_6);           // scope 1 at ui/try-operator.rs:61:8: 61:12
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 1 at ui/try-operator.rs:61:8: 61:12
    }

    bb3: {
        _11 = ((_6 as Continue).0: i32); // scope 1 at ui/try-operator.rs:61:8: 61:12
        _5 = _11;                        // scope 5 at ui/try-operator.rs:61:8: 61:12
        _0 = Result::<i32, ParseIntError>::Ok(move _5); // scope 1 at ui/try-operator.rs:61:5: 61:13
        goto -> bb6;                     // scope 0 at ui/try-operator.rs:62:2: 62:2
    }

    bb4: {
        unreachable;                     // scope 1 at ui/try-operator.rs:61:8: 61:12
    }

    bb5: {
        _9 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 1 at ui/try-operator.rs:61:11: 61:12
        _10 = move _9;                   // scope 3 at ui/try-operator.rs:61:11: 61:12
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _10) -> bb6; // scope 3 at ui/try-operator.rs:61:8: 61:12
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:61:11: 61:12
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, ParseIntError> {<Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/try-operator.rs:62:2: 62:2
    }
}

fn on_tuple_field() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at ui/try-operator.rs:64:24: 64:50
    let _1: (std::result::Result<i32, std::num::ParseIntError>, i32); // in scope 0 at ui/try-operator.rs:65:9: 65:10
    let mut _2: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:65:14: 65:33
    let mut _3: &str;                    // in scope 0 at ui/try-operator.rs:65:14: 65:33
    let _4: &str;                        // in scope 0 at ui/try-operator.rs:65:14: 65:18
    let mut _5: i32;                     // in scope 0 at ui/try-operator.rs:67:8: 67:12
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator.rs:67:8: 67:12
    let mut _7: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:67:8: 67:11
    let mut _8: isize;                   // in scope 0 at ui/try-operator.rs:67:11: 67:12
    let mut _10: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:67:11: 67:12
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/try-operator.rs:65:9: 65:10
        let _9: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 1 at ui/try-operator.rs:67:11: 67:12
        let _11: i32;                    // in scope 1 at ui/try-operator.rs:67:8: 67:12
        scope 2 {
            debug residual => _9;        // in scope 2 at ui/try-operator.rs:67:11: 67:12
            scope 3 {
            }
        }
        scope 4 {
            debug val => _11;            // in scope 4 at ui/try-operator.rs:67:8: 67:12
            scope 5 {
            }
        }
    }

    bb0: {
        _4 = const "11";                 // scope 0 at ui/try-operator.rs:65:14: 65:18
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:65:14: 65:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/try-operator.rs:65:14: 65:33
        _2 = core::str::<impl str>::parse::<i32>(move _3) -> bb1; // scope 0 at ui/try-operator.rs:65:14: 65:33
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:65:19: 65:24
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = (move _2, const 0_i32);     // scope 0 at ui/try-operator.rs:65:13: 65:37
        _7 = move (_1.0: std::result::Result<i32, std::num::ParseIntError>); // scope 1 at ui/try-operator.rs:67:8: 67:11
        _6 = <Result<i32, ParseIntError> as Try>::branch(move _7) -> bb2; // scope 1 at ui/try-operator.rs:67:8: 67:12
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:67:8: 67:12
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> ControlFlow<<Result<i32, ParseIntError> as Try>::Residual, <Result<i32, ParseIntError> as Try>::Output> {<Result<i32, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = discriminant(_6);           // scope 1 at ui/try-operator.rs:67:8: 67:12
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 1 at ui/try-operator.rs:67:8: 67:12
    }

    bb3: {
        _11 = ((_6 as Continue).0: i32); // scope 1 at ui/try-operator.rs:67:8: 67:12
        _5 = _11;                        // scope 5 at ui/try-operator.rs:67:8: 67:12
        _0 = Result::<i32, ParseIntError>::Ok(move _5); // scope 1 at ui/try-operator.rs:67:5: 67:13
        goto -> bb6;                     // scope 0 at ui/try-operator.rs:68:2: 68:2
    }

    bb4: {
        unreachable;                     // scope 1 at ui/try-operator.rs:67:8: 67:12
    }

    bb5: {
        _9 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 1 at ui/try-operator.rs:67:11: 67:12
        _10 = move _9;                   // scope 3 at ui/try-operator.rs:67:11: 67:12
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _10) -> bb6; // scope 3 at ui/try-operator.rs:67:8: 67:12
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:67:11: 67:12
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, ParseIntError> {<Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/try-operator.rs:68:2: 68:2
    }
}

fn on_try() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at ui/try-operator.rs:70:16: 70:42
    let _1: std::result::Result<std::result::Result<i32, std::num::ParseIntError>, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:71:9: 71:10
    let mut _2: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:71:13: 71:32
    let mut _3: &str;                    // in scope 0 at ui/try-operator.rs:71:13: 71:32
    let _4: &str;                        // in scope 0 at ui/try-operator.rs:71:13: 71:17
    let mut _5: [closure@ui/try-operator.rs:71:37: 71:40]; // in scope 0 at ui/try-operator.rs:71:37: 71:69
    let mut _6: i32;                     // in scope 0 at ui/try-operator.rs:73:8: 73:11
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator.rs:73:8: 73:11
    let mut _8: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:73:8: 73:10
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, std::result::Result<i32, std::num::ParseIntError>>; // in scope 0 at ui/try-operator.rs:73:8: 73:10
    let mut _10: std::result::Result<std::result::Result<i32, std::num::ParseIntError>, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:73:8: 73:9
    let mut _11: isize;                  // in scope 0 at ui/try-operator.rs:73:9: 73:10
    let mut _13: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:73:9: 73:10
    let mut _15: isize;                  // in scope 0 at ui/try-operator.rs:73:10: 73:11
    let mut _17: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:73:10: 73:11
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/try-operator.rs:71:9: 71:10
        let _12: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 1 at ui/try-operator.rs:73:9: 73:10
        let _14: std::result::Result<i32, std::num::ParseIntError>; // in scope 1 at ui/try-operator.rs:73:8: 73:10
        let _16: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 1 at ui/try-operator.rs:73:10: 73:11
        let _18: i32;                    // in scope 1 at ui/try-operator.rs:73:8: 73:11
        scope 2 {
            debug residual => _12;       // in scope 2 at ui/try-operator.rs:73:9: 73:10
            scope 3 {
            }
        }
        scope 4 {
            debug val => _14;            // in scope 4 at ui/try-operator.rs:73:8: 73:10
            scope 5 {
            }
        }
        scope 6 {
            debug residual => _16;       // in scope 6 at ui/try-operator.rs:73:10: 73:11
            scope 7 {
            }
        }
        scope 8 {
            debug val => _18;            // in scope 8 at ui/try-operator.rs:73:8: 73:11
            scope 9 {
            }
        }
    }

    bb0: {
        _4 = const "12";                 // scope 0 at ui/try-operator.rs:71:13: 71:17
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:71:13: 71:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/try-operator.rs:71:13: 71:32
        _2 = core::str::<impl str>::parse::<i32>(move _3) -> bb1; // scope 0 at ui/try-operator.rs:71:13: 71:32
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:71:18: 71:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Result::<i32, ParseIntError>::map::<Result<i32, ParseIntError>, [closure@ui/try-operator.rs:71:37: 71:40]>(move _2, move _5) -> bb2; // scope 0 at ui/try-operator.rs:71:13: 71:70
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:71:33: 71:36
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>, [closure@ui/try-operator.rs:71:37: 71:40]) -> Result<Result<i32, ParseIntError>, ParseIntError> {Result::<i32, ParseIntError>::map::<Result<i32, ParseIntError>, [closure@ui/try-operator.rs:71:37: 71:40]>}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = move _1;                   // scope 1 at ui/try-operator.rs:73:8: 73:9
        _9 = <Result<Result<i32, ParseIntError>, ParseIntError> as Try>::branch(move _10) -> bb3; // scope 1 at ui/try-operator.rs:73:8: 73:10
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:73:8: 73:10
                                         // + literal: Const { ty: fn(Result<Result<i32, ParseIntError>, ParseIntError>) -> ControlFlow<<Result<Result<i32, ParseIntError>, ParseIntError> as Try>::Residual, <Result<Result<i32, ParseIntError>, ParseIntError> as Try>::Output> {<Result<Result<i32, ParseIntError>, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = discriminant(_9);          // scope 1 at ui/try-operator.rs:73:8: 73:10
        switchInt(move _11) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 1 at ui/try-operator.rs:73:8: 73:10
    }

    bb4: {
        _14 = move ((_9 as Continue).0: std::result::Result<i32, std::num::ParseIntError>); // scope 1 at ui/try-operator.rs:73:8: 73:10
        _8 = move _14;                   // scope 5 at ui/try-operator.rs:73:8: 73:10
        _7 = <Result<i32, ParseIntError> as Try>::branch(move _8) -> bb7; // scope 1 at ui/try-operator.rs:73:8: 73:11
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:73:8: 73:11
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> ControlFlow<<Result<i32, ParseIntError> as Try>::Residual, <Result<i32, ParseIntError> as Try>::Output> {<Result<i32, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 1 at ui/try-operator.rs:73:8: 73:10
    }

    bb6: {
        _12 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 1 at ui/try-operator.rs:73:9: 73:10
        _13 = move _12;                  // scope 3 at ui/try-operator.rs:73:9: 73:10
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _13) -> bb11; // scope 3 at ui/try-operator.rs:73:8: 73:10
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:73:9: 73:10
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, ParseIntError> {<Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb7: {
        _15 = discriminant(_7);          // scope 1 at ui/try-operator.rs:73:8: 73:11
        switchInt(move _15) -> [0: bb8, 1: bb10, otherwise: bb9]; // scope 1 at ui/try-operator.rs:73:8: 73:11
    }

    bb8: {
        _18 = ((_7 as Continue).0: i32); // scope 1 at ui/try-operator.rs:73:8: 73:11
        _6 = _18;                        // scope 9 at ui/try-operator.rs:73:8: 73:11
        _0 = Result::<i32, ParseIntError>::Ok(move _6); // scope 1 at ui/try-operator.rs:73:5: 73:12
        goto -> bb11;                    // scope 0 at ui/try-operator.rs:74:2: 74:2
    }

    bb9: {
        unreachable;                     // scope 1 at ui/try-operator.rs:73:8: 73:11
    }

    bb10: {
        _16 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 1 at ui/try-operator.rs:73:10: 73:11
        _17 = move _16;                  // scope 7 at ui/try-operator.rs:73:10: 73:11
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _17) -> bb11; // scope 7 at ui/try-operator.rs:73:8: 73:11
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:73:10: 73:11
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, ParseIntError> {<Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb11: {
        return;                          // scope 0 at ui/try-operator.rs:74:2: 74:2
    }
}

fn on_try::{closure#0}(_1: [closure@ui/try-operator.rs:71:37: 71:40], _2: i32) -> Result<i32, ParseIntError> {
    debug i => _2;                       // in scope 0 at ui/try-operator.rs:71:38: 71:39
    let mut _0: std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at ui/try-operator.rs:71:41: 71:41
    let mut _3: &str;                    // in scope 0 at ui/try-operator.rs:71:41: 71:69
    let _4: &str;                        // in scope 0 at ui/try-operator.rs:71:41: 71:69
    let mut _5: &std::string::String;    // in scope 0 at ui/try-operator.rs:71:41: 71:69
    let _6: std::string::String;         // in scope 0 at ui/try-operator.rs:71:41: 71:54
    let mut _7: &i32;                    // in scope 0 at ui/try-operator.rs:71:41: 71:54

    bb0: {
        _7 = &_2;                        // scope 0 at ui/try-operator.rs:71:41: 71:54
        _6 = <i32 as ToString>::to_string(move _7) -> bb1; // scope 0 at ui/try-operator.rs:71:41: 71:54
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:71:43: 71:52
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> String {<i32 as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_6;                        // scope 0 at ui/try-operator.rs:71:41: 71:69
        _4 = <String as Deref>::deref(move _5) -> [return: bb2, unwind: bb5]; // scope 0 at ui/try-operator.rs:71:41: 71:69
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:71:41: 71:69
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = _4;                         // scope 0 at ui/try-operator.rs:71:41: 71:69
        _0 = core::str::<impl str>::parse::<i32>(move _3) -> [return: bb3, unwind: bb5]; // scope 0 at ui/try-operator.rs:71:41: 71:69
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:71:55: 71:60
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_6) -> bb4;                 // scope 0 at ui/try-operator.rs:71:68: 71:69
    }

    bb4: {
        return;                          // scope 0 at ui/try-operator.rs:71:69: 71:69
    }

    bb5 (cleanup): {
        drop(_6) -> bb6;                 // scope 0 at ui/try-operator.rs:71:68: 71:69
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/try-operator.rs:71:37: 71:69
    }
}

fn on_binary_op() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at ui/try-operator.rs:76:22: 76:48
    let _1: i32;                         // in scope 0 at ui/try-operator.rs:77:9: 77:10
    let mut _2: i32;                     // in scope 0 at ui/try-operator.rs:77:18: 77:38
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator.rs:77:18: 77:38
    let mut _4: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:77:18: 77:37
    let mut _5: &str;                    // in scope 0 at ui/try-operator.rs:77:18: 77:37
    let _6: &str;                        // in scope 0 at ui/try-operator.rs:77:18: 77:22
    let mut _7: isize;                   // in scope 0 at ui/try-operator.rs:77:37: 77:38
    let _8: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:77:37: 77:38
    let mut _9: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:77:37: 77:38
    let _10: i32;                        // in scope 0 at ui/try-operator.rs:77:18: 77:38
    let mut _11: (i32, bool);            // in scope 0 at ui/try-operator.rs:77:13: 77:38
    let mut _13: i32;                    // in scope 0 at ui/try-operator.rs:78:13: 78:33
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator.rs:78:13: 78:33
    let mut _15: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:78:13: 78:32
    let mut _16: &str;                   // in scope 0 at ui/try-operator.rs:78:13: 78:32
    let _17: &str;                       // in scope 0 at ui/try-operator.rs:78:13: 78:17
    let mut _18: isize;                  // in scope 0 at ui/try-operator.rs:78:32: 78:33
    let mut _20: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:78:32: 78:33
    let mut _22: (i32, bool);            // in scope 0 at ui/try-operator.rs:78:13: 78:38
    let mut _24: i32;                    // in scope 0 at ui/try-operator.rs:79:13: 79:33
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator.rs:79:13: 79:33
    let mut _26: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:79:13: 79:32
    let mut _27: &str;                   // in scope 0 at ui/try-operator.rs:79:13: 79:32
    let _28: &str;                       // in scope 0 at ui/try-operator.rs:79:13: 79:17
    let mut _29: isize;                  // in scope 0 at ui/try-operator.rs:79:32: 79:33
    let mut _31: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:79:32: 79:33
    let mut _33: i32;                    // in scope 0 at ui/try-operator.rs:79:36: 79:56
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator.rs:79:36: 79:56
    let mut _35: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:79:36: 79:55
    let mut _36: &str;                   // in scope 0 at ui/try-operator.rs:79:36: 79:55
    let _37: &str;                       // in scope 0 at ui/try-operator.rs:79:36: 79:40
    let mut _38: isize;                  // in scope 0 at ui/try-operator.rs:79:55: 79:56
    let mut _40: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:79:55: 79:56
    let mut _42: (i32, bool);            // in scope 0 at ui/try-operator.rs:79:13: 79:56
    let mut _43: i32;                    // in scope 0 at ui/try-operator.rs:81:8: 81:17
    let mut _44: i32;                    // in scope 0 at ui/try-operator.rs:81:8: 81:13
    let mut _45: i32;                    // in scope 0 at ui/try-operator.rs:81:8: 81:9
    let mut _46: i32;                    // in scope 0 at ui/try-operator.rs:81:12: 81:13
    let mut _47: (i32, bool);            // in scope 0 at ui/try-operator.rs:81:8: 81:13
    let mut _48: i32;                    // in scope 0 at ui/try-operator.rs:81:16: 81:17
    let mut _49: (i32, bool);            // in scope 0 at ui/try-operator.rs:81:8: 81:17
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/try-operator.rs:77:9: 77:10
        let _12: i32;                    // in scope 1 at ui/try-operator.rs:78:9: 78:10
        let _19: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 1 at ui/try-operator.rs:78:32: 78:33
        let _21: i32;                    // in scope 1 at ui/try-operator.rs:78:13: 78:33
        scope 6 {
            debug y => _12;              // in scope 6 at ui/try-operator.rs:78:9: 78:10
            let _23: i32;                // in scope 6 at ui/try-operator.rs:79:9: 79:10
            let _30: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 6 at ui/try-operator.rs:79:32: 79:33
            let _32: i32;                // in scope 6 at ui/try-operator.rs:79:13: 79:33
            let _39: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 6 at ui/try-operator.rs:79:55: 79:56
            let _41: i32;                // in scope 6 at ui/try-operator.rs:79:36: 79:56
            scope 11 {
                debug z => _23;          // in scope 11 at ui/try-operator.rs:79:9: 79:10
            }
            scope 12 {
                debug residual => _30;   // in scope 12 at ui/try-operator.rs:79:32: 79:33
                scope 13 {
                }
            }
            scope 14 {
                debug val => _32;        // in scope 14 at ui/try-operator.rs:79:13: 79:33
                scope 15 {
                }
            }
            scope 16 {
                debug residual => _39;   // in scope 16 at ui/try-operator.rs:79:55: 79:56
                scope 17 {
                }
            }
            scope 18 {
                debug val => _41;        // in scope 18 at ui/try-operator.rs:79:36: 79:56
                scope 19 {
                }
            }
        }
        scope 7 {
            debug residual => _19;       // in scope 7 at ui/try-operator.rs:78:32: 78:33
            scope 8 {
            }
        }
        scope 9 {
            debug val => _21;            // in scope 9 at ui/try-operator.rs:78:13: 78:33
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _8;            // in scope 2 at ui/try-operator.rs:77:37: 77:38
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;                // in scope 4 at ui/try-operator.rs:77:18: 77:38
        scope 5 {
        }
    }

    bb0: {
        _6 = const "14";                 // scope 0 at ui/try-operator.rs:77:18: 77:22
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:77:18: 77:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 0 at ui/try-operator.rs:77:18: 77:37
        _4 = core::str::<impl str>::parse::<i32>(move _5) -> bb1; // scope 0 at ui/try-operator.rs:77:18: 77:37
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:77:23: 77:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <Result<i32, ParseIntError> as Try>::branch(move _4) -> bb2; // scope 0 at ui/try-operator.rs:77:18: 77:38
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:77:18: 77:38
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> ControlFlow<<Result<i32, ParseIntError> as Try>::Residual, <Result<i32, ParseIntError> as Try>::Output> {<Result<i32, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = discriminant(_3);           // scope 0 at ui/try-operator.rs:77:18: 77:38
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at ui/try-operator.rs:77:18: 77:38
    }

    bb3: {
        _10 = ((_3 as Continue).0: i32); // scope 0 at ui/try-operator.rs:77:18: 77:38
        _2 = _10;                        // scope 5 at ui/try-operator.rs:77:18: 77:38
        _11 = CheckedSub(const 13_i32, _2); // scope 0 at ui/try-operator.rs:77:13: 77:38
        assert(!move (_11.1: bool), "attempt to compute `{} - {}`, which would overflow", const 13_i32, move _2) -> bb6; // scope 0 at ui/try-operator.rs:77:13: 77:38
    }

    bb4: {
        unreachable;                     // scope 0 at ui/try-operator.rs:77:18: 77:38
    }

    bb5: {
        _8 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 0 at ui/try-operator.rs:77:37: 77:38
        _9 = move _8;                    // scope 3 at ui/try-operator.rs:77:37: 77:38
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _9) -> bb26; // scope 3 at ui/try-operator.rs:77:18: 77:38
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:77:37: 77:38
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, ParseIntError> {<Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        _1 = move (_11.0: i32);          // scope 0 at ui/try-operator.rs:77:13: 77:38
        _17 = const "15";                // scope 1 at ui/try-operator.rs:78:13: 78:17
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:78:13: 78:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _16 = _17;                       // scope 1 at ui/try-operator.rs:78:13: 78:32
        _15 = core::str::<impl str>::parse::<i32>(move _16) -> bb7; // scope 1 at ui/try-operator.rs:78:13: 78:32
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:78:18: 78:23
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = <Result<i32, ParseIntError> as Try>::branch(move _15) -> bb8; // scope 1 at ui/try-operator.rs:78:13: 78:33
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:78:13: 78:33
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> ControlFlow<<Result<i32, ParseIntError> as Try>::Residual, <Result<i32, ParseIntError> as Try>::Output> {<Result<i32, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb8: {
        _18 = discriminant(_14);         // scope 1 at ui/try-operator.rs:78:13: 78:33
        switchInt(move _18) -> [0: bb9, 1: bb11, otherwise: bb10]; // scope 1 at ui/try-operator.rs:78:13: 78:33
    }

    bb9: {
        _21 = ((_14 as Continue).0: i32); // scope 1 at ui/try-operator.rs:78:13: 78:33
        _13 = _21;                       // scope 10 at ui/try-operator.rs:78:13: 78:33
        _22 = CheckedSub(_13, const 16_i32); // scope 1 at ui/try-operator.rs:78:13: 78:38
        assert(!move (_22.1: bool), "attempt to compute `{} - {}`, which would overflow", move _13, const 16_i32) -> bb12; // scope 1 at ui/try-operator.rs:78:13: 78:38
    }

    bb10: {
        unreachable;                     // scope 1 at ui/try-operator.rs:78:13: 78:33
    }

    bb11: {
        _19 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 1 at ui/try-operator.rs:78:32: 78:33
        _20 = move _19;                  // scope 8 at ui/try-operator.rs:78:32: 78:33
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _20) -> bb26; // scope 8 at ui/try-operator.rs:78:13: 78:33
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:78:32: 78:33
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, ParseIntError> {<Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb12: {
        _12 = move (_22.0: i32);         // scope 1 at ui/try-operator.rs:78:13: 78:38
        _28 = const "17";                // scope 6 at ui/try-operator.rs:79:13: 79:17
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:79:13: 79:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _27 = _28;                       // scope 6 at ui/try-operator.rs:79:13: 79:32
        _26 = core::str::<impl str>::parse::<i32>(move _27) -> bb13; // scope 6 at ui/try-operator.rs:79:13: 79:32
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:79:18: 79:23
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb13: {
        _25 = <Result<i32, ParseIntError> as Try>::branch(move _26) -> bb14; // scope 6 at ui/try-operator.rs:79:13: 79:33
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:79:13: 79:33
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> ControlFlow<<Result<i32, ParseIntError> as Try>::Residual, <Result<i32, ParseIntError> as Try>::Output> {<Result<i32, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb14: {
        _29 = discriminant(_25);         // scope 6 at ui/try-operator.rs:79:13: 79:33
        switchInt(move _29) -> [0: bb15, 1: bb17, otherwise: bb16]; // scope 6 at ui/try-operator.rs:79:13: 79:33
    }

    bb15: {
        _32 = ((_25 as Continue).0: i32); // scope 6 at ui/try-operator.rs:79:13: 79:33
        _24 = _32;                       // scope 15 at ui/try-operator.rs:79:13: 79:33
        _37 = const "18";                // scope 6 at ui/try-operator.rs:79:36: 79:40
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:79:36: 79:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _36 = _37;                       // scope 6 at ui/try-operator.rs:79:36: 79:55
        _35 = core::str::<impl str>::parse::<i32>(move _36) -> bb18; // scope 6 at ui/try-operator.rs:79:36: 79:55
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:79:41: 79:46
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb16: {
        unreachable;                     // scope 6 at ui/try-operator.rs:79:13: 79:33
    }

    bb17: {
        _30 = move ((_25 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 6 at ui/try-operator.rs:79:32: 79:33
        _31 = move _30;                  // scope 13 at ui/try-operator.rs:79:32: 79:33
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _31) -> bb26; // scope 13 at ui/try-operator.rs:79:13: 79:33
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:79:32: 79:33
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, ParseIntError> {<Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb18: {
        _34 = <Result<i32, ParseIntError> as Try>::branch(move _35) -> bb19; // scope 6 at ui/try-operator.rs:79:36: 79:56
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:79:36: 79:56
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> ControlFlow<<Result<i32, ParseIntError> as Try>::Residual, <Result<i32, ParseIntError> as Try>::Output> {<Result<i32, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb19: {
        _38 = discriminant(_34);         // scope 6 at ui/try-operator.rs:79:36: 79:56
        switchInt(move _38) -> [0: bb20, 1: bb22, otherwise: bb21]; // scope 6 at ui/try-operator.rs:79:36: 79:56
    }

    bb20: {
        _41 = ((_34 as Continue).0: i32); // scope 6 at ui/try-operator.rs:79:36: 79:56
        _33 = _41;                       // scope 19 at ui/try-operator.rs:79:36: 79:56
        _42 = CheckedSub(_24, _33);      // scope 6 at ui/try-operator.rs:79:13: 79:56
        assert(!move (_42.1: bool), "attempt to compute `{} - {}`, which would overflow", move _24, move _33) -> bb23; // scope 6 at ui/try-operator.rs:79:13: 79:56
    }

    bb21: {
        unreachable;                     // scope 6 at ui/try-operator.rs:79:36: 79:56
    }

    bb22: {
        _39 = move ((_34 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 6 at ui/try-operator.rs:79:55: 79:56
        _40 = move _39;                  // scope 17 at ui/try-operator.rs:79:55: 79:56
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _40) -> bb26; // scope 17 at ui/try-operator.rs:79:36: 79:56
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:79:55: 79:56
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, ParseIntError> {<Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb23: {
        _23 = move (_42.0: i32);         // scope 6 at ui/try-operator.rs:79:13: 79:56
        _45 = _1;                        // scope 11 at ui/try-operator.rs:81:8: 81:9
        _46 = _12;                       // scope 11 at ui/try-operator.rs:81:12: 81:13
        _47 = CheckedAdd(_45, _46);      // scope 11 at ui/try-operator.rs:81:8: 81:13
        assert(!move (_47.1: bool), "attempt to compute `{} + {}`, which would overflow", move _45, move _46) -> bb24; // scope 11 at ui/try-operator.rs:81:8: 81:13
    }

    bb24: {
        _44 = move (_47.0: i32);         // scope 11 at ui/try-operator.rs:81:8: 81:13
        _48 = _23;                       // scope 11 at ui/try-operator.rs:81:16: 81:17
        _49 = CheckedAdd(_44, _48);      // scope 11 at ui/try-operator.rs:81:8: 81:17
        assert(!move (_49.1: bool), "attempt to compute `{} + {}`, which would overflow", move _44, move _48) -> bb25; // scope 11 at ui/try-operator.rs:81:8: 81:17
    }

    bb25: {
        _43 = move (_49.0: i32);         // scope 11 at ui/try-operator.rs:81:8: 81:17
        _0 = Result::<i32, ParseIntError>::Ok(move _43); // scope 11 at ui/try-operator.rs:81:5: 81:18
        goto -> bb26;                    // scope 0 at ui/try-operator.rs:82:2: 82:2
    }

    bb26: {
        return;                          // scope 0 at ui/try-operator.rs:82:2: 82:2
    }
}

fn on_index() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at ui/try-operator.rs:84:18: 84:44
    let _1: [i32; 1];                    // in scope 0 at ui/try-operator.rs:85:9: 85:10
    let mut _3: &str;                    // in scope 0 at ui/try-operator.rs:86:13: 86:33
    let _4: &str;                        // in scope 0 at ui/try-operator.rs:86:13: 86:16
    let mut _5: i32;                     // in scope 0 at ui/try-operator.rs:88:8: 88:13
    let _6: usize;                       // in scope 0 at ui/try-operator.rs:88:10: 88:12
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, usize>; // in scope 0 at ui/try-operator.rs:88:10: 88:12
    let mut _8: std::result::Result<usize, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:88:10: 88:11
    let mut _9: isize;                   // in scope 0 at ui/try-operator.rs:88:11: 88:12
    let mut _11: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:88:11: 88:12
    let mut _13: usize;                  // in scope 0 at ui/try-operator.rs:88:8: 88:13
    let mut _14: bool;                   // in scope 0 at ui/try-operator.rs:88:8: 88:13
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/try-operator.rs:85:9: 85:10
        let _2: std::result::Result<usize, std::num::ParseIntError>; // in scope 1 at ui/try-operator.rs:86:9: 86:10
        scope 2 {
            debug y => _2;               // in scope 2 at ui/try-operator.rs:86:9: 86:10
            let _10: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 2 at ui/try-operator.rs:88:11: 88:12
            let _12: usize;              // in scope 2 at ui/try-operator.rs:88:10: 88:12
            scope 3 {
                debug residual => _10;   // in scope 3 at ui/try-operator.rs:88:11: 88:12
                scope 4 {
                }
            }
            scope 5 {
                debug val => _12;        // in scope 5 at ui/try-operator.rs:88:10: 88:12
                scope 6 {
                }
            }
        }
    }

    bb0: {
        _1 = [const 19_i32];             // scope 0 at ui/try-operator.rs:85:13: 85:17
        _4 = const "0";                  // scope 1 at ui/try-operator.rs:86:13: 86:16
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:86:13: 86:16
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 1 at ui/try-operator.rs:86:13: 86:33
        _2 = core::str::<impl str>::parse::<usize>(move _3) -> bb1; // scope 1 at ui/try-operator.rs:86:13: 86:33
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:86:17: 86:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<usize, <usize as FromStr>::Err> {core::str::<impl str>::parse::<usize>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = move _2;                    // scope 2 at ui/try-operator.rs:88:10: 88:11
        _7 = <Result<usize, ParseIntError> as Try>::branch(move _8) -> bb2; // scope 2 at ui/try-operator.rs:88:10: 88:12
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:88:10: 88:12
                                         // + literal: Const { ty: fn(Result<usize, ParseIntError>) -> ControlFlow<<Result<usize, ParseIntError> as Try>::Residual, <Result<usize, ParseIntError> as Try>::Output> {<Result<usize, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = discriminant(_7);           // scope 2 at ui/try-operator.rs:88:10: 88:12
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 2 at ui/try-operator.rs:88:10: 88:12
    }

    bb3: {
        _12 = ((_7 as Continue).0: usize); // scope 2 at ui/try-operator.rs:88:10: 88:12
        _6 = _12;                        // scope 6 at ui/try-operator.rs:88:10: 88:12
        _13 = const 1_usize;             // scope 2 at ui/try-operator.rs:88:8: 88:13
        _14 = Lt(_6, _13);               // scope 2 at ui/try-operator.rs:88:8: 88:13
        assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _6) -> bb6; // scope 2 at ui/try-operator.rs:88:8: 88:13
    }

    bb4: {
        unreachable;                     // scope 2 at ui/try-operator.rs:88:10: 88:12
    }

    bb5: {
        _10 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 2 at ui/try-operator.rs:88:11: 88:12
        _11 = move _10;                  // scope 4 at ui/try-operator.rs:88:11: 88:12
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _11) -> bb7; // scope 4 at ui/try-operator.rs:88:10: 88:12
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:88:11: 88:12
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, ParseIntError> {<Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        _5 = _1[_6];                     // scope 2 at ui/try-operator.rs:88:8: 88:13
        _0 = Result::<i32, ParseIntError>::Ok(move _5); // scope 2 at ui/try-operator.rs:88:5: 88:14
        goto -> bb7;                     // scope 0 at ui/try-operator.rs:89:2: 89:2
    }

    bb7: {
        return;                          // scope 0 at ui/try-operator.rs:89:2: 89:2
    }
}

fn on_args() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at ui/try-operator.rs:91:17: 91:43
    let _1: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:94:9: 94:10
    let mut _2: &str;                    // in scope 0 at ui/try-operator.rs:94:13: 94:25
    let _3: &str;                        // in scope 0 at ui/try-operator.rs:94:13: 94:17
    let mut _5: &str;                    // in scope 0 at ui/try-operator.rs:95:13: 95:25
    let _6: &str;                        // in scope 0 at ui/try-operator.rs:95:13: 95:17
    let mut _7: i32;                     // in scope 0 at ui/try-operator.rs:97:8: 97:19
    let mut _8: i32;                     // in scope 0 at ui/try-operator.rs:97:12: 97:14
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator.rs:97:12: 97:14
    let mut _10: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:97:12: 97:13
    let mut _11: isize;                  // in scope 0 at ui/try-operator.rs:97:13: 97:14
    let mut _13: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:97:13: 97:14
    let mut _15: i32;                    // in scope 0 at ui/try-operator.rs:97:16: 97:18
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator.rs:97:16: 97:18
    let mut _17: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:97:16: 97:17
    let mut _18: isize;                  // in scope 0 at ui/try-operator.rs:97:17: 97:18
    let mut _20: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:97:17: 97:18
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/try-operator.rs:94:9: 94:10
        let _4: std::result::Result<i32, std::num::ParseIntError>; // in scope 1 at ui/try-operator.rs:95:9: 95:10
        scope 2 {
            debug y => _4;               // in scope 2 at ui/try-operator.rs:95:9: 95:10
            let _12: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 2 at ui/try-operator.rs:97:13: 97:14
            let _14: i32;                // in scope 2 at ui/try-operator.rs:97:12: 97:14
            let _19: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 2 at ui/try-operator.rs:97:17: 97:18
            let _21: i32;                // in scope 2 at ui/try-operator.rs:97:16: 97:18
            scope 3 {
                debug residual => _12;   // in scope 3 at ui/try-operator.rs:97:13: 97:14
                scope 4 {
                }
            }
            scope 5 {
                debug val => _14;        // in scope 5 at ui/try-operator.rs:97:12: 97:14
                scope 6 {
                }
            }
            scope 7 {
                debug residual => _19;   // in scope 7 at ui/try-operator.rs:97:17: 97:18
                scope 8 {
                }
            }
            scope 9 {
                debug val => _21;        // in scope 9 at ui/try-operator.rs:97:16: 97:18
                scope 10 {
                }
            }
        }
    }

    bb0: {
        _3 = const "20";                 // scope 0 at ui/try-operator.rs:94:13: 94:17
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:94:13: 94:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at ui/try-operator.rs:94:13: 94:25
        _1 = core::str::<impl str>::parse::<i32>(move _2) -> bb1; // scope 0 at ui/try-operator.rs:94:13: 94:25
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:94:18: 94:23
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = const "21";                 // scope 1 at ui/try-operator.rs:95:13: 95:17
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:95:13: 95:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 1 at ui/try-operator.rs:95:13: 95:25
        _4 = core::str::<impl str>::parse::<i32>(move _5) -> bb2; // scope 1 at ui/try-operator.rs:95:13: 95:25
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:95:18: 95:23
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = move _1;                   // scope 2 at ui/try-operator.rs:97:12: 97:13
        _9 = <Result<i32, ParseIntError> as Try>::branch(move _10) -> bb3; // scope 2 at ui/try-operator.rs:97:12: 97:14
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:97:12: 97:14
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> ControlFlow<<Result<i32, ParseIntError> as Try>::Residual, <Result<i32, ParseIntError> as Try>::Output> {<Result<i32, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = discriminant(_9);          // scope 2 at ui/try-operator.rs:97:12: 97:14
        switchInt(move _11) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 2 at ui/try-operator.rs:97:12: 97:14
    }

    bb4: {
        _14 = ((_9 as Continue).0: i32); // scope 2 at ui/try-operator.rs:97:12: 97:14
        _8 = _14;                        // scope 6 at ui/try-operator.rs:97:12: 97:14
        _17 = move _4;                   // scope 2 at ui/try-operator.rs:97:16: 97:17
        _16 = <Result<i32, ParseIntError> as Try>::branch(move _17) -> bb7; // scope 2 at ui/try-operator.rs:97:16: 97:18
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:97:16: 97:18
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> ControlFlow<<Result<i32, ParseIntError> as Try>::Residual, <Result<i32, ParseIntError> as Try>::Output> {<Result<i32, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 2 at ui/try-operator.rs:97:12: 97:14
    }

    bb6: {
        _12 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 2 at ui/try-operator.rs:97:13: 97:14
        _13 = move _12;                  // scope 4 at ui/try-operator.rs:97:13: 97:14
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _13) -> bb12; // scope 4 at ui/try-operator.rs:97:12: 97:14
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:97:13: 97:14
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, ParseIntError> {<Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb7: {
        _18 = discriminant(_16);         // scope 2 at ui/try-operator.rs:97:16: 97:18
        switchInt(move _18) -> [0: bb8, 1: bb10, otherwise: bb9]; // scope 2 at ui/try-operator.rs:97:16: 97:18
    }

    bb8: {
        _21 = ((_16 as Continue).0: i32); // scope 2 at ui/try-operator.rs:97:16: 97:18
        _15 = _21;                       // scope 10 at ui/try-operator.rs:97:16: 97:18
        _7 = on_args::sub(move _8, move _15) -> bb11; // scope 2 at ui/try-operator.rs:97:8: 97:19
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:97:8: 97:11
                                         // + literal: Const { ty: fn(i32, i32) -> i32 {on_args::sub}, val: Value(<ZST>) }
    }

    bb9: {
        unreachable;                     // scope 2 at ui/try-operator.rs:97:16: 97:18
    }

    bb10: {
        _19 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 2 at ui/try-operator.rs:97:17: 97:18
        _20 = move _19;                  // scope 8 at ui/try-operator.rs:97:17: 97:18
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _20) -> bb12; // scope 8 at ui/try-operator.rs:97:16: 97:18
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:97:17: 97:18
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, ParseIntError> {<Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb11: {
        _0 = Result::<i32, ParseIntError>::Ok(move _7); // scope 2 at ui/try-operator.rs:97:5: 97:20
        goto -> bb12;                    // scope 0 at ui/try-operator.rs:98:2: 98:2
    }

    bb12: {
        return;                          // scope 0 at ui/try-operator.rs:98:2: 98:2
    }
}

fn on_args::sub(_1: i32, _2: i32) -> i32 {
    debug x => _1;                       // in scope 0 at ui/try-operator.rs:92:12: 92:13
    debug y => _2;                       // in scope 0 at ui/try-operator.rs:92:20: 92:21
    let mut _0: i32;                     // return place in scope 0 at ui/try-operator.rs:92:31: 92:34
    let mut _3: i32;                     // in scope 0 at ui/try-operator.rs:92:37: 92:38
    let mut _4: i32;                     // in scope 0 at ui/try-operator.rs:92:41: 92:42
    let mut _5: (i32, bool);             // in scope 0 at ui/try-operator.rs:92:37: 92:42

    bb0: {
        _3 = _1;                         // scope 0 at ui/try-operator.rs:92:37: 92:38
        _4 = _2;                         // scope 0 at ui/try-operator.rs:92:41: 92:42
        _5 = CheckedSub(_3, _4);         // scope 0 at ui/try-operator.rs:92:37: 92:42
        assert(!move (_5.1: bool), "attempt to compute `{} - {}`, which would overflow", move _3, move _4) -> bb1; // scope 0 at ui/try-operator.rs:92:37: 92:42
    }

    bb1: {
        _0 = move (_5.0: i32);           // scope 0 at ui/try-operator.rs:92:37: 92:42
        return;                          // scope 0 at ui/try-operator.rs:92:44: 92:44
    }
}

fn on_if() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at ui/try-operator.rs:100:15: 100:41
    let mut _1: i32;                     // in scope 0 at ui/try-operator.rs:101:8: 105:7
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator.rs:101:8: 105:7
    let mut _3: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:101:8: 105:6
    let mut _4: &str;                    // in scope 0 at ui/try-operator.rs:102:9: 102:28
    let _5: &str;                        // in scope 0 at ui/try-operator.rs:102:9: 102:13
    let mut _6: isize;                   // in scope 0 at ui/try-operator.rs:105:6: 105:7
    let _7: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:105:6: 105:7
    let mut _8: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:105:6: 105:7
    let _9: i32;                         // in scope 0 at ui/try-operator.rs:101:8: 105:7
    scope 1 {
        debug residual => _7;            // in scope 1 at ui/try-operator.rs:105:6: 105:7
        scope 2 {
        }
    }
    scope 3 {
        debug val => _9;                 // in scope 3 at ui/try-operator.rs:101:8: 105:7
        scope 4 {
        }
    }

    bb0: {
        _5 = const "22";                 // scope 0 at ui/try-operator.rs:102:9: 102:13
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:102:9: 102:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/try-operator.rs:102:9: 102:28
        _3 = core::str::<impl str>::parse::<i32>(move _4) -> bb1; // scope 0 at ui/try-operator.rs:102:9: 102:28
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:102:14: 102:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Result<i32, ParseIntError> as Try>::branch(move _3) -> bb2; // scope 0 at ui/try-operator.rs:101:8: 105:7
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:101:8: 105:7
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> ControlFlow<<Result<i32, ParseIntError> as Try>::Residual, <Result<i32, ParseIntError> as Try>::Output> {<Result<i32, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = discriminant(_2);           // scope 0 at ui/try-operator.rs:101:8: 105:7
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at ui/try-operator.rs:101:8: 105:7
    }

    bb3: {
        _9 = ((_2 as Continue).0: i32);  // scope 0 at ui/try-operator.rs:101:8: 105:7
        _1 = _9;                         // scope 4 at ui/try-operator.rs:101:8: 105:7
        _0 = Result::<i32, ParseIntError>::Ok(move _1); // scope 0 at ui/try-operator.rs:101:5: 105:8
        goto -> bb6;                     // scope 0 at ui/try-operator.rs:106:2: 106:2
    }

    bb4: {
        unreachable;                     // scope 0 at ui/try-operator.rs:101:8: 105:7
    }

    bb5: {
        _7 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 0 at ui/try-operator.rs:105:6: 105:7
        _8 = move _7;                    // scope 2 at ui/try-operator.rs:105:6: 105:7
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _8) -> bb6; // scope 2 at ui/try-operator.rs:101:8: 105:7
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:105:6: 105:7
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, ParseIntError> {<Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/try-operator.rs:106:2: 106:2
    }
}

fn on_if_let() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at ui/try-operator.rs:108:19: 108:45
    let mut _1: i32;                     // in scope 0 at ui/try-operator.rs:109:8: 113:7
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator.rs:109:8: 113:7
    let mut _3: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:109:8: 113:6
    let mut _4: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:109:24: 109:43
    let mut _5: &str;                    // in scope 0 at ui/try-operator.rs:109:24: 109:43
    let _6: &str;                        // in scope 0 at ui/try-operator.rs:109:24: 109:28
    let mut _7: isize;                   // in scope 0 at ui/try-operator.rs:109:15: 109:21
    let mut _8: &str;                    // in scope 0 at ui/try-operator.rs:110:9: 110:28
    let _9: &str;                        // in scope 0 at ui/try-operator.rs:110:9: 110:13
    let mut _10: &str;                   // in scope 0 at ui/try-operator.rs:112:9: 112:28
    let _11: &str;                       // in scope 0 at ui/try-operator.rs:112:9: 112:13
    let mut _12: isize;                  // in scope 0 at ui/try-operator.rs:113:6: 113:7
    let _13: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:113:6: 113:7
    let mut _14: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:113:6: 113:7
    let _15: i32;                        // in scope 0 at ui/try-operator.rs:109:8: 113:7
    scope 1 {
    }
    scope 2 {
        debug residual => _13;           // in scope 2 at ui/try-operator.rs:113:6: 113:7
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;                // in scope 4 at ui/try-operator.rs:109:8: 113:7
        scope 5 {
        }
    }

    bb0: {
        _6 = const "24";                 // scope 1 at ui/try-operator.rs:109:24: 109:28
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:109:24: 109:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 1 at ui/try-operator.rs:109:24: 109:43
        _4 = core::str::<impl str>::parse::<i32>(move _5) -> bb1; // scope 1 at ui/try-operator.rs:109:24: 109:43
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:109:29: 109:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = discriminant(_4);           // scope 1 at ui/try-operator.rs:109:15: 109:21
        switchInt(move _7) -> [0: bb2, otherwise: bb3]; // scope 1 at ui/try-operator.rs:109:15: 109:21
    }

    bb2: {
        _9 = const "25";                 // scope 1 at ui/try-operator.rs:110:9: 110:13
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:110:9: 110:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = _9;                         // scope 1 at ui/try-operator.rs:110:9: 110:28
        _3 = core::str::<impl str>::parse::<i32>(move _8) -> bb4; // scope 1 at ui/try-operator.rs:110:9: 110:28
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:110:14: 110:19
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = const "26";                // scope 0 at ui/try-operator.rs:112:9: 112:13
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:112:9: 112:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = _11;                       // scope 0 at ui/try-operator.rs:112:9: 112:28
        _3 = core::str::<impl str>::parse::<i32>(move _10) -> bb4; // scope 0 at ui/try-operator.rs:112:9: 112:28
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:112:14: 112:19
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb4: {
        _2 = <Result<i32, ParseIntError> as Try>::branch(move _3) -> bb5; // scope 0 at ui/try-operator.rs:109:8: 113:7
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:109:8: 113:7
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> ControlFlow<<Result<i32, ParseIntError> as Try>::Residual, <Result<i32, ParseIntError> as Try>::Output> {<Result<i32, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = discriminant(_2);          // scope 0 at ui/try-operator.rs:109:8: 113:7
        switchInt(move _12) -> [0: bb6, 1: bb8, otherwise: bb7]; // scope 0 at ui/try-operator.rs:109:8: 113:7
    }

    bb6: {
        _15 = ((_2 as Continue).0: i32); // scope 0 at ui/try-operator.rs:109:8: 113:7
        _1 = _15;                        // scope 5 at ui/try-operator.rs:109:8: 113:7
        _0 = Result::<i32, ParseIntError>::Ok(move _1); // scope 0 at ui/try-operator.rs:109:5: 113:8
        goto -> bb9;                     // scope 0 at ui/try-operator.rs:114:2: 114:2
    }

    bb7: {
        unreachable;                     // scope 0 at ui/try-operator.rs:109:8: 113:7
    }

    bb8: {
        _13 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 0 at ui/try-operator.rs:113:6: 113:7
        _14 = move _13;                  // scope 3 at ui/try-operator.rs:113:6: 113:7
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _14) -> bb9; // scope 3 at ui/try-operator.rs:109:8: 113:7
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:113:6: 113:7
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, ParseIntError> {<Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/try-operator.rs:114:2: 114:2
    }
}

fn on_match() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at ui/try-operator.rs:116:18: 116:44
    let mut _1: i32;                     // in scope 0 at ui/try-operator.rs:117:8: 120:7
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator.rs:117:8: 120:7
    let mut _3: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:117:8: 120:6
    let mut _4: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:117:14: 117:33
    let mut _5: &str;                    // in scope 0 at ui/try-operator.rs:117:14: 117:33
    let _6: &str;                        // in scope 0 at ui/try-operator.rs:117:14: 117:18
    let mut _7: isize;                   // in scope 0 at ui/try-operator.rs:118:9: 118:16
    let mut _8: &str;                    // in scope 0 at ui/try-operator.rs:118:20: 118:39
    let _9: &str;                        // in scope 0 at ui/try-operator.rs:118:20: 118:24
    let mut _10: &str;                   // in scope 0 at ui/try-operator.rs:119:19: 119:38
    let _11: &str;                       // in scope 0 at ui/try-operator.rs:119:19: 119:23
    let mut _12: isize;                  // in scope 0 at ui/try-operator.rs:120:6: 120:7
    let _13: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:120:6: 120:7
    let mut _14: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:120:6: 120:7
    let _15: i32;                        // in scope 0 at ui/try-operator.rs:117:8: 120:7
    scope 1 {
        debug residual => _13;           // in scope 1 at ui/try-operator.rs:120:6: 120:7
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;                // in scope 3 at ui/try-operator.rs:117:8: 120:7
        scope 4 {
        }
    }

    bb0: {
        _6 = const "27";                 // scope 0 at ui/try-operator.rs:117:14: 117:18
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:117:14: 117:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 0 at ui/try-operator.rs:117:14: 117:33
        _4 = core::str::<impl str>::parse::<i32>(move _5) -> bb1; // scope 0 at ui/try-operator.rs:117:14: 117:33
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:117:19: 117:24
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = discriminant(_4);           // scope 0 at ui/try-operator.rs:117:14: 117:33
        switchInt(move _7) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at ui/try-operator.rs:117:8: 117:33
    }

    bb2: {
        _11 = const "29";                // scope 0 at ui/try-operator.rs:119:19: 119:23
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:119:19: 119:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = _11;                       // scope 0 at ui/try-operator.rs:119:19: 119:38
        _3 = core::str::<impl str>::parse::<i32>(move _10) -> bb5; // scope 0 at ui/try-operator.rs:119:19: 119:38
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:119:24: 119:29
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at ui/try-operator.rs:117:14: 117:33
    }

    bb4: {
        _9 = const "28";                 // scope 0 at ui/try-operator.rs:118:20: 118:24
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:118:20: 118:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = _9;                         // scope 0 at ui/try-operator.rs:118:20: 118:39
        _3 = core::str::<impl str>::parse::<i32>(move _8) -> bb5; // scope 0 at ui/try-operator.rs:118:20: 118:39
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:118:25: 118:30
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb5: {
        _2 = <Result<i32, ParseIntError> as Try>::branch(move _3) -> bb6; // scope 0 at ui/try-operator.rs:117:8: 120:7
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:117:8: 120:7
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> ControlFlow<<Result<i32, ParseIntError> as Try>::Residual, <Result<i32, ParseIntError> as Try>::Output> {<Result<i32, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = discriminant(_2);          // scope 0 at ui/try-operator.rs:117:8: 120:7
        switchInt(move _12) -> [0: bb7, 1: bb9, otherwise: bb8]; // scope 0 at ui/try-operator.rs:117:8: 120:7
    }

    bb7: {
        _15 = ((_2 as Continue).0: i32); // scope 0 at ui/try-operator.rs:117:8: 120:7
        _1 = _15;                        // scope 4 at ui/try-operator.rs:117:8: 120:7
        _0 = Result::<i32, ParseIntError>::Ok(move _1); // scope 0 at ui/try-operator.rs:117:5: 120:8
        goto -> bb10;                    // scope 0 at ui/try-operator.rs:121:2: 121:2
    }

    bb8: {
        unreachable;                     // scope 0 at ui/try-operator.rs:117:8: 120:7
    }

    bb9: {
        _13 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 0 at ui/try-operator.rs:120:6: 120:7
        _14 = move _13;                  // scope 2 at ui/try-operator.rs:120:6: 120:7
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _14) -> bb10; // scope 2 at ui/try-operator.rs:117:8: 120:7
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:120:6: 120:7
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, ParseIntError> {<Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at ui/try-operator.rs:121:2: 121:2
    }
}

fn tight_binding() -> Result<bool, ()> {
    let mut _0: std::result::Result<bool, ()>; // return place in scope 0 at ui/try-operator.rs:123:23: 123:39
    let _1: std::result::Result<bool, ()>; // in scope 0 at ui/try-operator.rs:126:9: 126:10
    let mut _2: bool;                    // in scope 0 at ui/try-operator.rs:127:8: 127:11
    let mut _3: bool;                    // in scope 0 at ui/try-operator.rs:127:9: 127:11
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>, bool>; // in scope 0 at ui/try-operator.rs:127:9: 127:11
    let mut _5: std::result::Result<bool, ()>; // in scope 0 at ui/try-operator.rs:127:9: 127:10
    let mut _6: isize;                   // in scope 0 at ui/try-operator.rs:127:10: 127:11
    let mut _8: std::result::Result<std::convert::Infallible, ()>; // in scope 0 at ui/try-operator.rs:127:10: 127:11
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/try-operator.rs:126:9: 126:10
        let _7: std::result::Result<std::convert::Infallible, ()>; // in scope 1 at ui/try-operator.rs:127:10: 127:11
        let _9: bool;                    // in scope 1 at ui/try-operator.rs:127:9: 127:11
        scope 2 {
            debug residual => _7;        // in scope 2 at ui/try-operator.rs:127:10: 127:11
            scope 3 {
            }
        }
        scope 4 {
            debug val => _9;             // in scope 4 at ui/try-operator.rs:127:9: 127:11
            scope 5 {
            }
        }
    }

    bb0: {
        _1 = ok::<bool>(const true) -> bb1; // scope 0 at ui/try-operator.rs:126:13: 126:21
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:126:13: 126:15
                                         // + literal: Const { ty: fn(bool) -> Result<bool, ()> {ok::<bool>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _1;                         // scope 1 at ui/try-operator.rs:127:9: 127:10
        _4 = <Result<bool, ()> as Try>::branch(move _5) -> bb2; // scope 1 at ui/try-operator.rs:127:9: 127:11
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:127:9: 127:11
                                         // + literal: Const { ty: fn(Result<bool, ()>) -> ControlFlow<<Result<bool, ()> as Try>::Residual, <Result<bool, ()> as Try>::Output> {<Result<bool, ()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = discriminant(_4);           // scope 1 at ui/try-operator.rs:127:9: 127:11
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 1 at ui/try-operator.rs:127:9: 127:11
    }

    bb3: {
        _9 = ((_4 as Continue).0: bool); // scope 1 at ui/try-operator.rs:127:9: 127:11
        _3 = _9;                         // scope 5 at ui/try-operator.rs:127:9: 127:11
        _2 = Not(move _3);               // scope 1 at ui/try-operator.rs:127:8: 127:11
        _0 = Result::<bool, ()>::Ok(move _2); // scope 1 at ui/try-operator.rs:127:5: 127:12
        goto -> bb6;                     // scope 0 at ui/try-operator.rs:128:2: 128:2
    }

    bb4: {
        unreachable;                     // scope 1 at ui/try-operator.rs:127:9: 127:11
    }

    bb5: {
        _0 = <Result<bool, ()> as FromResidual<Result<Infallible, ()>>>::from_residual(move _8) -> bb6; // scope 3 at ui/try-operator.rs:127:9: 127:11
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:127:10: 127:11
                                         // + literal: Const { ty: fn(Result<Infallible, ()>) -> Result<bool, ()> {<Result<bool, ()> as FromResidual<Result<Infallible, ()>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/try-operator.rs:128:2: 128:2
    }
}

fn ok(_1: T) -> Result<T, ()> {
    debug x => _1;                       // in scope 0 at ui/try-operator.rs:124:14: 124:15
    let mut _0: std::result::Result<T, ()>; // return place in scope 0 at ui/try-operator.rs:124:23: 124:36
    let mut _2: T;                       // in scope 0 at ui/try-operator.rs:124:42: 124:43

    bb0: {
        _2 = move _1;                    // scope 0 at ui/try-operator.rs:124:42: 124:43
        _0 = Result::<T, ()>::Ok(move _2); // scope 0 at ui/try-operator.rs:124:39: 124:44
        return;                          // scope 0 at ui/try-operator.rs:124:46: 124:46
    }
}

fn merge_error() -> Result<i32, Error> {
    let mut _0: std::result::Result<i32, Error>; // return place in scope 0 at ui/try-operator.rs:131:21: 131:39
    let mut _1: std::string::String;     // in scope 0 at ui/try-operator.rs:132:9: 132:14
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, usize>; // in scope 0 at ui/try-operator.rs:134:5: 134:51
    let mut _3: std::result::Result<usize, std::io::Error>; // in scope 0 at ui/try-operator.rs:134:5: 134:50
    let mut _4: &mut std::fs::File;      // in scope 0 at ui/try-operator.rs:134:5: 134:50
    let mut _5: std::fs::File;           // in scope 0 at ui/try-operator.rs:134:5: 134:27
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::fs::File>; // in scope 0 at ui/try-operator.rs:134:5: 134:27
    let mut _7: std::result::Result<std::fs::File, std::io::Error>; // in scope 0 at ui/try-operator.rs:134:5: 134:26
    let mut _8: isize;                   // in scope 0 at ui/try-operator.rs:134:26: 134:27
    let mut _10: std::result::Result<std::convert::Infallible, std::io::Error>; // in scope 0 at ui/try-operator.rs:134:26: 134:27
    let mut _12: &mut std::string::String; // in scope 0 at ui/try-operator.rs:134:43: 134:49
    let mut _13: &mut std::string::String; // in scope 0 at ui/try-operator.rs:134:43: 134:49
    let mut _14: isize;                  // in scope 0 at ui/try-operator.rs:134:50: 134:51
    let mut _16: std::result::Result<std::convert::Infallible, std::io::Error>; // in scope 0 at ui/try-operator.rs:134:50: 134:51
    let mut _18: i32;                    // in scope 0 at ui/try-operator.rs:136:8: 136:29
    let mut _19: i32;                    // in scope 0 at ui/try-operator.rs:136:8: 136:25
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator.rs:136:8: 136:25
    let mut _21: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:136:8: 136:24
    let mut _22: &str;                   // in scope 0 at ui/try-operator.rs:136:8: 136:24
    let _23: &str;                       // in scope 0 at ui/try-operator.rs:136:8: 136:24
    let mut _24: &std::string::String;   // in scope 0 at ui/try-operator.rs:136:8: 136:24
    let mut _25: isize;                  // in scope 0 at ui/try-operator.rs:136:24: 136:25
    let mut _27: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:136:24: 136:25
    let mut _29: (i32, bool);            // in scope 0 at ui/try-operator.rs:136:8: 136:29
    scope 1 {
        debug s => _1;                   // in scope 1 at ui/try-operator.rs:132:9: 132:14
        let _9: std::result::Result<std::convert::Infallible, std::io::Error>; // in scope 1 at ui/try-operator.rs:134:26: 134:27
        let _11: std::fs::File;          // in scope 1 at ui/try-operator.rs:134:5: 134:27
        let _15: std::result::Result<std::convert::Infallible, std::io::Error>; // in scope 1 at ui/try-operator.rs:134:50: 134:51
        let _17: usize;                  // in scope 1 at ui/try-operator.rs:134:5: 134:51
        let _26: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 1 at ui/try-operator.rs:136:24: 136:25
        let _28: i32;                    // in scope 1 at ui/try-operator.rs:136:8: 136:25
        scope 2 {
            debug residual => _9;        // in scope 2 at ui/try-operator.rs:134:26: 134:27
            scope 3 {
            }
        }
        scope 4 {
            debug val => _11;            // in scope 4 at ui/try-operator.rs:134:5: 134:27
            scope 5 {
            }
        }
        scope 6 {
            debug residual => _15;       // in scope 6 at ui/try-operator.rs:134:50: 134:51
            scope 7 {
            }
        }
        scope 8 {
            debug val => _17;            // in scope 8 at ui/try-operator.rs:134:5: 134:51
            scope 9 {
            }
        }
        scope 10 {
            debug residual => _26;       // in scope 10 at ui/try-operator.rs:136:24: 136:25
            scope 11 {
            }
        }
        scope 12 {
            debug val => _28;            // in scope 12 at ui/try-operator.rs:136:8: 136:25
            scope 13 {
            }
        }
    }

    bb0: {
        _1 = String::new() -> bb1;       // scope 0 at ui/try-operator.rs:132:17: 132:30
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:132:17: 132:28
                                         // + literal: Const { ty: fn() -> String {String::new}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = File::open::<&str>(const "foo.txt") -> [return: bb2, unwind: bb23]; // scope 1 at ui/try-operator.rs:134:5: 134:26
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:134:5: 134:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> Result<File, std::io::Error> {File::open::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:134:16: 134:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _6 = <Result<File, std::io::Error> as Try>::branch(move _7) -> [return: bb3, unwind: bb23]; // scope 1 at ui/try-operator.rs:134:5: 134:27
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:134:5: 134:27
                                         // + literal: Const { ty: fn(Result<File, std::io::Error>) -> ControlFlow<<Result<File, std::io::Error> as Try>::Residual, <Result<File, std::io::Error> as Try>::Output> {<Result<File, std::io::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = discriminant(_6);           // scope 1 at ui/try-operator.rs:134:5: 134:27
        switchInt(move _8) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 1 at ui/try-operator.rs:134:5: 134:27
    }

    bb4: {
        _11 = move ((_6 as Continue).0: std::fs::File); // scope 1 at ui/try-operator.rs:134:5: 134:27
        _5 = move _11;                   // scope 5 at ui/try-operator.rs:134:5: 134:27
        _4 = &mut _5;                    // scope 1 at ui/try-operator.rs:134:5: 134:50
        _13 = &mut _1;                   // scope 1 at ui/try-operator.rs:134:43: 134:49
        _12 = &mut (*_13);               // scope 1 at ui/try-operator.rs:134:43: 134:49
        _3 = <File as std::io::Read>::read_to_string(move _4, move _12) -> [return: bb7, unwind: bb22]; // scope 1 at ui/try-operator.rs:134:5: 134:50
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:134:28: 134:42
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut File, &'b mut String) -> Result<usize, std::io::Error> {<File as std::io::Read>::read_to_string}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 1 at ui/try-operator.rs:134:5: 134:27
    }

    bb6: {
        _9 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>); // scope 1 at ui/try-operator.rs:134:26: 134:27
        _10 = move _9;                   // scope 3 at ui/try-operator.rs:134:26: 134:27
        _0 = <Result<i32, Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _10) -> [return: bb27, unwind: bb23]; // scope 3 at ui/try-operator.rs:134:5: 134:27
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:134:26: 134:27
                                         // + literal: Const { ty: fn(Result<Infallible, std::io::Error>) -> Result<i32, Error> {<Result<i32, Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb7: {
        _2 = <Result<usize, std::io::Error> as Try>::branch(move _3) -> [return: bb8, unwind: bb22]; // scope 1 at ui/try-operator.rs:134:5: 134:51
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:134:5: 134:51
                                         // + literal: Const { ty: fn(Result<usize, std::io::Error>) -> ControlFlow<<Result<usize, std::io::Error> as Try>::Residual, <Result<usize, std::io::Error> as Try>::Output> {<Result<usize, std::io::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb8: {
        _14 = discriminant(_2);          // scope 1 at ui/try-operator.rs:134:5: 134:51
        switchInt(move _14) -> [0: bb9, 1: bb11, otherwise: bb10]; // scope 1 at ui/try-operator.rs:134:5: 134:51
    }

    bb9: {
        _17 = ((_2 as Continue).0: usize); // scope 1 at ui/try-operator.rs:134:5: 134:51
        drop(_5) -> [return: bb25, unwind: bb23]; // scope 1 at ui/try-operator.rs:134:51: 134:52
    }

    bb10: {
        unreachable;                     // scope 1 at ui/try-operator.rs:134:5: 134:51
    }

    bb11: {
        _15 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>); // scope 1 at ui/try-operator.rs:134:50: 134:51
        _16 = move _15;                  // scope 7 at ui/try-operator.rs:134:50: 134:51
        _0 = <Result<i32, Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _16) -> [return: bb12, unwind: bb22]; // scope 7 at ui/try-operator.rs:134:5: 134:51
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:134:50: 134:51
                                         // + literal: Const { ty: fn(Result<Infallible, std::io::Error>) -> Result<i32, Error> {<Result<i32, Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb12: {
        drop(_5) -> [return: bb26, unwind: bb23]; // scope 1 at ui/try-operator.rs:134:51: 134:52
    }

    bb13: {
        _22 = _23;                       // scope 1 at ui/try-operator.rs:136:8: 136:24
        _21 = core::str::<impl str>::parse::<i32>(move _22) -> [return: bb14, unwind: bb23]; // scope 1 at ui/try-operator.rs:136:8: 136:24
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:136:10: 136:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb14: {
        _20 = <Result<i32, ParseIntError> as Try>::branch(move _21) -> [return: bb15, unwind: bb23]; // scope 1 at ui/try-operator.rs:136:8: 136:25
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:136:8: 136:25
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> ControlFlow<<Result<i32, ParseIntError> as Try>::Residual, <Result<i32, ParseIntError> as Try>::Output> {<Result<i32, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb15: {
        _25 = discriminant(_20);         // scope 1 at ui/try-operator.rs:136:8: 136:25
        switchInt(move _25) -> [0: bb16, 1: bb18, otherwise: bb17]; // scope 1 at ui/try-operator.rs:136:8: 136:25
    }

    bb16: {
        _28 = ((_20 as Continue).0: i32); // scope 1 at ui/try-operator.rs:136:8: 136:25
        _19 = _28;                       // scope 13 at ui/try-operator.rs:136:8: 136:25
        _29 = CheckedAdd(_19, const 1_i32); // scope 1 at ui/try-operator.rs:136:8: 136:29
        assert(!move (_29.1: bool), "attempt to compute `{} + {}`, which would overflow", move _19, const 1_i32) -> [success: bb20, unwind: bb23]; // scope 1 at ui/try-operator.rs:136:8: 136:29
    }

    bb17: {
        unreachable;                     // scope 1 at ui/try-operator.rs:136:8: 136:25
    }

    bb18: {
        _26 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 1 at ui/try-operator.rs:136:24: 136:25
        _27 = move _26;                  // scope 11 at ui/try-operator.rs:136:24: 136:25
        _0 = <Result<i32, Error> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _27) -> [return: bb19, unwind: bb23]; // scope 11 at ui/try-operator.rs:136:8: 136:25
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:136:24: 136:25
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, Error> {<Result<i32, Error> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb19: {
        drop(_1) -> bb21;                // scope 0 at ui/try-operator.rs:137:1: 137:2
    }

    bb20: {
        _18 = move (_29.0: i32);         // scope 1 at ui/try-operator.rs:136:8: 136:29
        _0 = Result::<i32, Error>::Ok(move _18); // scope 1 at ui/try-operator.rs:136:5: 136:30
        drop(_1) -> bb21;                // scope 0 at ui/try-operator.rs:137:1: 137:2
    }

    bb21: {
        return;                          // scope 0 at ui/try-operator.rs:137:2: 137:2
    }

    bb22 (cleanup): {
        drop(_5) -> bb23;                // scope 1 at ui/try-operator.rs:134:51: 134:52
    }

    bb23 (cleanup): {
        drop(_1) -> bb24;                // scope 0 at ui/try-operator.rs:137:1: 137:2
    }

    bb24 (cleanup): {
        resume;                          // scope 0 at ui/try-operator.rs:131:1: 137:2
    }

    bb25: {
        _24 = &_1;                       // scope 1 at ui/try-operator.rs:136:8: 136:24
        _23 = <String as Deref>::deref(move _24) -> [return: bb13, unwind: bb23]; // scope 1 at ui/try-operator.rs:136:8: 136:24
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:136:8: 136:24
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb26: {
        drop(_1) -> bb21;                // scope 0 at ui/try-operator.rs:137:1: 137:2
    }

    bb27: {
        goto -> bb26;                    // scope 3 at ui/try-operator.rs:134:5: 134:27
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/try-operator.rs:139:11: 139:11
    let mut _1: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:140:23: 140:34
    let _5: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: (&std::result::Result<std::string::String, std::num::ParseIntError>, &std::result::Result<std::string::String, std::num::ParseIntError>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _20: &std::result::Result<std::string::String, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _21: std::result::Result<std::string::String, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:142:16: 142:35
    let mut _22: std::string::String;    // in scope 0 at ui/try-operator.rs:142:19: 142:34
    let mut _23: &str;                   // in scope 0 at ui/try-operator.rs:142:19: 142:34
    let _24: &str;                       // in scope 0 at ui/try-operator.rs:142:19: 142:22
    let mut _25: &std::result::Result<std::string::String, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _26: std::result::Result<std::string::String, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:142:37: 142:47
    let _27: &std::result::Result<std::string::String, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _28: &std::result::Result<std::string::String, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _29: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _31: &std::result::Result<std::string::String, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _32: &std::result::Result<std::string::String, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _34: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _35: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _36: &std::result::Result<std::string::String, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _37: &std::result::Result<std::string::String, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _38: &std::result::Result<std::string::String, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _39: &std::result::Result<std::string::String, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _41: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _42: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _43: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _44: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:144:23: 144:32
    let _45: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _46: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _47: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _48: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _49: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _50: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _52: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _53: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _54: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _55: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _56: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _57: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _59: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _60: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _61: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _62: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:146:23: 146:31
    let _63: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _64: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _65: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _66: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _67: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _68: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _70: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _71: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _72: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _73: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _74: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _75: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _76: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _77: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _78: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _79: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _80: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:148:23: 148:32
    let _81: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _82: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _83: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _84: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _85: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _86: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _88: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _89: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _90: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _91: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _92: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _93: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _94: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _95: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _96: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _97: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _98: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:150:23: 150:33
    let _99: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _100: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _101: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _102: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _103: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _104: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _106: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _107: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _108: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _109: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _110: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _111: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _112: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _113: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _114: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _115: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _116: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:152:23: 152:34
    let _117: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _118: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _119: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _120: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _121: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _122: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _124: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _125: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _126: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _127: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _128: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _129: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _130: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _131: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _132: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _133: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _134: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:154:23: 154:33
    let _135: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _136: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _137: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _138: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _139: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _140: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _142: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _143: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _144: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _145: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _146: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _147: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _148: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _149: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _150: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _151: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _152: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:156:24: 156:34
    let _153: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _154: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _155: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _156: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _157: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _158: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _160: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _161: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _162: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _163: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _164: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _165: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _166: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _167: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _168: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _169: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _170: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:158:24: 158:40
    let _171: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _172: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _173: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _174: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _175: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _176: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _178: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _179: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _180: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _181: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _182: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _183: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _184: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _185: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _186: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _187: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _188: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:160:24: 160:32
    let _189: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _190: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _191: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _192: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _193: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _194: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _196: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _197: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _198: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _199: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _200: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _201: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _202: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _203: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _204: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _205: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _206: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:162:24: 162:38
    let _207: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _208: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _209: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _210: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _211: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _212: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _214: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _215: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _216: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _217: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _218: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _219: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _220: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _221: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _222: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _223: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _224: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:164:24: 164:34
    let _225: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _226: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _227: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _228: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _229: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _230: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _232: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _233: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _234: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _235: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _236: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _237: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _238: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _239: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _240: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _241: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _242: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:166:24: 166:33
    let _243: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _244: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _245: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _246: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _247: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _248: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _250: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _251: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _252: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _253: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _254: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _255: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _256: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _257: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _258: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _259: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _260: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:168:24: 168:31
    let _261: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _262: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _263: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _264: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _265: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _266: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _268: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _269: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _270: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _271: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _272: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _273: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _274: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _275: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _276: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _277: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _278: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:170:24: 170:35
    let _279: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _280: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _281: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _282: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _283: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _284: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _286: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _287: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _288: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _289: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _290: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _291: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _292: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _293: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _294: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _295: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _296: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:172:24: 172:34
    let _297: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _298: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _299: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _300: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _301: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _302: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _304: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _305: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _306: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _307: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _308: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _309: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _310: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _311: (&std::result::Result<bool, ()>, &std::result::Result<bool, ()>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _312: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _313: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _314: std::result::Result<bool, ()>; // in scope 0 at ui/try-operator.rs:174:27: 174:42
    let _315: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _316: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _317: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _318: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _319: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _320: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _322: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _323: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _324: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _325: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _326: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _327: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _328: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _329: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _330: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _331: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _332: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _333: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _334: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _335: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _336: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _337: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _338: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _339: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _340: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _341: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _342: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _343: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _344: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _345: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _27;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _28;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _33: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _33;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _45;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _46;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _51: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _51;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug left_val => _63;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _64;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _69: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 8 {
            debug kind => _69;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 9 {
        debug left_val => _81;           // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _82;          // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _87: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 10 {
            debug kind => _87;           // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 11 {
        debug left_val => _99;           // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _100;         // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _105: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 12 {
            debug kind => _105;          // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 13 {
        debug left_val => _117;          // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _118;         // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _123: core::panicking::AssertKind; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 14 {
            debug kind => _123;          // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 15 {
        debug left_val => _135;          // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _136;         // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _141: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 16 {
            debug kind => _141;          // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 17 {
        debug left_val => _153;          // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _154;         // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _159: core::panicking::AssertKind; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 18 {
            debug kind => _159;          // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 19 {
        debug left_val => _171;          // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _172;         // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _177: core::panicking::AssertKind; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 20 {
            debug kind => _177;          // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 21 {
        debug left_val => _189;          // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _190;         // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _195: core::panicking::AssertKind; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 22 {
            debug kind => _195;          // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 23 {
        debug left_val => _207;          // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _208;         // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _213: core::panicking::AssertKind; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 24 {
            debug kind => _213;          // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 25 {
        debug left_val => _225;          // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _226;         // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _231: core::panicking::AssertKind; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 26 {
            debug kind => _231;          // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 27 {
        debug left_val => _243;          // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _244;         // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _249: core::panicking::AssertKind; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 28 {
            debug kind => _249;          // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 29 {
        debug left_val => _261;          // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _262;         // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _267: core::panicking::AssertKind; // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 30 {
            debug kind => _267;          // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 31 {
        debug left_val => _279;          // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _280;         // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _285: core::panicking::AssertKind; // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 32 {
            debug kind => _285;          // in scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 33 {
        debug left_val => _297;          // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _298;         // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _303: core::panicking::AssertKind; // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 34 {
            debug kind => _303;          // in scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 35 {
        debug left_val => _315;          // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _316;         // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _321: core::panicking::AssertKind; // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 36 {
            debug kind => _321;          // in scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _345 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Result<i32, ParseIntError>, val: Unevaluated(main, [], Some(promoted[16])) }
        _2 = _345;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _4 = on_method() -> bb1;         // scope 0 at ui/try-operator.rs:140:23: 140:34
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:140:23: 140:32
                                         // + literal: Const { ty: fn() -> Result<i32, ParseIntError> {on_method}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_4;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_1.0: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_1.1: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = _5;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = <Result<i32, ParseIntError> as PartialEq>::eq(move _9, move _10) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>) -> bool {<Result<i32, ParseIntError> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = Not(move _8);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _11 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _13, move _14, move _16, move _18); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>}, val: Value(<ZST>) }
    }

    bb4: {
        _24 = const "3";                 // scope 0 at ui/try-operator.rs:142:19: 142:22
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:142:19: 142:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _23 = _24;                       // scope 0 at ui/try-operator.rs:142:19: 142:34
        _22 = <str as ToString>::to_string(move _23) -> bb5; // scope 0 at ui/try-operator.rs:142:19: 142:34
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:142:23: 142:32
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb5: {
        _21 = Result::<String, ParseIntError>::Ok(move _22); // scope 0 at ui/try-operator.rs:142:16: 142:35
        _20 = &_21;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _26 = in_chain() -> [return: bb6, unwind: bb77]; // scope 0 at ui/try-operator.rs:142:37: 142:47
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:142:37: 142:45
                                         // + literal: Const { ty: fn() -> Result<String, ParseIntError> {in_chain}, val: Value(<ZST>) }
    }

    bb6: {
        _25 = &_26;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _19 = (move _20, move _25);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _27 = (_19.0: &std::result::Result<std::string::String, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _28 = (_19.1: &std::result::Result<std::string::String, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _31 = _27;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _32 = _28;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _30 = <Result<String, ParseIntError> as PartialEq>::eq(move _31, move _32) -> [return: bb7, unwind: bb76]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<String, ParseIntError>, &'b Result<String, ParseIntError>) -> bool {<Result<String, ParseIntError> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        _29 = Not(move _30);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _29) -> [0: bb9, otherwise: bb8]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _33 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = _27;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _36 = _37;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _39 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = _39;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _34 = core::panicking::assert_failed::<Result<String, ParseIntError>, Result<String, ParseIntError>>(move _35, move _36, move _38, move _40) -> bb76; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<String, ParseIntError>, &'b Result<String, ParseIntError>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<String, ParseIntError>, Result<String, ParseIntError>>}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_26) -> [return: bb10, unwind: bb77]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb10: {
        drop(_21) -> bb11;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb11: {
        _344 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Result<i32, ParseIntError>, val: Unevaluated(main, [], Some(promoted[15])) }
        _42 = _344;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _44 = on_call() -> bb12;         // scope 0 at ui/try-operator.rs:144:23: 144:32
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:144:23: 144:30
                                         // + literal: Const { ty: fn() -> Result<i32, ParseIntError> {on_call}, val: Value(<ZST>) }
    }

    bb12: {
        _43 = &_44;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _41 = (move _42, move _43);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _45 = (_41.0: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _46 = (_41.1: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _49 = _45;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _50 = _46;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _48 = <Result<i32, ParseIntError> as PartialEq>::eq(move _49, move _50) -> bb13; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>) -> bool {<Result<i32, ParseIntError> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb13: {
        _47 = Not(move _48);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _47) -> [0: bb15, otherwise: bb14]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb14: {
        _51 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _53 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _55 = _45;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _54 = _55;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _46;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _56 = _57;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _58 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _52 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _53, move _54, move _56, move _58); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>}, val: Value(<ZST>) }
    }

    bb15: {
        _343 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Result<i32, ParseIntError>, val: Unevaluated(main, [], Some(promoted[14])) }
        _60 = _343;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _62 = nested() -> bb16;          // scope 0 at ui/try-operator.rs:146:23: 146:31
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:146:23: 146:29
                                         // + literal: Const { ty: fn() -> Result<i32, ParseIntError> {nested}, val: Value(<ZST>) }
    }

    bb16: {
        _61 = &_62;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _59 = (move _60, move _61);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _63 = (_59.0: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _64 = (_59.1: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _67 = _63;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _68 = _64;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _66 = <Result<i32, ParseIntError> as PartialEq>::eq(move _67, move _68) -> bb17; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>) -> bool {<Result<i32, ParseIntError> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb17: {
        _65 = Not(move _66);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _65) -> [0: bb19, otherwise: bb18]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb18: {
        _69 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _71 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _73 = _63;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _72 = _73;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _75 = _64;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _74 = _75;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _76 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _70 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _71, move _72, move _74, move _76); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>}, val: Value(<ZST>) }
    }

    bb19: {
        _342 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Result<i32, ParseIntError>, val: Unevaluated(main, [], Some(promoted[13])) }
        _78 = _342;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _80 = on_path() -> bb20;         // scope 0 at ui/try-operator.rs:148:23: 148:32
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:148:23: 148:30
                                         // + literal: Const { ty: fn() -> Result<i32, ParseIntError> {on_path}, val: Value(<ZST>) }
    }

    bb20: {
        _79 = &_80;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _77 = (move _78, move _79);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _81 = (_77.0: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _82 = (_77.1: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _85 = _81;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _86 = _82;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _84 = <Result<i32, ParseIntError> as PartialEq>::eq(move _85, move _86) -> bb21; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>) -> bool {<Result<i32, ParseIntError> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb21: {
        _83 = Not(move _84);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _83) -> [0: bb23, otherwise: bb22]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb22: {
        _87 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _89 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _91 = _81;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _90 = _91;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _93 = _82;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _92 = _93;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _94 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _88 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _89, move _90, move _92, move _94); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>}, val: Value(<ZST>) }
    }

    bb23: {
        _341 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Result<i32, ParseIntError>, val: Unevaluated(main, [], Some(promoted[12])) }
        _96 = _341;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _98 = on_macro() -> bb24;        // scope 0 at ui/try-operator.rs:150:23: 150:33
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:150:23: 150:31
                                         // + literal: Const { ty: fn() -> Result<i32, ParseIntError> {on_macro}, val: Value(<ZST>) }
    }

    bb24: {
        _97 = &_98;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _95 = (move _96, move _97);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _99 = (_95.0: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _100 = (_95.1: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _103 = _99;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _104 = _100;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _102 = <Result<i32, ParseIntError> as PartialEq>::eq(move _103, move _104) -> bb25; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>) -> bool {<Result<i32, ParseIntError> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb25: {
        _101 = Not(move _102);           // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _101) -> [0: bb27, otherwise: bb26]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb26: {
        _105 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _107 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _109 = _99;                      // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _108 = _109;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _111 = _100;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _110 = _111;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _112 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _106 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _107, move _108, move _110, move _112); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>}, val: Value(<ZST>) }
    }

    bb27: {
        _340 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Result<i32, ParseIntError>, val: Unevaluated(main, [], Some(promoted[11])) }
        _114 = _340;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _116 = on_parens() -> bb28;      // scope 0 at ui/try-operator.rs:152:23: 152:34
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:152:23: 152:32
                                         // + literal: Const { ty: fn() -> Result<i32, ParseIntError> {on_parens}, val: Value(<ZST>) }
    }

    bb28: {
        _115 = &_116;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _113 = (move _114, move _115);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _117 = (_113.0: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _118 = (_113.1: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _121 = _117;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _122 = _118;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _120 = <Result<i32, ParseIntError> as PartialEq>::eq(move _121, move _122) -> bb29; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>) -> bool {<Result<i32, ParseIntError> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb29: {
        _119 = Not(move _120);           // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _119) -> [0: bb31, otherwise: bb30]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb30: {
        _123 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _125 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _127 = _117;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _126 = _127;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _129 = _118;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _128 = _129;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _130 = Option::<Arguments<'_>>::None; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _124 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _125, move _126, move _128, move _130); // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>}, val: Value(<ZST>) }
    }

    bb31: {
        _339 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Result<i32, ParseIntError>, val: Unevaluated(main, [], Some(promoted[10])) }
        _132 = _339;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _134 = on_block() -> bb32;       // scope 0 at ui/try-operator.rs:154:23: 154:33
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:154:23: 154:31
                                         // + literal: Const { ty: fn() -> Result<i32, ParseIntError> {on_block}, val: Value(<ZST>) }
    }

    bb32: {
        _133 = &_134;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _131 = (move _132, move _133);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _135 = (_131.0: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _136 = (_131.1: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _139 = _135;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _140 = _136;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _138 = <Result<i32, ParseIntError> as PartialEq>::eq(move _139, move _140) -> bb33; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>) -> bool {<Result<i32, ParseIntError> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb33: {
        _137 = Not(move _138);           // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _137) -> [0: bb35, otherwise: bb34]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb34: {
        _141 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _143 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _145 = _135;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _144 = _145;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _147 = _136;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _146 = _147;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _148 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _142 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _143, move _144, move _146, move _148); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>}, val: Value(<ZST>) }
    }

    bb35: {
        _338 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Result<i32, ParseIntError>, val: Unevaluated(main, [], Some(promoted[9])) }
        _150 = _338;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _152 = on_field() -> bb36;       // scope 0 at ui/try-operator.rs:156:24: 156:34
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:156:24: 156:32
                                         // + literal: Const { ty: fn() -> Result<i32, ParseIntError> {on_field}, val: Value(<ZST>) }
    }

    bb36: {
        _151 = &_152;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _149 = (move _150, move _151);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _153 = (_149.0: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _154 = (_149.1: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _157 = _153;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _158 = _154;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _156 = <Result<i32, ParseIntError> as PartialEq>::eq(move _157, move _158) -> bb37; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>) -> bool {<Result<i32, ParseIntError> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb37: {
        _155 = Not(move _156);           // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _155) -> [0: bb39, otherwise: bb38]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb38: {
        _159 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _161 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _163 = _153;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _162 = _163;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _165 = _154;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _164 = _165;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _166 = Option::<Arguments<'_>>::None; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _160 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _161, move _162, move _164, move _166); // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>}, val: Value(<ZST>) }
    }

    bb39: {
        _337 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Result<i32, ParseIntError>, val: Unevaluated(main, [], Some(promoted[8])) }
        _168 = _337;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _170 = on_tuple_field() -> bb40; // scope 0 at ui/try-operator.rs:158:24: 158:40
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:158:24: 158:38
                                         // + literal: Const { ty: fn() -> Result<i32, ParseIntError> {on_tuple_field}, val: Value(<ZST>) }
    }

    bb40: {
        _169 = &_170;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _167 = (move _168, move _169);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _171 = (_167.0: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _172 = (_167.1: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _175 = _171;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _176 = _172;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _174 = <Result<i32, ParseIntError> as PartialEq>::eq(move _175, move _176) -> bb41; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>) -> bool {<Result<i32, ParseIntError> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb41: {
        _173 = Not(move _174);           // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _173) -> [0: bb43, otherwise: bb42]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb42: {
        _177 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _179 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _181 = _171;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _180 = _181;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _183 = _172;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _182 = _183;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _184 = Option::<Arguments<'_>>::None; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _178 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _179, move _180, move _182, move _184); // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>}, val: Value(<ZST>) }
    }

    bb43: {
        _336 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Result<i32, ParseIntError>, val: Unevaluated(main, [], Some(promoted[7])) }
        _186 = _336;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _188 = on_try() -> bb44;         // scope 0 at ui/try-operator.rs:160:24: 160:32
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:160:24: 160:30
                                         // + literal: Const { ty: fn() -> Result<i32, ParseIntError> {on_try}, val: Value(<ZST>) }
    }

    bb44: {
        _187 = &_188;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _185 = (move _186, move _187);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _189 = (_185.0: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _190 = (_185.1: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _193 = _189;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _194 = _190;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _192 = <Result<i32, ParseIntError> as PartialEq>::eq(move _193, move _194) -> bb45; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>) -> bool {<Result<i32, ParseIntError> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb45: {
        _191 = Not(move _192);           // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _191) -> [0: bb47, otherwise: bb46]; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb46: {
        _195 = const core::panicking::AssertKind::Eq; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _197 = const core::panicking::AssertKind::Eq; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _199 = _189;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _198 = _199;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _201 = _190;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _200 = _201;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _202 = Option::<Arguments<'_>>::None; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _196 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _197, move _198, move _200, move _202); // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>}, val: Value(<ZST>) }
    }

    bb47: {
        _335 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Result<i32, ParseIntError>, val: Unevaluated(main, [], Some(promoted[6])) }
        _204 = _335;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _206 = on_binary_op() -> bb48;   // scope 0 at ui/try-operator.rs:162:24: 162:38
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:162:24: 162:36
                                         // + literal: Const { ty: fn() -> Result<i32, ParseIntError> {on_binary_op}, val: Value(<ZST>) }
    }

    bb48: {
        _205 = &_206;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _203 = (move _204, move _205);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _207 = (_203.0: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _208 = (_203.1: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _211 = _207;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _212 = _208;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _210 = <Result<i32, ParseIntError> as PartialEq>::eq(move _211, move _212) -> bb49; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>) -> bool {<Result<i32, ParseIntError> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb49: {
        _209 = Not(move _210);           // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _209) -> [0: bb51, otherwise: bb50]; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb50: {
        _213 = const core::panicking::AssertKind::Eq; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _215 = const core::panicking::AssertKind::Eq; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _217 = _207;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _216 = _217;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _219 = _208;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _218 = _219;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _220 = Option::<Arguments<'_>>::None; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _214 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _215, move _216, move _218, move _220); // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>}, val: Value(<ZST>) }
    }

    bb51: {
        _334 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Result<i32, ParseIntError>, val: Unevaluated(main, [], Some(promoted[5])) }
        _222 = _334;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _224 = on_index() -> bb52;       // scope 0 at ui/try-operator.rs:164:24: 164:34
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:164:24: 164:32
                                         // + literal: Const { ty: fn() -> Result<i32, ParseIntError> {on_index}, val: Value(<ZST>) }
    }

    bb52: {
        _223 = &_224;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _221 = (move _222, move _223);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _225 = (_221.0: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _226 = (_221.1: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _229 = _225;                     // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _230 = _226;                     // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _228 = <Result<i32, ParseIntError> as PartialEq>::eq(move _229, move _230) -> bb53; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>) -> bool {<Result<i32, ParseIntError> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb53: {
        _227 = Not(move _228);           // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _227) -> [0: bb55, otherwise: bb54]; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb54: {
        _231 = const core::panicking::AssertKind::Eq; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _233 = const core::panicking::AssertKind::Eq; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _235 = _225;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _234 = _235;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _237 = _226;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _236 = _237;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _238 = Option::<Arguments<'_>>::None; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _232 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _233, move _234, move _236, move _238); // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>}, val: Value(<ZST>) }
    }

    bb55: {
        _333 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Result<i32, ParseIntError>, val: Unevaluated(main, [], Some(promoted[4])) }
        _240 = _333;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _242 = on_args() -> bb56;        // scope 0 at ui/try-operator.rs:166:24: 166:33
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:166:24: 166:31
                                         // + literal: Const { ty: fn() -> Result<i32, ParseIntError> {on_args}, val: Value(<ZST>) }
    }

    bb56: {
        _241 = &_242;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _239 = (move _240, move _241);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _243 = (_239.0: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _244 = (_239.1: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _247 = _243;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _248 = _244;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _246 = <Result<i32, ParseIntError> as PartialEq>::eq(move _247, move _248) -> bb57; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>) -> bool {<Result<i32, ParseIntError> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb57: {
        _245 = Not(move _246);           // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _245) -> [0: bb59, otherwise: bb58]; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb58: {
        _249 = const core::panicking::AssertKind::Eq; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _251 = const core::panicking::AssertKind::Eq; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _253 = _243;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _252 = _253;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _255 = _244;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _254 = _255;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _256 = Option::<Arguments<'_>>::None; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _250 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _251, move _252, move _254, move _256); // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>}, val: Value(<ZST>) }
    }

    bb59: {
        _332 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Result<i32, ParseIntError>, val: Unevaluated(main, [], Some(promoted[3])) }
        _258 = _332;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _260 = on_if() -> bb60;          // scope 0 at ui/try-operator.rs:168:24: 168:31
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:168:24: 168:29
                                         // + literal: Const { ty: fn() -> Result<i32, ParseIntError> {on_if}, val: Value(<ZST>) }
    }

    bb60: {
        _259 = &_260;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _257 = (move _258, move _259);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _261 = (_257.0: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _262 = (_257.1: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _265 = _261;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _266 = _262;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _264 = <Result<i32, ParseIntError> as PartialEq>::eq(move _265, move _266) -> bb61; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>) -> bool {<Result<i32, ParseIntError> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb61: {
        _263 = Not(move _264);           // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _263) -> [0: bb63, otherwise: bb62]; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb62: {
        _267 = const core::panicking::AssertKind::Eq; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _269 = const core::panicking::AssertKind::Eq; // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _271 = _261;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _270 = _271;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _273 = _262;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _272 = _273;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _274 = Option::<Arguments<'_>>::None; // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _268 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _269, move _270, move _272, move _274); // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>}, val: Value(<ZST>) }
    }

    bb63: {
        _331 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Result<i32, ParseIntError>, val: Unevaluated(main, [], Some(promoted[2])) }
        _276 = _331;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _278 = on_if_let() -> bb64;      // scope 0 at ui/try-operator.rs:170:24: 170:35
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:170:24: 170:33
                                         // + literal: Const { ty: fn() -> Result<i32, ParseIntError> {on_if_let}, val: Value(<ZST>) }
    }

    bb64: {
        _277 = &_278;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _275 = (move _276, move _277);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _279 = (_275.0: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _280 = (_275.1: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _283 = _279;                     // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _284 = _280;                     // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _282 = <Result<i32, ParseIntError> as PartialEq>::eq(move _283, move _284) -> bb65; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>) -> bool {<Result<i32, ParseIntError> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb65: {
        _281 = Not(move _282);           // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _281) -> [0: bb67, otherwise: bb66]; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb66: {
        _285 = const core::panicking::AssertKind::Eq; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _287 = const core::panicking::AssertKind::Eq; // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _289 = _279;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _288 = _289;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _291 = _280;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _290 = _291;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _292 = Option::<Arguments<'_>>::None; // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _286 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _287, move _288, move _290, move _292); // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>}, val: Value(<ZST>) }
    }

    bb67: {
        _330 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Result<i32, ParseIntError>, val: Unevaluated(main, [], Some(promoted[1])) }
        _294 = _330;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _296 = on_match() -> bb68;       // scope 0 at ui/try-operator.rs:172:24: 172:34
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:172:24: 172:32
                                         // + literal: Const { ty: fn() -> Result<i32, ParseIntError> {on_match}, val: Value(<ZST>) }
    }

    bb68: {
        _295 = &_296;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _293 = (move _294, move _295);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _297 = (_293.0: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _298 = (_293.1: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _301 = _297;                     // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _302 = _298;                     // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _300 = <Result<i32, ParseIntError> as PartialEq>::eq(move _301, move _302) -> bb69; // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>) -> bool {<Result<i32, ParseIntError> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb69: {
        _299 = Not(move _300);           // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _299) -> [0: bb71, otherwise: bb70]; // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb70: {
        _303 = const core::panicking::AssertKind::Eq; // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _305 = const core::panicking::AssertKind::Eq; // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _307 = _297;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _306 = _307;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _309 = _298;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _308 = _309;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _310 = Option::<Arguments<'_>>::None; // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _304 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _305, move _306, move _308, move _310); // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>}, val: Value(<ZST>) }
    }

    bb71: {
        _329 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Result<bool, ()>, val: Unevaluated(main, [], Some(promoted[0])) }
        _312 = _329;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _314 = tight_binding() -> bb72;  // scope 0 at ui/try-operator.rs:174:27: 174:42
                                         // mir::Constant
                                         // + span: ui/try-operator.rs:174:27: 174:40
                                         // + literal: Const { ty: fn() -> Result<bool, ()> {tight_binding}, val: Value(<ZST>) }
    }

    bb72: {
        _313 = &_314;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _311 = (move _312, move _313);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _315 = (_311.0: &std::result::Result<bool, ()>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _316 = (_311.1: &std::result::Result<bool, ()>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _319 = _315;                     // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _320 = _316;                     // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _318 = <Result<bool, ()> as PartialEq>::eq(move _319, move _320) -> bb73; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<bool, ()>, &'b Result<bool, ()>) -> bool {<Result<bool, ()> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb73: {
        _317 = Not(move _318);           // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _317) -> [0: bb75, otherwise: bb74]; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb74: {
        _321 = const core::panicking::AssertKind::Eq; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _323 = const core::panicking::AssertKind::Eq; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _325 = _315;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _324 = _325;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _327 = _316;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _326 = _327;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _328 = Option::<Arguments<'_>>::None; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _322 = core::panicking::assert_failed::<Result<bool, ()>, Result<bool, ()>>(move _323, move _324, move _326, move _328); // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<bool, ()>, &'b Result<bool, ()>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<bool, ()>, Result<bool, ()>>}, val: Value(<ZST>) }
    }

    bb75: {
        return;                          // scope 0 at ui/try-operator.rs:175:2: 175:2
    }

    bb76 (cleanup): {
        drop(_26) -> bb77;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb77 (cleanup): {
        drop(_21) -> bb78;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb78 (cleanup): {
        resume;                          // scope 0 at ui/try-operator.rs:139:1: 175:2
    }
}

promoted[0] in main: &Result<bool, ()> = {
    let mut _0: &std::result::Result<bool, ()>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::result::Result<bool, ()>; // in scope 0 at ui/try-operator.rs:174:16: 174:25

    bb0: {
        _1 = Result::<bool, ()>::Ok(const false); // scope 0 at ui/try-operator.rs:174:16: 174:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[1] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:172:16: 172:22

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 29_i32); // scope 0 at ui/try-operator.rs:172:16: 172:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[2] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:170:16: 170:22

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 25_i32); // scope 0 at ui/try-operator.rs:170:16: 170:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[3] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:168:16: 168:22

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 22_i32); // scope 0 at ui/try-operator.rs:168:16: 168:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[4] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:166:16: 166:22

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const -1_i32); // scope 0 at ui/try-operator.rs:166:16: 166:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[5] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:164:16: 164:22

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 19_i32); // scope 0 at ui/try-operator.rs:164:16: 164:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[6] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:162:16: 162:22

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const -3_i32); // scope 0 at ui/try-operator.rs:162:16: 162:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[7] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:160:16: 160:22

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 12_i32); // scope 0 at ui/try-operator.rs:160:16: 160:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[8] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:158:16: 158:22

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 11_i32); // scope 0 at ui/try-operator.rs:158:16: 158:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[9] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:156:16: 156:22

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 10_i32); // scope 0 at ui/try-operator.rs:156:16: 156:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[10] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:154:16: 154:21

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 9_i32); // scope 0 at ui/try-operator.rs:154:16: 154:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[11] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:152:16: 152:21

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 8_i32); // scope 0 at ui/try-operator.rs:152:16: 152:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[12] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:150:16: 150:21

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 7_i32); // scope 0 at ui/try-operator.rs:150:16: 150:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[13] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:148:16: 148:21

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 6_i32); // scope 0 at ui/try-operator.rs:148:16: 148:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[14] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:146:16: 146:21

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 5_i32); // scope 0 at ui/try-operator.rs:146:16: 146:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[15] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:144:16: 144:21

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 4_i32); // scope 0 at ui/try-operator.rs:144:16: 144:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[16] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator.rs:140:16: 140:21

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 3_i32); // scope 0 at ui/try-operator.rs:140:16: 140:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

fn <impl at ui/try-operator.rs:182:1: 182:31>::from(_1: std::io::Error) -> Error {
    debug e => _1;                       // in scope 0 at ui/try-operator.rs:183:13: 183:14
    let mut _0: Error;                   // return place in scope 0 at ui/try-operator.rs:183:30: 183:35
    let mut _2: std::io::Error;          // in scope 0 at ui/try-operator.rs:184:19: 184:20

    bb0: {
        _2 = move _1;                    // scope 0 at ui/try-operator.rs:184:19: 184:20
        _0 = Error::Io(move _2);         // scope 0 at ui/try-operator.rs:184:9: 184:21
        return;                          // scope 0 at ui/try-operator.rs:185:6: 185:6
    }
}

fn <impl at ui/try-operator.rs:188:1: 188:35>::from(_1: ParseIntError) -> Error {
    debug e => _1;                       // in scope 0 at ui/try-operator.rs:189:13: 189:14
    let mut _0: Error;                   // return place in scope 0 at ui/try-operator.rs:189:34: 189:39
    let mut _2: std::num::ParseIntError; // in scope 0 at ui/try-operator.rs:190:22: 190:23

    bb0: {
        _2 = move _1;                    // scope 0 at ui/try-operator.rs:190:22: 190:23
        _0 = Error::Parse(move _2);      // scope 0 at ui/try-operator.rs:190:9: 190:24
        return;                          // scope 0 at ui/try-operator.rs:191:6: 191:6
    }
}

fn Error::Io(_1: std::io::Error) -> Error {
    let mut _0: Error;                   // return place in scope 0 at ui/try-operator.rs:178:5: 178:7

    bb0: {
        _0 = Error::Io(move _1);         // scope 0 at ui/try-operator.rs:178:5: 178:7
        return;                          // scope 0 at ui/try-operator.rs:178:5: 178:7
    }
}

// MIR FOR CTFE
fn Error::Io(_1: std::io::Error) -> Error {
    let mut _0: Error;                   // return place in scope 0 at ui/try-operator.rs:178:5: 178:7

    bb0: {
        _0 = Error::Io(move _1);         // scope 0 at ui/try-operator.rs:178:5: 178:7
        return;                          // scope 0 at ui/try-operator.rs:178:5: 178:7
    }
}

fn Error::Parse(_1: ParseIntError) -> Error {
    let mut _0: Error;                   // return place in scope 0 at ui/try-operator.rs:179:5: 179:10

    bb0: {
        _0 = Error::Parse(move _1);      // scope 0 at ui/try-operator.rs:179:5: 179:10
        return;                          // scope 0 at ui/try-operator.rs:179:5: 179:10
    }
}

// MIR FOR CTFE
fn Error::Parse(_1: ParseIntError) -> Error {
    let mut _0: Error;                   // return place in scope 0 at ui/try-operator.rs:179:5: 179:10

    bb0: {
        _0 = Error::Parse(move _1);      // scope 0 at ui/try-operator.rs:179:5: 179:10
        return;                          // scope 0 at ui/try-operator.rs:179:5: 179:10
    }
}
