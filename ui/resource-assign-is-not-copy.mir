// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/resource-assign-is-not-copy.rs:6:10: 6:15>::fmt(_1: &r<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/resource-assign-is-not-copy.rs:6:10: 6:15
    debug f => _2;                       // in scope 0 at ui/resource-assign-is-not-copy.rs:6:10: 6:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/resource-assign-is-not-copy.rs:6:10: 6:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/resource-assign-is-not-copy.rs:6:10: 6:15
    let mut _4: &str;                    // in scope 0 at ui/resource-assign-is-not-copy.rs:6:10: 6:15
    let _5: &str;                        // in scope 0 at ui/resource-assign-is-not-copy.rs:6:10: 6:15
    let mut _6: &str;                    // in scope 0 at ui/resource-assign-is-not-copy.rs:8:5: 8:23
    let _7: &str;                        // in scope 0 at ui/resource-assign-is-not-copy.rs:8:5: 8:23
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/resource-assign-is-not-copy.rs:8:5: 8:23
    let mut _9: &&&std::cell::Cell<isize>; // in scope 0 at ui/resource-assign-is-not-copy.rs:8:5: 8:23
    let _10: &&&std::cell::Cell<isize>;  // in scope 0 at ui/resource-assign-is-not-copy.rs:8:5: 8:23
    let _11: &&std::cell::Cell<isize>;   // in scope 0 at ui/resource-assign-is-not-copy.rs:8:5: 8:23

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/resource-assign-is-not-copy.rs:6:10: 6:15
        _5 = const "r";                  // scope 0 at ui/resource-assign-is-not-copy.rs:6:10: 6:15
                                         // mir::Constant
                                         // + span: ui/resource-assign-is-not-copy.rs:6:10: 6:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/resource-assign-is-not-copy.rs:6:10: 6:15
        _7 = const "i";                  // scope 0 at ui/resource-assign-is-not-copy.rs:8:5: 8:23
                                         // mir::Constant
                                         // + span: ui/resource-assign-is-not-copy.rs:8:5: 8:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/resource-assign-is-not-copy.rs:8:5: 8:23
        _11 = &((*_1).0: &std::cell::Cell<isize>); // scope 0 at ui/resource-assign-is-not-copy.rs:8:5: 8:23
        _10 = &_11;                      // scope 0 at ui/resource-assign-is-not-copy.rs:8:5: 8:23
        _9 = _10;                        // scope 0 at ui/resource-assign-is-not-copy.rs:8:5: 8:23
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/resource-assign-is-not-copy.rs:8:5: 8:23
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _3, move _4, move _6, move _8) -> bb1; // scope 0 at ui/resource-assign-is-not-copy.rs:6:10: 6:15
                                         // mir::Constant
                                         // + span: ui/resource-assign-is-not-copy.rs:6:10: 6:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/resource-assign-is-not-copy.rs:6:15: 6:15
    }
}

fn <impl at ui/resource-assign-is-not-copy.rs:11:1: 11:24>::drop(_1: &mut r<'_>) -> () {
    debug self => _1;                    // in scope 0 at ui/resource-assign-is-not-copy.rs:12:13: 12:22
    let mut _0: ();                      // return place in scope 0 at ui/resource-assign-is-not-copy.rs:12:24: 12:24
    let _2: ();                          // in scope 0 at ui/resource-assign-is-not-copy.rs:13:9: 13:37
    let mut _3: &std::cell::Cell<isize>; // in scope 0 at ui/resource-assign-is-not-copy.rs:13:9: 13:37
    let mut _4: isize;                   // in scope 0 at ui/resource-assign-is-not-copy.rs:13:20: 13:36
    let mut _5: isize;                   // in scope 0 at ui/resource-assign-is-not-copy.rs:13:20: 13:32
    let mut _6: &std::cell::Cell<isize>; // in scope 0 at ui/resource-assign-is-not-copy.rs:13:20: 13:32
    let mut _7: (isize, bool);           // in scope 0 at ui/resource-assign-is-not-copy.rs:13:20: 13:36
    let mut _8: &std::cell::Cell<isize>; // in scope 0 at ui/resource-assign-is-not-copy.rs:12:13: 12:22
    let mut _9: &std::cell::Cell<isize>; // in scope 0 at ui/resource-assign-is-not-copy.rs:12:13: 12:22

    bb0: {
        _8 = deref_copy ((*_1).0: &std::cell::Cell<isize>); // scope 0 at ui/resource-assign-is-not-copy.rs:13:9: 13:37
        _3 = _8;                         // scope 0 at ui/resource-assign-is-not-copy.rs:13:9: 13:37
        _9 = deref_copy ((*_1).0: &std::cell::Cell<isize>); // scope 0 at ui/resource-assign-is-not-copy.rs:13:20: 13:32
        _6 = _9;                         // scope 0 at ui/resource-assign-is-not-copy.rs:13:20: 13:32
        _5 = Cell::<isize>::get(move _6) -> bb1; // scope 0 at ui/resource-assign-is-not-copy.rs:13:20: 13:32
                                         // mir::Constant
                                         // + span: ui/resource-assign-is-not-copy.rs:13:27: 13:30
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<isize>) -> isize {Cell::<isize>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = CheckedAdd(_5, const 1_isize); // scope 0 at ui/resource-assign-is-not-copy.rs:13:20: 13:36
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, const 1_isize) -> bb2; // scope 0 at ui/resource-assign-is-not-copy.rs:13:20: 13:36
    }

    bb2: {
        _4 = move (_7.0: isize);         // scope 0 at ui/resource-assign-is-not-copy.rs:13:20: 13:36
        _2 = Cell::<isize>::set(move _3, move _4) -> bb3; // scope 0 at ui/resource-assign-is-not-copy.rs:13:9: 13:37
                                         // mir::Constant
                                         // + span: ui/resource-assign-is-not-copy.rs:13:16: 13:19
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<isize>, isize) {Cell::<isize>::set}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/resource-assign-is-not-copy.rs:14:6: 14:6
    }
}

fn r(_1: &Cell<isize>) -> r<'_> {
    debug i => _1;                       // in scope 0 at ui/resource-assign-is-not-copy.rs:17:6: 17:7
    let mut _0: r<'_>;                   // return place in scope 0 at ui/resource-assign-is-not-copy.rs:17:26: 17:27
    let mut _2: &std::cell::Cell<isize>; // in scope 0 at ui/resource-assign-is-not-copy.rs:19:12: 19:13

    bb0: {
        _2 = _1;                         // scope 0 at ui/resource-assign-is-not-copy.rs:19:12: 19:13
        _0 = r::<'_> { i: move _2 };     // scope 0 at ui/resource-assign-is-not-copy.rs:18:5: 20:6
        return;                          // scope 0 at ui/resource-assign-is-not-copy.rs:21:2: 21:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/resource-assign-is-not-copy.rs:23:15: 23:15
    let _1: &std::cell::Cell<isize>;     // in scope 0 at ui/resource-assign-is-not-copy.rs:24:9: 24:10
    let _2: std::cell::Cell<isize>;      // in scope 0 at ui/resource-assign-is-not-copy.rs:24:14: 24:26
    let mut _4: &std::cell::Cell<isize>; // in scope 0 at ui/resource-assign-is-not-copy.rs:27:19: 27:20
    let mut _6: r<'_>;                   // in scope 0 at ui/resource-assign-is-not-copy.rs:28:18: 28:19
    let _9: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _10: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: &[&str];                // in scope 0 at ui/resource-assign-is-not-copy.rs:30:18: 30:24
    let mut _12: &[&str; 2];             // in scope 0 at ui/resource-assign-is-not-copy.rs:30:18: 30:24
    let _13: &[&str; 2];                 // in scope 0 at ui/resource-assign-is-not-copy.rs:30:18: 30:24
    let mut _14: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _16: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _17: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _18: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/resource-assign-is-not-copy.rs:30:26: 30:27
    let mut _19: &r<'_>;                 // in scope 0 at ui/resource-assign-is-not-copy.rs:30:26: 30:27
    let _20: &r<'_>;                     // in scope 0 at ui/resource-assign-is-not-copy.rs:30:26: 30:27
    let mut _21: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _22: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _23: isize;                      // in scope 0 at ui/resource-assign-is-not-copy.rs:32:16: 32:23
    let mut _24: &std::cell::Cell<isize>; // in scope 0 at ui/resource-assign-is-not-copy.rs:32:16: 32:23
    let mut _25: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _28: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _29: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _30: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _31: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _33: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _34: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _35: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _36: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _37: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _38: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug i => _1;                   // in scope 1 at ui/resource-assign-is-not-copy.rs:24:9: 24:10
        let _3: r<'_>;                   // in scope 1 at ui/resource-assign-is-not-copy.rs:27:13: 27:14
        let _26: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _27: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _40: &isize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug a => _3;               // in scope 2 at ui/resource-assign-is-not-copy.rs:27:13: 27:14
            let _5: (r<'_>, i32);        // in scope 2 at ui/resource-assign-is-not-copy.rs:28:13: 28:14
            scope 3 {
                debug b => _5;           // in scope 3 at ui/resource-assign-is-not-copy.rs:28:13: 28:14
                let _7: r<'_>;           // in scope 3 at ui/resource-assign-is-not-copy.rs:29:14: 29:15
                let _8: i32;             // in scope 3 at ui/resource-assign-is-not-copy.rs:29:17: 29:19
                scope 4 {
                    debug c => _7;       // in scope 4 at ui/resource-assign-is-not-copy.rs:29:14: 29:15
                    debug _d => _8;      // in scope 4 at ui/resource-assign-is-not-copy.rs:29:17: 29:19
                    let mut _41: &[&str; 2]; // in scope 4 at ui/resource-assign-is-not-copy.rs:30:18: 30:24
                }
            }
        }
        scope 5 {
            debug left_val => _26;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _27;      // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _32: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 6 {
                debug kind => _32;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _2 = Cell::<isize>::new(const 0_isize) -> bb1; // scope 0 at ui/resource-assign-is-not-copy.rs:24:14: 24:26
                                         // mir::Constant
                                         // + span: ui/resource-assign-is-not-copy.rs:24:14: 24:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Cell<isize> {Cell::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = &_2;                        // scope 0 at ui/resource-assign-is-not-copy.rs:24:13: 24:26
        _4 = _1;                         // scope 1 at ui/resource-assign-is-not-copy.rs:27:19: 27:20
        _3 = r(move _4) -> bb2;          // scope 1 at ui/resource-assign-is-not-copy.rs:27:17: 27:21
                                         // mir::Constant
                                         // + span: ui/resource-assign-is-not-copy.rs:27:17: 27:18
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<isize>) -> r<'a> {r}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = move _3;                    // scope 2 at ui/resource-assign-is-not-copy.rs:28:18: 28:19
        _5 = (move _6, const 10_i32);    // scope 2 at ui/resource-assign-is-not-copy.rs:28:17: 28:24
        _7 = move (_5.0: r<'_>);         // scope 3 at ui/resource-assign-is-not-copy.rs:29:14: 29:15
        _8 = const 10_i32;               // scope 3 at ui/resource-assign-is-not-copy.rs:29:17: 29:19
        _41 = const _;                   // scope 4 at ui/resource-assign-is-not-copy.rs:30:18: 30:24
                                         // mir::Constant
                                         // + span: ui/resource-assign-is-not-copy.rs:30:18: 30:24
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _13 = _41;                       // scope 4 at ui/resource-assign-is-not-copy.rs:30:18: 30:24
        _12 = _13;                       // scope 4 at ui/resource-assign-is-not-copy.rs:30:18: 30:24
        _11 = move _12 as &[&str] (Pointer(Unsize)); // scope 4 at ui/resource-assign-is-not-copy.rs:30:18: 30:24
        _20 = &_7;                       // scope 4 at ui/resource-assign-is-not-copy.rs:30:26: 30:27
        _19 = _20;                       // scope 4 at ui/resource-assign-is-not-copy.rs:30:26: 30:27
        _18 = core::fmt::ArgumentV1::<'_>::new_debug::<r<'_>>(move _19) -> [return: bb3, unwind: bb10]; // scope 4 at ui/resource-assign-is-not-copy.rs:30:26: 30:27
                                         // mir::Constant
                                         // + span: ui/resource-assign-is-not-copy.rs:30:26: 30:27
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b r<'_>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<r<'_>>}, val: Value(<ZST>) }
    }

    bb3: {
        _17 = [move _18];                // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _16 = &_17;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _15 = _16;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _14 = move _15 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = Arguments::<'_>::new_v1(move _11, move _14) -> [return: bb4, unwind: bb10]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = _print(move _10) -> [return: bb5, unwind: bb10]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_7) -> bb6;                 // scope 3 at ui/resource-assign-is-not-copy.rs:31:5: 31:6
    }

    bb6: {
        _24 = _1;                        // scope 1 at ui/resource-assign-is-not-copy.rs:32:16: 32:23
        _23 = Cell::<isize>::get(move _24) -> bb7; // scope 1 at ui/resource-assign-is-not-copy.rs:32:16: 32:23
                                         // mir::Constant
                                         // + span: ui/resource-assign-is-not-copy.rs:32:18: 32:21
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<isize>) -> isize {Cell::<isize>::get}, val: Value(<ZST>) }
    }

    bb7: {
        _22 = &_23;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _40 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _25 = _40;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _21 = (move _22, move _25);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _26 = (_21.0: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _27 = (_21.1: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _30 = (*_26);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _31 = const 1_isize;             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _29 = Eq(move _30, move _31);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _28 = Not(move _29);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _28) -> [0: bb9, otherwise: bb8]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _32 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _34 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _36 = _26;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _35 = _36;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _27;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _37 = _38;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _33 = core::panicking::assert_failed::<isize, isize>(move _34, move _35, move _37, move _39); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/resource-assign-is-not-copy.rs:33:2: 33:2
    }

    bb10 (cleanup): {
        drop(_7) -> bb11;                // scope 3 at ui/resource-assign-is-not-copy.rs:31:5: 31:6
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/resource-assign-is-not-copy.rs:23:1: 33:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/resource-assign-is-not-copy.rs:32:25: 32:26

    bb0: {
        _1 = const 1_isize;              // scope 0 at ui/resource-assign-is-not-copy.rs:32:25: 32:26
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/resource-assign-is-not-copy.rs:30:18: 30:24
    let mut _1: [&str; 2];               // in scope 0 at ui/resource-assign-is-not-copy.rs:30:18: 30:24

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/resource-assign-is-not-copy.rs:30:18: 30:24
                                         // mir::Constant
                                         // + span: ui/resource-assign-is-not-copy.rs:30:18: 30:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/resource-assign-is-not-copy.rs:30:18: 30:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/resource-assign-is-not-copy.rs:30:18: 30:24
        return;                          // scope 0 at ui/resource-assign-is-not-copy.rs:30:18: 30:24
    }
}
