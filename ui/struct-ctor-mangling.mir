// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn size_of_val(_1: &T) -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/struct-ctor-mangling.rs:3:29: 3:34

    bb0: {
        _0 = std::mem::size_of::<T>() -> bb1; // scope 0 at ui/struct-ctor-mangling.rs:4:5: 4:29
                                         // mir::Constant
                                         // + span: ui/struct-ctor-mangling.rs:4:5: 4:27
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-ctor-mangling.rs:5:2: 5:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-ctor-mangling.rs:11:11: 11:11
    let _1: usize;                       // in scope 0 at ui/struct-ctor-mangling.rs:12:5: 12:25
    let mut _2: &Foo;                    // in scope 0 at ui/struct-ctor-mangling.rs:12:17: 12:24
    let _3: &Foo;                        // in scope 0 at ui/struct-ctor-mangling.rs:12:17: 12:24
    let _4: usize;                       // in scope 0 at ui/struct-ctor-mangling.rs:13:5: 13:22
    let mut _5: &fn(i64) -> Foo {Foo};   // in scope 0 at ui/struct-ctor-mangling.rs:13:17: 13:21
    let _6: &fn(i64) -> Foo {Foo};       // in scope 0 at ui/struct-ctor-mangling.rs:13:17: 13:21
    let mut _7: &fn(i64) -> Foo {Foo};   // in scope 0 at ui/struct-ctor-mangling.rs:13:17: 13:21
    let mut _8: &Foo;                    // in scope 0 at ui/struct-ctor-mangling.rs:12:17: 12:24

    bb0: {
        _8 = const _;                    // scope 0 at ui/struct-ctor-mangling.rs:12:17: 12:24
                                         // mir::Constant
                                         // + span: ui/struct-ctor-mangling.rs:12:17: 12:24
                                         // + literal: Const { ty: &Foo, val: Unevaluated(main, [], Some(promoted[1])) }
        _3 = _8;                         // scope 0 at ui/struct-ctor-mangling.rs:12:17: 12:24
        _2 = _3;                         // scope 0 at ui/struct-ctor-mangling.rs:12:17: 12:24
        _1 = size_of_val::<Foo>(move _2) -> bb1; // scope 0 at ui/struct-ctor-mangling.rs:12:5: 12:25
                                         // mir::Constant
                                         // + span: ui/struct-ctor-mangling.rs:12:5: 12:16
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) -> usize {size_of_val::<Foo>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = const _;                    // scope 0 at ui/struct-ctor-mangling.rs:13:17: 13:21
                                         // mir::Constant
                                         // + span: ui/struct-ctor-mangling.rs:13:17: 13:21
                                         // + literal: Const { ty: &fn(i64) -> Foo {Foo}, val: Unevaluated(main, [], Some(promoted[0])) }
        _6 = _7;                         // scope 0 at ui/struct-ctor-mangling.rs:13:17: 13:21
        _5 = _6;                         // scope 0 at ui/struct-ctor-mangling.rs:13:17: 13:21
        _4 = size_of_val::<fn(i64) -> Foo {Foo}>(move _5) -> bb2; // scope 0 at ui/struct-ctor-mangling.rs:13:5: 13:22
                                         // mir::Constant
                                         // + span: ui/struct-ctor-mangling.rs:13:5: 13:16
                                         // + literal: Const { ty: for<'a> fn(&'a fn(i64) -> Foo {Foo}) -> usize {size_of_val::<fn(i64) -> Foo {Foo}>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/struct-ctor-mangling.rs:14:2: 14:2
    }
}

promoted[0] in main: &fn(i64) -> Foo {Foo} = {
    let mut _0: &fn(i64) -> Foo {Foo};   // return place in scope 0 at ui/struct-ctor-mangling.rs:13:17: 13:21
    let mut _1: fn(i64) -> Foo {Foo};    // in scope 0 at ui/struct-ctor-mangling.rs:13:18: 13:21

    bb0: {
        _1 = Foo;                        // scope 0 at ui/struct-ctor-mangling.rs:13:18: 13:21
                                         // mir::Constant
                                         // + span: ui/struct-ctor-mangling.rs:13:18: 13:21
                                         // + literal: Const { ty: fn(i64) -> Foo {Foo}, val: Value(<ZST>) }
        _0 = &_1;                        // scope 0 at ui/struct-ctor-mangling.rs:13:17: 13:21
        return;                          // scope 0 at ui/struct-ctor-mangling.rs:13:17: 13:21
    }
}

promoted[1] in main: &Foo = {
    let mut _0: &Foo;                    // return place in scope 0 at ui/struct-ctor-mangling.rs:12:17: 12:24
    let mut _1: Foo;                     // in scope 0 at ui/struct-ctor-mangling.rs:12:18: 12:24

    bb0: {
        _1 = Foo(const 0_i64);           // scope 0 at ui/struct-ctor-mangling.rs:12:18: 12:24
        _0 = &_1;                        // scope 0 at ui/struct-ctor-mangling.rs:12:17: 12:24
        return;                          // scope 0 at ui/struct-ctor-mangling.rs:12:17: 12:24
    }
}

fn Foo(_1: i64) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/struct-ctor-mangling.rs:7:1: 7:11

    bb0: {
        _0 = Foo(move _1);               // scope 0 at ui/struct-ctor-mangling.rs:7:1: 7:11
        return;                          // scope 0 at ui/struct-ctor-mangling.rs:7:1: 7:11
    }
}

// MIR FOR CTFE
fn Foo(_1: i64) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/struct-ctor-mangling.rs:7:1: 7:11

    bb0: {
        _0 = Foo(move _1);               // scope 0 at ui/struct-ctor-mangling.rs:7:1: 7:11
        return;                          // scope 0 at ui/struct-ctor-mangling.rs:7:1: 7:11
    }
}
