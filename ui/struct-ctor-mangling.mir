// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn size_of_val(_1: &T) -> usize {
    let mut _0: usize;

    bb0: {
        _0 = std::mem::size_of::<T>() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: usize;
    let _2: usize;
    let mut _3: &fn(i64) -> Foo {Foo};
    let mut _4: &Foo;

    bb0: {
        _4 = const _;
        _1 = size_of_val::<Foo>(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = const _;
        _2 = size_of_val::<fn(i64) -> Foo {Foo}>(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in main: &fn(i64) -> Foo {Foo} = {
    let mut _0: &fn(i64) -> Foo {Foo};
    let mut _1: fn(i64) -> Foo {Foo};

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo(const 0_i64);
        _0 = &_1;
        return;
    }
}

fn Foo(_1: i64) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: i64) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}
