// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/log-err-phi.rs:3:15: 3:15

    bb0: {
        return;                          // scope 0 at ui/log-err-phi.rs:7:2: 7:2
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/log-err-phi.rs:5:24: 5:32
    let mut _1: &str;                    // in scope 0 at ui/log-err-phi.rs:5:24: 5:32

    bb0: {
        _1 = const "foobar";             // scope 0 at ui/log-err-phi.rs:5:24: 5:32
                                         // mir::Constant
                                         // + span: ui/log-err-phi.rs:5:24: 5:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/log-err-phi.rs:5:24: 5:32
        return;                          // scope 0 at ui/log-err-phi.rs:5:24: 5:32
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/log-err-phi.rs:5:18: 5:22
    let mut _1: [&str; 2];               // in scope 0 at ui/log-err-phi.rs:5:18: 5:22

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/log-err-phi.rs:5:18: 5:22
                                         // mir::Constant
                                         // + span: ui/log-err-phi.rs:5:18: 5:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/log-err-phi.rs:5:18: 5:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/log-err-phi.rs:5:18: 5:22
        return;                          // scope 0 at ui/log-err-phi.rs:5:18: 5:22
    }
}
