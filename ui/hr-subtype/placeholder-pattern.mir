// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn hr_subtype(_1: for<'a, 'b> fn(&'a (), &'b ())) -> () {
    debug f => _1;                       // in scope 0 at ui/hr-subtype/placeholder-pattern.rs:4:19: 4:20
    let mut _0: ();                      // return place in scope 0 at ui/hr-subtype/placeholder-pattern.rs:4:54: 4:54
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
        }
    }

    bb0: {
        return;                          // scope 0 at ui/hr-subtype/placeholder-pattern.rs:9:2: 9:2
    }
}

fn simple(_1: (&i32,)) -> () {
    debug x => _1;                       // in scope 0 at ui/hr-subtype/placeholder-pattern.rs:11:15: 11:16
    let mut _0: ();                      // return place in scope 0 at ui/hr-subtype/placeholder-pattern.rs:11:35: 11:35
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/hr-subtype/placeholder-pattern.rs:13:2: 13:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/hr-subtype/placeholder-pattern.rs:15:11: 15:11
    let _1: ();                          // in scope 0 at ui/hr-subtype/placeholder-pattern.rs:16:5: 16:26
    let mut _2: for<'a, 'b> fn(&'a (), &'b ()); // in scope 0 at ui/hr-subtype/placeholder-pattern.rs:16:16: 16:25
    let mut _3: [closure@ui/hr-subtype/placeholder-pattern.rs:16:16: 16:22]; // in scope 0 at ui/hr-subtype/placeholder-pattern.rs:16:16: 16:25
    let _4: ();                          // in scope 0 at ui/hr-subtype/placeholder-pattern.rs:17:5: 17:18
    let mut _5: (&i32,);                 // in scope 0 at ui/hr-subtype/placeholder-pattern.rs:17:12: 17:17
    let mut _6: &i32;                    // in scope 0 at ui/hr-subtype/placeholder-pattern.rs:17:13: 17:15
    let _7: &i32;                        // in scope 0 at ui/hr-subtype/placeholder-pattern.rs:17:13: 17:15
    let mut _8: &i32;                    // in scope 0 at ui/hr-subtype/placeholder-pattern.rs:17:13: 17:15

    bb0: {
        _2 = move _3 as for<'a, 'b> fn(&'a (), &'b ()) (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/hr-subtype/placeholder-pattern.rs:16:16: 16:25
        _1 = hr_subtype(move _2) -> bb1; // scope 0 at ui/hr-subtype/placeholder-pattern.rs:16:5: 16:26
                                         // mir::Constant
                                         // + span: ui/hr-subtype/placeholder-pattern.rs:16:5: 16:15
                                         // + literal: Const { ty: fn(for<'a, 'b> fn(&'a (), &'b ())) {hr_subtype}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = const _;                    // scope 0 at ui/hr-subtype/placeholder-pattern.rs:17:13: 17:15
                                         // mir::Constant
                                         // + span: ui/hr-subtype/placeholder-pattern.rs:17:13: 17:15
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _7 = _8;                         // scope 0 at ui/hr-subtype/placeholder-pattern.rs:17:13: 17:15
        _6 = _7;                         // scope 0 at ui/hr-subtype/placeholder-pattern.rs:17:13: 17:15
        _5 = (move _6,);                 // scope 0 at ui/hr-subtype/placeholder-pattern.rs:17:12: 17:17
        _4 = simple(move _5) -> bb2;     // scope 0 at ui/hr-subtype/placeholder-pattern.rs:17:5: 17:18
                                         // mir::Constant
                                         // + span: ui/hr-subtype/placeholder-pattern.rs:17:5: 17:11
                                         // + literal: Const { ty: fn((&'static i32,)) {simple}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/hr-subtype/placeholder-pattern.rs:18:2: 18:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/hr-subtype/placeholder-pattern.rs:17:13: 17:15
    let mut _1: i32;                     // in scope 0 at ui/hr-subtype/placeholder-pattern.rs:17:14: 17:15

    bb0: {
        _1 = const 3_i32;                // scope 0 at ui/hr-subtype/placeholder-pattern.rs:17:14: 17:15
        _0 = &_1;                        // scope 0 at ui/hr-subtype/placeholder-pattern.rs:17:13: 17:15
        return;                          // scope 0 at ui/hr-subtype/placeholder-pattern.rs:17:13: 17:15
    }
}

fn main::{closure#0}(_1: &[closure@ui/hr-subtype/placeholder-pattern.rs:16:16: 16:22], _2: &(), _3: &()) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/hr-subtype/placeholder-pattern.rs:16:23: 16:23

    bb0: {
        return;                          // scope 0 at ui/hr-subtype/placeholder-pattern.rs:16:25: 16:25
    }
}
