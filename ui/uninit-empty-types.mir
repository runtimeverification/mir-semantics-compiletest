// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/uninit-empty-types.rs:11:15: 11:15
    let mut _2: std::mem::MaybeUninit<Foo>; // in scope 0 at ui/uninit-empty-types.rs:14:23: 14:44
    let mut _4: std::mem::MaybeUninit<[Foo; 2]>; // in scope 0 at ui/uninit-empty-types.rs:15:28: 15:49
    scope 1 {
        let _1: Foo;                     // in scope 1 at ui/uninit-empty-types.rs:14:13: 14:15
        scope 2 {
            debug _x => _1;              // in scope 2 at ui/uninit-empty-types.rs:14:13: 14:15
            let _3: [Foo; 2];            // in scope 2 at ui/uninit-empty-types.rs:15:13: 15:15
            scope 3 {
                debug _x => _3;          // in scope 3 at ui/uninit-empty-types.rs:15:13: 15:15
                let _5: Foo;             // in scope 3 at ui/uninit-empty-types.rs:16:13: 16:15
                scope 4 {
                    debug _x => _5;      // in scope 4 at ui/uninit-empty-types.rs:16:13: 16:15
                    let _6: [Foo; 2];    // in scope 4 at ui/uninit-empty-types.rs:17:13: 17:15
                    scope 5 {
                        debug _x => _6;  // in scope 5 at ui/uninit-empty-types.rs:17:13: 17:15
                    }
                }
            }
        }
    }

    bb0: {
        _2 = MaybeUninit::<Foo>::uninit() -> bb1; // scope 1 at ui/uninit-empty-types.rs:14:23: 14:44
                                         // mir::Constant
                                         // + span: ui/uninit-empty-types.rs:14:23: 14:42
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> MaybeUninit<Foo> {MaybeUninit::<Foo>::uninit}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = MaybeUninit::<Foo>::assume_init(move _2) -> bb2; // scope 1 at ui/uninit-empty-types.rs:14:23: 14:58
                                         // mir::Constant
                                         // + span: ui/uninit-empty-types.rs:14:45: 14:56
                                         // + literal: Const { ty: unsafe fn(MaybeUninit<Foo>) -> Foo {MaybeUninit::<Foo>::assume_init}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = MaybeUninit::<[Foo; 2]>::uninit() -> bb3; // scope 2 at ui/uninit-empty-types.rs:15:28: 15:49
                                         // mir::Constant
                                         // + span: ui/uninit-empty-types.rs:15:28: 15:47
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn() -> MaybeUninit<[Foo; 2]> {MaybeUninit::<[Foo; 2]>::uninit}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = MaybeUninit::<[Foo; 2]>::assume_init(move _4) -> bb4; // scope 2 at ui/uninit-empty-types.rs:15:28: 15:63
                                         // mir::Constant
                                         // + span: ui/uninit-empty-types.rs:15:50: 15:61
                                         // + literal: Const { ty: unsafe fn(MaybeUninit<[Foo; 2]>) -> [Foo; 2] {MaybeUninit::<[Foo; 2]>::assume_init}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = uninitialized::<Foo>() -> bb5; // scope 3 at ui/uninit-empty-types.rs:16:23: 16:48
                                         // mir::Constant
                                         // + span: ui/uninit-empty-types.rs:16:23: 16:46
                                         // + literal: Const { ty: unsafe fn() -> Foo {uninitialized::<Foo>}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = uninitialized::<[Foo; 2]>() -> bb6; // scope 4 at ui/uninit-empty-types.rs:17:28: 17:53
                                         // mir::Constant
                                         // + span: ui/uninit-empty-types.rs:17:28: 17:51
                                         // + literal: Const { ty: unsafe fn() -> [Foo; 2] {uninitialized::<[Foo; 2]>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/uninit-empty-types.rs:19:2: 19:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/uninit-empty-types.rs:15:23: 15:24

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/uninit-empty-types.rs:15:23: 15:24
        return;                          // scope 0 at ui/uninit-empty-types.rs:15:23: 15:24
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/uninit-empty-types.rs:17:23: 17:24

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/uninit-empty-types.rs:17:23: 17:24
        return;                          // scope 0 at ui/uninit-empty-types.rs:17:23: 17:24
    }
}
