// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<std::string::String>;
    let mut _2: std::env::Args;
    let mut _3: bool;
    let mut _4: usize;
    let mut _5: &std::vec::Vec<std::string::String>;
    let _6: ();
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &std::backtrace::Backtrace;
    let _14: std::backtrace::Backtrace;
    let mut _16: std::result::Result<std::process::Output, std::io::Error>;
    let mut _17: &mut std::process::Command;
    let mut _18: &mut std::process::Command;
    let mut _19: &mut std::process::Command;
    let mut _20: &mut std::process::Command;
    let mut _21: &mut std::process::Command;
    let mut _22: std::process::Command;
    let mut _23: &std::string::String;
    let _24: &std::string::String;
    let mut _25: &std::vec::Vec<std::string::String>;
    let mut _28: std::fmt::Arguments<'_>;
    let mut _29: &[&str];
    let mut _30: &[core::fmt::rt::Argument<'_>];
    let _31: &[core::fmt::rt::Argument<'_>; 2];
    let _32: [core::fmt::rt::Argument<'_>; 2];
    let mut _33: core::fmt::rt::Argument<'_>;
    let _34: &&str;
    let _35: &str;
    let mut _36: std::result::Result<&str, std::str::Utf8Error>;
    let mut _37: &[u8];
    let _38: &[u8];
    let _39: &std::vec::Vec<u8>;
    let mut _40: core::fmt::rt::Argument<'_>;
    let _41: &&str;
    let _42: &str;
    let mut _43: std::result::Result<&str, std::str::Utf8Error>;
    let mut _44: &[u8];
    let _45: &[u8];
    let _46: &std::vec::Vec<u8>;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: &std::process::ExitStatus;
    let mut _50: bool;
    let mut _51: &str;
    let _52: &str;
    let mut _53: &std::string::String;
    let _54: ();
    let mut _55: std::fmt::Arguments<'_>;
    let mut _56: &[&str];
    let mut _57: &[core::fmt::rt::Argument<'_>];
    let _58: &[core::fmt::rt::Argument<'_>; 1];
    let _59: [core::fmt::rt::Argument<'_>; 1];
    let mut _60: core::fmt::rt::Argument<'_>;
    let _61: &std::process::ExitStatus;
    let _62: ();
    let mut _63: std::fmt::Arguments<'_>;
    let mut _64: &[&str];
    let mut _65: &[core::fmt::rt::Argument<'_>];
    let _66: &[core::fmt::rt::Argument<'_>; 1];
    let _67: [core::fmt::rt::Argument<'_>; 1];
    let mut _68: core::fmt::rt::Argument<'_>;
    let _69: &std::string::String;
    let _70: std::string::String;
    let mut _71: &str;
    let _72: &str;
    let mut _73: &std::string::String;
    let _74: &str;
    let _75: !;
    let mut _76: std::fmt::Arguments<'_>;
    let mut _77: &[&str];
    let mut _78: &[core::fmt::rt::Argument<'_>];
    let _79: &[core::fmt::rt::Argument<'_>; 1];
    let _80: [core::fmt::rt::Argument<'_>; 1];
    let mut _81: core::fmt::rt::Argument<'_>;
    scope 1 {
        debug args => _1;
        let _15: std::process::Output;
        let mut _82: &[&str; 2];
        scope 2 {
            debug out => _15;
            let _26: std::string::String;
            let _27: std::string::String;
            let mut _87: &[&str; 2];
            scope 3 {
                debug output => _26;
                let mut _83: &&str;
                let mut _84: &[&str; 2];
                let mut _85: &[&str; 2];
                let mut _86: &[&str; 2];
            }
            scope 4 {
                debug res => _27;
            }
        }
    }

    bb0: {
        _2 = args() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = <Args as Iterator>::collect::<Vec<String>>(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = &_1;
        _4 = Vec::<String>::len(move _5) -> [return: bb3, unwind: bb54];
    }

    bb3: {
        _3 = Ge(move _4, const 2_usize);
        switchInt(move _3) -> [0: bb9, otherwise: bb4];
    }

    bb4: {
        _82 = const _;
        _8 = _82 as &[&str] (Pointer(Unsize));
        _14 = Backtrace::force_capture() -> [return: bb5, unwind: bb54];
    }

    bb5: {
        _13 = &_14;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<Backtrace>(_13) -> [return: bb6, unwind: bb53];
    }

    bb6: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _7 = Arguments::<'_>::new_v1(move _8, move _9) -> [return: bb7, unwind: bb53];
    }

    bb7: {
        _6 = _print(move _7) -> [return: bb8, unwind: bb53];
    }

    bb8: {
        drop(_14) -> [return: bb47, unwind: bb54];
    }

    bb9: {
        _25 = &_1;
        _24 = <Vec<String> as Index<usize>>::index(move _25, const 0_usize) -> [return: bb10, unwind: bb54];
    }

    bb10: {
        _23 = _24;
        _22 = Command::new::<&String>(move _23) -> [return: bb11, unwind: bb54];
    }

    bb11: {
        _21 = &mut _22;
        _20 = Command::env::<&str, &str>(move _21, const "RUST_BACKTRACE", const "1") -> [return: bb12, unwind: bb52];
    }

    bb12: {
        _19 = _20;
        _18 = Command::arg::<&str>(move _19, const "foo") -> [return: bb13, unwind: bb52];
    }

    bb13: {
        _17 = _18;
        _16 = Command::output(move _17) -> [return: bb14, unwind: bb52];
    }

    bb14: {
        _15 = Result::<Output, std::io::Error>::unwrap(move _16) -> [return: bb15, unwind: bb52];
    }

    bb15: {
        drop(_22) -> [return: bb16, unwind: bb51];
    }

    bb16: {
        _87 = const _;
        _29 = _87 as &[&str] (Pointer(Unsize));
        _39 = &(_15.1: std::vec::Vec<u8>);
        _38 = <Vec<u8> as Deref>::deref(_39) -> [return: bb17, unwind: bb51];
    }

    bb17: {
        _37 = _38;
        _36 = from_utf8(move _37) -> [return: bb18, unwind: bb51];
    }

    bb18: {
        _35 = Result::<&str, Utf8Error>::unwrap(move _36) -> [return: bb19, unwind: bb51];
    }

    bb19: {
        _34 = &_35;
        _33 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_34) -> [return: bb20, unwind: bb51];
    }

    bb20: {
        _46 = &(_15.2: std::vec::Vec<u8>);
        _45 = <Vec<u8> as Deref>::deref(_46) -> [return: bb21, unwind: bb51];
    }

    bb21: {
        _44 = _45;
        _43 = from_utf8(move _44) -> [return: bb22, unwind: bb51];
    }

    bb22: {
        _42 = Result::<&str, Utf8Error>::unwrap(move _43) -> [return: bb23, unwind: bb51];
    }

    bb23: {
        _41 = &_42;
        _40 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_41) -> [return: bb24, unwind: bb51];
    }

    bb24: {
        _32 = [move _33, move _40];
        _31 = &_32;
        _30 = _31 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _28 = Arguments::<'_>::new_v1(move _29, move _30) -> [return: bb25, unwind: bb51];
    }

    bb25: {
        _27 = format(move _28) -> [return: bb26, unwind: bb51];
    }

    bb26: {
        _26 = move _27;
        _49 = &(_15.0: std::process::ExitStatus);
        _48 = ExitStatus::success(move _49) -> [return: bb30, unwind: bb50];
    }

    bb27: {
        _47 = const false;
        goto -> bb29;
    }

    bb28: {
        _53 = &_26;
        _52 = <String as Deref>::deref(move _53) -> [return: bb31, unwind: bb50];
    }

    bb29: {
        switchInt(move _47) -> [0: bb34, otherwise: bb33];
    }

    bb30: {
        switchInt(move _48) -> [0: bb27, otherwise: bb28];
    }

    bb31: {
        _51 = _52;
        _50 = core::str::<impl str>::contains::<'_, &str>(move _51, const "ui/backtrace-apple-no-dsymutil.rs") -> [return: bb32, unwind: bb50];
    }

    bb32: {
        _47 = move _50;
        goto -> bb29;
    }

    bb33: {
        drop(_26) -> [return: bb46, unwind: bb51];
    }

    bb34: {
        _86 = const _;
        _56 = _86 as &[&str] (Pointer(Unsize));
        _61 = &(_15.0: std::process::ExitStatus);
        _60 = core::fmt::rt::Argument::<'_>::new_display::<ExitStatus>(_61) -> [return: bb35, unwind: bb50];
    }

    bb35: {
        _59 = [move _60];
        _58 = &_59;
        _57 = _58 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _55 = Arguments::<'_>::new_v1(move _56, move _57) -> [return: bb36, unwind: bb50];
    }

    bb36: {
        _54 = _print(move _55) -> [return: bb37, unwind: bb50];
    }

    bb37: {
        _85 = const _;
        _64 = _85 as &[&str] (Pointer(Unsize));
        _73 = &_26;
        _72 = <String as Deref>::deref(move _73) -> [return: bb38, unwind: bb50];
    }

    bb38: {
        _71 = _72;
        _74 = const "\n\t";
        _70 = str::<impl str>::replace::<'_, &str>(move _71, const "\n", _74) -> [return: bb39, unwind: bb50];
    }

    bb39: {
        _69 = &_70;
        _68 = core::fmt::rt::Argument::<'_>::new_display::<String>(_69) -> [return: bb40, unwind: bb49];
    }

    bb40: {
        _67 = [move _68];
        _66 = &_67;
        _65 = _66 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _63 = Arguments::<'_>::new_v1(move _64, move _65) -> [return: bb41, unwind: bb49];
    }

    bb41: {
        _62 = _print(move _63) -> [return: bb42, unwind: bb49];
    }

    bb42: {
        drop(_70) -> [return: bb43, unwind: bb50];
    }

    bb43: {
        _84 = const _;
        _77 = _84 as &[&str] (Pointer(Unsize));
        _83 = const _;
        _81 = core::fmt::rt::Argument::<'_>::new_debug::<&str>(_83) -> [return: bb44, unwind: bb50];
    }

    bb44: {
        _80 = [move _81];
        _79 = &_80;
        _78 = _79 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _76 = Arguments::<'_>::new_v1(move _77, move _78) -> [return: bb45, unwind: bb50];
    }

    bb45: {
        _75 = panic_fmt(move _76) -> bb50;
    }

    bb46: {
        drop(_15) -> [return: bb47, unwind: bb54];
    }

    bb47: {
        drop(_1) -> [return: bb48, unwind continue];
    }

    bb48: {
        return;
    }

    bb49 (cleanup): {
        drop(_70) -> [return: bb50, unwind terminate];
    }

    bb50 (cleanup): {
        drop(_26) -> [return: bb51, unwind terminate];
    }

    bb51 (cleanup): {
        drop(_15) -> [return: bb54, unwind terminate];
    }

    bb52 (cleanup): {
        drop(_22) -> [return: bb54, unwind terminate];
    }

    bb53 (cleanup): {
        drop(_14) -> [return: bb54, unwind terminate];
    }

    bb54 (cleanup): {
        drop(_1) -> [return: bb55, unwind terminate];
    }

    bb55 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "ui/backtrace-apple-no-dsymutil.rs";
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "failed to find ", const " in output"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "child output:\n\t", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "status: ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
