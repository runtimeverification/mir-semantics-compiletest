// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &mut Box<u8>) -> () {
    debug x => _1;                       // in scope 0 at ui/cancel-clean-via-immediate-rvalue-ref.rs:4:8: 4:9
    let mut _0: ();                      // return place in scope 0 at ui/cancel-clean-via-immediate-rvalue-ref.rs:4:25: 4:25
    let mut _2: std::boxed::Box<u8>;     // in scope 0 at ui/cancel-clean-via-immediate-rvalue-ref.rs:5:10: 5:21

    bb0: {
        _2 = Box::<u8>::new(const 5_u8) -> bb1; // scope 0 at ui/cancel-clean-via-immediate-rvalue-ref.rs:5:10: 5:21
                                         // mir::Constant
                                         // + span: ui/cancel-clean-via-immediate-rvalue-ref.rs:5:10: 5:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u8) -> Box<u8> {Box::<u8>::new}, val: Value(<ZST>) }
    }

    bb1: {
        drop((*_1)) -> [return: bb3, unwind: bb2]; // scope 0 at ui/cancel-clean-via-immediate-rvalue-ref.rs:5:5: 5:7
    }

    bb2 (cleanup): {
        (*_1) = move _2;                 // scope 0 at ui/cancel-clean-via-immediate-rvalue-ref.rs:5:5: 5:7
        resume;                          // scope 0 at ui/cancel-clean-via-immediate-rvalue-ref.rs:4:1: 6:2
    }

    bb3: {
        (*_1) = move _2;                 // scope 0 at ui/cancel-clean-via-immediate-rvalue-ref.rs:5:5: 5:7
        return;                          // scope 0 at ui/cancel-clean-via-immediate-rvalue-ref.rs:6:2: 6:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/cancel-clean-via-immediate-rvalue-ref.rs:8:15: 8:15
    let _1: ();                          // in scope 0 at ui/cancel-clean-via-immediate-rvalue-ref.rs:9:5: 9:26
    let mut _2: &mut std::boxed::Box<u8>; // in scope 0 at ui/cancel-clean-via-immediate-rvalue-ref.rs:9:9: 9:25
    let mut _3: &mut std::boxed::Box<u8>; // in scope 0 at ui/cancel-clean-via-immediate-rvalue-ref.rs:9:9: 9:25
    let mut _4: std::boxed::Box<u8>;     // in scope 0 at ui/cancel-clean-via-immediate-rvalue-ref.rs:9:14: 9:25

    bb0: {
        _4 = Box::<u8>::new(const 4_u8) -> bb1; // scope 0 at ui/cancel-clean-via-immediate-rvalue-ref.rs:9:14: 9:25
                                         // mir::Constant
                                         // + span: ui/cancel-clean-via-immediate-rvalue-ref.rs:9:14: 9:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u8) -> Box<u8> {Box::<u8>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &mut _4;                    // scope 0 at ui/cancel-clean-via-immediate-rvalue-ref.rs:9:9: 9:25
        _2 = &mut (*_3);                 // scope 0 at ui/cancel-clean-via-immediate-rvalue-ref.rs:9:9: 9:25
        _1 = foo(move _2) -> [return: bb2, unwind: bb4]; // scope 0 at ui/cancel-clean-via-immediate-rvalue-ref.rs:9:5: 9:26
                                         // mir::Constant
                                         // + span: ui/cancel-clean-via-immediate-rvalue-ref.rs:9:5: 9:8
                                         // + literal: Const { ty: for<'a> fn(&'a mut Box<u8>) {foo}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_4) -> bb3;                 // scope 0 at ui/cancel-clean-via-immediate-rvalue-ref.rs:9:26: 9:27
    }

    bb3: {
        return;                          // scope 0 at ui/cancel-clean-via-immediate-rvalue-ref.rs:10:2: 10:2
    }

    bb4 (cleanup): {
        drop(_4) -> bb5;                 // scope 0 at ui/cancel-clean-via-immediate-rvalue-ref.rs:9:26: 9:27
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/cancel-clean-via-immediate-rvalue-ref.rs:8:1: 10:2
    }
}
