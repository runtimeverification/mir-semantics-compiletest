// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/derives/derive-Debug-use-ufcs-struct.rs:4:10: 4:15>::fmt(_1: &Bar, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&();
    let _7: &();

    bb0: {
        _3 = const "Bar";
        _4 = const "t";
        _7 = &((*_1).0: ());
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn Access::field(_1: &Self, _2: impl Sized, _3: impl Sized) -> () {
    debug self => _1;
    let mut _0: ();
    let _4: !;

    bb0: {
        _4 = begin_panic::<&str>(const "got into Access::field") -> bb1;
    }

    bb1 (cleanup): {
        drop(_3) -> [return: bb2, unwind terminate];
    }

    bb2 (cleanup): {
        drop(_2) -> [return: bb3, unwind terminate];
    }

    bb3 (cleanup): {
        resume;
    }
}

fn Access::finish(_1: &Self) -> Result<(), std::fmt::Error> {
    debug self => _1;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _2: !;

    bb0: {
        _2 = begin_panic::<&str>(const "got into Access::finish") -> unwind continue;
    }
}

fn Access::debug_struct(_1: &Self, _2: impl Sized, _3: impl Sized) -> () {
    debug self => _1;
    let mut _0: ();
    let _4: !;

    bb0: {
        _4 = begin_panic::<&str>(const "got into Access::debug_struct") -> bb1;
    }

    bb1 (cleanup): {
        drop(_3) -> [return: bb2, unwind terminate];
    }

    bb2 (cleanup): {
        drop(_2) -> [return: bb3, unwind terminate];
    }

    bb3 (cleanup): {
        resume;
    }
}

fn MutAccess::field(_1: &mut Self, _2: impl Sized, _3: impl Sized) -> () {
    debug self => _1;
    let mut _0: ();
    let _4: !;

    bb0: {
        _4 = begin_panic::<&str>(const "got into MutAccess::field") -> bb1;
    }

    bb1 (cleanup): {
        drop(_3) -> [return: bb2, unwind terminate];
    }

    bb2 (cleanup): {
        drop(_2) -> [return: bb3, unwind terminate];
    }

    bb3 (cleanup): {
        resume;
    }
}

fn MutAccess::finish(_1: &mut Self) -> Result<(), std::fmt::Error> {
    debug self => _1;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _2: !;

    bb0: {
        _2 = begin_panic::<&str>(const "got into MutAccess::finish") -> unwind continue;
    }
}

fn MutAccess::debug_struct(_1: &mut Self, _2: impl Sized, _3: impl Sized) -> () {
    debug self => _1;
    let mut _0: ();
    let _4: !;

    bb0: {
        _4 = begin_panic::<&str>(const "got into MutAccess::debug_struct") -> bb1;
    }

    bb1 (cleanup): {
        drop(_3) -> [return: bb2, unwind terminate];
    }

    bb2 (cleanup): {
        drop(_2) -> [return: bb3, unwind terminate];
    }

    bb3 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Bar;
    let mut _2: (&&str, &std::string::String);
    let mut _3: &std::string::String;
    let _4: std::string::String;
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &Bar;
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug bar => const Bar {{ t: () }};
        let _5: std::string::String;
        let _13: &&str;
        let _14: &std::string::String;
        let mut _20: &[&str; 1];
        let mut _21: &&str;
        scope 2 {
            debug res => _5;
        }
        scope 3 {
            debug left_val => _13;
            debug right_val => _14;
            let _17: core::panicking::AssertKind;
            scope 4 {
                debug kind => _17;
            }
        }
    }

    bb0: {
        _21 = const _;
        _20 = const _;
        _7 = _20 as &[&str] (Pointer(Unsize));
        _12 = &_1;
        _11 = core::fmt::rt::Argument::<'_>::new_debug::<Bar>(_12) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = format(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = move _5;
        _3 = &_4;
        _2 = (_21, move _3);
        _13 = (_2.0: &&str);
        _14 = (_2.1: &std::string::String);
        _16 = <&str as PartialEq<String>>::eq(_13, _14) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<&str, String>(move _17, _13, _14, move _19) -> bb8;
    }

    bb6: {
        drop(_4) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_4) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Bar { t: () }";
        _0 = &_1;
        return;
    }
}
