// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/derives/derive-partial-ord.rs:6:10: 6:19>::eq(_1: &P, _2: &P) -> bool {
    debug self => _1;                    // in scope 0 at ui/derives/derive-partial-ord.rs:6:10: 6:19
    debug other => _2;                   // in scope 0 at ui/derives/derive-partial-ord.rs:6:10: 6:19
    let mut _0: bool;                    // return place in scope 0 at ui/derives/derive-partial-ord.rs:6:10: 6:19
    let mut _3: bool;                    // in scope 0 at ui/derives/derive-partial-ord.rs:7:10: 7:13
    let mut _4: f64;                     // in scope 0 at ui/derives/derive-partial-ord.rs:7:10: 7:13
    let mut _5: f64;                     // in scope 0 at ui/derives/derive-partial-ord.rs:7:10: 7:13
    let mut _6: bool;                    // in scope 0 at ui/derives/derive-partial-ord.rs:7:15: 7:18
    let mut _7: f64;                     // in scope 0 at ui/derives/derive-partial-ord.rs:7:15: 7:18
    let mut _8: f64;                     // in scope 0 at ui/derives/derive-partial-ord.rs:7:15: 7:18

    bb0: {
        _4 = ((*_1).0: f64);             // scope 0 at ui/derives/derive-partial-ord.rs:7:10: 7:13
        _5 = ((*_2).0: f64);             // scope 0 at ui/derives/derive-partial-ord.rs:7:10: 7:13
        _3 = Eq(move _4, move _5);       // scope 0 at ui/derives/derive-partial-ord.rs:7:10: 7:13
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/derives/derive-partial-ord.rs:7:15: 7:18
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/derives/derive-partial-ord.rs:7:15: 7:18
        goto -> bb3;                     // scope 0 at ui/derives/derive-partial-ord.rs:7:15: 7:18
    }

    bb2: {
        _7 = ((*_1).1: f64);             // scope 0 at ui/derives/derive-partial-ord.rs:7:15: 7:18
        _8 = ((*_2).1: f64);             // scope 0 at ui/derives/derive-partial-ord.rs:7:15: 7:18
        _6 = Eq(move _7, move _8);       // scope 0 at ui/derives/derive-partial-ord.rs:7:15: 7:18
        _0 = move _6;                    // scope 0 at ui/derives/derive-partial-ord.rs:7:15: 7:18
        goto -> bb3;                     // scope 0 at ui/derives/derive-partial-ord.rs:7:15: 7:18
    }

    bb3: {
        return;                          // scope 0 at ui/derives/derive-partial-ord.rs:6:19: 6:19
    }
}

fn <impl at ui/derives/derive-partial-ord.rs:6:21: 6:31>::partial_cmp(_1: &P, _2: &P) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-partial-ord.rs:6:21: 6:31
    debug other => _2;                   // in scope 0 at ui/derives/derive-partial-ord.rs:6:21: 6:31
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/derives/derive-partial-ord.rs:6:21: 6:31
    let mut _3: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/derives/derive-partial-ord.rs:7:10: 7:13
    let mut _4: &f64;                    // in scope 0 at ui/derives/derive-partial-ord.rs:7:10: 7:13
    let _5: &f64;                        // in scope 0 at ui/derives/derive-partial-ord.rs:7:10: 7:13
    let mut _6: &f64;                    // in scope 0 at ui/derives/derive-partial-ord.rs:7:10: 7:13
    let _7: &f64;                        // in scope 0 at ui/derives/derive-partial-ord.rs:7:10: 7:13
    let mut _8: i8;                      // in scope 0 at ui/derives/derive-partial-ord.rs:7:10: 7:13
    let mut _9: isize;                   // in scope 0 at ui/derives/derive-partial-ord.rs:7:10: 7:13
    let mut _10: &f64;                   // in scope 0 at ui/derives/derive-partial-ord.rs:7:15: 7:18
    let _11: &f64;                       // in scope 0 at ui/derives/derive-partial-ord.rs:7:15: 7:18
    let mut _12: &f64;                   // in scope 0 at ui/derives/derive-partial-ord.rs:7:15: 7:18
    let _13: &f64;                       // in scope 0 at ui/derives/derive-partial-ord.rs:7:15: 7:18
    let _14: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/derives/derive-partial-ord.rs:7:10: 7:13
    scope 1 {
        debug cmp => _14;                // in scope 1 at ui/derives/derive-partial-ord.rs:7:10: 7:13
    }

    bb0: {
        _5 = &((*_1).0: f64);            // scope 0 at ui/derives/derive-partial-ord.rs:7:10: 7:13
        _4 = _5;                         // scope 0 at ui/derives/derive-partial-ord.rs:7:10: 7:13
        _7 = &((*_2).0: f64);            // scope 0 at ui/derives/derive-partial-ord.rs:7:10: 7:13
        _6 = _7;                         // scope 0 at ui/derives/derive-partial-ord.rs:7:10: 7:13
        _3 = <f64 as PartialOrd>::partial_cmp(move _4, move _6) -> bb1; // scope 0 at ui/derives/derive-partial-ord.rs:7:10: 7:13
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:7:10: 7:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a f64, &'b f64) -> Option<std::cmp::Ordering> {<f64 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = discriminant(_3);           // scope 0 at ui/derives/derive-partial-ord.rs:7:10: 7:13
        switchInt(move _9) -> [1: bb3, otherwise: bb2]; // scope 0 at ui/derives/derive-partial-ord.rs:7:10: 7:13
    }

    bb2: {
        _14 = _3;                        // scope 0 at ui/derives/derive-partial-ord.rs:7:10: 7:13
        _0 = _14;                        // scope 1 at ui/derives/derive-partial-ord.rs:7:10: 7:13
        goto -> bb5;                     // scope 0 at ui/derives/derive-partial-ord.rs:7:12: 7:13
    }

    bb3: {
        _8 = discriminant(((_3 as Some).0: std::cmp::Ordering)); // scope 0 at ui/derives/derive-partial-ord.rs:7:10: 7:13
        switchInt(move _8) -> [0: bb4, otherwise: bb2]; // scope 0 at ui/derives/derive-partial-ord.rs:7:10: 7:13
    }

    bb4: {
        _11 = &((*_1).1: f64);           // scope 0 at ui/derives/derive-partial-ord.rs:7:15: 7:18
        _10 = _11;                       // scope 0 at ui/derives/derive-partial-ord.rs:7:15: 7:18
        _13 = &((*_2).1: f64);           // scope 0 at ui/derives/derive-partial-ord.rs:7:15: 7:18
        _12 = _13;                       // scope 0 at ui/derives/derive-partial-ord.rs:7:15: 7:18
        _0 = <f64 as PartialOrd>::partial_cmp(move _10, move _12) -> bb5; // scope 0 at ui/derives/derive-partial-ord.rs:7:15: 7:18
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:7:15: 7:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a f64, &'b f64) -> Option<std::cmp::Ordering> {<f64 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/derives/derive-partial-ord.rs:6:31: 6:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-partial-ord.rs:9:11: 9:11
    let _1: &[f64];                      // in scope 0 at ui/derives/derive-partial-ord.rs:10:9: 10:15
    let mut _2: &[f64; 3];               // in scope 0 at ui/derives/derive-partial-ord.rs:10:26: 10:47
    let _3: &[f64; 3];                   // in scope 0 at ui/derives/derive-partial-ord.rs:10:26: 10:47
    let mut _4: std::slice::Iter<'_, f64>; // in scope 0 at ui/derives/derive-partial-ord.rs:11:14: 11:20
    let mut _5: &[f64];                  // in scope 0 at ui/derives/derive-partial-ord.rs:11:14: 11:20
    let mut _7: std::option::Option<&f64>; // in scope 0 at ui/derives/derive-partial-ord.rs:11:14: 11:20
    let mut _8: &mut std::slice::Iter<'_, f64>; // in scope 0 at ui/derives/derive-partial-ord.rs:11:14: 11:20
    let mut _9: &mut std::slice::Iter<'_, f64>; // in scope 0 at ui/derives/derive-partial-ord.rs:11:14: 11:20
    let mut _10: isize;                  // in scope 0 at ui/derives/derive-partial-ord.rs:11:5: 29:6
    let mut _12: std::slice::Iter<'_, f64>; // in scope 0 at ui/derives/derive-partial-ord.rs:12:18: 12:24
    let mut _13: &[f64];                 // in scope 0 at ui/derives/derive-partial-ord.rs:12:18: 12:24
    let mut _15: std::option::Option<&f64>; // in scope 0 at ui/derives/derive-partial-ord.rs:12:18: 12:24
    let mut _16: &mut std::slice::Iter<'_, f64>; // in scope 0 at ui/derives/derive-partial-ord.rs:12:18: 12:24
    let mut _17: &mut std::slice::Iter<'_, f64>; // in scope 0 at ui/derives/derive-partial-ord.rs:12:18: 12:24
    let mut _18: isize;                  // in scope 0 at ui/derives/derive-partial-ord.rs:12:9: 28:10
    let mut _20: std::slice::Iter<'_, f64>; // in scope 0 at ui/derives/derive-partial-ord.rs:13:22: 13:28
    let mut _21: &[f64];                 // in scope 0 at ui/derives/derive-partial-ord.rs:13:22: 13:28
    let mut _23: std::option::Option<&f64>; // in scope 0 at ui/derives/derive-partial-ord.rs:13:22: 13:28
    let mut _24: &mut std::slice::Iter<'_, f64>; // in scope 0 at ui/derives/derive-partial-ord.rs:13:22: 13:28
    let mut _25: &mut std::slice::Iter<'_, f64>; // in scope 0 at ui/derives/derive-partial-ord.rs:13:22: 13:28
    let mut _26: isize;                  // in scope 0 at ui/derives/derive-partial-ord.rs:13:13: 27:14
    let mut _28: std::slice::Iter<'_, f64>; // in scope 0 at ui/derives/derive-partial-ord.rs:14:26: 14:32
    let mut _29: &[f64];                 // in scope 0 at ui/derives/derive-partial-ord.rs:14:26: 14:32
    let mut _31: std::option::Option<&f64>; // in scope 0 at ui/derives/derive-partial-ord.rs:14:26: 14:32
    let mut _32: &mut std::slice::Iter<'_, f64>; // in scope 0 at ui/derives/derive-partial-ord.rs:14:26: 14:32
    let mut _33: &mut std::slice::Iter<'_, f64>; // in scope 0 at ui/derives/derive-partial-ord.rs:14:26: 14:32
    let mut _34: isize;                  // in scope 0 at ui/derives/derive-partial-ord.rs:14:17: 26:18
    let _36: ();                         // in scope 0 at ui/derives/derive-partial-ord.rs:16:21: 16:48
    let mut _37: &(f64, f64);            // in scope 0 at ui/derives/derive-partial-ord.rs:16:27: 16:36
    let _38: &(f64, f64);                // in scope 0 at ui/derives/derive-partial-ord.rs:16:27: 16:36
    let _39: (f64, f64);                 // in scope 0 at ui/derives/derive-partial-ord.rs:16:28: 16:36
    let mut _40: f64;                    // in scope 0 at ui/derives/derive-partial-ord.rs:16:29: 16:31
    let mut _41: f64;                    // in scope 0 at ui/derives/derive-partial-ord.rs:16:33: 16:35
    let mut _42: &(f64, f64);            // in scope 0 at ui/derives/derive-partial-ord.rs:16:38: 16:47
    let _43: &(f64, f64);                // in scope 0 at ui/derives/derive-partial-ord.rs:16:38: 16:47
    let _44: (f64, f64);                 // in scope 0 at ui/derives/derive-partial-ord.rs:16:39: 16:47
    let mut _45: f64;                    // in scope 0 at ui/derives/derive-partial-ord.rs:16:40: 16:42
    let mut _46: f64;                    // in scope 0 at ui/derives/derive-partial-ord.rs:16:44: 16:46
    let _47: ();                         // in scope 0 at ui/derives/derive-partial-ord.rs:19:21: 19:50
    let mut _48: &P;                     // in scope 0 at ui/derives/derive-partial-ord.rs:19:27: 19:37
    let _49: &P;                         // in scope 0 at ui/derives/derive-partial-ord.rs:19:27: 19:37
    let _50: P;                          // in scope 0 at ui/derives/derive-partial-ord.rs:19:28: 19:37
    let mut _51: f64;                    // in scope 0 at ui/derives/derive-partial-ord.rs:19:30: 19:32
    let mut _52: f64;                    // in scope 0 at ui/derives/derive-partial-ord.rs:19:34: 19:36
    let mut _53: &P;                     // in scope 0 at ui/derives/derive-partial-ord.rs:19:39: 19:49
    let _54: &P;                         // in scope 0 at ui/derives/derive-partial-ord.rs:19:39: 19:49
    let _55: P;                          // in scope 0 at ui/derives/derive-partial-ord.rs:19:40: 19:49
    let mut _56: f64;                    // in scope 0 at ui/derives/derive-partial-ord.rs:19:42: 19:44
    let mut _57: f64;                    // in scope 0 at ui/derives/derive-partial-ord.rs:19:46: 19:48
    let mut _58: (&std::option::Option<std::cmp::Ordering>, &std::option::Option<std::cmp::Ordering>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _59: &std::option::Option<std::cmp::Ordering>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _60: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/derives/derive-partial-ord.rs:23:25: 23:70
    let mut _61: &(f64, f64);            // in scope 0 at ui/derives/derive-partial-ord.rs:23:49: 23:58
    let _62: &(f64, f64);                // in scope 0 at ui/derives/derive-partial-ord.rs:23:49: 23:58
    let _63: (f64, f64);                 // in scope 0 at ui/derives/derive-partial-ord.rs:23:50: 23:58
    let mut _64: f64;                    // in scope 0 at ui/derives/derive-partial-ord.rs:23:51: 23:53
    let mut _65: f64;                    // in scope 0 at ui/derives/derive-partial-ord.rs:23:55: 23:57
    let mut _66: &(f64, f64);            // in scope 0 at ui/derives/derive-partial-ord.rs:23:60: 23:69
    let _67: &(f64, f64);                // in scope 0 at ui/derives/derive-partial-ord.rs:23:60: 23:69
    let _68: (f64, f64);                 // in scope 0 at ui/derives/derive-partial-ord.rs:23:61: 23:69
    let mut _69: f64;                    // in scope 0 at ui/derives/derive-partial-ord.rs:23:62: 23:64
    let mut _70: f64;                    // in scope 0 at ui/derives/derive-partial-ord.rs:23:66: 23:68
    let mut _71: &std::option::Option<std::cmp::Ordering>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _72: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/derives/derive-partial-ord.rs:24:25: 24:72
    let mut _73: &P;                     // in scope 0 at ui/derives/derive-partial-ord.rs:24:49: 24:59
    let _74: &P;                         // in scope 0 at ui/derives/derive-partial-ord.rs:24:49: 24:59
    let _75: P;                          // in scope 0 at ui/derives/derive-partial-ord.rs:24:50: 24:59
    let mut _76: f64;                    // in scope 0 at ui/derives/derive-partial-ord.rs:24:52: 24:54
    let mut _77: f64;                    // in scope 0 at ui/derives/derive-partial-ord.rs:24:56: 24:58
    let mut _78: &P;                     // in scope 0 at ui/derives/derive-partial-ord.rs:24:61: 24:71
    let _79: &P;                         // in scope 0 at ui/derives/derive-partial-ord.rs:24:61: 24:71
    let _80: P;                          // in scope 0 at ui/derives/derive-partial-ord.rs:24:62: 24:71
    let mut _81: f64;                    // in scope 0 at ui/derives/derive-partial-ord.rs:24:64: 24:66
    let mut _82: f64;                    // in scope 0 at ui/derives/derive-partial-ord.rs:24:68: 24:70
    let mut _85: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _86: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _87: &std::option::Option<std::cmp::Ordering>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _88: &std::option::Option<std::cmp::Ordering>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _90: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _91: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _92: &std::option::Option<std::cmp::Ordering>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _93: &std::option::Option<std::cmp::Ordering>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _94: &std::option::Option<std::cmp::Ordering>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _95: &std::option::Option<std::cmp::Ordering>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _96: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _97: &[f64; 3];              // in scope 0 at ui/derives/derive-partial-ord.rs:10:26: 10:47
    scope 1 {
        debug values => _1;              // in scope 1 at ui/derives/derive-partial-ord.rs:10:9: 10:15
        let mut _6: std::slice::Iter<'_, f64>; // in scope 1 at ui/derives/derive-partial-ord.rs:11:14: 11:20
        scope 2 {
            debug iter => _6;            // in scope 2 at ui/derives/derive-partial-ord.rs:11:14: 11:20
            let _11: &f64;               // in scope 2 at ui/derives/derive-partial-ord.rs:11:9: 11:10
            scope 3 {
                debug a => _11;          // in scope 3 at ui/derives/derive-partial-ord.rs:11:9: 11:10
                let mut _14: std::slice::Iter<'_, f64>; // in scope 3 at ui/derives/derive-partial-ord.rs:12:18: 12:24
                scope 4 {
                    debug iter => _14;   // in scope 4 at ui/derives/derive-partial-ord.rs:12:18: 12:24
                    let _19: &f64;       // in scope 4 at ui/derives/derive-partial-ord.rs:12:13: 12:14
                    scope 5 {
                        debug b => _19;  // in scope 5 at ui/derives/derive-partial-ord.rs:12:13: 12:14
                        let mut _22: std::slice::Iter<'_, f64>; // in scope 5 at ui/derives/derive-partial-ord.rs:13:22: 13:28
                        scope 6 {
                            debug iter => _22; // in scope 6 at ui/derives/derive-partial-ord.rs:13:22: 13:28
                            let _27: &f64; // in scope 6 at ui/derives/derive-partial-ord.rs:13:17: 13:18
                            scope 7 {
                                debug c => _27; // in scope 7 at ui/derives/derive-partial-ord.rs:13:17: 13:18
                                let mut _30: std::slice::Iter<'_, f64>; // in scope 7 at ui/derives/derive-partial-ord.rs:14:26: 14:32
                                scope 8 {
                                    debug iter => _30; // in scope 8 at ui/derives/derive-partial-ord.rs:14:26: 14:32
                                    let _35: &f64; // in scope 8 at ui/derives/derive-partial-ord.rs:14:21: 14:22
                                    scope 9 {
                                        debug d => _35; // in scope 9 at ui/derives/derive-partial-ord.rs:14:21: 14:22
                                        let _83: &std::option::Option<std::cmp::Ordering>; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                        let _84: &std::option::Option<std::cmp::Ordering>; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                        scope 10 {
                                            debug left_val => _83; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                            debug right_val => _84; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                            let _89: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                            scope 11 {
                                                debug kind => _89; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _97 = const _;                   // scope 0 at ui/derives/derive-partial-ord.rs:10:26: 10:47
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:10:26: 10:47
                                         // + literal: Const { ty: &[f64; 3], val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _97;                        // scope 0 at ui/derives/derive-partial-ord.rs:10:26: 10:47
        _2 = _3;                         // scope 0 at ui/derives/derive-partial-ord.rs:10:26: 10:47
        _1 = move _2 as &[f64] (Pointer(Unsize)); // scope 0 at ui/derives/derive-partial-ord.rs:10:26: 10:47
        _5 = _1;                         // scope 1 at ui/derives/derive-partial-ord.rs:11:14: 11:20
        _4 = <&[f64] as IntoIterator>::into_iter(move _5) -> bb1; // scope 1 at ui/derives/derive-partial-ord.rs:11:14: 11:20
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:11:14: 11:20
                                         // + literal: Const { ty: fn(&[f64]) -> <&[f64] as IntoIterator>::IntoIter {<&[f64] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = move _4;                    // scope 1 at ui/derives/derive-partial-ord.rs:11:14: 11:20
        goto -> bb2;                     // scope 2 at ui/derives/derive-partial-ord.rs:11:5: 29:6
    }

    bb2: {
        _9 = &mut _6;                    // scope 2 at ui/derives/derive-partial-ord.rs:11:14: 11:20
        _8 = &mut (*_9);                 // scope 2 at ui/derives/derive-partial-ord.rs:11:14: 11:20
        _7 = <std::slice::Iter<'_, f64> as Iterator>::next(move _8) -> bb3; // scope 2 at ui/derives/derive-partial-ord.rs:11:14: 11:20
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:11:14: 11:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, f64>) -> Option<<std::slice::Iter<'_, f64> as Iterator>::Item> {<std::slice::Iter<'_, f64> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = discriminant(_7);          // scope 2 at ui/derives/derive-partial-ord.rs:11:14: 11:20
        switchInt(move _10) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 2 at ui/derives/derive-partial-ord.rs:11:14: 11:20
    }

    bb4: {
        _11 = ((_7 as Some).0: &f64);    // scope 2 at ui/derives/derive-partial-ord.rs:11:9: 11:10
        _13 = _1;                        // scope 3 at ui/derives/derive-partial-ord.rs:12:18: 12:24
        _12 = <&[f64] as IntoIterator>::into_iter(move _13) -> bb7; // scope 3 at ui/derives/derive-partial-ord.rs:12:18: 12:24
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:12:18: 12:24
                                         // + literal: Const { ty: fn(&[f64]) -> <&[f64] as IntoIterator>::IntoIter {<&[f64] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 2 at ui/derives/derive-partial-ord.rs:11:14: 11:20
    }

    bb6: {
        return;                          // scope 0 at ui/derives/derive-partial-ord.rs:30:2: 30:2
    }

    bb7: {
        _14 = move _12;                  // scope 3 at ui/derives/derive-partial-ord.rs:12:18: 12:24
        goto -> bb8;                     // scope 4 at ui/derives/derive-partial-ord.rs:12:9: 28:10
    }

    bb8: {
        _17 = &mut _14;                  // scope 4 at ui/derives/derive-partial-ord.rs:12:18: 12:24
        _16 = &mut (*_17);               // scope 4 at ui/derives/derive-partial-ord.rs:12:18: 12:24
        _15 = <std::slice::Iter<'_, f64> as Iterator>::next(move _16) -> bb9; // scope 4 at ui/derives/derive-partial-ord.rs:12:18: 12:24
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:12:18: 12:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, f64>) -> Option<<std::slice::Iter<'_, f64> as Iterator>::Item> {<std::slice::Iter<'_, f64> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb9: {
        _18 = discriminant(_15);         // scope 4 at ui/derives/derive-partial-ord.rs:12:18: 12:24
        switchInt(move _18) -> [0: bb2, 1: bb10, otherwise: bb11]; // scope 4 at ui/derives/derive-partial-ord.rs:12:18: 12:24
    }

    bb10: {
        _19 = ((_15 as Some).0: &f64);   // scope 4 at ui/derives/derive-partial-ord.rs:12:13: 12:14
        _21 = _1;                        // scope 5 at ui/derives/derive-partial-ord.rs:13:22: 13:28
        _20 = <&[f64] as IntoIterator>::into_iter(move _21) -> bb12; // scope 5 at ui/derives/derive-partial-ord.rs:13:22: 13:28
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:13:22: 13:28
                                         // + literal: Const { ty: fn(&[f64]) -> <&[f64] as IntoIterator>::IntoIter {<&[f64] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb11: {
        unreachable;                     // scope 4 at ui/derives/derive-partial-ord.rs:12:18: 12:24
    }

    bb12: {
        _22 = move _20;                  // scope 5 at ui/derives/derive-partial-ord.rs:13:22: 13:28
        goto -> bb13;                    // scope 6 at ui/derives/derive-partial-ord.rs:13:13: 27:14
    }

    bb13: {
        _25 = &mut _22;                  // scope 6 at ui/derives/derive-partial-ord.rs:13:22: 13:28
        _24 = &mut (*_25);               // scope 6 at ui/derives/derive-partial-ord.rs:13:22: 13:28
        _23 = <std::slice::Iter<'_, f64> as Iterator>::next(move _24) -> bb14; // scope 6 at ui/derives/derive-partial-ord.rs:13:22: 13:28
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:13:22: 13:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, f64>) -> Option<<std::slice::Iter<'_, f64> as Iterator>::Item> {<std::slice::Iter<'_, f64> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb14: {
        _26 = discriminant(_23);         // scope 6 at ui/derives/derive-partial-ord.rs:13:22: 13:28
        switchInt(move _26) -> [0: bb8, 1: bb15, otherwise: bb16]; // scope 6 at ui/derives/derive-partial-ord.rs:13:22: 13:28
    }

    bb15: {
        _27 = ((_23 as Some).0: &f64);   // scope 6 at ui/derives/derive-partial-ord.rs:13:17: 13:18
        _29 = _1;                        // scope 7 at ui/derives/derive-partial-ord.rs:14:26: 14:32
        _28 = <&[f64] as IntoIterator>::into_iter(move _29) -> bb17; // scope 7 at ui/derives/derive-partial-ord.rs:14:26: 14:32
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:14:26: 14:32
                                         // + literal: Const { ty: fn(&[f64]) -> <&[f64] as IntoIterator>::IntoIter {<&[f64] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb16: {
        unreachable;                     // scope 6 at ui/derives/derive-partial-ord.rs:13:22: 13:28
    }

    bb17: {
        _30 = move _28;                  // scope 7 at ui/derives/derive-partial-ord.rs:14:26: 14:32
        goto -> bb18;                    // scope 8 at ui/derives/derive-partial-ord.rs:14:17: 26:18
    }

    bb18: {
        _33 = &mut _30;                  // scope 8 at ui/derives/derive-partial-ord.rs:14:26: 14:32
        _32 = &mut (*_33);               // scope 8 at ui/derives/derive-partial-ord.rs:14:26: 14:32
        _31 = <std::slice::Iter<'_, f64> as Iterator>::next(move _32) -> bb19; // scope 8 at ui/derives/derive-partial-ord.rs:14:26: 14:32
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:14:26: 14:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, f64>) -> Option<<std::slice::Iter<'_, f64> as Iterator>::Item> {<std::slice::Iter<'_, f64> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb19: {
        _34 = discriminant(_31);         // scope 8 at ui/derives/derive-partial-ord.rs:14:26: 14:32
        switchInt(move _34) -> [0: bb13, 1: bb20, otherwise: bb21]; // scope 8 at ui/derives/derive-partial-ord.rs:14:26: 14:32
    }

    bb20: {
        _35 = ((_31 as Some).0: &f64);   // scope 8 at ui/derives/derive-partial-ord.rs:14:21: 14:22
        _40 = (*_11);                    // scope 9 at ui/derives/derive-partial-ord.rs:16:29: 16:31
        _41 = (*_19);                    // scope 9 at ui/derives/derive-partial-ord.rs:16:33: 16:35
        _39 = (move _40, move _41);      // scope 9 at ui/derives/derive-partial-ord.rs:16:28: 16:36
        _38 = &_39;                      // scope 9 at ui/derives/derive-partial-ord.rs:16:27: 16:36
        _37 = _38;                       // scope 9 at ui/derives/derive-partial-ord.rs:16:27: 16:36
        _45 = (*_27);                    // scope 9 at ui/derives/derive-partial-ord.rs:16:40: 16:42
        _46 = (*_35);                    // scope 9 at ui/derives/derive-partial-ord.rs:16:44: 16:46
        _44 = (move _45, move _46);      // scope 9 at ui/derives/derive-partial-ord.rs:16:39: 16:47
        _43 = &_44;                      // scope 9 at ui/derives/derive-partial-ord.rs:16:38: 16:47
        _42 = _43;                       // scope 9 at ui/derives/derive-partial-ord.rs:16:38: 16:47
        _36 = check::<(f64, f64)>(move _37, move _42) -> bb22; // scope 9 at ui/derives/derive-partial-ord.rs:16:21: 16:48
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:16:21: 16:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (f64, f64), &'b (f64, f64)) {check::<(f64, f64)>}, val: Value(<ZST>) }
    }

    bb21: {
        unreachable;                     // scope 8 at ui/derives/derive-partial-ord.rs:14:26: 14:32
    }

    bb22: {
        _51 = (*_11);                    // scope 9 at ui/derives/derive-partial-ord.rs:19:30: 19:32
        _52 = (*_19);                    // scope 9 at ui/derives/derive-partial-ord.rs:19:34: 19:36
        _50 = P(move _51, move _52);     // scope 9 at ui/derives/derive-partial-ord.rs:19:28: 19:37
        _49 = &_50;                      // scope 9 at ui/derives/derive-partial-ord.rs:19:27: 19:37
        _48 = _49;                       // scope 9 at ui/derives/derive-partial-ord.rs:19:27: 19:37
        _56 = (*_27);                    // scope 9 at ui/derives/derive-partial-ord.rs:19:42: 19:44
        _57 = (*_35);                    // scope 9 at ui/derives/derive-partial-ord.rs:19:46: 19:48
        _55 = P(move _56, move _57);     // scope 9 at ui/derives/derive-partial-ord.rs:19:40: 19:49
        _54 = &_55;                      // scope 9 at ui/derives/derive-partial-ord.rs:19:39: 19:49
        _53 = _54;                       // scope 9 at ui/derives/derive-partial-ord.rs:19:39: 19:49
        _47 = check::<P>(move _48, move _53) -> bb23; // scope 9 at ui/derives/derive-partial-ord.rs:19:21: 19:50
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:19:21: 19:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a P, &'b P) {check::<P>}, val: Value(<ZST>) }
    }

    bb23: {
        _64 = (*_11);                    // scope 9 at ui/derives/derive-partial-ord.rs:23:51: 23:53
        _65 = (*_19);                    // scope 9 at ui/derives/derive-partial-ord.rs:23:55: 23:57
        _63 = (move _64, move _65);      // scope 9 at ui/derives/derive-partial-ord.rs:23:50: 23:58
        _62 = &_63;                      // scope 9 at ui/derives/derive-partial-ord.rs:23:49: 23:58
        _61 = _62;                       // scope 9 at ui/derives/derive-partial-ord.rs:23:49: 23:58
        _69 = (*_27);                    // scope 9 at ui/derives/derive-partial-ord.rs:23:62: 23:64
        _70 = (*_35);                    // scope 9 at ui/derives/derive-partial-ord.rs:23:66: 23:68
        _68 = (move _69, move _70);      // scope 9 at ui/derives/derive-partial-ord.rs:23:61: 23:69
        _67 = &_68;                      // scope 9 at ui/derives/derive-partial-ord.rs:23:60: 23:69
        _66 = _67;                       // scope 9 at ui/derives/derive-partial-ord.rs:23:60: 23:69
        _60 = <(f64, f64) as PartialOrd>::partial_cmp(move _61, move _66) -> bb24; // scope 9 at ui/derives/derive-partial-ord.rs:23:25: 23:70
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:23:25: 23:48
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (f64, f64), &'b (f64, f64)) -> Option<std::cmp::Ordering> {<(f64, f64) as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb24: {
        _59 = &_60;                      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _76 = (*_11);                    // scope 9 at ui/derives/derive-partial-ord.rs:24:52: 24:54
        _77 = (*_19);                    // scope 9 at ui/derives/derive-partial-ord.rs:24:56: 24:58
        _75 = P(move _76, move _77);     // scope 9 at ui/derives/derive-partial-ord.rs:24:50: 24:59
        _74 = &_75;                      // scope 9 at ui/derives/derive-partial-ord.rs:24:49: 24:59
        _73 = _74;                       // scope 9 at ui/derives/derive-partial-ord.rs:24:49: 24:59
        _81 = (*_27);                    // scope 9 at ui/derives/derive-partial-ord.rs:24:64: 24:66
        _82 = (*_35);                    // scope 9 at ui/derives/derive-partial-ord.rs:24:68: 24:70
        _80 = P(move _81, move _82);     // scope 9 at ui/derives/derive-partial-ord.rs:24:62: 24:71
        _79 = &_80;                      // scope 9 at ui/derives/derive-partial-ord.rs:24:61: 24:71
        _78 = _79;                       // scope 9 at ui/derives/derive-partial-ord.rs:24:61: 24:71
        _72 = <P as PartialOrd>::partial_cmp(move _73, move _78) -> bb25; // scope 9 at ui/derives/derive-partial-ord.rs:24:25: 24:72
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:24:25: 24:48
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a P, &'b P) -> Option<std::cmp::Ordering> {<P as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb25: {
        _71 = &_72;                      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _58 = (move _59, move _71);      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _83 = (_58.0: &std::option::Option<std::cmp::Ordering>); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _84 = (_58.1: &std::option::Option<std::cmp::Ordering>); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _87 = _83;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _88 = _84;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _86 = <Option<std::cmp::Ordering> as PartialEq>::eq(move _87, move _88) -> bb26; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<std::cmp::Ordering>, &'b Option<std::cmp::Ordering>) -> bool {<Option<std::cmp::Ordering> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb26: {
        _85 = Not(move _86);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _85) -> [0: bb18, otherwise: bb27]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb27: {
        _89 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _91 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _93 = _83;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _92 = _93;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _95 = _84;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _94 = _95;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _96 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _90 = core::panicking::assert_failed::<Option<std::cmp::Ordering>, Option<std::cmp::Ordering>>(move _91, move _92, move _94, move _96); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<std::cmp::Ordering>, &'b Option<std::cmp::Ordering>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<std::cmp::Ordering>, Option<std::cmp::Ordering>>}, val: Value(<ZST>) }
    }
}

promoted[0] in main: &[f64; 3] = {
    let mut _0: &[f64; 3];               // return place in scope 0 at ui/derives/derive-partial-ord.rs:10:26: 10:47
    let mut _1: [f64; 3];                // in scope 0 at ui/derives/derive-partial-ord.rs:10:27: 10:47

    bb0: {
        _1 = [const 1f64, const 2f64, const _]; // scope 0 at ui/derives/derive-partial-ord.rs:10:27: 10:47
        _0 = &_1;                        // scope 0 at ui/derives/derive-partial-ord.rs:10:26: 10:47
        return;                          // scope 0 at ui/derives/derive-partial-ord.rs:10:26: 10:47
    }
}

fn check(_1: &T, _2: &T) -> () {
    debug a => _1;                       // in scope 0 at ui/derives/derive-partial-ord.rs:32:25: 32:26
    debug b => _2;                       // in scope 0 at ui/derives/derive-partial-ord.rs:32:32: 32:33
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-partial-ord.rs:32:39: 32:39
    let mut _3: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/derives/derive-partial-ord.rs:34:11: 34:40
    let mut _4: &T;                      // in scope 0 at ui/derives/derive-partial-ord.rs:34:35: 34:36
    let mut _5: &T;                      // in scope 0 at ui/derives/derive-partial-ord.rs:34:38: 34:39
    let mut _6: i8;                      // in scope 0 at ui/derives/derive-partial-ord.rs:41:14: 41:19
    let mut _7: isize;                   // in scope 0 at ui/derives/derive-partial-ord.rs:35:9: 35:13
    let mut _8: bool;                    // in scope 0 at ui/derives/derive-partial-ord.rs:36:13: 36:30
    let mut _9: bool;                    // in scope 0 at ui/derives/derive-partial-ord.rs:36:21: 36:29
    let mut _10: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:36:22: 36:29
    let mut _11: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:36:23: 36:24
    let mut _12: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:36:27: 36:28
    let _13: &T;                         // in scope 0 at ui/derives/derive-partial-ord.rs:36:27: 36:28
    let mut _14: !;                      // in scope 0 at ui/derives/derive-partial-ord.rs:36:13: 36:30
    let mut _15: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:37:13: 37:31
    let mut _16: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:37:21: 37:30
    let mut _17: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:37:22: 37:30
    let mut _18: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:37:23: 37:24
    let mut _19: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:37:28: 37:29
    let _20: &T;                         // in scope 0 at ui/derives/derive-partial-ord.rs:37:28: 37:29
    let mut _21: !;                      // in scope 0 at ui/derives/derive-partial-ord.rs:37:13: 37:31
    let mut _22: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:38:13: 38:30
    let mut _23: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:38:21: 38:29
    let mut _24: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:38:22: 38:29
    let mut _25: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:38:23: 38:24
    let mut _26: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:38:27: 38:28
    let _27: &T;                         // in scope 0 at ui/derives/derive-partial-ord.rs:38:27: 38:28
    let mut _28: !;                      // in scope 0 at ui/derives/derive-partial-ord.rs:38:13: 38:30
    let mut _29: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:39:13: 39:31
    let mut _30: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:39:21: 39:30
    let mut _31: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:39:22: 39:30
    let mut _32: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:39:23: 39:24
    let mut _33: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:39:28: 39:29
    let _34: &T;                         // in scope 0 at ui/derives/derive-partial-ord.rs:39:28: 39:29
    let mut _35: !;                      // in scope 0 at ui/derives/derive-partial-ord.rs:39:13: 39:31
    let mut _36: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:42:13: 42:30
    let mut _37: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:42:21: 42:29
    let mut _38: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:42:22: 42:29
    let mut _39: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:42:23: 42:24
    let mut _40: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:42:27: 42:28
    let _41: &T;                         // in scope 0 at ui/derives/derive-partial-ord.rs:42:27: 42:28
    let mut _42: !;                      // in scope 0 at ui/derives/derive-partial-ord.rs:42:13: 42:30
    let mut _43: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:43:13: 43:28
    let mut _44: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:43:21: 43:27
    let mut _45: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:43:21: 43:22
    let mut _46: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:43:26: 43:27
    let _47: &T;                         // in scope 0 at ui/derives/derive-partial-ord.rs:43:26: 43:27
    let mut _48: !;                      // in scope 0 at ui/derives/derive-partial-ord.rs:43:13: 43:28
    let mut _49: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:44:13: 44:30
    let mut _50: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:44:21: 44:29
    let mut _51: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:44:22: 44:29
    let mut _52: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:44:23: 44:24
    let mut _53: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:44:27: 44:28
    let _54: &T;                         // in scope 0 at ui/derives/derive-partial-ord.rs:44:27: 44:28
    let mut _55: !;                      // in scope 0 at ui/derives/derive-partial-ord.rs:44:13: 44:30
    let mut _56: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:45:13: 45:28
    let mut _57: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:45:21: 45:27
    let mut _58: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:45:21: 45:22
    let mut _59: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:45:26: 45:27
    let _60: &T;                         // in scope 0 at ui/derives/derive-partial-ord.rs:45:26: 45:27
    let mut _61: !;                      // in scope 0 at ui/derives/derive-partial-ord.rs:45:13: 45:28
    let mut _62: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:48:13: 48:27
    let mut _63: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:48:21: 48:26
    let mut _64: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:48:21: 48:22
    let mut _65: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:48:25: 48:26
    let _66: &T;                         // in scope 0 at ui/derives/derive-partial-ord.rs:48:25: 48:26
    let mut _67: !;                      // in scope 0 at ui/derives/derive-partial-ord.rs:48:13: 48:27
    let mut _68: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:49:13: 49:28
    let mut _69: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:49:21: 49:27
    let mut _70: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:49:21: 49:22
    let mut _71: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:49:26: 49:27
    let _72: &T;                         // in scope 0 at ui/derives/derive-partial-ord.rs:49:26: 49:27
    let mut _73: !;                      // in scope 0 at ui/derives/derive-partial-ord.rs:49:13: 49:28
    let mut _74: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:50:13: 50:30
    let mut _75: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:50:21: 50:29
    let mut _76: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:50:22: 50:29
    let mut _77: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:50:23: 50:24
    let mut _78: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:50:27: 50:28
    let _79: &T;                         // in scope 0 at ui/derives/derive-partial-ord.rs:50:27: 50:28
    let mut _80: !;                      // in scope 0 at ui/derives/derive-partial-ord.rs:50:13: 50:30
    let mut _81: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:51:13: 51:31
    let mut _82: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:51:21: 51:30
    let mut _83: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:51:22: 51:30
    let mut _84: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:51:23: 51:24
    let mut _85: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:51:28: 51:29
    let _86: &T;                         // in scope 0 at ui/derives/derive-partial-ord.rs:51:28: 51:29
    let mut _87: !;                      // in scope 0 at ui/derives/derive-partial-ord.rs:51:13: 51:31
    let mut _88: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:54:13: 54:30
    let mut _89: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:54:21: 54:29
    let mut _90: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:54:22: 54:29
    let mut _91: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:54:23: 54:24
    let mut _92: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:54:27: 54:28
    let _93: &T;                         // in scope 0 at ui/derives/derive-partial-ord.rs:54:27: 54:28
    let mut _94: !;                      // in scope 0 at ui/derives/derive-partial-ord.rs:54:13: 54:30
    let mut _95: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:55:13: 55:31
    let mut _96: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:55:21: 55:30
    let mut _97: bool;                   // in scope 0 at ui/derives/derive-partial-ord.rs:55:22: 55:30
    let mut _98: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:55:23: 55:24
    let mut _99: &&T;                    // in scope 0 at ui/derives/derive-partial-ord.rs:55:28: 55:29
    let _100: &T;                        // in scope 0 at ui/derives/derive-partial-ord.rs:55:28: 55:29
    let mut _101: !;                     // in scope 0 at ui/derives/derive-partial-ord.rs:55:13: 55:31
    let mut _102: bool;                  // in scope 0 at ui/derives/derive-partial-ord.rs:56:13: 56:27
    let mut _103: bool;                  // in scope 0 at ui/derives/derive-partial-ord.rs:56:21: 56:26
    let mut _104: &&T;                   // in scope 0 at ui/derives/derive-partial-ord.rs:56:21: 56:22
    let mut _105: &&T;                   // in scope 0 at ui/derives/derive-partial-ord.rs:56:25: 56:26
    let _106: &T;                        // in scope 0 at ui/derives/derive-partial-ord.rs:56:25: 56:26
    let mut _107: !;                     // in scope 0 at ui/derives/derive-partial-ord.rs:56:13: 56:27
    let mut _108: bool;                  // in scope 0 at ui/derives/derive-partial-ord.rs:57:13: 57:28
    let mut _109: bool;                  // in scope 0 at ui/derives/derive-partial-ord.rs:57:21: 57:27
    let mut _110: &&T;                   // in scope 0 at ui/derives/derive-partial-ord.rs:57:21: 57:22
    let mut _111: &&T;                   // in scope 0 at ui/derives/derive-partial-ord.rs:57:26: 57:27
    let _112: &T;                        // in scope 0 at ui/derives/derive-partial-ord.rs:57:26: 57:27
    let mut _113: !;                     // in scope 0 at ui/derives/derive-partial-ord.rs:57:13: 57:28

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-partial-ord.rs:34:35: 34:36
        _5 = _2;                         // scope 0 at ui/derives/derive-partial-ord.rs:34:38: 34:39
        _3 = <T as PartialOrd>::partial_cmp(move _4, move _5) -> bb1; // scope 0 at ui/derives/derive-partial-ord.rs:34:11: 34:40
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:34:11: 34:34
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> Option<std::cmp::Ordering> {<T as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = discriminant(_3);           // scope 0 at ui/derives/derive-partial-ord.rs:34:11: 34:40
        switchInt(move _7) -> [0: bb5, 1: bb2, otherwise: bb4]; // scope 0 at ui/derives/derive-partial-ord.rs:34:5: 34:40
    }

    bb2: {
        _6 = discriminant(((_3 as Some).0: std::cmp::Ordering)); // scope 0 at ui/derives/derive-partial-ord.rs:34:11: 34:40
        switchInt(move _6) -> [255: bb29, 0: bb17, 1: bb3, otherwise: bb4]; // scope 0 at ui/derives/derive-partial-ord.rs:34:5: 34:40
    }

    bb3: {
        _91 = &_1;                       // scope 0 at ui/derives/derive-partial-ord.rs:54:23: 54:24
        _93 = _2;                        // scope 0 at ui/derives/derive-partial-ord.rs:54:27: 54:28
        _92 = &_93;                      // scope 0 at ui/derives/derive-partial-ord.rs:54:27: 54:28
        _90 = <&T as PartialOrd>::lt(move _91, move _92) -> bb41; // scope 0 at ui/derives/derive-partial-ord.rs:54:22: 54:29
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:54:22: 54:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &T, &'b &T) -> bool {<&T as PartialOrd>::lt}, val: Value(<ZST>) }
    }

    bb4: {
        unreachable;                     // scope 0 at ui/derives/derive-partial-ord.rs:34:11: 34:40
    }

    bb5: {
        _11 = &_1;                       // scope 0 at ui/derives/derive-partial-ord.rs:36:23: 36:24
        _13 = _2;                        // scope 0 at ui/derives/derive-partial-ord.rs:36:27: 36:28
        _12 = &_13;                      // scope 0 at ui/derives/derive-partial-ord.rs:36:27: 36:28
        _10 = <&T as PartialOrd>::lt(move _11, move _12) -> bb6; // scope 0 at ui/derives/derive-partial-ord.rs:36:22: 36:29
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:36:22: 36:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &T, &'b &T) -> bool {<&T as PartialOrd>::lt}, val: Value(<ZST>) }
    }

    bb6: {
        _9 = Not(move _10);              // scope 0 at ui/derives/derive-partial-ord.rs:36:21: 36:29
        _8 = Not(move _9);               // scope 0 at ui/derives/derive-partial-ord.rs:36:13: 36:30
        switchInt(move _8) -> [0: bb8, otherwise: bb7]; // scope 0 at ui/derives/derive-partial-ord.rs:36:13: 36:30
    }

    bb7: {
        _14 = core::panicking::panic(const "assertion failed: !(a < b)"); // scope 0 at ui/derives/derive-partial-ord.rs:36:13: 36:30
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:36:13: 36:30
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb8: {
        _18 = &_1;                       // scope 0 at ui/derives/derive-partial-ord.rs:37:23: 37:24
        _20 = _2;                        // scope 0 at ui/derives/derive-partial-ord.rs:37:28: 37:29
        _19 = &_20;                      // scope 0 at ui/derives/derive-partial-ord.rs:37:28: 37:29
        _17 = <&T as PartialOrd>::le(move _18, move _19) -> bb9; // scope 0 at ui/derives/derive-partial-ord.rs:37:22: 37:30
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:37:22: 37:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &T, &'b &T) -> bool {<&T as PartialOrd>::le}, val: Value(<ZST>) }
    }

    bb9: {
        _16 = Not(move _17);             // scope 0 at ui/derives/derive-partial-ord.rs:37:21: 37:30
        _15 = Not(move _16);             // scope 0 at ui/derives/derive-partial-ord.rs:37:13: 37:31
        switchInt(move _15) -> [0: bb11, otherwise: bb10]; // scope 0 at ui/derives/derive-partial-ord.rs:37:13: 37:31
    }

    bb10: {
        _21 = core::panicking::panic(const "assertion failed: !(a <= b)"); // scope 0 at ui/derives/derive-partial-ord.rs:37:13: 37:31
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:37:13: 37:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        _25 = &_1;                       // scope 0 at ui/derives/derive-partial-ord.rs:38:23: 38:24
        _27 = _2;                        // scope 0 at ui/derives/derive-partial-ord.rs:38:27: 38:28
        _26 = &_27;                      // scope 0 at ui/derives/derive-partial-ord.rs:38:27: 38:28
        _24 = <&T as PartialOrd>::gt(move _25, move _26) -> bb12; // scope 0 at ui/derives/derive-partial-ord.rs:38:22: 38:29
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:38:22: 38:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &T, &'b &T) -> bool {<&T as PartialOrd>::gt}, val: Value(<ZST>) }
    }

    bb12: {
        _23 = Not(move _24);             // scope 0 at ui/derives/derive-partial-ord.rs:38:21: 38:29
        _22 = Not(move _23);             // scope 0 at ui/derives/derive-partial-ord.rs:38:13: 38:30
        switchInt(move _22) -> [0: bb14, otherwise: bb13]; // scope 0 at ui/derives/derive-partial-ord.rs:38:13: 38:30
    }

    bb13: {
        _28 = core::panicking::panic(const "assertion failed: !(a > b)"); // scope 0 at ui/derives/derive-partial-ord.rs:38:13: 38:30
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:38:13: 38:30
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb14: {
        _32 = &_1;                       // scope 0 at ui/derives/derive-partial-ord.rs:39:23: 39:24
        _34 = _2;                        // scope 0 at ui/derives/derive-partial-ord.rs:39:28: 39:29
        _33 = &_34;                      // scope 0 at ui/derives/derive-partial-ord.rs:39:28: 39:29
        _31 = <&T as PartialOrd>::ge(move _32, move _33) -> bb15; // scope 0 at ui/derives/derive-partial-ord.rs:39:22: 39:30
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:39:22: 39:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &T, &'b &T) -> bool {<&T as PartialOrd>::ge}, val: Value(<ZST>) }
    }

    bb15: {
        _30 = Not(move _31);             // scope 0 at ui/derives/derive-partial-ord.rs:39:21: 39:30
        _29 = Not(move _30);             // scope 0 at ui/derives/derive-partial-ord.rs:39:13: 39:31
        switchInt(move _29) -> [0: bb52, otherwise: bb16]; // scope 0 at ui/derives/derive-partial-ord.rs:39:13: 39:31
    }

    bb16: {
        _35 = core::panicking::panic(const "assertion failed: !(a >= b)"); // scope 0 at ui/derives/derive-partial-ord.rs:39:13: 39:31
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:39:13: 39:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        _39 = &_1;                       // scope 0 at ui/derives/derive-partial-ord.rs:42:23: 42:24
        _41 = _2;                        // scope 0 at ui/derives/derive-partial-ord.rs:42:27: 42:28
        _40 = &_41;                      // scope 0 at ui/derives/derive-partial-ord.rs:42:27: 42:28
        _38 = <&T as PartialOrd>::lt(move _39, move _40) -> bb18; // scope 0 at ui/derives/derive-partial-ord.rs:42:22: 42:29
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:42:22: 42:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &T, &'b &T) -> bool {<&T as PartialOrd>::lt}, val: Value(<ZST>) }
    }

    bb18: {
        _37 = Not(move _38);             // scope 0 at ui/derives/derive-partial-ord.rs:42:21: 42:29
        _36 = Not(move _37);             // scope 0 at ui/derives/derive-partial-ord.rs:42:13: 42:30
        switchInt(move _36) -> [0: bb20, otherwise: bb19]; // scope 0 at ui/derives/derive-partial-ord.rs:42:13: 42:30
    }

    bb19: {
        _42 = core::panicking::panic(const "assertion failed: !(a < b)"); // scope 0 at ui/derives/derive-partial-ord.rs:42:13: 42:30
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:42:13: 42:30
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb20: {
        _45 = &_1;                       // scope 0 at ui/derives/derive-partial-ord.rs:43:21: 43:22
        _47 = _2;                        // scope 0 at ui/derives/derive-partial-ord.rs:43:26: 43:27
        _46 = &_47;                      // scope 0 at ui/derives/derive-partial-ord.rs:43:26: 43:27
        _44 = <&T as PartialOrd>::le(move _45, move _46) -> bb21; // scope 0 at ui/derives/derive-partial-ord.rs:43:21: 43:27
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:43:21: 43:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &T, &'b &T) -> bool {<&T as PartialOrd>::le}, val: Value(<ZST>) }
    }

    bb21: {
        _43 = Not(move _44);             // scope 0 at ui/derives/derive-partial-ord.rs:43:13: 43:28
        switchInt(move _43) -> [0: bb23, otherwise: bb22]; // scope 0 at ui/derives/derive-partial-ord.rs:43:13: 43:28
    }

    bb22: {
        _48 = core::panicking::panic(const "assertion failed: a <= b"); // scope 0 at ui/derives/derive-partial-ord.rs:43:13: 43:28
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:43:13: 43:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb23: {
        _52 = &_1;                       // scope 0 at ui/derives/derive-partial-ord.rs:44:23: 44:24
        _54 = _2;                        // scope 0 at ui/derives/derive-partial-ord.rs:44:27: 44:28
        _53 = &_54;                      // scope 0 at ui/derives/derive-partial-ord.rs:44:27: 44:28
        _51 = <&T as PartialOrd>::gt(move _52, move _53) -> bb24; // scope 0 at ui/derives/derive-partial-ord.rs:44:22: 44:29
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:44:22: 44:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &T, &'b &T) -> bool {<&T as PartialOrd>::gt}, val: Value(<ZST>) }
    }

    bb24: {
        _50 = Not(move _51);             // scope 0 at ui/derives/derive-partial-ord.rs:44:21: 44:29
        _49 = Not(move _50);             // scope 0 at ui/derives/derive-partial-ord.rs:44:13: 44:30
        switchInt(move _49) -> [0: bb26, otherwise: bb25]; // scope 0 at ui/derives/derive-partial-ord.rs:44:13: 44:30
    }

    bb25: {
        _55 = core::panicking::panic(const "assertion failed: !(a > b)"); // scope 0 at ui/derives/derive-partial-ord.rs:44:13: 44:30
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:44:13: 44:30
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb26: {
        _58 = &_1;                       // scope 0 at ui/derives/derive-partial-ord.rs:45:21: 45:22
        _60 = _2;                        // scope 0 at ui/derives/derive-partial-ord.rs:45:26: 45:27
        _59 = &_60;                      // scope 0 at ui/derives/derive-partial-ord.rs:45:26: 45:27
        _57 = <&T as PartialOrd>::ge(move _58, move _59) -> bb27; // scope 0 at ui/derives/derive-partial-ord.rs:45:21: 45:27
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:45:21: 45:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &T, &'b &T) -> bool {<&T as PartialOrd>::ge}, val: Value(<ZST>) }
    }

    bb27: {
        _56 = Not(move _57);             // scope 0 at ui/derives/derive-partial-ord.rs:45:13: 45:28
        switchInt(move _56) -> [0: bb52, otherwise: bb28]; // scope 0 at ui/derives/derive-partial-ord.rs:45:13: 45:28
    }

    bb28: {
        _61 = core::panicking::panic(const "assertion failed: a >= b"); // scope 0 at ui/derives/derive-partial-ord.rs:45:13: 45:28
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:45:13: 45:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb29: {
        _64 = &_1;                       // scope 0 at ui/derives/derive-partial-ord.rs:48:21: 48:22
        _66 = _2;                        // scope 0 at ui/derives/derive-partial-ord.rs:48:25: 48:26
        _65 = &_66;                      // scope 0 at ui/derives/derive-partial-ord.rs:48:25: 48:26
        _63 = <&T as PartialOrd>::lt(move _64, move _65) -> bb30; // scope 0 at ui/derives/derive-partial-ord.rs:48:21: 48:26
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:48:21: 48:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &T, &'b &T) -> bool {<&T as PartialOrd>::lt}, val: Value(<ZST>) }
    }

    bb30: {
        _62 = Not(move _63);             // scope 0 at ui/derives/derive-partial-ord.rs:48:13: 48:27
        switchInt(move _62) -> [0: bb32, otherwise: bb31]; // scope 0 at ui/derives/derive-partial-ord.rs:48:13: 48:27
    }

    bb31: {
        _67 = core::panicking::panic(const "assertion failed: a < b"); // scope 0 at ui/derives/derive-partial-ord.rs:48:13: 48:27
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:48:13: 48:27
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb32: {
        _70 = &_1;                       // scope 0 at ui/derives/derive-partial-ord.rs:49:21: 49:22
        _72 = _2;                        // scope 0 at ui/derives/derive-partial-ord.rs:49:26: 49:27
        _71 = &_72;                      // scope 0 at ui/derives/derive-partial-ord.rs:49:26: 49:27
        _69 = <&T as PartialOrd>::le(move _70, move _71) -> bb33; // scope 0 at ui/derives/derive-partial-ord.rs:49:21: 49:27
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:49:21: 49:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &T, &'b &T) -> bool {<&T as PartialOrd>::le}, val: Value(<ZST>) }
    }

    bb33: {
        _68 = Not(move _69);             // scope 0 at ui/derives/derive-partial-ord.rs:49:13: 49:28
        switchInt(move _68) -> [0: bb35, otherwise: bb34]; // scope 0 at ui/derives/derive-partial-ord.rs:49:13: 49:28
    }

    bb34: {
        _73 = core::panicking::panic(const "assertion failed: a <= b"); // scope 0 at ui/derives/derive-partial-ord.rs:49:13: 49:28
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:49:13: 49:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb35: {
        _77 = &_1;                       // scope 0 at ui/derives/derive-partial-ord.rs:50:23: 50:24
        _79 = _2;                        // scope 0 at ui/derives/derive-partial-ord.rs:50:27: 50:28
        _78 = &_79;                      // scope 0 at ui/derives/derive-partial-ord.rs:50:27: 50:28
        _76 = <&T as PartialOrd>::gt(move _77, move _78) -> bb36; // scope 0 at ui/derives/derive-partial-ord.rs:50:22: 50:29
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:50:22: 50:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &T, &'b &T) -> bool {<&T as PartialOrd>::gt}, val: Value(<ZST>) }
    }

    bb36: {
        _75 = Not(move _76);             // scope 0 at ui/derives/derive-partial-ord.rs:50:21: 50:29
        _74 = Not(move _75);             // scope 0 at ui/derives/derive-partial-ord.rs:50:13: 50:30
        switchInt(move _74) -> [0: bb38, otherwise: bb37]; // scope 0 at ui/derives/derive-partial-ord.rs:50:13: 50:30
    }

    bb37: {
        _80 = core::panicking::panic(const "assertion failed: !(a > b)"); // scope 0 at ui/derives/derive-partial-ord.rs:50:13: 50:30
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:50:13: 50:30
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb38: {
        _84 = &_1;                       // scope 0 at ui/derives/derive-partial-ord.rs:51:23: 51:24
        _86 = _2;                        // scope 0 at ui/derives/derive-partial-ord.rs:51:28: 51:29
        _85 = &_86;                      // scope 0 at ui/derives/derive-partial-ord.rs:51:28: 51:29
        _83 = <&T as PartialOrd>::ge(move _84, move _85) -> bb39; // scope 0 at ui/derives/derive-partial-ord.rs:51:22: 51:30
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:51:22: 51:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &T, &'b &T) -> bool {<&T as PartialOrd>::ge}, val: Value(<ZST>) }
    }

    bb39: {
        _82 = Not(move _83);             // scope 0 at ui/derives/derive-partial-ord.rs:51:21: 51:30
        _81 = Not(move _82);             // scope 0 at ui/derives/derive-partial-ord.rs:51:13: 51:31
        switchInt(move _81) -> [0: bb52, otherwise: bb40]; // scope 0 at ui/derives/derive-partial-ord.rs:51:13: 51:31
    }

    bb40: {
        _87 = core::panicking::panic(const "assertion failed: !(a >= b)"); // scope 0 at ui/derives/derive-partial-ord.rs:51:13: 51:31
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:51:13: 51:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb41: {
        _89 = Not(move _90);             // scope 0 at ui/derives/derive-partial-ord.rs:54:21: 54:29
        _88 = Not(move _89);             // scope 0 at ui/derives/derive-partial-ord.rs:54:13: 54:30
        switchInt(move _88) -> [0: bb43, otherwise: bb42]; // scope 0 at ui/derives/derive-partial-ord.rs:54:13: 54:30
    }

    bb42: {
        _94 = core::panicking::panic(const "assertion failed: !(a < b)"); // scope 0 at ui/derives/derive-partial-ord.rs:54:13: 54:30
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:54:13: 54:30
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb43: {
        _98 = &_1;                       // scope 0 at ui/derives/derive-partial-ord.rs:55:23: 55:24
        _100 = _2;                       // scope 0 at ui/derives/derive-partial-ord.rs:55:28: 55:29
        _99 = &_100;                     // scope 0 at ui/derives/derive-partial-ord.rs:55:28: 55:29
        _97 = <&T as PartialOrd>::le(move _98, move _99) -> bb44; // scope 0 at ui/derives/derive-partial-ord.rs:55:22: 55:30
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:55:22: 55:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &T, &'b &T) -> bool {<&T as PartialOrd>::le}, val: Value(<ZST>) }
    }

    bb44: {
        _96 = Not(move _97);             // scope 0 at ui/derives/derive-partial-ord.rs:55:21: 55:30
        _95 = Not(move _96);             // scope 0 at ui/derives/derive-partial-ord.rs:55:13: 55:31
        switchInt(move _95) -> [0: bb46, otherwise: bb45]; // scope 0 at ui/derives/derive-partial-ord.rs:55:13: 55:31
    }

    bb45: {
        _101 = core::panicking::panic(const "assertion failed: !(a <= b)"); // scope 0 at ui/derives/derive-partial-ord.rs:55:13: 55:31
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:55:13: 55:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb46: {
        _104 = &_1;                      // scope 0 at ui/derives/derive-partial-ord.rs:56:21: 56:22
        _106 = _2;                       // scope 0 at ui/derives/derive-partial-ord.rs:56:25: 56:26
        _105 = &_106;                    // scope 0 at ui/derives/derive-partial-ord.rs:56:25: 56:26
        _103 = <&T as PartialOrd>::gt(move _104, move _105) -> bb47; // scope 0 at ui/derives/derive-partial-ord.rs:56:21: 56:26
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:56:21: 56:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &T, &'b &T) -> bool {<&T as PartialOrd>::gt}, val: Value(<ZST>) }
    }

    bb47: {
        _102 = Not(move _103);           // scope 0 at ui/derives/derive-partial-ord.rs:56:13: 56:27
        switchInt(move _102) -> [0: bb49, otherwise: bb48]; // scope 0 at ui/derives/derive-partial-ord.rs:56:13: 56:27
    }

    bb48: {
        _107 = core::panicking::panic(const "assertion failed: a > b"); // scope 0 at ui/derives/derive-partial-ord.rs:56:13: 56:27
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:56:13: 56:27
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb49: {
        _110 = &_1;                      // scope 0 at ui/derives/derive-partial-ord.rs:57:21: 57:22
        _112 = _2;                       // scope 0 at ui/derives/derive-partial-ord.rs:57:26: 57:27
        _111 = &_112;                    // scope 0 at ui/derives/derive-partial-ord.rs:57:26: 57:27
        _109 = <&T as PartialOrd>::ge(move _110, move _111) -> bb50; // scope 0 at ui/derives/derive-partial-ord.rs:57:21: 57:27
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:57:21: 57:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &T, &'b &T) -> bool {<&T as PartialOrd>::ge}, val: Value(<ZST>) }
    }

    bb50: {
        _108 = Not(move _109);           // scope 0 at ui/derives/derive-partial-ord.rs:57:13: 57:28
        switchInt(move _108) -> [0: bb52, otherwise: bb51]; // scope 0 at ui/derives/derive-partial-ord.rs:57:13: 57:28
    }

    bb51: {
        _113 = core::panicking::panic(const "assertion failed: a >= b"); // scope 0 at ui/derives/derive-partial-ord.rs:57:13: 57:28
                                         // mir::Constant
                                         // + span: ui/derives/derive-partial-ord.rs:57:13: 57:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb52: {
        return;                          // scope 0 at ui/derives/derive-partial-ord.rs:60:2: 60:2
    }
}

fn P(_1: f64, _2: f64) -> P {
    let mut _0: P;                       // return place in scope 0 at ui/derives/derive-partial-ord.rs:7:1: 7:9

    bb0: {
        _0 = P(move _1, move _2);        // scope 0 at ui/derives/derive-partial-ord.rs:7:1: 7:9
        return;                          // scope 0 at ui/derives/derive-partial-ord.rs:7:1: 7:9
    }
}

// MIR FOR CTFE
fn P(_1: f64, _2: f64) -> P {
    let mut _0: P;                       // return place in scope 0 at ui/derives/derive-partial-ord.rs:7:1: 7:9

    bb0: {
        _0 = P(move _1, move _2);        // scope 0 at ui/derives/derive-partial-ord.rs:7:1: 7:9
        return;                          // scope 0 at ui/derives/derive-partial-ord.rs:7:1: 7:9
    }
}
