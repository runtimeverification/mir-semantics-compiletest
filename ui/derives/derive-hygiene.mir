// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static f: () = {
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:11:11: 11:13

    bb0: {
        _0 = ();                         // scope 0 at ui/derives/derive-hygiene.rs:11:16: 11:18
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:11:1: 11:19
    }
}

static cmp: () = {
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:12:13: 12:15

    bb0: {
        _0 = ();                         // scope 0 at ui/derives/derive-hygiene.rs:12:18: 12:20
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:12:1: 12:21
    }
}

static other: () = {
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:13:15: 13:17

    bb0: {
        _0 = ();                         // scope 0 at ui/derives/derive-hygiene.rs:13:20: 13:22
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:13:1: 13:23
    }
}

static state: () = {
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:14:15: 14:17

    bb0: {
        _0 = ();                         // scope 0 at ui/derives/derive-hygiene.rs:14:20: 14:22
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:14:1: 14:23
    }
}

static __self_0_0: () = {
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:15:20: 15:22

    bb0: {
        _0 = ();                         // scope 0 at ui/derives/derive-hygiene.rs:15:25: 15:27
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:15:1: 15:28
    }
}

static __self_1_0: () = {
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:16:20: 16:22

    bb0: {
        _0 = ();                         // scope 0 at ui/derives/derive-hygiene.rs:16:25: 16:27
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:16:1: 16:28
    }
}

static __self_vi: () = {
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:17:19: 17:21

    bb0: {
        _0 = ();                         // scope 0 at ui/derives/derive-hygiene.rs:17:24: 17:26
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:17:1: 17:27
    }
}

static __arg_1_0: () = {
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:18:19: 18:21

    bb0: {
        _0 = ();                         // scope 0 at ui/derives/derive-hygiene.rs:18:24: 18:26
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:18:1: 18:27
    }
}

static debug_trait_builder: () = {
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:19:29: 19:31

    bb0: {
        _0 = ();                         // scope 0 at ui/derives/derive-hygiene.rs:19:34: 19:36
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:19:1: 19:37
    }
}

fn MethodsInDerives::debug_tuple(_1: Self) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:25:20: 25:24
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:25:26: 25:26

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/derives/derive-hygiene.rs:25:27: 25:28
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:25:28: 25:28
    }
}

fn MethodsInDerives::debug_struct(_1: Self) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:26:21: 26:25
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:26:27: 26:27

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/derives/derive-hygiene.rs:26:28: 26:29
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:26:29: 26:29
    }
}

fn MethodsInDerives::field(_1: Self) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:27:14: 27:18
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:27:20: 27:20

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/derives/derive-hygiene.rs:27:21: 27:22
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:27:22: 27:22
    }
}

fn MethodsInDerives::finish(_1: Self) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:28:15: 28:19
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:28:21: 28:21

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/derives/derive-hygiene.rs:28:22: 28:23
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:28:23: 28:23
    }
}

fn MethodsInDerives::clone(_1: Self) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:29:14: 29:18
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:29:20: 29:20

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/derives/derive-hygiene.rs:29:21: 29:22
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:29:22: 29:22
    }
}

fn MethodsInDerives::cmp(_1: Self) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:30:12: 30:16
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:30:18: 30:18

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/derives/derive-hygiene.rs:30:19: 30:20
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:30:20: 30:20
    }
}

fn MethodsInDerives::partial_cmp(_1: Self) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:31:20: 31:24
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:31:26: 31:26

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/derives/derive-hygiene.rs:31:27: 31:28
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:31:28: 31:28
    }
}

fn MethodsInDerives::eq(_1: Self) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:32:11: 32:15
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:32:17: 32:17

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/derives/derive-hygiene.rs:32:18: 32:19
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:32:19: 32:19
    }
}

fn MethodsInDerives::ne(_1: Self) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:33:11: 33:15
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:33:17: 33:17

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/derives/derive-hygiene.rs:33:18: 33:19
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:33:19: 33:19
    }
}

fn MethodsInDerives::le(_1: Self) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:34:11: 34:15
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:34:17: 34:17

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/derives/derive-hygiene.rs:34:18: 34:19
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:34:19: 34:19
    }
}

fn MethodsInDerives::lt(_1: Self) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:35:11: 35:15
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:35:17: 35:17

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/derives/derive-hygiene.rs:35:18: 35:19
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:35:19: 35:19
    }
}

fn MethodsInDerives::ge(_1: Self) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:36:11: 36:15
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:36:17: 36:17

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/derives/derive-hygiene.rs:36:18: 36:19
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:36:19: 36:19
    }
}

fn MethodsInDerives::gt(_1: Self) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:37:11: 37:15
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:37:17: 37:17

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/derives/derive-hygiene.rs:37:18: 37:19
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:37:19: 37:19
    }
}

fn MethodsInDerives::hash(_1: Self) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:38:13: 38:17
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:38:19: 38:19

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/derives/derive-hygiene.rs:38:20: 38:21
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:38:21: 38:21
    }
}

fn <impl at ui/derives/derive-hygiene.rs:44:16: 44:21>::clone(_1: &__H) -> __H {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:44:16: 44:21
    let mut _0: __H;                     // return place in scope 0 at ui/derives/derive-hygiene.rs:44:16: 44:21
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/derives/derive-hygiene.rs:44:16: 44:21
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:44:21: 44:21
    }
}

fn <impl at ui/derives/derive-hygiene.rs:44:23: 44:32>::eq(_1: &__H, _2: &__H) -> bool {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:44:23: 44:32
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:44:23: 44:32
    let mut _0: bool;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:44:23: 44:32
    let mut _3: (&__H, &__H);            // in scope 0 at ui/derives/derive-hygiene.rs:44:23: 44:32
    let mut _4: &__H;                    // in scope 0 at ui/derives/derive-hygiene.rs:44:23: 44:32
    let mut _5: &__H;                    // in scope 0 at ui/derives/derive-hygiene.rs:44:23: 44:32
    let _6: &i32;                        // in scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
    let _7: &i32;                        // in scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
    let mut _8: i32;                     // in scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
    let mut _9: i32;                     // in scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
    let mut _10: &__H;                   // in scope 0 at ui/derives/derive-hygiene.rs:44:23: 44:32
    let mut _11: &__H;                   // in scope 0 at ui/derives/derive-hygiene.rs:44:23: 44:32
    scope 1 {
        debug __self_0 => _6;            // in scope 1 at ui/derives/derive-hygiene.rs:45:14: 45:17
        debug __arg1_0 => _7;            // in scope 1 at ui/derives/derive-hygiene.rs:45:14: 45:17
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:44:23: 44:32
        _5 = _2;                         // scope 0 at ui/derives/derive-hygiene.rs:44:23: 44:32
        _3 = (move _4, move _5);         // scope 0 at ui/derives/derive-hygiene.rs:44:23: 44:32
        _10 = deref_copy (_3.0: &__H);   // scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
        _6 = &(((*_10) as V).0: i32);    // scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
        _11 = deref_copy (_3.1: &__H);   // scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
        _7 = &(((*_11) as V).0: i32);    // scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
        _8 = (*_6);                      // scope 1 at ui/derives/derive-hygiene.rs:45:14: 45:17
        _9 = (*_7);                      // scope 1 at ui/derives/derive-hygiene.rs:45:14: 45:17
        _0 = Eq(move _8, move _9);       // scope 1 at ui/derives/derive-hygiene.rs:45:14: 45:17
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:44:32: 44:32
    }
}

fn <impl at ui/derives/derive-hygiene.rs:44:34: 44:36>::assert_receiver_is_total_eq(_1: &__H) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:44:34: 44:36
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:44:34: 44:36
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:44:36: 44:36
    }
}

fn <impl at ui/derives/derive-hygiene.rs:44:38: 44:48>::partial_cmp(_1: &__H, _2: &__H) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:44:38: 44:48
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:44:38: 44:48
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/derives/derive-hygiene.rs:44:38: 44:48
    let mut _3: (&__H, &__H);            // in scope 0 at ui/derives/derive-hygiene.rs:44:38: 44:48
    let mut _4: &__H;                    // in scope 0 at ui/derives/derive-hygiene.rs:44:38: 44:48
    let mut _5: &__H;                    // in scope 0 at ui/derives/derive-hygiene.rs:44:38: 44:48
    let _6: &i32;                        // in scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
    let _7: &i32;                        // in scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
    let mut _8: &i32;                    // in scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
    let mut _9: &i32;                    // in scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
    let mut _10: &__H;                   // in scope 0 at ui/derives/derive-hygiene.rs:44:38: 44:48
    let mut _11: &__H;                   // in scope 0 at ui/derives/derive-hygiene.rs:44:38: 44:48
    scope 1 {
        debug __self_0 => _6;            // in scope 1 at ui/derives/derive-hygiene.rs:45:14: 45:17
        debug __arg1_0 => _7;            // in scope 1 at ui/derives/derive-hygiene.rs:45:14: 45:17
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:44:38: 44:48
        _5 = _2;                         // scope 0 at ui/derives/derive-hygiene.rs:44:38: 44:48
        _3 = (move _4, move _5);         // scope 0 at ui/derives/derive-hygiene.rs:44:38: 44:48
        _10 = deref_copy (_3.0: &__H);   // scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
        _6 = &(((*_10) as V).0: i32);    // scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
        _11 = deref_copy (_3.1: &__H);   // scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
        _7 = &(((*_11) as V).0: i32);    // scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
        _8 = _6;                         // scope 1 at ui/derives/derive-hygiene.rs:45:14: 45:17
        _9 = _7;                         // scope 1 at ui/derives/derive-hygiene.rs:45:14: 45:17
        _0 = <i32 as PartialOrd>::partial_cmp(move _8, move _9) -> bb1; // scope 1 at ui/derives/derive-hygiene.rs:45:14: 45:17
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:45:14: 45:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a i32, &'b i32) -> Option<std::cmp::Ordering> {<i32 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:44:48: 44:48
    }
}

fn <impl at ui/derives/derive-hygiene.rs:44:50: 44:53>::cmp(_1: &__H, _2: &__H) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:44:50: 44:53
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:44:50: 44:53
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/derives/derive-hygiene.rs:44:50: 44:53
    let mut _3: (&__H, &__H);            // in scope 0 at ui/derives/derive-hygiene.rs:44:50: 44:53
    let mut _4: &__H;                    // in scope 0 at ui/derives/derive-hygiene.rs:44:50: 44:53
    let mut _5: &__H;                    // in scope 0 at ui/derives/derive-hygiene.rs:44:50: 44:53
    let _6: &i32;                        // in scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
    let _7: &i32;                        // in scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
    let mut _8: &i32;                    // in scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
    let mut _9: &i32;                    // in scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
    let mut _10: &__H;                   // in scope 0 at ui/derives/derive-hygiene.rs:44:50: 44:53
    let mut _11: &__H;                   // in scope 0 at ui/derives/derive-hygiene.rs:44:50: 44:53
    scope 1 {
        debug __self_0 => _6;            // in scope 1 at ui/derives/derive-hygiene.rs:45:14: 45:17
        debug __arg1_0 => _7;            // in scope 1 at ui/derives/derive-hygiene.rs:45:14: 45:17
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:44:50: 44:53
        _5 = _2;                         // scope 0 at ui/derives/derive-hygiene.rs:44:50: 44:53
        _3 = (move _4, move _5);         // scope 0 at ui/derives/derive-hygiene.rs:44:50: 44:53
        _10 = deref_copy (_3.0: &__H);   // scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
        _6 = &(((*_10) as V).0: i32);    // scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
        _11 = deref_copy (_3.1: &__H);   // scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
        _7 = &(((*_11) as V).0: i32);    // scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
        _8 = _6;                         // scope 1 at ui/derives/derive-hygiene.rs:45:14: 45:17
        _9 = _7;                         // scope 1 at ui/derives/derive-hygiene.rs:45:14: 45:17
        _0 = <i32 as Ord>::cmp(move _8, move _9) -> bb1; // scope 1 at ui/derives/derive-hygiene.rs:45:14: 45:17
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:45:14: 45:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a i32, &'b i32) -> std::cmp::Ordering {<i32 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:44:53: 44:53
    }
}

fn <impl at ui/derives/derive-hygiene.rs:44:55: 44:60>::fmt(_1: &__H, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:44:55: 44:60
    debug f => _2;                       // in scope 0 at ui/derives/derive-hygiene.rs:44:55: 44:60
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/derives/derive-hygiene.rs:44:55: 44:60
    let _3: &i32;                        // in scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
    let mut _4: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/derives/derive-hygiene.rs:44:55: 44:60
    let mut _5: &str;                    // in scope 0 at ui/derives/derive-hygiene.rs:44:55: 44:60
    let _6: &str;                        // in scope 0 at ui/derives/derive-hygiene.rs:44:55: 44:60
    let mut _7: &dyn std::fmt::Debug;    // in scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
    let mut _8: &&i32;                   // in scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
    let _9: &&i32;                       // in scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at ui/derives/derive-hygiene.rs:45:14: 45:17
    }

    bb0: {
        _3 = &(((*_1) as V).0: i32);     // scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
        _4 = &mut (*_2);                 // scope 1 at ui/derives/derive-hygiene.rs:44:55: 44:60
        _6 = const "V";                  // scope 1 at ui/derives/derive-hygiene.rs:44:55: 44:60
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:44:55: 44:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 1 at ui/derives/derive-hygiene.rs:44:55: 44:60
        _9 = &_3;                        // scope 1 at ui/derives/derive-hygiene.rs:45:14: 45:17
        _8 = _9;                         // scope 1 at ui/derives/derive-hygiene.rs:45:14: 45:17
        _7 = move _8 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/derives/derive-hygiene.rs:45:14: 45:17
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _4, move _5, move _7) -> bb1; // scope 1 at ui/derives/derive-hygiene.rs:44:55: 44:60
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:44:55: 44:60
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:44:60: 44:60
    }
}

fn <impl at ui/derives/derive-hygiene.rs:44:62: 44:66>::hash(_1: &__H, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:44:62: 44:66
    debug state => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:44:62: 44:66
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:44:62: 44:66
    let _3: &i32;                        // in scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
    let mut _4: &i32;                    // in scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
    let mut _5: &mut __H;                // in scope 0 at ui/derives/derive-hygiene.rs:44:62: 44:66
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at ui/derives/derive-hygiene.rs:45:14: 45:17
    }

    bb0: {
        _3 = &(((*_1) as V).0: i32);     // scope 0 at ui/derives/derive-hygiene.rs:45:14: 45:17
        _4 = _3;                         // scope 1 at ui/derives/derive-hygiene.rs:45:14: 45:17
        _5 = &mut (*_2);                 // scope 1 at ui/derives/derive-hygiene.rs:44:62: 44:66
        _0 = <i32 as Hash>::hash::<__H>(move _4, move _5) -> bb1; // scope 1 at ui/derives/derive-hygiene.rs:45:14: 45:17
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:45:14: 45:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a i32, &'b mut __H) {<i32 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:44:66: 44:66
    }
}

fn <impl at ui/derives/derive-hygiene.rs:48:16: 48:21>::clone(_1: &W) -> W {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:48:16: 48:21
    let mut _0: W;                       // return place in scope 0 at ui/derives/derive-hygiene.rs:48:16: 48:21

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/derives/derive-hygiene.rs:48:16: 48:21
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:48:21: 48:21
    }
}

fn <impl at ui/derives/derive-hygiene.rs:48:23: 48:32>::eq(_1: &W, _2: &W) -> bool {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:48:23: 48:32
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:48:23: 48:32
    let mut _0: bool;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:48:23: 48:32
    let _3: i16;                         // in scope 0 at ui/derives/derive-hygiene.rs:48:23: 48:32
    let mut _4: &W;                      // in scope 0 at ui/derives/derive-hygiene.rs:48:23: 48:32
    let mut _6: &W;                      // in scope 0 at ui/derives/derive-hygiene.rs:48:23: 48:32
    let mut _7: i16;                     // in scope 0 at ui/derives/derive-hygiene.rs:48:23: 48:32
    let mut _8: i16;                     // in scope 0 at ui/derives/derive-hygiene.rs:48:23: 48:32
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/derives/derive-hygiene.rs:48:23: 48:32
        let _5: i16;                     // in scope 1 at ui/derives/derive-hygiene.rs:48:23: 48:32
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/derives/derive-hygiene.rs:48:23: 48:32
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:48:23: 48:32
        _3 = discriminant((*_4));        // scope 0 at ui/derives/derive-hygiene.rs:48:23: 48:32
        _6 = _2;                         // scope 1 at ui/derives/derive-hygiene.rs:48:23: 48:32
        _5 = discriminant((*_6));        // scope 1 at ui/derives/derive-hygiene.rs:48:23: 48:32
        _7 = _3;                         // scope 2 at ui/derives/derive-hygiene.rs:48:23: 48:32
        _8 = _5;                         // scope 2 at ui/derives/derive-hygiene.rs:48:23: 48:32
        _0 = Eq(move _7, move _8);       // scope 2 at ui/derives/derive-hygiene.rs:48:23: 48:32
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:48:32: 48:32
    }
}

fn <impl at ui/derives/derive-hygiene.rs:48:34: 48:36>::assert_receiver_is_total_eq(_1: &W) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:48:34: 48:36
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:48:34: 48:36

    bb0: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:48:36: 48:36
    }
}

fn <impl at ui/derives/derive-hygiene.rs:48:38: 48:48>::partial_cmp(_1: &W, _2: &W) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:48:38: 48:48
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:48:38: 48:48
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/derives/derive-hygiene.rs:48:38: 48:48
    let _3: i16;                         // in scope 0 at ui/derives/derive-hygiene.rs:48:38: 48:48
    let mut _4: &W;                      // in scope 0 at ui/derives/derive-hygiene.rs:48:38: 48:48
    let mut _6: &W;                      // in scope 0 at ui/derives/derive-hygiene.rs:48:38: 48:48
    let mut _7: &i16;                    // in scope 0 at ui/derives/derive-hygiene.rs:48:38: 48:48
    let _8: &i16;                        // in scope 0 at ui/derives/derive-hygiene.rs:48:38: 48:48
    let mut _9: &i16;                    // in scope 0 at ui/derives/derive-hygiene.rs:48:38: 48:48
    let _10: &i16;                       // in scope 0 at ui/derives/derive-hygiene.rs:48:38: 48:48
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/derives/derive-hygiene.rs:48:38: 48:48
        let _5: i16;                     // in scope 1 at ui/derives/derive-hygiene.rs:48:38: 48:48
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/derives/derive-hygiene.rs:48:38: 48:48
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:48:38: 48:48
        _3 = discriminant((*_4));        // scope 0 at ui/derives/derive-hygiene.rs:48:38: 48:48
        _6 = _2;                         // scope 1 at ui/derives/derive-hygiene.rs:48:38: 48:48
        _5 = discriminant((*_6));        // scope 1 at ui/derives/derive-hygiene.rs:48:38: 48:48
        _8 = &_3;                        // scope 2 at ui/derives/derive-hygiene.rs:48:38: 48:48
        _7 = _8;                         // scope 2 at ui/derives/derive-hygiene.rs:48:38: 48:48
        _10 = &_5;                       // scope 2 at ui/derives/derive-hygiene.rs:48:38: 48:48
        _9 = _10;                        // scope 2 at ui/derives/derive-hygiene.rs:48:38: 48:48
        _0 = <i16 as PartialOrd>::partial_cmp(move _7, move _9) -> bb1; // scope 2 at ui/derives/derive-hygiene.rs:48:38: 48:48
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:48:38: 48:48
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a i16, &'b i16) -> Option<std::cmp::Ordering> {<i16 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:48:48: 48:48
    }
}

fn <impl at ui/derives/derive-hygiene.rs:48:50: 48:53>::cmp(_1: &W, _2: &W) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:48:50: 48:53
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:48:50: 48:53
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/derives/derive-hygiene.rs:48:50: 48:53
    let _3: i16;                         // in scope 0 at ui/derives/derive-hygiene.rs:48:50: 48:53
    let mut _4: &W;                      // in scope 0 at ui/derives/derive-hygiene.rs:48:50: 48:53
    let mut _6: &W;                      // in scope 0 at ui/derives/derive-hygiene.rs:48:50: 48:53
    let mut _7: &i16;                    // in scope 0 at ui/derives/derive-hygiene.rs:48:50: 48:53
    let _8: &i16;                        // in scope 0 at ui/derives/derive-hygiene.rs:48:50: 48:53
    let mut _9: &i16;                    // in scope 0 at ui/derives/derive-hygiene.rs:48:50: 48:53
    let _10: &i16;                       // in scope 0 at ui/derives/derive-hygiene.rs:48:50: 48:53
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/derives/derive-hygiene.rs:48:50: 48:53
        let _5: i16;                     // in scope 1 at ui/derives/derive-hygiene.rs:48:50: 48:53
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/derives/derive-hygiene.rs:48:50: 48:53
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:48:50: 48:53
        _3 = discriminant((*_4));        // scope 0 at ui/derives/derive-hygiene.rs:48:50: 48:53
        _6 = _2;                         // scope 1 at ui/derives/derive-hygiene.rs:48:50: 48:53
        _5 = discriminant((*_6));        // scope 1 at ui/derives/derive-hygiene.rs:48:50: 48:53
        _8 = &_3;                        // scope 2 at ui/derives/derive-hygiene.rs:48:50: 48:53
        _7 = _8;                         // scope 2 at ui/derives/derive-hygiene.rs:48:50: 48:53
        _10 = &_5;                       // scope 2 at ui/derives/derive-hygiene.rs:48:50: 48:53
        _9 = _10;                        // scope 2 at ui/derives/derive-hygiene.rs:48:50: 48:53
        _0 = <i16 as Ord>::cmp(move _7, move _9) -> bb1; // scope 2 at ui/derives/derive-hygiene.rs:48:50: 48:53
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:48:50: 48:53
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a i16, &'b i16) -> std::cmp::Ordering {<i16 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:48:53: 48:53
    }
}

fn <impl at ui/derives/derive-hygiene.rs:48:55: 48:60>::fmt(_1: &W, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:48:55: 48:60
    debug f => _2;                       // in scope 0 at ui/derives/derive-hygiene.rs:48:55: 48:60
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/derives/derive-hygiene.rs:48:55: 48:60
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/derives/derive-hygiene.rs:48:55: 48:60
    let mut _4: &str;                    // in scope 0 at ui/derives/derive-hygiene.rs:48:55: 48:60
    let mut _5: i16;                     // in scope 0 at ui/derives/derive-hygiene.rs:48:55: 48:60
    let _6: &str;                        // in scope 0 at ui/derives/derive-hygiene.rs:48:55: 48:60
    let _7: &str;                        // in scope 0 at ui/derives/derive-hygiene.rs:48:55: 48:60

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/derives/derive-hygiene.rs:48:55: 48:60
        _5 = discriminant((*_1));        // scope 0 at ui/derives/derive-hygiene.rs:48:55: 48:60
        switchInt(move _5) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/derives/derive-hygiene.rs:48:55: 48:60
    }

    bb1: {
        _7 = const "B";                  // scope 0 at ui/derives/derive-hygiene.rs:48:55: 48:60
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:48:55: 48:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _7;                         // scope 0 at ui/derives/derive-hygiene.rs:48:55: 48:60
        goto -> bb4;                     // scope 0 at ui/derives/derive-hygiene.rs:48:59: 48:60
    }

    bb2: {
        unreachable;                     // scope 0 at ui/derives/derive-hygiene.rs:48:55: 48:60
    }

    bb3: {
        _6 = const "A";                  // scope 0 at ui/derives/derive-hygiene.rs:48:55: 48:60
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:48:55: 48:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _6;                         // scope 0 at ui/derives/derive-hygiene.rs:48:55: 48:60
        goto -> bb4;                     // scope 0 at ui/derives/derive-hygiene.rs:48:59: 48:60
    }

    bb4: {
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb5; // scope 0 at ui/derives/derive-hygiene.rs:48:55: 48:60
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:48:55: 48:60
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:48:60: 48:60
    }
}

fn <impl at ui/derives/derive-hygiene.rs:48:62: 48:66>::hash(_1: &W, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:48:62: 48:66
    debug state => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:48:62: 48:66
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:48:62: 48:66
    let _3: i16;                         // in scope 0 at ui/derives/derive-hygiene.rs:48:62: 48:66
    let mut _4: &W;                      // in scope 0 at ui/derives/derive-hygiene.rs:48:62: 48:66
    let mut _5: &i16;                    // in scope 0 at ui/derives/derive-hygiene.rs:48:62: 48:66
    let _6: &i16;                        // in scope 0 at ui/derives/derive-hygiene.rs:48:62: 48:66
    let mut _7: &mut __H;                // in scope 0 at ui/derives/derive-hygiene.rs:48:62: 48:66
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/derives/derive-hygiene.rs:48:62: 48:66
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:48:62: 48:66
        _3 = discriminant((*_4));        // scope 0 at ui/derives/derive-hygiene.rs:48:62: 48:66
        _6 = &_3;                        // scope 1 at ui/derives/derive-hygiene.rs:48:62: 48:66
        _5 = _6;                         // scope 1 at ui/derives/derive-hygiene.rs:48:62: 48:66
        _7 = &mut (*_2);                 // scope 1 at ui/derives/derive-hygiene.rs:48:62: 48:66
        _0 = <i16 as Hash>::hash::<__H>(move _5, move _7) -> bb1; // scope 1 at ui/derives/derive-hygiene.rs:48:62: 48:66
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:48:62: 48:66
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a i16, &'b mut __H) {<i16 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:48:66: 48:66
    }
}

fn <impl at ui/derives/derive-hygiene.rs:51:16: 51:21>::clone(_1: &X<A>) -> X<A> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:51:16: 51:21
    let mut _0: X<A>;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:51:16: 51:21
    let mut _2: A;                       // in scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
    let mut _3: &A;                      // in scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
    let _4: &A;                          // in scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9

    bb0: {
        _4 = &((*_1).0: A);              // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
        _3 = _4;                         // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
        _2 = <A as Clone>::clone(move _3) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:53:5: 53:9
                                         // + literal: Const { ty: for<'a> fn(&'a A) -> A {<A as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = X::<A> { A: move _2 };      // scope 0 at ui/derives/derive-hygiene.rs:51:16: 51:21
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:51:21: 51:21
    }
}

fn <impl at ui/derives/derive-hygiene.rs:51:23: 51:32>::eq(_1: &X<A>, _2: &X<A>) -> bool {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:51:23: 51:32
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:51:23: 51:32
    let mut _0: bool;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:51:23: 51:32
    let mut _3: &A;                      // in scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
    let mut _4: &A;                      // in scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9

    bb0: {
        _3 = &((*_1).0: A);              // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
        _4 = &((*_2).0: A);              // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
        _0 = <A as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:53:5: 53:9
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a A, &'b A) -> bool {<A as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:51:32: 51:32
    }
}

fn <impl at ui/derives/derive-hygiene.rs:51:34: 51:36>::assert_receiver_is_total_eq(_1: &X<A>) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:51:34: 51:36
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:51:34: 51:36
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:51:36: 51:36
    }
}

fn <impl at ui/derives/derive-hygiene.rs:51:38: 51:48>::partial_cmp(_1: &X<A>, _2: &X<A>) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:51:38: 51:48
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:51:38: 51:48
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/derives/derive-hygiene.rs:51:38: 51:48
    let mut _3: &A;                      // in scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
    let _4: &A;                          // in scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
    let mut _5: &A;                      // in scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
    let _6: &A;                          // in scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9

    bb0: {
        _4 = &((*_1).0: A);              // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
        _3 = _4;                         // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
        _6 = &((*_2).0: A);              // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
        _5 = _6;                         // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
        _0 = <A as PartialOrd>::partial_cmp(move _3, move _5) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:53:5: 53:9
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a A, &'b A) -> Option<std::cmp::Ordering> {<A as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:51:48: 51:48
    }
}

fn <impl at ui/derives/derive-hygiene.rs:51:50: 51:53>::cmp(_1: &X<A>, _2: &X<A>) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:51:50: 51:53
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:51:50: 51:53
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/derives/derive-hygiene.rs:51:50: 51:53
    let mut _3: &A;                      // in scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
    let _4: &A;                          // in scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
    let mut _5: &A;                      // in scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
    let _6: &A;                          // in scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9

    bb0: {
        _4 = &((*_1).0: A);              // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
        _3 = _4;                         // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
        _6 = &((*_2).0: A);              // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
        _5 = _6;                         // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
        _0 = <A as Ord>::cmp(move _3, move _5) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:53:5: 53:9
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a A, &'b A) -> std::cmp::Ordering {<A as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:51:53: 51:53
    }
}

fn <impl at ui/derives/derive-hygiene.rs:51:55: 51:60>::fmt(_1: &X<A>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:51:55: 51:60
    debug f => _2;                       // in scope 0 at ui/derives/derive-hygiene.rs:51:55: 51:60
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/derives/derive-hygiene.rs:51:55: 51:60
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/derives/derive-hygiene.rs:51:55: 51:60
    let mut _4: &str;                    // in scope 0 at ui/derives/derive-hygiene.rs:51:55: 51:60
    let _5: &str;                        // in scope 0 at ui/derives/derive-hygiene.rs:51:55: 51:60
    let mut _6: &str;                    // in scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
    let _7: &str;                        // in scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
    let mut _9: &&A;                     // in scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
    let _10: &&A;                        // in scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
    let _11: &A;                         // in scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/derives/derive-hygiene.rs:51:55: 51:60
        _5 = const "X";                  // scope 0 at ui/derives/derive-hygiene.rs:51:55: 51:60
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:51:55: 51:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/derives/derive-hygiene.rs:51:55: 51:60
        _7 = const "A";                  // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:53:5: 53:9
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
        _11 = &((*_1).0: A);             // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
        _10 = &_11;                      // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
        _9 = _10;                        // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _3, move _4, move _6, move _8) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:51:55: 51:60
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:51:55: 51:60
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:51:60: 51:60
    }
}

fn <impl at ui/derives/derive-hygiene.rs:51:62: 51:69>::default() -> X<A> {
    let mut _0: X<A>;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:51:62: 51:69
    let mut _1: A;                       // in scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9

    bb0: {
        _1 = <A as Default>::default() -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:53:5: 53:9
                                         // + literal: Const { ty: fn() -> A {<A as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = X::<A> { A: move _1 };      // scope 0 at ui/derives/derive-hygiene.rs:51:62: 51:69
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:51:69: 51:69
    }
}

fn <impl at ui/derives/derive-hygiene.rs:51:71: 51:75>::hash(_1: &X<A>, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:51:71: 51:75
    debug state => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:51:71: 51:75
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:51:71: 51:75
    let mut _3: &A;                      // in scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
    let _4: &A;                          // in scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
    let mut _5: &mut __H;                // in scope 0 at ui/derives/derive-hygiene.rs:51:71: 51:75

    bb0: {
        _4 = &((*_1).0: A);              // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
        _3 = _4;                         // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
        _5 = &mut (*_2);                 // scope 0 at ui/derives/derive-hygiene.rs:51:71: 51:75
        _0 = <A as Hash>::hash::<__H>(move _3, move _5) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:53:5: 53:9
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:53:5: 53:9
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a A, &'b mut __H) {<A as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:51:75: 51:75
    }
}

fn <impl at ui/derives/derive-hygiene.rs:56:16: 56:21>::clone(_1: &Y<B>) -> Y<B> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:56:16: 56:21
    let mut _0: Y<B>;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:56:16: 56:21
    let mut _2: B;                       // in scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
    let mut _3: &B;                      // in scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
    let _4: &B;                          // in scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14

    bb0: {
        _4 = &((*_1).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
        _3 = _4;                         // scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
        _2 = <B as Clone>::clone(move _3) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:57:13: 57:14
                                         // + literal: Const { ty: for<'a> fn(&'a B) -> B {<B as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Y::<B>(move _2);            // scope 0 at ui/derives/derive-hygiene.rs:56:16: 56:21
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:56:21: 56:21
    }
}

fn <impl at ui/derives/derive-hygiene.rs:56:23: 56:32>::eq(_1: &Y<B>, _2: &Y<B>) -> bool {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:56:23: 56:32
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:56:23: 56:32
    let mut _0: bool;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:56:23: 56:32
    let mut _3: &B;                      // in scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
    let mut _4: &B;                      // in scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14

    bb0: {
        _3 = &((*_1).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
        _4 = &((*_2).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
        _0 = <B as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:57:13: 57:14
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a B, &'b B) -> bool {<B as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:56:32: 56:32
    }
}

fn <impl at ui/derives/derive-hygiene.rs:56:34: 56:36>::assert_receiver_is_total_eq(_1: &Y<B>) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:56:34: 56:36
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:56:34: 56:36
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:56:36: 56:36
    }
}

fn <impl at ui/derives/derive-hygiene.rs:56:38: 56:48>::partial_cmp(_1: &Y<B>, _2: &Y<B>) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:56:38: 56:48
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:56:38: 56:48
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/derives/derive-hygiene.rs:56:38: 56:48
    let mut _3: &B;                      // in scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
    let _4: &B;                          // in scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
    let mut _5: &B;                      // in scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
    let _6: &B;                          // in scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14

    bb0: {
        _4 = &((*_1).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
        _3 = _4;                         // scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
        _6 = &((*_2).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
        _5 = _6;                         // scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
        _0 = <B as PartialOrd>::partial_cmp(move _3, move _5) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:57:13: 57:14
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a B, &'b B) -> Option<std::cmp::Ordering> {<B as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:56:48: 56:48
    }
}

fn <impl at ui/derives/derive-hygiene.rs:56:50: 56:53>::cmp(_1: &Y<B>, _2: &Y<B>) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:56:50: 56:53
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:56:50: 56:53
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/derives/derive-hygiene.rs:56:50: 56:53
    let mut _3: &B;                      // in scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
    let _4: &B;                          // in scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
    let mut _5: &B;                      // in scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
    let _6: &B;                          // in scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14

    bb0: {
        _4 = &((*_1).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
        _3 = _4;                         // scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
        _6 = &((*_2).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
        _5 = _6;                         // scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
        _0 = <B as Ord>::cmp(move _3, move _5) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:57:13: 57:14
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a B, &'b B) -> std::cmp::Ordering {<B as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:56:53: 56:53
    }
}

fn <impl at ui/derives/derive-hygiene.rs:56:55: 56:60>::fmt(_1: &Y<B>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:56:55: 56:60
    debug f => _2;                       // in scope 0 at ui/derives/derive-hygiene.rs:56:55: 56:60
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/derives/derive-hygiene.rs:56:55: 56:60
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/derives/derive-hygiene.rs:56:55: 56:60
    let mut _4: &str;                    // in scope 0 at ui/derives/derive-hygiene.rs:56:55: 56:60
    let _5: &str;                        // in scope 0 at ui/derives/derive-hygiene.rs:56:55: 56:60
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
    let mut _7: &&B;                     // in scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
    let _8: &&B;                         // in scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
    let _9: &B;                          // in scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/derives/derive-hygiene.rs:56:55: 56:60
        _5 = const "Y";                  // scope 0 at ui/derives/derive-hygiene.rs:56:55: 56:60
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:56:55: 56:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/derives/derive-hygiene.rs:56:55: 56:60
        _9 = &((*_1).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
        _8 = &_9;                        // scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
        _7 = _8;                         // scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:56:55: 56:60
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:56:55: 56:60
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:56:60: 56:60
    }
}

fn <impl at ui/derives/derive-hygiene.rs:56:62: 56:69>::default() -> Y<B> {
    let mut _0: Y<B>;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:56:62: 56:69
    let mut _1: B;                       // in scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14

    bb0: {
        _1 = <B as Default>::default() -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:57:13: 57:14
                                         // + literal: Const { ty: fn() -> B {<B as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Y::<B>(move _1);            // scope 0 at ui/derives/derive-hygiene.rs:56:62: 56:69
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:56:69: 56:69
    }
}

fn <impl at ui/derives/derive-hygiene.rs:56:71: 56:75>::hash(_1: &Y<B>, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:56:71: 56:75
    debug state => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:56:71: 56:75
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:56:71: 56:75
    let mut _3: &B;                      // in scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
    let _4: &B;                          // in scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
    let mut _5: &mut __H;                // in scope 0 at ui/derives/derive-hygiene.rs:56:71: 56:75

    bb0: {
        _4 = &((*_1).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
        _3 = _4;                         // scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
        _5 = &mut (*_2);                 // scope 0 at ui/derives/derive-hygiene.rs:56:71: 56:75
        _0 = <B as Hash>::hash::<__H>(move _3, move _5) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:57:13: 57:14
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:57:13: 57:14
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a B, &'b mut __H) {<B as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:56:75: 56:75
    }
}

fn <impl at ui/derives/derive-hygiene.rs:61:16: 61:21>::clone(_1: &Z<C>) -> Z<C> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:61:16: 61:21
    let mut _0: Z<C>;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:61:16: 61:21
    let mut _2: isize;                   // in scope 0 at ui/derives/derive-hygiene.rs:61:16: 61:21
    let _3: &C;                          // in scope 0 at ui/derives/derive-hygiene.rs:63:7: 63:8
    let mut _4: C;                       // in scope 0 at ui/derives/derive-hygiene.rs:63:7: 63:8
    let mut _5: &C;                      // in scope 0 at ui/derives/derive-hygiene.rs:63:7: 63:8
    let _6: &C;                          // in scope 0 at ui/derives/derive-hygiene.rs:64:9: 64:13
    let mut _7: C;                       // in scope 0 at ui/derives/derive-hygiene.rs:64:9: 64:13
    let mut _8: &C;                      // in scope 0 at ui/derives/derive-hygiene.rs:64:9: 64:13
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at ui/derives/derive-hygiene.rs:63:7: 63:8
    }
    scope 2 {
        debug __self_0 => _6;            // in scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at ui/derives/derive-hygiene.rs:61:16: 61:21
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/derives/derive-hygiene.rs:61:16: 61:21
    }

    bb1: {
        _6 = &(((*_1) as B).0: C);       // scope 0 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _8 = _6;                         // scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _7 = <C as Clone>::clone(move _8) -> bb5; // scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:64:9: 64:13
                                         // + literal: Const { ty: for<'a> fn(&'a C) -> C {<C as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/derives/derive-hygiene.rs:61:16: 61:21
    }

    bb3: {
        _3 = &(((*_1) as C).0: C);       // scope 0 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _5 = _3;                         // scope 1 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _4 = <C as Clone>::clone(move _5) -> bb4; // scope 1 at ui/derives/derive-hygiene.rs:63:7: 63:8
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:63:7: 63:8
                                         // + literal: Const { ty: for<'a> fn(&'a C) -> C {<C as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = Z::<C>::C(move _4);         // scope 1 at ui/derives/derive-hygiene.rs:61:16: 61:21
        goto -> bb6;                     // scope 0 at ui/derives/derive-hygiene.rs:61:20: 61:21
    }

    bb5: {
        _0 = Z::<C>::B { C: move _7 };   // scope 2 at ui/derives/derive-hygiene.rs:61:16: 61:21
        goto -> bb6;                     // scope 0 at ui/derives/derive-hygiene.rs:61:20: 61:21
    }

    bb6: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:61:21: 61:21
    }
}

fn <impl at ui/derives/derive-hygiene.rs:61:23: 61:32>::eq(_1: &Z<C>, _2: &Z<C>) -> bool {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
    let mut _0: bool;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
    let _3: isize;                       // in scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
    let mut _4: &Z<C>;                   // in scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
    let mut _6: &Z<C>;                   // in scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
    let mut _7: bool;                    // in scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
    let mut _8: isize;                   // in scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
    let mut _9: isize;                   // in scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
    let mut _10: bool;                   // in scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
    let mut _11: (&Z<C>, &Z<C>);         // in scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
    let mut _12: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
    let mut _13: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
    let mut _14: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
    let mut _15: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
    let mut _16: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
    let mut _19: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:63:7: 63:8
    let mut _20: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:63:7: 63:8
    let mut _23: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:64:9: 64:13
    let mut _24: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:64:9: 64:13
    let mut _25: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
    let mut _26: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
    let mut _27: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
    let mut _28: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
    let mut _29: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
    let mut _30: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
    let mut _31: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/derives/derive-hygiene.rs:61:23: 61:32
        let _5: isize;                   // in scope 1 at ui/derives/derive-hygiene.rs:61:23: 61:32
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/derives/derive-hygiene.rs:61:23: 61:32
            let _17: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:63:7: 63:8
            let _18: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:63:7: 63:8
            let _21: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
            let _22: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
            scope 3 {
                debug __self_0 => _17;   // in scope 3 at ui/derives/derive-hygiene.rs:63:7: 63:8
                debug __arg1_0 => _18;   // in scope 3 at ui/derives/derive-hygiene.rs:63:7: 63:8
            }
            scope 4 {
                debug __self_0 => _21;   // in scope 4 at ui/derives/derive-hygiene.rs:64:9: 64:13
                debug __arg1_0 => _22;   // in scope 4 at ui/derives/derive-hygiene.rs:64:9: 64:13
            }
            scope 5 {
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
        _3 = discriminant((*_4));        // scope 0 at ui/derives/derive-hygiene.rs:61:23: 61:32
        _6 = _2;                         // scope 1 at ui/derives/derive-hygiene.rs:61:23: 61:32
        _5 = discriminant((*_6));        // scope 1 at ui/derives/derive-hygiene.rs:61:23: 61:32
        _8 = _3;                         // scope 2 at ui/derives/derive-hygiene.rs:61:23: 61:32
        _9 = _5;                         // scope 2 at ui/derives/derive-hygiene.rs:61:23: 61:32
        _7 = Eq(move _8, move _9);       // scope 2 at ui/derives/derive-hygiene.rs:61:23: 61:32
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/derives/derive-hygiene.rs:61:23: 61:32
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/derives/derive-hygiene.rs:61:23: 61:32
        goto -> bb3;                     // scope 2 at ui/derives/derive-hygiene.rs:61:23: 61:32
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/derives/derive-hygiene.rs:61:23: 61:32
        _13 = _2;                        // scope 2 at ui/derives/derive-hygiene.rs:61:23: 61:32
        _11 = (move _12, move _13);      // scope 2 at ui/derives/derive-hygiene.rs:61:23: 61:32
        _25 = deref_copy (_11.0: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:61:23: 61:32
        _16 = discriminant((*_25));      // scope 2 at ui/derives/derive-hygiene.rs:61:23: 61:32
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 2 at ui/derives/derive-hygiene.rs:61:23: 61:32
    }

    bb3: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:61:32: 61:32
    }

    bb4: {
        _26 = deref_copy (_11.1: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:61:23: 61:32
        _14 = discriminant((*_26));      // scope 2 at ui/derives/derive-hygiene.rs:61:23: 61:32
        switchInt(move _14) -> [0: bb7, otherwise: bb5]; // scope 2 at ui/derives/derive-hygiene.rs:61:23: 61:32
    }

    bb5: {
        unreachable;                     // scope 5 at ui/derives/derive-hygiene.rs:61:23: 61:32
    }

    bb6: {
        _27 = deref_copy (_11.1: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:61:23: 61:32
        _15 = discriminant((*_27));      // scope 2 at ui/derives/derive-hygiene.rs:61:23: 61:32
        switchInt(move _15) -> [1: bb8, otherwise: bb5]; // scope 2 at ui/derives/derive-hygiene.rs:61:23: 61:32
    }

    bb7: {
        _28 = deref_copy (_11.0: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _17 = &(((*_28) as C).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _29 = deref_copy (_11.1: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _18 = &(((*_29) as C).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _19 = _17;                       // scope 3 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _20 = _18;                       // scope 3 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _10 = <C as PartialEq>::eq(move _19, move _20) -> bb9; // scope 3 at ui/derives/derive-hygiene.rs:63:7: 63:8
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:63:7: 63:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a C, &'b C) -> bool {<C as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _30 = deref_copy (_11.0: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _21 = &(((*_30) as B).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _31 = deref_copy (_11.1: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _22 = &(((*_31) as B).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _23 = _21;                       // scope 4 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _24 = _22;                       // scope 4 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _10 = <C as PartialEq>::eq(move _23, move _24) -> bb9; // scope 4 at ui/derives/derive-hygiene.rs:64:9: 64:13
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:64:9: 64:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a C, &'b C) -> bool {<C as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _0 = move _10;                   // scope 2 at ui/derives/derive-hygiene.rs:61:23: 61:32
        goto -> bb3;                     // scope 2 at ui/derives/derive-hygiene.rs:61:23: 61:32
    }
}

fn <impl at ui/derives/derive-hygiene.rs:61:34: 61:36>::assert_receiver_is_total_eq(_1: &Z<C>) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:61:34: 61:36
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:61:34: 61:36
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:61:36: 61:36
    }
}

fn <impl at ui/derives/derive-hygiene.rs:61:38: 61:48>::partial_cmp(_1: &Z<C>, _2: &Z<C>) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
    let _3: isize;                       // in scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
    let mut _4: &Z<C>;                   // in scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
    let mut _6: &Z<C>;                   // in scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
    let mut _7: (&Z<C>, &Z<C>);          // in scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
    let mut _8: &Z<C>;                   // in scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
    let mut _9: &Z<C>;                   // in scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
    let mut _10: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
    let mut _11: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
    let mut _12: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
    let mut _15: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:63:7: 63:8
    let mut _16: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:63:7: 63:8
    let mut _19: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:64:9: 64:13
    let mut _20: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:64:9: 64:13
    let mut _21: &isize;                 // in scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
    let _22: &isize;                     // in scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
    let mut _23: &isize;                 // in scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
    let _24: &isize;                     // in scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
    let mut _25: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
    let mut _26: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
    let mut _27: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
    let mut _28: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
    let mut _29: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
    let mut _30: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
    let mut _31: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/derives/derive-hygiene.rs:61:38: 61:48
        let _5: isize;                   // in scope 1 at ui/derives/derive-hygiene.rs:61:38: 61:48
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/derives/derive-hygiene.rs:61:38: 61:48
            let _13: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:63:7: 63:8
            let _14: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:63:7: 63:8
            let _17: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
            let _18: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
            scope 3 {
                debug __self_0 => _13;   // in scope 3 at ui/derives/derive-hygiene.rs:63:7: 63:8
                debug __arg1_0 => _14;   // in scope 3 at ui/derives/derive-hygiene.rs:63:7: 63:8
            }
            scope 4 {
                debug __self_0 => _17;   // in scope 4 at ui/derives/derive-hygiene.rs:64:9: 64:13
                debug __arg1_0 => _18;   // in scope 4 at ui/derives/derive-hygiene.rs:64:9: 64:13
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
        _3 = discriminant((*_4));        // scope 0 at ui/derives/derive-hygiene.rs:61:38: 61:48
        _6 = _2;                         // scope 1 at ui/derives/derive-hygiene.rs:61:38: 61:48
        _5 = discriminant((*_6));        // scope 1 at ui/derives/derive-hygiene.rs:61:38: 61:48
        _8 = _1;                         // scope 2 at ui/derives/derive-hygiene.rs:61:38: 61:48
        _9 = _2;                         // scope 2 at ui/derives/derive-hygiene.rs:61:38: 61:48
        _7 = (move _8, move _9);         // scope 2 at ui/derives/derive-hygiene.rs:61:38: 61:48
        _25 = deref_copy (_7.0: &Z<C>);  // scope 2 at ui/derives/derive-hygiene.rs:61:38: 61:48
        _12 = discriminant((*_25));      // scope 2 at ui/derives/derive-hygiene.rs:61:38: 61:48
        switchInt(move _12) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 2 at ui/derives/derive-hygiene.rs:61:38: 61:48
    }

    bb1: {
        _26 = deref_copy (_7.1: &Z<C>);  // scope 2 at ui/derives/derive-hygiene.rs:61:38: 61:48
        _10 = discriminant((*_26));      // scope 2 at ui/derives/derive-hygiene.rs:61:38: 61:48
        switchInt(move _10) -> [0: bb4, otherwise: bb2]; // scope 2 at ui/derives/derive-hygiene.rs:61:38: 61:48
    }

    bb2: {
        _22 = &_3;                       // scope 2 at ui/derives/derive-hygiene.rs:61:38: 61:48
        _21 = _22;                       // scope 2 at ui/derives/derive-hygiene.rs:61:38: 61:48
        _24 = &_5;                       // scope 2 at ui/derives/derive-hygiene.rs:61:38: 61:48
        _23 = _24;                       // scope 2 at ui/derives/derive-hygiene.rs:61:38: 61:48
        _0 = <isize as PartialOrd>::partial_cmp(move _21, move _23) -> bb6; // scope 2 at ui/derives/derive-hygiene.rs:61:38: 61:48
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:61:38: 61:48
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b isize) -> Option<std::cmp::Ordering> {<isize as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb3: {
        _27 = deref_copy (_7.1: &Z<C>);  // scope 2 at ui/derives/derive-hygiene.rs:61:38: 61:48
        _11 = discriminant((*_27));      // scope 2 at ui/derives/derive-hygiene.rs:61:38: 61:48
        switchInt(move _11) -> [1: bb5, otherwise: bb2]; // scope 2 at ui/derives/derive-hygiene.rs:61:38: 61:48
    }

    bb4: {
        _28 = deref_copy (_7.0: &Z<C>);  // scope 2 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _13 = &(((*_28) as C).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _29 = deref_copy (_7.1: &Z<C>);  // scope 2 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _14 = &(((*_29) as C).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _15 = _13;                       // scope 3 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _16 = _14;                       // scope 3 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _0 = <C as PartialOrd>::partial_cmp(move _15, move _16) -> bb6; // scope 3 at ui/derives/derive-hygiene.rs:63:7: 63:8
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:63:7: 63:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a C, &'b C) -> Option<std::cmp::Ordering> {<C as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb5: {
        _30 = deref_copy (_7.0: &Z<C>);  // scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _17 = &(((*_30) as B).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _31 = deref_copy (_7.1: &Z<C>);  // scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _18 = &(((*_31) as B).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _19 = _17;                       // scope 4 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _20 = _18;                       // scope 4 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _0 = <C as PartialOrd>::partial_cmp(move _19, move _20) -> bb6; // scope 4 at ui/derives/derive-hygiene.rs:64:9: 64:13
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:64:9: 64:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a C, &'b C) -> Option<std::cmp::Ordering> {<C as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:61:48: 61:48
    }
}

fn <impl at ui/derives/derive-hygiene.rs:61:50: 61:53>::cmp(_1: &Z<C>, _2: &Z<C>) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    let _3: isize;                       // in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    let mut _4: &Z<C>;                   // in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    let mut _6: &Z<C>;                   // in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    let mut _7: std::cmp::Ordering;      // in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    let mut _8: &isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    let _9: &isize;                      // in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    let mut _10: &isize;                 // in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    let _11: &isize;                     // in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    let mut _12: i8;                     // in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    let mut _13: (&Z<C>, &Z<C>);         // in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    let mut _14: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    let mut _15: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    let mut _16: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    let mut _17: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    let mut _18: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    let mut _21: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:63:7: 63:8
    let mut _22: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:63:7: 63:8
    let mut _25: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:64:9: 64:13
    let mut _26: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:64:9: 64:13
    let mut _28: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    let mut _29: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    let mut _30: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    let mut _31: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    let mut _32: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    let mut _33: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    let mut _34: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/derives/derive-hygiene.rs:61:50: 61:53
        let _5: isize;                   // in scope 1 at ui/derives/derive-hygiene.rs:61:50: 61:53
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/derives/derive-hygiene.rs:61:50: 61:53
            let _19: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:63:7: 63:8
            let _20: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:63:7: 63:8
            let _23: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
            let _24: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
            let _27: std::cmp::Ordering; // in scope 2 at ui/derives/derive-hygiene.rs:61:50: 61:53
            scope 3 {
                debug __self_0 => _19;   // in scope 3 at ui/derives/derive-hygiene.rs:63:7: 63:8
                debug __arg1_0 => _20;   // in scope 3 at ui/derives/derive-hygiene.rs:63:7: 63:8
            }
            scope 4 {
                debug __self_0 => _23;   // in scope 4 at ui/derives/derive-hygiene.rs:64:9: 64:13
                debug __arg1_0 => _24;   // in scope 4 at ui/derives/derive-hygiene.rs:64:9: 64:13
            }
            scope 5 {
            }
            scope 6 {
                debug cmp => _27;        // in scope 6 at ui/derives/derive-hygiene.rs:61:50: 61:53
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
        _3 = discriminant((*_4));        // scope 0 at ui/derives/derive-hygiene.rs:61:50: 61:53
        _6 = _2;                         // scope 1 at ui/derives/derive-hygiene.rs:61:50: 61:53
        _5 = discriminant((*_6));        // scope 1 at ui/derives/derive-hygiene.rs:61:50: 61:53
        _9 = &_3;                        // scope 2 at ui/derives/derive-hygiene.rs:61:50: 61:53
        _8 = _9;                         // scope 2 at ui/derives/derive-hygiene.rs:61:50: 61:53
        _11 = &_5;                       // scope 2 at ui/derives/derive-hygiene.rs:61:50: 61:53
        _10 = _11;                       // scope 2 at ui/derives/derive-hygiene.rs:61:50: 61:53
        _7 = <isize as Ord>::cmp(move _8, move _10) -> bb1; // scope 2 at ui/derives/derive-hygiene.rs:61:50: 61:53
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:61:50: 61:53
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b isize) -> std::cmp::Ordering {<isize as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = discriminant(_7);          // scope 2 at ui/derives/derive-hygiene.rs:61:50: 61:53
        switchInt(move _12) -> [0: bb3, otherwise: bb2]; // scope 2 at ui/derives/derive-hygiene.rs:61:50: 61:53
    }

    bb2: {
        _27 = _7;                        // scope 2 at ui/derives/derive-hygiene.rs:61:50: 61:53
        _0 = _27;                        // scope 6 at ui/derives/derive-hygiene.rs:61:50: 61:53
        goto -> bb9;                     // scope 2 at ui/derives/derive-hygiene.rs:61:52: 61:53
    }

    bb3: {
        _14 = _1;                        // scope 2 at ui/derives/derive-hygiene.rs:61:50: 61:53
        _15 = _2;                        // scope 2 at ui/derives/derive-hygiene.rs:61:50: 61:53
        _13 = (move _14, move _15);      // scope 2 at ui/derives/derive-hygiene.rs:61:50: 61:53
        _28 = deref_copy (_13.0: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:61:50: 61:53
        _18 = discriminant((*_28));      // scope 2 at ui/derives/derive-hygiene.rs:61:50: 61:53
        switchInt(move _18) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 2 at ui/derives/derive-hygiene.rs:61:50: 61:53
    }

    bb4: {
        _29 = deref_copy (_13.1: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:61:50: 61:53
        _16 = discriminant((*_29));      // scope 2 at ui/derives/derive-hygiene.rs:61:50: 61:53
        switchInt(move _16) -> [0: bb7, otherwise: bb5]; // scope 2 at ui/derives/derive-hygiene.rs:61:50: 61:53
    }

    bb5: {
        unreachable;                     // scope 5 at ui/derives/derive-hygiene.rs:61:50: 61:53
    }

    bb6: {
        _30 = deref_copy (_13.1: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:61:50: 61:53
        _17 = discriminant((*_30));      // scope 2 at ui/derives/derive-hygiene.rs:61:50: 61:53
        switchInt(move _17) -> [1: bb8, otherwise: bb5]; // scope 2 at ui/derives/derive-hygiene.rs:61:50: 61:53
    }

    bb7: {
        _31 = deref_copy (_13.0: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _19 = &(((*_31) as C).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _32 = deref_copy (_13.1: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _20 = &(((*_32) as C).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _21 = _19;                       // scope 3 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _22 = _20;                       // scope 3 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _0 = <C as Ord>::cmp(move _21, move _22) -> bb9; // scope 3 at ui/derives/derive-hygiene.rs:63:7: 63:8
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:63:7: 63:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a C, &'b C) -> std::cmp::Ordering {<C as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb8: {
        _33 = deref_copy (_13.0: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _23 = &(((*_33) as B).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _34 = deref_copy (_13.1: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _24 = &(((*_34) as B).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _25 = _23;                       // scope 4 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _26 = _24;                       // scope 4 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _0 = <C as Ord>::cmp(move _25, move _26) -> bb9; // scope 4 at ui/derives/derive-hygiene.rs:64:9: 64:13
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:64:9: 64:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a C, &'b C) -> std::cmp::Ordering {<C as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:61:53: 61:53
    }
}

fn <impl at ui/derives/derive-hygiene.rs:61:55: 61:60>::fmt(_1: &Z<C>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:61:55: 61:60
    debug f => _2;                       // in scope 0 at ui/derives/derive-hygiene.rs:61:55: 61:60
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/derives/derive-hygiene.rs:61:55: 61:60
    let mut _3: isize;                   // in scope 0 at ui/derives/derive-hygiene.rs:61:55: 61:60
    let _4: &C;                          // in scope 0 at ui/derives/derive-hygiene.rs:63:7: 63:8
    let mut _5: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/derives/derive-hygiene.rs:61:55: 61:60
    let mut _6: &str;                    // in scope 0 at ui/derives/derive-hygiene.rs:61:55: 61:60
    let _7: &str;                        // in scope 0 at ui/derives/derive-hygiene.rs:61:55: 61:60
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/derives/derive-hygiene.rs:63:7: 63:8
    let mut _9: &&C;                     // in scope 0 at ui/derives/derive-hygiene.rs:63:7: 63:8
    let _10: &&C;                        // in scope 0 at ui/derives/derive-hygiene.rs:63:7: 63:8
    let _11: &C;                         // in scope 0 at ui/derives/derive-hygiene.rs:64:9: 64:13
    let mut _12: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/derives/derive-hygiene.rs:61:55: 61:60
    let mut _13: &str;                   // in scope 0 at ui/derives/derive-hygiene.rs:61:55: 61:60
    let _14: &str;                       // in scope 0 at ui/derives/derive-hygiene.rs:61:55: 61:60
    let mut _15: &str;                   // in scope 0 at ui/derives/derive-hygiene.rs:64:9: 64:13
    let _16: &str;                       // in scope 0 at ui/derives/derive-hygiene.rs:64:9: 64:13
    let mut _17: &dyn std::fmt::Debug;   // in scope 0 at ui/derives/derive-hygiene.rs:64:9: 64:13
    let mut _18: &&C;                    // in scope 0 at ui/derives/derive-hygiene.rs:64:9: 64:13
    let _19: &&C;                        // in scope 0 at ui/derives/derive-hygiene.rs:64:9: 64:13
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/derives/derive-hygiene.rs:63:7: 63:8
    }
    scope 2 {
        debug __self_0 => _11;           // in scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/derives/derive-hygiene.rs:61:55: 61:60
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/derives/derive-hygiene.rs:61:55: 61:60
    }

    bb1: {
        _11 = &(((*_1) as B).0: C);      // scope 0 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _12 = &mut (*_2);                // scope 2 at ui/derives/derive-hygiene.rs:61:55: 61:60
        _14 = const "B";                 // scope 2 at ui/derives/derive-hygiene.rs:61:55: 61:60
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:61:55: 61:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = _14;                       // scope 2 at ui/derives/derive-hygiene.rs:61:55: 61:60
        _16 = const "C";                 // scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:64:9: 64:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _15 = _16;                       // scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _19 = &_11;                      // scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _18 = _19;                       // scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _17 = move _18 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _12, move _13, move _15, move _17) -> bb4; // scope 2 at ui/derives/derive-hygiene.rs:61:55: 61:60
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:61:55: 61:60
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/derives/derive-hygiene.rs:61:55: 61:60
    }

    bb3: {
        _4 = &(((*_1) as C).0: C);       // scope 0 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _5 = &mut (*_2);                 // scope 1 at ui/derives/derive-hygiene.rs:61:55: 61:60
        _7 = const "C";                  // scope 1 at ui/derives/derive-hygiene.rs:61:55: 61:60
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:61:55: 61:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 1 at ui/derives/derive-hygiene.rs:61:55: 61:60
        _10 = &_4;                       // scope 1 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _9 = _10;                        // scope 1 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _5, move _6, move _8) -> bb4; // scope 1 at ui/derives/derive-hygiene.rs:61:55: 61:60
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:61:55: 61:60
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:61:60: 61:60
    }
}

fn <impl at ui/derives/derive-hygiene.rs:61:62: 61:66>::hash(_1: &Z<C>, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:61:62: 61:66
    debug state => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:61:62: 61:66
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:61:62: 61:66
    let _3: isize;                       // in scope 0 at ui/derives/derive-hygiene.rs:61:62: 61:66
    let mut _4: &Z<C>;                   // in scope 0 at ui/derives/derive-hygiene.rs:61:62: 61:66
    let _5: ();                          // in scope 0 at ui/derives/derive-hygiene.rs:61:62: 61:66
    let mut _6: &isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:61:62: 61:66
    let _7: &isize;                      // in scope 0 at ui/derives/derive-hygiene.rs:61:62: 61:66
    let mut _8: &mut __H;                // in scope 0 at ui/derives/derive-hygiene.rs:61:62: 61:66
    let mut _9: isize;                   // in scope 0 at ui/derives/derive-hygiene.rs:61:62: 61:66
    let mut _11: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:63:7: 63:8
    let mut _12: &mut __H;               // in scope 0 at ui/derives/derive-hygiene.rs:61:62: 61:66
    let mut _14: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:64:9: 64:13
    let mut _15: &mut __H;               // in scope 0 at ui/derives/derive-hygiene.rs:61:62: 61:66
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/derives/derive-hygiene.rs:61:62: 61:66
        let _10: &C;                     // in scope 1 at ui/derives/derive-hygiene.rs:63:7: 63:8
        let _13: &C;                     // in scope 1 at ui/derives/derive-hygiene.rs:64:9: 64:13
        scope 2 {
            debug __self_0 => _10;       // in scope 2 at ui/derives/derive-hygiene.rs:63:7: 63:8
        }
        scope 3 {
            debug __self_0 => _13;       // in scope 3 at ui/derives/derive-hygiene.rs:64:9: 64:13
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:61:62: 61:66
        _3 = discriminant((*_4));        // scope 0 at ui/derives/derive-hygiene.rs:61:62: 61:66
        _7 = &_3;                        // scope 1 at ui/derives/derive-hygiene.rs:61:62: 61:66
        _6 = _7;                         // scope 1 at ui/derives/derive-hygiene.rs:61:62: 61:66
        _8 = &mut (*_2);                 // scope 1 at ui/derives/derive-hygiene.rs:61:62: 61:66
        _5 = <isize as Hash>::hash::<__H>(move _6, move _8) -> bb1; // scope 1 at ui/derives/derive-hygiene.rs:61:62: 61:66
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:61:62: 61:66
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b mut __H) {<isize as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = discriminant((*_1));        // scope 1 at ui/derives/derive-hygiene.rs:61:62: 61:66
        switchInt(move _9) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 1 at ui/derives/derive-hygiene.rs:61:62: 61:66
    }

    bb2: {
        _13 = &(((*_1) as B).0: C);      // scope 1 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _14 = _13;                       // scope 3 at ui/derives/derive-hygiene.rs:64:9: 64:13
        _15 = &mut (*_2);                // scope 3 at ui/derives/derive-hygiene.rs:61:62: 61:66
        _0 = <C as Hash>::hash::<__H>(move _14, move _15) -> bb5; // scope 3 at ui/derives/derive-hygiene.rs:64:9: 64:13
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:64:9: 64:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a C, &'b mut __H) {<C as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 1 at ui/derives/derive-hygiene.rs:61:62: 61:66
    }

    bb4: {
        _10 = &(((*_1) as C).0: C);      // scope 1 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _11 = _10;                       // scope 2 at ui/derives/derive-hygiene.rs:63:7: 63:8
        _12 = &mut (*_2);                // scope 2 at ui/derives/derive-hygiene.rs:61:62: 61:66
        _0 = <C as Hash>::hash::<__H>(move _11, move _12) -> bb5; // scope 2 at ui/derives/derive-hygiene.rs:63:7: 63:8
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:63:7: 63:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a C, &'b mut __H) {<C as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:61:66: 61:66
    }
}

const NON_MODULE: () = {
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:69:19: 69:21

    bb0: {
        _0 = const ();                   // scope 0 at ui/derives/derive-hygiene.rs:69:24: 92:2
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:69:1: 92:3
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:70:20: 70:25>::clone(_1: &NON_MODULE::__H) -> NON_MODULE::__H {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:70:20: 70:25
    let mut _0: NON_MODULE::__H;         // return place in scope 0 at ui/derives/derive-hygiene.rs:70:20: 70:25
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/derives/derive-hygiene.rs:70:20: 70:25
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:70:25: 70:25
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:70:27: 70:36>::eq(_1: &NON_MODULE::__H, _2: &NON_MODULE::__H) -> bool {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:70:27: 70:36
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:70:27: 70:36
    let mut _0: bool;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:70:27: 70:36
    let mut _3: (&NON_MODULE::__H, &NON_MODULE::__H); // in scope 0 at ui/derives/derive-hygiene.rs:70:27: 70:36
    let mut _4: &NON_MODULE::__H;        // in scope 0 at ui/derives/derive-hygiene.rs:70:27: 70:36
    let mut _5: &NON_MODULE::__H;        // in scope 0 at ui/derives/derive-hygiene.rs:70:27: 70:36
    let _6: &i32;                        // in scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
    let _7: &i32;                        // in scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
    let mut _8: i32;                     // in scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
    let mut _9: i32;                     // in scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
    let mut _10: &NON_MODULE::__H;       // in scope 0 at ui/derives/derive-hygiene.rs:70:27: 70:36
    let mut _11: &NON_MODULE::__H;       // in scope 0 at ui/derives/derive-hygiene.rs:70:27: 70:36
    scope 1 {
        debug __self_0 => _6;            // in scope 1 at ui/derives/derive-hygiene.rs:71:18: 71:21
        debug __arg1_0 => _7;            // in scope 1 at ui/derives/derive-hygiene.rs:71:18: 71:21
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:70:27: 70:36
        _5 = _2;                         // scope 0 at ui/derives/derive-hygiene.rs:70:27: 70:36
        _3 = (move _4, move _5);         // scope 0 at ui/derives/derive-hygiene.rs:70:27: 70:36
        _10 = deref_copy (_3.0: &NON_MODULE::__H); // scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
        _6 = &(((*_10) as V).0: i32);    // scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
        _11 = deref_copy (_3.1: &NON_MODULE::__H); // scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
        _7 = &(((*_11) as V).0: i32);    // scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
        _8 = (*_6);                      // scope 1 at ui/derives/derive-hygiene.rs:71:18: 71:21
        _9 = (*_7);                      // scope 1 at ui/derives/derive-hygiene.rs:71:18: 71:21
        _0 = Eq(move _8, move _9);       // scope 1 at ui/derives/derive-hygiene.rs:71:18: 71:21
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:70:36: 70:36
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:70:38: 70:40>::assert_receiver_is_total_eq(_1: &NON_MODULE::__H) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:70:38: 70:40
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:70:38: 70:40
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:70:40: 70:40
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:70:42: 70:52>::partial_cmp(_1: &NON_MODULE::__H, _2: &NON_MODULE::__H) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:70:42: 70:52
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:70:42: 70:52
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/derives/derive-hygiene.rs:70:42: 70:52
    let mut _3: (&NON_MODULE::__H, &NON_MODULE::__H); // in scope 0 at ui/derives/derive-hygiene.rs:70:42: 70:52
    let mut _4: &NON_MODULE::__H;        // in scope 0 at ui/derives/derive-hygiene.rs:70:42: 70:52
    let mut _5: &NON_MODULE::__H;        // in scope 0 at ui/derives/derive-hygiene.rs:70:42: 70:52
    let _6: &i32;                        // in scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
    let _7: &i32;                        // in scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
    let mut _8: &i32;                    // in scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
    let mut _9: &i32;                    // in scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
    let mut _10: &NON_MODULE::__H;       // in scope 0 at ui/derives/derive-hygiene.rs:70:42: 70:52
    let mut _11: &NON_MODULE::__H;       // in scope 0 at ui/derives/derive-hygiene.rs:70:42: 70:52
    scope 1 {
        debug __self_0 => _6;            // in scope 1 at ui/derives/derive-hygiene.rs:71:18: 71:21
        debug __arg1_0 => _7;            // in scope 1 at ui/derives/derive-hygiene.rs:71:18: 71:21
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:70:42: 70:52
        _5 = _2;                         // scope 0 at ui/derives/derive-hygiene.rs:70:42: 70:52
        _3 = (move _4, move _5);         // scope 0 at ui/derives/derive-hygiene.rs:70:42: 70:52
        _10 = deref_copy (_3.0: &NON_MODULE::__H); // scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
        _6 = &(((*_10) as V).0: i32);    // scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
        _11 = deref_copy (_3.1: &NON_MODULE::__H); // scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
        _7 = &(((*_11) as V).0: i32);    // scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
        _8 = _6;                         // scope 1 at ui/derives/derive-hygiene.rs:71:18: 71:21
        _9 = _7;                         // scope 1 at ui/derives/derive-hygiene.rs:71:18: 71:21
        _0 = <i32 as PartialOrd>::partial_cmp(move _8, move _9) -> bb1; // scope 1 at ui/derives/derive-hygiene.rs:71:18: 71:21
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:71:18: 71:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a i32, &'b i32) -> Option<std::cmp::Ordering> {<i32 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:70:52: 70:52
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:70:54: 70:57>::cmp(_1: &NON_MODULE::__H, _2: &NON_MODULE::__H) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:70:54: 70:57
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:70:54: 70:57
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/derives/derive-hygiene.rs:70:54: 70:57
    let mut _3: (&NON_MODULE::__H, &NON_MODULE::__H); // in scope 0 at ui/derives/derive-hygiene.rs:70:54: 70:57
    let mut _4: &NON_MODULE::__H;        // in scope 0 at ui/derives/derive-hygiene.rs:70:54: 70:57
    let mut _5: &NON_MODULE::__H;        // in scope 0 at ui/derives/derive-hygiene.rs:70:54: 70:57
    let _6: &i32;                        // in scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
    let _7: &i32;                        // in scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
    let mut _8: &i32;                    // in scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
    let mut _9: &i32;                    // in scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
    let mut _10: &NON_MODULE::__H;       // in scope 0 at ui/derives/derive-hygiene.rs:70:54: 70:57
    let mut _11: &NON_MODULE::__H;       // in scope 0 at ui/derives/derive-hygiene.rs:70:54: 70:57
    scope 1 {
        debug __self_0 => _6;            // in scope 1 at ui/derives/derive-hygiene.rs:71:18: 71:21
        debug __arg1_0 => _7;            // in scope 1 at ui/derives/derive-hygiene.rs:71:18: 71:21
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:70:54: 70:57
        _5 = _2;                         // scope 0 at ui/derives/derive-hygiene.rs:70:54: 70:57
        _3 = (move _4, move _5);         // scope 0 at ui/derives/derive-hygiene.rs:70:54: 70:57
        _10 = deref_copy (_3.0: &NON_MODULE::__H); // scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
        _6 = &(((*_10) as V).0: i32);    // scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
        _11 = deref_copy (_3.1: &NON_MODULE::__H); // scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
        _7 = &(((*_11) as V).0: i32);    // scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
        _8 = _6;                         // scope 1 at ui/derives/derive-hygiene.rs:71:18: 71:21
        _9 = _7;                         // scope 1 at ui/derives/derive-hygiene.rs:71:18: 71:21
        _0 = <i32 as Ord>::cmp(move _8, move _9) -> bb1; // scope 1 at ui/derives/derive-hygiene.rs:71:18: 71:21
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:71:18: 71:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a i32, &'b i32) -> std::cmp::Ordering {<i32 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:70:57: 70:57
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:70:59: 70:64>::fmt(_1: &NON_MODULE::__H, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:70:59: 70:64
    debug f => _2;                       // in scope 0 at ui/derives/derive-hygiene.rs:70:59: 70:64
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/derives/derive-hygiene.rs:70:59: 70:64
    let _3: &i32;                        // in scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
    let mut _4: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/derives/derive-hygiene.rs:70:59: 70:64
    let mut _5: &str;                    // in scope 0 at ui/derives/derive-hygiene.rs:70:59: 70:64
    let _6: &str;                        // in scope 0 at ui/derives/derive-hygiene.rs:70:59: 70:64
    let mut _7: &dyn std::fmt::Debug;    // in scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
    let mut _8: &&i32;                   // in scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
    let _9: &&i32;                       // in scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at ui/derives/derive-hygiene.rs:71:18: 71:21
    }

    bb0: {
        _3 = &(((*_1) as V).0: i32);     // scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
        _4 = &mut (*_2);                 // scope 1 at ui/derives/derive-hygiene.rs:70:59: 70:64
        _6 = const "V";                  // scope 1 at ui/derives/derive-hygiene.rs:70:59: 70:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:70:59: 70:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 1 at ui/derives/derive-hygiene.rs:70:59: 70:64
        _9 = &_3;                        // scope 1 at ui/derives/derive-hygiene.rs:71:18: 71:21
        _8 = _9;                         // scope 1 at ui/derives/derive-hygiene.rs:71:18: 71:21
        _7 = move _8 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/derives/derive-hygiene.rs:71:18: 71:21
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _4, move _5, move _7) -> bb1; // scope 1 at ui/derives/derive-hygiene.rs:70:59: 70:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:70:59: 70:64
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:70:64: 70:64
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:70:66: 70:70>::hash(_1: &NON_MODULE::__H, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:70:66: 70:70
    debug state => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:70:66: 70:70
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:70:66: 70:70
    let _3: &i32;                        // in scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
    let mut _4: &i32;                    // in scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
    let mut _5: &mut __H;                // in scope 0 at ui/derives/derive-hygiene.rs:70:66: 70:70
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at ui/derives/derive-hygiene.rs:71:18: 71:21
    }

    bb0: {
        _3 = &(((*_1) as V).0: i32);     // scope 0 at ui/derives/derive-hygiene.rs:71:18: 71:21
        _4 = _3;                         // scope 1 at ui/derives/derive-hygiene.rs:71:18: 71:21
        _5 = &mut (*_2);                 // scope 1 at ui/derives/derive-hygiene.rs:70:66: 70:70
        _0 = <i32 as Hash>::hash::<__H>(move _4, move _5) -> bb1; // scope 1 at ui/derives/derive-hygiene.rs:71:18: 71:21
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:71:18: 71:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a i32, &'b mut __H) {<i32 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:70:70: 70:70
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:74:20: 74:25>::clone(_1: &NON_MODULE::W) -> NON_MODULE::W {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:74:20: 74:25
    let mut _0: NON_MODULE::W;           // return place in scope 0 at ui/derives/derive-hygiene.rs:74:20: 74:25

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/derives/derive-hygiene.rs:74:20: 74:25
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:74:25: 74:25
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:74:27: 74:36>::eq(_1: &NON_MODULE::W, _2: &NON_MODULE::W) -> bool {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:74:27: 74:36
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:74:27: 74:36
    let mut _0: bool;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:74:27: 74:36
    let _3: i16;                         // in scope 0 at ui/derives/derive-hygiene.rs:74:27: 74:36
    let mut _4: &NON_MODULE::W;          // in scope 0 at ui/derives/derive-hygiene.rs:74:27: 74:36
    let mut _6: &NON_MODULE::W;          // in scope 0 at ui/derives/derive-hygiene.rs:74:27: 74:36
    let mut _7: i16;                     // in scope 0 at ui/derives/derive-hygiene.rs:74:27: 74:36
    let mut _8: i16;                     // in scope 0 at ui/derives/derive-hygiene.rs:74:27: 74:36
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/derives/derive-hygiene.rs:74:27: 74:36
        let _5: i16;                     // in scope 1 at ui/derives/derive-hygiene.rs:74:27: 74:36
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/derives/derive-hygiene.rs:74:27: 74:36
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:74:27: 74:36
        _3 = discriminant((*_4));        // scope 0 at ui/derives/derive-hygiene.rs:74:27: 74:36
        _6 = _2;                         // scope 1 at ui/derives/derive-hygiene.rs:74:27: 74:36
        _5 = discriminant((*_6));        // scope 1 at ui/derives/derive-hygiene.rs:74:27: 74:36
        _7 = _3;                         // scope 2 at ui/derives/derive-hygiene.rs:74:27: 74:36
        _8 = _5;                         // scope 2 at ui/derives/derive-hygiene.rs:74:27: 74:36
        _0 = Eq(move _7, move _8);       // scope 2 at ui/derives/derive-hygiene.rs:74:27: 74:36
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:74:36: 74:36
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:74:38: 74:40>::assert_receiver_is_total_eq(_1: &NON_MODULE::W) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:74:38: 74:40
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:74:38: 74:40

    bb0: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:74:40: 74:40
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:74:42: 74:52>::partial_cmp(_1: &NON_MODULE::W, _2: &NON_MODULE::W) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:74:42: 74:52
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:74:42: 74:52
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/derives/derive-hygiene.rs:74:42: 74:52
    let _3: i16;                         // in scope 0 at ui/derives/derive-hygiene.rs:74:42: 74:52
    let mut _4: &NON_MODULE::W;          // in scope 0 at ui/derives/derive-hygiene.rs:74:42: 74:52
    let mut _6: &NON_MODULE::W;          // in scope 0 at ui/derives/derive-hygiene.rs:74:42: 74:52
    let mut _7: &i16;                    // in scope 0 at ui/derives/derive-hygiene.rs:74:42: 74:52
    let _8: &i16;                        // in scope 0 at ui/derives/derive-hygiene.rs:74:42: 74:52
    let mut _9: &i16;                    // in scope 0 at ui/derives/derive-hygiene.rs:74:42: 74:52
    let _10: &i16;                       // in scope 0 at ui/derives/derive-hygiene.rs:74:42: 74:52
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/derives/derive-hygiene.rs:74:42: 74:52
        let _5: i16;                     // in scope 1 at ui/derives/derive-hygiene.rs:74:42: 74:52
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/derives/derive-hygiene.rs:74:42: 74:52
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:74:42: 74:52
        _3 = discriminant((*_4));        // scope 0 at ui/derives/derive-hygiene.rs:74:42: 74:52
        _6 = _2;                         // scope 1 at ui/derives/derive-hygiene.rs:74:42: 74:52
        _5 = discriminant((*_6));        // scope 1 at ui/derives/derive-hygiene.rs:74:42: 74:52
        _8 = &_3;                        // scope 2 at ui/derives/derive-hygiene.rs:74:42: 74:52
        _7 = _8;                         // scope 2 at ui/derives/derive-hygiene.rs:74:42: 74:52
        _10 = &_5;                       // scope 2 at ui/derives/derive-hygiene.rs:74:42: 74:52
        _9 = _10;                        // scope 2 at ui/derives/derive-hygiene.rs:74:42: 74:52
        _0 = <i16 as PartialOrd>::partial_cmp(move _7, move _9) -> bb1; // scope 2 at ui/derives/derive-hygiene.rs:74:42: 74:52
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:74:42: 74:52
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a i16, &'b i16) -> Option<std::cmp::Ordering> {<i16 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:74:52: 74:52
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:74:54: 74:57>::cmp(_1: &NON_MODULE::W, _2: &NON_MODULE::W) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:74:54: 74:57
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:74:54: 74:57
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/derives/derive-hygiene.rs:74:54: 74:57
    let _3: i16;                         // in scope 0 at ui/derives/derive-hygiene.rs:74:54: 74:57
    let mut _4: &NON_MODULE::W;          // in scope 0 at ui/derives/derive-hygiene.rs:74:54: 74:57
    let mut _6: &NON_MODULE::W;          // in scope 0 at ui/derives/derive-hygiene.rs:74:54: 74:57
    let mut _7: &i16;                    // in scope 0 at ui/derives/derive-hygiene.rs:74:54: 74:57
    let _8: &i16;                        // in scope 0 at ui/derives/derive-hygiene.rs:74:54: 74:57
    let mut _9: &i16;                    // in scope 0 at ui/derives/derive-hygiene.rs:74:54: 74:57
    let _10: &i16;                       // in scope 0 at ui/derives/derive-hygiene.rs:74:54: 74:57
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/derives/derive-hygiene.rs:74:54: 74:57
        let _5: i16;                     // in scope 1 at ui/derives/derive-hygiene.rs:74:54: 74:57
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/derives/derive-hygiene.rs:74:54: 74:57
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:74:54: 74:57
        _3 = discriminant((*_4));        // scope 0 at ui/derives/derive-hygiene.rs:74:54: 74:57
        _6 = _2;                         // scope 1 at ui/derives/derive-hygiene.rs:74:54: 74:57
        _5 = discriminant((*_6));        // scope 1 at ui/derives/derive-hygiene.rs:74:54: 74:57
        _8 = &_3;                        // scope 2 at ui/derives/derive-hygiene.rs:74:54: 74:57
        _7 = _8;                         // scope 2 at ui/derives/derive-hygiene.rs:74:54: 74:57
        _10 = &_5;                       // scope 2 at ui/derives/derive-hygiene.rs:74:54: 74:57
        _9 = _10;                        // scope 2 at ui/derives/derive-hygiene.rs:74:54: 74:57
        _0 = <i16 as Ord>::cmp(move _7, move _9) -> bb1; // scope 2 at ui/derives/derive-hygiene.rs:74:54: 74:57
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:74:54: 74:57
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a i16, &'b i16) -> std::cmp::Ordering {<i16 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:74:57: 74:57
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:74:59: 74:64>::fmt(_1: &NON_MODULE::W, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:74:59: 74:64
    debug f => _2;                       // in scope 0 at ui/derives/derive-hygiene.rs:74:59: 74:64
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/derives/derive-hygiene.rs:74:59: 74:64
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/derives/derive-hygiene.rs:74:59: 74:64
    let mut _4: &str;                    // in scope 0 at ui/derives/derive-hygiene.rs:74:59: 74:64
    let mut _5: i16;                     // in scope 0 at ui/derives/derive-hygiene.rs:74:59: 74:64
    let _6: &str;                        // in scope 0 at ui/derives/derive-hygiene.rs:74:59: 74:64
    let _7: &str;                        // in scope 0 at ui/derives/derive-hygiene.rs:74:59: 74:64

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/derives/derive-hygiene.rs:74:59: 74:64
        _5 = discriminant((*_1));        // scope 0 at ui/derives/derive-hygiene.rs:74:59: 74:64
        switchInt(move _5) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/derives/derive-hygiene.rs:74:59: 74:64
    }

    bb1: {
        _7 = const "B";                  // scope 0 at ui/derives/derive-hygiene.rs:74:59: 74:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:74:59: 74:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _7;                         // scope 0 at ui/derives/derive-hygiene.rs:74:59: 74:64
        goto -> bb4;                     // scope 0 at ui/derives/derive-hygiene.rs:74:63: 74:64
    }

    bb2: {
        unreachable;                     // scope 0 at ui/derives/derive-hygiene.rs:74:59: 74:64
    }

    bb3: {
        _6 = const "A";                  // scope 0 at ui/derives/derive-hygiene.rs:74:59: 74:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:74:59: 74:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _6;                         // scope 0 at ui/derives/derive-hygiene.rs:74:59: 74:64
        goto -> bb4;                     // scope 0 at ui/derives/derive-hygiene.rs:74:63: 74:64
    }

    bb4: {
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb5; // scope 0 at ui/derives/derive-hygiene.rs:74:59: 74:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:74:59: 74:64
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:74:64: 74:64
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:74:66: 74:70>::hash(_1: &NON_MODULE::W, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:74:66: 74:70
    debug state => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:74:66: 74:70
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:74:66: 74:70
    let _3: i16;                         // in scope 0 at ui/derives/derive-hygiene.rs:74:66: 74:70
    let mut _4: &NON_MODULE::W;          // in scope 0 at ui/derives/derive-hygiene.rs:74:66: 74:70
    let mut _5: &i16;                    // in scope 0 at ui/derives/derive-hygiene.rs:74:66: 74:70
    let _6: &i16;                        // in scope 0 at ui/derives/derive-hygiene.rs:74:66: 74:70
    let mut _7: &mut __H;                // in scope 0 at ui/derives/derive-hygiene.rs:74:66: 74:70
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/derives/derive-hygiene.rs:74:66: 74:70
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:74:66: 74:70
        _3 = discriminant((*_4));        // scope 0 at ui/derives/derive-hygiene.rs:74:66: 74:70
        _6 = &_3;                        // scope 1 at ui/derives/derive-hygiene.rs:74:66: 74:70
        _5 = _6;                         // scope 1 at ui/derives/derive-hygiene.rs:74:66: 74:70
        _7 = &mut (*_2);                 // scope 1 at ui/derives/derive-hygiene.rs:74:66: 74:70
        _0 = <i16 as Hash>::hash::<__H>(move _5, move _7) -> bb1; // scope 1 at ui/derives/derive-hygiene.rs:74:66: 74:70
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:74:66: 74:70
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a i16, &'b mut __H) {<i16 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:74:70: 74:70
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:77:20: 77:25>::clone(_1: &NON_MODULE::X<A>) -> NON_MODULE::X<A> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:77:20: 77:25
    let mut _0: NON_MODULE::X<A>;        // return place in scope 0 at ui/derives/derive-hygiene.rs:77:20: 77:25
    let mut _2: A;                       // in scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
    let mut _3: &A;                      // in scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
    let _4: &A;                          // in scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13

    bb0: {
        _4 = &((*_1).0: A);              // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
        _3 = _4;                         // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
        _2 = <A as Clone>::clone(move _3) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:79:9: 79:13
                                         // + literal: Const { ty: for<'a> fn(&'a A) -> A {<A as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = NON_MODULE::X::<A> { A: move _2 }; // scope 0 at ui/derives/derive-hygiene.rs:77:20: 77:25
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:77:25: 77:25
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:77:27: 77:36>::eq(_1: &NON_MODULE::X<A>, _2: &NON_MODULE::X<A>) -> bool {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:77:27: 77:36
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:77:27: 77:36
    let mut _0: bool;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:77:27: 77:36
    let mut _3: &A;                      // in scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
    let mut _4: &A;                      // in scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13

    bb0: {
        _3 = &((*_1).0: A);              // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
        _4 = &((*_2).0: A);              // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
        _0 = <A as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:79:9: 79:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a A, &'b A) -> bool {<A as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:77:36: 77:36
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:77:38: 77:40>::assert_receiver_is_total_eq(_1: &NON_MODULE::X<A>) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:77:38: 77:40
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:77:38: 77:40
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:77:40: 77:40
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:77:42: 77:52>::partial_cmp(_1: &NON_MODULE::X<A>, _2: &NON_MODULE::X<A>) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:77:42: 77:52
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:77:42: 77:52
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/derives/derive-hygiene.rs:77:42: 77:52
    let mut _3: &A;                      // in scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
    let _4: &A;                          // in scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
    let mut _5: &A;                      // in scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
    let _6: &A;                          // in scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13

    bb0: {
        _4 = &((*_1).0: A);              // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
        _3 = _4;                         // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
        _6 = &((*_2).0: A);              // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
        _5 = _6;                         // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
        _0 = <A as PartialOrd>::partial_cmp(move _3, move _5) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:79:9: 79:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a A, &'b A) -> Option<std::cmp::Ordering> {<A as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:77:52: 77:52
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:77:54: 77:57>::cmp(_1: &NON_MODULE::X<A>, _2: &NON_MODULE::X<A>) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:77:54: 77:57
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:77:54: 77:57
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/derives/derive-hygiene.rs:77:54: 77:57
    let mut _3: &A;                      // in scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
    let _4: &A;                          // in scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
    let mut _5: &A;                      // in scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
    let _6: &A;                          // in scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13

    bb0: {
        _4 = &((*_1).0: A);              // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
        _3 = _4;                         // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
        _6 = &((*_2).0: A);              // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
        _5 = _6;                         // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
        _0 = <A as Ord>::cmp(move _3, move _5) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:79:9: 79:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a A, &'b A) -> std::cmp::Ordering {<A as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:77:57: 77:57
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:77:59: 77:64>::fmt(_1: &NON_MODULE::X<A>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:77:59: 77:64
    debug f => _2;                       // in scope 0 at ui/derives/derive-hygiene.rs:77:59: 77:64
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/derives/derive-hygiene.rs:77:59: 77:64
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/derives/derive-hygiene.rs:77:59: 77:64
    let mut _4: &str;                    // in scope 0 at ui/derives/derive-hygiene.rs:77:59: 77:64
    let _5: &str;                        // in scope 0 at ui/derives/derive-hygiene.rs:77:59: 77:64
    let mut _6: &str;                    // in scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
    let _7: &str;                        // in scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
    let mut _9: &&A;                     // in scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
    let _10: &&A;                        // in scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
    let _11: &A;                         // in scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/derives/derive-hygiene.rs:77:59: 77:64
        _5 = const "X";                  // scope 0 at ui/derives/derive-hygiene.rs:77:59: 77:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:77:59: 77:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/derives/derive-hygiene.rs:77:59: 77:64
        _7 = const "A";                  // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:79:9: 79:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
        _11 = &((*_1).0: A);             // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
        _10 = &_11;                      // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
        _9 = _10;                        // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _3, move _4, move _6, move _8) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:77:59: 77:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:77:59: 77:64
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:77:64: 77:64
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:77:66: 77:73>::default() -> NON_MODULE::X<A> {
    let mut _0: NON_MODULE::X<A>;        // return place in scope 0 at ui/derives/derive-hygiene.rs:77:66: 77:73
    let mut _1: A;                       // in scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13

    bb0: {
        _1 = <A as Default>::default() -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:79:9: 79:13
                                         // + literal: Const { ty: fn() -> A {<A as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = NON_MODULE::X::<A> { A: move _1 }; // scope 0 at ui/derives/derive-hygiene.rs:77:66: 77:73
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:77:73: 77:73
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:77:75: 77:79>::hash(_1: &NON_MODULE::X<A>, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:77:75: 77:79
    debug state => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:77:75: 77:79
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:77:75: 77:79
    let mut _3: &A;                      // in scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
    let _4: &A;                          // in scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
    let mut _5: &mut __H;                // in scope 0 at ui/derives/derive-hygiene.rs:77:75: 77:79

    bb0: {
        _4 = &((*_1).0: A);              // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
        _3 = _4;                         // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
        _5 = &mut (*_2);                 // scope 0 at ui/derives/derive-hygiene.rs:77:75: 77:79
        _0 = <A as Hash>::hash::<__H>(move _3, move _5) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:79:9: 79:13
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:79:9: 79:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a A, &'b mut __H) {<A as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:77:79: 77:79
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:82:20: 82:25>::clone(_1: &NON_MODULE::Y<B>) -> NON_MODULE::Y<B> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:82:20: 82:25
    let mut _0: NON_MODULE::Y<B>;        // return place in scope 0 at ui/derives/derive-hygiene.rs:82:20: 82:25
    let mut _2: B;                       // in scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
    let mut _3: &B;                      // in scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
    let _4: &B;                          // in scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18

    bb0: {
        _4 = &((*_1).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
        _3 = _4;                         // scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
        _2 = <B as Clone>::clone(move _3) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:83:17: 83:18
                                         // + literal: Const { ty: for<'a> fn(&'a B) -> B {<B as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = NON_MODULE::Y::<B>(move _2); // scope 0 at ui/derives/derive-hygiene.rs:82:20: 82:25
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:82:25: 82:25
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:82:27: 82:36>::eq(_1: &NON_MODULE::Y<B>, _2: &NON_MODULE::Y<B>) -> bool {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:82:27: 82:36
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:82:27: 82:36
    let mut _0: bool;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:82:27: 82:36
    let mut _3: &B;                      // in scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
    let mut _4: &B;                      // in scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18

    bb0: {
        _3 = &((*_1).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
        _4 = &((*_2).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
        _0 = <B as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:83:17: 83:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a B, &'b B) -> bool {<B as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:82:36: 82:36
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:82:38: 82:40>::assert_receiver_is_total_eq(_1: &NON_MODULE::Y<B>) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:82:38: 82:40
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:82:38: 82:40
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:82:40: 82:40
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:82:42: 82:52>::partial_cmp(_1: &NON_MODULE::Y<B>, _2: &NON_MODULE::Y<B>) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:82:42: 82:52
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:82:42: 82:52
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/derives/derive-hygiene.rs:82:42: 82:52
    let mut _3: &B;                      // in scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
    let _4: &B;                          // in scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
    let mut _5: &B;                      // in scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
    let _6: &B;                          // in scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18

    bb0: {
        _4 = &((*_1).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
        _3 = _4;                         // scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
        _6 = &((*_2).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
        _5 = _6;                         // scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
        _0 = <B as PartialOrd>::partial_cmp(move _3, move _5) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:83:17: 83:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a B, &'b B) -> Option<std::cmp::Ordering> {<B as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:82:52: 82:52
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:82:54: 82:57>::cmp(_1: &NON_MODULE::Y<B>, _2: &NON_MODULE::Y<B>) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:82:54: 82:57
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:82:54: 82:57
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/derives/derive-hygiene.rs:82:54: 82:57
    let mut _3: &B;                      // in scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
    let _4: &B;                          // in scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
    let mut _5: &B;                      // in scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
    let _6: &B;                          // in scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18

    bb0: {
        _4 = &((*_1).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
        _3 = _4;                         // scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
        _6 = &((*_2).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
        _5 = _6;                         // scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
        _0 = <B as Ord>::cmp(move _3, move _5) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:83:17: 83:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a B, &'b B) -> std::cmp::Ordering {<B as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:82:57: 82:57
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:82:59: 82:64>::fmt(_1: &NON_MODULE::Y<B>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:82:59: 82:64
    debug f => _2;                       // in scope 0 at ui/derives/derive-hygiene.rs:82:59: 82:64
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/derives/derive-hygiene.rs:82:59: 82:64
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/derives/derive-hygiene.rs:82:59: 82:64
    let mut _4: &str;                    // in scope 0 at ui/derives/derive-hygiene.rs:82:59: 82:64
    let _5: &str;                        // in scope 0 at ui/derives/derive-hygiene.rs:82:59: 82:64
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
    let mut _7: &&B;                     // in scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
    let _8: &&B;                         // in scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
    let _9: &B;                          // in scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/derives/derive-hygiene.rs:82:59: 82:64
        _5 = const "Y";                  // scope 0 at ui/derives/derive-hygiene.rs:82:59: 82:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:82:59: 82:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/derives/derive-hygiene.rs:82:59: 82:64
        _9 = &((*_1).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
        _8 = &_9;                        // scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
        _7 = _8;                         // scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:82:59: 82:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:82:59: 82:64
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:82:64: 82:64
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:82:66: 82:73>::default() -> NON_MODULE::Y<B> {
    let mut _0: NON_MODULE::Y<B>;        // return place in scope 0 at ui/derives/derive-hygiene.rs:82:66: 82:73
    let mut _1: B;                       // in scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18

    bb0: {
        _1 = <B as Default>::default() -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:83:17: 83:18
                                         // + literal: Const { ty: fn() -> B {<B as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = NON_MODULE::Y::<B>(move _1); // scope 0 at ui/derives/derive-hygiene.rs:82:66: 82:73
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:82:73: 82:73
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:82:75: 82:79>::hash(_1: &NON_MODULE::Y<B>, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:82:75: 82:79
    debug state => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:82:75: 82:79
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:82:75: 82:79
    let mut _3: &B;                      // in scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
    let _4: &B;                          // in scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
    let mut _5: &mut __H;                // in scope 0 at ui/derives/derive-hygiene.rs:82:75: 82:79

    bb0: {
        _4 = &((*_1).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
        _3 = _4;                         // scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
        _5 = &mut (*_2);                 // scope 0 at ui/derives/derive-hygiene.rs:82:75: 82:79
        _0 = <B as Hash>::hash::<__H>(move _3, move _5) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:83:17: 83:18
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:83:17: 83:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a B, &'b mut __H) {<B as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:82:79: 82:79
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:87:20: 87:25>::clone(_1: &NON_MODULE::Z<C>) -> NON_MODULE::Z<C> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:87:20: 87:25
    let mut _0: NON_MODULE::Z<C>;        // return place in scope 0 at ui/derives/derive-hygiene.rs:87:20: 87:25
    let mut _2: isize;                   // in scope 0 at ui/derives/derive-hygiene.rs:87:20: 87:25
    let _3: &C;                          // in scope 0 at ui/derives/derive-hygiene.rs:89:11: 89:12
    let mut _4: C;                       // in scope 0 at ui/derives/derive-hygiene.rs:89:11: 89:12
    let mut _5: &C;                      // in scope 0 at ui/derives/derive-hygiene.rs:89:11: 89:12
    let _6: &C;                          // in scope 0 at ui/derives/derive-hygiene.rs:90:13: 90:17
    let mut _7: C;                       // in scope 0 at ui/derives/derive-hygiene.rs:90:13: 90:17
    let mut _8: &C;                      // in scope 0 at ui/derives/derive-hygiene.rs:90:13: 90:17
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at ui/derives/derive-hygiene.rs:89:11: 89:12
    }
    scope 2 {
        debug __self_0 => _6;            // in scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at ui/derives/derive-hygiene.rs:87:20: 87:25
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/derives/derive-hygiene.rs:87:20: 87:25
    }

    bb1: {
        _6 = &(((*_1) as B).0: C);       // scope 0 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _8 = _6;                         // scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _7 = <C as Clone>::clone(move _8) -> bb5; // scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:90:13: 90:17
                                         // + literal: Const { ty: for<'a> fn(&'a C) -> C {<C as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/derives/derive-hygiene.rs:87:20: 87:25
    }

    bb3: {
        _3 = &(((*_1) as C).0: C);       // scope 0 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _5 = _3;                         // scope 1 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _4 = <C as Clone>::clone(move _5) -> bb4; // scope 1 at ui/derives/derive-hygiene.rs:89:11: 89:12
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:89:11: 89:12
                                         // + literal: Const { ty: for<'a> fn(&'a C) -> C {<C as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = NON_MODULE::Z::<C>::C(move _4); // scope 1 at ui/derives/derive-hygiene.rs:87:20: 87:25
        goto -> bb6;                     // scope 0 at ui/derives/derive-hygiene.rs:87:24: 87:25
    }

    bb5: {
        _0 = NON_MODULE::Z::<C>::B { C: move _7 }; // scope 2 at ui/derives/derive-hygiene.rs:87:20: 87:25
        goto -> bb6;                     // scope 0 at ui/derives/derive-hygiene.rs:87:24: 87:25
    }

    bb6: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:87:25: 87:25
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:87:27: 87:36>::eq(_1: &NON_MODULE::Z<C>, _2: &NON_MODULE::Z<C>) -> bool {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
    let mut _0: bool;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
    let _3: isize;                       // in scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
    let mut _4: &NON_MODULE::Z<C>;       // in scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
    let mut _6: &NON_MODULE::Z<C>;       // in scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
    let mut _7: bool;                    // in scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
    let mut _8: isize;                   // in scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
    let mut _9: isize;                   // in scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
    let mut _10: bool;                   // in scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
    let mut _11: (&NON_MODULE::Z<C>, &NON_MODULE::Z<C>); // in scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
    let mut _12: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
    let mut _13: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
    let mut _14: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
    let mut _15: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
    let mut _16: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
    let mut _19: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:89:11: 89:12
    let mut _20: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:89:11: 89:12
    let mut _23: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:90:13: 90:17
    let mut _24: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:90:13: 90:17
    let mut _25: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
    let mut _26: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
    let mut _27: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
    let mut _28: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
    let mut _29: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
    let mut _30: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
    let mut _31: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/derives/derive-hygiene.rs:87:27: 87:36
        let _5: isize;                   // in scope 1 at ui/derives/derive-hygiene.rs:87:27: 87:36
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/derives/derive-hygiene.rs:87:27: 87:36
            let _17: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:89:11: 89:12
            let _18: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:89:11: 89:12
            let _21: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
            let _22: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
            scope 3 {
                debug __self_0 => _17;   // in scope 3 at ui/derives/derive-hygiene.rs:89:11: 89:12
                debug __arg1_0 => _18;   // in scope 3 at ui/derives/derive-hygiene.rs:89:11: 89:12
            }
            scope 4 {
                debug __self_0 => _21;   // in scope 4 at ui/derives/derive-hygiene.rs:90:13: 90:17
                debug __arg1_0 => _22;   // in scope 4 at ui/derives/derive-hygiene.rs:90:13: 90:17
            }
            scope 5 {
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
        _3 = discriminant((*_4));        // scope 0 at ui/derives/derive-hygiene.rs:87:27: 87:36
        _6 = _2;                         // scope 1 at ui/derives/derive-hygiene.rs:87:27: 87:36
        _5 = discriminant((*_6));        // scope 1 at ui/derives/derive-hygiene.rs:87:27: 87:36
        _8 = _3;                         // scope 2 at ui/derives/derive-hygiene.rs:87:27: 87:36
        _9 = _5;                         // scope 2 at ui/derives/derive-hygiene.rs:87:27: 87:36
        _7 = Eq(move _8, move _9);       // scope 2 at ui/derives/derive-hygiene.rs:87:27: 87:36
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/derives/derive-hygiene.rs:87:27: 87:36
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/derives/derive-hygiene.rs:87:27: 87:36
        goto -> bb3;                     // scope 2 at ui/derives/derive-hygiene.rs:87:27: 87:36
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/derives/derive-hygiene.rs:87:27: 87:36
        _13 = _2;                        // scope 2 at ui/derives/derive-hygiene.rs:87:27: 87:36
        _11 = (move _12, move _13);      // scope 2 at ui/derives/derive-hygiene.rs:87:27: 87:36
        _25 = deref_copy (_11.0: &NON_MODULE::Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:87:27: 87:36
        _16 = discriminant((*_25));      // scope 2 at ui/derives/derive-hygiene.rs:87:27: 87:36
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 2 at ui/derives/derive-hygiene.rs:87:27: 87:36
    }

    bb3: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:87:36: 87:36
    }

    bb4: {
        _26 = deref_copy (_11.1: &NON_MODULE::Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:87:27: 87:36
        _14 = discriminant((*_26));      // scope 2 at ui/derives/derive-hygiene.rs:87:27: 87:36
        switchInt(move _14) -> [0: bb7, otherwise: bb5]; // scope 2 at ui/derives/derive-hygiene.rs:87:27: 87:36
    }

    bb5: {
        unreachable;                     // scope 5 at ui/derives/derive-hygiene.rs:87:27: 87:36
    }

    bb6: {
        _27 = deref_copy (_11.1: &NON_MODULE::Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:87:27: 87:36
        _15 = discriminant((*_27));      // scope 2 at ui/derives/derive-hygiene.rs:87:27: 87:36
        switchInt(move _15) -> [1: bb8, otherwise: bb5]; // scope 2 at ui/derives/derive-hygiene.rs:87:27: 87:36
    }

    bb7: {
        _28 = deref_copy (_11.0: &NON_MODULE::Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _17 = &(((*_28) as C).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _29 = deref_copy (_11.1: &NON_MODULE::Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _18 = &(((*_29) as C).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _19 = _17;                       // scope 3 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _20 = _18;                       // scope 3 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _10 = <C as PartialEq>::eq(move _19, move _20) -> bb9; // scope 3 at ui/derives/derive-hygiene.rs:89:11: 89:12
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:89:11: 89:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a C, &'b C) -> bool {<C as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _30 = deref_copy (_11.0: &NON_MODULE::Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _21 = &(((*_30) as B).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _31 = deref_copy (_11.1: &NON_MODULE::Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _22 = &(((*_31) as B).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _23 = _21;                       // scope 4 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _24 = _22;                       // scope 4 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _10 = <C as PartialEq>::eq(move _23, move _24) -> bb9; // scope 4 at ui/derives/derive-hygiene.rs:90:13: 90:17
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:90:13: 90:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a C, &'b C) -> bool {<C as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _0 = move _10;                   // scope 2 at ui/derives/derive-hygiene.rs:87:27: 87:36
        goto -> bb3;                     // scope 2 at ui/derives/derive-hygiene.rs:87:27: 87:36
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:87:38: 87:40>::assert_receiver_is_total_eq(_1: &NON_MODULE::Z<C>) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:87:38: 87:40
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:87:38: 87:40
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:87:40: 87:40
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:87:42: 87:52>::partial_cmp(_1: &NON_MODULE::Z<C>, _2: &NON_MODULE::Z<C>) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
    let _3: isize;                       // in scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
    let mut _4: &NON_MODULE::Z<C>;       // in scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
    let mut _6: &NON_MODULE::Z<C>;       // in scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
    let mut _7: (&NON_MODULE::Z<C>, &NON_MODULE::Z<C>); // in scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
    let mut _8: &NON_MODULE::Z<C>;       // in scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
    let mut _9: &NON_MODULE::Z<C>;       // in scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
    let mut _10: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
    let mut _11: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
    let mut _12: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
    let mut _15: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:89:11: 89:12
    let mut _16: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:89:11: 89:12
    let mut _19: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:90:13: 90:17
    let mut _20: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:90:13: 90:17
    let mut _21: &isize;                 // in scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
    let _22: &isize;                     // in scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
    let mut _23: &isize;                 // in scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
    let _24: &isize;                     // in scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
    let mut _25: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
    let mut _26: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
    let mut _27: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
    let mut _28: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
    let mut _29: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
    let mut _30: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
    let mut _31: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/derives/derive-hygiene.rs:87:42: 87:52
        let _5: isize;                   // in scope 1 at ui/derives/derive-hygiene.rs:87:42: 87:52
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/derives/derive-hygiene.rs:87:42: 87:52
            let _13: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:89:11: 89:12
            let _14: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:89:11: 89:12
            let _17: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
            let _18: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
            scope 3 {
                debug __self_0 => _13;   // in scope 3 at ui/derives/derive-hygiene.rs:89:11: 89:12
                debug __arg1_0 => _14;   // in scope 3 at ui/derives/derive-hygiene.rs:89:11: 89:12
            }
            scope 4 {
                debug __self_0 => _17;   // in scope 4 at ui/derives/derive-hygiene.rs:90:13: 90:17
                debug __arg1_0 => _18;   // in scope 4 at ui/derives/derive-hygiene.rs:90:13: 90:17
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
        _3 = discriminant((*_4));        // scope 0 at ui/derives/derive-hygiene.rs:87:42: 87:52
        _6 = _2;                         // scope 1 at ui/derives/derive-hygiene.rs:87:42: 87:52
        _5 = discriminant((*_6));        // scope 1 at ui/derives/derive-hygiene.rs:87:42: 87:52
        _8 = _1;                         // scope 2 at ui/derives/derive-hygiene.rs:87:42: 87:52
        _9 = _2;                         // scope 2 at ui/derives/derive-hygiene.rs:87:42: 87:52
        _7 = (move _8, move _9);         // scope 2 at ui/derives/derive-hygiene.rs:87:42: 87:52
        _25 = deref_copy (_7.0: &NON_MODULE::Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:87:42: 87:52
        _12 = discriminant((*_25));      // scope 2 at ui/derives/derive-hygiene.rs:87:42: 87:52
        switchInt(move _12) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 2 at ui/derives/derive-hygiene.rs:87:42: 87:52
    }

    bb1: {
        _26 = deref_copy (_7.1: &NON_MODULE::Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:87:42: 87:52
        _10 = discriminant((*_26));      // scope 2 at ui/derives/derive-hygiene.rs:87:42: 87:52
        switchInt(move _10) -> [0: bb4, otherwise: bb2]; // scope 2 at ui/derives/derive-hygiene.rs:87:42: 87:52
    }

    bb2: {
        _22 = &_3;                       // scope 2 at ui/derives/derive-hygiene.rs:87:42: 87:52
        _21 = _22;                       // scope 2 at ui/derives/derive-hygiene.rs:87:42: 87:52
        _24 = &_5;                       // scope 2 at ui/derives/derive-hygiene.rs:87:42: 87:52
        _23 = _24;                       // scope 2 at ui/derives/derive-hygiene.rs:87:42: 87:52
        _0 = <isize as PartialOrd>::partial_cmp(move _21, move _23) -> bb6; // scope 2 at ui/derives/derive-hygiene.rs:87:42: 87:52
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:87:42: 87:52
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b isize) -> Option<std::cmp::Ordering> {<isize as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb3: {
        _27 = deref_copy (_7.1: &NON_MODULE::Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:87:42: 87:52
        _11 = discriminant((*_27));      // scope 2 at ui/derives/derive-hygiene.rs:87:42: 87:52
        switchInt(move _11) -> [1: bb5, otherwise: bb2]; // scope 2 at ui/derives/derive-hygiene.rs:87:42: 87:52
    }

    bb4: {
        _28 = deref_copy (_7.0: &NON_MODULE::Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _13 = &(((*_28) as C).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _29 = deref_copy (_7.1: &NON_MODULE::Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _14 = &(((*_29) as C).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _15 = _13;                       // scope 3 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _16 = _14;                       // scope 3 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _0 = <C as PartialOrd>::partial_cmp(move _15, move _16) -> bb6; // scope 3 at ui/derives/derive-hygiene.rs:89:11: 89:12
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:89:11: 89:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a C, &'b C) -> Option<std::cmp::Ordering> {<C as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb5: {
        _30 = deref_copy (_7.0: &NON_MODULE::Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _17 = &(((*_30) as B).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _31 = deref_copy (_7.1: &NON_MODULE::Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _18 = &(((*_31) as B).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _19 = _17;                       // scope 4 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _20 = _18;                       // scope 4 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _0 = <C as PartialOrd>::partial_cmp(move _19, move _20) -> bb6; // scope 4 at ui/derives/derive-hygiene.rs:90:13: 90:17
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:90:13: 90:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a C, &'b C) -> Option<std::cmp::Ordering> {<C as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:87:52: 87:52
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:87:54: 87:57>::cmp(_1: &NON_MODULE::Z<C>, _2: &NON_MODULE::Z<C>) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    let _3: isize;                       // in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    let mut _4: &NON_MODULE::Z<C>;       // in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    let mut _6: &NON_MODULE::Z<C>;       // in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    let mut _7: std::cmp::Ordering;      // in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    let mut _8: &isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    let _9: &isize;                      // in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    let mut _10: &isize;                 // in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    let _11: &isize;                     // in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    let mut _12: i8;                     // in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    let mut _13: (&NON_MODULE::Z<C>, &NON_MODULE::Z<C>); // in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    let mut _14: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    let mut _15: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    let mut _16: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    let mut _17: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    let mut _18: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    let mut _21: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:89:11: 89:12
    let mut _22: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:89:11: 89:12
    let mut _25: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:90:13: 90:17
    let mut _26: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:90:13: 90:17
    let mut _28: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    let mut _29: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    let mut _30: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    let mut _31: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    let mut _32: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    let mut _33: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    let mut _34: &NON_MODULE::Z<C>;      // in scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/derives/derive-hygiene.rs:87:54: 87:57
        let _5: isize;                   // in scope 1 at ui/derives/derive-hygiene.rs:87:54: 87:57
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/derives/derive-hygiene.rs:87:54: 87:57
            let _19: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:89:11: 89:12
            let _20: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:89:11: 89:12
            let _23: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
            let _24: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
            let _27: std::cmp::Ordering; // in scope 2 at ui/derives/derive-hygiene.rs:87:54: 87:57
            scope 3 {
                debug __self_0 => _19;   // in scope 3 at ui/derives/derive-hygiene.rs:89:11: 89:12
                debug __arg1_0 => _20;   // in scope 3 at ui/derives/derive-hygiene.rs:89:11: 89:12
            }
            scope 4 {
                debug __self_0 => _23;   // in scope 4 at ui/derives/derive-hygiene.rs:90:13: 90:17
                debug __arg1_0 => _24;   // in scope 4 at ui/derives/derive-hygiene.rs:90:13: 90:17
            }
            scope 5 {
            }
            scope 6 {
                debug cmp => _27;        // in scope 6 at ui/derives/derive-hygiene.rs:87:54: 87:57
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
        _3 = discriminant((*_4));        // scope 0 at ui/derives/derive-hygiene.rs:87:54: 87:57
        _6 = _2;                         // scope 1 at ui/derives/derive-hygiene.rs:87:54: 87:57
        _5 = discriminant((*_6));        // scope 1 at ui/derives/derive-hygiene.rs:87:54: 87:57
        _9 = &_3;                        // scope 2 at ui/derives/derive-hygiene.rs:87:54: 87:57
        _8 = _9;                         // scope 2 at ui/derives/derive-hygiene.rs:87:54: 87:57
        _11 = &_5;                       // scope 2 at ui/derives/derive-hygiene.rs:87:54: 87:57
        _10 = _11;                       // scope 2 at ui/derives/derive-hygiene.rs:87:54: 87:57
        _7 = <isize as Ord>::cmp(move _8, move _10) -> bb1; // scope 2 at ui/derives/derive-hygiene.rs:87:54: 87:57
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:87:54: 87:57
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b isize) -> std::cmp::Ordering {<isize as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = discriminant(_7);          // scope 2 at ui/derives/derive-hygiene.rs:87:54: 87:57
        switchInt(move _12) -> [0: bb3, otherwise: bb2]; // scope 2 at ui/derives/derive-hygiene.rs:87:54: 87:57
    }

    bb2: {
        _27 = _7;                        // scope 2 at ui/derives/derive-hygiene.rs:87:54: 87:57
        _0 = _27;                        // scope 6 at ui/derives/derive-hygiene.rs:87:54: 87:57
        goto -> bb9;                     // scope 2 at ui/derives/derive-hygiene.rs:87:56: 87:57
    }

    bb3: {
        _14 = _1;                        // scope 2 at ui/derives/derive-hygiene.rs:87:54: 87:57
        _15 = _2;                        // scope 2 at ui/derives/derive-hygiene.rs:87:54: 87:57
        _13 = (move _14, move _15);      // scope 2 at ui/derives/derive-hygiene.rs:87:54: 87:57
        _28 = deref_copy (_13.0: &NON_MODULE::Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:87:54: 87:57
        _18 = discriminant((*_28));      // scope 2 at ui/derives/derive-hygiene.rs:87:54: 87:57
        switchInt(move _18) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 2 at ui/derives/derive-hygiene.rs:87:54: 87:57
    }

    bb4: {
        _29 = deref_copy (_13.1: &NON_MODULE::Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:87:54: 87:57
        _16 = discriminant((*_29));      // scope 2 at ui/derives/derive-hygiene.rs:87:54: 87:57
        switchInt(move _16) -> [0: bb7, otherwise: bb5]; // scope 2 at ui/derives/derive-hygiene.rs:87:54: 87:57
    }

    bb5: {
        unreachable;                     // scope 5 at ui/derives/derive-hygiene.rs:87:54: 87:57
    }

    bb6: {
        _30 = deref_copy (_13.1: &NON_MODULE::Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:87:54: 87:57
        _17 = discriminant((*_30));      // scope 2 at ui/derives/derive-hygiene.rs:87:54: 87:57
        switchInt(move _17) -> [1: bb8, otherwise: bb5]; // scope 2 at ui/derives/derive-hygiene.rs:87:54: 87:57
    }

    bb7: {
        _31 = deref_copy (_13.0: &NON_MODULE::Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _19 = &(((*_31) as C).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _32 = deref_copy (_13.1: &NON_MODULE::Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _20 = &(((*_32) as C).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _21 = _19;                       // scope 3 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _22 = _20;                       // scope 3 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _0 = <C as Ord>::cmp(move _21, move _22) -> bb9; // scope 3 at ui/derives/derive-hygiene.rs:89:11: 89:12
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:89:11: 89:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a C, &'b C) -> std::cmp::Ordering {<C as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb8: {
        _33 = deref_copy (_13.0: &NON_MODULE::Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _23 = &(((*_33) as B).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _34 = deref_copy (_13.1: &NON_MODULE::Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _24 = &(((*_34) as B).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _25 = _23;                       // scope 4 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _26 = _24;                       // scope 4 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _0 = <C as Ord>::cmp(move _25, move _26) -> bb9; // scope 4 at ui/derives/derive-hygiene.rs:90:13: 90:17
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:90:13: 90:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a C, &'b C) -> std::cmp::Ordering {<C as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:87:57: 87:57
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:87:59: 87:64>::fmt(_1: &NON_MODULE::Z<C>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:87:59: 87:64
    debug f => _2;                       // in scope 0 at ui/derives/derive-hygiene.rs:87:59: 87:64
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/derives/derive-hygiene.rs:87:59: 87:64
    let mut _3: isize;                   // in scope 0 at ui/derives/derive-hygiene.rs:87:59: 87:64
    let _4: &C;                          // in scope 0 at ui/derives/derive-hygiene.rs:89:11: 89:12
    let mut _5: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/derives/derive-hygiene.rs:87:59: 87:64
    let mut _6: &str;                    // in scope 0 at ui/derives/derive-hygiene.rs:87:59: 87:64
    let _7: &str;                        // in scope 0 at ui/derives/derive-hygiene.rs:87:59: 87:64
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/derives/derive-hygiene.rs:89:11: 89:12
    let mut _9: &&C;                     // in scope 0 at ui/derives/derive-hygiene.rs:89:11: 89:12
    let _10: &&C;                        // in scope 0 at ui/derives/derive-hygiene.rs:89:11: 89:12
    let _11: &C;                         // in scope 0 at ui/derives/derive-hygiene.rs:90:13: 90:17
    let mut _12: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/derives/derive-hygiene.rs:87:59: 87:64
    let mut _13: &str;                   // in scope 0 at ui/derives/derive-hygiene.rs:87:59: 87:64
    let _14: &str;                       // in scope 0 at ui/derives/derive-hygiene.rs:87:59: 87:64
    let mut _15: &str;                   // in scope 0 at ui/derives/derive-hygiene.rs:90:13: 90:17
    let _16: &str;                       // in scope 0 at ui/derives/derive-hygiene.rs:90:13: 90:17
    let mut _17: &dyn std::fmt::Debug;   // in scope 0 at ui/derives/derive-hygiene.rs:90:13: 90:17
    let mut _18: &&C;                    // in scope 0 at ui/derives/derive-hygiene.rs:90:13: 90:17
    let _19: &&C;                        // in scope 0 at ui/derives/derive-hygiene.rs:90:13: 90:17
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/derives/derive-hygiene.rs:89:11: 89:12
    }
    scope 2 {
        debug __self_0 => _11;           // in scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/derives/derive-hygiene.rs:87:59: 87:64
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/derives/derive-hygiene.rs:87:59: 87:64
    }

    bb1: {
        _11 = &(((*_1) as B).0: C);      // scope 0 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _12 = &mut (*_2);                // scope 2 at ui/derives/derive-hygiene.rs:87:59: 87:64
        _14 = const "B";                 // scope 2 at ui/derives/derive-hygiene.rs:87:59: 87:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:87:59: 87:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = _14;                       // scope 2 at ui/derives/derive-hygiene.rs:87:59: 87:64
        _16 = const "C";                 // scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:90:13: 90:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _15 = _16;                       // scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _19 = &_11;                      // scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _18 = _19;                       // scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _17 = move _18 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _12, move _13, move _15, move _17) -> bb4; // scope 2 at ui/derives/derive-hygiene.rs:87:59: 87:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:87:59: 87:64
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/derives/derive-hygiene.rs:87:59: 87:64
    }

    bb3: {
        _4 = &(((*_1) as C).0: C);       // scope 0 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _5 = &mut (*_2);                 // scope 1 at ui/derives/derive-hygiene.rs:87:59: 87:64
        _7 = const "C";                  // scope 1 at ui/derives/derive-hygiene.rs:87:59: 87:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:87:59: 87:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 1 at ui/derives/derive-hygiene.rs:87:59: 87:64
        _10 = &_4;                       // scope 1 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _9 = _10;                        // scope 1 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _5, move _6, move _8) -> bb4; // scope 1 at ui/derives/derive-hygiene.rs:87:59: 87:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:87:59: 87:64
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:87:64: 87:64
    }
}

fn NON_MODULE::<impl at ui/derives/derive-hygiene.rs:87:66: 87:70>::hash(_1: &NON_MODULE::Z<C>, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:87:66: 87:70
    debug state => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:87:66: 87:70
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:87:66: 87:70
    let _3: isize;                       // in scope 0 at ui/derives/derive-hygiene.rs:87:66: 87:70
    let mut _4: &NON_MODULE::Z<C>;       // in scope 0 at ui/derives/derive-hygiene.rs:87:66: 87:70
    let _5: ();                          // in scope 0 at ui/derives/derive-hygiene.rs:87:66: 87:70
    let mut _6: &isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:87:66: 87:70
    let _7: &isize;                      // in scope 0 at ui/derives/derive-hygiene.rs:87:66: 87:70
    let mut _8: &mut __H;                // in scope 0 at ui/derives/derive-hygiene.rs:87:66: 87:70
    let mut _9: isize;                   // in scope 0 at ui/derives/derive-hygiene.rs:87:66: 87:70
    let mut _11: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:89:11: 89:12
    let mut _12: &mut __H;               // in scope 0 at ui/derives/derive-hygiene.rs:87:66: 87:70
    let mut _14: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:90:13: 90:17
    let mut _15: &mut __H;               // in scope 0 at ui/derives/derive-hygiene.rs:87:66: 87:70
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/derives/derive-hygiene.rs:87:66: 87:70
        let _10: &C;                     // in scope 1 at ui/derives/derive-hygiene.rs:89:11: 89:12
        let _13: &C;                     // in scope 1 at ui/derives/derive-hygiene.rs:90:13: 90:17
        scope 2 {
            debug __self_0 => _10;       // in scope 2 at ui/derives/derive-hygiene.rs:89:11: 89:12
        }
        scope 3 {
            debug __self_0 => _13;       // in scope 3 at ui/derives/derive-hygiene.rs:90:13: 90:17
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:87:66: 87:70
        _3 = discriminant((*_4));        // scope 0 at ui/derives/derive-hygiene.rs:87:66: 87:70
        _7 = &_3;                        // scope 1 at ui/derives/derive-hygiene.rs:87:66: 87:70
        _6 = _7;                         // scope 1 at ui/derives/derive-hygiene.rs:87:66: 87:70
        _8 = &mut (*_2);                 // scope 1 at ui/derives/derive-hygiene.rs:87:66: 87:70
        _5 = <isize as Hash>::hash::<__H>(move _6, move _8) -> bb1; // scope 1 at ui/derives/derive-hygiene.rs:87:66: 87:70
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:87:66: 87:70
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b mut __H) {<isize as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = discriminant((*_1));        // scope 1 at ui/derives/derive-hygiene.rs:87:66: 87:70
        switchInt(move _9) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 1 at ui/derives/derive-hygiene.rs:87:66: 87:70
    }

    bb2: {
        _13 = &(((*_1) as B).0: C);      // scope 1 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _14 = _13;                       // scope 3 at ui/derives/derive-hygiene.rs:90:13: 90:17
        _15 = &mut (*_2);                // scope 3 at ui/derives/derive-hygiene.rs:87:66: 87:70
        _0 = <C as Hash>::hash::<__H>(move _14, move _15) -> bb5; // scope 3 at ui/derives/derive-hygiene.rs:90:13: 90:17
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:90:13: 90:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a C, &'b mut __H) {<C as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 1 at ui/derives/derive-hygiene.rs:87:66: 87:70
    }

    bb4: {
        _10 = &(((*_1) as C).0: C);      // scope 1 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _11 = _10;                       // scope 2 at ui/derives/derive-hygiene.rs:89:11: 89:12
        _12 = &mut (*_2);                // scope 2 at ui/derives/derive-hygiene.rs:87:66: 87:70
        _0 = <C as Hash>::hash::<__H>(move _11, move _12) -> bb5; // scope 2 at ui/derives/derive-hygiene.rs:89:11: 89:12
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:89:11: 89:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a C, &'b mut __H) {<C as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:87:70: 87:70
    }
}

fn <impl at ui/derives/derive-hygiene.rs:95:20: 95:25>::clone(_1: &__H) -> __H {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:95:20: 95:25
    let mut _0: __H;                     // return place in scope 0 at ui/derives/derive-hygiene.rs:95:20: 95:25
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/derives/derive-hygiene.rs:95:20: 95:25
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:95:25: 95:25
    }
}

fn <impl at ui/derives/derive-hygiene.rs:95:27: 95:36>::eq(_1: &__H, _2: &__H) -> bool {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:95:27: 95:36
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:95:27: 95:36
    let mut _0: bool;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:95:27: 95:36
    let mut _3: (&__H, &__H);            // in scope 0 at ui/derives/derive-hygiene.rs:95:27: 95:36
    let mut _4: &__H;                    // in scope 0 at ui/derives/derive-hygiene.rs:95:27: 95:36
    let mut _5: &__H;                    // in scope 0 at ui/derives/derive-hygiene.rs:95:27: 95:36
    let _6: &i32;                        // in scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
    let _7: &i32;                        // in scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
    let mut _8: i32;                     // in scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
    let mut _9: i32;                     // in scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
    let mut _10: &__H;                   // in scope 0 at ui/derives/derive-hygiene.rs:95:27: 95:36
    let mut _11: &__H;                   // in scope 0 at ui/derives/derive-hygiene.rs:95:27: 95:36
    scope 1 {
        debug __self_0 => _6;            // in scope 1 at ui/derives/derive-hygiene.rs:96:18: 96:21
        debug __arg1_0 => _7;            // in scope 1 at ui/derives/derive-hygiene.rs:96:18: 96:21
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:95:27: 95:36
        _5 = _2;                         // scope 0 at ui/derives/derive-hygiene.rs:95:27: 95:36
        _3 = (move _4, move _5);         // scope 0 at ui/derives/derive-hygiene.rs:95:27: 95:36
        _10 = deref_copy (_3.0: &__H);   // scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
        _6 = &(((*_10) as V).0: i32);    // scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
        _11 = deref_copy (_3.1: &__H);   // scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
        _7 = &(((*_11) as V).0: i32);    // scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
        _8 = (*_6);                      // scope 1 at ui/derives/derive-hygiene.rs:96:18: 96:21
        _9 = (*_7);                      // scope 1 at ui/derives/derive-hygiene.rs:96:18: 96:21
        _0 = Eq(move _8, move _9);       // scope 1 at ui/derives/derive-hygiene.rs:96:18: 96:21
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:95:36: 95:36
    }
}

fn <impl at ui/derives/derive-hygiene.rs:95:38: 95:40>::assert_receiver_is_total_eq(_1: &__H) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:95:38: 95:40
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:95:38: 95:40
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:95:40: 95:40
    }
}

fn <impl at ui/derives/derive-hygiene.rs:95:42: 95:52>::partial_cmp(_1: &__H, _2: &__H) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:95:42: 95:52
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:95:42: 95:52
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/derives/derive-hygiene.rs:95:42: 95:52
    let mut _3: (&__H, &__H);            // in scope 0 at ui/derives/derive-hygiene.rs:95:42: 95:52
    let mut _4: &__H;                    // in scope 0 at ui/derives/derive-hygiene.rs:95:42: 95:52
    let mut _5: &__H;                    // in scope 0 at ui/derives/derive-hygiene.rs:95:42: 95:52
    let _6: &i32;                        // in scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
    let _7: &i32;                        // in scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
    let mut _8: &i32;                    // in scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
    let mut _9: &i32;                    // in scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
    let mut _10: &__H;                   // in scope 0 at ui/derives/derive-hygiene.rs:95:42: 95:52
    let mut _11: &__H;                   // in scope 0 at ui/derives/derive-hygiene.rs:95:42: 95:52
    scope 1 {
        debug __self_0 => _6;            // in scope 1 at ui/derives/derive-hygiene.rs:96:18: 96:21
        debug __arg1_0 => _7;            // in scope 1 at ui/derives/derive-hygiene.rs:96:18: 96:21
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:95:42: 95:52
        _5 = _2;                         // scope 0 at ui/derives/derive-hygiene.rs:95:42: 95:52
        _3 = (move _4, move _5);         // scope 0 at ui/derives/derive-hygiene.rs:95:42: 95:52
        _10 = deref_copy (_3.0: &__H);   // scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
        _6 = &(((*_10) as V).0: i32);    // scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
        _11 = deref_copy (_3.1: &__H);   // scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
        _7 = &(((*_11) as V).0: i32);    // scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
        _8 = _6;                         // scope 1 at ui/derives/derive-hygiene.rs:96:18: 96:21
        _9 = _7;                         // scope 1 at ui/derives/derive-hygiene.rs:96:18: 96:21
        _0 = <i32 as PartialOrd>::partial_cmp(move _8, move _9) -> bb1; // scope 1 at ui/derives/derive-hygiene.rs:96:18: 96:21
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:96:18: 96:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a i32, &'b i32) -> Option<std::cmp::Ordering> {<i32 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:95:52: 95:52
    }
}

fn <impl at ui/derives/derive-hygiene.rs:95:54: 95:57>::cmp(_1: &__H, _2: &__H) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:95:54: 95:57
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:95:54: 95:57
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/derives/derive-hygiene.rs:95:54: 95:57
    let mut _3: (&__H, &__H);            // in scope 0 at ui/derives/derive-hygiene.rs:95:54: 95:57
    let mut _4: &__H;                    // in scope 0 at ui/derives/derive-hygiene.rs:95:54: 95:57
    let mut _5: &__H;                    // in scope 0 at ui/derives/derive-hygiene.rs:95:54: 95:57
    let _6: &i32;                        // in scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
    let _7: &i32;                        // in scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
    let mut _8: &i32;                    // in scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
    let mut _9: &i32;                    // in scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
    let mut _10: &__H;                   // in scope 0 at ui/derives/derive-hygiene.rs:95:54: 95:57
    let mut _11: &__H;                   // in scope 0 at ui/derives/derive-hygiene.rs:95:54: 95:57
    scope 1 {
        debug __self_0 => _6;            // in scope 1 at ui/derives/derive-hygiene.rs:96:18: 96:21
        debug __arg1_0 => _7;            // in scope 1 at ui/derives/derive-hygiene.rs:96:18: 96:21
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:95:54: 95:57
        _5 = _2;                         // scope 0 at ui/derives/derive-hygiene.rs:95:54: 95:57
        _3 = (move _4, move _5);         // scope 0 at ui/derives/derive-hygiene.rs:95:54: 95:57
        _10 = deref_copy (_3.0: &__H);   // scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
        _6 = &(((*_10) as V).0: i32);    // scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
        _11 = deref_copy (_3.1: &__H);   // scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
        _7 = &(((*_11) as V).0: i32);    // scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
        _8 = _6;                         // scope 1 at ui/derives/derive-hygiene.rs:96:18: 96:21
        _9 = _7;                         // scope 1 at ui/derives/derive-hygiene.rs:96:18: 96:21
        _0 = <i32 as Ord>::cmp(move _8, move _9) -> bb1; // scope 1 at ui/derives/derive-hygiene.rs:96:18: 96:21
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:96:18: 96:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a i32, &'b i32) -> std::cmp::Ordering {<i32 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:95:57: 95:57
    }
}

fn <impl at ui/derives/derive-hygiene.rs:95:59: 95:64>::fmt(_1: &__H, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:95:59: 95:64
    debug f => _2;                       // in scope 0 at ui/derives/derive-hygiene.rs:95:59: 95:64
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/derives/derive-hygiene.rs:95:59: 95:64
    let _3: &i32;                        // in scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
    let mut _4: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/derives/derive-hygiene.rs:95:59: 95:64
    let mut _5: &str;                    // in scope 0 at ui/derives/derive-hygiene.rs:95:59: 95:64
    let _6: &str;                        // in scope 0 at ui/derives/derive-hygiene.rs:95:59: 95:64
    let mut _7: &dyn std::fmt::Debug;    // in scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
    let mut _8: &&i32;                   // in scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
    let _9: &&i32;                       // in scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at ui/derives/derive-hygiene.rs:96:18: 96:21
    }

    bb0: {
        _3 = &(((*_1) as V).0: i32);     // scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
        _4 = &mut (*_2);                 // scope 1 at ui/derives/derive-hygiene.rs:95:59: 95:64
        _6 = const "V";                  // scope 1 at ui/derives/derive-hygiene.rs:95:59: 95:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:95:59: 95:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 1 at ui/derives/derive-hygiene.rs:95:59: 95:64
        _9 = &_3;                        // scope 1 at ui/derives/derive-hygiene.rs:96:18: 96:21
        _8 = _9;                         // scope 1 at ui/derives/derive-hygiene.rs:96:18: 96:21
        _7 = move _8 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/derives/derive-hygiene.rs:96:18: 96:21
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _4, move _5, move _7) -> bb1; // scope 1 at ui/derives/derive-hygiene.rs:95:59: 95:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:95:59: 95:64
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:95:64: 95:64
    }
}

fn <impl at ui/derives/derive-hygiene.rs:95:66: 95:70>::hash(_1: &__H, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:95:66: 95:70
    debug state => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:95:66: 95:70
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:95:66: 95:70
    let _3: &i32;                        // in scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
    let mut _4: &i32;                    // in scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
    let mut _5: &mut __H;                // in scope 0 at ui/derives/derive-hygiene.rs:95:66: 95:70
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at ui/derives/derive-hygiene.rs:96:18: 96:21
    }

    bb0: {
        _3 = &(((*_1) as V).0: i32);     // scope 0 at ui/derives/derive-hygiene.rs:96:18: 96:21
        _4 = _3;                         // scope 1 at ui/derives/derive-hygiene.rs:96:18: 96:21
        _5 = &mut (*_2);                 // scope 1 at ui/derives/derive-hygiene.rs:95:66: 95:70
        _0 = <i32 as Hash>::hash::<__H>(move _4, move _5) -> bb1; // scope 1 at ui/derives/derive-hygiene.rs:96:18: 96:21
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:96:18: 96:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a i32, &'b mut __H) {<i32 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:95:70: 95:70
    }
}

fn <impl at ui/derives/derive-hygiene.rs:99:20: 99:25>::clone(_1: &W) -> W {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:99:20: 99:25
    let mut _0: W;                       // return place in scope 0 at ui/derives/derive-hygiene.rs:99:20: 99:25

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/derives/derive-hygiene.rs:99:20: 99:25
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:99:25: 99:25
    }
}

fn <impl at ui/derives/derive-hygiene.rs:99:27: 99:36>::eq(_1: &W, _2: &W) -> bool {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:99:27: 99:36
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:99:27: 99:36
    let mut _0: bool;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:99:27: 99:36
    let _3: i16;                         // in scope 0 at ui/derives/derive-hygiene.rs:99:27: 99:36
    let mut _4: &W;                      // in scope 0 at ui/derives/derive-hygiene.rs:99:27: 99:36
    let mut _6: &W;                      // in scope 0 at ui/derives/derive-hygiene.rs:99:27: 99:36
    let mut _7: i16;                     // in scope 0 at ui/derives/derive-hygiene.rs:99:27: 99:36
    let mut _8: i16;                     // in scope 0 at ui/derives/derive-hygiene.rs:99:27: 99:36
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/derives/derive-hygiene.rs:99:27: 99:36
        let _5: i16;                     // in scope 1 at ui/derives/derive-hygiene.rs:99:27: 99:36
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/derives/derive-hygiene.rs:99:27: 99:36
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:99:27: 99:36
        _3 = discriminant((*_4));        // scope 0 at ui/derives/derive-hygiene.rs:99:27: 99:36
        _6 = _2;                         // scope 1 at ui/derives/derive-hygiene.rs:99:27: 99:36
        _5 = discriminant((*_6));        // scope 1 at ui/derives/derive-hygiene.rs:99:27: 99:36
        _7 = _3;                         // scope 2 at ui/derives/derive-hygiene.rs:99:27: 99:36
        _8 = _5;                         // scope 2 at ui/derives/derive-hygiene.rs:99:27: 99:36
        _0 = Eq(move _7, move _8);       // scope 2 at ui/derives/derive-hygiene.rs:99:27: 99:36
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:99:36: 99:36
    }
}

fn <impl at ui/derives/derive-hygiene.rs:99:38: 99:40>::assert_receiver_is_total_eq(_1: &W) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:99:38: 99:40
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:99:38: 99:40

    bb0: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:99:40: 99:40
    }
}

fn <impl at ui/derives/derive-hygiene.rs:99:42: 99:52>::partial_cmp(_1: &W, _2: &W) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:99:42: 99:52
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:99:42: 99:52
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/derives/derive-hygiene.rs:99:42: 99:52
    let _3: i16;                         // in scope 0 at ui/derives/derive-hygiene.rs:99:42: 99:52
    let mut _4: &W;                      // in scope 0 at ui/derives/derive-hygiene.rs:99:42: 99:52
    let mut _6: &W;                      // in scope 0 at ui/derives/derive-hygiene.rs:99:42: 99:52
    let mut _7: &i16;                    // in scope 0 at ui/derives/derive-hygiene.rs:99:42: 99:52
    let _8: &i16;                        // in scope 0 at ui/derives/derive-hygiene.rs:99:42: 99:52
    let mut _9: &i16;                    // in scope 0 at ui/derives/derive-hygiene.rs:99:42: 99:52
    let _10: &i16;                       // in scope 0 at ui/derives/derive-hygiene.rs:99:42: 99:52
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/derives/derive-hygiene.rs:99:42: 99:52
        let _5: i16;                     // in scope 1 at ui/derives/derive-hygiene.rs:99:42: 99:52
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/derives/derive-hygiene.rs:99:42: 99:52
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:99:42: 99:52
        _3 = discriminant((*_4));        // scope 0 at ui/derives/derive-hygiene.rs:99:42: 99:52
        _6 = _2;                         // scope 1 at ui/derives/derive-hygiene.rs:99:42: 99:52
        _5 = discriminant((*_6));        // scope 1 at ui/derives/derive-hygiene.rs:99:42: 99:52
        _8 = &_3;                        // scope 2 at ui/derives/derive-hygiene.rs:99:42: 99:52
        _7 = _8;                         // scope 2 at ui/derives/derive-hygiene.rs:99:42: 99:52
        _10 = &_5;                       // scope 2 at ui/derives/derive-hygiene.rs:99:42: 99:52
        _9 = _10;                        // scope 2 at ui/derives/derive-hygiene.rs:99:42: 99:52
        _0 = <i16 as PartialOrd>::partial_cmp(move _7, move _9) -> bb1; // scope 2 at ui/derives/derive-hygiene.rs:99:42: 99:52
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:99:42: 99:52
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a i16, &'b i16) -> Option<std::cmp::Ordering> {<i16 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:99:52: 99:52
    }
}

fn <impl at ui/derives/derive-hygiene.rs:99:54: 99:57>::cmp(_1: &W, _2: &W) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:99:54: 99:57
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:99:54: 99:57
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/derives/derive-hygiene.rs:99:54: 99:57
    let _3: i16;                         // in scope 0 at ui/derives/derive-hygiene.rs:99:54: 99:57
    let mut _4: &W;                      // in scope 0 at ui/derives/derive-hygiene.rs:99:54: 99:57
    let mut _6: &W;                      // in scope 0 at ui/derives/derive-hygiene.rs:99:54: 99:57
    let mut _7: &i16;                    // in scope 0 at ui/derives/derive-hygiene.rs:99:54: 99:57
    let _8: &i16;                        // in scope 0 at ui/derives/derive-hygiene.rs:99:54: 99:57
    let mut _9: &i16;                    // in scope 0 at ui/derives/derive-hygiene.rs:99:54: 99:57
    let _10: &i16;                       // in scope 0 at ui/derives/derive-hygiene.rs:99:54: 99:57
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/derives/derive-hygiene.rs:99:54: 99:57
        let _5: i16;                     // in scope 1 at ui/derives/derive-hygiene.rs:99:54: 99:57
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/derives/derive-hygiene.rs:99:54: 99:57
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:99:54: 99:57
        _3 = discriminant((*_4));        // scope 0 at ui/derives/derive-hygiene.rs:99:54: 99:57
        _6 = _2;                         // scope 1 at ui/derives/derive-hygiene.rs:99:54: 99:57
        _5 = discriminant((*_6));        // scope 1 at ui/derives/derive-hygiene.rs:99:54: 99:57
        _8 = &_3;                        // scope 2 at ui/derives/derive-hygiene.rs:99:54: 99:57
        _7 = _8;                         // scope 2 at ui/derives/derive-hygiene.rs:99:54: 99:57
        _10 = &_5;                       // scope 2 at ui/derives/derive-hygiene.rs:99:54: 99:57
        _9 = _10;                        // scope 2 at ui/derives/derive-hygiene.rs:99:54: 99:57
        _0 = <i16 as Ord>::cmp(move _7, move _9) -> bb1; // scope 2 at ui/derives/derive-hygiene.rs:99:54: 99:57
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:99:54: 99:57
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a i16, &'b i16) -> std::cmp::Ordering {<i16 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:99:57: 99:57
    }
}

fn <impl at ui/derives/derive-hygiene.rs:99:59: 99:64>::fmt(_1: &W, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:99:59: 99:64
    debug f => _2;                       // in scope 0 at ui/derives/derive-hygiene.rs:99:59: 99:64
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/derives/derive-hygiene.rs:99:59: 99:64
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/derives/derive-hygiene.rs:99:59: 99:64
    let mut _4: &str;                    // in scope 0 at ui/derives/derive-hygiene.rs:99:59: 99:64
    let mut _5: i16;                     // in scope 0 at ui/derives/derive-hygiene.rs:99:59: 99:64
    let _6: &str;                        // in scope 0 at ui/derives/derive-hygiene.rs:99:59: 99:64
    let _7: &str;                        // in scope 0 at ui/derives/derive-hygiene.rs:99:59: 99:64

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/derives/derive-hygiene.rs:99:59: 99:64
        _5 = discriminant((*_1));        // scope 0 at ui/derives/derive-hygiene.rs:99:59: 99:64
        switchInt(move _5) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/derives/derive-hygiene.rs:99:59: 99:64
    }

    bb1: {
        _7 = const "B";                  // scope 0 at ui/derives/derive-hygiene.rs:99:59: 99:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:99:59: 99:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _7;                         // scope 0 at ui/derives/derive-hygiene.rs:99:59: 99:64
        goto -> bb4;                     // scope 0 at ui/derives/derive-hygiene.rs:99:63: 99:64
    }

    bb2: {
        unreachable;                     // scope 0 at ui/derives/derive-hygiene.rs:99:59: 99:64
    }

    bb3: {
        _6 = const "A";                  // scope 0 at ui/derives/derive-hygiene.rs:99:59: 99:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:99:59: 99:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _6;                         // scope 0 at ui/derives/derive-hygiene.rs:99:59: 99:64
        goto -> bb4;                     // scope 0 at ui/derives/derive-hygiene.rs:99:63: 99:64
    }

    bb4: {
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb5; // scope 0 at ui/derives/derive-hygiene.rs:99:59: 99:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:99:59: 99:64
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:99:64: 99:64
    }
}

fn <impl at ui/derives/derive-hygiene.rs:99:66: 99:70>::hash(_1: &W, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:99:66: 99:70
    debug state => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:99:66: 99:70
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:99:66: 99:70
    let _3: i16;                         // in scope 0 at ui/derives/derive-hygiene.rs:99:66: 99:70
    let mut _4: &W;                      // in scope 0 at ui/derives/derive-hygiene.rs:99:66: 99:70
    let mut _5: &i16;                    // in scope 0 at ui/derives/derive-hygiene.rs:99:66: 99:70
    let _6: &i16;                        // in scope 0 at ui/derives/derive-hygiene.rs:99:66: 99:70
    let mut _7: &mut __H;                // in scope 0 at ui/derives/derive-hygiene.rs:99:66: 99:70
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/derives/derive-hygiene.rs:99:66: 99:70
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:99:66: 99:70
        _3 = discriminant((*_4));        // scope 0 at ui/derives/derive-hygiene.rs:99:66: 99:70
        _6 = &_3;                        // scope 1 at ui/derives/derive-hygiene.rs:99:66: 99:70
        _5 = _6;                         // scope 1 at ui/derives/derive-hygiene.rs:99:66: 99:70
        _7 = &mut (*_2);                 // scope 1 at ui/derives/derive-hygiene.rs:99:66: 99:70
        _0 = <i16 as Hash>::hash::<__H>(move _5, move _7) -> bb1; // scope 1 at ui/derives/derive-hygiene.rs:99:66: 99:70
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:99:66: 99:70
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a i16, &'b mut __H) {<i16 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:99:70: 99:70
    }
}

fn <impl at ui/derives/derive-hygiene.rs:102:20: 102:25>::clone(_1: &X<A>) -> X<A> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:102:20: 102:25
    let mut _0: X<A>;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:102:20: 102:25
    let mut _2: A;                       // in scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
    let mut _3: &A;                      // in scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
    let _4: &A;                          // in scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13

    bb0: {
        _4 = &((*_1).0: A);              // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
        _3 = _4;                         // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
        _2 = <A as Clone>::clone(move _3) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:104:9: 104:13
                                         // + literal: Const { ty: for<'a> fn(&'a A) -> A {<A as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = X::<A> { A: move _2 };      // scope 0 at ui/derives/derive-hygiene.rs:102:20: 102:25
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:102:25: 102:25
    }
}

fn <impl at ui/derives/derive-hygiene.rs:102:27: 102:36>::eq(_1: &X<A>, _2: &X<A>) -> bool {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:102:27: 102:36
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:102:27: 102:36
    let mut _0: bool;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:102:27: 102:36
    let mut _3: &A;                      // in scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
    let mut _4: &A;                      // in scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13

    bb0: {
        _3 = &((*_1).0: A);              // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
        _4 = &((*_2).0: A);              // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
        _0 = <A as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:104:9: 104:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a A, &'b A) -> bool {<A as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:102:36: 102:36
    }
}

fn <impl at ui/derives/derive-hygiene.rs:102:38: 102:40>::assert_receiver_is_total_eq(_1: &X<A>) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:102:38: 102:40
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:102:38: 102:40
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:102:40: 102:40
    }
}

fn <impl at ui/derives/derive-hygiene.rs:102:42: 102:52>::partial_cmp(_1: &X<A>, _2: &X<A>) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:102:42: 102:52
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:102:42: 102:52
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/derives/derive-hygiene.rs:102:42: 102:52
    let mut _3: &A;                      // in scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
    let _4: &A;                          // in scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
    let mut _5: &A;                      // in scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
    let _6: &A;                          // in scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13

    bb0: {
        _4 = &((*_1).0: A);              // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
        _3 = _4;                         // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
        _6 = &((*_2).0: A);              // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
        _5 = _6;                         // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
        _0 = <A as PartialOrd>::partial_cmp(move _3, move _5) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:104:9: 104:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a A, &'b A) -> Option<std::cmp::Ordering> {<A as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:102:52: 102:52
    }
}

fn <impl at ui/derives/derive-hygiene.rs:102:54: 102:57>::cmp(_1: &X<A>, _2: &X<A>) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:102:54: 102:57
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:102:54: 102:57
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/derives/derive-hygiene.rs:102:54: 102:57
    let mut _3: &A;                      // in scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
    let _4: &A;                          // in scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
    let mut _5: &A;                      // in scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
    let _6: &A;                          // in scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13

    bb0: {
        _4 = &((*_1).0: A);              // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
        _3 = _4;                         // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
        _6 = &((*_2).0: A);              // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
        _5 = _6;                         // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
        _0 = <A as Ord>::cmp(move _3, move _5) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:104:9: 104:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a A, &'b A) -> std::cmp::Ordering {<A as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:102:57: 102:57
    }
}

fn <impl at ui/derives/derive-hygiene.rs:102:59: 102:64>::fmt(_1: &X<A>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:102:59: 102:64
    debug f => _2;                       // in scope 0 at ui/derives/derive-hygiene.rs:102:59: 102:64
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/derives/derive-hygiene.rs:102:59: 102:64
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/derives/derive-hygiene.rs:102:59: 102:64
    let mut _4: &str;                    // in scope 0 at ui/derives/derive-hygiene.rs:102:59: 102:64
    let _5: &str;                        // in scope 0 at ui/derives/derive-hygiene.rs:102:59: 102:64
    let mut _6: &str;                    // in scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
    let _7: &str;                        // in scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
    let mut _9: &&A;                     // in scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
    let _10: &&A;                        // in scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
    let _11: &A;                         // in scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/derives/derive-hygiene.rs:102:59: 102:64
        _5 = const "X";                  // scope 0 at ui/derives/derive-hygiene.rs:102:59: 102:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:102:59: 102:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/derives/derive-hygiene.rs:102:59: 102:64
        _7 = const "A";                  // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:104:9: 104:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
        _11 = &((*_1).0: A);             // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
        _10 = &_11;                      // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
        _9 = _10;                        // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _3, move _4, move _6, move _8) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:102:59: 102:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:102:59: 102:64
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:102:64: 102:64
    }
}

fn <impl at ui/derives/derive-hygiene.rs:102:66: 102:73>::default() -> X<A> {
    let mut _0: X<A>;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:102:66: 102:73
    let mut _1: A;                       // in scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13

    bb0: {
        _1 = <A as Default>::default() -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:104:9: 104:13
                                         // + literal: Const { ty: fn() -> A {<A as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = X::<A> { A: move _1 };      // scope 0 at ui/derives/derive-hygiene.rs:102:66: 102:73
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:102:73: 102:73
    }
}

fn <impl at ui/derives/derive-hygiene.rs:102:75: 102:79>::hash(_1: &X<A>, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:102:75: 102:79
    debug state => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:102:75: 102:79
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:102:75: 102:79
    let mut _3: &A;                      // in scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
    let _4: &A;                          // in scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
    let mut _5: &mut __H;                // in scope 0 at ui/derives/derive-hygiene.rs:102:75: 102:79

    bb0: {
        _4 = &((*_1).0: A);              // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
        _3 = _4;                         // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
        _5 = &mut (*_2);                 // scope 0 at ui/derives/derive-hygiene.rs:102:75: 102:79
        _0 = <A as Hash>::hash::<__H>(move _3, move _5) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:104:9: 104:13
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:104:9: 104:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a A, &'b mut __H) {<A as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:102:79: 102:79
    }
}

fn <impl at ui/derives/derive-hygiene.rs:107:20: 107:25>::clone(_1: &Y<B>) -> Y<B> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:107:20: 107:25
    let mut _0: Y<B>;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:107:20: 107:25
    let mut _2: B;                       // in scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
    let mut _3: &B;                      // in scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
    let _4: &B;                          // in scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18

    bb0: {
        _4 = &((*_1).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
        _3 = _4;                         // scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
        _2 = <B as Clone>::clone(move _3) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:108:17: 108:18
                                         // + literal: Const { ty: for<'a> fn(&'a B) -> B {<B as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Y::<B>(move _2);            // scope 0 at ui/derives/derive-hygiene.rs:107:20: 107:25
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:107:25: 107:25
    }
}

fn <impl at ui/derives/derive-hygiene.rs:107:27: 107:36>::eq(_1: &Y<B>, _2: &Y<B>) -> bool {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:107:27: 107:36
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:107:27: 107:36
    let mut _0: bool;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:107:27: 107:36
    let mut _3: &B;                      // in scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
    let mut _4: &B;                      // in scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18

    bb0: {
        _3 = &((*_1).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
        _4 = &((*_2).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
        _0 = <B as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:108:17: 108:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a B, &'b B) -> bool {<B as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:107:36: 107:36
    }
}

fn <impl at ui/derives/derive-hygiene.rs:107:38: 107:40>::assert_receiver_is_total_eq(_1: &Y<B>) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:107:38: 107:40
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:107:38: 107:40
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:107:40: 107:40
    }
}

fn <impl at ui/derives/derive-hygiene.rs:107:42: 107:52>::partial_cmp(_1: &Y<B>, _2: &Y<B>) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:107:42: 107:52
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:107:42: 107:52
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/derives/derive-hygiene.rs:107:42: 107:52
    let mut _3: &B;                      // in scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
    let _4: &B;                          // in scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
    let mut _5: &B;                      // in scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
    let _6: &B;                          // in scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18

    bb0: {
        _4 = &((*_1).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
        _3 = _4;                         // scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
        _6 = &((*_2).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
        _5 = _6;                         // scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
        _0 = <B as PartialOrd>::partial_cmp(move _3, move _5) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:108:17: 108:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a B, &'b B) -> Option<std::cmp::Ordering> {<B as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:107:52: 107:52
    }
}

fn <impl at ui/derives/derive-hygiene.rs:107:54: 107:57>::cmp(_1: &Y<B>, _2: &Y<B>) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:107:54: 107:57
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:107:54: 107:57
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/derives/derive-hygiene.rs:107:54: 107:57
    let mut _3: &B;                      // in scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
    let _4: &B;                          // in scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
    let mut _5: &B;                      // in scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
    let _6: &B;                          // in scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18

    bb0: {
        _4 = &((*_1).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
        _3 = _4;                         // scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
        _6 = &((*_2).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
        _5 = _6;                         // scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
        _0 = <B as Ord>::cmp(move _3, move _5) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:108:17: 108:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a B, &'b B) -> std::cmp::Ordering {<B as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:107:57: 107:57
    }
}

fn <impl at ui/derives/derive-hygiene.rs:107:59: 107:64>::fmt(_1: &Y<B>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:107:59: 107:64
    debug f => _2;                       // in scope 0 at ui/derives/derive-hygiene.rs:107:59: 107:64
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/derives/derive-hygiene.rs:107:59: 107:64
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/derives/derive-hygiene.rs:107:59: 107:64
    let mut _4: &str;                    // in scope 0 at ui/derives/derive-hygiene.rs:107:59: 107:64
    let _5: &str;                        // in scope 0 at ui/derives/derive-hygiene.rs:107:59: 107:64
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
    let mut _7: &&B;                     // in scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
    let _8: &&B;                         // in scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
    let _9: &B;                          // in scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/derives/derive-hygiene.rs:107:59: 107:64
        _5 = const "Y";                  // scope 0 at ui/derives/derive-hygiene.rs:107:59: 107:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:107:59: 107:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/derives/derive-hygiene.rs:107:59: 107:64
        _9 = &((*_1).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
        _8 = &_9;                        // scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
        _7 = _8;                         // scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:107:59: 107:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:107:59: 107:64
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:107:64: 107:64
    }
}

fn <impl at ui/derives/derive-hygiene.rs:107:66: 107:73>::default() -> Y<B> {
    let mut _0: Y<B>;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:107:66: 107:73
    let mut _1: B;                       // in scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18

    bb0: {
        _1 = <B as Default>::default() -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:108:17: 108:18
                                         // + literal: Const { ty: fn() -> B {<B as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Y::<B>(move _1);            // scope 0 at ui/derives/derive-hygiene.rs:107:66: 107:73
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:107:73: 107:73
    }
}

fn <impl at ui/derives/derive-hygiene.rs:107:75: 107:79>::hash(_1: &Y<B>, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:107:75: 107:79
    debug state => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:107:75: 107:79
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:107:75: 107:79
    let mut _3: &B;                      // in scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
    let _4: &B;                          // in scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
    let mut _5: &mut __H;                // in scope 0 at ui/derives/derive-hygiene.rs:107:75: 107:79

    bb0: {
        _4 = &((*_1).0: B);              // scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
        _3 = _4;                         // scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
        _5 = &mut (*_2);                 // scope 0 at ui/derives/derive-hygiene.rs:107:75: 107:79
        _0 = <B as Hash>::hash::<__H>(move _3, move _5) -> bb1; // scope 0 at ui/derives/derive-hygiene.rs:108:17: 108:18
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:108:17: 108:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a B, &'b mut __H) {<B as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:107:79: 107:79
    }
}

fn <impl at ui/derives/derive-hygiene.rs:112:20: 112:25>::clone(_1: &Z<C>) -> Z<C> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:112:20: 112:25
    let mut _0: Z<C>;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:112:20: 112:25
    let mut _2: isize;                   // in scope 0 at ui/derives/derive-hygiene.rs:112:20: 112:25
    let _3: &C;                          // in scope 0 at ui/derives/derive-hygiene.rs:114:11: 114:12
    let mut _4: C;                       // in scope 0 at ui/derives/derive-hygiene.rs:114:11: 114:12
    let mut _5: &C;                      // in scope 0 at ui/derives/derive-hygiene.rs:114:11: 114:12
    let _6: &C;                          // in scope 0 at ui/derives/derive-hygiene.rs:115:13: 115:17
    let mut _7: C;                       // in scope 0 at ui/derives/derive-hygiene.rs:115:13: 115:17
    let mut _8: &C;                      // in scope 0 at ui/derives/derive-hygiene.rs:115:13: 115:17
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at ui/derives/derive-hygiene.rs:114:11: 114:12
    }
    scope 2 {
        debug __self_0 => _6;            // in scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at ui/derives/derive-hygiene.rs:112:20: 112:25
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/derives/derive-hygiene.rs:112:20: 112:25
    }

    bb1: {
        _6 = &(((*_1) as B).0: C);       // scope 0 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _8 = _6;                         // scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _7 = <C as Clone>::clone(move _8) -> bb5; // scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:115:13: 115:17
                                         // + literal: Const { ty: for<'a> fn(&'a C) -> C {<C as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/derives/derive-hygiene.rs:112:20: 112:25
    }

    bb3: {
        _3 = &(((*_1) as C).0: C);       // scope 0 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _5 = _3;                         // scope 1 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _4 = <C as Clone>::clone(move _5) -> bb4; // scope 1 at ui/derives/derive-hygiene.rs:114:11: 114:12
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:114:11: 114:12
                                         // + literal: Const { ty: for<'a> fn(&'a C) -> C {<C as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = Z::<C>::C(move _4);         // scope 1 at ui/derives/derive-hygiene.rs:112:20: 112:25
        goto -> bb6;                     // scope 0 at ui/derives/derive-hygiene.rs:112:24: 112:25
    }

    bb5: {
        _0 = Z::<C>::B { C: move _7 };   // scope 2 at ui/derives/derive-hygiene.rs:112:20: 112:25
        goto -> bb6;                     // scope 0 at ui/derives/derive-hygiene.rs:112:24: 112:25
    }

    bb6: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:112:25: 112:25
    }
}

fn <impl at ui/derives/derive-hygiene.rs:112:27: 112:36>::eq(_1: &Z<C>, _2: &Z<C>) -> bool {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
    let mut _0: bool;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
    let _3: isize;                       // in scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
    let mut _4: &Z<C>;                   // in scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
    let mut _6: &Z<C>;                   // in scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
    let mut _7: bool;                    // in scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
    let mut _8: isize;                   // in scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
    let mut _9: isize;                   // in scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
    let mut _10: bool;                   // in scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
    let mut _11: (&Z<C>, &Z<C>);         // in scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
    let mut _12: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
    let mut _13: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
    let mut _14: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
    let mut _15: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
    let mut _16: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
    let mut _19: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:114:11: 114:12
    let mut _20: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:114:11: 114:12
    let mut _23: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:115:13: 115:17
    let mut _24: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:115:13: 115:17
    let mut _25: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
    let mut _26: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
    let mut _27: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
    let mut _28: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
    let mut _29: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
    let mut _30: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
    let mut _31: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/derives/derive-hygiene.rs:112:27: 112:36
        let _5: isize;                   // in scope 1 at ui/derives/derive-hygiene.rs:112:27: 112:36
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/derives/derive-hygiene.rs:112:27: 112:36
            let _17: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:114:11: 114:12
            let _18: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:114:11: 114:12
            let _21: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
            let _22: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
            scope 3 {
                debug __self_0 => _17;   // in scope 3 at ui/derives/derive-hygiene.rs:114:11: 114:12
                debug __arg1_0 => _18;   // in scope 3 at ui/derives/derive-hygiene.rs:114:11: 114:12
            }
            scope 4 {
                debug __self_0 => _21;   // in scope 4 at ui/derives/derive-hygiene.rs:115:13: 115:17
                debug __arg1_0 => _22;   // in scope 4 at ui/derives/derive-hygiene.rs:115:13: 115:17
            }
            scope 5 {
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
        _3 = discriminant((*_4));        // scope 0 at ui/derives/derive-hygiene.rs:112:27: 112:36
        _6 = _2;                         // scope 1 at ui/derives/derive-hygiene.rs:112:27: 112:36
        _5 = discriminant((*_6));        // scope 1 at ui/derives/derive-hygiene.rs:112:27: 112:36
        _8 = _3;                         // scope 2 at ui/derives/derive-hygiene.rs:112:27: 112:36
        _9 = _5;                         // scope 2 at ui/derives/derive-hygiene.rs:112:27: 112:36
        _7 = Eq(move _8, move _9);       // scope 2 at ui/derives/derive-hygiene.rs:112:27: 112:36
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/derives/derive-hygiene.rs:112:27: 112:36
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/derives/derive-hygiene.rs:112:27: 112:36
        goto -> bb3;                     // scope 2 at ui/derives/derive-hygiene.rs:112:27: 112:36
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/derives/derive-hygiene.rs:112:27: 112:36
        _13 = _2;                        // scope 2 at ui/derives/derive-hygiene.rs:112:27: 112:36
        _11 = (move _12, move _13);      // scope 2 at ui/derives/derive-hygiene.rs:112:27: 112:36
        _25 = deref_copy (_11.0: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:112:27: 112:36
        _16 = discriminant((*_25));      // scope 2 at ui/derives/derive-hygiene.rs:112:27: 112:36
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 2 at ui/derives/derive-hygiene.rs:112:27: 112:36
    }

    bb3: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:112:36: 112:36
    }

    bb4: {
        _26 = deref_copy (_11.1: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:112:27: 112:36
        _14 = discriminant((*_26));      // scope 2 at ui/derives/derive-hygiene.rs:112:27: 112:36
        switchInt(move _14) -> [0: bb7, otherwise: bb5]; // scope 2 at ui/derives/derive-hygiene.rs:112:27: 112:36
    }

    bb5: {
        unreachable;                     // scope 5 at ui/derives/derive-hygiene.rs:112:27: 112:36
    }

    bb6: {
        _27 = deref_copy (_11.1: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:112:27: 112:36
        _15 = discriminant((*_27));      // scope 2 at ui/derives/derive-hygiene.rs:112:27: 112:36
        switchInt(move _15) -> [1: bb8, otherwise: bb5]; // scope 2 at ui/derives/derive-hygiene.rs:112:27: 112:36
    }

    bb7: {
        _28 = deref_copy (_11.0: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _17 = &(((*_28) as C).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _29 = deref_copy (_11.1: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _18 = &(((*_29) as C).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _19 = _17;                       // scope 3 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _20 = _18;                       // scope 3 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _10 = <C as PartialEq>::eq(move _19, move _20) -> bb9; // scope 3 at ui/derives/derive-hygiene.rs:114:11: 114:12
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:114:11: 114:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a C, &'b C) -> bool {<C as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _30 = deref_copy (_11.0: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _21 = &(((*_30) as B).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _31 = deref_copy (_11.1: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _22 = &(((*_31) as B).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _23 = _21;                       // scope 4 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _24 = _22;                       // scope 4 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _10 = <C as PartialEq>::eq(move _23, move _24) -> bb9; // scope 4 at ui/derives/derive-hygiene.rs:115:13: 115:17
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:115:13: 115:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a C, &'b C) -> bool {<C as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _0 = move _10;                   // scope 2 at ui/derives/derive-hygiene.rs:112:27: 112:36
        goto -> bb3;                     // scope 2 at ui/derives/derive-hygiene.rs:112:27: 112:36
    }
}

fn <impl at ui/derives/derive-hygiene.rs:112:38: 112:40>::assert_receiver_is_total_eq(_1: &Z<C>) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:112:38: 112:40
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:112:38: 112:40
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:112:40: 112:40
    }
}

fn <impl at ui/derives/derive-hygiene.rs:112:42: 112:52>::partial_cmp(_1: &Z<C>, _2: &Z<C>) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
    let _3: isize;                       // in scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
    let mut _4: &Z<C>;                   // in scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
    let mut _6: &Z<C>;                   // in scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
    let mut _7: (&Z<C>, &Z<C>);          // in scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
    let mut _8: &Z<C>;                   // in scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
    let mut _9: &Z<C>;                   // in scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
    let mut _10: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
    let mut _11: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
    let mut _12: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
    let mut _15: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:114:11: 114:12
    let mut _16: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:114:11: 114:12
    let mut _19: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:115:13: 115:17
    let mut _20: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:115:13: 115:17
    let mut _21: &isize;                 // in scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
    let _22: &isize;                     // in scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
    let mut _23: &isize;                 // in scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
    let _24: &isize;                     // in scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
    let mut _25: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
    let mut _26: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
    let mut _27: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
    let mut _28: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
    let mut _29: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
    let mut _30: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
    let mut _31: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/derives/derive-hygiene.rs:112:42: 112:52
        let _5: isize;                   // in scope 1 at ui/derives/derive-hygiene.rs:112:42: 112:52
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/derives/derive-hygiene.rs:112:42: 112:52
            let _13: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:114:11: 114:12
            let _14: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:114:11: 114:12
            let _17: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
            let _18: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
            scope 3 {
                debug __self_0 => _13;   // in scope 3 at ui/derives/derive-hygiene.rs:114:11: 114:12
                debug __arg1_0 => _14;   // in scope 3 at ui/derives/derive-hygiene.rs:114:11: 114:12
            }
            scope 4 {
                debug __self_0 => _17;   // in scope 4 at ui/derives/derive-hygiene.rs:115:13: 115:17
                debug __arg1_0 => _18;   // in scope 4 at ui/derives/derive-hygiene.rs:115:13: 115:17
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
        _3 = discriminant((*_4));        // scope 0 at ui/derives/derive-hygiene.rs:112:42: 112:52
        _6 = _2;                         // scope 1 at ui/derives/derive-hygiene.rs:112:42: 112:52
        _5 = discriminant((*_6));        // scope 1 at ui/derives/derive-hygiene.rs:112:42: 112:52
        _8 = _1;                         // scope 2 at ui/derives/derive-hygiene.rs:112:42: 112:52
        _9 = _2;                         // scope 2 at ui/derives/derive-hygiene.rs:112:42: 112:52
        _7 = (move _8, move _9);         // scope 2 at ui/derives/derive-hygiene.rs:112:42: 112:52
        _25 = deref_copy (_7.0: &Z<C>);  // scope 2 at ui/derives/derive-hygiene.rs:112:42: 112:52
        _12 = discriminant((*_25));      // scope 2 at ui/derives/derive-hygiene.rs:112:42: 112:52
        switchInt(move _12) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 2 at ui/derives/derive-hygiene.rs:112:42: 112:52
    }

    bb1: {
        _26 = deref_copy (_7.1: &Z<C>);  // scope 2 at ui/derives/derive-hygiene.rs:112:42: 112:52
        _10 = discriminant((*_26));      // scope 2 at ui/derives/derive-hygiene.rs:112:42: 112:52
        switchInt(move _10) -> [0: bb4, otherwise: bb2]; // scope 2 at ui/derives/derive-hygiene.rs:112:42: 112:52
    }

    bb2: {
        _22 = &_3;                       // scope 2 at ui/derives/derive-hygiene.rs:112:42: 112:52
        _21 = _22;                       // scope 2 at ui/derives/derive-hygiene.rs:112:42: 112:52
        _24 = &_5;                       // scope 2 at ui/derives/derive-hygiene.rs:112:42: 112:52
        _23 = _24;                       // scope 2 at ui/derives/derive-hygiene.rs:112:42: 112:52
        _0 = <isize as PartialOrd>::partial_cmp(move _21, move _23) -> bb6; // scope 2 at ui/derives/derive-hygiene.rs:112:42: 112:52
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:112:42: 112:52
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b isize) -> Option<std::cmp::Ordering> {<isize as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb3: {
        _27 = deref_copy (_7.1: &Z<C>);  // scope 2 at ui/derives/derive-hygiene.rs:112:42: 112:52
        _11 = discriminant((*_27));      // scope 2 at ui/derives/derive-hygiene.rs:112:42: 112:52
        switchInt(move _11) -> [1: bb5, otherwise: bb2]; // scope 2 at ui/derives/derive-hygiene.rs:112:42: 112:52
    }

    bb4: {
        _28 = deref_copy (_7.0: &Z<C>);  // scope 2 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _13 = &(((*_28) as C).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _29 = deref_copy (_7.1: &Z<C>);  // scope 2 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _14 = &(((*_29) as C).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _15 = _13;                       // scope 3 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _16 = _14;                       // scope 3 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _0 = <C as PartialOrd>::partial_cmp(move _15, move _16) -> bb6; // scope 3 at ui/derives/derive-hygiene.rs:114:11: 114:12
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:114:11: 114:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a C, &'b C) -> Option<std::cmp::Ordering> {<C as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb5: {
        _30 = deref_copy (_7.0: &Z<C>);  // scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _17 = &(((*_30) as B).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _31 = deref_copy (_7.1: &Z<C>);  // scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _18 = &(((*_31) as B).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _19 = _17;                       // scope 4 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _20 = _18;                       // scope 4 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _0 = <C as PartialOrd>::partial_cmp(move _19, move _20) -> bb6; // scope 4 at ui/derives/derive-hygiene.rs:115:13: 115:17
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:115:13: 115:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a C, &'b C) -> Option<std::cmp::Ordering> {<C as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:112:52: 112:52
    }
}

fn <impl at ui/derives/derive-hygiene.rs:112:54: 112:57>::cmp(_1: &Z<C>, _2: &Z<C>) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    debug other => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    let _3: isize;                       // in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    let mut _4: &Z<C>;                   // in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    let mut _6: &Z<C>;                   // in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    let mut _7: std::cmp::Ordering;      // in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    let mut _8: &isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    let _9: &isize;                      // in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    let mut _10: &isize;                 // in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    let _11: &isize;                     // in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    let mut _12: i8;                     // in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    let mut _13: (&Z<C>, &Z<C>);         // in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    let mut _14: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    let mut _15: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    let mut _16: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    let mut _17: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    let mut _18: isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    let mut _21: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:114:11: 114:12
    let mut _22: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:114:11: 114:12
    let mut _25: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:115:13: 115:17
    let mut _26: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:115:13: 115:17
    let mut _28: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    let mut _29: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    let mut _30: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    let mut _31: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    let mut _32: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    let mut _33: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    let mut _34: &Z<C>;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/derives/derive-hygiene.rs:112:54: 112:57
        let _5: isize;                   // in scope 1 at ui/derives/derive-hygiene.rs:112:54: 112:57
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/derives/derive-hygiene.rs:112:54: 112:57
            let _19: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:114:11: 114:12
            let _20: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:114:11: 114:12
            let _23: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
            let _24: &C;                 // in scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
            let _27: std::cmp::Ordering; // in scope 2 at ui/derives/derive-hygiene.rs:112:54: 112:57
            scope 3 {
                debug __self_0 => _19;   // in scope 3 at ui/derives/derive-hygiene.rs:114:11: 114:12
                debug __arg1_0 => _20;   // in scope 3 at ui/derives/derive-hygiene.rs:114:11: 114:12
            }
            scope 4 {
                debug __self_0 => _23;   // in scope 4 at ui/derives/derive-hygiene.rs:115:13: 115:17
                debug __arg1_0 => _24;   // in scope 4 at ui/derives/derive-hygiene.rs:115:13: 115:17
            }
            scope 5 {
            }
            scope 6 {
                debug cmp => _27;        // in scope 6 at ui/derives/derive-hygiene.rs:112:54: 112:57
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
        _3 = discriminant((*_4));        // scope 0 at ui/derives/derive-hygiene.rs:112:54: 112:57
        _6 = _2;                         // scope 1 at ui/derives/derive-hygiene.rs:112:54: 112:57
        _5 = discriminant((*_6));        // scope 1 at ui/derives/derive-hygiene.rs:112:54: 112:57
        _9 = &_3;                        // scope 2 at ui/derives/derive-hygiene.rs:112:54: 112:57
        _8 = _9;                         // scope 2 at ui/derives/derive-hygiene.rs:112:54: 112:57
        _11 = &_5;                       // scope 2 at ui/derives/derive-hygiene.rs:112:54: 112:57
        _10 = _11;                       // scope 2 at ui/derives/derive-hygiene.rs:112:54: 112:57
        _7 = <isize as Ord>::cmp(move _8, move _10) -> bb1; // scope 2 at ui/derives/derive-hygiene.rs:112:54: 112:57
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:112:54: 112:57
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b isize) -> std::cmp::Ordering {<isize as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = discriminant(_7);          // scope 2 at ui/derives/derive-hygiene.rs:112:54: 112:57
        switchInt(move _12) -> [0: bb3, otherwise: bb2]; // scope 2 at ui/derives/derive-hygiene.rs:112:54: 112:57
    }

    bb2: {
        _27 = _7;                        // scope 2 at ui/derives/derive-hygiene.rs:112:54: 112:57
        _0 = _27;                        // scope 6 at ui/derives/derive-hygiene.rs:112:54: 112:57
        goto -> bb9;                     // scope 2 at ui/derives/derive-hygiene.rs:112:56: 112:57
    }

    bb3: {
        _14 = _1;                        // scope 2 at ui/derives/derive-hygiene.rs:112:54: 112:57
        _15 = _2;                        // scope 2 at ui/derives/derive-hygiene.rs:112:54: 112:57
        _13 = (move _14, move _15);      // scope 2 at ui/derives/derive-hygiene.rs:112:54: 112:57
        _28 = deref_copy (_13.0: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:112:54: 112:57
        _18 = discriminant((*_28));      // scope 2 at ui/derives/derive-hygiene.rs:112:54: 112:57
        switchInt(move _18) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 2 at ui/derives/derive-hygiene.rs:112:54: 112:57
    }

    bb4: {
        _29 = deref_copy (_13.1: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:112:54: 112:57
        _16 = discriminant((*_29));      // scope 2 at ui/derives/derive-hygiene.rs:112:54: 112:57
        switchInt(move _16) -> [0: bb7, otherwise: bb5]; // scope 2 at ui/derives/derive-hygiene.rs:112:54: 112:57
    }

    bb5: {
        unreachable;                     // scope 5 at ui/derives/derive-hygiene.rs:112:54: 112:57
    }

    bb6: {
        _30 = deref_copy (_13.1: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:112:54: 112:57
        _17 = discriminant((*_30));      // scope 2 at ui/derives/derive-hygiene.rs:112:54: 112:57
        switchInt(move _17) -> [1: bb8, otherwise: bb5]; // scope 2 at ui/derives/derive-hygiene.rs:112:54: 112:57
    }

    bb7: {
        _31 = deref_copy (_13.0: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _19 = &(((*_31) as C).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _32 = deref_copy (_13.1: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _20 = &(((*_32) as C).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _21 = _19;                       // scope 3 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _22 = _20;                       // scope 3 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _0 = <C as Ord>::cmp(move _21, move _22) -> bb9; // scope 3 at ui/derives/derive-hygiene.rs:114:11: 114:12
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:114:11: 114:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a C, &'b C) -> std::cmp::Ordering {<C as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb8: {
        _33 = deref_copy (_13.0: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _23 = &(((*_33) as B).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _34 = deref_copy (_13.1: &Z<C>); // scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _24 = &(((*_34) as B).0: C);     // scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _25 = _23;                       // scope 4 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _26 = _24;                       // scope 4 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _0 = <C as Ord>::cmp(move _25, move _26) -> bb9; // scope 4 at ui/derives/derive-hygiene.rs:115:13: 115:17
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:115:13: 115:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a C, &'b C) -> std::cmp::Ordering {<C as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:112:57: 112:57
    }
}

fn <impl at ui/derives/derive-hygiene.rs:112:59: 112:64>::fmt(_1: &Z<C>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:112:59: 112:64
    debug f => _2;                       // in scope 0 at ui/derives/derive-hygiene.rs:112:59: 112:64
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/derives/derive-hygiene.rs:112:59: 112:64
    let mut _3: isize;                   // in scope 0 at ui/derives/derive-hygiene.rs:112:59: 112:64
    let _4: &C;                          // in scope 0 at ui/derives/derive-hygiene.rs:114:11: 114:12
    let mut _5: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/derives/derive-hygiene.rs:112:59: 112:64
    let mut _6: &str;                    // in scope 0 at ui/derives/derive-hygiene.rs:112:59: 112:64
    let _7: &str;                        // in scope 0 at ui/derives/derive-hygiene.rs:112:59: 112:64
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/derives/derive-hygiene.rs:114:11: 114:12
    let mut _9: &&C;                     // in scope 0 at ui/derives/derive-hygiene.rs:114:11: 114:12
    let _10: &&C;                        // in scope 0 at ui/derives/derive-hygiene.rs:114:11: 114:12
    let _11: &C;                         // in scope 0 at ui/derives/derive-hygiene.rs:115:13: 115:17
    let mut _12: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/derives/derive-hygiene.rs:112:59: 112:64
    let mut _13: &str;                   // in scope 0 at ui/derives/derive-hygiene.rs:112:59: 112:64
    let _14: &str;                       // in scope 0 at ui/derives/derive-hygiene.rs:112:59: 112:64
    let mut _15: &str;                   // in scope 0 at ui/derives/derive-hygiene.rs:115:13: 115:17
    let _16: &str;                       // in scope 0 at ui/derives/derive-hygiene.rs:115:13: 115:17
    let mut _17: &dyn std::fmt::Debug;   // in scope 0 at ui/derives/derive-hygiene.rs:115:13: 115:17
    let mut _18: &&C;                    // in scope 0 at ui/derives/derive-hygiene.rs:115:13: 115:17
    let _19: &&C;                        // in scope 0 at ui/derives/derive-hygiene.rs:115:13: 115:17
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/derives/derive-hygiene.rs:114:11: 114:12
    }
    scope 2 {
        debug __self_0 => _11;           // in scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/derives/derive-hygiene.rs:112:59: 112:64
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/derives/derive-hygiene.rs:112:59: 112:64
    }

    bb1: {
        _11 = &(((*_1) as B).0: C);      // scope 0 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _12 = &mut (*_2);                // scope 2 at ui/derives/derive-hygiene.rs:112:59: 112:64
        _14 = const "B";                 // scope 2 at ui/derives/derive-hygiene.rs:112:59: 112:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:112:59: 112:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = _14;                       // scope 2 at ui/derives/derive-hygiene.rs:112:59: 112:64
        _16 = const "C";                 // scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:115:13: 115:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _15 = _16;                       // scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _19 = &_11;                      // scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _18 = _19;                       // scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _17 = move _18 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _12, move _13, move _15, move _17) -> bb4; // scope 2 at ui/derives/derive-hygiene.rs:112:59: 112:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:112:59: 112:64
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/derives/derive-hygiene.rs:112:59: 112:64
    }

    bb3: {
        _4 = &(((*_1) as C).0: C);       // scope 0 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _5 = &mut (*_2);                 // scope 1 at ui/derives/derive-hygiene.rs:112:59: 112:64
        _7 = const "C";                  // scope 1 at ui/derives/derive-hygiene.rs:112:59: 112:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:112:59: 112:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 1 at ui/derives/derive-hygiene.rs:112:59: 112:64
        _10 = &_4;                       // scope 1 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _9 = _10;                        // scope 1 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _5, move _6, move _8) -> bb4; // scope 1 at ui/derives/derive-hygiene.rs:112:59: 112:64
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:112:59: 112:64
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:112:64: 112:64
    }
}

fn <impl at ui/derives/derive-hygiene.rs:112:66: 112:70>::hash(_1: &Z<C>, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-hygiene.rs:112:66: 112:70
    debug state => _2;                   // in scope 0 at ui/derives/derive-hygiene.rs:112:66: 112:70
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:112:66: 112:70
    let _3: isize;                       // in scope 0 at ui/derives/derive-hygiene.rs:112:66: 112:70
    let mut _4: &Z<C>;                   // in scope 0 at ui/derives/derive-hygiene.rs:112:66: 112:70
    let _5: ();                          // in scope 0 at ui/derives/derive-hygiene.rs:112:66: 112:70
    let mut _6: &isize;                  // in scope 0 at ui/derives/derive-hygiene.rs:112:66: 112:70
    let _7: &isize;                      // in scope 0 at ui/derives/derive-hygiene.rs:112:66: 112:70
    let mut _8: &mut __H;                // in scope 0 at ui/derives/derive-hygiene.rs:112:66: 112:70
    let mut _9: isize;                   // in scope 0 at ui/derives/derive-hygiene.rs:112:66: 112:70
    let mut _11: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:114:11: 114:12
    let mut _12: &mut __H;               // in scope 0 at ui/derives/derive-hygiene.rs:112:66: 112:70
    let mut _14: &C;                     // in scope 0 at ui/derives/derive-hygiene.rs:115:13: 115:17
    let mut _15: &mut __H;               // in scope 0 at ui/derives/derive-hygiene.rs:112:66: 112:70
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/derives/derive-hygiene.rs:112:66: 112:70
        let _10: &C;                     // in scope 1 at ui/derives/derive-hygiene.rs:114:11: 114:12
        let _13: &C;                     // in scope 1 at ui/derives/derive-hygiene.rs:115:13: 115:17
        scope 2 {
            debug __self_0 => _10;       // in scope 2 at ui/derives/derive-hygiene.rs:114:11: 114:12
        }
        scope 3 {
            debug __self_0 => _13;       // in scope 3 at ui/derives/derive-hygiene.rs:115:13: 115:17
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/derives/derive-hygiene.rs:112:66: 112:70
        _3 = discriminant((*_4));        // scope 0 at ui/derives/derive-hygiene.rs:112:66: 112:70
        _7 = &_3;                        // scope 1 at ui/derives/derive-hygiene.rs:112:66: 112:70
        _6 = _7;                         // scope 1 at ui/derives/derive-hygiene.rs:112:66: 112:70
        _8 = &mut (*_2);                 // scope 1 at ui/derives/derive-hygiene.rs:112:66: 112:70
        _5 = <isize as Hash>::hash::<__H>(move _6, move _8) -> bb1; // scope 1 at ui/derives/derive-hygiene.rs:112:66: 112:70
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:112:66: 112:70
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b mut __H) {<isize as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = discriminant((*_1));        // scope 1 at ui/derives/derive-hygiene.rs:112:66: 112:70
        switchInt(move _9) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 1 at ui/derives/derive-hygiene.rs:112:66: 112:70
    }

    bb2: {
        _13 = &(((*_1) as B).0: C);      // scope 1 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _14 = _13;                       // scope 3 at ui/derives/derive-hygiene.rs:115:13: 115:17
        _15 = &mut (*_2);                // scope 3 at ui/derives/derive-hygiene.rs:112:66: 112:70
        _0 = <C as Hash>::hash::<__H>(move _14, move _15) -> bb5; // scope 3 at ui/derives/derive-hygiene.rs:115:13: 115:17
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:115:13: 115:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a C, &'b mut __H) {<C as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 1 at ui/derives/derive-hygiene.rs:112:66: 112:70
    }

    bb4: {
        _10 = &(((*_1) as C).0: C);      // scope 1 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _11 = _10;                       // scope 2 at ui/derives/derive-hygiene.rs:114:11: 114:12
        _12 = &mut (*_2);                // scope 2 at ui/derives/derive-hygiene.rs:112:66: 112:70
        _0 = <C as Hash>::hash::<__H>(move _11, move _12) -> bb5; // scope 2 at ui/derives/derive-hygiene.rs:114:11: 114:12
                                         // mir::Constant
                                         // + span: ui/derives/derive-hygiene.rs:114:11: 114:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a C, &'b mut __H) {<C as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:112:70: 112:70
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-hygiene.rs:121:11: 121:11

    bb0: {
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:121:13: 121:13
    }
}

fn __H::V(_1: i32) -> __H {
    let mut _0: __H;                     // return place in scope 0 at ui/derives/derive-hygiene.rs:45:12: 45:13

    bb0: {
        _0 = __H::V(move _1);            // scope 0 at ui/derives/derive-hygiene.rs:45:12: 45:13
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:45:12: 45:13
    }
}

// MIR FOR CTFE
fn __H::V(_1: i32) -> __H {
    let mut _0: __H;                     // return place in scope 0 at ui/derives/derive-hygiene.rs:45:12: 45:13

    bb0: {
        _0 = __H::V(move _1);            // scope 0 at ui/derives/derive-hygiene.rs:45:12: 45:13
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:45:12: 45:13
    }
}

fn Y(_1: B) -> Y<B> {
    let mut _0: Y<B>;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:57:1: 57:12

    bb0: {
        _0 = Y::<B>(move _1);            // scope 0 at ui/derives/derive-hygiene.rs:57:1: 57:12
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:57:1: 57:12
    }
}

// MIR FOR CTFE
fn Y(_1: B) -> Y<B> {
    let mut _0: Y<B>;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:57:1: 57:12

    bb0: {
        _0 = Y::<B>(move _1);            // scope 0 at ui/derives/derive-hygiene.rs:57:1: 57:12
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:57:1: 57:12
    }
}

fn Z::C(_1: C) -> Z<C> {
    let mut _0: Z<C>;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:63:5: 63:6

    bb0: {
        _0 = Z::<C>::C(move _1);         // scope 0 at ui/derives/derive-hygiene.rs:63:5: 63:6
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:63:5: 63:6
    }
}

// MIR FOR CTFE
fn Z::C(_1: C) -> Z<C> {
    let mut _0: Z<C>;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:63:5: 63:6

    bb0: {
        _0 = Z::<C>::C(move _1);         // scope 0 at ui/derives/derive-hygiene.rs:63:5: 63:6
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:63:5: 63:6
    }
}

fn NON_MODULE::__H::V(_1: i32) -> NON_MODULE::__H {
    let mut _0: NON_MODULE::__H;         // return place in scope 0 at ui/derives/derive-hygiene.rs:71:16: 71:17

    bb0: {
        _0 = NON_MODULE::__H::V(move _1); // scope 0 at ui/derives/derive-hygiene.rs:71:16: 71:17
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:71:16: 71:17
    }
}

// MIR FOR CTFE
fn NON_MODULE::__H::V(_1: i32) -> NON_MODULE::__H {
    let mut _0: NON_MODULE::__H;         // return place in scope 0 at ui/derives/derive-hygiene.rs:71:16: 71:17

    bb0: {
        _0 = NON_MODULE::__H::V(move _1); // scope 0 at ui/derives/derive-hygiene.rs:71:16: 71:17
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:71:16: 71:17
    }
}

fn NON_MODULE::Y(_1: B) -> NON_MODULE::Y<B> {
    let mut _0: NON_MODULE::Y<B>;        // return place in scope 0 at ui/derives/derive-hygiene.rs:83:5: 83:16

    bb0: {
        _0 = NON_MODULE::Y::<B>(move _1); // scope 0 at ui/derives/derive-hygiene.rs:83:5: 83:16
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:83:5: 83:16
    }
}

// MIR FOR CTFE
fn NON_MODULE::Y(_1: B) -> NON_MODULE::Y<B> {
    let mut _0: NON_MODULE::Y<B>;        // return place in scope 0 at ui/derives/derive-hygiene.rs:83:5: 83:16

    bb0: {
        _0 = NON_MODULE::Y::<B>(move _1); // scope 0 at ui/derives/derive-hygiene.rs:83:5: 83:16
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:83:5: 83:16
    }
}

fn NON_MODULE::Z::C(_1: C) -> NON_MODULE::Z<C> {
    let mut _0: NON_MODULE::Z<C>;        // return place in scope 0 at ui/derives/derive-hygiene.rs:89:9: 89:10

    bb0: {
        _0 = NON_MODULE::Z::<C>::C(move _1); // scope 0 at ui/derives/derive-hygiene.rs:89:9: 89:10
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:89:9: 89:10
    }
}

// MIR FOR CTFE
fn NON_MODULE::Z::C(_1: C) -> NON_MODULE::Z<C> {
    let mut _0: NON_MODULE::Z<C>;        // return place in scope 0 at ui/derives/derive-hygiene.rs:89:9: 89:10

    bb0: {
        _0 = NON_MODULE::Z::<C>::C(move _1); // scope 0 at ui/derives/derive-hygiene.rs:89:9: 89:10
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:89:9: 89:10
    }
}

fn __H::V(_1: i32) -> __H {
    let mut _0: __H;                     // return place in scope 0 at ui/derives/derive-hygiene.rs:96:16: 96:17

    bb0: {
        _0 = __H::V(move _1);            // scope 0 at ui/derives/derive-hygiene.rs:96:16: 96:17
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:96:16: 96:17
    }
}

// MIR FOR CTFE
fn __H::V(_1: i32) -> __H {
    let mut _0: __H;                     // return place in scope 0 at ui/derives/derive-hygiene.rs:96:16: 96:17

    bb0: {
        _0 = __H::V(move _1);            // scope 0 at ui/derives/derive-hygiene.rs:96:16: 96:17
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:96:16: 96:17
    }
}

fn Y(_1: B) -> Y<B> {
    let mut _0: Y<B>;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:108:5: 108:16

    bb0: {
        _0 = Y::<B>(move _1);            // scope 0 at ui/derives/derive-hygiene.rs:108:5: 108:16
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:108:5: 108:16
    }
}

// MIR FOR CTFE
fn Y(_1: B) -> Y<B> {
    let mut _0: Y<B>;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:108:5: 108:16

    bb0: {
        _0 = Y::<B>(move _1);            // scope 0 at ui/derives/derive-hygiene.rs:108:5: 108:16
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:108:5: 108:16
    }
}

fn Z::C(_1: C) -> Z<C> {
    let mut _0: Z<C>;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:114:9: 114:10

    bb0: {
        _0 = Z::<C>::C(move _1);         // scope 0 at ui/derives/derive-hygiene.rs:114:9: 114:10
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:114:9: 114:10
    }
}

// MIR FOR CTFE
fn Z::C(_1: C) -> Z<C> {
    let mut _0: Z<C>;                    // return place in scope 0 at ui/derives/derive-hygiene.rs:114:9: 114:10

    bb0: {
        _0 = Z::<C>::C(move _1);         // scope 0 at ui/derives/derive-hygiene.rs:114:9: 114:10
        return;                          // scope 0 at ui/derives/derive-hygiene.rs:114:9: 114:10
    }
}
