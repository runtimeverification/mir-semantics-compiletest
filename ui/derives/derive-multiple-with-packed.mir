// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/derives/derive-multiple-with-packed.rs:4:10: 4:15>::fmt(_1: &CacheRecordHeader, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-multiple-with-packed.rs:4:10: 4:15
    debug f => _2;                       // in scope 0 at ui/derives/derive-multiple-with-packed.rs:4:10: 4:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/derives/derive-multiple-with-packed.rs:4:10: 4:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/derives/derive-multiple-with-packed.rs:4:10: 4:15
    let mut _4: &str;                    // in scope 0 at ui/derives/derive-multiple-with-packed.rs:4:10: 4:15
    let _5: &str;                        // in scope 0 at ui/derives/derive-multiple-with-packed.rs:4:10: 4:15
    let mut _6: &str;                    // in scope 0 at ui/derives/derive-multiple-with-packed.rs:7:5: 7:15
    let _7: &str;                        // in scope 0 at ui/derives/derive-multiple-with-packed.rs:7:5: 7:15
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/derives/derive-multiple-with-packed.rs:7:5: 7:15
    let mut _9: &&u64;                   // in scope 0 at ui/derives/derive-multiple-with-packed.rs:7:5: 7:15
    let _10: &&u64;                      // in scope 0 at ui/derives/derive-multiple-with-packed.rs:7:5: 7:15
    let _11: &u64;                       // in scope 0 at ui/derives/derive-multiple-with-packed.rs:7:5: 7:15
    let _12: u64;                        // in scope 0 at ui/derives/derive-multiple-with-packed.rs:7:5: 7:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/derives/derive-multiple-with-packed.rs:4:10: 4:15
        _5 = const "CacheRecordHeader";  // scope 0 at ui/derives/derive-multiple-with-packed.rs:4:10: 4:15
                                         // mir::Constant
                                         // + span: ui/derives/derive-multiple-with-packed.rs:4:10: 4:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/derives/derive-multiple-with-packed.rs:4:10: 4:15
        _7 = const "field";              // scope 0 at ui/derives/derive-multiple-with-packed.rs:7:5: 7:15
                                         // mir::Constant
                                         // + span: ui/derives/derive-multiple-with-packed.rs:7:5: 7:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/derives/derive-multiple-with-packed.rs:7:5: 7:15
        _12 = ((*_1).0: u64);            // scope 0 at ui/derives/derive-multiple-with-packed.rs:7:5: 7:15
        _11 = &_12;                      // scope 0 at ui/derives/derive-multiple-with-packed.rs:7:5: 7:15
        _10 = &_11;                      // scope 0 at ui/derives/derive-multiple-with-packed.rs:7:5: 7:15
        _9 = _10;                        // scope 0 at ui/derives/derive-multiple-with-packed.rs:7:5: 7:15
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/derives/derive-multiple-with-packed.rs:7:5: 7:15
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _3, move _4, move _6, move _8) -> bb1; // scope 0 at ui/derives/derive-multiple-with-packed.rs:4:10: 4:15
                                         // mir::Constant
                                         // + span: ui/derives/derive-multiple-with-packed.rs:4:10: 4:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-multiple-with-packed.rs:4:15: 4:15
    }
}

fn <impl at ui/derives/derive-multiple-with-packed.rs:3:10: 3:15>::clone(_1: &CacheRecordHeader) -> CacheRecordHeader {
    debug self => _1;                    // in scope 0 at ui/derives/derive-multiple-with-packed.rs:3:10: 3:15
    let mut _0: CacheRecordHeader;       // return place in scope 0 at ui/derives/derive-multiple-with-packed.rs:3:10: 3:15
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/derives/derive-multiple-with-packed.rs:3:10: 3:15
        return;                          // scope 0 at ui/derives/derive-multiple-with-packed.rs:3:15: 3:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-multiple-with-packed.rs:10:11: 10:11

    bb0: {
        return;                          // scope 0 at ui/derives/derive-multiple-with-packed.rs:10:13: 10:13
    }
}
