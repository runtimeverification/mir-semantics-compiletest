// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/derives/derive-Debug-use-ufcs-tuple.rs:4:10: 4:15>::fmt(_1: &Foo<T>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:4:10: 4:15
    debug f => _2;                       // in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:4:10: 4:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:4:10: 4:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:4:10: 4:15
    let mut _4: &str;                    // in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:4:10: 4:15
    let _5: &str;                        // in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:4:10: 4:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:5:19: 5:24
    let mut _7: &&T;                     // in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:5:19: 5:24
    let _8: &&T;                         // in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:5:19: 5:24
    let _9: &T;                          // in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:5:19: 5:24

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:4:10: 4:15
        _5 = const "Foo";                // scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:4:10: 4:15
                                         // mir::Constant
                                         // + span: ui/derives/derive-Debug-use-ufcs-tuple.rs:4:10: 4:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:4:10: 4:15
        _9 = &((*_1).0: T);              // scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:5:19: 5:24
        _8 = &_9;                        // scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:5:19: 5:24
        _7 = _8;                         // scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:5:19: 5:24
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:5:19: 5:24
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:4:10: 4:15
                                         // mir::Constant
                                         // + span: ui/derives/derive-Debug-use-ufcs-tuple.rs:4:10: 4:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:4:15: 4:15
    }
}

fn Field::field(_1: &Self, _2: impl Sized) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:14:14: 14:19
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:14:36: 14:36
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38

    bb0: {
        _3 = begin_panic::<&str>(const "got into field") -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/derives/derive-Debug-use-ufcs-tuple.rs:15:16: 15:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1 (cleanup): {
        drop(_2) -> bb2;                 // scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:16:5: 16:6
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:14:5: 16:6
    }
}

fn Finish::finish(_1: &Self) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:19:15: 19:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:19:25: 19:52
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38

    bb0: {
        _2 = begin_panic::<&str>(const "got into finish"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/derives/derive-Debug-use-ufcs-tuple.rs:20:16: 20:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn Dt::debug_tuple(_1: &Self, _2: &str) -> () {
    debug self => _1;                    // in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:24:20: 24:25
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:24:36: 24:36
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38

    bb0: {
        _3 = begin_panic::<&str>(const "got into debug_tuple"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/derives/derive-Debug-use-ufcs-tuple.rs:25:16: 25:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:29:11: 29:11
    let _1: Foo<()>;                     // in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:30:9: 30:12
    let mut _2: (&&str, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &&str;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _4: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: std::string::String;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let mut _7: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _8: &[&str];                 // in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:31:35: 31:41
    let mut _9: &[&str; 1];              // in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:31:35: 31:41
    let _10: &[&str; 1];                 // in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:31:35: 31:41
    let mut _11: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _12: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _13: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _14: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _15: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:31:43: 31:46
    let mut _16: &Foo<()>;               // in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:31:43: 31:46
    let _17: &Foo<()>;                   // in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:31:43: 31:46
    let mut _20: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _21: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _22: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _23: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _25: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _26: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _27: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _28: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _29: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _30: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug foo => _1;                 // in scope 1 at ui/derives/derive-Debug-use-ufcs-tuple.rs:30:9: 30:12
        let _6: std::string::String;     // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
        let _18: &&str;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _19: &std::string::String;   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _32: &[&str; 1];         // in scope 1 at ui/derives/derive-Debug-use-ufcs-tuple.rs:31:35: 31:41
        let mut _33: &&str;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 2 {
            debug res => _6;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
        }
        scope 3 {
            debug left_val => _18;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _19;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _24: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 4 {
                debug kind => _24;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _33 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[1])) }
        _3 = _33;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _32 = const _;                   // scope 1 at ui/derives/derive-Debug-use-ufcs-tuple.rs:31:35: 31:41
                                         // mir::Constant
                                         // + span: ui/derives/derive-Debug-use-ufcs-tuple.rs:31:35: 31:41
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[0])) }
        _10 = _32;                       // scope 1 at ui/derives/derive-Debug-use-ufcs-tuple.rs:31:35: 31:41
        _9 = _10;                        // scope 1 at ui/derives/derive-Debug-use-ufcs-tuple.rs:31:35: 31:41
        _8 = move _9 as &[&str] (Pointer(Unsize)); // scope 1 at ui/derives/derive-Debug-use-ufcs-tuple.rs:31:35: 31:41
        _17 = &_1;                       // scope 1 at ui/derives/derive-Debug-use-ufcs-tuple.rs:31:43: 31:46
        _16 = _17;                       // scope 1 at ui/derives/derive-Debug-use-ufcs-tuple.rs:31:43: 31:46
        _15 = core::fmt::ArgumentV1::<'_>::new_debug::<Foo<()>>(move _16) -> bb1; // scope 1 at ui/derives/derive-Debug-use-ufcs-tuple.rs:31:43: 31:46
                                         // mir::Constant
                                         // + span: ui/derives/derive-Debug-use-ufcs-tuple.rs:31:43: 31:46
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b Foo<()>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Foo<()>>}, val: Value(<ZST>) }
    }

    bb1: {
        _14 = [move _15];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _13 = &_14;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _12 = _13;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _11 = move _12 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _7 = Arguments::<'_>::new_v1(move _8, move _11) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = format(move _7) -> bb3;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = move _6;                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _4 = &_5;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _4);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _18 = (_2.0: &&str);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _19 = (_2.1: &std::string::String); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _22 = _18;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _23 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _21 = <&str as PartialEq<String>>::eq(move _22, move _23) -> [return: bb4, unwind: bb8]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b String) -> bool {<&str as PartialEq<String>>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _20 = Not(move _21);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _20) -> [0: bb6, otherwise: bb5]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _24 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _28 = _18;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _27 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _30 = _19;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = _30;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _31 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _25 = core::panicking::assert_failed::<&str, String>(move _26, move _27, move _29, move _31) -> bb8; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, String>}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_5) -> bb7;                 // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb7: {
        return;                          // scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:32:2: 32:2
    }

    bb8 (cleanup): {
        drop(_5) -> bb9;                 // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:29:1: 32:2
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:31:35: 31:41
    let mut _1: [&str; 1];               // in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:31:35: 31:41

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:31:35: 31:41
                                         // mir::Constant
                                         // + span: ui/derives/derive-Debug-use-ufcs-tuple.rs:31:35: 31:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:31:35: 31:41
        return;                          // scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:31:35: 31:41
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &str;                    // in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:31:16: 31:25

    bb0: {
        _1 = const "Foo(())";            // scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:31:16: 31:25
                                         // mir::Constant
                                         // + span: ui/derives/derive-Debug-use-ufcs-tuple.rs:31:16: 31:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;                  // return place in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:5:1: 5:18

    bb0: {
        _0 = Foo::<T>(move _1);          // scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:5:1: 5:18
        return;                          // scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:5:1: 5:18
    }
}

// MIR FOR CTFE
fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;                  // return place in scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:5:1: 5:18

    bb0: {
        _0 = Foo::<T>(move _1);          // scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:5:1: 5:18
        return;                          // scope 0 at ui/derives/derive-Debug-use-ufcs-tuple.rs:5:1: 5:18
    }
}
