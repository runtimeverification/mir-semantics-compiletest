// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Example::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/derives/derive-macro-const-default.rs:3:36: 3:42

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/derives/derive-macro-const-default.rs:3:36: 3:42
        return;                          // scope 0 at ui/derives/derive-macro-const-default.rs:3:36: 3:42
    }
}

Example::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/derives/derive-macro-const-default.rs:3:48: 3:49

    bb0: {
        _0 = const N;                    // scope 0 at ui/derives/derive-macro-const-default.rs:3:48: 3:49
        return;                          // scope 0 at ui/derives/derive-macro-const-default.rs:3:48: 3:49
    }
}

<impl at ui/derives/derive-macro-const-default.rs:2:10: 2:15>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/derives/derive-macro-const-default.rs:3:25: 3:26

    bb0: {
        _0 = const N;                    // scope 0 at ui/derives/derive-macro-const-default.rs:3:25: 3:26
        return;                          // scope 0 at ui/derives/derive-macro-const-default.rs:3:25: 3:26
    }
}

fn <impl at ui/derives/derive-macro-const-default.rs:2:10: 2:15>::clone(_1: &Example<T, N>) -> Example<T, N> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-macro-const-default.rs:2:10: 2:15
    let mut _0: Example<T, N>;           // return place in scope 0 at ui/derives/derive-macro-const-default.rs:2:10: 2:15
    let mut _2: [T; N];                  // in scope 0 at ui/derives/derive-macro-const-default.rs:3:44: 3:50
    let mut _3: &[T; N];                 // in scope 0 at ui/derives/derive-macro-const-default.rs:3:44: 3:50
    let _4: &[T; N];                     // in scope 0 at ui/derives/derive-macro-const-default.rs:3:44: 3:50

    bb0: {
        _4 = &((*_1).0: [T; N]);         // scope 0 at ui/derives/derive-macro-const-default.rs:3:44: 3:50
        _3 = _4;                         // scope 0 at ui/derives/derive-macro-const-default.rs:3:44: 3:50
        _2 = <[T; N] as Clone>::clone(move _3) -> bb1; // scope 0 at ui/derives/derive-macro-const-default.rs:3:44: 3:50
                                         // mir::Constant
                                         // + span: ui/derives/derive-macro-const-default.rs:3:44: 3:50
                                         // + literal: Const { ty: for<'a> fn(&'a [T; N]) -> [T; N] {<[T; N] as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Example::<T, N>(move _2);   // scope 0 at ui/derives/derive-macro-const-default.rs:2:10: 2:15
        return;                          // scope 0 at ui/derives/derive-macro-const-default.rs:2:15: 2:15
    }
}

<impl at ui/derives/derive-macro-const-default.rs:2:10: 2:15>::clone::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/derives/derive-macro-const-default.rs:2:10: 2:15

    bb0: {
        _0 = const N;                    // scope 0 at ui/derives/derive-macro-const-default.rs:2:10: 2:15
        return;                          // scope 0 at ui/derives/derive-macro-const-default.rs:2:10: 2:15
    }
}

<impl at ui/derives/derive-macro-const-default.rs:2:17: 2:26>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/derives/derive-macro-const-default.rs:3:25: 3:26

    bb0: {
        _0 = const N;                    // scope 0 at ui/derives/derive-macro-const-default.rs:3:25: 3:26
        return;                          // scope 0 at ui/derives/derive-macro-const-default.rs:3:25: 3:26
    }
}

<impl at ui/derives/derive-macro-const-default.rs:2:17: 2:26>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/derives/derive-macro-const-default.rs:3:25: 3:26

    bb0: {
        _0 = const N;                    // scope 0 at ui/derives/derive-macro-const-default.rs:3:25: 3:26
        return;                          // scope 0 at ui/derives/derive-macro-const-default.rs:3:25: 3:26
    }
}

fn <impl at ui/derives/derive-macro-const-default.rs:2:17: 2:26>::eq(_1: &Example<T, N>, _2: &Example<T, N>) -> bool {
    debug self => _1;                    // in scope 0 at ui/derives/derive-macro-const-default.rs:2:17: 2:26
    debug other => _2;                   // in scope 0 at ui/derives/derive-macro-const-default.rs:2:17: 2:26
    let mut _0: bool;                    // return place in scope 0 at ui/derives/derive-macro-const-default.rs:2:17: 2:26
    let mut _3: &[T; N];                 // in scope 0 at ui/derives/derive-macro-const-default.rs:3:44: 3:50
    let mut _4: &[T; N];                 // in scope 0 at ui/derives/derive-macro-const-default.rs:3:44: 3:50

    bb0: {
        _3 = &((*_1).0: [T; N]);         // scope 0 at ui/derives/derive-macro-const-default.rs:3:44: 3:50
        _4 = &((*_2).0: [T; N]);         // scope 0 at ui/derives/derive-macro-const-default.rs:3:44: 3:50
        _0 = <[T; N] as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/derives/derive-macro-const-default.rs:3:44: 3:50
                                         // mir::Constant
                                         // + span: ui/derives/derive-macro-const-default.rs:3:44: 3:50
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [T; N], &'b [T; N]) -> bool {<[T; N] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-macro-const-default.rs:2:26: 2:26
    }
}

<impl at ui/derives/derive-macro-const-default.rs:2:17: 2:26>::eq::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/derives/derive-macro-const-default.rs:2:17: 2:26

    bb0: {
        _0 = const N;                    // scope 0 at ui/derives/derive-macro-const-default.rs:2:17: 2:26
        return;                          // scope 0 at ui/derives/derive-macro-const-default.rs:2:17: 2:26
    }
}

<impl at ui/derives/derive-macro-const-default.rs:2:28: 2:33>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/derives/derive-macro-const-default.rs:3:25: 3:26

    bb0: {
        _0 = const N;                    // scope 0 at ui/derives/derive-macro-const-default.rs:3:25: 3:26
        return;                          // scope 0 at ui/derives/derive-macro-const-default.rs:3:25: 3:26
    }
}

fn <impl at ui/derives/derive-macro-const-default.rs:2:28: 2:33>::fmt(_1: &Example<T, N>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/derives/derive-macro-const-default.rs:2:28: 2:33
    debug f => _2;                       // in scope 0 at ui/derives/derive-macro-const-default.rs:2:28: 2:33
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/derives/derive-macro-const-default.rs:2:28: 2:33
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/derives/derive-macro-const-default.rs:2:28: 2:33
    let mut _4: &str;                    // in scope 0 at ui/derives/derive-macro-const-default.rs:2:28: 2:33
    let _5: &str;                        // in scope 0 at ui/derives/derive-macro-const-default.rs:2:28: 2:33
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/derives/derive-macro-const-default.rs:3:44: 3:50
    let mut _7: &&[T; N];                // in scope 0 at ui/derives/derive-macro-const-default.rs:3:44: 3:50
    let _8: &&[T; N];                    // in scope 0 at ui/derives/derive-macro-const-default.rs:3:44: 3:50
    let _9: &[T; N];                     // in scope 0 at ui/derives/derive-macro-const-default.rs:3:44: 3:50

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/derives/derive-macro-const-default.rs:2:28: 2:33
        _5 = const "Example";            // scope 0 at ui/derives/derive-macro-const-default.rs:2:28: 2:33
                                         // mir::Constant
                                         // + span: ui/derives/derive-macro-const-default.rs:2:28: 2:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/derives/derive-macro-const-default.rs:2:28: 2:33
        _9 = &((*_1).0: [T; N]);         // scope 0 at ui/derives/derive-macro-const-default.rs:3:44: 3:50
        _8 = &_9;                        // scope 0 at ui/derives/derive-macro-const-default.rs:3:44: 3:50
        _7 = _8;                         // scope 0 at ui/derives/derive-macro-const-default.rs:3:44: 3:50
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/derives/derive-macro-const-default.rs:3:44: 3:50
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/derives/derive-macro-const-default.rs:2:28: 2:33
                                         // mir::Constant
                                         // + span: ui/derives/derive-macro-const-default.rs:2:28: 2:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/derives/derive-macro-const-default.rs:2:33: 2:33
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/derives/derive-macro-const-default.rs:5:11: 5:11
    let _1: Example<(), 16>;             // in scope 0 at ui/derives/derive-macro-const-default.rs:6:9: 6:10
    let mut _3: &Example<(), 16>;        // in scope 0 at ui/derives/derive-macro-const-default.rs:7:13: 7:22
    let mut _4: bool;                    // in scope 0 at ui/derives/derive-macro-const-default.rs:8:8: 8:14
    let mut _5: &Example<(), 16>;        // in scope 0 at ui/derives/derive-macro-const-default.rs:8:8: 8:9
    let mut _6: &Example<(), 16>;        // in scope 0 at ui/derives/derive-macro-const-default.rs:8:13: 8:14
    let mut _9: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _10: &[&str];                // in scope 0 at ui/derives/derive-macro-const-default.rs:9:26: 9:32
    let mut _11: &[&str; 1];             // in scope 0 at ui/derives/derive-macro-const-default.rs:9:26: 9:32
    let _12: &[&str; 1];                 // in scope 0 at ui/derives/derive-macro-const-default.rs:9:26: 9:32
    let mut _13: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _14: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _16: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _17: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/derives/derive-macro-const-default.rs:9:34: 9:35
    let mut _18: &Example<(), 16>;       // in scope 0 at ui/derives/derive-macro-const-default.rs:9:34: 9:35
    let _19: &Example<(), 16>;           // in scope 0 at ui/derives/derive-macro-const-default.rs:9:34: 9:35
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/derives/derive-macro-const-default.rs:6:9: 6:10
        let _2: Example<(), 16>;         // in scope 1 at ui/derives/derive-macro-const-default.rs:7:9: 7:10
        scope 2 {
            debug b => _2;               // in scope 2 at ui/derives/derive-macro-const-default.rs:7:9: 7:10
            let _7: std::string::String; // in scope 2 at ui/derives/derive-macro-const-default.rs:9:13: 9:15
            let _8: std::string::String; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
            let mut _20: &[&str; 1];     // in scope 2 at ui/derives/derive-macro-const-default.rs:9:26: 9:32
            scope 3 {
                debug _c => _7;          // in scope 3 at ui/derives/derive-macro-const-default.rs:9:13: 9:15
            }
            scope 4 {
                debug res => _8;         // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
            }
        }
    }

    bb0: {
        _3 = &_1;                        // scope 1 at ui/derives/derive-macro-const-default.rs:7:13: 7:22
        _2 = <Example<(), 16> as Clone>::clone(move _3) -> bb1; // scope 1 at ui/derives/derive-macro-const-default.rs:7:13: 7:22
                                         // mir::Constant
                                         // + span: ui/derives/derive-macro-const-default.rs:7:15: 7:20
                                         // + literal: Const { ty: for<'a> fn(&'a Example<(), 16>) -> Example<(), 16> {<Example<(), 16> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_1;                        // scope 2 at ui/derives/derive-macro-const-default.rs:8:8: 8:9
        _6 = &_2;                        // scope 2 at ui/derives/derive-macro-const-default.rs:8:13: 8:14
        _4 = <Example<(), 16> as PartialEq>::ne(move _5, move _6) -> bb2; // scope 2 at ui/derives/derive-macro-const-default.rs:8:8: 8:14
                                         // mir::Constant
                                         // + span: ui/derives/derive-macro-const-default.rs:8:8: 8:14
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Example<(), 16>, &'b Example<(), 16>) -> bool {<Example<(), 16> as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb2: {
        switchInt(move _4) -> [0: bb7, otherwise: bb3]; // scope 2 at ui/derives/derive-macro-const-default.rs:8:8: 8:14
    }

    bb3: {
        _20 = const _;                   // scope 2 at ui/derives/derive-macro-const-default.rs:9:26: 9:32
                                         // mir::Constant
                                         // + span: ui/derives/derive-macro-const-default.rs:9:26: 9:32
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[0])) }
        _12 = _20;                       // scope 2 at ui/derives/derive-macro-const-default.rs:9:26: 9:32
        _11 = _12;                       // scope 2 at ui/derives/derive-macro-const-default.rs:9:26: 9:32
        _10 = move _11 as &[&str] (Pointer(Unsize)); // scope 2 at ui/derives/derive-macro-const-default.rs:9:26: 9:32
        _19 = &_1;                       // scope 2 at ui/derives/derive-macro-const-default.rs:9:34: 9:35
        _18 = _19;                       // scope 2 at ui/derives/derive-macro-const-default.rs:9:34: 9:35
        _17 = core::fmt::ArgumentV1::<'_>::new_debug::<Example<(), 16>>(move _18) -> bb4; // scope 2 at ui/derives/derive-macro-const-default.rs:9:34: 9:35
                                         // mir::Constant
                                         // + span: ui/derives/derive-macro-const-default.rs:9:34: 9:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b Example<(), 16>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Example<(), 16>>}, val: Value(<ZST>) }
    }

    bb4: {
        _16 = [move _17];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _15 = &_16;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _13 = move _14 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _9 = Arguments::<'_>::new_v1(move _10, move _13) -> bb5; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb5: {
        _8 = format(move _9) -> bb6;     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = move _8;                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        drop(_7) -> bb7;                 // scope 2 at ui/derives/derive-macro-const-default.rs:10:5: 10:6
    }

    bb7: {
        return;                          // scope 0 at ui/derives/derive-macro-const-default.rs:11:2: 11:2
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/derives/derive-macro-const-default.rs:9:26: 9:32
    let mut _1: [&str; 1];               // in scope 0 at ui/derives/derive-macro-const-default.rs:9:26: 9:32

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/derives/derive-macro-const-default.rs:9:26: 9:32
                                         // mir::Constant
                                         // + span: ui/derives/derive-macro-const-default.rs:9:26: 9:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/derives/derive-macro-const-default.rs:9:26: 9:32
        return;                          // scope 0 at ui/derives/derive-macro-const-default.rs:9:26: 9:32
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/derives/derive-macro-const-default.rs:6:26: 6:28

    bb0: {
        _0 = const 16_usize;             // scope 0 at ui/derives/derive-macro-const-default.rs:6:26: 6:28
        return;                          // scope 0 at ui/derives/derive-macro-const-default.rs:6:26: 6:28
    }
}

fn Example(_1: [T; N]) -> Example<T, N> {
    let mut _0: Example<T, N>;           // return place in scope 0 at ui/derives/derive-macro-const-default.rs:3:1: 3:43

    bb0: {
        _0 = Example::<T, N>(move _1);   // scope 0 at ui/derives/derive-macro-const-default.rs:3:1: 3:43
        return;                          // scope 0 at ui/derives/derive-macro-const-default.rs:3:1: 3:43
    }
}

// MIR FOR CTFE
fn Example(_1: [T; N]) -> Example<T, N> {
    let mut _0: Example<T, N>;           // return place in scope 0 at ui/derives/derive-macro-const-default.rs:3:1: 3:43

    bb0: {
        _0 = Example::<T, N>(move _1);   // scope 0 at ui/derives/derive-macro-const-default.rs:3:1: 3:43
        return;                          // scope 0 at ui/derives/derive-macro-const-default.rs:3:1: 3:43
    }
}
