// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: i8;
    let _2: ();
    let mut _3: &mut i8;
    let mut _4: (&i8, &i8);
    let mut _5: &i8;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i8;
    let mut _11: i8;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: i16;
    let _16: ();
    let mut _17: &mut i16;
    let mut _18: (&i16, &i16);
    let mut _19: &i16;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: i16;
    let mut _25: i16;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: f32;
    let _30: ();
    let mut _31: &mut f32;
    let mut _32: (&f32, &f32);
    let mut _33: &f32;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: f32;
    let mut _39: f32;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: f64;
    let _44: ();
    let mut _45: &mut f64;
    let mut _46: (&f64, &f64);
    let mut _47: &f64;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: f64;
    let mut _53: f64;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: i64;
    let _58: ();
    let mut _59: &mut i64;
    let mut _60: (&i64, &i64);
    let mut _61: &i64;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: i64;
    let mut _67: i64;
    let _69: !;
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _71: u8;
    let _72: ();
    let mut _73: &mut u8;
    let mut _74: (&u8, &u8);
    let mut _75: &u8;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: u8;
    let mut _81: u8;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: u16;
    let _86: ();
    let mut _87: &mut u16;
    let mut _88: (&u16, &u16);
    let mut _89: &u16;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: u16;
    let mut _95: u16;
    let _97: !;
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _99: u32;
    let _100: ();
    let mut _101: &mut u32;
    let mut _102: (&u32, &u32);
    let mut _103: &u32;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: u32;
    let mut _109: u32;
    let _111: !;
    let mut _112: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _113: u64;
    let _114: ();
    let mut _115: &mut u64;
    let mut _116: (&u64, &u64);
    let mut _117: &u64;
    let mut _120: bool;
    let mut _121: bool;
    let mut _122: u64;
    let mut _123: u64;
    let _125: !;
    let mut _126: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _127: u64;
    let _128: ();
    let mut _129: &mut u64;
    let mut _130: (&u64, &u64);
    let mut _131: &u64;
    let mut _134: bool;
    let mut _135: bool;
    let mut _136: u64;
    let mut _137: u64;
    let _139: !;
    let mut _140: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _6: &i8;
        let _7: &i8;
        let mut _159: &i8;
        let mut _160: &i8;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
    }
    scope 4 {
        debug x => _15;
        let _20: &i16;
        let _21: &i16;
        let mut _157: &i16;
        let mut _158: &i16;
        scope 5 {
            debug left_val => _20;
            debug right_val => _21;
            let _26: core::panicking::AssertKind;
            scope 6 {
                debug kind => _26;
            }
        }
    }
    scope 7 {
        debug x => _29;
        let _34: &f32;
        let _35: &f32;
        let mut _155: &f32;
        let mut _156: &f32;
        scope 8 {
            debug left_val => _34;
            debug right_val => _35;
            let _40: core::panicking::AssertKind;
            scope 9 {
                debug kind => _40;
            }
        }
    }
    scope 10 {
        debug x => _43;
        let _48: &f64;
        let _49: &f64;
        let mut _153: &f64;
        let mut _154: &f64;
        scope 11 {
            debug left_val => _48;
            debug right_val => _49;
            let _54: core::panicking::AssertKind;
            scope 12 {
                debug kind => _54;
            }
        }
    }
    scope 13 {
        debug x => _57;
        let _62: &i64;
        let _63: &i64;
        let mut _151: &i64;
        let mut _152: &i64;
        scope 14 {
            debug left_val => _62;
            debug right_val => _63;
            let _68: core::panicking::AssertKind;
            scope 15 {
                debug kind => _68;
            }
        }
    }
    scope 16 {
        debug x => _71;
        let _76: &u8;
        let _77: &u8;
        let mut _149: &u8;
        let mut _150: &u8;
        scope 17 {
            debug left_val => _76;
            debug right_val => _77;
            let _82: core::panicking::AssertKind;
            scope 18 {
                debug kind => _82;
            }
        }
    }
    scope 19 {
        debug x => _85;
        let _90: &u16;
        let _91: &u16;
        let mut _147: &u16;
        let mut _148: &u16;
        scope 20 {
            debug left_val => _90;
            debug right_val => _91;
            let _96: core::panicking::AssertKind;
            scope 21 {
                debug kind => _96;
            }
        }
    }
    scope 22 {
        debug x => _99;
        let _104: &u32;
        let _105: &u32;
        let mut _145: &u32;
        let mut _146: &u32;
        scope 23 {
            debug left_val => _104;
            debug right_val => _105;
            let _110: core::panicking::AssertKind;
            scope 24 {
                debug kind => _110;
            }
        }
    }
    scope 25 {
        debug x => _113;
        let _118: &u64;
        let _119: &u64;
        let mut _143: &u64;
        let mut _144: &u32;
        scope 26 {
            debug left_val => _118;
            debug right_val => _119;
            let _124: core::panicking::AssertKind;
            scope 27 {
                debug kind => _124;
            }
        }
    }
    scope 28 {
        debug x => _127;
        let _132: &u64;
        let _133: &u64;
        let mut _141: &u64;
        let mut _142: &i16;
        scope 29 {
            debug left_val => _132;
            debug right_val => _133;
            let _138: core::panicking::AssertKind;
            scope 30 {
                debug kind => _138;
            }
        }
    }

    bb0: {
        _1 = const 3_i8;
        _3 = &mut _1;
        _160 = const _;
        _2 = <i8 as AddAssign<&i8>>::add_assign(move _3, _160) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_1;
        _159 = const _;
        _4 = (move _5, _159);
        _6 = (_4.0: &i8);
        _7 = (_4.1: &i8);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i8, i8>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        _15 = const 7_i16;
        _17 = &mut _15;
        _158 = const _;
        _16 = <i16 as SubAssign<&i16>>::sub_assign(move _17, _158) -> [return: bb4, unwind continue];
    }

    bb4: {
        _19 = &_15;
        _157 = const _;
        _18 = (move _19, _157);
        _20 = (_18.0: &i16);
        _21 = (_18.1: &i16);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<i16, i16>(move _26, _20, _21, move _28) -> unwind continue;
    }

    bb6: {
        _29 = const 3f32;
        _31 = &mut _29;
        _156 = const _;
        _30 = <f32 as MulAssign<&f32>>::mul_assign(move _31, _156) -> [return: bb7, unwind continue];
    }

    bb7: {
        _33 = &_29;
        _155 = const _;
        _32 = (move _33, _155);
        _34 = (_32.0: &f32);
        _35 = (_32.1: &f32);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<f32, f32>(move _40, _34, _35, move _42) -> unwind continue;
    }

    bb9: {
        _43 = const 6f64;
        _45 = &mut _43;
        _154 = const _;
        _44 = <f64 as DivAssign<&f64>>::div_assign(move _45, _154) -> [return: bb10, unwind continue];
    }

    bb10: {
        _47 = &_43;
        _153 = const _;
        _46 = (move _47, _153);
        _48 = (_46.0: &f64);
        _49 = (_46.1: &f64);
        _52 = (*_48);
        _53 = (*_49);
        _51 = Eq(move _52, move _53);
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<f64, f64>(move _54, _48, _49, move _56) -> unwind continue;
    }

    bb12: {
        _57 = const 7_i64;
        _59 = &mut _57;
        _152 = const _;
        _58 = <i64 as RemAssign<&i64>>::rem_assign(move _59, _152) -> [return: bb13, unwind continue];
    }

    bb13: {
        _61 = &_57;
        _151 = const _;
        _60 = (move _61, _151);
        _62 = (_60.0: &i64);
        _63 = (_60.1: &i64);
        _66 = (*_62);
        _67 = (*_63);
        _65 = Eq(move _66, move _67);
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _68 = core::panicking::AssertKind::Eq;
        _70 = Option::<Arguments<'_>>::None;
        _69 = core::panicking::assert_failed::<i64, i64>(move _68, _62, _63, move _70) -> unwind continue;
    }

    bb15: {
        _71 = const 10_u8;
        _73 = &mut _71;
        _150 = const _;
        _72 = <u8 as BitOrAssign<&u8>>::bitor_assign(move _73, _150) -> [return: bb16, unwind continue];
    }

    bb16: {
        _75 = &_71;
        _149 = const _;
        _74 = (move _75, _149);
        _76 = (_74.0: &u8);
        _77 = (_74.1: &u8);
        _80 = (*_76);
        _81 = (*_77);
        _79 = Eq(move _80, move _81);
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<u8, u8>(move _82, _76, _77, move _84) -> unwind continue;
    }

    bb18: {
        _85 = const 10_u16;
        _87 = &mut _85;
        _148 = const _;
        _86 = <u16 as BitAndAssign<&u16>>::bitand_assign(move _87, _148) -> [return: bb19, unwind continue];
    }

    bb19: {
        _89 = &_85;
        _147 = const _;
        _88 = (move _89, _147);
        _90 = (_88.0: &u16);
        _91 = (_88.1: &u16);
        _94 = (*_90);
        _95 = (*_91);
        _93 = Eq(move _94, move _95);
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _96 = core::panicking::AssertKind::Eq;
        _98 = Option::<Arguments<'_>>::None;
        _97 = core::panicking::assert_failed::<u16, u16>(move _96, _90, _91, move _98) -> unwind continue;
    }

    bb21: {
        _99 = const 10_u32;
        _101 = &mut _99;
        _146 = const _;
        _100 = <u32 as BitXorAssign<&u32>>::bitxor_assign(move _101, _146) -> [return: bb22, unwind continue];
    }

    bb22: {
        _103 = &_99;
        _145 = const _;
        _102 = (move _103, _145);
        _104 = (_102.0: &u32);
        _105 = (_102.1: &u32);
        _108 = (*_104);
        _109 = (*_105);
        _107 = Eq(move _108, move _109);
        _106 = Not(move _107);
        switchInt(move _106) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _110 = core::panicking::AssertKind::Eq;
        _112 = Option::<Arguments<'_>>::None;
        _111 = core::panicking::assert_failed::<u32, u32>(move _110, _104, _105, move _112) -> unwind continue;
    }

    bb24: {
        _113 = const 10_u64;
        _115 = &mut _113;
        _144 = const _;
        _114 = <u64 as ShlAssign<&u32>>::shl_assign(move _115, _144) -> [return: bb25, unwind continue];
    }

    bb25: {
        _117 = &_113;
        _143 = const _;
        _116 = (move _117, _143);
        _118 = (_116.0: &u64);
        _119 = (_116.1: &u64);
        _122 = (*_118);
        _123 = (*_119);
        _121 = Eq(move _122, move _123);
        _120 = Not(move _121);
        switchInt(move _120) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _124 = core::panicking::AssertKind::Eq;
        _126 = Option::<Arguments<'_>>::None;
        _125 = core::panicking::assert_failed::<u64, u64>(move _124, _118, _119, move _126) -> unwind continue;
    }

    bb27: {
        _127 = const 10_u64;
        _129 = &mut _127;
        _142 = const _;
        _128 = <u64 as ShrAssign<&i16>>::shr_assign(move _129, _142) -> [return: bb28, unwind continue];
    }

    bb28: {
        _131 = &_127;
        _141 = const _;
        _130 = (move _131, _141);
        _132 = (_130.0: &u64);
        _133 = (_130.1: &u64);
        _136 = (*_132);
        _137 = (*_133);
        _135 = Eq(move _136, move _137);
        _134 = Not(move _135);
        switchInt(move _134) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _138 = core::panicking::AssertKind::Eq;
        _140 = Option::<Arguments<'_>>::None;
        _139 = core::panicking::assert_failed::<u64, u64>(move _138, _132, _133, move _140) -> unwind continue;
    }

    bb30: {
        return;
    }
}

promoted[0] in main: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const 2_u64;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const 2_i16;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const 40_u64;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 2_u32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 6_u32;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 12_u32;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 8_u16;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 12_u16;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 14_u8;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 12_u8;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 3_i64;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 4_i64;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 3f64;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 2f64;
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 9f32;
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 3f32;
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const 3_i16;
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const 4_i16;
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 5_i8;
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 2_i8;
        _0 = &_1;
        return;
    }
}
