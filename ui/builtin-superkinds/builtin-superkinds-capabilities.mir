// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: T, _2: Sender<T>) -> () {
    debug val => _1;
    debug chan => _2;
    let mut _0: ();
    let _3: ();
    let mut _4: std::result::Result<(), std::sync::mpsc::SendError<T>>;
    let mut _5: &std::sync::mpsc::Sender<T>;

    bb0: {
        _5 = &_2;
        _4 = Sender::<T>::send(move _5, move _1) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _3 = Result::<(), SendError<T>>::unwrap(move _4) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::sync::mpsc::Sender<isize>;
    let _2: std::sync::mpsc::Receiver<isize>;
    let mut _3: (std::sync::mpsc::Sender<isize>, std::sync::mpsc::Receiver<isize>);
    let _4: ();
    let mut _5: std::sync::mpsc::Sender<isize>;
    let mut _6: (&isize, &isize);
    let mut _7: &isize;
    let _8: isize;
    let mut _9: std::result::Result<isize, std::sync::mpsc::RecvError>;
    let mut _10: &std::sync::mpsc::Receiver<isize>;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: isize;
    let mut _16: isize;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: bool;
    scope 1 {
        debug tx => _1;
        debug rx => _2;
        let _11: &isize;
        let _12: &isize;
        let mut _20: &isize;
        scope 2 {
            debug left_val => _11;
            debug right_val => _12;
            let _17: core::panicking::AssertKind;
            scope 3 {
                debug kind => _17;
            }
        }
    }

    bb0: {
        _21 = const false;
        _3 = channel::<isize>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _21 = const true;
        _1 = move (_3.0: std::sync::mpsc::Sender<isize>);
        _2 = move (_3.1: std::sync::mpsc::Receiver<isize>);
        _21 = const false;
        _5 = move _1;
        _4 = foo::<isize>(const 31337_isize, move _5) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _10 = &_2;
        _9 = std::sync::mpsc::Receiver::<isize>::recv(move _10) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _8 = Result::<isize, RecvError>::unwrap(move _9) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _7 = &_8;
        _20 = const _;
        _6 = (move _7, _20);
        _11 = (_6.0: &isize);
        _12 = (_6.1: &isize);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<isize, isize>(move _17, _11, _12, move _19) -> bb8;
    }

    bb6: {
        drop(_2) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        _21 = const false;
        return;
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb11 (cleanup): {
        switchInt(_21) -> [0: bb9, otherwise: bb10];
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 31337_isize;
        _0 = &_1;
        return;
    }
}
