// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: T, _2: Sender<T>) -> () {
    debug val => _1;                     // in scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:17:26: 17:29
    debug chan => _2;                    // in scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:17:34: 17:38
    let mut _0: ();                      // return place in scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:17:51: 17:51
    let _3: ();                          // in scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:18:5: 18:28
    let mut _4: std::result::Result<(), std::sync::mpsc::SendError<T>>; // in scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:18:5: 18:19
    let mut _5: &std::sync::mpsc::Sender<T>; // in scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:18:5: 18:19
    let mut _6: T;                       // in scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:18:15: 18:18

    bb0: {
        _5 = &_2;                        // scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:18:5: 18:19
        _6 = move _1;                    // scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:18:15: 18:18
        _4 = Sender::<T>::send(move _5, move _6) -> [return: bb1, unwind: bb4]; // scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:18:5: 18:19
                                         // mir::Constant
                                         // + span: ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:18:10: 18:14
                                         // + literal: Const { ty: for<'a> fn(&'a Sender<T>, T) -> Result<(), SendError<T>> {Sender::<T>::send}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Result::<(), SendError<T>>::unwrap(move _4) -> [return: bb2, unwind: bb4]; // scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:18:5: 18:28
                                         // mir::Constant
                                         // + span: ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:18:20: 18:26
                                         // + literal: Const { ty: fn(Result<(), SendError<T>>) {Result::<(), SendError<T>>::unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_2) -> bb3;                 // scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:19:1: 19:2
    }

    bb3: {
        return;                          // scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:19:2: 19:2
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:19:1: 19:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:17:1: 19:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:21:15: 21:15
    let _1: std::sync::mpsc::Sender<i32>; // in scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:22:10: 22:12
    let _2: std::sync::mpsc::Receiver<i32>; // in scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:22:14: 22:16
    let mut _3: (std::sync::mpsc::Sender<i32>, std::sync::mpsc::Receiver<i32>); // in scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:22:20: 22:29
    let _4: ();                          // in scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:23:5: 23:19
    let mut _5: std::sync::mpsc::Sender<i32>; // in scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:23:16: 23:18
    let mut _6: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _7: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _8: i32;                         // in scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:24:16: 24:34
    let mut _9: std::result::Result<i32, std::sync::mpsc::RecvError>; // in scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:24:16: 24:25
    let mut _10: &std::sync::mpsc::Receiver<i32>; // in scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:24:16: 24:25
    let mut _11: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _27: bool;                   // in scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:25:1: 25:2
    scope 1 {
        debug tx => _1;                  // in scope 1 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:22:10: 22:12
        debug rx => _2;                  // in scope 1 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:22:14: 22:16
        let _12: &i32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _13: &i32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _26: &i32;               // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _12;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _13;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _18: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _18;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _27 = const false;               // scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:22:20: 22:29
        _3 = channel::<i32>() -> bb1;    // scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:22:20: 22:29
                                         // mir::Constant
                                         // + span: ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:22:20: 22:27
                                         // + literal: Const { ty: fn() -> (Sender<i32>, std::sync::mpsc::Receiver<i32>) {channel::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _27 = const true;                // scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:22:10: 22:12
        _1 = move (_3.0: std::sync::mpsc::Sender<i32>); // scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:22:10: 22:12
        _2 = move (_3.1: std::sync::mpsc::Receiver<i32>); // scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:22:14: 22:16
        _27 = const false;               // scope 1 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:23:16: 23:18
        _5 = move _1;                    // scope 1 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:23:16: 23:18
        _4 = foo::<i32>(const 31337_i32, move _5) -> [return: bb2, unwind: bb8]; // scope 1 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:23:5: 23:19
                                         // mir::Constant
                                         // + span: ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:23:5: 23:8
                                         // + literal: Const { ty: fn(i32, Sender<i32>) {foo::<i32>}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = &_2;                       // scope 1 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:24:16: 24:25
        _9 = std::sync::mpsc::Receiver::<i32>::recv(move _10) -> [return: bb3, unwind: bb8]; // scope 1 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:24:16: 24:25
                                         // mir::Constant
                                         // + span: ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:24:19: 24:23
                                         // + literal: Const { ty: for<'a> fn(&'a std::sync::mpsc::Receiver<i32>) -> Result<i32, RecvError> {std::sync::mpsc::Receiver::<i32>::recv}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = Result::<i32, RecvError>::unwrap(move _9) -> [return: bb4, unwind: bb8]; // scope 1 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:24:16: 24:34
                                         // mir::Constant
                                         // + span: ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:24:26: 24:32
                                         // + literal: Const { ty: fn(Result<i32, RecvError>) -> i32 {Result::<i32, RecvError>::unwrap}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = &_8;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _26 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _11 = _26;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _6 = (move _7, move _11);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_6.0: &i32);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_6.1: &i32);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = (*_12);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = const 31337_i32;           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = Eq(move _16, move _17);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _14 = Not(move _15);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb6, otherwise: bb5]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _18 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<i32, i32>(move _20, move _21, move _23, move _25) -> bb8; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_2) -> [return: bb7, unwind: bb11]; // scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:25:1: 25:2
    }

    bb7: {
        _27 = const false;               // scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:25:1: 25:2
        return;                          // scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:25:2: 25:2
    }

    bb8 (cleanup): {
        drop(_2) -> bb11;                // scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:25:1: 25:2
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:21:1: 25:2
    }

    bb10 (cleanup): {
        drop(_1) -> bb9;                 // scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:25:1: 25:2
    }

    bb11 (cleanup): {
        switchInt(_27) -> [0: bb9, otherwise: bb10]; // scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:25:1: 25:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:24:36: 24:41

    bb0: {
        _1 = const 31337_i32;            // scope 0 at ui/builtin-superkinds/builtin-superkinds-capabilities-transitive.rs:24:36: 24:41
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
