// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/no-core-1.rs:12:11: 12:11
    let _1: std::option::Option<&str>;   // in scope 0 at ui/no-core-1.rs:13:9: 13:10
    let _2: &str;                        // in scope 0 at ui/no-core-1.rs:14:5: 14:15
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/no-core-1.rs:14:5: 14:6
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/no-core-1.rs:13:9: 13:10
    }

    bb0: {
        _1 = Option::<&str>::Some(const "foo"); // scope 0 at ui/no-core-1.rs:13:13: 13:24
                                         // mir::Constant
                                         // + span: ui/no-core-1.rs:13:18: 13:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _1;                         // scope 1 at ui/no-core-1.rs:14:5: 14:6
        _2 = Option::<&str>::unwrap(move _3) -> bb1; // scope 1 at ui/no-core-1.rs:14:5: 14:15
                                         // mir::Constant
                                         // + span: ui/no-core-1.rs:14:7: 14:13
                                         // + literal: Const { ty: fn(Option<&str>) -> &str {Option::<&str>::unwrap}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/no-core-1.rs:15:2: 15:2
    }
}
