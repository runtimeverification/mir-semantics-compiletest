// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn find_zombies() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/wait-forked-but-failed-child.rs:29:19: 29:19
    let _1: i32;                         // in scope 0 at ui/wait-forked-but-failed-child.rs:30:9: 30:15
    let mut _3: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/wait-forked-but-failed-child.rs:33:25: 33:89
    let mut _4: &mut std::process::Command; // in scope 0 at ui/wait-forked-but-failed-child.rs:33:25: 33:89
    let mut _5: &mut std::process::Command; // in scope 0 at ui/wait-forked-but-failed-child.rs:33:25: 33:80
    let mut _6: &mut std::process::Command; // in scope 0 at ui/wait-forked-but-failed-child.rs:33:25: 33:80
    let mut _7: std::process::Command;   // in scope 0 at ui/wait-forked-but-failed-child.rs:33:25: 33:43
    let mut _8: &[&str; 3];              // in scope 0 at ui/wait-forked-but-failed-child.rs:33:49: 33:79
    let mut _10: &[u8];                  // in scope 0 at ui/wait-forked-but-failed-child.rs:34:45: 34:66
    let _11: &[u8];                      // in scope 0 at ui/wait-forked-but-failed-child.rs:34:45: 34:66
    let mut _12: &std::vec::Vec<u8>;     // in scope 0 at ui/wait-forked-but-failed-child.rs:34:45: 34:66
    let _13: &std::vec::Vec<u8>;         // in scope 0 at ui/wait-forked-but-failed-child.rs:34:45: 34:66
    let mut _14: std::iter::Enumerate<std::str::Split<'_, char>>; // in scope 0 at ui/wait-forked-but-failed-child.rs:36:28: 36:61
    let mut _15: std::iter::Enumerate<std::str::Split<'_, char>>; // in scope 0 at ui/wait-forked-but-failed-child.rs:36:28: 36:61
    let mut _16: std::str::Split<'_, char>; // in scope 0 at ui/wait-forked-but-failed-child.rs:36:28: 36:49
    let mut _17: &str;                   // in scope 0 at ui/wait-forked-but-failed-child.rs:36:28: 36:49
    let _18: &str;                       // in scope 0 at ui/wait-forked-but-failed-child.rs:36:28: 36:49
    let mut _19: &std::borrow::Cow<'_, str>; // in scope 0 at ui/wait-forked-but-failed-child.rs:36:28: 36:49
    let mut _21: std::option::Option<(usize, &str)>; // in scope 0 at ui/wait-forked-but-failed-child.rs:36:28: 36:61
    let mut _22: &mut std::iter::Enumerate<std::str::Split<'_, char>>; // in scope 0 at ui/wait-forked-but-failed-child.rs:36:28: 36:61
    let mut _23: &mut std::iter::Enumerate<std::str::Split<'_, char>>; // in scope 0 at ui/wait-forked-but-failed-child.rs:36:28: 36:61
    let mut _24: isize;                  // in scope 0 at ui/wait-forked-but-failed-child.rs:36:5: 45:6
    let mut _27: bool;                   // in scope 0 at ui/wait-forked-but-failed-child.rs:37:12: 42:36
    let mut _28: bool;                   // in scope 0 at ui/wait-forked-but-failed-child.rs:37:12: 41:61
    let mut _29: bool;                   // in scope 0 at ui/wait-forked-but-failed-child.rs:37:12: 37:41
    let mut _30: bool;                   // in scope 0 at ui/wait-forked-but-failed-child.rs:37:12: 37:23
    let mut _31: usize;                  // in scope 0 at ui/wait-forked-but-failed-child.rs:37:16: 37:23
    let mut _32: bool;                   // in scope 0 at ui/wait-forked-but-failed-child.rs:37:27: 37:41
    let mut _33: usize;                  // in scope 0 at ui/wait-forked-but-failed-child.rs:37:31: 37:41
    let mut _34: &str;                   // in scope 0 at ui/wait-forked-but-failed-child.rs:37:31: 37:41
    let mut _35: bool;                   // in scope 0 at ui/wait-forked-but-failed-child.rs:38:12: 41:61
    let mut _36: i32;                    // in scope 0 at ui/wait-forked-but-failed-child.rs:38:12: 38:18
    let mut _37: i32;                    // in scope 0 at ui/wait-forked-but-failed-child.rs:38:22: 41:61
    let mut _38: std::option::Option<i32>; // in scope 0 at ui/wait-forked-but-failed-child.rs:38:22: 40:39
    let mut _39: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/wait-forked-but-failed-child.rs:38:22: 40:34
    let mut _40: &str;                   // in scope 0 at ui/wait-forked-but-failed-child.rs:38:22: 40:34
    let _41: &str;                       // in scope 0 at ui/wait-forked-but-failed-child.rs:38:22: 39:62
    let mut _42: std::option::Option<&str>; // in scope 0 at ui/wait-forked-but-failed-child.rs:38:22: 38:68
    let mut _43: &mut std::iter::Filter<std::str::Split<'_, char>, [closure@ui/wait-forked-but-failed-child.rs:38:45: 38:48]>; // in scope 0 at ui/wait-forked-but-failed-child.rs:38:22: 38:68
    let mut _44: std::iter::Filter<std::str::Split<'_, char>, [closure@ui/wait-forked-but-failed-child.rs:38:45: 38:48]>; // in scope 0 at ui/wait-forked-but-failed-child.rs:38:22: 38:61
    let mut _45: std::str::Split<'_, char>; // in scope 0 at ui/wait-forked-but-failed-child.rs:38:22: 38:37
    let mut _46: &str;                   // in scope 0 at ui/wait-forked-but-failed-child.rs:38:22: 38:37
    let mut _47: [closure@ui/wait-forked-but-failed-child.rs:38:45: 38:48]; // in scope 0 at ui/wait-forked-but-failed-child.rs:38:45: 38:60
    let mut _48: &str;                   // in scope 0 at ui/wait-forked-but-failed-child.rs:39:34: 39:61
    let _49: &str;                       // in scope 0 at ui/wait-forked-but-failed-child.rs:39:34: 39:61
    let mut _50: &str;                   // in scope 0 at ui/wait-forked-but-failed-child.rs:41:34: 41:60
    let _51: &str;                       // in scope 0 at ui/wait-forked-but-failed-child.rs:41:34: 41:60
    let mut _52: bool;                   // in scope 0 at ui/wait-forked-but-failed-child.rs:42:12: 42:36
    let mut _53: &str;                   // in scope 0 at ui/wait-forked-but-failed-child.rs:42:12: 42:36
    let mut _54: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _55: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _56: &[&str];                // in scope 0 at ui/wait-forked-but-failed-child.rs:43:20: 43:37
    let mut _57: &[&str; 1];             // in scope 0 at ui/wait-forked-but-failed-child.rs:43:20: 43:37
    let _58: &[&str; 1];                 // in scope 0 at ui/wait-forked-but-failed-child.rs:43:20: 43:37
    let mut _59: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _60: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _61: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _62: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _63: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/wait-forked-but-failed-child.rs:43:39: 43:43
    let mut _64: &&str;                  // in scope 0 at ui/wait-forked-but-failed-child.rs:43:39: 43:43
    let _65: &&str;                      // in scope 0 at ui/wait-forked-but-failed-child.rs:43:39: 43:43
    scope 1 {
        debug my_pid => _1;              // in scope 1 at ui/wait-forked-but-failed-child.rs:30:9: 30:15
        let _2: std::process::Output;    // in scope 1 at ui/wait-forked-but-failed-child.rs:33:9: 33:22
        let mut _67: &[&str; 3];         // in scope 1 at ui/wait-forked-but-failed-child.rs:33:49: 33:79
        scope 3 {
            debug ps_cmd_output => _2;   // in scope 3 at ui/wait-forked-but-failed-child.rs:33:9: 33:22
            let _9: std::borrow::Cow<'_, str>; // in scope 3 at ui/wait-forked-but-failed-child.rs:34:9: 34:18
            scope 4 {
                debug ps_output => _9;   // in scope 4 at ui/wait-forked-but-failed-child.rs:34:9: 34:18
                let mut _20: std::iter::Enumerate<std::str::Split<'_, char>>; // in scope 4 at ui/wait-forked-but-failed-child.rs:36:28: 36:61
                scope 5 {
                    debug iter => _20;   // in scope 5 at ui/wait-forked-but-failed-child.rs:36:28: 36:61
                    let _25: usize;      // in scope 5 at ui/wait-forked-but-failed-child.rs:36:10: 36:17
                    let _26: &str;       // in scope 5 at ui/wait-forked-but-failed-child.rs:36:19: 36:23
                    scope 6 {
                        debug line_no => _25; // in scope 6 at ui/wait-forked-but-failed-child.rs:36:10: 36:17
                        debug line => _26; // in scope 6 at ui/wait-forked-but-failed-child.rs:36:19: 36:23
                        let mut _66: &[&str; 1]; // in scope 6 at ui/wait-forked-but-failed-child.rs:43:20: 43:37
                    }
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _1 = getpid() -> bb1;            // scope 2 at ui/wait-forked-but-failed-child.rs:30:27: 30:41
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:30:27: 30:39
                                         // + literal: Const { ty: unsafe extern "C" fn() -> i32 {getpid}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = Command::new::<&str>(const "ps") -> bb2; // scope 1 at ui/wait-forked-but-failed-child.rs:33:25: 33:43
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:33:25: 33:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> Command {Command::new::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:33:38: 33:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _6 = &mut _7;                    // scope 1 at ui/wait-forked-but-failed-child.rs:33:25: 33:80
        _67 = const _;                   // scope 1 at ui/wait-forked-but-failed-child.rs:33:49: 33:79
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:33:49: 33:79
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(find_zombies, [], Some(promoted[1])) }
        _8 = _67;                        // scope 1 at ui/wait-forked-but-failed-child.rs:33:49: 33:79
        _5 = Command::args::<&[&str; 3], &&str>(move _6, move _8) -> [return: bb3, unwind: bb43]; // scope 1 at ui/wait-forked-but-failed-child.rs:33:25: 33:80
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:33:44: 33:48
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &[&str; 3]) -> &'a mut Command {Command::args::<&[&str; 3], &&str>}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = &mut (*_5);                 // scope 1 at ui/wait-forked-but-failed-child.rs:33:25: 33:89
        _3 = Command::output(move _4) -> [return: bb4, unwind: bb43]; // scope 1 at ui/wait-forked-but-failed-child.rs:33:25: 33:89
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:33:81: 33:87
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb4: {
        _2 = Result::<Output, std::io::Error>::unwrap(move _3) -> [return: bb5, unwind: bb43]; // scope 1 at ui/wait-forked-but-failed-child.rs:33:25: 33:98
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:33:90: 33:96
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_7) -> [return: bb6, unwind: bb42]; // scope 1 at ui/wait-forked-but-failed-child.rs:33:98: 33:99
    }

    bb6: {
        _13 = &(_2.1: std::vec::Vec<u8>); // scope 3 at ui/wait-forked-but-failed-child.rs:34:45: 34:66
        _12 = _13;                       // scope 3 at ui/wait-forked-but-failed-child.rs:34:45: 34:66
        _11 = <Vec<u8> as Deref>::deref(move _12) -> [return: bb7, unwind: bb42]; // scope 3 at ui/wait-forked-but-failed-child.rs:34:45: 34:66
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:34:45: 34:66
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb7: {
        _10 = _11;                       // scope 3 at ui/wait-forked-but-failed-child.rs:34:45: 34:66
        _9 = String::from_utf8_lossy(move _10) -> [return: bb8, unwind: bb42]; // scope 3 at ui/wait-forked-but-failed-child.rs:34:21: 34:67
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:34:21: 34:44
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Cow<'a, str> {String::from_utf8_lossy}, val: Value(<ZST>) }
    }

    bb8: {
        _19 = &_9;                       // scope 4 at ui/wait-forked-but-failed-child.rs:36:28: 36:49
        _18 = <Cow<'_, str> as Deref>::deref(move _19) -> [return: bb9, unwind: bb41]; // scope 4 at ui/wait-forked-but-failed-child.rs:36:28: 36:49
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:36:28: 36:49
                                         // + literal: Const { ty: for<'a> fn(&'a Cow<'_, str>) -> &'a <Cow<'_, str> as Deref>::Target {<Cow<'_, str> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb9: {
        _17 = _18;                       // scope 4 at ui/wait-forked-but-failed-child.rs:36:28: 36:49
        _16 = core::str::<impl str>::split::<'_, char>(move _17, const '\n') -> [return: bb10, unwind: bb41]; // scope 4 at ui/wait-forked-but-failed-child.rs:36:28: 36:49
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:36:38: 36:43
                                         // + literal: Const { ty: fn(&str, char) -> std::str::Split<'_, char> {core::str::<impl str>::split::<'_, char>}, val: Value(<ZST>) }
    }

    bb10: {
        _15 = <std::str::Split<'_, char> as Iterator>::enumerate(move _16) -> [return: bb11, unwind: bb41]; // scope 4 at ui/wait-forked-but-failed-child.rs:36:28: 36:61
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:36:50: 36:59
                                         // + literal: Const { ty: fn(std::str::Split<'_, char>) -> Enumerate<std::str::Split<'_, char>> {<std::str::Split<'_, char> as Iterator>::enumerate}, val: Value(<ZST>) }
    }

    bb11: {
        _14 = <Enumerate<std::str::Split<'_, char>> as IntoIterator>::into_iter(move _15) -> [return: bb12, unwind: bb41]; // scope 4 at ui/wait-forked-but-failed-child.rs:36:28: 36:61
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:36:28: 36:61
                                         // + literal: Const { ty: fn(Enumerate<std::str::Split<'_, char>>) -> <Enumerate<std::str::Split<'_, char>> as IntoIterator>::IntoIter {<Enumerate<std::str::Split<'_, char>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb12: {
        _20 = move _14;                  // scope 4 at ui/wait-forked-but-failed-child.rs:36:28: 36:61
        goto -> bb13;                    // scope 5 at ui/wait-forked-but-failed-child.rs:36:5: 45:6
    }

    bb13: {
        _23 = &mut _20;                  // scope 5 at ui/wait-forked-but-failed-child.rs:36:28: 36:61
        _22 = &mut (*_23);               // scope 5 at ui/wait-forked-but-failed-child.rs:36:28: 36:61
        _21 = <Enumerate<std::str::Split<'_, char>> as Iterator>::next(move _22) -> [return: bb14, unwind: bb41]; // scope 5 at ui/wait-forked-but-failed-child.rs:36:28: 36:61
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:36:28: 36:61
                                         // + literal: Const { ty: for<'a> fn(&'a mut Enumerate<std::str::Split<'_, char>>) -> Option<<Enumerate<std::str::Split<'_, char>> as Iterator>::Item> {<Enumerate<std::str::Split<'_, char>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb14: {
        _24 = discriminant(_21);         // scope 5 at ui/wait-forked-but-failed-child.rs:36:28: 36:61
        switchInt(move _24) -> [0: bb17, 1: bb15, otherwise: bb16]; // scope 5 at ui/wait-forked-but-failed-child.rs:36:28: 36:61
    }

    bb15: {
        _25 = (((_21 as Some).0: (usize, &str)).0: usize); // scope 5 at ui/wait-forked-but-failed-child.rs:36:10: 36:17
        _26 = (((_21 as Some).0: (usize, &str)).1: &str); // scope 5 at ui/wait-forked-but-failed-child.rs:36:19: 36:23
        _31 = _25;                       // scope 6 at ui/wait-forked-but-failed-child.rs:37:16: 37:23
        _30 = Lt(const 0_usize, move _31); // scope 6 at ui/wait-forked-but-failed-child.rs:37:12: 37:23
        switchInt(move _30) -> [0: bb24, otherwise: bb25]; // scope 6 at ui/wait-forked-but-failed-child.rs:37:12: 37:41
    }

    bb16: {
        unreachable;                     // scope 5 at ui/wait-forked-but-failed-child.rs:36:28: 36:61
    }

    bb17: {
        drop(_9) -> [return: bb39, unwind: bb42]; // scope 3 at ui/wait-forked-but-failed-child.rs:46:1: 46:2
    }

    bb18: {
        _27 = const false;               // scope 6 at ui/wait-forked-but-failed-child.rs:37:12: 42:36
        goto -> bb20;                    // scope 6 at ui/wait-forked-but-failed-child.rs:37:12: 42:36
    }

    bb19: {
        _53 = _26;                       // scope 6 at ui/wait-forked-but-failed-child.rs:42:12: 42:36
        _52 = core::str::<impl str>::contains::<'_, &str>(move _53, const "defunct") -> [return: bb35, unwind: bb41]; // scope 6 at ui/wait-forked-but-failed-child.rs:42:12: 42:36
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:42:17: 42:25
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::contains::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:42:26: 42:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb20: {
        switchInt(move _27) -> [0: bb13, otherwise: bb36]; // scope 6 at ui/wait-forked-but-failed-child.rs:37:12: 42:36
    }

    bb21: {
        _28 = const false;               // scope 6 at ui/wait-forked-but-failed-child.rs:37:12: 41:61
        goto -> bb23;                    // scope 6 at ui/wait-forked-but-failed-child.rs:37:12: 41:61
    }

    bb22: {
        _36 = _1;                        // scope 6 at ui/wait-forked-but-failed-child.rs:38:12: 38:18
        _46 = _26;                       // scope 6 at ui/wait-forked-but-failed-child.rs:38:22: 38:37
        _45 = core::str::<impl str>::split::<'_, char>(move _46, const ' ') -> [return: bb28, unwind: bb41]; // scope 6 at ui/wait-forked-but-failed-child.rs:38:22: 38:37
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:38:27: 38:32
                                         // + literal: Const { ty: fn(&str, char) -> std::str::Split<'_, char> {core::str::<impl str>::split::<'_, char>}, val: Value(<ZST>) }
    }

    bb23: {
        switchInt(move _28) -> [0: bb18, otherwise: bb19]; // scope 6 at ui/wait-forked-but-failed-child.rs:37:12: 42:36
    }

    bb24: {
        _29 = const false;               // scope 6 at ui/wait-forked-but-failed-child.rs:37:12: 37:41
        goto -> bb26;                    // scope 6 at ui/wait-forked-but-failed-child.rs:37:12: 37:41
    }

    bb25: {
        _34 = _26;                       // scope 6 at ui/wait-forked-but-failed-child.rs:37:31: 37:41
        _33 = core::str::<impl str>::len(move _34) -> [return: bb27, unwind: bb41]; // scope 6 at ui/wait-forked-but-failed-child.rs:37:31: 37:41
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:37:36: 37:39
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> usize {core::str::<impl str>::len}, val: Value(<ZST>) }
    }

    bb26: {
        switchInt(move _29) -> [0: bb21, otherwise: bb22]; // scope 6 at ui/wait-forked-but-failed-child.rs:37:12: 41:61
    }

    bb27: {
        _32 = Lt(const 0_usize, move _33); // scope 6 at ui/wait-forked-but-failed-child.rs:37:27: 37:41
        _29 = move _32;                  // scope 6 at ui/wait-forked-but-failed-child.rs:37:12: 37:41
        goto -> bb26;                    // scope 6 at ui/wait-forked-but-failed-child.rs:37:12: 37:41
    }

    bb28: {
        _44 = <std::str::Split<'_, char> as Iterator>::filter::<[closure@ui/wait-forked-but-failed-child.rs:38:45: 38:48]>(move _45, move _47) -> [return: bb29, unwind: bb41]; // scope 6 at ui/wait-forked-but-failed-child.rs:38:22: 38:61
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:38:38: 38:44
                                         // + literal: Const { ty: fn(std::str::Split<'_, char>, [closure@ui/wait-forked-but-failed-child.rs:38:45: 38:48]) -> Filter<std::str::Split<'_, char>, [closure@ui/wait-forked-but-failed-child.rs:38:45: 38:48]> {<std::str::Split<'_, char> as Iterator>::filter::<[closure@ui/wait-forked-but-failed-child.rs:38:45: 38:48]>}, val: Value(<ZST>) }
    }

    bb29: {
        _43 = &mut _44;                  // scope 6 at ui/wait-forked-but-failed-child.rs:38:22: 38:68
        _42 = <Filter<std::str::Split<'_, char>, [closure@ui/wait-forked-but-failed-child.rs:38:45: 38:48]> as Iterator>::nth(move _43, const 1_usize) -> [return: bb30, unwind: bb41]; // scope 6 at ui/wait-forked-but-failed-child.rs:38:22: 38:68
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:38:62: 38:65
                                         // + literal: Const { ty: for<'a> fn(&'a mut Filter<std::str::Split<'_, char>, [closure@ui/wait-forked-but-failed-child.rs:38:45: 38:48]>, usize) -> Option<<Filter<std::str::Split<'_, char>, [closure@ui/wait-forked-but-failed-child.rs:38:45: 38:48]> as Iterator>::Item> {<Filter<std::str::Split<'_, char>, [closure@ui/wait-forked-but-failed-child.rs:38:45: 38:48]> as Iterator>::nth}, val: Value(<ZST>) }
    }

    bb30: {
        _49 = const "1st column should be PPID"; // scope 6 at ui/wait-forked-but-failed-child.rs:39:34: 39:61
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:39:34: 39:61
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _48 = _49;                       // scope 6 at ui/wait-forked-but-failed-child.rs:39:34: 39:61
        _41 = Option::<&str>::expect(move _42, move _48) -> [return: bb31, unwind: bb41]; // scope 6 at ui/wait-forked-but-failed-child.rs:38:22: 39:62
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:39:27: 39:33
                                         // + literal: Const { ty: for<'a> fn(Option<&str>, &'a str) -> &str {Option::<&str>::expect}, val: Value(<ZST>) }
    }

    bb31: {
        _40 = _41;                       // scope 6 at ui/wait-forked-but-failed-child.rs:38:22: 40:34
        _39 = core::str::<impl str>::parse::<i32>(move _40) -> [return: bb32, unwind: bb41]; // scope 6 at ui/wait-forked-but-failed-child.rs:38:22: 40:34
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:40:27: 40:32
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb32: {
        _38 = Result::<i32, ParseIntError>::ok(move _39) -> [return: bb33, unwind: bb41]; // scope 6 at ui/wait-forked-but-failed-child.rs:38:22: 40:39
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:40:35: 40:37
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> Option<i32> {Result::<i32, ParseIntError>::ok}, val: Value(<ZST>) }
    }

    bb33: {
        _51 = const "PPID string into integer"; // scope 6 at ui/wait-forked-but-failed-child.rs:41:34: 41:60
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:41:34: 41:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _50 = _51;                       // scope 6 at ui/wait-forked-but-failed-child.rs:41:34: 41:60
        _37 = Option::<i32>::expect(move _38, move _50) -> [return: bb34, unwind: bb41]; // scope 6 at ui/wait-forked-but-failed-child.rs:38:22: 41:61
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:41:27: 41:33
                                         // + literal: Const { ty: for<'a> fn(Option<i32>, &'a str) -> i32 {Option::<i32>::expect}, val: Value(<ZST>) }
    }

    bb34: {
        _35 = Eq(move _36, move _37);    // scope 6 at ui/wait-forked-but-failed-child.rs:38:12: 41:61
        _28 = move _35;                  // scope 6 at ui/wait-forked-but-failed-child.rs:37:12: 41:61
        goto -> bb23;                    // scope 6 at ui/wait-forked-but-failed-child.rs:37:12: 41:61
    }

    bb35: {
        _27 = move _52;                  // scope 6 at ui/wait-forked-but-failed-child.rs:37:12: 42:36
        goto -> bb20;                    // scope 6 at ui/wait-forked-but-failed-child.rs:37:12: 42:36
    }

    bb36: {
        _66 = const _;                   // scope 6 at ui/wait-forked-but-failed-child.rs:43:20: 43:37
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:43:20: 43:37
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(find_zombies, [], Some(promoted[0])) }
        _58 = _66;                       // scope 6 at ui/wait-forked-but-failed-child.rs:43:20: 43:37
        _57 = _58;                       // scope 6 at ui/wait-forked-but-failed-child.rs:43:20: 43:37
        _56 = move _57 as &[&str] (Pointer(Unsize)); // scope 6 at ui/wait-forked-but-failed-child.rs:43:20: 43:37
        _65 = &_26;                      // scope 6 at ui/wait-forked-but-failed-child.rs:43:39: 43:43
        _64 = _65;                       // scope 6 at ui/wait-forked-but-failed-child.rs:43:39: 43:43
        _63 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _64) -> [return: bb37, unwind: bb41]; // scope 6 at ui/wait-forked-but-failed-child.rs:43:39: 43:43
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:43:39: 43:43
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb37: {
        _62 = [move _63];                // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _61 = &_62;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _60 = _61;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _59 = move _60 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _55 = Arguments::<'_>::new_v1(move _56, move _59) -> [return: bb38, unwind: bb41]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb38: {
        _54 = panic_fmt(move _55) -> bb41; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb39: {
        drop(_2) -> bb40;                // scope 1 at ui/wait-forked-but-failed-child.rs:46:1: 46:2
    }

    bb40: {
        return;                          // scope 0 at ui/wait-forked-but-failed-child.rs:46:2: 46:2
    }

    bb41 (cleanup): {
        drop(_9) -> bb42;                // scope 3 at ui/wait-forked-but-failed-child.rs:46:1: 46:2
    }

    bb42 (cleanup): {
        drop(_2) -> bb44;                // scope 1 at ui/wait-forked-but-failed-child.rs:46:1: 46:2
    }

    bb43 (cleanup): {
        drop(_7) -> bb44;                // scope 1 at ui/wait-forked-but-failed-child.rs:33:98: 33:99
    }

    bb44 (cleanup): {
        resume;                          // scope 0 at ui/wait-forked-but-failed-child.rs:29:1: 46:2
    }
}

promoted[0] in find_zombies: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/wait-forked-but-failed-child.rs:43:20: 43:37
    let mut _1: [&str; 1];               // in scope 0 at ui/wait-forked-but-failed-child.rs:43:20: 43:37

    bb0: {
        _1 = [const "Zombie child "];    // scope 0 at ui/wait-forked-but-failed-child.rs:43:20: 43:37
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:43:20: 43:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/wait-forked-but-failed-child.rs:43:20: 43:37
        return;                          // scope 0 at ui/wait-forked-but-failed-child.rs:43:20: 43:37
    }
}

promoted[1] in find_zombies: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ui/wait-forked-but-failed-child.rs:33:49: 33:79
    let mut _1: [&str; 3];               // in scope 0 at ui/wait-forked-but-failed-child.rs:33:50: 33:79
    let mut _2: &str;                    // in scope 0 at ui/wait-forked-but-failed-child.rs:33:57: 33:61
    let mut _3: &str;                    // in scope 0 at ui/wait-forked-but-failed-child.rs:33:57: 33:61
    let mut _4: &str;                    // in scope 0 at ui/wait-forked-but-failed-child.rs:33:63: 33:78
    let mut _5: &str;                    // in scope 0 at ui/wait-forked-but-failed-child.rs:33:63: 33:78

    bb0: {
        _3 = const "-o";                 // scope 0 at ui/wait-forked-but-failed-child.rs:33:57: 33:61
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:33:57: 33:61
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at ui/wait-forked-but-failed-child.rs:33:57: 33:61
        _5 = const "pid,ppid,args";      // scope 0 at ui/wait-forked-but-failed-child.rs:33:63: 33:78
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:33:63: 33:78
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at ui/wait-forked-but-failed-child.rs:33:63: 33:78
        _1 = [const "-A", move _2, move _4]; // scope 0 at ui/wait-forked-but-failed-child.rs:33:50: 33:79
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:33:51: 33:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/wait-forked-but-failed-child.rs:33:49: 33:79
        return;                          // scope 0 at ui/wait-forked-but-failed-child.rs:33:49: 33:79
    }
}

fn find_zombies::{closure#0}(_1: &mut [closure@ui/wait-forked-but-failed-child.rs:38:45: 38:48], _2: &&str) -> bool {
    debug w => _2;                       // in scope 0 at ui/wait-forked-but-failed-child.rs:38:46: 38:47
    let mut _0: bool;                    // return place in scope 0 at ui/wait-forked-but-failed-child.rs:38:49: 38:49
    let mut _3: usize;                   // in scope 0 at ui/wait-forked-but-failed-child.rs:38:53: 38:60
    let mut _4: &str;                    // in scope 0 at ui/wait-forked-but-failed-child.rs:38:53: 38:60
    let mut _5: &str;                    // in scope 0 at ui/wait-forked-but-failed-child.rs:38:46: 38:47

    bb0: {
        _5 = deref_copy (*_2);           // scope 0 at ui/wait-forked-but-failed-child.rs:38:53: 38:60
        _4 = _5;                         // scope 0 at ui/wait-forked-but-failed-child.rs:38:53: 38:60
        _3 = core::str::<impl str>::len(move _4) -> bb1; // scope 0 at ui/wait-forked-but-failed-child.rs:38:53: 38:60
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:38:55: 38:58
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> usize {core::str::<impl str>::len}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Lt(const 0_usize, move _3); // scope 0 at ui/wait-forked-but-failed-child.rs:38:49: 38:60
        return;                          // scope 0 at ui/wait-forked-but-failed-child.rs:38:60: 38:60
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/wait-forked-but-failed-child.rs:51:11: 51:11
    let _1: std::string::String;         // in scope 0 at ui/wait-forked-but-failed-child.rs:52:9: 52:17
    let _2: std::string::String;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _4: &[&str];                 // in scope 0 at ui/wait-forked-but-failed-child.rs:52:28: 52:51
    let mut _5: &[&str; 1];              // in scope 0 at ui/wait-forked-but-failed-child.rs:52:28: 52:51
    let _6: &[&str; 1];                  // in scope 0 at ui/wait-forked-but-failed-child.rs:52:28: 52:51
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/wait-forked-but-failed-child.rs:52:53: 52:56
    let mut _12: &u8;                    // in scope 0 at ui/wait-forked-but-failed-child.rs:52:53: 52:56
    let _13: &u8;                        // in scope 0 at ui/wait-forked-but-failed-child.rs:52:53: 52:56
    let mut _14: &[std::fmt::rt::v1::Argument]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _15: &[std::fmt::rt::v1::Argument; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _16: &[std::fmt::rt::v1::Argument; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _17: [std::fmt::rt::v1::Argument; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _18: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _19: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _20: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _21: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _22: core::fmt::UnsafeArg;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _24: std::iter::Map<std::ops::Range<i32>, [closure@ui/wait-forked-but-failed-child.rs:54:34: 54:37]>; // in scope 0 at ui/wait-forked-but-failed-child.rs:54:21: 59:7
    let mut _25: std::ops::Range<i32>;   // in scope 0 at ui/wait-forked-but-failed-child.rs:54:21: 54:29
    let mut _26: [closure@ui/wait-forked-but-failed-child.rs:54:34: 54:37]; // in scope 0 at ui/wait-forked-but-failed-child.rs:54:34: 59:6
    let mut _27: &std::string::String;   // in scope 0 at ui/wait-forked-but-failed-child.rs:54:34: 59:6
    let _28: ();                         // in scope 0 at ui/wait-forked-but-failed-child.rs:61:5: 61:19
    let mut _29: &u8;                    // in scope 0 at ui/wait-forked-but-failed-child.rs:52:53: 52:56
    let mut _30: &[&str; 1];             // in scope 0 at ui/wait-forked-but-failed-child.rs:52:28: 52:51
    scope 1 {
        debug too_long => _1;            // in scope 1 at ui/wait-forked-but-failed-child.rs:52:9: 52:17
        let _23: std::vec::Vec<std::result::Result<std::process::Child, std::io::Error>>; // in scope 1 at ui/wait-forked-but-failed-child.rs:54:9: 54:18
        scope 4 {
            debug _failures => _23;      // in scope 4 at ui/wait-forked-but-failed-child.rs:54:9: 54:18
        }
    }
    scope 2 {
        debug res => _2;                 // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }
    scope 3 {
    }

    bb0: {
        _30 = const _;                   // scope 0 at ui/wait-forked-but-failed-child.rs:52:28: 52:51
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:52:28: 52:51
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[1])) }
        _6 = _30;                        // scope 0 at ui/wait-forked-but-failed-child.rs:52:28: 52:51
        _5 = _6;                         // scope 0 at ui/wait-forked-but-failed-child.rs:52:28: 52:51
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/wait-forked-but-failed-child.rs:52:28: 52:51
        _29 = const _;                   // scope 0 at ui/wait-forked-but-failed-child.rs:52:53: 52:56
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:52:53: 52:56
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[0])) }
        _13 = _29;                       // scope 0 at ui/wait-forked-but-failed-child.rs:52:53: 52:56
        _12 = _13;                       // scope 0 at ui/wait-forked-but-failed-child.rs:52:53: 52:56
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<u8>(move _12) -> bb1; // scope 0 at ui/wait-forked-but-failed-child.rs:52:53: 52:56
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:52:53: 52:56
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u8) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u8>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = [move _11];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _19 = const std::fmt::rt::v1::Alignment::Unknown; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: std::fmt::rt::v1::Alignment, val: Value(Scalar(0x03)) }
        _20 = Implied;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _21 = Is(const 300_usize) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: fn(usize) -> Count {Is}, val: Value(<ZST>) }
    }

    bb2: {
        _18 = Argument::new(const 0_usize, const ' ', move _19, const 8_u32, move _20, move _21) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: fn(usize, char, std::fmt::rt::v1::Alignment, u32, Count, Count) -> Argument {Argument::new}, val: Value(<ZST>) }
    }

    bb3: {
        _17 = [move _18];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _16 = &_17;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _15 = _16;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _14 = move _15 as &[std::fmt::rt::v1::Argument] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _22 = core::fmt::UnsafeArg::new() -> bb4; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: unsafe fn() -> core::fmt::UnsafeArg {core::fmt::UnsafeArg::new}, val: Value(<ZST>) }
    }

    bb4: {
        _3 = Arguments::<'_>::new_v1_formatted(move _4, move _7, move _14, move _22) -> bb5; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>], &[Argument], core::fmt::UnsafeArg) -> Arguments<'_> {Arguments::<'_>::new_v1_formatted}, val: Value(<ZST>) }
    }

    bb5: {
        _2 = format(move _3) -> bb6;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb6: {
        _1 = move _2;                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _25 = std::ops::Range::<i32> { start: const 0_i32, end: const 100_i32 }; // scope 1 at ui/wait-forked-but-failed-child.rs:54:21: 54:29
        _27 = &_1;                       // scope 1 at ui/wait-forked-but-failed-child.rs:54:34: 59:6
        _26 = [closure@ui/wait-forked-but-failed-child.rs:54:34: 54:37] { too_long: move _27 }; // scope 1 at ui/wait-forked-but-failed-child.rs:54:34: 59:6
                                         // closure
                                         // + def_id: DefId(0:8 ~ wait_forked_but_failed_child[7d7e]::main::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn((i32,)) -> std::result::Result<std::process::Child, std::io::Error>,
                                         //     (&std::string::String,),
                                         // ]
        _24 = <std::ops::Range<i32> as Iterator>::map::<Result<Child, std::io::Error>, [closure@ui/wait-forked-but-failed-child.rs:54:34: 54:37]>(move _25, move _26) -> [return: bb7, unwind: bb13]; // scope 1 at ui/wait-forked-but-failed-child.rs:54:21: 59:7
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:54:30: 54:33
                                         // + literal: Const { ty: fn(std::ops::Range<i32>, [closure@ui/wait-forked-but-failed-child.rs:54:34: 54:37]) -> Map<std::ops::Range<i32>, [closure@ui/wait-forked-but-failed-child.rs:54:34: 54:37]> {<std::ops::Range<i32> as Iterator>::map::<Result<Child, std::io::Error>, [closure@ui/wait-forked-but-failed-child.rs:54:34: 54:37]>}, val: Value(<ZST>) }
    }

    bb7: {
        _23 = <Map<std::ops::Range<i32>, [closure@ui/wait-forked-but-failed-child.rs:54:34: 54:37]> as Iterator>::collect::<Vec<Result<Child, std::io::Error>>>(move _24) -> [return: bb8, unwind: bb13]; // scope 1 at ui/wait-forked-but-failed-child.rs:54:21: 59:27
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:59:8: 59:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(Map<std::ops::Range<i32>, [closure@ui/wait-forked-but-failed-child.rs:54:34: 54:37]>) -> Vec<Result<Child, std::io::Error>> {<Map<std::ops::Range<i32>, [closure@ui/wait-forked-but-failed-child.rs:54:34: 54:37]> as Iterator>::collect::<Vec<Result<Child, std::io::Error>>>}, val: Value(<ZST>) }
    }

    bb8: {
        _28 = find_zombies() -> [return: bb9, unwind: bb12]; // scope 4 at ui/wait-forked-but-failed-child.rs:61:5: 61:19
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:61:5: 61:17
                                         // + literal: Const { ty: fn() {find_zombies}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_23) -> [return: bb10, unwind: bb13]; // scope 1 at ui/wait-forked-but-failed-child.rs:63:1: 63:2
    }

    bb10: {
        drop(_1) -> bb11;                // scope 0 at ui/wait-forked-but-failed-child.rs:63:1: 63:2
    }

    bb11: {
        return;                          // scope 0 at ui/wait-forked-but-failed-child.rs:63:2: 63:2
    }

    bb12 (cleanup): {
        drop(_23) -> bb13;               // scope 1 at ui/wait-forked-but-failed-child.rs:63:1: 63:2
    }

    bb13 (cleanup): {
        drop(_1) -> bb14;                // scope 0 at ui/wait-forked-but-failed-child.rs:63:1: 63:2
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/wait-forked-but-failed-child.rs:51:1: 63:2
    }
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/wait-forked-but-failed-child.rs:52:53: 52:56
    let mut _1: u8;                      // in scope 0 at ui/wait-forked-but-failed-child.rs:52:53: 52:56

    bb0: {
        _1 = const 0_u8;                 // scope 0 at ui/wait-forked-but-failed-child.rs:52:53: 52:56
        _0 = &_1;                        // scope 0 at ui/wait-forked-but-failed-child.rs:52:53: 52:56
        return;                          // scope 0 at ui/wait-forked-but-failed-child.rs:52:53: 52:56
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/wait-forked-but-failed-child.rs:52:28: 52:51
    let mut _1: [&str; 1];               // in scope 0 at ui/wait-forked-but-failed-child.rs:52:28: 52:51

    bb0: {
        _1 = [const "/NoSuchCommand"];   // scope 0 at ui/wait-forked-but-failed-child.rs:52:28: 52:51
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:52:28: 52:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/wait-forked-but-failed-child.rs:52:28: 52:51
        return;                          // scope 0 at ui/wait-forked-but-failed-child.rs:52:28: 52:51
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/wait-forked-but-failed-child.rs:54:34: 54:37], _2: i32) -> Result<Child, std::io::Error> {
    debug too_long => (*((*_1).0: &std::string::String)); // in scope 0 at ui/wait-forked-but-failed-child.rs:52:9: 52:17
    let mut _3: std::process::Command;   // in scope 0 at ui/wait-forked-but-failed-child.rs:55:13: 55:20
    let mut _4: &std::string::String;    // in scope 0 at ui/wait-forked-but-failed-child.rs:55:36: 55:45
    let mut _5: &mut std::process::Command; // in scope 0 at ui/wait-forked-but-failed-child.rs:56:22: 56:33
    let mut _6: bool;                    // in scope 0 at ui/wait-forked-but-failed-child.rs:57:9: 57:86
    let mut _7: bool;                    // in scope 0 at ui/wait-forked-but-failed-child.rs:57:17: 57:32
    let mut _8: &std::result::Result<std::process::Child, std::io::Error>; // in scope 0 at ui/wait-forked-but-failed-child.rs:57:17: 57:32
    let mut _9: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _10: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _11: &[&str];                // in scope 0 at ui/wait-forked-but-failed-child.rs:57:34: 57:80
    let mut _12: &[&str; 1];             // in scope 0 at ui/wait-forked-but-failed-child.rs:57:34: 57:80
    let _13: &[&str; 1];                 // in scope 0 at ui/wait-forked-but-failed-child.rs:57:34: 57:80
    let mut _14: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _16: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _17: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _18: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/wait-forked-but-failed-child.rs:57:82: 57:85
    let mut _19: &std::process::Command; // in scope 0 at ui/wait-forked-but-failed-child.rs:57:82: 57:85
    let _20: &std::process::Command;     // in scope 0 at ui/wait-forked-but-failed-child.rs:57:82: 57:85
    let mut _22: &std::string::String;   // in scope 0 at ui/wait-forked-but-failed-child.rs:54:34: 59:6
    scope 1 {
        debug cmd => _3;                 // in scope 1 at ui/wait-forked-but-failed-child.rs:55:13: 55:20
        let mut _0: std::result::Result<std::process::Child, std::io::Error>; // return place in scope 1 at ui/wait-forked-but-failed-child.rs:56:13: 56:19
        scope 2 {
            debug failed => _0;          // in scope 2 at ui/wait-forked-but-failed-child.rs:56:13: 56:19
            let mut _21: &[&str; 1];     // in scope 2 at ui/wait-forked-but-failed-child.rs:57:34: 57:80
        }
    }

    bb0: {
        _22 = deref_copy ((*_1).0: &std::string::String); // scope 0 at ui/wait-forked-but-failed-child.rs:55:36: 55:45
        _4 = _22;                        // scope 0 at ui/wait-forked-but-failed-child.rs:55:36: 55:45
        _3 = Command::new::<&String>(move _4) -> bb1; // scope 0 at ui/wait-forked-but-failed-child.rs:55:23: 55:46
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:55:23: 55:35
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&String) -> Command {Command::new::<&String>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut _3;                    // scope 1 at ui/wait-forked-but-failed-child.rs:56:22: 56:33
        _0 = Command::spawn(move _5) -> [return: bb2, unwind: bb10]; // scope 1 at ui/wait-forked-but-failed-child.rs:56:22: 56:33
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:56:26: 56:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Child, std::io::Error> {Command::spawn}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &_0;                        // scope 2 at ui/wait-forked-but-failed-child.rs:57:17: 57:32
        _7 = Result::<Child, std::io::Error>::is_err(move _8) -> [return: bb3, unwind: bb9]; // scope 2 at ui/wait-forked-but-failed-child.rs:57:17: 57:32
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:57:24: 57:30
                                         // + literal: Const { ty: for<'a> fn(&'a Result<Child, std::io::Error>) -> bool {Result::<Child, std::io::Error>::is_err}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = Not(move _7);               // scope 2 at ui/wait-forked-but-failed-child.rs:57:9: 57:86
        switchInt(move _6) -> [0: bb7, otherwise: bb4]; // scope 2 at ui/wait-forked-but-failed-child.rs:57:9: 57:86
    }

    bb4: {
        _21 = const _;                   // scope 2 at ui/wait-forked-but-failed-child.rs:57:34: 57:80
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:57:34: 57:80
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _13 = _21;                       // scope 2 at ui/wait-forked-but-failed-child.rs:57:34: 57:80
        _12 = _13;                       // scope 2 at ui/wait-forked-but-failed-child.rs:57:34: 57:80
        _11 = move _12 as &[&str] (Pointer(Unsize)); // scope 2 at ui/wait-forked-but-failed-child.rs:57:34: 57:80
        _20 = &_3;                       // scope 2 at ui/wait-forked-but-failed-child.rs:57:82: 57:85
        _19 = _20;                       // scope 2 at ui/wait-forked-but-failed-child.rs:57:82: 57:85
        _18 = core::fmt::ArgumentV1::<'_>::new_debug::<Command>(move _19) -> [return: bb5, unwind: bb9]; // scope 2 at ui/wait-forked-but-failed-child.rs:57:82: 57:85
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:57:82: 57:85
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b Command) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Command>}, val: Value(<ZST>) }
    }

    bb5: {
        _17 = [move _18];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _16 = &_17;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _14 = move _15 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _10 = Arguments::<'_>::new_v1(move _11, move _14) -> [return: bb6, unwind: bb9]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb6: {
        _9 = panic_fmt(move _10) -> bb9; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb7: {
        drop(_3) -> bb8;                 // scope 0 at ui/wait-forked-but-failed-child.rs:59:5: 59:6
    }

    bb8: {
        return;                          // scope 0 at ui/wait-forked-but-failed-child.rs:59:6: 59:6
    }

    bb9 (cleanup): {
        drop(_0) -> bb10;                // scope 1 at ui/wait-forked-but-failed-child.rs:59:5: 59:6
    }

    bb10 (cleanup): {
        drop(_3) -> bb11;                // scope 0 at ui/wait-forked-but-failed-child.rs:59:5: 59:6
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/wait-forked-but-failed-child.rs:54:34: 59:6
    }
}

promoted[0] in main::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/wait-forked-but-failed-child.rs:57:34: 57:80
    let mut _1: [&str; 1];               // in scope 0 at ui/wait-forked-but-failed-child.rs:57:34: 57:80

    bb0: {
        _1 = [const "Make sure the command fails to spawn(): "]; // scope 0 at ui/wait-forked-but-failed-child.rs:57:34: 57:80
                                         // mir::Constant
                                         // + span: ui/wait-forked-but-failed-child.rs:57:34: 57:80
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/wait-forked-but-failed-child.rs:57:34: 57:80
        return;                          // scope 0 at ui/wait-forked-but-failed-child.rs:57:34: 57:80
    }
}
