// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
E::Nothing::2::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn <impl at ui/nullable-pointer-iotareduction.rs:12:1: 12:13>::is_none(_1: &E<T>) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: isize;

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const true;
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = const false;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn <impl at ui/nullable-pointer-iotareduction.rs:12:1: 12:13>::get_ref(_1: &E<T>) -> (isize, &T) {
    debug self => _1;
    let mut _0: (isize, &T);
    let mut _2: isize;
    let _3: !;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 0];
    let _8: [core::fmt::rt::Argument<'_>; 0];
    let _9: isize;
    let _10: &T;
    let mut _11: &[&str; 1];
    scope 1 {
        debug x => _9;
        debug y => _10;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        _9 = (((*_1) as Thing).0: isize);
        _10 = &(((*_1) as Thing).1: T);
        _0 = (_9, _10);
        return;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _11 = const _;
        _5 = _11 as &[&str] (Pointer(Unsize));
        _8 = core::fmt::rt::Argument::<'_>::none() -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb5, unwind continue];
    }

    bb5: {
        _3 = panic_fmt(move _4) -> unwind continue;
    }
}

promoted[0] in <impl at ui/nullable-pointer-iotareduction.rs:12:1: 12:13>::get_ref: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "E::get_ref(Nothing::<T>)"];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: !;
    let mut _6: std::option::Option<&&isize>;
    let mut _7: &std::option::Option<&isize>;
    let mut _8: (&&isize, &&isize);
    let mut _9: &&isize;
    let mut _12: bool;
    let mut _13: bool;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: !;
    let mut _21: (isize, &&isize);
    let mut _22: &E<&isize>;
    let mut _24: (&&isize, &&isize);
    let mut _27: bool;
    let mut _28: bool;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let _32: !;
    let mut _33: std::fmt::Arguments<'_>;
    let mut _34: &[&str];
    let mut _35: &[core::fmt::rt::Argument<'_>];
    let _36: &[core::fmt::rt::Argument<'_>; 0];
    let _37: [core::fmt::rt::Argument<'_>; 0];
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: !;
    let _41: std::boxed::Box<isize>;
    let mut _43: std::boxed::Box<isize>;
    let mut _45: std::option::Option<&std::boxed::Box<isize>>;
    let mut _46: &std::option::Option<std::boxed::Box<isize>>;
    let mut _47: (&std::boxed::Box<isize>, &std::boxed::Box<isize>);
    let mut _48: &std::boxed::Box<isize>;
    let mut _49: &std::boxed::Box<isize>;
    let _50: std::boxed::Box<isize>;
    let mut _53: bool;
    let mut _54: bool;
    let _56: !;
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: !;
    let _61: std::boxed::Box<isize>;
    let mut _63: std::boxed::Box<isize>;
    let mut _64: (isize, &std::boxed::Box<isize>);
    let mut _65: &E<std::boxed::Box<isize>>;
    let mut _67: (&std::boxed::Box<isize>, &std::boxed::Box<isize>);
    let mut _68: &std::boxed::Box<isize>;
    let _69: std::boxed::Box<isize>;
    let mut _72: bool;
    let mut _73: bool;
    let _75: !;
    let mut _76: std::option::Option<std::fmt::Arguments<'_>>;
    let _77: !;
    let mut _78: std::fmt::Arguments<'_>;
    let mut _79: &[&str];
    let mut _80: &[core::fmt::rt::Argument<'_>];
    let _81: &[core::fmt::rt::Argument<'_>; 0];
    let _82: [core::fmt::rt::Argument<'_>; 0];
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: !;
    let _86: std::string::String;
    let _87: &str;
    let mut _89: std::string::String;
    let mut _91: std::option::Option<&std::string::String>;
    let mut _92: &std::option::Option<std::string::String>;
    let mut _93: (&std::string::String, &std::string::String);
    let mut _94: &std::string::String;
    let mut _95: &std::string::String;
    let _96: std::string::String;
    let _97: &str;
    let mut _100: bool;
    let mut _101: bool;
    let _103: !;
    let mut _104: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: !;
    let _108: std::string::String;
    let _109: &str;
    let mut _111: std::string::String;
    let mut _112: (isize, &std::string::String);
    let mut _113: &E<std::string::String>;
    let mut _115: (&std::string::String, &std::string::String);
    let mut _116: &std::string::String;
    let _117: std::string::String;
    let _118: &str;
    let mut _121: bool;
    let mut _122: bool;
    let _124: !;
    let mut _125: std::option::Option<std::fmt::Arguments<'_>>;
    let _126: !;
    let mut _127: std::fmt::Arguments<'_>;
    let mut _128: &[&str];
    let mut _129: &[core::fmt::rt::Argument<'_>];
    let _130: &[core::fmt::rt::Argument<'_>; 0];
    let _131: [core::fmt::rt::Argument<'_>; 0];
    let mut _132: bool;
    let mut _133: bool;
    let mut _134: !;
    let _135: std::vec::Vec<isize>;
    let mut _136: std::boxed::Box<[isize]>;
    let mut _137: usize;
    let mut _138: usize;
    let mut _139: *mut u8;
    let mut _140: std::boxed::Box<[isize; 2]>;
    let mut _142: std::vec::Vec<isize>;
    let mut _144: std::option::Option<&std::vec::Vec<isize>>;
    let mut _145: &std::option::Option<std::vec::Vec<isize>>;
    let mut _146: (&std::vec::Vec<isize>, &std::vec::Vec<isize>);
    let mut _147: &std::vec::Vec<isize>;
    let mut _148: &std::vec::Vec<isize>;
    let _149: std::vec::Vec<isize>;
    let mut _150: std::boxed::Box<[isize]>;
    let mut _151: usize;
    let mut _152: usize;
    let mut _153: *mut u8;
    let mut _154: std::boxed::Box<[isize; 2]>;
    let mut _157: bool;
    let mut _158: bool;
    let _160: !;
    let mut _161: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _162: bool;
    let mut _163: bool;
    let mut _164: !;
    let _165: std::vec::Vec<isize>;
    let mut _166: std::boxed::Box<[isize]>;
    let mut _167: usize;
    let mut _168: usize;
    let mut _169: *mut u8;
    let mut _170: std::boxed::Box<[isize; 2]>;
    let mut _172: std::vec::Vec<isize>;
    let mut _173: (isize, &std::vec::Vec<isize>);
    let mut _174: &E<std::vec::Vec<isize>>;
    let mut _176: (&std::vec::Vec<isize>, &std::vec::Vec<isize>);
    let mut _177: &std::vec::Vec<isize>;
    let _178: std::vec::Vec<isize>;
    let mut _179: std::boxed::Box<[isize]>;
    let mut _180: usize;
    let mut _181: usize;
    let mut _182: *mut u8;
    let mut _183: std::boxed::Box<[isize; 2]>;
    let mut _186: bool;
    let mut _187: bool;
    let _189: !;
    let mut _190: std::option::Option<std::fmt::Arguments<'_>>;
    let _191: !;
    let mut _192: std::fmt::Arguments<'_>;
    let mut _193: &[&str];
    let mut _194: &[core::fmt::rt::Argument<'_>];
    let _195: &[core::fmt::rt::Argument<'_>; 0];
    let _196: [core::fmt::rt::Argument<'_>; 0];
    let mut _197: bool;
    let mut _198: bool;
    let mut _199: !;
    let mut _201: fn();
    let mut _203: std::option::Option<&fn()>;
    let mut _204: &std::option::Option<fn()>;
    let mut _205: (&fn(), &fn());
    let mut _206: &fn();
    let _207: fn();
    let mut _210: bool;
    let mut _211: bool;
    let mut _212: fn();
    let mut _213: fn();
    let _215: !;
    let mut _216: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _217: bool;
    let mut _218: bool;
    let mut _219: !;
    let mut _221: fn();
    let mut _222: (isize, &fn());
    let mut _223: &E<fn()>;
    let mut _225: (&fn(), &fn());
    let mut _226: &fn();
    let _227: fn();
    let mut _230: bool;
    let mut _231: bool;
    let mut _232: fn();
    let mut _233: fn();
    let _235: !;
    let mut _236: std::option::Option<std::fmt::Arguments<'_>>;
    let _237: !;
    let mut _238: std::fmt::Arguments<'_>;
    let mut _239: &[&str];
    let mut _240: &[core::fmt::rt::Argument<'_>];
    let _241: &[core::fmt::rt::Argument<'_>; 0];
    let _242: [core::fmt::rt::Argument<'_>; 0];
    let mut _249: &E<fn()>;
    let mut _251: &std::option::Option<fn()>;
    let mut _252: &E<std::vec::Vec<isize>>;
    let mut _253: &std::option::Option<std::vec::Vec<isize>>;
    let mut _254: &E<std::string::String>;
    let mut _255: &std::option::Option<std::string::String>;
    let mut _256: &E<std::boxed::Box<isize>>;
    let mut _257: &std::option::Option<std::boxed::Box<isize>>;
    let mut _259: &isize;
    let mut _260: &E<&isize>;
    let mut _262: &isize;
    let mut _263: &std::option::Option<&isize>;
    let mut _264: *const [isize; 2];
    let mut _265: *const [isize; 2];
    let mut _266: *const [isize; 2];
    let mut _267: *const [isize; 2];
    let mut _274: *const ();
    let mut _275: usize;
    let mut _276: usize;
    let mut _277: usize;
    let mut _278: usize;
    let mut _279: bool;
    let mut _286: *const ();
    let mut _287: usize;
    let mut _288: usize;
    let mut _289: usize;
    let mut _290: usize;
    let mut _291: bool;
    scope 1 {
        debug e => const _;
        let _4: std::option::Option<&isize>;
        scope 2 {
            debug s_ => _4;
            let _5: &&isize;
            scope 3 {
                debug ptr => _5;
                let _10: &&isize;
                let _11: &&isize;
                let mut _261: &&isize;
                scope 4 {
                    debug left_val => _10;
                    debug right_val => _11;
                    let _14: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _14;
                    }
                }
            }
        }
    }
    scope 6 {
        debug e => const _;
        let _20: E<&isize>;
        scope 7 {
            debug t_ => _20;
            let _23: &&isize;
            let mut _243: &[&str; 1];
            scope 8 {
                debug ptr => _23;
                let _25: &&isize;
                let _26: &&isize;
                let mut _258: &&isize;
                scope 9 {
                    debug left_val => _25;
                    debug right_val => _26;
                    let _29: core::panicking::AssertKind;
                    scope 10 {
                        debug kind => _29;
                    }
                }
            }
        }
    }
    scope 11 {
        debug e => _41;
        let _42: std::option::Option<std::boxed::Box<isize>>;
        scope 12 {
            debug s_ => _42;
            let _44: &std::boxed::Box<isize>;
            scope 13 {
                debug ptr => _44;
                let _51: &std::boxed::Box<isize>;
                let _52: &std::boxed::Box<isize>;
                scope 14 {
                    debug left_val => _51;
                    debug right_val => _52;
                    let _55: core::panicking::AssertKind;
                    scope 15 {
                        debug kind => _55;
                    }
                }
            }
        }
    }
    scope 16 {
        debug e => _61;
        let _62: E<std::boxed::Box<isize>>;
        scope 17 {
            debug t_ => _62;
            let _66: &std::boxed::Box<isize>;
            let mut _244: &[&str; 1];
            scope 18 {
                debug ptr => _66;
                let _70: &std::boxed::Box<isize>;
                let _71: &std::boxed::Box<isize>;
                scope 19 {
                    debug left_val => _70;
                    debug right_val => _71;
                    let _74: core::panicking::AssertKind;
                    scope 20 {
                        debug kind => _74;
                    }
                }
            }
        }
    }
    scope 21 {
        debug e => _86;
        let _88: std::option::Option<std::string::String>;
        scope 22 {
            debug s_ => _88;
            let _90: &std::string::String;
            scope 23 {
                debug ptr => _90;
                let _98: &std::string::String;
                let _99: &std::string::String;
                scope 24 {
                    debug left_val => _98;
                    debug right_val => _99;
                    let _102: core::panicking::AssertKind;
                    scope 25 {
                        debug kind => _102;
                    }
                }
            }
        }
    }
    scope 26 {
        debug e => _108;
        let _110: E<std::string::String>;
        scope 27 {
            debug t_ => _110;
            let _114: &std::string::String;
            let mut _245: &[&str; 1];
            scope 28 {
                debug ptr => _114;
                let _119: &std::string::String;
                let _120: &std::string::String;
                scope 29 {
                    debug left_val => _119;
                    debug right_val => _120;
                    let _123: core::panicking::AssertKind;
                    scope 30 {
                        debug kind => _123;
                    }
                }
            }
        }
    }
    scope 31 {
        debug e => _135;
        let _141: std::option::Option<std::vec::Vec<isize>>;
        scope 33 {
            debug s_ => _141;
            let _143: &std::vec::Vec<isize>;
            scope 34 {
                debug ptr => _143;
                let _155: &std::vec::Vec<isize>;
                let _156: &std::vec::Vec<isize>;
                let mut _280: *const ();
                let mut _281: usize;
                let mut _282: usize;
                let mut _283: usize;
                let mut _284: usize;
                let mut _285: bool;
                scope 35 {
                }
                scope 36 {
                    debug left_val => _155;
                    debug right_val => _156;
                    let _159: core::panicking::AssertKind;
                    scope 37 {
                        debug kind => _159;
                    }
                }
            }
        }
    }
    scope 32 {
    }
    scope 38 {
        debug e => _165;
        let _171: E<std::vec::Vec<isize>>;
        scope 40 {
            debug t_ => _171;
            let _175: &std::vec::Vec<isize>;
            let mut _246: &[&str; 1];
            scope 41 {
                debug ptr => _175;
                let _184: &std::vec::Vec<isize>;
                let _185: &std::vec::Vec<isize>;
                let mut _268: *const ();
                let mut _269: usize;
                let mut _270: usize;
                let mut _271: usize;
                let mut _272: usize;
                let mut _273: bool;
                scope 42 {
                }
                scope 43 {
                    debug left_val => _184;
                    debug right_val => _185;
                    let _188: core::panicking::AssertKind;
                    scope 44 {
                        debug kind => _188;
                    }
                }
            }
        }
    }
    scope 39 {
    }
    scope 45 {
        debug e => main;
        let _200: std::option::Option<fn()>;
        scope 46 {
            debug s_ => _200;
            let _202: &fn();
            scope 47 {
                debug pthing => _202;
                let _208: &fn();
                let _209: &fn();
                let mut _250: &fn();
                scope 48 {
                    debug left_val => _208;
                    debug right_val => _209;
                    let _214: core::panicking::AssertKind;
                    scope 49 {
                        debug kind => _214;
                    }
                }
            }
        }
    }
    scope 50 {
        debug e => main;
        let _220: E<fn()>;
        scope 51 {
            debug t_ => _220;
            let _224: &fn();
            let mut _247: &[&str; 1];
            scope 52 {
                debug pthing => _224;
                let _228: &fn();
                let _229: &fn();
                let mut _248: &fn();
                scope 53 {
                    debug left_val => _228;
                    debug right_val => _229;
                    let _234: core::panicking::AssertKind;
                    scope 54 {
                        debug kind => _234;
                    }
                }
            }
        }
    }

    bb0: {
        _263 = const _;
        _2 = Option::<&isize>::is_none(_263) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _3 = core::panicking::panic(const "assertion failed: None::<&isize>.is_none()") -> unwind continue;
    }

    bb3: {
        _262 = const _;
        _4 = Option::<&isize>::Some(_262);
        _7 = &_4;
        _6 = Option::<&isize>::as_ref(move _7) -> [return: bb4, unwind continue];
    }

    bb4: {
        _5 = Option::<&&isize>::unwrap(move _6) -> [return: bb5, unwind continue];
    }

    bb5: {
        _9 = _5;
        _261 = const _;
        _8 = (move _9, _261);
        _10 = (_8.0: &&isize);
        _11 = (_8.1: &&isize);
        _13 = <&isize as PartialEq>::eq(_10, _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<&isize, &isize>(move _14, _10, _11, move _16) -> unwind continue;
    }

    bb8: {
        _260 = const _;
        _18 = E::<&isize>::is_none(_260) -> [return: bb9, unwind continue];
    }

    bb9: {
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _19 = core::panicking::panic(const "assertion failed: E::Nothing::<&isize>((), ((), ()), [23; 0]).is_none()") -> unwind continue;
    }

    bb11: {
        _259 = const _;
        _20 = E::<&isize>::Thing(const 23_isize, _259);
        _22 = &_20;
        _21 = E::<&isize>::get_ref(move _22) -> [return: bb12, unwind continue];
    }

    bb12: {
        switchInt((_21.0: isize)) -> [23: bb14, otherwise: bb13];
    }

    bb13: {
        _243 = const _;
        _34 = _243 as &[&str] (Pointer(Unsize));
        _37 = core::fmt::rt::Argument::<'_>::none() -> [return: bb18, unwind continue];
    }

    bb14: {
        _23 = (_21.1: &&isize);
        _258 = const _;
        _24 = (_23, _258);
        _25 = (_24.0: &&isize);
        _26 = (_24.1: &&isize);
        _28 = <&isize as PartialEq>::eq(_25, _26) -> [return: bb15, unwind continue];
    }

    bb15: {
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<&isize, &isize>(move _29, _25, _26, move _31) -> unwind continue;
    }

    bb17: {
        _257 = const _;
        _39 = Option::<Box<isize>>::is_none(_257) -> [return: bb20, unwind continue];
    }

    bb18: {
        _36 = &_37;
        _35 = _36 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _33 = Arguments::<'_>::new_v1(move _34, move _35) -> [return: bb19, unwind continue];
    }

    bb19: {
        _32 = panic_fmt(move _33) -> unwind continue;
    }

    bb20: {
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _40 = core::panicking::panic(const "assertion failed: None::<Box<isize>>.is_none()") -> unwind continue;
    }

    bb22: {
        _41 = Box::<isize>::new(const 18_isize) -> [return: bb23, unwind continue];
    }

    bb23: {
        _43 = move _41;
        _42 = Option::<Box<isize>>::Some(move _43);
        _46 = &_42;
        _45 = Option::<Box<isize>>::as_ref(move _46) -> [return: bb24, unwind: bb136];
    }

    bb24: {
        _44 = Option::<&Box<isize>>::unwrap(move _45) -> [return: bb25, unwind: bb136];
    }

    bb25: {
        _48 = _44;
        _50 = Box::<isize>::new(const 18_isize) -> [return: bb26, unwind: bb136];
    }

    bb26: {
        _49 = &_50;
        _47 = (move _48, move _49);
        _51 = (_47.0: &std::boxed::Box<isize>);
        _52 = (_47.1: &std::boxed::Box<isize>);
        _54 = <Box<isize> as PartialEq>::eq(_51, _52) -> [return: bb27, unwind: bb134];
    }

    bb27: {
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _55 = core::panicking::AssertKind::Eq;
        _57 = Option::<Arguments<'_>>::None;
        _56 = core::panicking::assert_failed::<Box<isize>, Box<isize>>(move _55, _51, _52, move _57) -> bb134;
    }

    bb29: {
        drop(_42) -> [return: bb30, unwind: bb135];
    }

    bb30: {
        drop(_50) -> [return: bb31, unwind continue];
    }

    bb31: {
        _256 = const _;
        _59 = E::<Box<isize>>::is_none(_256) -> [return: bb32, unwind continue];
    }

    bb32: {
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _60 = core::panicking::panic(const "assertion failed: E::Nothing::<Box<isize>>((), ((), ()), [23; 0]).is_none()") -> unwind continue;
    }

    bb34: {
        _61 = Box::<isize>::new(const 18_isize) -> [return: bb35, unwind continue];
    }

    bb35: {
        _63 = move _61;
        _62 = E::<Box<isize>>::Thing(const 23_isize, move _63);
        _65 = &_62;
        _64 = E::<Box<isize>>::get_ref(move _65) -> [return: bb36, unwind: bb133];
    }

    bb36: {
        switchInt((_64.0: isize)) -> [23: bb38, otherwise: bb37];
    }

    bb37: {
        _244 = const _;
        _79 = _244 as &[&str] (Pointer(Unsize));
        _82 = core::fmt::rt::Argument::<'_>::none() -> [return: bb44, unwind: bb133];
    }

    bb38: {
        _66 = (_64.1: &std::boxed::Box<isize>);
        _69 = Box::<isize>::new(const 18_isize) -> [return: bb39, unwind: bb133];
    }

    bb39: {
        _68 = &_69;
        _67 = (_66, move _68);
        _70 = (_67.0: &std::boxed::Box<isize>);
        _71 = (_67.1: &std::boxed::Box<isize>);
        _73 = <Box<isize> as PartialEq>::eq(_70, _71) -> [return: bb40, unwind: bb132];
    }

    bb40: {
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _74 = core::panicking::AssertKind::Eq;
        _76 = Option::<Arguments<'_>>::None;
        _75 = core::panicking::assert_failed::<Box<isize>, Box<isize>>(move _74, _70, _71, move _76) -> bb132;
    }

    bb42: {
        drop(_69) -> [return: bb43, unwind: bb133];
    }

    bb43: {
        drop(_62) -> [return: bb46, unwind continue];
    }

    bb44: {
        _81 = &_82;
        _80 = _81 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _78 = Arguments::<'_>::new_v1(move _79, move _80) -> [return: bb45, unwind: bb133];
    }

    bb45: {
        _77 = panic_fmt(move _78) -> bb133;
    }

    bb46: {
        _255 = const _;
        _84 = Option::<String>::is_none(_255) -> [return: bb47, unwind continue];
    }

    bb47: {
        _83 = Not(move _84);
        switchInt(move _83) -> [0: bb49, otherwise: bb48];
    }

    bb48: {
        _85 = core::panicking::panic(const "assertion failed: None::<String>.is_none()") -> unwind continue;
    }

    bb49: {
        _87 = const "foo";
        _86 = <str as ToString>::to_string(_87) -> [return: bb50, unwind continue];
    }

    bb50: {
        _89 = move _86;
        _88 = Option::<String>::Some(move _89);
        _92 = &_88;
        _91 = Option::<String>::as_ref(move _92) -> [return: bb51, unwind: bb131];
    }

    bb51: {
        _90 = Option::<&String>::unwrap(move _91) -> [return: bb52, unwind: bb131];
    }

    bb52: {
        _94 = _90;
        _97 = const "foo";
        _96 = <str as ToString>::to_string(_97) -> [return: bb53, unwind: bb131];
    }

    bb53: {
        _95 = &_96;
        _93 = (move _94, move _95);
        _98 = (_93.0: &std::string::String);
        _99 = (_93.1: &std::string::String);
        _101 = <String as PartialEq>::eq(_98, _99) -> [return: bb54, unwind: bb129];
    }

    bb54: {
        _100 = Not(move _101);
        switchInt(move _100) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _102 = core::panicking::AssertKind::Eq;
        _104 = Option::<Arguments<'_>>::None;
        _103 = core::panicking::assert_failed::<String, String>(move _102, _98, _99, move _104) -> bb129;
    }

    bb56: {
        drop(_88) -> [return: bb57, unwind: bb130];
    }

    bb57: {
        drop(_96) -> [return: bb58, unwind continue];
    }

    bb58: {
        _254 = const _;
        _106 = E::<String>::is_none(_254) -> [return: bb59, unwind continue];
    }

    bb59: {
        _105 = Not(move _106);
        switchInt(move _105) -> [0: bb61, otherwise: bb60];
    }

    bb60: {
        _107 = core::panicking::panic(const "assertion failed: E::Nothing::<String>((), ((), ()), [23; 0]).is_none()") -> unwind continue;
    }

    bb61: {
        _109 = const "foo";
        _108 = <str as ToString>::to_string(_109) -> [return: bb62, unwind continue];
    }

    bb62: {
        _111 = move _108;
        _110 = E::<String>::Thing(const 23_isize, move _111);
        _113 = &_110;
        _112 = E::<String>::get_ref(move _113) -> [return: bb63, unwind: bb128];
    }

    bb63: {
        switchInt((_112.0: isize)) -> [23: bb65, otherwise: bb64];
    }

    bb64: {
        _245 = const _;
        _128 = _245 as &[&str] (Pointer(Unsize));
        _131 = core::fmt::rt::Argument::<'_>::none() -> [return: bb71, unwind: bb128];
    }

    bb65: {
        _114 = (_112.1: &std::string::String);
        _118 = const "foo";
        _117 = <str as ToString>::to_string(_118) -> [return: bb66, unwind: bb128];
    }

    bb66: {
        _116 = &_117;
        _115 = (_114, move _116);
        _119 = (_115.0: &std::string::String);
        _120 = (_115.1: &std::string::String);
        _122 = <String as PartialEq>::eq(_119, _120) -> [return: bb67, unwind: bb127];
    }

    bb67: {
        _121 = Not(move _122);
        switchInt(move _121) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        _123 = core::panicking::AssertKind::Eq;
        _125 = Option::<Arguments<'_>>::None;
        _124 = core::panicking::assert_failed::<String, String>(move _123, _119, _120, move _125) -> bb127;
    }

    bb69: {
        drop(_117) -> [return: bb70, unwind: bb128];
    }

    bb70: {
        drop(_110) -> [return: bb73, unwind continue];
    }

    bb71: {
        _130 = &_131;
        _129 = _130 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _127 = Arguments::<'_>::new_v1(move _128, move _129) -> [return: bb72, unwind: bb128];
    }

    bb72: {
        _126 = panic_fmt(move _127) -> bb128;
    }

    bb73: {
        _253 = const _;
        _133 = Option::<Vec<isize>>::is_none(_253) -> [return: bb74, unwind continue];
    }

    bb74: {
        _132 = Not(move _133);
        switchInt(move _132) -> [0: bb76, otherwise: bb75];
    }

    bb75: {
        _134 = core::panicking::panic(const "assertion failed: None::<Vec<isize>>.is_none()") -> unwind continue;
    }

    bb76: {
        _137 = SizeOf([isize; 2]);
        _138 = AlignOf([isize; 2]);
        _139 = alloc::alloc::exchange_malloc(move _137, move _138) -> [return: bb77, unwind continue];
    }

    bb77: {
        _140 = ShallowInitBox(move _139, [isize; 2]);
        _264 = (((_140.0: std::ptr::Unique<[isize; 2]>).0: std::ptr::NonNull<[isize; 2]>).0: *const [isize; 2]);
        _286 = _264 as *const () (PtrToPtr);
        _287 = _286 as usize (Transmute);
        _288 = AlignOf(isize);
        _289 = Sub(_288, const 1_usize);
        _290 = BitAnd(_287, _289);
        _291 = Eq(_290, const 0_usize);
        assert(_291, "misaligned pointer dereference: address must be a multiple of {} but is {}", _288, _287) -> [success: bb141, unwind unreachable];
    }

    bb78: {
        _142 = move _135;
        _141 = Option::<Vec<isize>>::Some(move _142);
        _145 = &_141;
        _144 = Option::<Vec<isize>>::as_ref(move _145) -> [return: bb79, unwind: bb126];
    }

    bb79: {
        _143 = Option::<&Vec<isize>>::unwrap(move _144) -> [return: bb80, unwind: bb126];
    }

    bb80: {
        _147 = _143;
        _151 = SizeOf([isize; 2]);
        _152 = AlignOf([isize; 2]);
        _153 = alloc::alloc::exchange_malloc(move _151, move _152) -> [return: bb81, unwind: bb126];
    }

    bb81: {
        _154 = ShallowInitBox(move _153, [isize; 2]);
        _265 = (((_154.0: std::ptr::Unique<[isize; 2]>).0: std::ptr::NonNull<[isize; 2]>).0: *const [isize; 2]);
        _280 = _265 as *const () (PtrToPtr);
        _281 = _280 as usize (Transmute);
        _282 = AlignOf(isize);
        _283 = Sub(_282, const 1_usize);
        _284 = BitAnd(_281, _283);
        _285 = Eq(_284, const 0_usize);
        assert(_285, "misaligned pointer dereference: address must be a multiple of {} but is {}", _282, _281) -> [success: bb140, unwind unreachable];
    }

    bb82: {
        _148 = &_149;
        _146 = (move _147, move _148);
        _155 = (_146.0: &std::vec::Vec<isize>);
        _156 = (_146.1: &std::vec::Vec<isize>);
        _158 = <Vec<isize> as PartialEq>::eq(_155, _156) -> [return: bb83, unwind: bb124];
    }

    bb83: {
        _157 = Not(move _158);
        switchInt(move _157) -> [0: bb85, otherwise: bb84];
    }

    bb84: {
        _159 = core::panicking::AssertKind::Eq;
        _161 = Option::<Arguments<'_>>::None;
        _160 = core::panicking::assert_failed::<Vec<isize>, Vec<isize>>(move _159, _155, _156, move _161) -> bb124;
    }

    bb85: {
        drop(_141) -> [return: bb86, unwind: bb125];
    }

    bb86: {
        drop(_149) -> [return: bb87, unwind continue];
    }

    bb87: {
        _252 = const _;
        _163 = E::<Vec<isize>>::is_none(_252) -> [return: bb88, unwind continue];
    }

    bb88: {
        _162 = Not(move _163);
        switchInt(move _162) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        _164 = core::panicking::panic(const "assertion failed: E::Nothing::<Vec<isize>>((), ((), ()), [23; 0]).is_none()") -> unwind continue;
    }

    bb90: {
        _167 = SizeOf([isize; 2]);
        _168 = AlignOf([isize; 2]);
        _169 = alloc::alloc::exchange_malloc(move _167, move _168) -> [return: bb91, unwind continue];
    }

    bb91: {
        _170 = ShallowInitBox(move _169, [isize; 2]);
        _266 = (((_170.0: std::ptr::Unique<[isize; 2]>).0: std::ptr::NonNull<[isize; 2]>).0: *const [isize; 2]);
        _274 = _266 as *const () (PtrToPtr);
        _275 = _274 as usize (Transmute);
        _276 = AlignOf(isize);
        _277 = Sub(_276, const 1_usize);
        _278 = BitAnd(_275, _277);
        _279 = Eq(_278, const 0_usize);
        assert(_279, "misaligned pointer dereference: address must be a multiple of {} but is {}", _276, _275) -> [success: bb139, unwind unreachable];
    }

    bb92: {
        _172 = move _165;
        _171 = E::<Vec<isize>>::Thing(const 23_isize, move _172);
        _174 = &_171;
        _173 = E::<Vec<isize>>::get_ref(move _174) -> [return: bb93, unwind: bb123];
    }

    bb93: {
        switchInt((_173.0: isize)) -> [23: bb95, otherwise: bb94];
    }

    bb94: {
        _246 = const _;
        _193 = _246 as &[&str] (Pointer(Unsize));
        _196 = core::fmt::rt::Argument::<'_>::none() -> [return: bb102, unwind: bb123];
    }

    bb95: {
        _175 = (_173.1: &std::vec::Vec<isize>);
        _180 = SizeOf([isize; 2]);
        _181 = AlignOf([isize; 2]);
        _182 = alloc::alloc::exchange_malloc(move _180, move _181) -> [return: bb96, unwind: bb123];
    }

    bb96: {
        _183 = ShallowInitBox(move _182, [isize; 2]);
        _267 = (((_183.0: std::ptr::Unique<[isize; 2]>).0: std::ptr::NonNull<[isize; 2]>).0: *const [isize; 2]);
        _268 = _267 as *const () (PtrToPtr);
        _269 = _268 as usize (Transmute);
        _270 = AlignOf(isize);
        _271 = Sub(_270, const 1_usize);
        _272 = BitAnd(_269, _271);
        _273 = Eq(_272, const 0_usize);
        assert(_273, "misaligned pointer dereference: address must be a multiple of {} but is {}", _270, _269) -> [success: bb138, unwind unreachable];
    }

    bb97: {
        _177 = &_178;
        _176 = (_175, move _177);
        _184 = (_176.0: &std::vec::Vec<isize>);
        _185 = (_176.1: &std::vec::Vec<isize>);
        _187 = <Vec<isize> as PartialEq>::eq(_184, _185) -> [return: bb98, unwind: bb122];
    }

    bb98: {
        _186 = Not(move _187);
        switchInt(move _186) -> [0: bb100, otherwise: bb99];
    }

    bb99: {
        _188 = core::panicking::AssertKind::Eq;
        _190 = Option::<Arguments<'_>>::None;
        _189 = core::panicking::assert_failed::<Vec<isize>, Vec<isize>>(move _188, _184, _185, move _190) -> bb122;
    }

    bb100: {
        drop(_178) -> [return: bb101, unwind: bb123];
    }

    bb101: {
        drop(_171) -> [return: bb104, unwind continue];
    }

    bb102: {
        _195 = &_196;
        _194 = _195 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _192 = Arguments::<'_>::new_v1(move _193, move _194) -> [return: bb103, unwind: bb123];
    }

    bb103: {
        _191 = panic_fmt(move _192) -> bb123;
    }

    bb104: {
        _251 = const _;
        _198 = Option::<fn()>::is_none(_251) -> [return: bb105, unwind continue];
    }

    bb105: {
        _197 = Not(move _198);
        switchInt(move _197) -> [0: bb107, otherwise: bb106];
    }

    bb106: {
        _199 = core::panicking::panic(const "assertion failed: None::<fn()>.is_none()") -> unwind continue;
    }

    bb107: {
        _201 = main as fn() (Pointer(ReifyFnPointer));
        _200 = Option::<fn()>::Some(move _201);
        _204 = &_200;
        _203 = Option::<fn()>::as_ref(move _204) -> [return: bb108, unwind continue];
    }

    bb108: {
        _202 = Option::<&fn()>::unwrap(move _203) -> [return: bb109, unwind continue];
    }

    bb109: {
        _250 = const _;
        _207 = (*_202);
        _206 = &_207;
        _205 = (_250, move _206);
        _208 = (_205.0: &fn());
        _209 = (_205.1: &fn());
        _212 = (*_208);
        _213 = (*_209);
        _211 = Eq(move _212, move _213);
        _210 = Not(move _211);
        switchInt(move _210) -> [0: bb111, otherwise: bb110];
    }

    bb110: {
        _214 = core::panicking::AssertKind::Eq;
        _216 = Option::<Arguments<'_>>::None;
        _215 = core::panicking::assert_failed::<fn(), fn()>(move _214, _208, _209, move _216) -> unwind continue;
    }

    bb111: {
        _249 = const _;
        _218 = E::<fn()>::is_none(_249) -> [return: bb112, unwind continue];
    }

    bb112: {
        _217 = Not(move _218);
        switchInt(move _217) -> [0: bb114, otherwise: bb113];
    }

    bb113: {
        _219 = core::panicking::panic(const "assertion failed: E::Nothing::<fn()>((), ((), ()), [23; 0]).is_none()") -> unwind continue;
    }

    bb114: {
        _221 = main as fn() (Pointer(ReifyFnPointer));
        _220 = E::<fn()>::Thing(const 23_isize, move _221);
        _223 = &_220;
        _222 = E::<fn()>::get_ref(move _223) -> [return: bb115, unwind continue];
    }

    bb115: {
        switchInt((_222.0: isize)) -> [23: bb117, otherwise: bb116];
    }

    bb116: {
        _247 = const _;
        _239 = _247 as &[&str] (Pointer(Unsize));
        _242 = core::fmt::rt::Argument::<'_>::none() -> [return: bb120, unwind continue];
    }

    bb117: {
        _224 = (_222.1: &fn());
        _248 = const _;
        _227 = (*_224);
        _226 = &_227;
        _225 = (_248, move _226);
        _228 = (_225.0: &fn());
        _229 = (_225.1: &fn());
        _232 = (*_228);
        _233 = (*_229);
        _231 = Eq(move _232, move _233);
        _230 = Not(move _231);
        switchInt(move _230) -> [0: bb119, otherwise: bb118];
    }

    bb118: {
        _234 = core::panicking::AssertKind::Eq;
        _236 = Option::<Arguments<'_>>::None;
        _235 = core::panicking::assert_failed::<fn(), fn()>(move _234, _228, _229, move _236) -> unwind continue;
    }

    bb119: {
        return;
    }

    bb120: {
        _241 = &_242;
        _240 = _241 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _238 = Arguments::<'_>::new_v1(move _239, move _240) -> [return: bb121, unwind continue];
    }

    bb121: {
        _237 = panic_fmt(move _238) -> unwind continue;
    }

    bb122 (cleanup): {
        drop(_178) -> [return: bb123, unwind terminate];
    }

    bb123 (cleanup): {
        drop(_171) -> [return: bb137, unwind terminate];
    }

    bb124 (cleanup): {
        drop(_141) -> [return: bb125, unwind terminate];
    }

    bb125 (cleanup): {
        drop(_149) -> [return: bb137, unwind terminate];
    }

    bb126 (cleanup): {
        drop(_141) -> [return: bb137, unwind terminate];
    }

    bb127 (cleanup): {
        drop(_117) -> [return: bb128, unwind terminate];
    }

    bb128 (cleanup): {
        drop(_110) -> [return: bb137, unwind terminate];
    }

    bb129 (cleanup): {
        drop(_88) -> [return: bb130, unwind terminate];
    }

    bb130 (cleanup): {
        drop(_96) -> [return: bb137, unwind terminate];
    }

    bb131 (cleanup): {
        drop(_88) -> [return: bb137, unwind terminate];
    }

    bb132 (cleanup): {
        drop(_69) -> [return: bb133, unwind terminate];
    }

    bb133 (cleanup): {
        drop(_62) -> [return: bb137, unwind terminate];
    }

    bb134 (cleanup): {
        drop(_42) -> [return: bb135, unwind terminate];
    }

    bb135 (cleanup): {
        drop(_50) -> [return: bb137, unwind terminate];
    }

    bb136 (cleanup): {
        drop(_42) -> [return: bb137, unwind terminate];
    }

    bb137 (cleanup): {
        resume;
    }

    bb138: {
        (*_267) = [const 20_isize, const 22_isize];
        _179 = move _183 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _178 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _179) -> [return: bb97, unwind: bb123];
    }

    bb139: {
        (*_266) = [const 20_isize, const 22_isize];
        _166 = move _170 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _165 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _166) -> [return: bb92, unwind continue];
    }

    bb140: {
        (*_265) = [const 20_isize, const 22_isize];
        _150 = move _154 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _149 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _150) -> [return: bb82, unwind: bb126];
    }

    bb141: {
        (*_264) = [const 20_isize, const 22_isize];
        _136 = move _140 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _135 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _136) -> [return: bb78, unwind continue];
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Thing::<&isize>(23, &17).get_ref() != (23, _)"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Thing::<Box<isize>>(23, Box::new(18)).get_ref() != (23, _)"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Thing::<String>(23, \"foo\".to_string()).get_ref() != (23, _)"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Thing::<Vec<isize>>(23, vec![20, 22]).get_ref() != (23, _)"];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Thing::<fn()>(23, main).get_ref() != (23, _)"];
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &fn() = {
    let mut _0: &fn();
    let mut _1: fn();

    bb0: {
        _1 = main as fn() (Pointer(ReifyFnPointer));
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &E<fn()> = {
    let mut _0: &E<fn()>;
    let mut _1: E<fn()>;
    let mut _2: ();
    let mut _3: ((), ());
    let mut _4: ();
    let mut _5: ();
    let mut _6: [i8; 0];

    bb0: {
        _2 = ();
        _4 = ();
        _5 = ();
        _3 = (move _4, move _5);
        _6 = [];
        _1 = E::<fn()>::Nothing(move _2, move _3, move _6);
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &fn() = {
    let mut _0: &fn();
    let mut _1: fn();

    bb0: {
        _1 = main as fn() (Pointer(ReifyFnPointer));
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &Option<fn()> = {
    let mut _0: &std::option::Option<fn()>;
    let mut _1: std::option::Option<fn()>;

    bb0: {
        _1 = Option::<fn()>::None;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &E<Vec<isize>> = {
    let mut _0: &E<std::vec::Vec<isize>>;
    let mut _1: E<std::vec::Vec<isize>>;
    let mut _2: ();
    let mut _3: ((), ());
    let mut _4: ();
    let mut _5: ();
    let mut _6: [i8; 0];

    bb0: {
        _2 = ();
        _4 = ();
        _5 = ();
        _3 = (move _4, move _5);
        _6 = [];
        _1 = E::<Vec<isize>>::Nothing(move _2, move _3, move _6);
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &Option<Vec<isize>> = {
    let mut _0: &std::option::Option<std::vec::Vec<isize>>;
    let mut _1: std::option::Option<std::vec::Vec<isize>>;

    bb0: {
        _1 = Option::<Vec<isize>>::None;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &E<String> = {
    let mut _0: &E<std::string::String>;
    let mut _1: E<std::string::String>;
    let mut _2: ();
    let mut _3: ((), ());
    let mut _4: ();
    let mut _5: ();
    let mut _6: [i8; 0];

    bb0: {
        _2 = ();
        _4 = ();
        _5 = ();
        _3 = (move _4, move _5);
        _6 = [];
        _1 = E::<String>::Nothing(move _2, move _3, move _6);
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &Option<String> = {
    let mut _0: &std::option::Option<std::string::String>;
    let mut _1: std::option::Option<std::string::String>;

    bb0: {
        _1 = Option::<String>::None;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &E<Box<isize>> = {
    let mut _0: &E<std::boxed::Box<isize>>;
    let mut _1: E<std::boxed::Box<isize>>;
    let mut _2: ();
    let mut _3: ((), ());
    let mut _4: ();
    let mut _5: ();
    let mut _6: [i8; 0];

    bb0: {
        _2 = ();
        _4 = ();
        _5 = ();
        _3 = (move _4, move _5);
        _6 = [];
        _1 = E::<Box<isize>>::Nothing(move _2, move _3, move _6);
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &Option<Box<isize>> = {
    let mut _0: &std::option::Option<std::boxed::Box<isize>>;
    let mut _1: std::option::Option<std::boxed::Box<isize>>;

    bb0: {
        _1 = Option::<Box<isize>>::None;
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &&isize = {
    let mut _0: &&isize;
    let mut _1: &isize;
    let mut _2: isize;

    bb0: {
        _2 = const 17_isize;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 17_isize;
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &E<&isize> = {
    let mut _0: &E<&isize>;
    let mut _1: E<&isize>;
    let mut _2: ();
    let mut _3: ((), ());
    let mut _4: ();
    let mut _5: ();
    let mut _6: [i8; 0];

    bb0: {
        _2 = ();
        _4 = ();
        _5 = ();
        _3 = (move _4, move _5);
        _6 = [];
        _1 = E::<&isize>::Nothing(move _2, move _3, move _6);
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &&isize = {
    let mut _0: &&isize;
    let mut _1: &isize;
    let mut _2: isize;

    bb0: {
        _2 = const 17_isize;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 17_isize;
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &Option<&isize> = {
    let mut _0: &std::option::Option<&isize>;
    let mut _1: std::option::Option<&isize>;

    bb0: {
        _1 = Option::<&isize>::None;
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

main::{constant#4}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn E::Thing(_1: isize, _2: T) -> E<T> {
    let mut _0: E<T>;

    bb0: {
        _0 = E::<T>::Thing(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn E::Thing(_1: isize, _2: T) -> E<T> {
    let mut _0: E<T>;

    bb0: {
        _0 = E::<T>::Thing(move _1, move _2);
        return;
    }
}

fn E::Nothing(_1: (), _2: ((), ()), _3: [i8; 0]) -> E<T> {
    let mut _0: E<T>;

    bb0: {
        _0 = E::<T>::Nothing(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn E::Nothing(_1: (), _2: ((), ()), _3: [i8; 0]) -> E<T> {
    let mut _0: E<T>;

    bb0: {
        _0 = E::<T>::Nothing(move _1, move _2, move _3);
        return;
    }
}
