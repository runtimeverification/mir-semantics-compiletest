// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:10:10: 10:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:10:10: 10:15
    debug f => _2;                       // in scope 0 at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:10:10: 10:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:10:10: 10:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:10:10: 10:15
    let mut _4: &str;                    // in scope 0 at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:10:10: 10:15
    let _5: &str;                        // in scope 0 at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:10:10: 10:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:10:10: 10:15
        _5 = const "Foo";                // scope 0 at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:10:10: 10:15
                                         // mir::Constant
                                         // + span: ui/dyn-keyword/dyn-angle-brackets_fixed.rs:10:10: 10:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:10:10: 10:15
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:10:10: 10:15
                                         // mir::Constant
                                         // + span: ui/dyn-keyword/dyn-angle-brackets_fixed.rs:10:10: 10:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:10:15: 10:15
    }
}

fn <impl at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:13:1: 13:26>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:14:12: 14:17
    debug f => _2;                       // in scope 0 at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:14:19: 14:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:14:46: 14:57
    let mut _3: &dyn std::fmt::Debug;    // in scope 0 at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:15:31: 15:35
    let mut _4: &Foo;                    // in scope 0 at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:15:31: 15:35
    let mut _5: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:15:37: 15:38

    bb0: {
        _4 = _1;                         // scope 0 at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:15:31: 15:35
        _3 = move _4 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:15:31: 15:35
        _5 = &mut (*_2);                 // scope 0 at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:15:37: 15:38
        _0 = <dyn Debug as Debug>::fmt(move _3, move _5) -> bb1; // scope 0 at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:15:9: 15:39
                                         // mir::Constant
                                         // + span: ui/dyn-keyword/dyn-angle-brackets_fixed.rs:15:9: 15:30
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a dyn Debug, &'b mut Formatter<'c>) -> Result<(), std::fmt::Error> {<dyn Debug as Debug>::fmt}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:18:6: 18:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:21:11: 21:11

    bb0: {
        return;                          // scope 0 at ui/dyn-keyword/dyn-angle-brackets_fixed.rs:21:13: 21:13
    }
}
