// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn generated_foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/dyn-keyword/issue-56327-dyn-trait-in-macro-is-okay.rs:17:28: 17:28
    let _1: std::boxed::Box<dyn std::ops::Drop>; // in scope 0 at ui/dyn-keyword/issue-56327-dyn-trait-in-macro-is-okay.rs:18:17: 18:19
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/dyn-keyword/issue-56327-dyn-trait-in-macro-is-okay.rs:18:17: 18:19
    }

    bb0: {
        return;                          // scope 0 at ui/dyn-keyword/issue-56327-dyn-trait-in-macro-is-okay.rs:19:10: 19:10
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/dyn-keyword/issue-56327-dyn-trait-in-macro-is-okay.rs:25:11: 25:11
    let _1: ();                          // in scope 0 at ui/dyn-keyword/issue-56327-dyn-trait-in-macro-is-okay.rs:26:5: 26:20

    bb0: {
        _1 = generated_foo() -> bb1;     // scope 0 at ui/dyn-keyword/issue-56327-dyn-trait-in-macro-is-okay.rs:26:5: 26:20
                                         // mir::Constant
                                         // + span: ui/dyn-keyword/issue-56327-dyn-trait-in-macro-is-okay.rs:26:5: 26:18
                                         // + literal: Const { ty: fn() {generated_foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/dyn-keyword/issue-56327-dyn-trait-in-macro-is-okay.rs:27:2: 27:2
    }
}
