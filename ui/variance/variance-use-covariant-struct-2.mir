// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: SomeStruct<&()>) -> SomeStruct<&()> {
    debug v => _1;                       // in scope 0 at ui/variance/variance-use-covariant-struct-2.rs:9:19: 9:20
    let mut _0: SomeStruct<&()>;         // return place in scope 0 at ui/variance/variance-use-covariant-struct-2.rs:10:22: 10:42

    bb0: {
        _0 = move _1;                    // scope 0 at ui/variance/variance-use-covariant-struct-2.rs:13:5: 13:6
        return;                          // scope 0 at ui/variance/variance-use-covariant-struct-2.rs:14:2: 14:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/variance/variance-use-covariant-struct-2.rs:16:11: 16:11

    bb0: {
        return;                          // scope 0 at ui/variance/variance-use-covariant-struct-2.rs:16:14: 16:14
    }
}

fn SomeStruct(_1: T) -> SomeStruct<T> {
    let mut _0: SomeStruct<T>;           // return place in scope 0 at ui/variance/variance-use-covariant-struct-2.rs:7:1: 7:21

    bb0: {
        _0 = SomeStruct::<T>(move _1);   // scope 0 at ui/variance/variance-use-covariant-struct-2.rs:7:1: 7:21
        return;                          // scope 0 at ui/variance/variance-use-covariant-struct-2.rs:7:1: 7:21
    }
}

// MIR FOR CTFE
fn SomeStruct(_1: T) -> SomeStruct<T> {
    let mut _0: SomeStruct<T>;           // return place in scope 0 at ui/variance/variance-use-covariant-struct-2.rs:7:1: 7:21

    bb0: {
        _0 = SomeStruct::<T>(move _1);   // scope 0 at ui/variance/variance-use-covariant-struct-2.rs:7:1: 7:21
        return;                          // scope 0 at ui/variance/variance-use-covariant-struct-2.rs:7:1: 7:21
    }
}
