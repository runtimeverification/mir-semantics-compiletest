// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Test::foo(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn a(_1: [u8; N], _2: &dyn Test, _3: SomeStruct<'_>) -> () {
    debug t => _2;
    debug ss => _3;
    let mut _0: ();

    bb0: {
        (_3.0: &dyn Test) = _2;
        return;
    }
}

a::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn b(_1: T, _2: &dyn Test, _3: SomeStruct<'_>) -> () {
    debug t => _2;
    debug ss => _3;
    let mut _0: ();

    bb0: {
        (_3.1: &dyn Test) = _2;
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: &dyn Test;
    let mut _3: SomeStruct<'_>;
    let mut _4: &dyn Test;
    let mut _5: &dyn Test;
    let _6: ();
    let _7: &dyn Test;
    let mut _8: SomeStruct<'_>;
    let mut _9: &dyn Test;
    let mut _10: &dyn Test;
    let mut _11: &Foo;
    let mut _12: &Foo;
    let mut _13: &Foo;
    let mut _14: &Foo;
    let mut _15: &Foo;
    let mut _16: &Foo;

    bb0: {
        _16 = const _;
        _2 = _16 as &dyn Test (Pointer(Unsize));
        _15 = const _;
        _4 = _15 as &dyn Test (Pointer(Unsize));
        _14 = const _;
        _5 = _14 as &dyn Test (Pointer(Unsize));
        _3 = SomeStruct::<'_> { t: move _4, u: move _5 };
        _1 = a::<0>(const [], _2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _13 = const _;
        _7 = _13 as &dyn Test (Pointer(Unsize));
        _12 = const _;
        _9 = _12 as &dyn Test (Pointer(Unsize));
        _11 = const _;
        _10 = _11 as &dyn Test (Pointer(Unsize));
        _8 = SomeStruct::<'_> { t: move _9, u: move _10 };
        _6 = b::<u8>(const 0_u8, _7, move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}
