// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Test::foo(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn a(_1: Ref<'_, dyn Test>, _2: SomeStruct<'_>) -> () {
    debug t => _1;
    debug ss => _2;
    let mut _0: ();

    bb0: {
        (_2.0: Ref<'_, dyn Test>) = move _1;
        return;
    }
}

fn b(_1: Ref<'_, dyn Test>, _2: SomeStruct<'_>) -> () {
    debug t => _1;
    debug ss => _2;
    let mut _0: ();

    bb0: {
        (_2.1: Ref<'_, dyn Test>) = move _1;
        return;
    }
}

fn c(_1: Ref<'_, dyn Test>, _2: SomeStruct<'_>) -> () {
    debug t => _1;
    debug ss => _2;
    let mut _0: ();

    bb0: {
        (_2.0: Ref<'_, dyn Test>) = move _1;
        return;
    }
}

fn d(_1: Ref<'_, dyn Test>, _2: SomeStruct<'_>) -> () {
    debug t => _1;
    debug ss => _2;
    let mut _0: ();

    bb0: {
        (_2.1: Ref<'_, dyn Test>) = move _1;
        return;
    }
}

fn e(_1: Ref<'_, dyn std::fmt::Display>) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn g(_1: Ref2<'_, '_, dyn std::fmt::Display>) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: &dyn std::fmt::Display;
    let _4: ();
    let _5: ();
    let mut _6: &i32;
    scope 1 {
        debug x => _1;
        let _2: Ref<'_, dyn std::fmt::Display>;
        scope 2 {
            debug r => _2;
            let _3: Ref2<'_, '_, dyn std::fmt::Display>;
            scope 3 {
                debug r2 => _3;
            }
        }
    }

    bb0: {
        _6 = const _;
        _1 = _6 as &dyn std::fmt::Display (Pointer(Unsize));
        _2 = Ref::<'_, dyn std::fmt::Display> { r: _1 };
        _3 = Ref2::<'_, '_, dyn std::fmt::Display> { a: _1, b: _1 };
        _4 = e(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = g(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}
