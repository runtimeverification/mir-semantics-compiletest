// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/issue-64506.rs:3:16: 3:21>::clone(_1: &ChildStdin) -> ChildStdin {
    debug self => _1;                    // in scope 0 at ui/consts/issue-64506.rs:3:16: 3:21
    let mut _0: ChildStdin;              // return place in scope 0 at ui/consts/issue-64506.rs:3:16: 3:21
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/consts/issue-64506.rs:3:21: 3:21
    }
}

fn <impl at ui/consts/issue-64506.rs:8:16: 8:21>::clone(_1: &AnonPipe) -> AnonPipe {
    debug self => _1;                    // in scope 0 at ui/consts/issue-64506.rs:8:16: 8:21
    let mut _0: AnonPipe;                // return place in scope 0 at ui/consts/issue-64506.rs:8:16: 8:21

    bb0: {
        return;                          // scope 0 at ui/consts/issue-64506.rs:8:21: 8:21
    }
}

const FOO: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-64506.rs:11:12: 11:14
    let _1: ChildStdin;                  // in scope 0 at ui/consts/issue-64506.rs:16:9: 16:10
    let mut _2: FOO::Foo;                // in scope 0 at ui/consts/issue-64506.rs:16:22: 16:35
    let mut _3: ();                      // in scope 0 at ui/consts/issue-64506.rs:16:31: 16:33
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/issue-64506.rs:16:9: 16:10
        let _4: &AnonPipe;               // in scope 1 at ui/consts/issue-64506.rs:17:9: 17:10
        scope 3 {
            debug x => _4;               // in scope 3 at ui/consts/issue-64506.rs:17:9: 17:10
        }
    }
    scope 2 {
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/issue-64506.rs:16:9: 16:10
        StorageLive(_2);                 // scope 2 at ui/consts/issue-64506.rs:16:22: 16:35
        StorageLive(_3);                 // scope 2 at ui/consts/issue-64506.rs:16:31: 16:33
        _3 = ();                         // scope 2 at ui/consts/issue-64506.rs:16:31: 16:33
        _2 = Foo { a: move _3 };         // scope 2 at ui/consts/issue-64506.rs:16:22: 16:35
        StorageDead(_3);                 // scope 2 at ui/consts/issue-64506.rs:16:34: 16:35
        _1 = (_2.0: ChildStdin);         // scope 2 at ui/consts/issue-64506.rs:16:22: 16:37
        StorageDead(_2);                 // scope 0 at ui/consts/issue-64506.rs:16:39: 16:40
        StorageLive(_4);                 // scope 1 at ui/consts/issue-64506.rs:17:9: 17:10
        _4 = &(_1.0: AnonPipe);          // scope 1 at ui/consts/issue-64506.rs:17:13: 17:21
        _0 = const ();                   // scope 0 at ui/consts/issue-64506.rs:11:17: 18:2
        StorageDead(_4);                 // scope 1 at ui/consts/issue-64506.rs:18:1: 18:2
        StorageDead(_1);                 // scope 0 at ui/consts/issue-64506.rs:18:1: 18:2
        return;                          // scope 0 at ui/consts/issue-64506.rs:11:1: 18:3
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-64506.rs:20:11: 20:11

    bb0: {
        return;                          // scope 0 at ui/consts/issue-64506.rs:20:13: 20:13
    }
}
