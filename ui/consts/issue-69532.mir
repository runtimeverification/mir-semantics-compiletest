// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn make_nans() -> (f64, f64, f32, f32) {
    let mut _0: (f64, f64, f32, f32);    // return place in scope 0 at ui/consts/issue-69532.rs:3:25: 3:45
    let _1: f64;                         // in scope 0 at ui/consts/issue-69532.rs:4:9: 4:13
    let mut _4: f64;                     // in scope 0 at ui/consts/issue-69532.rs:7:19: 7:23
    let mut _6: f64;                     // in scope 0 at ui/consts/issue-69532.rs:8:19: 8:23
    let mut _7: f64;                     // in scope 0 at ui/consts/issue-69532.rs:10:6: 10:10
    let mut _8: f64;                     // in scope 0 at ui/consts/issue-69532.rs:10:12: 10:16
    let mut _9: f32;                     // in scope 0 at ui/consts/issue-69532.rs:10:18: 10:25
    let mut _10: f32;                    // in scope 0 at ui/consts/issue-69532.rs:10:27: 10:34
    scope 1 {
        debug nan1 => _1;                // in scope 1 at ui/consts/issue-69532.rs:4:9: 4:13
        let _2: f64;                     // in scope 1 at ui/consts/issue-69532.rs:5:9: 5:13
        scope 3 {
            debug nan2 => _2;            // in scope 3 at ui/consts/issue-69532.rs:5:9: 5:13
            let _3: f32;                 // in scope 3 at ui/consts/issue-69532.rs:7:9: 7:16
            scope 5 {
                debug nan1_32 => _3;     // in scope 5 at ui/consts/issue-69532.rs:7:9: 7:16
                let _5: f32;             // in scope 5 at ui/consts/issue-69532.rs:8:9: 8:16
                scope 6 {
                    debug nan2_32 => _5; // in scope 6 at ui/consts/issue-69532.rs:8:9: 8:16
                }
            }
        }
        scope 4 {
        }
    }
    scope 2 {
    }

    bb0: {
        _1 = transmute::<u64, f64>(const 9218868441522372609_u64) -> bb1; // scope 2 at ui/consts/issue-69532.rs:4:30: 4:75
                                         // mir::Constant
                                         // + span: ui/consts/issue-69532.rs:4:30: 4:49
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(u64) -> f64 {transmute::<u64, f64>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = transmute::<u64, f64>(const 9218868437227405313_u64) -> bb2; // scope 4 at ui/consts/issue-69532.rs:5:30: 5:75
                                         // mir::Constant
                                         // + span: ui/consts/issue-69532.rs:5:30: 5:49
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(u64) -> f64 {transmute::<u64, f64>}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = _1;                         // scope 3 at ui/consts/issue-69532.rs:7:19: 7:23
        _3 = move _4 as f32 (FloatToFloat); // scope 3 at ui/consts/issue-69532.rs:7:19: 7:30
        _6 = _2;                         // scope 5 at ui/consts/issue-69532.rs:8:19: 8:23
        _5 = move _6 as f32 (FloatToFloat); // scope 5 at ui/consts/issue-69532.rs:8:19: 8:30
        _7 = _1;                         // scope 6 at ui/consts/issue-69532.rs:10:6: 10:10
        _8 = _2;                         // scope 6 at ui/consts/issue-69532.rs:10:12: 10:16
        _9 = _3;                         // scope 6 at ui/consts/issue-69532.rs:10:18: 10:25
        _10 = _5;                        // scope 6 at ui/consts/issue-69532.rs:10:27: 10:34
        _0 = (move _7, move _8, move _9, move _10); // scope 6 at ui/consts/issue-69532.rs:10:5: 10:35
        return;                          // scope 0 at ui/consts/issue-69532.rs:11:2: 11:2
    }
}

// MIR FOR CTFE
fn make_nans() -> (f64, f64, f32, f32) {
    let mut _0: (f64, f64, f32, f32);    // return place in scope 0 at ui/consts/issue-69532.rs:3:25: 3:45
    let _1: f64;                         // in scope 0 at ui/consts/issue-69532.rs:4:9: 4:13
    let mut _4: f64;                     // in scope 0 at ui/consts/issue-69532.rs:7:19: 7:23
    let mut _6: f64;                     // in scope 0 at ui/consts/issue-69532.rs:8:19: 8:23
    let mut _7: f64;                     // in scope 0 at ui/consts/issue-69532.rs:10:6: 10:10
    let mut _8: f64;                     // in scope 0 at ui/consts/issue-69532.rs:10:12: 10:16
    let mut _9: f32;                     // in scope 0 at ui/consts/issue-69532.rs:10:18: 10:25
    let mut _10: f32;                    // in scope 0 at ui/consts/issue-69532.rs:10:27: 10:34
    scope 1 {
        debug nan1 => _1;                // in scope 1 at ui/consts/issue-69532.rs:4:9: 4:13
        let _2: f64;                     // in scope 1 at ui/consts/issue-69532.rs:5:9: 5:13
        scope 3 {
            debug nan2 => _2;            // in scope 3 at ui/consts/issue-69532.rs:5:9: 5:13
            let _3: f32;                 // in scope 3 at ui/consts/issue-69532.rs:7:9: 7:16
            scope 5 {
                debug nan1_32 => _3;     // in scope 5 at ui/consts/issue-69532.rs:7:9: 7:16
                let _5: f32;             // in scope 5 at ui/consts/issue-69532.rs:8:9: 8:16
                scope 6 {
                    debug nan2_32 => _5; // in scope 6 at ui/consts/issue-69532.rs:8:9: 8:16
                }
            }
        }
        scope 4 {
        }
    }
    scope 2 {
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/issue-69532.rs:4:9: 4:13
        ConstEvalCounter;                // scope 2 at ui/consts/issue-69532.rs:4:30: 4:75
        _1 = transmute::<u64, f64>(const 9218868441522372609_u64) -> bb1; // scope 2 at ui/consts/issue-69532.rs:4:30: 4:75
                                         // mir::Constant
                                         // + span: ui/consts/issue-69532.rs:4:30: 4:49
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(u64) -> f64 {transmute::<u64, f64>}, val: Value(<ZST>) }
    }

    bb1: {
        StorageLive(_2);                 // scope 1 at ui/consts/issue-69532.rs:5:9: 5:13
        ConstEvalCounter;                // scope 4 at ui/consts/issue-69532.rs:5:30: 5:75
        _2 = transmute::<u64, f64>(const 9218868437227405313_u64) -> bb2; // scope 4 at ui/consts/issue-69532.rs:5:30: 5:75
                                         // mir::Constant
                                         // + span: ui/consts/issue-69532.rs:5:30: 5:49
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(u64) -> f64 {transmute::<u64, f64>}, val: Value(<ZST>) }
    }

    bb2: {
        StorageLive(_3);                 // scope 3 at ui/consts/issue-69532.rs:7:9: 7:16
        StorageLive(_4);                 // scope 3 at ui/consts/issue-69532.rs:7:19: 7:23
        _4 = _1;                         // scope 3 at ui/consts/issue-69532.rs:7:19: 7:23
        _3 = move _4 as f32 (FloatToFloat); // scope 3 at ui/consts/issue-69532.rs:7:19: 7:30
        StorageDead(_4);                 // scope 3 at ui/consts/issue-69532.rs:7:29: 7:30
        StorageLive(_5);                 // scope 5 at ui/consts/issue-69532.rs:8:9: 8:16
        StorageLive(_6);                 // scope 5 at ui/consts/issue-69532.rs:8:19: 8:23
        _6 = _2;                         // scope 5 at ui/consts/issue-69532.rs:8:19: 8:23
        _5 = move _6 as f32 (FloatToFloat); // scope 5 at ui/consts/issue-69532.rs:8:19: 8:30
        StorageDead(_6);                 // scope 5 at ui/consts/issue-69532.rs:8:29: 8:30
        StorageLive(_7);                 // scope 6 at ui/consts/issue-69532.rs:10:6: 10:10
        _7 = _1;                         // scope 6 at ui/consts/issue-69532.rs:10:6: 10:10
        StorageLive(_8);                 // scope 6 at ui/consts/issue-69532.rs:10:12: 10:16
        _8 = _2;                         // scope 6 at ui/consts/issue-69532.rs:10:12: 10:16
        StorageLive(_9);                 // scope 6 at ui/consts/issue-69532.rs:10:18: 10:25
        _9 = _3;                         // scope 6 at ui/consts/issue-69532.rs:10:18: 10:25
        StorageLive(_10);                // scope 6 at ui/consts/issue-69532.rs:10:27: 10:34
        _10 = _5;                        // scope 6 at ui/consts/issue-69532.rs:10:27: 10:34
        _0 = (move _7, move _8, move _9, move _10); // scope 6 at ui/consts/issue-69532.rs:10:5: 10:35
        StorageDead(_10);                // scope 6 at ui/consts/issue-69532.rs:10:34: 10:35
        StorageDead(_9);                 // scope 6 at ui/consts/issue-69532.rs:10:34: 10:35
        StorageDead(_8);                 // scope 6 at ui/consts/issue-69532.rs:10:34: 10:35
        StorageDead(_7);                 // scope 6 at ui/consts/issue-69532.rs:10:34: 10:35
        StorageDead(_5);                 // scope 5 at ui/consts/issue-69532.rs:11:1: 11:2
        StorageDead(_3);                 // scope 3 at ui/consts/issue-69532.rs:11:1: 11:2
        StorageDead(_2);                 // scope 1 at ui/consts/issue-69532.rs:11:1: 11:2
        StorageDead(_1);                 // scope 0 at ui/consts/issue-69532.rs:11:1: 11:2
        return;                          // scope 0 at ui/consts/issue-69532.rs:11:2: 11:2
    }
}

static NANS: (f64, f64, f32, f32) = {
    let mut _0: (f64, f64, f32, f32);    // return place in scope 0 at ui/consts/issue-69532.rs:13:14: 13:34

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/issue-69532.rs:13:37: 13:48
        _0 = make_nans() -> bb1;         // scope 0 at ui/consts/issue-69532.rs:13:37: 13:48
                                         // mir::Constant
                                         // + span: ui/consts/issue-69532.rs:13:37: 13:46
                                         // + literal: Const { ty: fn() -> (f64, f64, f32, f32) {make_nans}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/issue-69532.rs:13:1: 13:49
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-69532.rs:15:11: 15:11
    let _1: f64;                         // in scope 0 at ui/consts/issue-69532.rs:16:10: 16:14
    let _2: f64;                         // in scope 0 at ui/consts/issue-69532.rs:16:16: 16:20
    let _3: f32;                         // in scope 0 at ui/consts/issue-69532.rs:16:22: 16:29
    let _4: f32;                         // in scope 0 at ui/consts/issue-69532.rs:16:31: 16:38
    let mut _5: bool;                    // in scope 0 at ui/consts/issue-69532.rs:18:5: 18:27
    let mut _6: bool;                    // in scope 0 at ui/consts/issue-69532.rs:18:13: 18:26
    let mut _7: f64;                     // in scope 0 at ui/consts/issue-69532.rs:18:13: 18:17
    let mut _8: !;                       // in scope 0 at ui/consts/issue-69532.rs:18:5: 18:27
    let mut _9: bool;                    // in scope 0 at ui/consts/issue-69532.rs:19:5: 19:27
    let mut _10: bool;                   // in scope 0 at ui/consts/issue-69532.rs:19:13: 19:26
    let mut _11: f64;                    // in scope 0 at ui/consts/issue-69532.rs:19:13: 19:17
    let mut _12: !;                      // in scope 0 at ui/consts/issue-69532.rs:19:5: 19:27
    let mut _13: bool;                   // in scope 0 at ui/consts/issue-69532.rs:21:5: 21:30
    let mut _14: bool;                   // in scope 0 at ui/consts/issue-69532.rs:21:13: 21:29
    let mut _15: f32;                    // in scope 0 at ui/consts/issue-69532.rs:21:13: 21:20
    let mut _16: !;                      // in scope 0 at ui/consts/issue-69532.rs:21:5: 21:30
    let mut _17: bool;                   // in scope 0 at ui/consts/issue-69532.rs:22:5: 22:30
    let mut _18: bool;                   // in scope 0 at ui/consts/issue-69532.rs:22:13: 22:29
    let mut _19: f32;                    // in scope 0 at ui/consts/issue-69532.rs:22:13: 22:20
    let mut _20: !;                      // in scope 0 at ui/consts/issue-69532.rs:22:5: 22:30
    scope 1 {
        debug nan1 => _1;                // in scope 1 at ui/consts/issue-69532.rs:16:10: 16:14
        debug nan2 => _2;                // in scope 1 at ui/consts/issue-69532.rs:16:16: 16:20
        debug nan1_32 => _3;             // in scope 1 at ui/consts/issue-69532.rs:16:22: 16:29
        debug nan2_32 => _4;             // in scope 1 at ui/consts/issue-69532.rs:16:31: 16:38
    }

    bb0: {
        _1 = const NaNf64;               // scope 0 at ui/consts/issue-69532.rs:16:10: 16:14
        _2 = const NaNf64;               // scope 0 at ui/consts/issue-69532.rs:16:16: 16:20
        _3 = const NaNf32;               // scope 0 at ui/consts/issue-69532.rs:16:22: 16:29
        _4 = const NaNf32;               // scope 0 at ui/consts/issue-69532.rs:16:31: 16:38
        _7 = const NaNf64;               // scope 1 at ui/consts/issue-69532.rs:18:13: 18:17
        _6 = core::f64::<impl f64>::is_nan(move _7) -> bb1; // scope 1 at ui/consts/issue-69532.rs:18:13: 18:26
                                         // mir::Constant
                                         // + span: ui/consts/issue-69532.rs:18:18: 18:24
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = Not(move _6);               // scope 1 at ui/consts/issue-69532.rs:18:5: 18:27
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 1 at ui/consts/issue-69532.rs:18:5: 18:27
    }

    bb2: {
        _8 = core::panicking::panic(const "assertion failed: nan1.is_nan()"); // scope 1 at ui/consts/issue-69532.rs:18:5: 18:27
                                         // mir::Constant
                                         // + span: ui/consts/issue-69532.rs:18:5: 18:27
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _11 = _2;                        // scope 1 at ui/consts/issue-69532.rs:19:13: 19:17
        _10 = core::f64::<impl f64>::is_nan(move _11) -> bb4; // scope 1 at ui/consts/issue-69532.rs:19:13: 19:26
                                         // mir::Constant
                                         // + span: ui/consts/issue-69532.rs:19:18: 19:24
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = Not(move _10);              // scope 1 at ui/consts/issue-69532.rs:19:5: 19:27
        switchInt(move _9) -> [0: bb6, otherwise: bb5]; // scope 1 at ui/consts/issue-69532.rs:19:5: 19:27
    }

    bb5: {
        _12 = core::panicking::panic(const "assertion failed: nan2.is_nan()"); // scope 1 at ui/consts/issue-69532.rs:19:5: 19:27
                                         // mir::Constant
                                         // + span: ui/consts/issue-69532.rs:19:5: 19:27
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _15 = _3;                        // scope 1 at ui/consts/issue-69532.rs:21:13: 21:20
        _14 = core::f32::<impl f32>::is_nan(move _15) -> bb7; // scope 1 at ui/consts/issue-69532.rs:21:13: 21:29
                                         // mir::Constant
                                         // + span: ui/consts/issue-69532.rs:21:21: 21:27
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_nan}, val: Value(<ZST>) }
    }

    bb7: {
        _13 = Not(move _14);             // scope 1 at ui/consts/issue-69532.rs:21:5: 21:30
        switchInt(move _13) -> [0: bb9, otherwise: bb8]; // scope 1 at ui/consts/issue-69532.rs:21:5: 21:30
    }

    bb8: {
        _16 = core::panicking::panic(const "assertion failed: nan1_32.is_nan()"); // scope 1 at ui/consts/issue-69532.rs:21:5: 21:30
                                         // mir::Constant
                                         // + span: ui/consts/issue-69532.rs:21:5: 21:30
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _19 = _4;                        // scope 1 at ui/consts/issue-69532.rs:22:13: 22:20
        _18 = core::f32::<impl f32>::is_nan(move _19) -> bb10; // scope 1 at ui/consts/issue-69532.rs:22:13: 22:29
                                         // mir::Constant
                                         // + span: ui/consts/issue-69532.rs:22:21: 22:27
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_nan}, val: Value(<ZST>) }
    }

    bb10: {
        _17 = Not(move _18);             // scope 1 at ui/consts/issue-69532.rs:22:5: 22:30
        switchInt(move _17) -> [0: bb12, otherwise: bb11]; // scope 1 at ui/consts/issue-69532.rs:22:5: 22:30
    }

    bb11: {
        _20 = core::panicking::panic(const "assertion failed: nan2_32.is_nan()"); // scope 1 at ui/consts/issue-69532.rs:22:5: 22:30
                                         // mir::Constant
                                         // + span: ui/consts/issue-69532.rs:22:5: 22:30
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        return;                          // scope 0 at ui/consts/issue-69532.rs:23:2: 23:2
    }
}
