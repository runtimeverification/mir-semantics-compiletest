// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const A: [u8; 1] = {
    let mut _0: [u8; 1];                 // return place in scope 0 at ui/consts/const-autoderef.rs:3:10: 3:17
    let mut _1: u8;                      // in scope 0 at ui/consts/const-autoderef.rs:3:21: 3:30

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-autoderef.rs:3:21: 3:30
        _1 = const 'h' as u8 (IntToInt); // scope 0 at ui/consts/const-autoderef.rs:3:21: 3:30
        _0 = [move _1];                  // scope 0 at ui/consts/const-autoderef.rs:3:20: 3:31
        StorageDead(_1);                 // scope 0 at ui/consts/const-autoderef.rs:3:30: 3:31
        return;                          // scope 0 at ui/consts/const-autoderef.rs:3:1: 3:32
    }
}

A::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-autoderef.rs:3:15: 3:16

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const-autoderef.rs:3:15: 3:16
        return;                          // scope 0 at ui/consts/const-autoderef.rs:3:15: 3:16
    }
}

const B: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/consts/const-autoderef.rs:4:10: 4:12
    let mut _1: &[u8; 1];                // in scope 0 at ui/consts/const-autoderef.rs:4:15: 4:19
    let _2: [u8; 1];                     // in scope 0 at ui/consts/const-autoderef.rs:4:17: 4:18
    let _3: usize;                       // in scope 0 at ui/consts/const-autoderef.rs:4:20: 4:21
    let mut _4: usize;                   // in scope 0 at ui/consts/const-autoderef.rs:4:15: 4:22
    let mut _5: bool;                    // in scope 0 at ui/consts/const-autoderef.rs:4:15: 4:22
    let mut _6: &[u8; 1];                // in scope 0 at ui/consts/const-autoderef.rs:4:15: 4:19

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-autoderef.rs:4:15: 4:19
        _6 = const _;                    // scope 0 at ui/consts/const-autoderef.rs:4:15: 4:19
                                         // mir::Constant
                                         // + span: ui/consts/const-autoderef.rs:4:15: 4:19
                                         // + literal: Const { ty: &[u8; 1], val: Unevaluated(B, [], Some(promoted[0])) }
        _1 = &(*_6);                     // scope 0 at ui/consts/const-autoderef.rs:4:15: 4:19
        StorageLive(_3);                 // scope 0 at ui/consts/const-autoderef.rs:4:20: 4:21
        _3 = const 0_usize;              // scope 0 at ui/consts/const-autoderef.rs:4:20: 4:21
        _4 = Len((*_1));                 // scope 0 at ui/consts/const-autoderef.rs:4:15: 4:22
        _5 = Lt(_3, _4);                 // scope 0 at ui/consts/const-autoderef.rs:4:15: 4:22
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> bb1; // scope 0 at ui/consts/const-autoderef.rs:4:15: 4:22
    }

    bb1: {
        _0 = (*_1)[_3];                  // scope 0 at ui/consts/const-autoderef.rs:4:15: 4:22
        StorageDead(_3);                 // scope 0 at ui/consts/const-autoderef.rs:4:21: 4:22
        StorageDead(_1);                 // scope 0 at ui/consts/const-autoderef.rs:4:21: 4:22
        return;                          // scope 0 at ui/consts/const-autoderef.rs:4:1: 4:23
    }
}

promoted[0] in B: &[u8; 1] = {
    let mut _0: &[u8; 1];                // return place in scope 0 at ui/consts/const-autoderef.rs:4:15: 4:19
    let mut _1: [u8; 1];                 // in scope 0 at ui/consts/const-autoderef.rs:4:17: 4:18

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-autoderef.rs:4:17: 4:18
        _0 = &_1;                        // scope 0 at ui/consts/const-autoderef.rs:4:15: 4:19
        return;                          // scope 0 at ui/consts/const-autoderef.rs:4:15: 4:19
    }
}

const C: &&&&[u8; 1] = {
    let mut _0: &&&&[u8; 1];             // return place in scope 0 at ui/consts/const-autoderef.rs:5:10: 5:53
    let _1: &&&&[u8; 1];                 // in scope 0 at ui/consts/const-autoderef.rs:5:56: 5:64
    let _2: &&&[u8; 1];                  // in scope 0 at ui/consts/const-autoderef.rs:5:58: 5:64
    let _3: &&[u8; 1];                   // in scope 0 at ui/consts/const-autoderef.rs:5:60: 5:64
    let _4: &[u8; 1];                    // in scope 0 at ui/consts/const-autoderef.rs:5:62: 5:64
    let _5: [u8; 1];                     // in scope 0 at ui/consts/const-autoderef.rs:5:63: 5:64
    let mut _6: &&&&[u8; 1];             // in scope 0 at ui/consts/const-autoderef.rs:5:56: 5:64

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-autoderef.rs:5:56: 5:64
        _6 = const _;                    // scope 0 at ui/consts/const-autoderef.rs:5:56: 5:64
                                         // mir::Constant
                                         // + span: ui/consts/const-autoderef.rs:5:56: 5:64
                                         // + literal: Const { ty: &&&&[u8; 1], val: Unevaluated(C, [], Some(promoted[0])) }
        _1 = &(*_6);                     // scope 0 at ui/consts/const-autoderef.rs:5:56: 5:64
        _0 = &(*_1);                     // scope 0 at ui/consts/const-autoderef.rs:5:56: 5:64
        StorageDead(_1);                 // scope 0 at ui/consts/const-autoderef.rs:5:63: 5:64
        return;                          // scope 0 at ui/consts/const-autoderef.rs:5:1: 5:65
    }
}

promoted[0] in C: &&&&[u8; 1] = {
    let mut _0: &&&&[u8; 1];             // return place in scope 0 at ui/consts/const-autoderef.rs:5:56: 5:64
    let mut _1: &&&[u8; 1];              // in scope 0 at ui/consts/const-autoderef.rs:5:58: 5:64
    let mut _2: &&[u8; 1];               // in scope 0 at ui/consts/const-autoderef.rs:5:60: 5:64
    let mut _3: &[u8; 1];                // in scope 0 at ui/consts/const-autoderef.rs:5:62: 5:64
    let mut _4: [u8; 1];                 // in scope 0 at ui/consts/const-autoderef.rs:5:63: 5:64

    bb0: {
        _4 = const _;                    // scope 0 at ui/consts/const-autoderef.rs:5:63: 5:64
        _3 = &_4;                        // scope 0 at ui/consts/const-autoderef.rs:5:62: 5:64
        _2 = &_3;                        // scope 0 at ui/consts/const-autoderef.rs:5:60: 5:64
        _1 = &_2;                        // scope 0 at ui/consts/const-autoderef.rs:5:58: 5:64
        _0 = &_1;                        // scope 0 at ui/consts/const-autoderef.rs:5:56: 5:64
        return;                          // scope 0 at ui/consts/const-autoderef.rs:5:56: 5:64
    }
}

C::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-autoderef.rs:5:51: 5:52

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const-autoderef.rs:5:51: 5:52
        return;                          // scope 0 at ui/consts/const-autoderef.rs:5:51: 5:52
    }
}

const D: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/consts/const-autoderef.rs:6:10: 6:12
    let mut _1: &&&&&[u8; 1];            // in scope 0 at ui/consts/const-autoderef.rs:6:15: 6:19
    let _2: &&&&[u8; 1];                 // in scope 0 at ui/consts/const-autoderef.rs:6:17: 6:18
    let _3: usize;                       // in scope 0 at ui/consts/const-autoderef.rs:6:20: 6:21
    let mut _4: usize;                   // in scope 0 at ui/consts/const-autoderef.rs:6:15: 6:22
    let mut _5: bool;                    // in scope 0 at ui/consts/const-autoderef.rs:6:15: 6:22
    let mut _6: &&&&&[u8; 1];            // in scope 0 at ui/consts/const-autoderef.rs:6:15: 6:19
    let mut _7: &&&&[u8; 1];             // in scope 0 at ui/consts/const-autoderef.rs:6:15: 6:19
    let mut _8: &&&[u8; 1];              // in scope 0 at ui/consts/const-autoderef.rs:6:15: 6:19
    let mut _9: &&[u8; 1];               // in scope 0 at ui/consts/const-autoderef.rs:6:15: 6:19
    let mut _10: &[u8; 1];               // in scope 0 at ui/consts/const-autoderef.rs:6:15: 6:19
    let mut _11: &&&&[u8; 1];            // in scope 0 at ui/consts/const-autoderef.rs:6:15: 6:19
    let mut _12: &&&[u8; 1];             // in scope 0 at ui/consts/const-autoderef.rs:6:15: 6:19
    let mut _13: &&[u8; 1];              // in scope 0 at ui/consts/const-autoderef.rs:6:15: 6:19
    let mut _14: &[u8; 1];               // in scope 0 at ui/consts/const-autoderef.rs:6:15: 6:19

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-autoderef.rs:6:15: 6:19
        _6 = const _;                    // scope 0 at ui/consts/const-autoderef.rs:6:15: 6:19
                                         // mir::Constant
                                         // + span: ui/consts/const-autoderef.rs:6:15: 6:19
                                         // + literal: Const { ty: &&&&&[u8; 1], val: Unevaluated(D, [], Some(promoted[0])) }
        _1 = &(*_6);                     // scope 0 at ui/consts/const-autoderef.rs:6:15: 6:19
        StorageLive(_3);                 // scope 0 at ui/consts/const-autoderef.rs:6:20: 6:21
        _3 = const 0_usize;              // scope 0 at ui/consts/const-autoderef.rs:6:20: 6:21
        _7 = deref_copy (*_1);           // scope 0 at ui/consts/const-autoderef.rs:6:15: 6:22
        _8 = deref_copy (*_7);           // scope 0 at ui/consts/const-autoderef.rs:6:15: 6:22
        _9 = deref_copy (*_8);           // scope 0 at ui/consts/const-autoderef.rs:6:15: 6:22
        _10 = deref_copy (*_9);          // scope 0 at ui/consts/const-autoderef.rs:6:15: 6:22
        _4 = Len((*_10));                // scope 0 at ui/consts/const-autoderef.rs:6:15: 6:22
        _5 = Lt(_3, _4);                 // scope 0 at ui/consts/const-autoderef.rs:6:15: 6:22
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> bb1; // scope 0 at ui/consts/const-autoderef.rs:6:15: 6:22
    }

    bb1: {
        _11 = deref_copy (*_1);          // scope 0 at ui/consts/const-autoderef.rs:6:15: 6:22
        _12 = deref_copy (*_11);         // scope 0 at ui/consts/const-autoderef.rs:6:15: 6:22
        _13 = deref_copy (*_12);         // scope 0 at ui/consts/const-autoderef.rs:6:15: 6:22
        _14 = deref_copy (*_13);         // scope 0 at ui/consts/const-autoderef.rs:6:15: 6:22
        _0 = (*_14)[_3];                 // scope 0 at ui/consts/const-autoderef.rs:6:15: 6:22
        StorageDead(_3);                 // scope 0 at ui/consts/const-autoderef.rs:6:21: 6:22
        StorageDead(_1);                 // scope 0 at ui/consts/const-autoderef.rs:6:21: 6:22
        return;                          // scope 0 at ui/consts/const-autoderef.rs:6:1: 6:23
    }
}

promoted[0] in D: &&&&&[u8; 1] = {
    let mut _0: &&&&&[u8; 1];            // return place in scope 0 at ui/consts/const-autoderef.rs:6:15: 6:19
    let mut _1: &&&&[u8; 1];             // in scope 0 at ui/consts/const-autoderef.rs:6:17: 6:18

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-autoderef.rs:6:17: 6:18
                                         // mir::Constant
                                         // + span: ui/consts/const-autoderef.rs:6:17: 6:18
                                         // + literal: Const { ty: &&&&[u8; 1], val: Unevaluated(C, [], None) }
        _0 = &_1;                        // scope 0 at ui/consts/const-autoderef.rs:6:15: 6:19
        return;                          // scope 0 at ui/consts/const-autoderef.rs:6:15: 6:19
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-autoderef.rs:8:15: 8:15
    let mut _1: (&u8, &u8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: usize;                       // in scope 0 at ui/consts/const-autoderef.rs:9:21: 9:22
    let _5: &u8;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &u8;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: u8;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: (&u8, &u8);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _20: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _21: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _22: usize;                      // in scope 0 at ui/consts/const-autoderef.rs:10:21: 10:22
    let _23: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _24: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _26: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _27: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _28: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _30: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _31: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _32: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _33: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _34: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _35: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _37: &[u8; 1];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _38: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _39: &[u8; 1];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _40: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _23;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _24;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _29: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _29;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _40 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[3])) }
        _2 = _40;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _4 = const 0_usize;              // scope 0 at ui/consts/const-autoderef.rs:9:21: 9:22
        _39 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[u8; 1], val: Unevaluated(main, [], Some(promoted[2])) }
        _3 = &(*_39)[_4];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_1.0: &u8);                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_1.1: &u8);                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = const 104_u8;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = (*_6);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = Eq(move _9, move _10);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _7 = Not(move _8);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _11 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<u8, u8>(move _13, move _14, move _16, move _18); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }

    bb2: {
        _38 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[1])) }
        _20 = _38;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _22 = const 0_usize;             // scope 0 at ui/consts/const-autoderef.rs:10:21: 10:22
        _37 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[u8; 1], val: Unevaluated(main, [], Some(promoted[0])) }
        _21 = &(*_37)[_22];              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _19 = (move _20, move _21);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _23 = (_19.0: &u8);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _24 = (_19.1: &u8);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _27 = const 104_u8;              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _28 = (*_24);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _26 = Eq(move _27, move _28);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _25 = Not(move _26);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _25) -> [0: bb4, otherwise: bb3]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _29 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _31 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _32 = _33;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _35 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _34 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _30 = core::panicking::assert_failed::<u8, u8>(move _31, move _32, move _34, move _36); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/consts/const-autoderef.rs:11:2: 11:2
    }
}

promoted[0] in main: &[u8; 1] = {
    let mut _0: &[u8; 1];                // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [u8; 1];                 // in scope 0 at ui/consts/const-autoderef.rs:10:19: 10:20

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-autoderef.rs:10:19: 10:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: u8;                      // in scope 0 at ui/consts/const-autoderef.rs:10:16: 10:17

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-autoderef.rs:10:16: 10:17
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[2] in main: &[u8; 1] = {
    let mut _0: &[u8; 1];                // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [u8; 1];                 // in scope 0 at ui/consts/const-autoderef.rs:9:19: 9:20

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-autoderef.rs:9:19: 9:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: u8;                      // in scope 0 at ui/consts/const-autoderef.rs:9:16: 9:17

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-autoderef.rs:9:16: 9:17
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}
