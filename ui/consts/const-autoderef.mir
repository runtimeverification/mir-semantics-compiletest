// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const A: [u8; 1] = {
    let mut _0: [u8; 1];
    let mut _1: u8;

    bb0: {
        StorageLive(_1);
        _1 = const 'h' as u8 (IntToInt);
        _0 = [move _1];
        StorageDead(_1);
        return;
    }
}

A::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

const B: u8 = {
    let mut _0: u8;
    let mut _1: &[u8; 1];
    let _2: [u8; 1];
    let _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: &[u8; 1];

    bb0: {
        StorageLive(_1);
        _6 = const _;
        _1 = &(*_6);
        StorageLive(_3);
        _3 = const 0_usize;
        _4 = Len((*_1));
        _5 = Lt(_3, _4);
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = (*_1)[_3];
        StorageDead(_3);
        StorageDead(_1);
        return;
    }
}

promoted[0] in B: &[u8; 1] = {
    let mut _0: &[u8; 1];
    let mut _1: [u8; 1];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

const C: &&&&[u8; 1] = {
    let mut _0: &&&&[u8; 1];
    let _1: &&&&[u8; 1];
    let _2: &&&[u8; 1];
    let _3: &&[u8; 1];
    let _4: &[u8; 1];
    let _5: [u8; 1];
    let mut _6: &&&&[u8; 1];

    bb0: {
        StorageLive(_1);
        _6 = const _;
        _1 = &(*_6);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in C: &&&&[u8; 1] = {
    let mut _0: &&&&[u8; 1];
    let mut _1: &&&[u8; 1];
    let mut _2: &&[u8; 1];
    let mut _3: &[u8; 1];
    let mut _4: [u8; 1];

    bb0: {
        _4 = const _;
        _3 = &_4;
        _2 = &_3;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

C::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

const D: u8 = {
    let mut _0: u8;
    let mut _1: &&&&&[u8; 1];
    let _2: &&&&[u8; 1];
    let _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: &&&&&[u8; 1];
    let mut _7: &&&&[u8; 1];
    let mut _8: &&&[u8; 1];
    let mut _9: &&[u8; 1];
    let mut _10: &[u8; 1];
    let mut _11: &&&&[u8; 1];
    let mut _12: &&&[u8; 1];
    let mut _13: &&[u8; 1];
    let mut _14: &[u8; 1];

    bb0: {
        StorageLive(_1);
        _6 = const _;
        _1 = &(*_6);
        StorageLive(_3);
        _3 = const 0_usize;
        _7 = deref_copy (*_1);
        _8 = deref_copy (*_7);
        _9 = deref_copy (*_8);
        _10 = deref_copy (*_9);
        _4 = Len((*_10));
        _5 = Lt(_3, _4);
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> [success: bb1, unwind continue];
    }

    bb1: {
        _11 = deref_copy (*_1);
        _12 = deref_copy (*_11);
        _13 = deref_copy (*_12);
        _14 = deref_copy (*_13);
        _0 = (*_14)[_3];
        StorageDead(_3);
        StorageDead(_1);
        return;
    }
}

promoted[0] in D: &&&&&[u8; 1] = {
    let mut _0: &&&&&[u8; 1];
    let mut _1: &&&&[u8; 1];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u8, &u8);
    let mut _2: &u8;
    let _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let _6: &u8;
    let _7: &u8;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u8;
    let mut _11: u8;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&u8, &u8);
    let mut _16: &u8;
    let _17: usize;
    let mut _18: usize;
    let mut _19: bool;
    let _20: &u8;
    let _21: &u8;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: u8;
    let mut _25: u8;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: &[u8; 1];
    let mut _30: &u8;
    let mut _31: &[u8; 1];
    let mut _32: &u8;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }

    bb0: {
        _32 = const _;
        _3 = const 0_usize;
        _4 = const 1_usize;
        _5 = Lt(_3, _4);
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> [success: bb1, unwind continue];
    }

    bb1: {
        _31 = const _;
        _2 = &(*_31)[_3];
        _1 = (_32, move _2);
        _6 = (_1.0: &u8);
        _7 = (_1.1: &u8);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<u8, u8>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        _30 = const _;
        _17 = const 0_usize;
        _18 = const 1_usize;
        _19 = Lt(_17, _18);
        assert(move _19, "index out of bounds: the length is {} but the index is {}", move _18, _17) -> [success: bb4, unwind continue];
    }

    bb4: {
        _29 = const _;
        _16 = &(*_29)[_17];
        _15 = (_30, move _16);
        _20 = (_15.0: &u8);
        _21 = (_15.1: &u8);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<u8, u8>(move _26, _20, _21, move _28) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &[u8; 1] = {
    let mut _0: &[u8; 1];
    let mut _1: [u8; 1];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[u8; 1] = {
    let mut _0: &[u8; 1];
    let mut _1: [u8; 1];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}
