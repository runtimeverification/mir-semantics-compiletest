// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const x: [isize; 4] = {
    let mut _0: [isize; 4];              // return place in scope 0 at ui/consts/const-fields-and-indexing.rs:5:11: 5:21

    bb0: {
        _0 = [const 1_isize, const 2_isize, const 3_isize, const 4_isize]; // scope 0 at ui/consts/const-fields-and-indexing.rs:5:24: 5:33
        return;                          // scope 0 at ui/consts/const-fields-and-indexing.rs:5:1: 5:34
    }
}

x::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-fields-and-indexing.rs:5:19: 5:20

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/consts/const-fields-and-indexing.rs:5:19: 5:20
        return;                          // scope 0 at ui/consts/const-fields-and-indexing.rs:5:19: 5:20
    }
}

static p: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/consts/const-fields-and-indexing.rs:6:12: 6:17
    let mut _1: [isize; 4];              // in scope 0 at ui/consts/const-fields-and-indexing.rs:6:20: 6:21
    let _2: usize;                       // in scope 0 at ui/consts/const-fields-and-indexing.rs:6:22: 6:23
    let mut _3: usize;                   // in scope 0 at ui/consts/const-fields-and-indexing.rs:6:20: 6:24
    let mut _4: bool;                    // in scope 0 at ui/consts/const-fields-and-indexing.rs:6:20: 6:24

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-fields-and-indexing.rs:6:20: 6:21
        _1 = const _;                    // scope 0 at ui/consts/const-fields-and-indexing.rs:6:20: 6:21
        StorageLive(_2);                 // scope 0 at ui/consts/const-fields-and-indexing.rs:6:22: 6:23
        _2 = const 2_usize;              // scope 0 at ui/consts/const-fields-and-indexing.rs:6:22: 6:23
        _3 = Len(_1);                    // scope 0 at ui/consts/const-fields-and-indexing.rs:6:20: 6:24
        _4 = Lt(_2, _3);                 // scope 0 at ui/consts/const-fields-and-indexing.rs:6:20: 6:24
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1; // scope 0 at ui/consts/const-fields-and-indexing.rs:6:20: 6:24
    }

    bb1: {
        _0 = _1[_2];                     // scope 0 at ui/consts/const-fields-and-indexing.rs:6:20: 6:24
        StorageDead(_2);                 // scope 0 at ui/consts/const-fields-and-indexing.rs:6:23: 6:24
        StorageDead(_1);                 // scope 0 at ui/consts/const-fields-and-indexing.rs:6:23: 6:24
        return;                          // scope 0 at ui/consts/const-fields-and-indexing.rs:6:1: 6:25
    }
}

const y: &[isize] = {
    let mut _0: &[isize];                // return place in scope 0 at ui/consts/const-fields-and-indexing.rs:7:11: 7:27
    let mut _1: &[isize; 4];             // in scope 0 at ui/consts/const-fields-and-indexing.rs:7:30: 7:40
    let _2: &[isize; 4];                 // in scope 0 at ui/consts/const-fields-and-indexing.rs:7:30: 7:40
    let _3: [isize; 4];                  // in scope 0 at ui/consts/const-fields-and-indexing.rs:7:31: 7:40
    let mut _4: &[isize; 4];             // in scope 0 at ui/consts/const-fields-and-indexing.rs:7:30: 7:40

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-fields-and-indexing.rs:7:30: 7:40
        StorageLive(_2);                 // scope 0 at ui/consts/const-fields-and-indexing.rs:7:30: 7:40
        _4 = const _;                    // scope 0 at ui/consts/const-fields-and-indexing.rs:7:30: 7:40
                                         // mir::Constant
                                         // + span: ui/consts/const-fields-and-indexing.rs:7:30: 7:40
                                         // + literal: Const { ty: &[isize; 4], val: Unevaluated(y, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at ui/consts/const-fields-and-indexing.rs:7:30: 7:40
        _1 = &(*_2);                     // scope 0 at ui/consts/const-fields-and-indexing.rs:7:30: 7:40
        _0 = move _1 as &[isize] (Pointer(Unsize)); // scope 0 at ui/consts/const-fields-and-indexing.rs:7:30: 7:40
        StorageDead(_2);                 // scope 0 at ui/consts/const-fields-and-indexing.rs:7:39: 7:40
        StorageDead(_1);                 // scope 0 at ui/consts/const-fields-and-indexing.rs:7:39: 7:40
        return;                          // scope 0 at ui/consts/const-fields-and-indexing.rs:7:1: 7:41
    }
}

promoted[0] in y: &[isize; 4] = {
    let mut _0: &[isize; 4];             // return place in scope 0 at ui/consts/const-fields-and-indexing.rs:7:30: 7:40
    let mut _1: [isize; 4];              // in scope 0 at ui/consts/const-fields-and-indexing.rs:7:31: 7:40

    bb0: {
        _1 = [const 1_isize, const 2_isize, const 3_isize, const 4_isize]; // scope 0 at ui/consts/const-fields-and-indexing.rs:7:31: 7:40
        _0 = &_1;                        // scope 0 at ui/consts/const-fields-and-indexing.rs:7:30: 7:40
        return;                          // scope 0 at ui/consts/const-fields-and-indexing.rs:7:30: 7:40
    }
}

static q: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/consts/const-fields-and-indexing.rs:8:12: 8:17
    let mut _1: &[isize];                // in scope 0 at ui/consts/const-fields-and-indexing.rs:8:20: 8:21
    let _2: usize;                       // in scope 0 at ui/consts/const-fields-and-indexing.rs:8:22: 8:23
    let mut _3: usize;                   // in scope 0 at ui/consts/const-fields-and-indexing.rs:8:20: 8:24
    let mut _4: bool;                    // in scope 0 at ui/consts/const-fields-and-indexing.rs:8:20: 8:24

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-fields-and-indexing.rs:8:20: 8:21
        _1 = const _;                    // scope 0 at ui/consts/const-fields-and-indexing.rs:8:20: 8:21
                                         // mir::Constant
                                         // + span: ui/consts/const-fields-and-indexing.rs:8:20: 8:21
                                         // + literal: Const { ty: &[isize], val: Unevaluated(y, [], None) }
        StorageLive(_2);                 // scope 0 at ui/consts/const-fields-and-indexing.rs:8:22: 8:23
        _2 = const 2_usize;              // scope 0 at ui/consts/const-fields-and-indexing.rs:8:22: 8:23
        _3 = Len((*_1));                 // scope 0 at ui/consts/const-fields-and-indexing.rs:8:20: 8:24
        _4 = Lt(_2, _3);                 // scope 0 at ui/consts/const-fields-and-indexing.rs:8:20: 8:24
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1; // scope 0 at ui/consts/const-fields-and-indexing.rs:8:20: 8:24
    }

    bb1: {
        _0 = (*_1)[_2];                  // scope 0 at ui/consts/const-fields-and-indexing.rs:8:20: 8:24
        StorageDead(_2);                 // scope 0 at ui/consts/const-fields-and-indexing.rs:8:23: 8:24
        StorageDead(_1);                 // scope 0 at ui/consts/const-fields-and-indexing.rs:8:23: 8:24
        return;                          // scope 0 at ui/consts/const-fields-and-indexing.rs:8:1: 8:25
    }
}

const s: S = {
    let mut _0: S;                       // return place in scope 0 at ui/consts/const-fields-and-indexing.rs:12:11: 12:12

    bb0: {
        _0 = S { a: const 10_isize, b: const 20_isize }; // scope 0 at ui/consts/const-fields-and-indexing.rs:12:15: 12:31
        return;                          // scope 0 at ui/consts/const-fields-and-indexing.rs:12:1: 12:32
    }
}

static t: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/consts/const-fields-and-indexing.rs:13:12: 13:17
    let mut _1: S;                       // in scope 0 at ui/consts/const-fields-and-indexing.rs:13:20: 13:21

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-fields-and-indexing.rs:13:20: 13:21
        _1 = const _;                    // scope 0 at ui/consts/const-fields-and-indexing.rs:13:20: 13:21
                                         // mir::Constant
                                         // + span: ui/consts/const-fields-and-indexing.rs:13:20: 13:21
                                         // + literal: Const { ty: S, val: Unevaluated(s, [], None) }
        _0 = (_1.1: isize);              // scope 0 at ui/consts/const-fields-and-indexing.rs:13:20: 13:23
        StorageDead(_1);                 // scope 0 at ui/consts/const-fields-and-indexing.rs:13:22: 13:23
        return;                          // scope 0 at ui/consts/const-fields-and-indexing.rs:13:1: 13:24
    }
}

const k: K = {
    let mut _0: K;                       // return place in scope 0 at ui/consts/const-fields-and-indexing.rs:18:11: 18:12
    let mut _1: D;                       // in scope 0 at ui/consts/const-fields-and-indexing.rs:18:35: 18:51

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-fields-and-indexing.rs:18:35: 18:51
        _1 = D { d: const 30_isize, e: const 40_isize }; // scope 0 at ui/consts/const-fields-and-indexing.rs:18:35: 18:51
        _0 = K { a: const 10_isize, b: const 20_isize, c: move _1 }; // scope 0 at ui/consts/const-fields-and-indexing.rs:18:15: 18:52
        StorageDead(_1);                 // scope 0 at ui/consts/const-fields-and-indexing.rs:18:51: 18:52
        return;                          // scope 0 at ui/consts/const-fields-and-indexing.rs:18:1: 18:53
    }
}

static m: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/consts/const-fields-and-indexing.rs:19:12: 19:17
    let mut _1: K;                       // in scope 0 at ui/consts/const-fields-and-indexing.rs:19:20: 19:21

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-fields-and-indexing.rs:19:20: 19:21
        _1 = const _;                    // scope 0 at ui/consts/const-fields-and-indexing.rs:19:20: 19:21
                                         // mir::Constant
                                         // + span: ui/consts/const-fields-and-indexing.rs:19:20: 19:21
                                         // + literal: Const { ty: K, val: Unevaluated(k, [], None) }
        _0 = ((_1.2: D).1: isize);       // scope 0 at ui/consts/const-fields-and-indexing.rs:19:20: 19:25
        StorageDead(_1);                 // scope 0 at ui/consts/const-fields-and-indexing.rs:19:24: 19:25
        return;                          // scope 0 at ui/consts/const-fields-and-indexing.rs:19:1: 19:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-fields-and-indexing.rs:21:15: 21:15
    let _1: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _3: &[&str];                 // in scope 0 at ui/consts/const-fields-and-indexing.rs:22:14: 22:18
    let mut _4: &[&str; 2];              // in scope 0 at ui/consts/const-fields-and-indexing.rs:22:14: 22:18
    let _5: &[&str; 2];                  // in scope 0 at ui/consts/const-fields-and-indexing.rs:22:14: 22:18
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/consts/const-fields-and-indexing.rs:22:20: 22:21
    let mut _11: &isize;                 // in scope 0 at ui/consts/const-fields-and-indexing.rs:22:20: 22:21
    let _12: &isize;                     // in scope 0 at ui/consts/const-fields-and-indexing.rs:22:20: 22:21
    let _13: &isize;                     // in scope 0 at ui/consts/const-fields-and-indexing.rs:22:20: 22:21
    let _14: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _15: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _16: &[&str];                // in scope 0 at ui/consts/const-fields-and-indexing.rs:23:14: 23:18
    let mut _17: &[&str; 2];             // in scope 0 at ui/consts/const-fields-and-indexing.rs:23:14: 23:18
    let _18: &[&str; 2];                 // in scope 0 at ui/consts/const-fields-and-indexing.rs:23:14: 23:18
    let mut _19: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _20: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _21: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _22: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _23: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/consts/const-fields-and-indexing.rs:23:20: 23:21
    let mut _24: &isize;                 // in scope 0 at ui/consts/const-fields-and-indexing.rs:23:20: 23:21
    let _25: &isize;                     // in scope 0 at ui/consts/const-fields-and-indexing.rs:23:20: 23:21
    let _26: &isize;                     // in scope 0 at ui/consts/const-fields-and-indexing.rs:23:20: 23:21
    let _27: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _28: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _29: &[&str];                // in scope 0 at ui/consts/const-fields-and-indexing.rs:24:14: 24:18
    let mut _30: &[&str; 2];             // in scope 0 at ui/consts/const-fields-and-indexing.rs:24:14: 24:18
    let _31: &[&str; 2];                 // in scope 0 at ui/consts/const-fields-and-indexing.rs:24:14: 24:18
    let mut _32: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _33: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _34: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _35: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _36: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/consts/const-fields-and-indexing.rs:24:20: 24:21
    let mut _37: &isize;                 // in scope 0 at ui/consts/const-fields-and-indexing.rs:24:20: 24:21
    let _38: &isize;                     // in scope 0 at ui/consts/const-fields-and-indexing.rs:24:20: 24:21
    let _39: &isize;                     // in scope 0 at ui/consts/const-fields-and-indexing.rs:24:20: 24:21
    let mut _40: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _41: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _42: &isize;                     // in scope 0 at ui/consts/const-fields-and-indexing.rs:25:16: 25:17
    let mut _43: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _44: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _45: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _47: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _48: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _49: &isize;                     // in scope 0 at ui/consts/const-fields-and-indexing.rs:26:16: 26:17
    let mut _50: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _51: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _52: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _54: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _55: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _56: &isize;                     // in scope 0 at ui/consts/const-fields-and-indexing.rs:27:16: 27:17
    let mut _57: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _58: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _59: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _61: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _62: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _63: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _64: &[&str; 2];             // in scope 0 at ui/consts/const-fields-and-indexing.rs:24:14: 24:18
    let mut _65: &[&str; 2];             // in scope 0 at ui/consts/const-fields-and-indexing.rs:23:14: 23:18
    let mut _66: &[&str; 2];             // in scope 0 at ui/consts/const-fields-and-indexing.rs:22:14: 22:18
    scope 1 {
        debug left_val => _44;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _45;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _46: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _46;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _51;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _52;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _53: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _53;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _58;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _59;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _60: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _60;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _66 = const _;                   // scope 0 at ui/consts/const-fields-and-indexing.rs:22:14: 22:18
                                         // mir::Constant
                                         // + span: ui/consts/const-fields-and-indexing.rs:22:14: 22:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[5])) }
        _5 = _66;                        // scope 0 at ui/consts/const-fields-and-indexing.rs:22:14: 22:18
        _4 = _5;                         // scope 0 at ui/consts/const-fields-and-indexing.rs:22:14: 22:18
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at ui/consts/const-fields-and-indexing.rs:22:14: 22:18
        _13 = const {alloc1: &isize};    // scope 0 at ui/consts/const-fields-and-indexing.rs:22:20: 22:21
                                         // mir::Constant
                                         // + span: ui/consts/const-fields-and-indexing.rs:22:20: 22:21
                                         // + literal: Const { ty: &isize, val: Value(Scalar(alloc1)) }
        _12 = _13;                       // scope 0 at ui/consts/const-fields-and-indexing.rs:22:20: 22:21
        _11 = _12;                       // scope 0 at ui/consts/const-fields-and-indexing.rs:22:20: 22:21
        _10 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _11) -> bb1; // scope 0 at ui/consts/const-fields-and-indexing.rs:22:20: 22:21
                                         // mir::Constant
                                         // + span: ui/consts/const-fields-and-indexing.rs:22:20: 22:21
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = [move _10];                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = _print(move _2) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _65 = const _;                   // scope 0 at ui/consts/const-fields-and-indexing.rs:23:14: 23:18
                                         // mir::Constant
                                         // + span: ui/consts/const-fields-and-indexing.rs:23:14: 23:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[4])) }
        _18 = _65;                       // scope 0 at ui/consts/const-fields-and-indexing.rs:23:14: 23:18
        _17 = _18;                       // scope 0 at ui/consts/const-fields-and-indexing.rs:23:14: 23:18
        _16 = move _17 as &[&str] (Pointer(Unsize)); // scope 0 at ui/consts/const-fields-and-indexing.rs:23:14: 23:18
        _26 = const {alloc2: &isize};    // scope 0 at ui/consts/const-fields-and-indexing.rs:23:20: 23:21
                                         // mir::Constant
                                         // + span: ui/consts/const-fields-and-indexing.rs:23:20: 23:21
                                         // + literal: Const { ty: &isize, val: Value(Scalar(alloc2)) }
        _25 = _26;                       // scope 0 at ui/consts/const-fields-and-indexing.rs:23:20: 23:21
        _24 = _25;                       // scope 0 at ui/consts/const-fields-and-indexing.rs:23:20: 23:21
        _23 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _24) -> bb4; // scope 0 at ui/consts/const-fields-and-indexing.rs:23:20: 23:21
                                         // mir::Constant
                                         // + span: ui/consts/const-fields-and-indexing.rs:23:20: 23:21
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb4: {
        _22 = [move _23];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _21 = &_22;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _20 = _21;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _19 = move _20 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _15 = Arguments::<'_>::new_v1(move _16, move _19) -> bb5; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = _print(move _15) -> bb6;   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb6: {
        _64 = const _;                   // scope 0 at ui/consts/const-fields-and-indexing.rs:24:14: 24:18
                                         // mir::Constant
                                         // + span: ui/consts/const-fields-and-indexing.rs:24:14: 24:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[3])) }
        _31 = _64;                       // scope 0 at ui/consts/const-fields-and-indexing.rs:24:14: 24:18
        _30 = _31;                       // scope 0 at ui/consts/const-fields-and-indexing.rs:24:14: 24:18
        _29 = move _30 as &[&str] (Pointer(Unsize)); // scope 0 at ui/consts/const-fields-and-indexing.rs:24:14: 24:18
        _39 = const {alloc3: &isize};    // scope 0 at ui/consts/const-fields-and-indexing.rs:24:20: 24:21
                                         // mir::Constant
                                         // + span: ui/consts/const-fields-and-indexing.rs:24:20: 24:21
                                         // + literal: Const { ty: &isize, val: Value(Scalar(alloc3)) }
        _38 = _39;                       // scope 0 at ui/consts/const-fields-and-indexing.rs:24:20: 24:21
        _37 = _38;                       // scope 0 at ui/consts/const-fields-and-indexing.rs:24:20: 24:21
        _36 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _37) -> bb7; // scope 0 at ui/consts/const-fields-and-indexing.rs:24:20: 24:21
                                         // mir::Constant
                                         // + span: ui/consts/const-fields-and-indexing.rs:24:20: 24:21
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb7: {
        _35 = [move _36];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _34 = &_35;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _33 = _34;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _32 = move _33 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _28 = Arguments::<'_>::new_v1(move _29, move _32) -> bb8; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb8: {
        _27 = _print(move _28) -> bb9;   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb9: {
        _42 = const {alloc1: &isize};    // scope 0 at ui/consts/const-fields-and-indexing.rs:25:16: 25:17
                                         // mir::Constant
                                         // + span: ui/consts/const-fields-and-indexing.rs:25:16: 25:17
                                         // + literal: Const { ty: &isize, val: Value(Scalar(alloc1)) }
        _41 = _42;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _63 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[2])) }
        _43 = _63;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _40 = (move _41, move _43);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _44 = (_40.0: &isize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _45 = (_40.1: &isize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _49 = const {alloc2: &isize};    // scope 0 at ui/consts/const-fields-and-indexing.rs:26:16: 26:17
                                         // mir::Constant
                                         // + span: ui/consts/const-fields-and-indexing.rs:26:16: 26:17
                                         // + literal: Const { ty: &isize, val: Value(Scalar(alloc2)) }
        _48 = _49;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _62 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[1])) }
        _50 = _62;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _47 = (move _48, move _50);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _51 = (_47.0: &isize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _52 = (_47.1: &isize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _56 = const {alloc3: &isize};    // scope 0 at ui/consts/const-fields-and-indexing.rs:27:16: 27:17
                                         // mir::Constant
                                         // + span: ui/consts/const-fields-and-indexing.rs:27:16: 27:17
                                         // + literal: Const { ty: &isize, val: Value(Scalar(alloc3)) }
        _55 = _56;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _61 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _57 = _61;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _54 = (move _55, move _57);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _58 = (_54.0: &isize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _59 = (_54.1: &isize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        return;                          // scope 0 at ui/consts/const-fields-and-indexing.rs:28:2: 28:2
    }
}

alloc3 (static: t, size: 8, align: 8) {
    14 00 00 00 00 00 00 00                         │ ........
}

alloc2 (static: q, size: 8, align: 8) {
    03 00 00 00 00 00 00 00                         │ ........
}

alloc1 (static: p, size: 8, align: 8) {
    03 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/consts/const-fields-and-indexing.rs:27:19: 27:21

    bb0: {
        _1 = const 20_isize;             // scope 0 at ui/consts/const-fields-and-indexing.rs:27:19: 27:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/consts/const-fields-and-indexing.rs:26:19: 26:20

    bb0: {
        _1 = const 3_isize;              // scope 0 at ui/consts/const-fields-and-indexing.rs:26:19: 26:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/consts/const-fields-and-indexing.rs:25:19: 25:20

    bb0: {
        _1 = const 3_isize;              // scope 0 at ui/consts/const-fields-and-indexing.rs:25:19: 25:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/consts/const-fields-and-indexing.rs:24:14: 24:18
    let mut _1: [&str; 2];               // in scope 0 at ui/consts/const-fields-and-indexing.rs:24:14: 24:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/consts/const-fields-and-indexing.rs:24:14: 24:18
                                         // mir::Constant
                                         // + span: ui/consts/const-fields-and-indexing.rs:24:14: 24:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/consts/const-fields-and-indexing.rs:24:14: 24:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/consts/const-fields-and-indexing.rs:24:14: 24:18
        return;                          // scope 0 at ui/consts/const-fields-and-indexing.rs:24:14: 24:18
    }
}

promoted[4] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/consts/const-fields-and-indexing.rs:23:14: 23:18
    let mut _1: [&str; 2];               // in scope 0 at ui/consts/const-fields-and-indexing.rs:23:14: 23:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/consts/const-fields-and-indexing.rs:23:14: 23:18
                                         // mir::Constant
                                         // + span: ui/consts/const-fields-and-indexing.rs:23:14: 23:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/consts/const-fields-and-indexing.rs:23:14: 23:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/consts/const-fields-and-indexing.rs:23:14: 23:18
        return;                          // scope 0 at ui/consts/const-fields-and-indexing.rs:23:14: 23:18
    }
}

promoted[5] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/consts/const-fields-and-indexing.rs:22:14: 22:18
    let mut _1: [&str; 2];               // in scope 0 at ui/consts/const-fields-and-indexing.rs:22:14: 22:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/consts/const-fields-and-indexing.rs:22:14: 22:18
                                         // mir::Constant
                                         // + span: ui/consts/const-fields-and-indexing.rs:22:14: 22:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/consts/const-fields-and-indexing.rs:22:14: 22:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/consts/const-fields-and-indexing.rs:22:14: 22:18
        return;                          // scope 0 at ui/consts/const-fields-and-indexing.rs:22:14: 22:18
    }
}
