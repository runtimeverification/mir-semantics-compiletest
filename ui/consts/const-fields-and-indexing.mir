// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const x: [isize; 4] = {
    let mut _0: [isize; 4];

    bb0: {
        _0 = [const 1_isize, const 2_isize, const 3_isize, const 4_isize];
        return;
    }
}

x::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

static p: isize = {
    let mut _0: isize;
    let mut _1: [isize; 4];
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        _2 = const 2_usize;
        _3 = Len(_1);
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = _1[_2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const y: &[isize] = {
    let mut _0: &[isize];
    let mut _1: &[isize; 4];
    let _2: &[isize; 4];
    let _3: [isize; 4];
    let mut _4: &[isize; 4];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[isize] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in y: &[isize; 4] = {
    let mut _0: &[isize; 4];
    let mut _1: [isize; 4];

    bb0: {
        _1 = [const 1_isize, const 2_isize, const 3_isize, const 4_isize];
        _0 = &_1;
        return;
    }
}

static q: isize = {
    let mut _0: isize;
    let mut _1: &[isize];
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        _2 = const 2_usize;
        _3 = Len((*_1));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = (*_1)[_2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const s: S = {
    let mut _0: S;

    bb0: {
        _0 = S { a: const 10_isize, b: const 20_isize };
        return;
    }
}

static t: isize = {
    let mut _0: isize;
    let mut _1: S;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        _0 = (_1.1: isize);
        StorageDead(_1);
        return;
    }
}

const k: K = {
    let mut _0: K;
    let mut _1: D;

    bb0: {
        StorageLive(_1);
        _1 = D { d: const 30_isize, e: const 40_isize };
        _0 = K { a: const 10_isize, b: const 20_isize, c: move _1 };
        StorageDead(_1);
        return;
    }
}

static m: isize = {
    let mut _0: isize;
    let mut _1: K;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        _0 = ((_1.2: D).1: isize);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 1];
    let _6: [core::fmt::rt::Argument<'_>; 1];
    let mut _7: core::fmt::rt::Argument<'_>;
    let _8: &isize;
    let _9: ();
    let mut _10: std::fmt::Arguments<'_>;
    let mut _11: &[&str];
    let mut _12: &[core::fmt::rt::Argument<'_>];
    let _13: &[core::fmt::rt::Argument<'_>; 1];
    let _14: [core::fmt::rt::Argument<'_>; 1];
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &isize;
    let _17: ();
    let mut _18: std::fmt::Arguments<'_>;
    let mut _19: &[&str];
    let mut _20: &[core::fmt::rt::Argument<'_>];
    let _21: &[core::fmt::rt::Argument<'_>; 1];
    let _22: [core::fmt::rt::Argument<'_>; 1];
    let mut _23: core::fmt::rt::Argument<'_>;
    let _24: &isize;
    let mut _25: (&isize, &isize);
    let _26: &isize;
    let _27: &isize;
    let _28: &isize;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: isize;
    let mut _32: isize;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: (&isize, &isize);
    let _37: &isize;
    let _38: &isize;
    let _39: &isize;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: isize;
    let mut _43: isize;
    let _45: !;
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _47: (&isize, &isize);
    let _48: &isize;
    let _49: &isize;
    let _50: &isize;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: isize;
    let mut _54: isize;
    let _56: !;
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _58: &isize;
    let mut _59: &isize;
    let mut _60: &isize;
    let mut _61: &[&str; 2];
    let mut _62: &[&str; 2];
    let mut _63: &[&str; 2];
    scope 1 {
        debug left_val => _27;
        debug right_val => _28;
        let _33: core::panicking::AssertKind;
        scope 2 {
            debug kind => _33;
        }
    }
    scope 3 {
        debug left_val => _38;
        debug right_val => _39;
        let _44: core::panicking::AssertKind;
        scope 4 {
            debug kind => _44;
        }
    }
    scope 5 {
        debug left_val => _49;
        debug right_val => _50;
        let _55: core::panicking::AssertKind;
        scope 6 {
            debug kind => _55;
        }
    }

    bb0: {
        _63 = const _;
        _3 = _63 as &[&str] (Pointer(Unsize));
        _8 = const {alloc1: &isize};
        _7 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = [move _7];
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = _print(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _62 = const _;
        _11 = _62 as &[&str] (Pointer(Unsize));
        _16 = const {alloc2: &isize};
        _15 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_16) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = [move _15];
        _13 = &_14;
        _12 = _13 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _10 = Arguments::<'_>::new_v1(move _11, move _12) -> [return: bb5, unwind continue];
    }

    bb5: {
        _9 = _print(move _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        _61 = const _;
        _19 = _61 as &[&str] (Pointer(Unsize));
        _24 = const {alloc3: &isize};
        _23 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_24) -> [return: bb7, unwind continue];
    }

    bb7: {
        _22 = [move _23];
        _21 = &_22;
        _20 = _21 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _18 = Arguments::<'_>::new_v1(move _19, move _20) -> [return: bb8, unwind continue];
    }

    bb8: {
        _17 = _print(move _18) -> [return: bb9, unwind continue];
    }

    bb9: {
        _26 = const {alloc1: &isize};
        _60 = const _;
        _25 = (_26, _60);
        _27 = (_25.0: &isize);
        _28 = (_25.1: &isize);
        _31 = (*_27);
        _32 = (*_28);
        _30 = Eq(move _31, move _32);
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<isize, isize>(move _33, _27, _28, move _35) -> unwind continue;
    }

    bb11: {
        _37 = const {alloc2: &isize};
        _59 = const _;
        _36 = (_37, _59);
        _38 = (_36.0: &isize);
        _39 = (_36.1: &isize);
        _42 = (*_38);
        _43 = (*_39);
        _41 = Eq(move _42, move _43);
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _44 = core::panicking::AssertKind::Eq;
        _46 = Option::<Arguments<'_>>::None;
        _45 = core::panicking::assert_failed::<isize, isize>(move _44, _38, _39, move _46) -> unwind continue;
    }

    bb13: {
        _48 = const {alloc3: &isize};
        _58 = const _;
        _47 = (_48, _58);
        _49 = (_47.0: &isize);
        _50 = (_47.1: &isize);
        _53 = (*_49);
        _54 = (*_50);
        _52 = Eq(move _53, move _54);
        _51 = Not(move _52);
        switchInt(move _51) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _55 = core::panicking::AssertKind::Eq;
        _57 = Option::<Arguments<'_>>::None;
        _56 = core::panicking::assert_failed::<isize, isize>(move _55, _49, _50, move _57) -> unwind continue;
    }

    bb15: {
        return;
    }
}

alloc3 (static: t, size: 8, align: 8) {
    14 00 00 00 00 00 00 00                         │ ........
}

alloc2 (static: q, size: 8, align: 8) {
    03 00 00 00 00 00 00 00                         │ ........
}

alloc1 (static: p, size: 8, align: 8) {
    03 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 20_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
