// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut TEST: i32 = {
    let mut _0: i32;
    let _1: &mut [i32; 3];
    let mut _2: [i32; 3];
    let _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: (i32, bool);
    let _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = [const 1_i32, const 2_i32, const 3_i32];
        _1 = &mut _2;
        StorageLive(_3);
        _3 = const 0_usize;
        _4 = Len((*_1));
        _5 = Lt(_3, _4);
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> [success: bb1, unwind continue];
    }

    bb1: {
        _6 = CheckedAdd((*_1)[_3], const 1_i32);
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_1)[_3], const 1_i32) -> [success: bb2, unwind continue];
    }

    bb2: {
        (*_1)[_3] = move (_6.0: i32);
        StorageDead(_3);
        StorageLive(_7);
        _7 = const 0_usize;
        _8 = Len((*_1));
        _9 = Lt(_7, _8);
        assert(move _9, "index out of bounds: the length is {} but the index is {}", move _8, _7) -> [success: bb3, unwind continue];
    }

    bb3: {
        _0 = (*_1)[_7];
        StorageDead(_2);
        StorageDead(_1);
        StorageDead(_7);
        return;
    }
}

static mut TEST2: &mut [i32] = {
    let mut _0: &mut [i32];
    let mut _1: &mut [i32; 3];
    let mut _2: &mut [i32; 3];
    let mut _3: [i32; 3];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = [const 0_i32, const 1_i32, const 2_i32];
        _2 = &mut _3;
        _1 = &mut (*_2);
        _0 = move _1 as &mut [i32] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let mut _4: *mut i32;
    let _5: &i32;
    let _6: &i32;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: i32;
    let mut _10: i32;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: &i32;
    scope 1 {
        let mut _15: *const ();
        let mut _16: usize;
        let mut _17: usize;
        let mut _18: usize;
        let mut _19: usize;
        let mut _20: bool;
    }
    scope 2 {
        debug left_val => _5;
        debug right_val => _6;
        let _11: core::panicking::AssertKind;
        scope 3 {
            debug kind => _11;
        }
    }

    bb0: {
        _4 = const {alloc1: *mut i32};
        _15 = _4 as *const () (PtrToPtr);
        _16 = _15 as usize (Transmute);
        _17 = AlignOf(i32);
        _18 = Sub(_17, const 1_usize);
        _19 = BitAnd(_16, _18);
        _20 = Eq(_19, const 0_usize);
        assert(_20, "misaligned pointer dereference: address must be a multiple of {} but is {}", _17, _16) -> [success: bb3, unwind unreachable];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<i32, i32>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb2: {
        return;
    }

    bb3: {
        _3 = (*_4);
        _2 = &_3;
        _14 = const _;
        _1 = (move _2, _14);
        _5 = (_1.0: &i32);
        _6 = (_1.1: &i32);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }
}

alloc1 (static: TEST, size: 4, align: 4) {
    02 00 00 00                                     â”‚ ....
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}
