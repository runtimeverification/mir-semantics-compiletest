// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn call_external_constructors_in_local_vars() -> AssertUnwindSafe<(Option<i32>, Result<i32, bool>)> {
    let _1: fn(i32) -> std::option::Option<i32> {std::option::Option::<i32>::Some}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:11:9: 11:10
    let mut _5: fn(i32) -> std::option::Option<i32> {std::option::Option::<i32>::Some}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:14:13: 14:14
    let mut _7: fn(bool) -> std::result::Result<i32, bool> {std::result::Result::<i32, bool>::Err}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:15:13: 15:14
    let mut _8: fn((std::option::Option<i32>, std::result::Result<i32, bool>)) -> std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)> {std::panic::AssertUnwindSafe::<(std::option::Option<i32>, std::result::Result<i32, bool>)>}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:16:13: 16:14
    let mut _9: (std::option::Option<i32>, std::result::Result<i32, bool>); // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:16:15: 16:21
    let mut _10: std::option::Option<i32>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:16:16: 16:17
    let mut _11: std::result::Result<i32, bool>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:16:19: 16:20
    scope 1 {
        debug f => _1;                   // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:11:9: 11:10
        let _2: fn(bool) -> std::result::Result<i32, bool> {std::result::Result::<i32, bool>::Err}; // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:12:9: 12:10
        scope 2 {
            debug g => _2;               // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:12:9: 12:10
            let _3: fn((std::option::Option<i32>, std::result::Result<i32, bool>)) -> std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)> {std::panic::AssertUnwindSafe::<(std::option::Option<i32>, std::result::Result<i32, bool>)>}; // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:13:9: 13:10
            scope 3 {
                debug h => _3;           // in scope 3 at ui/consts/const_constructor/const-construct-call.rs:13:9: 13:10
                let _4: std::option::Option<i32>; // in scope 3 at ui/consts/const_constructor/const-construct-call.rs:14:9: 14:10
                scope 4 {
                    debug x => _4;       // in scope 4 at ui/consts/const_constructor/const-construct-call.rs:14:9: 14:10
                    let _6: std::result::Result<i32, bool>; // in scope 4 at ui/consts/const_constructor/const-construct-call.rs:15:9: 15:10
                    scope 5 {
                        debug y => _6;   // in scope 5 at ui/consts/const_constructor/const-construct-call.rs:15:9: 15:10
                        let mut _0: std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)>; // return place in scope 5 at ui/consts/const_constructor/const-construct-call.rs:16:9: 16:10
                        scope 6 {
                            debug z => _0; // in scope 6 at ui/consts/const_constructor/const-construct-call.rs:16:9: 16:10
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _4 = move _5(const 5_i32) -> bb1; // scope 3 at ui/consts/const_constructor/const-construct-call.rs:14:13: 14:17
    }

    bb1: {
        _6 = move _7(const false) -> bb2; // scope 4 at ui/consts/const_constructor/const-construct-call.rs:15:13: 15:21
    }

    bb2: {
        _10 = _4;                        // scope 5 at ui/consts/const_constructor/const-construct-call.rs:16:16: 16:17
        _11 = _6;                        // scope 5 at ui/consts/const_constructor/const-construct-call.rs:16:19: 16:20
        _9 = (move _10, move _11);       // scope 5 at ui/consts/const_constructor/const-construct-call.rs:16:15: 16:21
        _0 = move _8(move _9) -> bb3;    // scope 5 at ui/consts/const_constructor/const-construct-call.rs:16:13: 16:22
    }

    bb3: {
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:18:2: 18:2
    }
}

// MIR FOR CTFE
fn call_external_constructors_in_local_vars() -> AssertUnwindSafe<(Option<i32>, Result<i32, bool>)> {
    let mut _0: std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)>; // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:10:56: 10:68
    let _1: fn(i32) -> std::option::Option<i32> {std::option::Option::<i32>::Some}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:11:9: 11:10
    let mut _5: fn(i32) -> std::option::Option<i32> {std::option::Option::<i32>::Some}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:14:13: 14:14
    let mut _7: fn(bool) -> std::result::Result<i32, bool> {std::result::Result::<i32, bool>::Err}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:15:13: 15:14
    let mut _9: fn((std::option::Option<i32>, std::result::Result<i32, bool>)) -> std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)> {std::panic::AssertUnwindSafe::<(std::option::Option<i32>, std::result::Result<i32, bool>)>}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:16:13: 16:14
    let mut _10: (std::option::Option<i32>, std::result::Result<i32, bool>); // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:16:15: 16:21
    let mut _11: std::option::Option<i32>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:16:16: 16:17
    let mut _12: std::result::Result<i32, bool>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:16:19: 16:20
    scope 1 {
        debug f => _1;                   // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:11:9: 11:10
        let _2: fn(bool) -> std::result::Result<i32, bool> {std::result::Result::<i32, bool>::Err}; // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:12:9: 12:10
        scope 2 {
            debug g => _2;               // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:12:9: 12:10
            let _3: fn((std::option::Option<i32>, std::result::Result<i32, bool>)) -> std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)> {std::panic::AssertUnwindSafe::<(std::option::Option<i32>, std::result::Result<i32, bool>)>}; // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:13:9: 13:10
            scope 3 {
                debug h => _3;           // in scope 3 at ui/consts/const_constructor/const-construct-call.rs:13:9: 13:10
                let _4: std::option::Option<i32>; // in scope 3 at ui/consts/const_constructor/const-construct-call.rs:14:9: 14:10
                scope 4 {
                    debug x => _4;       // in scope 4 at ui/consts/const_constructor/const-construct-call.rs:14:9: 14:10
                    let _6: std::result::Result<i32, bool>; // in scope 4 at ui/consts/const_constructor/const-construct-call.rs:15:9: 15:10
                    scope 5 {
                        debug y => _6;   // in scope 5 at ui/consts/const_constructor/const-construct-call.rs:15:9: 15:10
                        let _8: std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)>; // in scope 5 at ui/consts/const_constructor/const-construct-call.rs:16:9: 16:10
                        scope 6 {
                            debug z => _8; // in scope 6 at ui/consts/const_constructor/const-construct-call.rs:16:9: 16:10
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:11:9: 11:10
        _1 = Option::<i32>::Some;        // scope 0 at ui/consts/const_constructor/const-construct-call.rs:11:13: 11:17
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:11:13: 11:17
                                         // + literal: Const { ty: fn(i32) -> Option<i32> {Option::<i32>::Some}, val: Value(<ZST>) }
        StorageLive(_2);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:12:9: 12:10
        _2 = Result::<i32, bool>::Err;   // scope 1 at ui/consts/const_constructor/const-construct-call.rs:12:13: 12:16
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:12:13: 12:16
                                         // + literal: Const { ty: fn(bool) -> Result<i32, bool> {Result::<i32, bool>::Err}, val: Value(<ZST>) }
        StorageLive(_3);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:13:9: 13:10
        _3 = AssertUnwindSafe::<(Option<i32>, Result<i32, bool>)>; // scope 2 at ui/consts/const_constructor/const-construct-call.rs:13:13: 13:41
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:13:13: 13:41
                                         // + literal: Const { ty: fn((Option<i32>, Result<i32, bool>)) -> AssertUnwindSafe<(Option<i32>, Result<i32, bool>)> {AssertUnwindSafe::<(Option<i32>, Result<i32, bool>)>}, val: Value(<ZST>) }
        StorageLive(_4);                 // scope 3 at ui/consts/const_constructor/const-construct-call.rs:14:9: 14:10
        StorageLive(_5);                 // scope 3 at ui/consts/const_constructor/const-construct-call.rs:14:13: 14:14
        _5 = _1;                         // scope 3 at ui/consts/const_constructor/const-construct-call.rs:14:13: 14:14
        ConstEvalCounter;                // scope 3 at ui/consts/const_constructor/const-construct-call.rs:14:13: 14:17
        _4 = move _5(const 5_i32) -> bb1; // scope 3 at ui/consts/const_constructor/const-construct-call.rs:14:13: 14:17
    }

    bb1: {
        StorageDead(_5);                 // scope 3 at ui/consts/const_constructor/const-construct-call.rs:14:16: 14:17
        StorageLive(_6);                 // scope 4 at ui/consts/const_constructor/const-construct-call.rs:15:9: 15:10
        StorageLive(_7);                 // scope 4 at ui/consts/const_constructor/const-construct-call.rs:15:13: 15:14
        _7 = _2;                         // scope 4 at ui/consts/const_constructor/const-construct-call.rs:15:13: 15:14
        ConstEvalCounter;                // scope 4 at ui/consts/const_constructor/const-construct-call.rs:15:13: 15:21
        _6 = move _7(const false) -> bb2; // scope 4 at ui/consts/const_constructor/const-construct-call.rs:15:13: 15:21
    }

    bb2: {
        StorageDead(_7);                 // scope 4 at ui/consts/const_constructor/const-construct-call.rs:15:20: 15:21
        StorageLive(_8);                 // scope 5 at ui/consts/const_constructor/const-construct-call.rs:16:9: 16:10
        StorageLive(_9);                 // scope 5 at ui/consts/const_constructor/const-construct-call.rs:16:13: 16:14
        _9 = _3;                         // scope 5 at ui/consts/const_constructor/const-construct-call.rs:16:13: 16:14
        StorageLive(_10);                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:16:15: 16:21
        StorageLive(_11);                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:16:16: 16:17
        _11 = _4;                        // scope 5 at ui/consts/const_constructor/const-construct-call.rs:16:16: 16:17
        StorageLive(_12);                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:16:19: 16:20
        _12 = _6;                        // scope 5 at ui/consts/const_constructor/const-construct-call.rs:16:19: 16:20
        _10 = (move _11, move _12);      // scope 5 at ui/consts/const_constructor/const-construct-call.rs:16:15: 16:21
        StorageDead(_12);                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:16:20: 16:21
        StorageDead(_11);                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:16:20: 16:21
        ConstEvalCounter;                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:16:13: 16:22
        _8 = move _9(move _10) -> bb3;   // scope 5 at ui/consts/const_constructor/const-construct-call.rs:16:13: 16:22
    }

    bb3: {
        StorageDead(_10);                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:16:21: 16:22
        StorageDead(_9);                 // scope 5 at ui/consts/const_constructor/const-construct-call.rs:16:21: 16:22
        _0 = move _8;                    // scope 6 at ui/consts/const_constructor/const-construct-call.rs:17:5: 17:6
        StorageDead(_8);                 // scope 5 at ui/consts/const_constructor/const-construct-call.rs:18:1: 18:2
        StorageDead(_6);                 // scope 4 at ui/consts/const_constructor/const-construct-call.rs:18:1: 18:2
        StorageDead(_4);                 // scope 3 at ui/consts/const_constructor/const-construct-call.rs:18:1: 18:2
        StorageDead(_3);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:18:1: 18:2
        StorageDead(_2);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:18:1: 18:2
        StorageDead(_1);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:18:1: 18:2
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:18:2: 18:2
    }
}

const CALL_EXTERNAL_CONSTRUCTORS_IN_LOCAL_VARS: AssertUnwindSafe<(Option<i32>, Result<i32, bool>)> = {
    let mut _0: std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)>; // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:20:49: 20:61
    let _1: fn(i32) -> std::option::Option<i32> {std::option::Option::<i32>::Some}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:21:9: 21:10
    let mut _5: fn(i32) -> std::option::Option<i32> {std::option::Option::<i32>::Some}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:24:13: 24:14
    let mut _7: fn(bool) -> std::result::Result<i32, bool> {std::result::Result::<i32, bool>::Err}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:25:13: 25:14
    let mut _9: fn((std::option::Option<i32>, std::result::Result<i32, bool>)) -> std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)> {std::panic::AssertUnwindSafe::<(std::option::Option<i32>, std::result::Result<i32, bool>)>}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:26:13: 26:14
    let mut _10: (std::option::Option<i32>, std::result::Result<i32, bool>); // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:26:15: 26:21
    let mut _11: std::option::Option<i32>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:26:16: 26:17
    let mut _12: std::result::Result<i32, bool>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:26:19: 26:20
    scope 1 {
        debug f => _1;                   // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:21:9: 21:10
        let _2: fn(bool) -> std::result::Result<i32, bool> {std::result::Result::<i32, bool>::Err}; // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:22:9: 22:10
        scope 2 {
            debug g => _2;               // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:22:9: 22:10
            let _3: fn((std::option::Option<i32>, std::result::Result<i32, bool>)) -> std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)> {std::panic::AssertUnwindSafe::<(std::option::Option<i32>, std::result::Result<i32, bool>)>}; // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:23:9: 23:10
            scope 3 {
                debug h => _3;           // in scope 3 at ui/consts/const_constructor/const-construct-call.rs:23:9: 23:10
                let _4: std::option::Option<i32>; // in scope 3 at ui/consts/const_constructor/const-construct-call.rs:24:9: 24:10
                scope 4 {
                    debug x => _4;       // in scope 4 at ui/consts/const_constructor/const-construct-call.rs:24:9: 24:10
                    let _6: std::result::Result<i32, bool>; // in scope 4 at ui/consts/const_constructor/const-construct-call.rs:25:9: 25:10
                    scope 5 {
                        debug y => _6;   // in scope 5 at ui/consts/const_constructor/const-construct-call.rs:25:9: 25:10
                        let _8: std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)>; // in scope 5 at ui/consts/const_constructor/const-construct-call.rs:26:9: 26:10
                        scope 6 {
                            debug z => _8; // in scope 6 at ui/consts/const_constructor/const-construct-call.rs:26:9: 26:10
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:21:9: 21:10
        _1 = Option::<i32>::Some;        // scope 0 at ui/consts/const_constructor/const-construct-call.rs:21:13: 21:17
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:21:13: 21:17
                                         // + literal: Const { ty: fn(i32) -> Option<i32> {Option::<i32>::Some}, val: Value(<ZST>) }
        StorageLive(_2);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:22:9: 22:10
        _2 = Result::<i32, bool>::Err;   // scope 1 at ui/consts/const_constructor/const-construct-call.rs:22:13: 22:16
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:22:13: 22:16
                                         // + literal: Const { ty: fn(bool) -> Result<i32, bool> {Result::<i32, bool>::Err}, val: Value(<ZST>) }
        StorageLive(_3);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:23:9: 23:10
        _3 = AssertUnwindSafe::<(Option<i32>, Result<i32, bool>)>; // scope 2 at ui/consts/const_constructor/const-construct-call.rs:23:13: 23:41
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:23:13: 23:41
                                         // + literal: Const { ty: fn((Option<i32>, Result<i32, bool>)) -> AssertUnwindSafe<(Option<i32>, Result<i32, bool>)> {AssertUnwindSafe::<(Option<i32>, Result<i32, bool>)>}, val: Value(<ZST>) }
        StorageLive(_4);                 // scope 3 at ui/consts/const_constructor/const-construct-call.rs:24:9: 24:10
        StorageLive(_5);                 // scope 3 at ui/consts/const_constructor/const-construct-call.rs:24:13: 24:14
        _5 = _1;                         // scope 3 at ui/consts/const_constructor/const-construct-call.rs:24:13: 24:14
        ConstEvalCounter;                // scope 3 at ui/consts/const_constructor/const-construct-call.rs:24:13: 24:17
        _4 = move _5(const 5_i32) -> bb1; // scope 3 at ui/consts/const_constructor/const-construct-call.rs:24:13: 24:17
    }

    bb1: {
        StorageDead(_5);                 // scope 3 at ui/consts/const_constructor/const-construct-call.rs:24:16: 24:17
        StorageLive(_6);                 // scope 4 at ui/consts/const_constructor/const-construct-call.rs:25:9: 25:10
        StorageLive(_7);                 // scope 4 at ui/consts/const_constructor/const-construct-call.rs:25:13: 25:14
        _7 = _2;                         // scope 4 at ui/consts/const_constructor/const-construct-call.rs:25:13: 25:14
        ConstEvalCounter;                // scope 4 at ui/consts/const_constructor/const-construct-call.rs:25:13: 25:21
        _6 = move _7(const false) -> bb2; // scope 4 at ui/consts/const_constructor/const-construct-call.rs:25:13: 25:21
    }

    bb2: {
        StorageDead(_7);                 // scope 4 at ui/consts/const_constructor/const-construct-call.rs:25:20: 25:21
        StorageLive(_8);                 // scope 5 at ui/consts/const_constructor/const-construct-call.rs:26:9: 26:10
        StorageLive(_9);                 // scope 5 at ui/consts/const_constructor/const-construct-call.rs:26:13: 26:14
        _9 = _3;                         // scope 5 at ui/consts/const_constructor/const-construct-call.rs:26:13: 26:14
        StorageLive(_10);                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:26:15: 26:21
        StorageLive(_11);                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:26:16: 26:17
        _11 = _4;                        // scope 5 at ui/consts/const_constructor/const-construct-call.rs:26:16: 26:17
        StorageLive(_12);                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:26:19: 26:20
        _12 = _6;                        // scope 5 at ui/consts/const_constructor/const-construct-call.rs:26:19: 26:20
        _10 = (move _11, move _12);      // scope 5 at ui/consts/const_constructor/const-construct-call.rs:26:15: 26:21
        StorageDead(_12);                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:26:20: 26:21
        StorageDead(_11);                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:26:20: 26:21
        ConstEvalCounter;                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:26:13: 26:22
        _8 = move _9(move _10) -> bb3;   // scope 5 at ui/consts/const_constructor/const-construct-call.rs:26:13: 26:22
    }

    bb3: {
        StorageDead(_10);                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:26:21: 26:22
        StorageDead(_9);                 // scope 5 at ui/consts/const_constructor/const-construct-call.rs:26:21: 26:22
        _0 = move _8;                    // scope 6 at ui/consts/const_constructor/const-construct-call.rs:27:5: 27:6
        StorageDead(_8);                 // scope 5 at ui/consts/const_constructor/const-construct-call.rs:28:1: 28:2
        StorageDead(_6);                 // scope 4 at ui/consts/const_constructor/const-construct-call.rs:28:1: 28:2
        StorageDead(_4);                 // scope 3 at ui/consts/const_constructor/const-construct-call.rs:28:1: 28:2
        StorageDead(_3);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:28:1: 28:2
        StorageDead(_2);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:28:1: 28:2
        StorageDead(_1);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:28:1: 28:2
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:20:1: 28:3
    }
}

fn call_external_constructors_in_temps() -> AssertUnwindSafe<(Option<i32>, Result<i32, bool>)> {
    let _1: std::option::Option<i32>;    // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:31:9: 31:10
    let mut _2: fn(i32) -> std::option::Option<i32> {std::option::Option::<i32>::Some}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:31:13: 31:21
    let mut _4: fn(bool) -> std::result::Result<i32, bool> {std::result::Result::<i32, bool>::Err}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:32:13: 32:20
    let mut _5: fn((std::option::Option<i32>, std::result::Result<i32, bool>)) -> std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)> {std::panic::AssertUnwindSafe::<(std::option::Option<i32>, std::result::Result<i32, bool>)>}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:33:13: 33:46
    let mut _6: (std::option::Option<i32>, std::result::Result<i32, bool>); // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:33:47: 33:53
    let mut _7: std::option::Option<i32>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:33:48: 33:49
    let mut _8: std::result::Result<i32, bool>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:33:51: 33:52
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:31:9: 31:10
        let _3: std::result::Result<i32, bool>; // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:32:9: 32:10
        scope 2 {
            debug y => _3;               // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:32:9: 32:10
            let mut _0: std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)>; // return place in scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:9: 33:10
            scope 3 {
                debug z => _0;           // in scope 3 at ui/consts/const_constructor/const-construct-call.rs:33:9: 33:10
            }
        }
    }

    bb0: {
        _1 = move _2(const 5_i32) -> bb1; // scope 0 at ui/consts/const_constructor/const-construct-call.rs:31:13: 31:24
    }

    bb1: {
        _3 = move _4(const false) -> bb2; // scope 1 at ui/consts/const_constructor/const-construct-call.rs:32:13: 32:27
    }

    bb2: {
        _7 = _1;                         // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:48: 33:49
        _8 = _3;                         // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:51: 33:52
        _6 = (move _7, move _8);         // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:47: 33:53
        _0 = move _5(move _6) -> bb3;    // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:13: 33:54
    }

    bb3: {
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:35:2: 35:2
    }
}

promoted[0] in call_external_constructors_in_temps: &fn(bool) -> Result<i32, bool> {Result::<i32, bool>::Err} = {
    let mut _0: &fn(bool) -> std::result::Result<i32, bool> {std::result::Result::<i32, bool>::Err}; // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:32:15: 32:19
    let mut _1: fn(bool) -> std::result::Result<i32, bool> {std::result::Result::<i32, bool>::Err}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:32:16: 32:19

    bb0: {
        _1 = Result::<i32, bool>::Err;   // scope 0 at ui/consts/const_constructor/const-construct-call.rs:32:16: 32:19
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:32:16: 32:19
                                         // + literal: Const { ty: fn(bool) -> Result<i32, bool> {Result::<i32, bool>::Err}, val: Value(<ZST>) }
        _0 = &_1;                        // scope 0 at ui/consts/const_constructor/const-construct-call.rs:32:15: 32:19
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:32:15: 32:19
    }
}

// MIR FOR CTFE
fn call_external_constructors_in_temps() -> AssertUnwindSafe<(Option<i32>, Result<i32, bool>)> {
    let mut _0: std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)>; // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:30:51: 30:63
    let _1: std::option::Option<i32>;    // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:31:9: 31:10
    let mut _2: fn(i32) -> std::option::Option<i32> {std::option::Option::<i32>::Some}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:31:13: 31:21
    let mut _4: fn(bool) -> std::result::Result<i32, bool> {std::result::Result::<i32, bool>::Err}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:32:13: 32:20
    let mut _5: &fn(bool) -> std::result::Result<i32, bool> {std::result::Result::<i32, bool>::Err}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:32:15: 32:19
    let _6: fn(bool) -> std::result::Result<i32, bool> {std::result::Result::<i32, bool>::Err}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:32:16: 32:19
    let mut _8: fn((std::option::Option<i32>, std::result::Result<i32, bool>)) -> std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)> {std::panic::AssertUnwindSafe::<(std::option::Option<i32>, std::result::Result<i32, bool>)>}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:33:13: 33:46
    let mut _9: [fn((std::option::Option<i32>, std::result::Result<i32, bool>)) -> std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)> {std::panic::AssertUnwindSafe::<(std::option::Option<i32>, std::result::Result<i32, bool>)>}; 1]; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:33:13: 33:43
    let _10: usize;                      // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:33:44: 33:45
    let mut _11: usize;                  // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:33:13: 33:46
    let mut _12: bool;                   // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:33:13: 33:46
    let mut _13: (std::option::Option<i32>, std::result::Result<i32, bool>); // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:33:47: 33:53
    let mut _14: std::option::Option<i32>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:33:48: 33:49
    let mut _15: std::result::Result<i32, bool>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:33:51: 33:52
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:31:9: 31:10
        let _3: std::result::Result<i32, bool>; // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:32:9: 32:10
        let mut _16: &fn(bool) -> std::result::Result<i32, bool> {std::result::Result::<i32, bool>::Err}; // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:32:15: 32:19
        scope 2 {
            debug y => _3;               // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:32:9: 32:10
            let _7: std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)>; // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:9: 33:10
            scope 3 {
                debug z => _7;           // in scope 3 at ui/consts/const_constructor/const-construct-call.rs:33:9: 33:10
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:31:9: 31:10
        StorageLive(_2);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:31:13: 31:21
        _2 = Option::<i32>::Some;        // scope 0 at ui/consts/const_constructor/const-construct-call.rs:31:15: 31:19
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:31:15: 31:19
                                         // + literal: Const { ty: fn(i32) -> Option<i32> {Option::<i32>::Some}, val: Value(<ZST>) }
        ConstEvalCounter;                // scope 0 at ui/consts/const_constructor/const-construct-call.rs:31:13: 31:24
        _1 = move _2(const 5_i32) -> bb1; // scope 0 at ui/consts/const_constructor/const-construct-call.rs:31:13: 31:24
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:31:23: 31:24
        StorageLive(_3);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:32:9: 32:10
        StorageLive(_4);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:32:13: 32:20
        StorageLive(_5);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:32:15: 32:19
        _16 = const _;                   // scope 1 at ui/consts/const_constructor/const-construct-call.rs:32:15: 32:19
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:32:15: 32:19
                                         // + literal: Const { ty: &fn(bool) -> Result<i32, bool> {Result::<i32, bool>::Err}, val: Unevaluated(call_external_constructors_in_temps, [], Some(promoted[0])) }
        _5 = &(*_16);                    // scope 1 at ui/consts/const_constructor/const-construct-call.rs:32:15: 32:19
        _4 = (*_5);                      // scope 1 at ui/consts/const_constructor/const-construct-call.rs:32:13: 32:20
        ConstEvalCounter;                // scope 1 at ui/consts/const_constructor/const-construct-call.rs:32:13: 32:27
        _3 = move _4(const false) -> bb2; // scope 1 at ui/consts/const_constructor/const-construct-call.rs:32:13: 32:27
    }

    bb2: {
        StorageDead(_4);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:32:26: 32:27
        StorageDead(_5);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:32:27: 32:28
        StorageLive(_7);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:9: 33:10
        StorageLive(_8);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:13: 33:46
        StorageLive(_9);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:13: 33:43
        _9 = [AssertUnwindSafe::<(Option<i32>, Result<i32, bool>)>]; // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:13: 33:43
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:33:14: 33:42
                                         // + literal: Const { ty: fn((Option<i32>, Result<i32, bool>)) -> AssertUnwindSafe<(Option<i32>, Result<i32, bool>)> {AssertUnwindSafe::<(Option<i32>, Result<i32, bool>)>}, val: Value(<ZST>) }
        StorageLive(_10);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:44: 33:45
        _10 = const 0_usize;             // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:44: 33:45
        _11 = Len(_9);                   // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:13: 33:46
        _12 = Lt(_10, _11);              // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:13: 33:46
        assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> bb3; // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:13: 33:46
    }

    bb3: {
        _8 = _9[_10];                    // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:13: 33:46
        StorageLive(_13);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:47: 33:53
        StorageLive(_14);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:48: 33:49
        _14 = _1;                        // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:48: 33:49
        StorageLive(_15);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:51: 33:52
        _15 = _3;                        // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:51: 33:52
        _13 = (move _14, move _15);      // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:47: 33:53
        StorageDead(_15);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:52: 33:53
        StorageDead(_14);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:52: 33:53
        ConstEvalCounter;                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:13: 33:54
        _7 = move _8(move _13) -> bb4;   // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:13: 33:54
    }

    bb4: {
        StorageDead(_13);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:53: 33:54
        StorageDead(_8);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:53: 33:54
        StorageDead(_10);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:54: 33:55
        StorageDead(_9);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:33:54: 33:55
        _0 = move _7;                    // scope 3 at ui/consts/const_constructor/const-construct-call.rs:34:5: 34:6
        StorageDead(_7);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:35:1: 35:2
        StorageDead(_3);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:35:1: 35:2
        StorageDead(_1);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:35:1: 35:2
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:35:2: 35:2
    }
}

const CALL_EXTERNAL_CONSTRUCTORS_IN_TEMPS: AssertUnwindSafe<(Option<i32>, Result<i32, bool>)> = {
    let mut _0: std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)>; // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:37:44: 37:56
    let _1: std::option::Option<i32>;    // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:38:9: 38:10
    let mut _2: fn(i32) -> std::option::Option<i32> {std::option::Option::<i32>::Some}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:38:13: 38:21
    let mut _4: fn(bool) -> std::result::Result<i32, bool> {std::result::Result::<i32, bool>::Err}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:39:13: 39:20
    let mut _5: &fn(bool) -> std::result::Result<i32, bool> {std::result::Result::<i32, bool>::Err}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:39:15: 39:19
    let _6: fn(bool) -> std::result::Result<i32, bool> {std::result::Result::<i32, bool>::Err}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:39:16: 39:19
    let mut _8: fn((std::option::Option<i32>, std::result::Result<i32, bool>)) -> std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)> {std::panic::AssertUnwindSafe::<(std::option::Option<i32>, std::result::Result<i32, bool>)>}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:40:13: 40:46
    let mut _9: [fn((std::option::Option<i32>, std::result::Result<i32, bool>)) -> std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)> {std::panic::AssertUnwindSafe::<(std::option::Option<i32>, std::result::Result<i32, bool>)>}; 1]; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:40:13: 40:43
    let _10: usize;                      // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:40:44: 40:45
    let mut _11: usize;                  // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:40:13: 40:46
    let mut _12: bool;                   // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:40:13: 40:46
    let mut _13: (std::option::Option<i32>, std::result::Result<i32, bool>); // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:40:47: 40:53
    let mut _14: std::option::Option<i32>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:40:48: 40:49
    let mut _15: std::result::Result<i32, bool>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:40:51: 40:52
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:38:9: 38:10
        let _3: std::result::Result<i32, bool>; // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:39:9: 39:10
        let mut _16: &fn(bool) -> std::result::Result<i32, bool> {std::result::Result::<i32, bool>::Err}; // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:39:15: 39:19
        scope 2 {
            debug y => _3;               // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:39:9: 39:10
            let _7: std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)>; // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:9: 40:10
            scope 3 {
                debug z => _7;           // in scope 3 at ui/consts/const_constructor/const-construct-call.rs:40:9: 40:10
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:38:9: 38:10
        StorageLive(_2);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:38:13: 38:21
        _2 = Option::<i32>::Some;        // scope 0 at ui/consts/const_constructor/const-construct-call.rs:38:15: 38:19
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:38:15: 38:19
                                         // + literal: Const { ty: fn(i32) -> Option<i32> {Option::<i32>::Some}, val: Value(<ZST>) }
        ConstEvalCounter;                // scope 0 at ui/consts/const_constructor/const-construct-call.rs:38:13: 38:24
        _1 = move _2(const 5_i32) -> bb1; // scope 0 at ui/consts/const_constructor/const-construct-call.rs:38:13: 38:24
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:38:23: 38:24
        StorageLive(_3);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:39:9: 39:10
        StorageLive(_4);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:39:13: 39:20
        StorageLive(_5);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:39:15: 39:19
        _16 = const _;                   // scope 1 at ui/consts/const_constructor/const-construct-call.rs:39:15: 39:19
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:39:15: 39:19
                                         // + literal: Const { ty: &fn(bool) -> Result<i32, bool> {Result::<i32, bool>::Err}, val: Unevaluated(CALL_EXTERNAL_CONSTRUCTORS_IN_TEMPS, [], Some(promoted[0])) }
        _5 = &(*_16);                    // scope 1 at ui/consts/const_constructor/const-construct-call.rs:39:15: 39:19
        _4 = (*_5);                      // scope 1 at ui/consts/const_constructor/const-construct-call.rs:39:13: 39:20
        ConstEvalCounter;                // scope 1 at ui/consts/const_constructor/const-construct-call.rs:39:13: 39:27
        _3 = move _4(const false) -> bb2; // scope 1 at ui/consts/const_constructor/const-construct-call.rs:39:13: 39:27
    }

    bb2: {
        StorageDead(_4);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:39:26: 39:27
        StorageDead(_5);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:39:27: 39:28
        StorageLive(_7);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:9: 40:10
        StorageLive(_8);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:13: 40:46
        StorageLive(_9);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:13: 40:43
        _9 = [AssertUnwindSafe::<(Option<i32>, Result<i32, bool>)>]; // scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:13: 40:43
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:40:14: 40:42
                                         // + literal: Const { ty: fn((Option<i32>, Result<i32, bool>)) -> AssertUnwindSafe<(Option<i32>, Result<i32, bool>)> {AssertUnwindSafe::<(Option<i32>, Result<i32, bool>)>}, val: Value(<ZST>) }
        StorageLive(_10);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:44: 40:45
        _10 = const 0_usize;             // scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:44: 40:45
        _11 = Len(_9);                   // scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:13: 40:46
        _12 = Lt(_10, _11);              // scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:13: 40:46
        assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> bb3; // scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:13: 40:46
    }

    bb3: {
        _8 = _9[_10];                    // scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:13: 40:46
        StorageLive(_13);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:47: 40:53
        StorageLive(_14);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:48: 40:49
        _14 = _1;                        // scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:48: 40:49
        StorageLive(_15);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:51: 40:52
        _15 = _3;                        // scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:51: 40:52
        _13 = (move _14, move _15);      // scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:47: 40:53
        StorageDead(_15);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:52: 40:53
        StorageDead(_14);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:52: 40:53
        ConstEvalCounter;                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:13: 40:54
        _7 = move _8(move _13) -> bb4;   // scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:13: 40:54
    }

    bb4: {
        StorageDead(_13);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:53: 40:54
        StorageDead(_8);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:53: 40:54
        StorageDead(_10);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:54: 40:55
        StorageDead(_9);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:40:54: 40:55
        _0 = move _7;                    // scope 3 at ui/consts/const_constructor/const-construct-call.rs:41:5: 41:6
        StorageDead(_7);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:42:1: 42:2
        StorageDead(_3);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:42:1: 42:2
        StorageDead(_1);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:42:1: 42:2
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:37:1: 42:3
    }
}

promoted[0] in CALL_EXTERNAL_CONSTRUCTORS_IN_TEMPS: &fn(bool) -> Result<i32, bool> {Result::<i32, bool>::Err} = {
    let mut _0: &fn(bool) -> std::result::Result<i32, bool> {std::result::Result::<i32, bool>::Err}; // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:39:15: 39:19
    let mut _1: fn(bool) -> std::result::Result<i32, bool> {std::result::Result::<i32, bool>::Err}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:39:16: 39:19

    bb0: {
        _1 = Result::<i32, bool>::Err;   // scope 0 at ui/consts/const_constructor/const-construct-call.rs:39:16: 39:19
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:39:16: 39:19
                                         // + literal: Const { ty: fn(bool) -> Result<i32, bool> {Result::<i32, bool>::Err}, val: Value(<ZST>) }
        _0 = &_1;                        // scope 0 at ui/consts/const_constructor/const-construct-call.rs:39:15: 39:19
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:39:15: 39:19
    }
}

fn <impl at ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15>::fmt(_1: &LocalOption<T>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
    debug f => _2;                       // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
    let mut _3: isize;                   // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
    let _4: &T;                          // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:46:10: 46:11
    let mut _5: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
    let mut _6: &str;                    // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
    let _7: &str;                        // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:46:10: 46:11
    let mut _9: &&T;                     // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:46:10: 46:11
    let _10: &&T;                        // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:46:10: 46:11
    let mut _11: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
    let mut _12: &str;                   // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
    let _13: &str;                       // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:46:10: 46:11
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
    }

    bb1: {
        _11 = &mut (*_2);                // scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
        _13 = const "_None";             // scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = _13;                       // scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
        _0 = Formatter::<'_>::write_str(move _11, move _12) -> bb4; // scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
    }

    bb3: {
        _4 = &(((*_1) as Some).0: T);    // scope 0 at ui/consts/const_constructor/const-construct-call.rs:46:10: 46:11
        _5 = &mut (*_2);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
        _7 = const "Some";               // scope 1 at ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 1 at ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
        _10 = &_4;                       // scope 1 at ui/consts/const_constructor/const-construct-call.rs:46:10: 46:11
        _9 = _10;                        // scope 1 at ui/consts/const_constructor/const-construct-call.rs:46:10: 46:11
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/consts/const_constructor/const-construct-call.rs:46:10: 46:11
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _5, move _6, move _8) -> bb4; // scope 1 at ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:44:10: 44:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:15: 44:15
    }
}

fn <impl at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26>::eq(_1: &LocalOption<T>, _2: &LocalOption<T>) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    debug other => _2;                   // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    let _3: isize;                       // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    let mut _4: &LocalOption<T>;         // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    let mut _6: &LocalOption<T>;         // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    let mut _7: bool;                    // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    let mut _8: isize;                   // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    let mut _9: isize;                   // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    let mut _10: bool;                   // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    let mut _11: (&LocalOption<T>, &LocalOption<T>); // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    let mut _12: &LocalOption<T>;        // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    let mut _13: &LocalOption<T>;        // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    let mut _14: isize;                  // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    let mut _15: isize;                  // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    let mut _18: &T;                     // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:46:10: 46:11
    let mut _19: &T;                     // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:46:10: 46:11
    let mut _20: &LocalOption<T>;        // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    let mut _21: &LocalOption<T>;        // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    let mut _22: &LocalOption<T>;        // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    let mut _23: &LocalOption<T>;        // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
        let _5: isize;                   // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
            let _16: &T;                 // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:46:10: 46:11
            let _17: &T;                 // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:46:10: 46:11
            scope 3 {
                debug __self_0 => _16;   // in scope 3 at ui/consts/const_constructor/const-construct-call.rs:46:10: 46:11
                debug __arg1_0 => _17;   // in scope 3 at ui/consts/const_constructor/const-construct-call.rs:46:10: 46:11
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
        _3 = discriminant((*_4));        // scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
        _6 = _2;                         // scope 1 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
        _5 = discriminant((*_6));        // scope 1 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
        _8 = _3;                         // scope 2 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
        _9 = _5;                         // scope 2 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
        _7 = Eq(move _8, move _9);       // scope 2 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
        goto -> bb3;                     // scope 2 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
        _13 = _2;                        // scope 2 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
        _11 = (move _12, move _13);      // scope 2 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
        _20 = deref_copy (_11.0: &LocalOption<T>); // scope 2 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
        _15 = discriminant((*_20));      // scope 2 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
        switchInt(move _15) -> [0: bb4, otherwise: bb5]; // scope 2 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    }

    bb3: {
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:44:26: 44:26
    }

    bb4: {
        _21 = deref_copy (_11.1: &LocalOption<T>); // scope 2 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
        _14 = discriminant((*_21));      // scope 2 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
        switchInt(move _14) -> [0: bb6, otherwise: bb5]; // scope 2 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    }

    bb5: {
        _10 = const true;                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
        goto -> bb7;                     // scope 2 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    }

    bb6: {
        _22 = deref_copy (_11.0: &LocalOption<T>); // scope 2 at ui/consts/const_constructor/const-construct-call.rs:46:10: 46:11
        _16 = &(((*_22) as Some).0: T);  // scope 2 at ui/consts/const_constructor/const-construct-call.rs:46:10: 46:11
        _23 = deref_copy (_11.1: &LocalOption<T>); // scope 2 at ui/consts/const_constructor/const-construct-call.rs:46:10: 46:11
        _17 = &(((*_23) as Some).0: T);  // scope 2 at ui/consts/const_constructor/const-construct-call.rs:46:10: 46:11
        _18 = _16;                       // scope 3 at ui/consts/const_constructor/const-construct-call.rs:46:10: 46:11
        _19 = _17;                       // scope 3 at ui/consts/const_constructor/const-construct-call.rs:46:10: 46:11
        _10 = <T as PartialEq>::eq(move _18, move _19) -> bb7; // scope 3 at ui/consts/const_constructor/const-construct-call.rs:46:10: 46:11
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:46:10: 46:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = move _10;                   // scope 2 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
        goto -> bb3;                     // scope 2 at ui/consts/const_constructor/const-construct-call.rs:44:17: 44:26
    }
}

fn <impl at ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15>::fmt(_1: &LocalResult<T, E>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
    debug f => _2;                       // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
    let mut _3: isize;                   // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
    let _4: &T;                          // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:52:9: 52:10
    let mut _5: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
    let mut _6: &str;                    // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
    let _7: &str;                        // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:52:9: 52:10
    let mut _9: &&T;                     // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:52:9: 52:10
    let _10: &&T;                        // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:52:9: 52:10
    let _11: &E;                         // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:53:9: 53:10
    let mut _12: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
    let mut _13: &str;                   // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
    let _14: &str;                       // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
    let mut _15: &dyn std::fmt::Debug;   // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:53:9: 53:10
    let mut _16: &&E;                    // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:53:9: 53:10
    let _17: &&E;                        // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:53:9: 53:10
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:52:9: 52:10
    }
    scope 2 {
        debug __self_0 => _11;           // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:53:9: 53:10
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
    }

    bb1: {
        _11 = &(((*_1) as Err).0: E);    // scope 0 at ui/consts/const_constructor/const-construct-call.rs:53:9: 53:10
        _12 = &mut (*_2);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
        _14 = const "Err";               // scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = _14;                       // scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
        _17 = &_11;                      // scope 2 at ui/consts/const_constructor/const-construct-call.rs:53:9: 53:10
        _16 = _17;                       // scope 2 at ui/consts/const_constructor/const-construct-call.rs:53:9: 53:10
        _15 = move _16 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/consts/const_constructor/const-construct-call.rs:53:9: 53:10
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _12, move _13, move _15) -> bb4; // scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
    }

    bb3: {
        _4 = &(((*_1) as _Ok).0: T);     // scope 0 at ui/consts/const_constructor/const-construct-call.rs:52:9: 52:10
        _5 = &mut (*_2);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
        _7 = const "_Ok";                // scope 1 at ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 1 at ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
        _10 = &_4;                       // scope 1 at ui/consts/const_constructor/const-construct-call.rs:52:9: 52:10
        _9 = _10;                        // scope 1 at ui/consts/const_constructor/const-construct-call.rs:52:9: 52:10
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/consts/const_constructor/const-construct-call.rs:52:9: 52:10
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _5, move _6, move _8) -> bb4; // scope 1 at ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:50:10: 50:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:15: 50:15
    }
}

fn <impl at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26>::eq(_1: &LocalResult<T, E>, _2: &LocalResult<T, E>) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    debug other => _2;                   // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    let _3: isize;                       // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    let mut _4: &LocalResult<T, E>;      // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    let mut _6: &LocalResult<T, E>;      // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    let mut _7: bool;                    // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    let mut _8: isize;                   // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    let mut _9: isize;                   // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    let mut _10: bool;                   // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    let mut _11: (&LocalResult<T, E>, &LocalResult<T, E>); // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    let mut _12: &LocalResult<T, E>;     // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    let mut _13: &LocalResult<T, E>;     // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    let mut _14: isize;                  // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    let mut _15: isize;                  // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    let mut _16: isize;                  // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    let mut _19: &T;                     // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:52:9: 52:10
    let mut _20: &T;                     // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:52:9: 52:10
    let mut _23: &E;                     // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:53:9: 53:10
    let mut _24: &E;                     // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:53:9: 53:10
    let mut _25: &LocalResult<T, E>;     // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    let mut _26: &LocalResult<T, E>;     // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    let mut _27: &LocalResult<T, E>;     // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    let mut _28: &LocalResult<T, E>;     // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    let mut _29: &LocalResult<T, E>;     // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    let mut _30: &LocalResult<T, E>;     // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    let mut _31: &LocalResult<T, E>;     // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
        let _5: isize;                   // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
            let _17: &T;                 // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:52:9: 52:10
            let _18: &T;                 // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:52:9: 52:10
            let _21: &E;                 // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:53:9: 53:10
            let _22: &E;                 // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:53:9: 53:10
            scope 3 {
                debug __self_0 => _17;   // in scope 3 at ui/consts/const_constructor/const-construct-call.rs:52:9: 52:10
                debug __arg1_0 => _18;   // in scope 3 at ui/consts/const_constructor/const-construct-call.rs:52:9: 52:10
            }
            scope 4 {
                debug __self_0 => _21;   // in scope 4 at ui/consts/const_constructor/const-construct-call.rs:53:9: 53:10
                debug __arg1_0 => _22;   // in scope 4 at ui/consts/const_constructor/const-construct-call.rs:53:9: 53:10
            }
            scope 5 {
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
        _3 = discriminant((*_4));        // scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
        _6 = _2;                         // scope 1 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
        _5 = discriminant((*_6));        // scope 1 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
        _8 = _3;                         // scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
        _9 = _5;                         // scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
        _7 = Eq(move _8, move _9);       // scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
        goto -> bb3;                     // scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
        _13 = _2;                        // scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
        _11 = (move _12, move _13);      // scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
        _25 = deref_copy (_11.0: &LocalResult<T, E>); // scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
        _16 = discriminant((*_25));      // scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    }

    bb3: {
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:50:26: 50:26
    }

    bb4: {
        _26 = deref_copy (_11.1: &LocalResult<T, E>); // scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
        _14 = discriminant((*_26));      // scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
        switchInt(move _14) -> [0: bb7, otherwise: bb5]; // scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    }

    bb5: {
        unreachable;                     // scope 5 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    }

    bb6: {
        _27 = deref_copy (_11.1: &LocalResult<T, E>); // scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
        _15 = discriminant((*_27));      // scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
        switchInt(move _15) -> [1: bb8, otherwise: bb5]; // scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    }

    bb7: {
        _28 = deref_copy (_11.0: &LocalResult<T, E>); // scope 2 at ui/consts/const_constructor/const-construct-call.rs:52:9: 52:10
        _17 = &(((*_28) as _Ok).0: T);   // scope 2 at ui/consts/const_constructor/const-construct-call.rs:52:9: 52:10
        _29 = deref_copy (_11.1: &LocalResult<T, E>); // scope 2 at ui/consts/const_constructor/const-construct-call.rs:52:9: 52:10
        _18 = &(((*_29) as _Ok).0: T);   // scope 2 at ui/consts/const_constructor/const-construct-call.rs:52:9: 52:10
        _19 = _17;                       // scope 3 at ui/consts/const_constructor/const-construct-call.rs:52:9: 52:10
        _20 = _18;                       // scope 3 at ui/consts/const_constructor/const-construct-call.rs:52:9: 52:10
        _10 = <T as PartialEq>::eq(move _19, move _20) -> bb9; // scope 3 at ui/consts/const_constructor/const-construct-call.rs:52:9: 52:10
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:52:9: 52:10
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _30 = deref_copy (_11.0: &LocalResult<T, E>); // scope 2 at ui/consts/const_constructor/const-construct-call.rs:53:9: 53:10
        _21 = &(((*_30) as Err).0: E);   // scope 2 at ui/consts/const_constructor/const-construct-call.rs:53:9: 53:10
        _31 = deref_copy (_11.1: &LocalResult<T, E>); // scope 2 at ui/consts/const_constructor/const-construct-call.rs:53:9: 53:10
        _22 = &(((*_31) as Err).0: E);   // scope 2 at ui/consts/const_constructor/const-construct-call.rs:53:9: 53:10
        _23 = _21;                       // scope 4 at ui/consts/const_constructor/const-construct-call.rs:53:9: 53:10
        _24 = _22;                       // scope 4 at ui/consts/const_constructor/const-construct-call.rs:53:9: 53:10
        _10 = <E as PartialEq>::eq(move _23, move _24) -> bb9; // scope 4 at ui/consts/const_constructor/const-construct-call.rs:53:9: 53:10
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:53:9: 53:10
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a E, &'b E) -> bool {<E as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _0 = move _10;                   // scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
        goto -> bb3;                     // scope 2 at ui/consts/const_constructor/const-construct-call.rs:50:17: 50:26
    }
}

fn <impl at ui/consts/const_constructor/const-construct-call.rs:56:10: 56:15>::fmt(_1: &LocalAssertUnwindSafe<T>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:56:10: 56:15
    debug f => _2;                       // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:56:10: 56:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:56:10: 56:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:56:10: 56:15
    let mut _4: &str;                    // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:56:10: 56:15
    let _5: &str;                        // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:56:10: 56:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:57:33: 57:34
    let mut _7: &&T;                     // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:57:33: 57:34
    let _8: &&T;                         // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:57:33: 57:34
    let _9: &T;                          // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:57:33: 57:34

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:56:10: 56:15
        _5 = const "LocalAssertUnwindSafe"; // scope 0 at ui/consts/const_constructor/const-construct-call.rs:56:10: 56:15
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:56:10: 56:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/consts/const_constructor/const-construct-call.rs:56:10: 56:15
        _9 = &((*_1).0: T);              // scope 0 at ui/consts/const_constructor/const-construct-call.rs:57:33: 57:34
        _8 = &_9;                        // scope 0 at ui/consts/const_constructor/const-construct-call.rs:57:33: 57:34
        _7 = _8;                         // scope 0 at ui/consts/const_constructor/const-construct-call.rs:57:33: 57:34
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/consts/const_constructor/const-construct-call.rs:57:33: 57:34
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/consts/const_constructor/const-construct-call.rs:56:10: 56:15
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:56:10: 56:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:56:15: 56:15
    }
}

fn <impl at ui/consts/const_constructor/const-construct-call.rs:56:17: 56:26>::eq(_1: &LocalAssertUnwindSafe<T>, _2: &LocalAssertUnwindSafe<T>) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:56:17: 56:26
    debug other => _2;                   // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:56:17: 56:26
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:56:17: 56:26
    let mut _3: &T;                      // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:57:33: 57:34
    let mut _4: &T;                      // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:57:33: 57:34

    bb0: {
        _3 = &((*_1).0: T);              // scope 0 at ui/consts/const_constructor/const-construct-call.rs:57:33: 57:34
        _4 = &((*_2).0: T);              // scope 0 at ui/consts/const_constructor/const-construct-call.rs:57:33: 57:34
        _0 = <T as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/consts/const_constructor/const-construct-call.rs:57:33: 57:34
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:57:33: 57:34
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:56:26: 56:26
    }
}

fn call_local_constructors_in_local_vars() -> LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)> {
    let _1: fn(i32) -> LocalOption<i32> {LocalOption::<i32>::Some}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:62:9: 62:10
    let mut _5: fn(i32) -> LocalOption<i32> {LocalOption::<i32>::Some}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:65:13: 65:14
    let mut _7: fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:66:13: 66:14
    let mut _8: fn((LocalOption<i32>, LocalResult<i32, bool>)) -> LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)> {LocalAssertUnwindSafe::<(LocalOption<i32>, LocalResult<i32, bool>)>}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:67:13: 67:14
    let mut _9: (LocalOption<i32>, LocalResult<i32, bool>); // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:67:15: 67:21
    let mut _10: LocalOption<i32>;       // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:67:16: 67:17
    let mut _11: LocalResult<i32, bool>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:67:19: 67:20
    scope 1 {
        debug f => _1;                   // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:62:9: 62:10
        let _2: fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}; // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:63:9: 63:10
        scope 2 {
            debug g => _2;               // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:63:9: 63:10
            let _3: fn((LocalOption<i32>, LocalResult<i32, bool>)) -> LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)> {LocalAssertUnwindSafe::<(LocalOption<i32>, LocalResult<i32, bool>)>}; // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:64:9: 64:10
            scope 3 {
                debug h => _3;           // in scope 3 at ui/consts/const_constructor/const-construct-call.rs:64:9: 64:10
                let _4: LocalOption<i32>; // in scope 3 at ui/consts/const_constructor/const-construct-call.rs:65:9: 65:10
                scope 4 {
                    debug x => _4;       // in scope 4 at ui/consts/const_constructor/const-construct-call.rs:65:9: 65:10
                    let _6: LocalResult<i32, bool>; // in scope 4 at ui/consts/const_constructor/const-construct-call.rs:66:9: 66:10
                    scope 5 {
                        debug y => _6;   // in scope 5 at ui/consts/const_constructor/const-construct-call.rs:66:9: 66:10
                        let mut _0: LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>; // return place in scope 5 at ui/consts/const_constructor/const-construct-call.rs:67:9: 67:10
                        scope 6 {
                            debug z => _0; // in scope 6 at ui/consts/const_constructor/const-construct-call.rs:67:9: 67:10
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _4 = move _5(const 5_i32) -> bb1; // scope 3 at ui/consts/const_constructor/const-construct-call.rs:65:13: 65:17
    }

    bb1: {
        _6 = move _7(const false) -> bb2; // scope 4 at ui/consts/const_constructor/const-construct-call.rs:66:13: 66:21
    }

    bb2: {
        _10 = move _4;                   // scope 5 at ui/consts/const_constructor/const-construct-call.rs:67:16: 67:17
        _11 = move _6;                   // scope 5 at ui/consts/const_constructor/const-construct-call.rs:67:19: 67:20
        _9 = (move _10, move _11);       // scope 5 at ui/consts/const_constructor/const-construct-call.rs:67:15: 67:21
        _0 = move _8(move _9) -> bb3;    // scope 5 at ui/consts/const_constructor/const-construct-call.rs:67:13: 67:22
    }

    bb3: {
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:69:2: 69:2
    }
}

// MIR FOR CTFE
fn call_local_constructors_in_local_vars() -> LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)> {
    let mut _0: LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>; // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:61:53: 61:62
    let _1: fn(i32) -> LocalOption<i32> {LocalOption::<i32>::Some}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:62:9: 62:10
    let mut _5: fn(i32) -> LocalOption<i32> {LocalOption::<i32>::Some}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:65:13: 65:14
    let mut _7: fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:66:13: 66:14
    let mut _9: fn((LocalOption<i32>, LocalResult<i32, bool>)) -> LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)> {LocalAssertUnwindSafe::<(LocalOption<i32>, LocalResult<i32, bool>)>}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:67:13: 67:14
    let mut _10: (LocalOption<i32>, LocalResult<i32, bool>); // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:67:15: 67:21
    let mut _11: LocalOption<i32>;       // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:67:16: 67:17
    let mut _12: LocalResult<i32, bool>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:67:19: 67:20
    scope 1 {
        debug f => _1;                   // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:62:9: 62:10
        let _2: fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}; // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:63:9: 63:10
        scope 2 {
            debug g => _2;               // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:63:9: 63:10
            let _3: fn((LocalOption<i32>, LocalResult<i32, bool>)) -> LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)> {LocalAssertUnwindSafe::<(LocalOption<i32>, LocalResult<i32, bool>)>}; // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:64:9: 64:10
            scope 3 {
                debug h => _3;           // in scope 3 at ui/consts/const_constructor/const-construct-call.rs:64:9: 64:10
                let _4: LocalOption<i32>; // in scope 3 at ui/consts/const_constructor/const-construct-call.rs:65:9: 65:10
                scope 4 {
                    debug x => _4;       // in scope 4 at ui/consts/const_constructor/const-construct-call.rs:65:9: 65:10
                    let _6: LocalResult<i32, bool>; // in scope 4 at ui/consts/const_constructor/const-construct-call.rs:66:9: 66:10
                    scope 5 {
                        debug y => _6;   // in scope 5 at ui/consts/const_constructor/const-construct-call.rs:66:9: 66:10
                        let _8: LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>; // in scope 5 at ui/consts/const_constructor/const-construct-call.rs:67:9: 67:10
                        scope 6 {
                            debug z => _8; // in scope 6 at ui/consts/const_constructor/const-construct-call.rs:67:9: 67:10
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:62:9: 62:10
        _1 = LocalOption::<i32>::Some;   // scope 0 at ui/consts/const_constructor/const-construct-call.rs:62:13: 62:30
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:62:13: 62:30
                                         // + literal: Const { ty: fn(i32) -> LocalOption<i32> {LocalOption::<i32>::Some}, val: Value(<ZST>) }
        StorageLive(_2);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:63:9: 63:10
        _2 = LocalResult::<i32, bool>::Err; // scope 1 at ui/consts/const_constructor/const-construct-call.rs:63:13: 63:29
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:63:13: 63:29
                                         // + literal: Const { ty: fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}, val: Value(<ZST>) }
        StorageLive(_3);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:64:9: 64:10
        _3 = LocalAssertUnwindSafe::<(LocalOption<i32>, LocalResult<i32, bool>)>; // scope 2 at ui/consts/const_constructor/const-construct-call.rs:64:13: 64:34
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:64:13: 64:34
                                         // + literal: Const { ty: fn((LocalOption<i32>, LocalResult<i32, bool>)) -> LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)> {LocalAssertUnwindSafe::<(LocalOption<i32>, LocalResult<i32, bool>)>}, val: Value(<ZST>) }
        StorageLive(_4);                 // scope 3 at ui/consts/const_constructor/const-construct-call.rs:65:9: 65:10
        StorageLive(_5);                 // scope 3 at ui/consts/const_constructor/const-construct-call.rs:65:13: 65:14
        _5 = _1;                         // scope 3 at ui/consts/const_constructor/const-construct-call.rs:65:13: 65:14
        ConstEvalCounter;                // scope 3 at ui/consts/const_constructor/const-construct-call.rs:65:13: 65:17
        _4 = move _5(const 5_i32) -> bb1; // scope 3 at ui/consts/const_constructor/const-construct-call.rs:65:13: 65:17
    }

    bb1: {
        StorageDead(_5);                 // scope 3 at ui/consts/const_constructor/const-construct-call.rs:65:16: 65:17
        StorageLive(_6);                 // scope 4 at ui/consts/const_constructor/const-construct-call.rs:66:9: 66:10
        StorageLive(_7);                 // scope 4 at ui/consts/const_constructor/const-construct-call.rs:66:13: 66:14
        _7 = _2;                         // scope 4 at ui/consts/const_constructor/const-construct-call.rs:66:13: 66:14
        ConstEvalCounter;                // scope 4 at ui/consts/const_constructor/const-construct-call.rs:66:13: 66:21
        _6 = move _7(const false) -> bb2; // scope 4 at ui/consts/const_constructor/const-construct-call.rs:66:13: 66:21
    }

    bb2: {
        StorageDead(_7);                 // scope 4 at ui/consts/const_constructor/const-construct-call.rs:66:20: 66:21
        StorageLive(_8);                 // scope 5 at ui/consts/const_constructor/const-construct-call.rs:67:9: 67:10
        StorageLive(_9);                 // scope 5 at ui/consts/const_constructor/const-construct-call.rs:67:13: 67:14
        _9 = _3;                         // scope 5 at ui/consts/const_constructor/const-construct-call.rs:67:13: 67:14
        StorageLive(_10);                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:67:15: 67:21
        StorageLive(_11);                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:67:16: 67:17
        _11 = move _4;                   // scope 5 at ui/consts/const_constructor/const-construct-call.rs:67:16: 67:17
        StorageLive(_12);                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:67:19: 67:20
        _12 = move _6;                   // scope 5 at ui/consts/const_constructor/const-construct-call.rs:67:19: 67:20
        _10 = (move _11, move _12);      // scope 5 at ui/consts/const_constructor/const-construct-call.rs:67:15: 67:21
        StorageDead(_12);                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:67:20: 67:21
        StorageDead(_11);                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:67:20: 67:21
        ConstEvalCounter;                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:67:13: 67:22
        _8 = move _9(move _10) -> bb3;   // scope 5 at ui/consts/const_constructor/const-construct-call.rs:67:13: 67:22
    }

    bb3: {
        StorageDead(_10);                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:67:21: 67:22
        StorageDead(_9);                 // scope 5 at ui/consts/const_constructor/const-construct-call.rs:67:21: 67:22
        _0 = move _8;                    // scope 6 at ui/consts/const_constructor/const-construct-call.rs:68:5: 68:6
        StorageDead(_8);                 // scope 5 at ui/consts/const_constructor/const-construct-call.rs:69:1: 69:2
        StorageDead(_6);                 // scope 4 at ui/consts/const_constructor/const-construct-call.rs:69:1: 69:2
        StorageDead(_4);                 // scope 3 at ui/consts/const_constructor/const-construct-call.rs:69:1: 69:2
        StorageDead(_3);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:69:1: 69:2
        StorageDead(_2);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:69:1: 69:2
        StorageDead(_1);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:69:1: 69:2
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:69:2: 69:2
    }
}

const CALL_LOCAL_CONSTRUCTORS_IN_LOCAL_VARS: LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)> = {
    let mut _0: LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>; // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:71:46: 71:55
    let _1: fn(i32) -> LocalOption<i32> {LocalOption::<i32>::Some}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:72:9: 72:10
    let mut _5: fn(i32) -> LocalOption<i32> {LocalOption::<i32>::Some}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:75:13: 75:14
    let mut _7: fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:76:13: 76:14
    let mut _9: fn((LocalOption<i32>, LocalResult<i32, bool>)) -> LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)> {LocalAssertUnwindSafe::<(LocalOption<i32>, LocalResult<i32, bool>)>}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:77:13: 77:14
    let mut _10: (LocalOption<i32>, LocalResult<i32, bool>); // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:77:15: 77:21
    let mut _11: LocalOption<i32>;       // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:77:16: 77:17
    let mut _12: LocalResult<i32, bool>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:77:19: 77:20
    scope 1 {
        debug f => _1;                   // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:72:9: 72:10
        let _2: fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}; // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:73:9: 73:10
        scope 2 {
            debug g => _2;               // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:73:9: 73:10
            let _3: fn((LocalOption<i32>, LocalResult<i32, bool>)) -> LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)> {LocalAssertUnwindSafe::<(LocalOption<i32>, LocalResult<i32, bool>)>}; // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:74:9: 74:10
            scope 3 {
                debug h => _3;           // in scope 3 at ui/consts/const_constructor/const-construct-call.rs:74:9: 74:10
                let _4: LocalOption<i32>; // in scope 3 at ui/consts/const_constructor/const-construct-call.rs:75:9: 75:10
                scope 4 {
                    debug x => _4;       // in scope 4 at ui/consts/const_constructor/const-construct-call.rs:75:9: 75:10
                    let _6: LocalResult<i32, bool>; // in scope 4 at ui/consts/const_constructor/const-construct-call.rs:76:9: 76:10
                    scope 5 {
                        debug y => _6;   // in scope 5 at ui/consts/const_constructor/const-construct-call.rs:76:9: 76:10
                        let _8: LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>; // in scope 5 at ui/consts/const_constructor/const-construct-call.rs:77:9: 77:10
                        scope 6 {
                            debug z => _8; // in scope 6 at ui/consts/const_constructor/const-construct-call.rs:77:9: 77:10
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:72:9: 72:10
        _1 = LocalOption::<i32>::Some;   // scope 0 at ui/consts/const_constructor/const-construct-call.rs:72:13: 72:30
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:72:13: 72:30
                                         // + literal: Const { ty: fn(i32) -> LocalOption<i32> {LocalOption::<i32>::Some}, val: Value(<ZST>) }
        StorageLive(_2);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:73:9: 73:10
        _2 = LocalResult::<i32, bool>::Err; // scope 1 at ui/consts/const_constructor/const-construct-call.rs:73:13: 73:29
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:73:13: 73:29
                                         // + literal: Const { ty: fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}, val: Value(<ZST>) }
        StorageLive(_3);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:74:9: 74:10
        _3 = LocalAssertUnwindSafe::<(LocalOption<i32>, LocalResult<i32, bool>)>; // scope 2 at ui/consts/const_constructor/const-construct-call.rs:74:13: 74:34
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:74:13: 74:34
                                         // + literal: Const { ty: fn((LocalOption<i32>, LocalResult<i32, bool>)) -> LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)> {LocalAssertUnwindSafe::<(LocalOption<i32>, LocalResult<i32, bool>)>}, val: Value(<ZST>) }
        StorageLive(_4);                 // scope 3 at ui/consts/const_constructor/const-construct-call.rs:75:9: 75:10
        StorageLive(_5);                 // scope 3 at ui/consts/const_constructor/const-construct-call.rs:75:13: 75:14
        _5 = _1;                         // scope 3 at ui/consts/const_constructor/const-construct-call.rs:75:13: 75:14
        ConstEvalCounter;                // scope 3 at ui/consts/const_constructor/const-construct-call.rs:75:13: 75:17
        _4 = move _5(const 5_i32) -> bb1; // scope 3 at ui/consts/const_constructor/const-construct-call.rs:75:13: 75:17
    }

    bb1: {
        StorageDead(_5);                 // scope 3 at ui/consts/const_constructor/const-construct-call.rs:75:16: 75:17
        StorageLive(_6);                 // scope 4 at ui/consts/const_constructor/const-construct-call.rs:76:9: 76:10
        StorageLive(_7);                 // scope 4 at ui/consts/const_constructor/const-construct-call.rs:76:13: 76:14
        _7 = _2;                         // scope 4 at ui/consts/const_constructor/const-construct-call.rs:76:13: 76:14
        ConstEvalCounter;                // scope 4 at ui/consts/const_constructor/const-construct-call.rs:76:13: 76:21
        _6 = move _7(const false) -> bb2; // scope 4 at ui/consts/const_constructor/const-construct-call.rs:76:13: 76:21
    }

    bb2: {
        StorageDead(_7);                 // scope 4 at ui/consts/const_constructor/const-construct-call.rs:76:20: 76:21
        StorageLive(_8);                 // scope 5 at ui/consts/const_constructor/const-construct-call.rs:77:9: 77:10
        StorageLive(_9);                 // scope 5 at ui/consts/const_constructor/const-construct-call.rs:77:13: 77:14
        _9 = _3;                         // scope 5 at ui/consts/const_constructor/const-construct-call.rs:77:13: 77:14
        StorageLive(_10);                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:77:15: 77:21
        StorageLive(_11);                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:77:16: 77:17
        _11 = move _4;                   // scope 5 at ui/consts/const_constructor/const-construct-call.rs:77:16: 77:17
        StorageLive(_12);                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:77:19: 77:20
        _12 = move _6;                   // scope 5 at ui/consts/const_constructor/const-construct-call.rs:77:19: 77:20
        _10 = (move _11, move _12);      // scope 5 at ui/consts/const_constructor/const-construct-call.rs:77:15: 77:21
        StorageDead(_12);                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:77:20: 77:21
        StorageDead(_11);                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:77:20: 77:21
        ConstEvalCounter;                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:77:13: 77:22
        _8 = move _9(move _10) -> bb3;   // scope 5 at ui/consts/const_constructor/const-construct-call.rs:77:13: 77:22
    }

    bb3: {
        StorageDead(_10);                // scope 5 at ui/consts/const_constructor/const-construct-call.rs:77:21: 77:22
        StorageDead(_9);                 // scope 5 at ui/consts/const_constructor/const-construct-call.rs:77:21: 77:22
        _0 = move _8;                    // scope 6 at ui/consts/const_constructor/const-construct-call.rs:78:5: 78:6
        StorageDead(_8);                 // scope 5 at ui/consts/const_constructor/const-construct-call.rs:79:1: 79:2
        StorageDead(_6);                 // scope 4 at ui/consts/const_constructor/const-construct-call.rs:79:1: 79:2
        StorageDead(_4);                 // scope 3 at ui/consts/const_constructor/const-construct-call.rs:79:1: 79:2
        StorageDead(_3);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:79:1: 79:2
        StorageDead(_2);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:79:1: 79:2
        StorageDead(_1);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:79:1: 79:2
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:71:1: 79:3
    }
}

fn call_local_constructors_in_temps() -> LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)> {
    let _1: LocalOption<i32>;            // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:82:9: 82:10
    let mut _2: fn(i32) -> LocalOption<i32> {LocalOption::<i32>::Some}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:82:13: 82:34
    let mut _4: fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:83:13: 83:33
    let mut _5: fn((LocalOption<i32>, LocalResult<i32, bool>)) -> LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)> {LocalAssertUnwindSafe::<(LocalOption<i32>, LocalResult<i32, bool>)>}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:84:13: 84:39
    let mut _6: (LocalOption<i32>, LocalResult<i32, bool>); // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:84:40: 84:46
    let mut _7: LocalOption<i32>;        // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:84:41: 84:42
    let mut _8: LocalResult<i32, bool>;  // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:84:44: 84:45
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:82:9: 82:10
        let _3: LocalResult<i32, bool>;  // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:83:9: 83:10
        scope 2 {
            debug y => _3;               // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:83:9: 83:10
            let mut _0: LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>; // return place in scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:9: 84:10
            scope 3 {
                debug z => _0;           // in scope 3 at ui/consts/const_constructor/const-construct-call.rs:84:9: 84:10
            }
        }
    }

    bb0: {
        _1 = move _2(const 5_i32) -> bb1; // scope 0 at ui/consts/const_constructor/const-construct-call.rs:82:13: 82:37
    }

    bb1: {
        _3 = move _4(const false) -> bb2; // scope 1 at ui/consts/const_constructor/const-construct-call.rs:83:13: 83:40
    }

    bb2: {
        _7 = move _1;                    // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:41: 84:42
        _8 = move _3;                    // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:44: 84:45
        _6 = (move _7, move _8);         // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:40: 84:46
        _0 = move _5(move _6) -> bb3;    // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:13: 84:47
    }

    bb3: {
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:86:2: 86:2
    }
}

promoted[0] in call_local_constructors_in_temps: &fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err} = {
    let mut _0: &fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}; // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:83:15: 83:32
    let mut _1: fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:83:16: 83:32

    bb0: {
        _1 = LocalResult::<i32, bool>::Err; // scope 0 at ui/consts/const_constructor/const-construct-call.rs:83:16: 83:32
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:83:16: 83:32
                                         // + literal: Const { ty: fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}, val: Value(<ZST>) }
        _0 = &_1;                        // scope 0 at ui/consts/const_constructor/const-construct-call.rs:83:15: 83:32
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:83:15: 83:32
    }
}

// MIR FOR CTFE
fn call_local_constructors_in_temps() -> LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)> {
    let mut _0: LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>; // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:81:48: 81:57
    let _1: LocalOption<i32>;            // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:82:9: 82:10
    let mut _2: fn(i32) -> LocalOption<i32> {LocalOption::<i32>::Some}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:82:13: 82:34
    let mut _4: fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:83:13: 83:33
    let mut _5: &fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:83:15: 83:32
    let _6: fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:83:16: 83:32
    let mut _8: fn((LocalOption<i32>, LocalResult<i32, bool>)) -> LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)> {LocalAssertUnwindSafe::<(LocalOption<i32>, LocalResult<i32, bool>)>}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:84:13: 84:39
    let mut _9: [fn((LocalOption<i32>, LocalResult<i32, bool>)) -> LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)> {LocalAssertUnwindSafe::<(LocalOption<i32>, LocalResult<i32, bool>)>}; 1]; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:84:13: 84:36
    let _10: usize;                      // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:84:37: 84:38
    let mut _11: usize;                  // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:84:13: 84:39
    let mut _12: bool;                   // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:84:13: 84:39
    let mut _13: (LocalOption<i32>, LocalResult<i32, bool>); // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:84:40: 84:46
    let mut _14: LocalOption<i32>;       // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:84:41: 84:42
    let mut _15: LocalResult<i32, bool>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:84:44: 84:45
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:82:9: 82:10
        let _3: LocalResult<i32, bool>;  // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:83:9: 83:10
        let mut _16: &fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}; // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:83:15: 83:32
        scope 2 {
            debug y => _3;               // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:83:9: 83:10
            let _7: LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>; // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:9: 84:10
            scope 3 {
                debug z => _7;           // in scope 3 at ui/consts/const_constructor/const-construct-call.rs:84:9: 84:10
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:82:9: 82:10
        StorageLive(_2);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:82:13: 82:34
        _2 = LocalOption::<i32>::Some;   // scope 0 at ui/consts/const_constructor/const-construct-call.rs:82:15: 82:32
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:82:15: 82:32
                                         // + literal: Const { ty: fn(i32) -> LocalOption<i32> {LocalOption::<i32>::Some}, val: Value(<ZST>) }
        ConstEvalCounter;                // scope 0 at ui/consts/const_constructor/const-construct-call.rs:82:13: 82:37
        _1 = move _2(const 5_i32) -> bb1; // scope 0 at ui/consts/const_constructor/const-construct-call.rs:82:13: 82:37
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:82:36: 82:37
        StorageLive(_3);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:83:9: 83:10
        StorageLive(_4);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:83:13: 83:33
        StorageLive(_5);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:83:15: 83:32
        _16 = const _;                   // scope 1 at ui/consts/const_constructor/const-construct-call.rs:83:15: 83:32
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:83:15: 83:32
                                         // + literal: Const { ty: &fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}, val: Unevaluated(call_local_constructors_in_temps, [], Some(promoted[0])) }
        _5 = &(*_16);                    // scope 1 at ui/consts/const_constructor/const-construct-call.rs:83:15: 83:32
        _4 = (*_5);                      // scope 1 at ui/consts/const_constructor/const-construct-call.rs:83:13: 83:33
        ConstEvalCounter;                // scope 1 at ui/consts/const_constructor/const-construct-call.rs:83:13: 83:40
        _3 = move _4(const false) -> bb2; // scope 1 at ui/consts/const_constructor/const-construct-call.rs:83:13: 83:40
    }

    bb2: {
        StorageDead(_4);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:83:39: 83:40
        StorageDead(_5);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:83:40: 83:41
        StorageLive(_7);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:9: 84:10
        StorageLive(_8);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:13: 84:39
        StorageLive(_9);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:13: 84:36
        _9 = [LocalAssertUnwindSafe::<(LocalOption<i32>, LocalResult<i32, bool>)>]; // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:13: 84:36
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:84:14: 84:35
                                         // + literal: Const { ty: fn((LocalOption<i32>, LocalResult<i32, bool>)) -> LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)> {LocalAssertUnwindSafe::<(LocalOption<i32>, LocalResult<i32, bool>)>}, val: Value(<ZST>) }
        StorageLive(_10);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:37: 84:38
        _10 = const 0_usize;             // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:37: 84:38
        _11 = Len(_9);                   // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:13: 84:39
        _12 = Lt(_10, _11);              // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:13: 84:39
        assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> bb3; // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:13: 84:39
    }

    bb3: {
        _8 = _9[_10];                    // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:13: 84:39
        StorageLive(_13);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:40: 84:46
        StorageLive(_14);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:41: 84:42
        _14 = move _1;                   // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:41: 84:42
        StorageLive(_15);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:44: 84:45
        _15 = move _3;                   // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:44: 84:45
        _13 = (move _14, move _15);      // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:40: 84:46
        StorageDead(_15);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:45: 84:46
        StorageDead(_14);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:45: 84:46
        ConstEvalCounter;                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:13: 84:47
        _7 = move _8(move _13) -> bb4;   // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:13: 84:47
    }

    bb4: {
        StorageDead(_13);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:46: 84:47
        StorageDead(_8);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:46: 84:47
        StorageDead(_10);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:47: 84:48
        StorageDead(_9);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:84:47: 84:48
        _0 = move _7;                    // scope 3 at ui/consts/const_constructor/const-construct-call.rs:85:5: 85:6
        StorageDead(_7);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:86:1: 86:2
        StorageDead(_3);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:86:1: 86:2
        StorageDead(_1);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:86:1: 86:2
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:86:2: 86:2
    }
}

const CALL_LOCAL_CONSTRUCTORS_IN_TEMPS: LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)> = {
    let mut _0: LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>; // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:88:41: 88:50
    let _1: LocalOption<i32>;            // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:89:9: 89:10
    let mut _2: fn(i32) -> LocalOption<i32> {LocalOption::<i32>::Some}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:89:13: 89:34
    let mut _4: fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:90:13: 90:33
    let mut _5: &fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:90:15: 90:32
    let _6: fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:90:16: 90:32
    let mut _8: fn((LocalOption<i32>, LocalResult<i32, bool>)) -> LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)> {LocalAssertUnwindSafe::<(LocalOption<i32>, LocalResult<i32, bool>)>}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:91:13: 91:39
    let mut _9: [fn((LocalOption<i32>, LocalResult<i32, bool>)) -> LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)> {LocalAssertUnwindSafe::<(LocalOption<i32>, LocalResult<i32, bool>)>}; 1]; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:91:13: 91:36
    let _10: usize;                      // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:91:37: 91:38
    let mut _11: usize;                  // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:91:13: 91:39
    let mut _12: bool;                   // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:91:13: 91:39
    let mut _13: (LocalOption<i32>, LocalResult<i32, bool>); // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:91:40: 91:46
    let mut _14: LocalOption<i32>;       // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:91:41: 91:42
    let mut _15: LocalResult<i32, bool>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:91:44: 91:45
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:89:9: 89:10
        let _3: LocalResult<i32, bool>;  // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:90:9: 90:10
        let mut _16: &fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}; // in scope 1 at ui/consts/const_constructor/const-construct-call.rs:90:15: 90:32
        scope 2 {
            debug y => _3;               // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:90:9: 90:10
            let _7: LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>; // in scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:9: 91:10
            scope 3 {
                debug z => _7;           // in scope 3 at ui/consts/const_constructor/const-construct-call.rs:91:9: 91:10
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:89:9: 89:10
        StorageLive(_2);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:89:13: 89:34
        _2 = LocalOption::<i32>::Some;   // scope 0 at ui/consts/const_constructor/const-construct-call.rs:89:15: 89:32
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:89:15: 89:32
                                         // + literal: Const { ty: fn(i32) -> LocalOption<i32> {LocalOption::<i32>::Some}, val: Value(<ZST>) }
        ConstEvalCounter;                // scope 0 at ui/consts/const_constructor/const-construct-call.rs:89:13: 89:37
        _1 = move _2(const 5_i32) -> bb1; // scope 0 at ui/consts/const_constructor/const-construct-call.rs:89:13: 89:37
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:89:36: 89:37
        StorageLive(_3);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:90:9: 90:10
        StorageLive(_4);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:90:13: 90:33
        StorageLive(_5);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:90:15: 90:32
        _16 = const _;                   // scope 1 at ui/consts/const_constructor/const-construct-call.rs:90:15: 90:32
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:90:15: 90:32
                                         // + literal: Const { ty: &fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}, val: Unevaluated(CALL_LOCAL_CONSTRUCTORS_IN_TEMPS, [], Some(promoted[0])) }
        _5 = &(*_16);                    // scope 1 at ui/consts/const_constructor/const-construct-call.rs:90:15: 90:32
        _4 = (*_5);                      // scope 1 at ui/consts/const_constructor/const-construct-call.rs:90:13: 90:33
        ConstEvalCounter;                // scope 1 at ui/consts/const_constructor/const-construct-call.rs:90:13: 90:40
        _3 = move _4(const false) -> bb2; // scope 1 at ui/consts/const_constructor/const-construct-call.rs:90:13: 90:40
    }

    bb2: {
        StorageDead(_4);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:90:39: 90:40
        StorageDead(_5);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:90:40: 90:41
        StorageLive(_7);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:9: 91:10
        StorageLive(_8);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:13: 91:39
        StorageLive(_9);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:13: 91:36
        _9 = [LocalAssertUnwindSafe::<(LocalOption<i32>, LocalResult<i32, bool>)>]; // scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:13: 91:36
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:91:14: 91:35
                                         // + literal: Const { ty: fn((LocalOption<i32>, LocalResult<i32, bool>)) -> LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)> {LocalAssertUnwindSafe::<(LocalOption<i32>, LocalResult<i32, bool>)>}, val: Value(<ZST>) }
        StorageLive(_10);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:37: 91:38
        _10 = const 0_usize;             // scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:37: 91:38
        _11 = Len(_9);                   // scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:13: 91:39
        _12 = Lt(_10, _11);              // scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:13: 91:39
        assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> bb3; // scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:13: 91:39
    }

    bb3: {
        _8 = _9[_10];                    // scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:13: 91:39
        StorageLive(_13);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:40: 91:46
        StorageLive(_14);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:41: 91:42
        _14 = move _1;                   // scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:41: 91:42
        StorageLive(_15);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:44: 91:45
        _15 = move _3;                   // scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:44: 91:45
        _13 = (move _14, move _15);      // scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:40: 91:46
        StorageDead(_15);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:45: 91:46
        StorageDead(_14);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:45: 91:46
        ConstEvalCounter;                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:13: 91:47
        _7 = move _8(move _13) -> bb4;   // scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:13: 91:47
    }

    bb4: {
        StorageDead(_13);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:46: 91:47
        StorageDead(_8);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:46: 91:47
        StorageDead(_10);                // scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:47: 91:48
        StorageDead(_9);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:91:47: 91:48
        _0 = move _7;                    // scope 3 at ui/consts/const_constructor/const-construct-call.rs:92:5: 92:6
        StorageDead(_7);                 // scope 2 at ui/consts/const_constructor/const-construct-call.rs:93:1: 93:2
        StorageDead(_3);                 // scope 1 at ui/consts/const_constructor/const-construct-call.rs:93:1: 93:2
        StorageDead(_1);                 // scope 0 at ui/consts/const_constructor/const-construct-call.rs:93:1: 93:2
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:88:1: 93:3
    }
}

promoted[0] in CALL_LOCAL_CONSTRUCTORS_IN_TEMPS: &fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err} = {
    let mut _0: &fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}; // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:90:15: 90:32
    let mut _1: fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:90:16: 90:32

    bb0: {
        _1 = LocalResult::<i32, bool>::Err; // scope 0 at ui/consts/const_constructor/const-construct-call.rs:90:16: 90:32
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:90:16: 90:32
                                         // + literal: Const { ty: fn(bool) -> LocalResult<i32, bool> {LocalResult::<i32, bool>::Err}, val: Value(<ZST>) }
        _0 = &_1;                        // scope 0 at ui/consts/const_constructor/const-construct-call.rs:90:15: 90:32
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:90:15: 90:32
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:95:11: 95:11
    let mut _1: (&((std::option::Option<i32>, std::result::Result<i32, bool>), (std::option::Option<i32>, std::result::Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>), &((std::option::Option<i32>, std::result::Result<i32, bool>), (std::option::Option<i32>, std::result::Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &((std::option::Option<i32>, std::result::Result<i32, bool>), (std::option::Option<i32>, std::result::Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: ((std::option::Option<i32>, std::result::Result<i32, bool>), (std::option::Option<i32>, std::result::Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>); // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:97:9: 102:10
    let mut _4: (std::option::Option<i32>, std::result::Result<i32, bool>); // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:98:13: 98:57
    let mut _5: std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:98:13: 98:55
    let mut _6: (std::option::Option<i32>, std::result::Result<i32, bool>); // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:99:13: 99:52
    let mut _7: std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:99:13: 99:50
    let mut _8: LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:100:13: 100:52
    let mut _9: LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:101:13: 101:47
    let mut _10: &((std::option::Option<i32>, std::result::Result<i32, bool>), (std::option::Option<i32>, std::result::Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _11: &((std::option::Option<i32>, std::result::Result<i32, bool>), (std::option::Option<i32>, std::result::Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _12: &((std::option::Option<i32>, std::result::Result<i32, bool>), (std::option::Option<i32>, std::result::Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _15: &((std::option::Option<i32>, std::result::Result<i32, bool>), (std::option::Option<i32>, std::result::Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _16: &((std::option::Option<i32>, std::result::Result<i32, bool>), (std::option::Option<i32>, std::result::Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _18: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _19: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _20: &((std::option::Option<i32>, std::result::Result<i32, bool>), (std::option::Option<i32>, std::result::Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _21: &((std::option::Option<i32>, std::result::Result<i32, bool>), (std::option::Option<i32>, std::result::Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _22: &((std::option::Option<i32>, std::result::Result<i32, bool>), (std::option::Option<i32>, std::result::Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _23: &((std::option::Option<i32>, std::result::Result<i32, bool>), (std::option::Option<i32>, std::result::Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _25: &((std::option::Option<i32>, std::result::Result<i32, bool>), (std::option::Option<i32>, std::result::Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _11;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _12;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _17: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _17;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _5 = call_external_constructors_in_local_vars() -> bb1; // scope 0 at ui/consts/const_constructor/const-construct-call.rs:98:13: 98:55
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:98:13: 98:53
                                         // + literal: Const { ty: fn() -> AssertUnwindSafe<(Option<i32>, Result<i32, bool>)> {call_external_constructors_in_local_vars}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = (_5.0: (std::option::Option<i32>, std::result::Result<i32, bool>)); // scope 0 at ui/consts/const_constructor/const-construct-call.rs:98:13: 98:57
        _7 = call_external_constructors_in_temps() -> bb2; // scope 0 at ui/consts/const_constructor/const-construct-call.rs:99:13: 99:50
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:99:13: 99:48
                                         // + literal: Const { ty: fn() -> AssertUnwindSafe<(Option<i32>, Result<i32, bool>)> {call_external_constructors_in_temps}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = (_7.0: (std::option::Option<i32>, std::result::Result<i32, bool>)); // scope 0 at ui/consts/const_constructor/const-construct-call.rs:99:13: 99:52
        _8 = call_local_constructors_in_local_vars() -> bb3; // scope 0 at ui/consts/const_constructor/const-construct-call.rs:100:13: 100:52
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:100:13: 100:50
                                         // + literal: Const { ty: fn() -> LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)> {call_local_constructors_in_local_vars}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = call_local_constructors_in_temps() -> bb4; // scope 0 at ui/consts/const_constructor/const-construct-call.rs:101:13: 101:47
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:101:13: 101:45
                                         // + literal: Const { ty: fn() -> LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)> {call_local_constructors_in_temps}, val: Value(<ZST>) }
    }

    bb4: {
        _3 = (move _4, move _6, move _8, move _9); // scope 0 at ui/consts/const_constructor/const-construct-call.rs:97:9: 102:10
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _25 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &((Option<i32>, Result<i32, bool>), (Option<i32>, Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>), val: Unevaluated(main, [], Some(promoted[0])) }
        _10 = _25;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _10);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _11 = (_1.0: &((std::option::Option<i32>, std::result::Result<i32, bool>), (std::option::Option<i32>, std::result::Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _12 = (_1.1: &((std::option::Option<i32>, std::result::Result<i32, bool>), (std::option::Option<i32>, std::result::Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _15 = _11;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _16 = _12;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _14 = <((Option<i32>, Result<i32, bool>), (Option<i32>, Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>) as PartialEq>::eq(move _15, move _16) -> bb5; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ((Option<i32>, Result<i32, bool>), (Option<i32>, Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>), &'b ((Option<i32>, Result<i32, bool>), (Option<i32>, Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>)) -> bool {<((Option<i32>, Result<i32, bool>), (Option<i32>, Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = Not(move _14);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _13) -> [0: bb7, otherwise: bb6]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _17 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = _11;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _21;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _12;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = _23;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _18 = core::panicking::assert_failed::<((Option<i32>, Result<i32, bool>), (Option<i32>, Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>), ((Option<i32>, Result<i32, bool>), (Option<i32>, Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>)>(move _19, move _20, move _22, move _24); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a ((Option<i32>, Result<i32, bool>), (Option<i32>, Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>), &'b ((Option<i32>, Result<i32, bool>), (Option<i32>, Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<((Option<i32>, Result<i32, bool>), (Option<i32>, Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>), ((Option<i32>, Result<i32, bool>), (Option<i32>, Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>)>}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:110:2: 110:2
    }
}

promoted[0] in main: &((Option<i32>, Result<i32, bool>), (Option<i32>, Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>) = {
    let mut _0: &((std::option::Option<i32>, std::result::Result<i32, bool>), (std::option::Option<i32>, std::result::Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>); // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: ((std::option::Option<i32>, std::result::Result<i32, bool>), (std::option::Option<i32>, std::result::Result<i32, bool>), LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>); // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:103:9: 108:10
    let mut _2: (std::option::Option<i32>, std::result::Result<i32, bool>); // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:104:13: 104:55
    let mut _3: std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:104:13: 104:53
    let mut _4: (std::option::Option<i32>, std::result::Result<i32, bool>); // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:105:13: 105:50
    let mut _5: std::panic::AssertUnwindSafe<(std::option::Option<i32>, std::result::Result<i32, bool>)>; // in scope 0 at ui/consts/const_constructor/const-construct-call.rs:105:13: 105:48

    bb0: {
        _3 = const _;                    // scope 0 at ui/consts/const_constructor/const-construct-call.rs:104:13: 104:53
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:104:13: 104:53
                                         // + literal: Const { ty: AssertUnwindSafe<(Option<i32>, Result<i32, bool>)>, val: Unevaluated(CALL_EXTERNAL_CONSTRUCTORS_IN_LOCAL_VARS, [], None) }
        _2 = (_3.0: (std::option::Option<i32>, std::result::Result<i32, bool>)); // scope 0 at ui/consts/const_constructor/const-construct-call.rs:104:13: 104:55
        _5 = const _;                    // scope 0 at ui/consts/const_constructor/const-construct-call.rs:105:13: 105:48
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:105:13: 105:48
                                         // + literal: Const { ty: AssertUnwindSafe<(Option<i32>, Result<i32, bool>)>, val: Unevaluated(CALL_EXTERNAL_CONSTRUCTORS_IN_TEMPS, [], None) }
        _4 = (_5.0: (std::option::Option<i32>, std::result::Result<i32, bool>)); // scope 0 at ui/consts/const_constructor/const-construct-call.rs:105:13: 105:50
        _1 = (move _2, move _4, const _, const _); // scope 0 at ui/consts/const_constructor/const-construct-call.rs:103:9: 108:10
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:106:13: 106:50
                                         // + literal: Const { ty: LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, val: Unevaluated(CALL_LOCAL_CONSTRUCTORS_IN_LOCAL_VARS, [], None) }
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const-construct-call.rs:107:13: 107:45
                                         // + literal: Const { ty: LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>, val: Unevaluated(CALL_LOCAL_CONSTRUCTORS_IN_TEMPS, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn LocalOption::Some(_1: T) -> LocalOption<T> {
    let mut _0: LocalOption<T>;          // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:46:5: 46:9

    bb0: {
        _0 = LocalOption::<T>::Some(move _1); // scope 0 at ui/consts/const_constructor/const-construct-call.rs:46:5: 46:9
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:46:5: 46:9
    }
}

// MIR FOR CTFE
fn LocalOption::Some(_1: T) -> LocalOption<T> {
    let mut _0: LocalOption<T>;          // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:46:5: 46:9

    bb0: {
        _0 = LocalOption::<T>::Some(move _1); // scope 0 at ui/consts/const_constructor/const-construct-call.rs:46:5: 46:9
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:46:5: 46:9
    }
}

fn LocalResult::_Ok(_1: T) -> LocalResult<T, E> {
    let mut _0: LocalResult<T, E>;       // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:52:5: 52:8

    bb0: {
        _0 = LocalResult::<T, E>::_Ok(move _1); // scope 0 at ui/consts/const_constructor/const-construct-call.rs:52:5: 52:8
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:52:5: 52:8
    }
}

// MIR FOR CTFE
fn LocalResult::_Ok(_1: T) -> LocalResult<T, E> {
    let mut _0: LocalResult<T, E>;       // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:52:5: 52:8

    bb0: {
        _0 = LocalResult::<T, E>::_Ok(move _1); // scope 0 at ui/consts/const_constructor/const-construct-call.rs:52:5: 52:8
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:52:5: 52:8
    }
}

fn LocalResult::Err(_1: E) -> LocalResult<T, E> {
    let mut _0: LocalResult<T, E>;       // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:53:5: 53:8

    bb0: {
        _0 = LocalResult::<T, E>::Err(move _1); // scope 0 at ui/consts/const_constructor/const-construct-call.rs:53:5: 53:8
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:53:5: 53:8
    }
}

// MIR FOR CTFE
fn LocalResult::Err(_1: E) -> LocalResult<T, E> {
    let mut _0: LocalResult<T, E>;       // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:53:5: 53:8

    bb0: {
        _0 = LocalResult::<T, E>::Err(move _1); // scope 0 at ui/consts/const_constructor/const-construct-call.rs:53:5: 53:8
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:53:5: 53:8
    }
}

fn LocalAssertUnwindSafe(_1: T) -> LocalAssertUnwindSafe<T> {
    let mut _0: LocalAssertUnwindSafe<T>; // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:57:1: 57:32

    bb0: {
        _0 = LocalAssertUnwindSafe::<T>(move _1); // scope 0 at ui/consts/const_constructor/const-construct-call.rs:57:1: 57:32
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:57:1: 57:32
    }
}

// MIR FOR CTFE
fn LocalAssertUnwindSafe(_1: T) -> LocalAssertUnwindSafe<T> {
    let mut _0: LocalAssertUnwindSafe<T>; // return place in scope 0 at ui/consts/const_constructor/const-construct-call.rs:57:1: 57:32

    bb0: {
        _0 = LocalAssertUnwindSafe::<T>(move _1); // scope 0 at ui/consts/const_constructor/const-construct-call.rs:57:1: 57:32
        return;                          // scope 0 at ui/consts/const_constructor/const-construct-call.rs:57:1: 57:32
    }
}
