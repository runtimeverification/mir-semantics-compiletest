// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19>::eq(_1: &E, _2: &E) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    debug other => _2;                   // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    let _3: isize;                       // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    let mut _4: &E;                      // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    let mut _6: &E;                      // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    let mut _7: bool;                    // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    let mut _8: isize;                   // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    let mut _9: isize;                   // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    let mut _10: bool;                   // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    let mut _11: (&E, &E);               // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    let mut _12: &E;                     // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    let mut _13: &E;                     // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    let mut _14: isize;                  // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    let mut _15: isize;                  // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    let mut _16: isize;                  // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    let mut _19: i32;                    // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:9:7: 9:10
    let mut _20: i32;                    // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:9:7: 9:10
    let mut _23: usize;                  // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:10:7: 10:12
    let mut _24: usize;                  // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:10:7: 10:12
    let mut _25: &E;                     // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    let mut _26: &E;                     // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    let mut _27: &E;                     // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    let mut _28: &E;                     // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    let mut _29: &E;                     // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    let mut _30: &E;                     // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    let mut _31: &E;                     // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
        let _5: isize;                   // in scope 1 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
            let _17: &i32;               // in scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:9:7: 9:10
            let _18: &i32;               // in scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:9:7: 9:10
            let _21: &usize;             // in scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:10:7: 10:12
            let _22: &usize;             // in scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:10:7: 10:12
            scope 3 {
                debug __self_0 => _17;   // in scope 3 at ui/consts/const_constructor/const_constructor_qpath.rs:9:7: 9:10
                debug __arg1_0 => _18;   // in scope 3 at ui/consts/const_constructor/const_constructor_qpath.rs:9:7: 9:10
            }
            scope 4 {
                debug __self_0 => _21;   // in scope 4 at ui/consts/const_constructor/const_constructor_qpath.rs:10:7: 10:12
                debug __arg1_0 => _22;   // in scope 4 at ui/consts/const_constructor/const_constructor_qpath.rs:10:7: 10:12
            }
            scope 5 {
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
        _3 = discriminant((*_4));        // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
        _6 = _2;                         // scope 1 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
        _5 = discriminant((*_6));        // scope 1 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
        _8 = _3;                         // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
        _9 = _5;                         // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
        _7 = Eq(move _8, move _9);       // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
        goto -> bb3;                     // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
        _13 = _2;                        // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
        _11 = (move _12, move _13);      // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
        _25 = deref_copy (_11.0: &E);    // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
        _16 = discriminant((*_25));      // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb10]; // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    }

    bb3: {
        return;                          // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:7:19: 7:19
    }

    bb4: {
        _26 = deref_copy (_11.1: &E);    // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
        _14 = discriminant((*_26));      // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
        switchInt(move _14) -> [0: bb7, otherwise: bb5]; // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    }

    bb5: {
        unreachable;                     // scope 5 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    }

    bb6: {
        _27 = deref_copy (_11.1: &E);    // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
        _15 = discriminant((*_27));      // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
        switchInt(move _15) -> [1: bb8, otherwise: bb5]; // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    }

    bb7: {
        _28 = deref_copy (_11.0: &E);    // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:9:7: 9:10
        _17 = &(((*_28) as V).0: i32);   // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:9:7: 9:10
        _29 = deref_copy (_11.1: &E);    // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:9:7: 9:10
        _18 = &(((*_29) as V).0: i32);   // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:9:7: 9:10
        _19 = (*_17);                    // scope 3 at ui/consts/const_constructor/const_constructor_qpath.rs:9:7: 9:10
        _20 = (*_18);                    // scope 3 at ui/consts/const_constructor/const_constructor_qpath.rs:9:7: 9:10
        _10 = Eq(move _19, move _20);    // scope 3 at ui/consts/const_constructor/const_constructor_qpath.rs:9:7: 9:10
        goto -> bb9;                     // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:7:18: 7:19
    }

    bb8: {
        _30 = deref_copy (_11.0: &E);    // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:10:7: 10:12
        _21 = &(((*_30) as W).0: usize); // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:10:7: 10:12
        _31 = deref_copy (_11.1: &E);    // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:10:7: 10:12
        _22 = &(((*_31) as W).0: usize); // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:10:7: 10:12
        _23 = (*_21);                    // scope 4 at ui/consts/const_constructor/const_constructor_qpath.rs:10:7: 10:12
        _24 = (*_22);                    // scope 4 at ui/consts/const_constructor/const_constructor_qpath.rs:10:7: 10:12
        _10 = Eq(move _23, move _24);    // scope 4 at ui/consts/const_constructor/const_constructor_qpath.rs:10:7: 10:12
        goto -> bb9;                     // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:7:18: 7:19
    }

    bb9: {
        _0 = move _10;                   // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
        goto -> bb3;                     // scope 2 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    }

    bb10: {
        unreachable;                     // scope 5 at ui/consts/const_constructor/const_constructor_qpath.rs:7:10: 7:19
    }
}

const <impl at ui/consts/const_constructor/const_constructor_qpath.rs:13:1: 13:24>::DEFAULT: E = {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:14:20: 14:24

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:14:27: 14:38
        _0 = E::V(const 23_i32) -> bb1;  // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:14:27: 14:38
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const_constructor_qpath.rs:14:27: 14:34
                                         // + literal: Const { ty: fn(i32) -> E {E::V}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:14:5: 14:39
    }
}

const <impl at ui/consts/const_constructor/const_constructor_qpath.rs:17:1: 17:34>::DEFAULT: Option<i32> = {
    let mut _0: std::option::Option<i32>; // return place in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:18:20: 18:24

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:18:27: 18:41
        _0 = Option::<i32>::Some(const 23_i32) -> bb1; // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:18:27: 18:41
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const_constructor_qpath.rs:18:27: 18:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(i32) -> Option<i32> {Option::<i32>::Some}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:18:5: 18:42
    }
}

const <impl at ui/consts/const_constructor/const_constructor_qpath.rs:21:1: 21:7>::NON_DEFAULT: E = {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:22:24: 22:28

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:22:31: 22:42
        _0 = E::W(const 12_usize) -> bb1; // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:22:31: 22:42
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const_constructor_qpath.rs:22:31: 22:38
                                         // + literal: Const { ty: fn(usize) -> E {E::W}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:22:5: 22:43
    }
}

fn <impl at ui/consts/const_constructor/const_constructor_qpath.rs:21:1: 21:7>::local_fn() -> E {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:23:28: 23:32

    bb0: {
        _0 = E::V(const 23_i32) -> bb1;  // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:24:9: 24:20
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const_constructor_qpath.rs:24:9: 24:16
                                         // + literal: Const { ty: fn(i32) -> E {E::V}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:25:6: 25:6
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/const_constructor/const_constructor_qpath.rs:21:1: 21:7>::local_fn() -> E {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:23:28: 23:32

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:24:9: 24:20
        _0 = E::V(const 23_i32) -> bb1;  // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:24:9: 24:20
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const_constructor_qpath.rs:24:9: 24:16
                                         // + literal: Const { ty: fn(i32) -> E {E::V}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:25:6: 25:6
    }
}

fn explicit_qpath() -> E {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:28:30: 28:31
    let _1: std::option::Option<usize>;  // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:29:9: 29:11
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/consts/const_constructor/const_constructor_qpath.rs:29:9: 29:11
    }

    bb0: {
        _1 = Option::<usize>::Some(const 23_usize) -> bb1; // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:29:14: 29:39
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const_constructor_qpath.rs:29:14: 29:35
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(usize) -> Option<usize> {Option::<usize>::Some}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = E::W(const 12_usize) -> bb2; // scope 1 at ui/consts/const_constructor/const_constructor_qpath.rs:30:5: 30:15
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const_constructor_qpath.rs:30:5: 30:11
                                         // + literal: Const { ty: fn(usize) -> E {E::W}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:31:2: 31:2
    }
}

// MIR FOR CTFE
fn explicit_qpath() -> E {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:28:30: 28:31
    let _1: std::option::Option<usize>;  // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:29:9: 29:11
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/consts/const_constructor/const_constructor_qpath.rs:29:9: 29:11
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:29:9: 29:11
        ConstEvalCounter;                // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:29:14: 29:39
        _1 = Option::<usize>::Some(const 23_usize) -> bb1; // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:29:14: 29:39
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const_constructor_qpath.rs:29:14: 29:35
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(usize) -> Option<usize> {Option::<usize>::Some}, val: Value(<ZST>) }
    }

    bb1: {
        ConstEvalCounter;                // scope 1 at ui/consts/const_constructor/const_constructor_qpath.rs:30:5: 30:15
        _0 = E::W(const 12_usize) -> bb2; // scope 1 at ui/consts/const_constructor/const_constructor_qpath.rs:30:5: 30:15
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const_constructor_qpath.rs:30:5: 30:11
                                         // + literal: Const { ty: fn(usize) -> E {E::W}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_1);                 // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:31:1: 31:2
        return;                          // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:31:2: 31:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:33:11: 33:11
    let mut _1: bool;                    // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:34:5: 34:41
    let mut _2: bool;                    // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:34:13: 34:40
    let mut _3: &E;                      // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:34:13: 34:23
    let mut _4: &E;                      // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:34:27: 34:40
    let _5: E;                           // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:34:27: 34:40
    let mut _6: !;                       // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:34:5: 34:41
    let mut _7: bool;                    // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:5: 35:41
    let mut _8: bool;                    // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:13: 35:40
    let mut _9: &std::option::Option<i32>; // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:13: 35:28
    let mut _10: &std::option::Option<i32>; // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:32: 35:40
    let mut _11: !;                      // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:5: 35:41
    let mut _12: bool;                   // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:36:5: 36:48
    let mut _13: bool;                   // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:36:13: 36:47
    let mut _14: &E;                     // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:36:13: 36:27
    let mut _15: &E;                     // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:36:31: 36:47
    let _16: E;                          // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:36:31: 36:47
    let mut _17: !;                      // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:36:5: 36:48
    let mut _18: &E;                     // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:36:13: 36:27
    let mut _19: &std::option::Option<i32>; // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:32: 35:40
    let mut _20: &std::option::Option<i32>; // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:13: 35:28
    let mut _21: &E;                     // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:34:13: 34:23

    bb0: {
        _21 = const _;                   // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:34:13: 34:23
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const_constructor_qpath.rs:34:13: 34:23
                                         // + literal: Const { ty: &E, val: Unevaluated(main, [], Some(promoted[3])) }
        _3 = _21;                        // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:34:13: 34:23
        _5 = E::local_fn() -> bb1;       // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:34:27: 34:40
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const_constructor_qpath.rs:34:27: 34:38
                                         // + literal: Const { ty: fn() -> E {E::local_fn}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:34:27: 34:40
        _2 = <E as PartialEq>::eq(move _3, move _4) -> bb2; // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:34:13: 34:40
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const_constructor_qpath.rs:34:13: 34:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a E, &'b E) -> bool {<E as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = Not(move _2);               // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:34:5: 34:41
        switchInt(move _1) -> [0: bb4, otherwise: bb3]; // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:34:5: 34:41
    }

    bb3: {
        _6 = core::panicking::panic(const "assertion failed: E::DEFAULT == E::local_fn()"); // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:34:5: 34:41
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const_constructor_qpath.rs:34:5: 34:41
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _20 = const _;                   // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:13: 35:28
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const_constructor_qpath.rs:35:13: 35:28
                                         // + literal: Const { ty: &Option<i32>, val: Unevaluated(main, [], Some(promoted[2])) }
        _9 = _20;                        // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:13: 35:28
        _19 = const _;                   // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:32: 35:40
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const_constructor_qpath.rs:35:32: 35:40
                                         // + literal: Const { ty: &Option<i32>, val: Unevaluated(main, [], Some(promoted[1])) }
        _10 = _19;                       // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:32: 35:40
        _8 = <Option<i32> as PartialEq>::eq(move _9, move _10) -> bb5; // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:13: 35:40
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const_constructor_qpath.rs:35:13: 35:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<i32>, &'b Option<i32>) -> bool {<Option<i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = Not(move _8);               // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:5: 35:41
        switchInt(move _7) -> [0: bb7, otherwise: bb6]; // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:5: 35:41
    }

    bb6: {
        _11 = core::panicking::panic(const "assertion failed: Option::DEFAULT == Some(23)"); // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:5: 35:41
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const_constructor_qpath.rs:35:5: 35:41
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _18 = const _;                   // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:36:13: 36:27
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const_constructor_qpath.rs:36:13: 36:27
                                         // + literal: Const { ty: &E, val: Unevaluated(main, [], Some(promoted[0])) }
        _14 = _18;                       // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:36:13: 36:27
        _16 = explicit_qpath() -> bb8;   // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:36:31: 36:47
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const_constructor_qpath.rs:36:31: 36:45
                                         // + literal: Const { ty: fn() -> E {explicit_qpath}, val: Value(<ZST>) }
    }

    bb8: {
        _15 = &_16;                      // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:36:31: 36:47
        _13 = <E as PartialEq>::eq(move _14, move _15) -> bb9; // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:36:13: 36:47
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const_constructor_qpath.rs:36:13: 36:47
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a E, &'b E) -> bool {<E as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _12 = Not(move _13);             // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:36:5: 36:48
        switchInt(move _12) -> [0: bb11, otherwise: bb10]; // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:36:5: 36:48
    }

    bb10: {
        _17 = core::panicking::panic(const "assertion failed: E::NON_DEFAULT == explicit_qpath()"); // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:36:5: 36:48
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const_constructor_qpath.rs:36:5: 36:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        return;                          // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:37:2: 37:2
    }
}

promoted[0] in main: &E = {
    let mut _0: &E;                      // return place in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:36:13: 36:27
    let mut _1: E;                       // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:36:13: 36:27

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:36:13: 36:27
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const_constructor_qpath.rs:36:13: 36:27
                                         // + literal: Const { ty: E, val: Unevaluated(E::NON_DEFAULT, [], None) }
        _0 = &_1;                        // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:36:13: 36:27
        return;                          // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:36:13: 36:27
    }
}

promoted[1] in main: &Option<i32> = {
    let mut _0: &std::option::Option<i32>; // return place in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:32: 35:40
    let mut _1: std::option::Option<i32>; // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:32: 35:40

    bb0: {
        _1 = Option::<i32>::Some(const 23_i32); // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:32: 35:40
        _0 = &_1;                        // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:32: 35:40
        return;                          // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:32: 35:40
    }
}

promoted[2] in main: &Option<i32> = {
    let mut _0: &std::option::Option<i32>; // return place in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:13: 35:28
    let mut _1: std::option::Option<i32>; // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:13: 35:28

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:13: 35:28
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const_constructor_qpath.rs:35:13: 35:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: Option<i32>, val: Unevaluated(ConstDefault::DEFAULT, [std::option::Option<i32>], None) }
        _0 = &_1;                        // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:13: 35:28
        return;                          // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:35:13: 35:28
    }
}

promoted[3] in main: &E = {
    let mut _0: &E;                      // return place in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:34:13: 34:23
    let mut _1: E;                       // in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:34:13: 34:23

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:34:13: 34:23
                                         // mir::Constant
                                         // + span: ui/consts/const_constructor/const_constructor_qpath.rs:34:13: 34:23
                                         // + literal: Const { ty: E, val: Unevaluated(ConstDefault::DEFAULT, [E], None) }
        _0 = &_1;                        // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:34:13: 34:23
        return;                          // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:34:13: 34:23
    }
}

fn E::V(_1: i32) -> E {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:9:5: 9:6

    bb0: {
        _0 = E::V(move _1);              // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:9:5: 9:6
        return;                          // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:9:5: 9:6
    }
}

// MIR FOR CTFE
fn E::V(_1: i32) -> E {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:9:5: 9:6

    bb0: {
        _0 = E::V(move _1);              // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:9:5: 9:6
        return;                          // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:9:5: 9:6
    }
}

fn E::W(_1: usize) -> E {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:10:5: 10:6

    bb0: {
        _0 = E::W(move _1);              // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:10:5: 10:6
        return;                          // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:10:5: 10:6
    }
}

// MIR FOR CTFE
fn E::W(_1: usize) -> E {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:10:5: 10:6

    bb0: {
        _0 = E::W(move _1);              // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:10:5: 10:6
        return;                          // scope 0 at ui/consts/const_constructor/const_constructor_qpath.rs:10:5: 10:6
    }
}
