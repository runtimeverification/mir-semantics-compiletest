// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const X: Option<Cell<i32>> = {
    let mut _0: std::option::Option<std::cell::Cell<i32>>;

    bb0: {
        _0 = Option::<Cell<i32>>::None;
        return;
    }
}

const Y: Option<Cell<i32>> = {
    let mut _0: std::option::Option<std::cell::Cell<i32>>;
    let _1: std::option::Option<std::cell::Cell<i32>>;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_1);
        _1 = Option::<Cell<i32>>::None;
        _0 = move _1;
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    scope 1 {
        debug x => const _;
        scope 2 {
            debug y => const _;
        }
    }

    bb0: {
        return;
    }
}

promoted[0] in main: &Option<Cell<i32>> = {
    let mut _0: &std::option::Option<std::cell::Cell<i32>>;
    let mut _1: std::option::Option<std::cell::Cell<i32>>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Option<Cell<i32>> = {
    let mut _0: &std::option::Option<std::cell::Cell<i32>>;
    let mut _1: std::option::Option<std::cell::Cell<i32>>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}
