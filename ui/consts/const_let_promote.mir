// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const X: Option<Cell<i32>> = {
    let mut _0: std::option::Option<std::cell::Cell<i32>>; // return place in scope 0 at ui/consts/const_let_promote.rs:5:10: 5:27

    bb0: {
        _0 = Option::<Cell<i32>>::None;  // scope 0 at ui/consts/const_let_promote.rs:5:30: 5:34
        return;                          // scope 0 at ui/consts/const_let_promote.rs:5:1: 5:35
    }
}

const Y: Option<Cell<i32>> = {
    let mut _0: std::option::Option<std::cell::Cell<i32>>; // return place in scope 0 at ui/consts/const_let_promote.rs:7:10: 7:27
    let _1: std::option::Option<std::cell::Cell<i32>>; // in scope 0 at ui/consts/const_let_promote.rs:8:9: 8:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/const_let_promote.rs:8:9: 8:10
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_let_promote.rs:8:9: 8:10
        _1 = Option::<Cell<i32>>::None;  // scope 0 at ui/consts/const_let_promote.rs:8:13: 8:17
        _0 = move _1;                    // scope 1 at ui/consts/const_let_promote.rs:9:5: 9:6
        StorageDead(_1);                 // scope 0 at ui/consts/const_let_promote.rs:10:1: 10:2
        return;                          // scope 0 at ui/consts/const_let_promote.rs:7:1: 10:3
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_let_promote.rs:14:11: 14:11
    let _1: &std::option::Option<std::cell::Cell<i32>>; // in scope 0 at ui/consts/const_let_promote.rs:15:9: 15:10
    let _2: &std::option::Option<std::cell::Cell<i32>>; // in scope 0 at ui/consts/const_let_promote.rs:15:25: 15:27
    let _4: &std::option::Option<std::cell::Cell<i32>>; // in scope 0 at ui/consts/const_let_promote.rs:16:25: 16:27
    let mut _6: &std::option::Option<std::cell::Cell<i32>>; // in scope 0 at ui/consts/const_let_promote.rs:15:25: 15:27
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/const_let_promote.rs:15:9: 15:10
        let _3: &std::option::Option<std::cell::Cell<i32>>; // in scope 1 at ui/consts/const_let_promote.rs:16:9: 16:10
        let mut _5: &std::option::Option<std::cell::Cell<i32>>; // in scope 1 at ui/consts/const_let_promote.rs:16:25: 16:27
        scope 2 {
            debug y => _3;               // in scope 2 at ui/consts/const_let_promote.rs:16:9: 16:10
        }
    }

    bb0: {
        _6 = const _;                    // scope 0 at ui/consts/const_let_promote.rs:15:25: 15:27
                                         // mir::Constant
                                         // + span: ui/consts/const_let_promote.rs:15:25: 15:27
                                         // + literal: Const { ty: &Option<Cell<i32>>, val: Unevaluated(main, [], Some(promoted[1])) }
        _2 = _6;                         // scope 0 at ui/consts/const_let_promote.rs:15:25: 15:27
        _1 = _2;                         // scope 0 at ui/consts/const_let_promote.rs:15:25: 15:27
        _5 = const _;                    // scope 1 at ui/consts/const_let_promote.rs:16:25: 16:27
                                         // mir::Constant
                                         // + span: ui/consts/const_let_promote.rs:16:25: 16:27
                                         // + literal: Const { ty: &Option<Cell<i32>>, val: Unevaluated(main, [], Some(promoted[0])) }
        _4 = _5;                         // scope 1 at ui/consts/const_let_promote.rs:16:25: 16:27
        _3 = _4;                         // scope 1 at ui/consts/const_let_promote.rs:16:25: 16:27
        return;                          // scope 0 at ui/consts/const_let_promote.rs:17:2: 17:2
    }
}

promoted[0] in main: &Option<Cell<i32>> = {
    let mut _0: &std::option::Option<std::cell::Cell<i32>>; // return place in scope 0 at ui/consts/const_let_promote.rs:16:25: 16:27
    let mut _1: std::option::Option<std::cell::Cell<i32>>; // in scope 0 at ui/consts/const_let_promote.rs:16:26: 16:27

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_let_promote.rs:16:26: 16:27
                                         // mir::Constant
                                         // + span: ui/consts/const_let_promote.rs:16:26: 16:27
                                         // + literal: Const { ty: Option<Cell<i32>>, val: Unevaluated(Y, [], None) }
        _0 = &_1;                        // scope 0 at ui/consts/const_let_promote.rs:16:25: 16:27
        return;                          // scope 0 at ui/consts/const_let_promote.rs:16:25: 16:27
    }
}

promoted[1] in main: &Option<Cell<i32>> = {
    let mut _0: &std::option::Option<std::cell::Cell<i32>>; // return place in scope 0 at ui/consts/const_let_promote.rs:15:25: 15:27
    let mut _1: std::option::Option<std::cell::Cell<i32>>; // in scope 0 at ui/consts/const_let_promote.rs:15:26: 15:27

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_let_promote.rs:15:26: 15:27
                                         // mir::Constant
                                         // + span: ui/consts/const_let_promote.rs:15:26: 15:27
                                         // + literal: Const { ty: Option<Cell<i32>>, val: Unevaluated(X, [], None) }
        _0 = &_1;                        // scope 0 at ui/consts/const_let_promote.rs:15:25: 15:27
        return;                          // scope 0 at ui/consts/const_let_promote.rs:15:25: 15:27
    }
}
