// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const C: Option<Cell<u32>> = {
    let mut _0: std::option::Option<std::cell::Cell<u32>>;
    let mut _1: std::option::Option<std::cell::Cell<u32>>;
    let _3: ();
    let mut _4: ();
    let mut _5: bool;
    let mut _6: i32;
    let mut _8: std::option::Option<std::cell::Cell<u32>>;
    let mut _9: std::option::Option<std::cell::Cell<u32>>;
    let mut _10: std::cell::Cell<u32>;
    let mut _11: (i32, bool);
    let mut _12: !;
    let _13: ();
    let mut _14: !;
    scope 1 {
        debug c => _1;
        let mut _2: i32;
        scope 2 {
            debug i => _2;
            let mut _7: std::option::Option<std::cell::Cell<u32>>;
            scope 3 {
                debug x => _7;
                scope 4 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = Option::<Cell<u32>>::None;
        StorageLive(_2);
        _2 = const 0_i32;
        StorageLive(_3);
        goto -> bb1;
    }

    bb1: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = _2;
        _5 = Eq(move _6, const 0_i32);
        StorageDead(_6);
        switchInt(move _5) -> [0: bb5, otherwise: bb2];
    }

    bb2: {
        StorageLive(_7);
        _7 = Option::<Cell<u32>>::None;
        StorageLive(_8);
        _8 = move _7;
        _1 = move _8;
        StorageDead(_8);
        StorageLive(_9);
        StorageLive(_10);
        ConstEvalCounter;
        _10 = Cell::<u32>::new(const 0_u32) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = Option::<Cell<u32>>::Some(move _10);
        StorageDead(_10);
        _7 = move _9;
        StorageDead(_9);
        _11 = CheckedAdd(_2, const 1_i32);
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_i32) -> [success: bb4, unwind continue];
    }

    bb4: {
        _2 = move (_11.0: i32);
        _4 = const ();
        StorageDead(_7);
        StorageDead(_5);
        ConstEvalCounter;
        goto -> bb1;
    }

    bb5: {
        StorageLive(_13);
        _3 = const ();
        StorageDead(_13);
        StorageDead(_5);
        StorageDead(_3);
        _0 = move _1;
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

promoted[0] in main: &Option<Cell<u32>> = {
    let mut _0: &std::option::Option<std::cell::Cell<u32>>;
    let mut _1: std::option::Option<std::cell::Cell<u32>>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}
