// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const C: Option<Cell<u32>> = {
    let mut _0: std::option::Option<std::cell::Cell<u32>>; // return place in scope 0 at ui/consts/promoted-storage.rs:5:10: 5:27
    let mut _1: std::option::Option<std::cell::Cell<u32>>; // in scope 0 at ui/consts/promoted-storage.rs:6:9: 6:14
    let _3: ();                          // in scope 0 at ui/consts/promoted-storage.rs:8:5: 14:6
    let mut _4: ();                      // in scope 0 at ui/consts/promoted-storage.rs:5:1: 16:3
    let mut _5: bool;                    // in scope 0 at ui/consts/promoted-storage.rs:8:11: 8:17
    let mut _6: i32;                     // in scope 0 at ui/consts/promoted-storage.rs:8:11: 8:12
    let mut _8: std::option::Option<std::cell::Cell<u32>>; // in scope 0 at ui/consts/promoted-storage.rs:10:13: 10:14
    let mut _9: std::option::Option<std::cell::Cell<u32>>; // in scope 0 at ui/consts/promoted-storage.rs:11:13: 11:31
    let mut _10: std::cell::Cell<u32>;   // in scope 0 at ui/consts/promoted-storage.rs:11:18: 11:30
    let mut _11: (i32, bool);            // in scope 0 at ui/consts/promoted-storage.rs:13:9: 13:15
    let mut _12: !;                      // in scope 0 at ui/consts/promoted-storage.rs:8:5: 14:6
    let _13: ();                         // in scope 0 at ui/consts/promoted-storage.rs:8:5: 14:6
    let mut _14: !;                      // in scope 0 at ui/consts/promoted-storage.rs:8:5: 14:6
    scope 1 {
        debug c => _1;                   // in scope 1 at ui/consts/promoted-storage.rs:6:9: 6:14
        let mut _2: i32;                 // in scope 1 at ui/consts/promoted-storage.rs:7:9: 7:14
        scope 2 {
            debug i => _2;               // in scope 2 at ui/consts/promoted-storage.rs:7:9: 7:14
            let mut _7: std::option::Option<std::cell::Cell<u32>>; // in scope 2 at ui/consts/promoted-storage.rs:9:13: 9:18
            scope 3 {
                debug x => _7;           // in scope 3 at ui/consts/promoted-storage.rs:9:13: 9:18
                scope 4 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/promoted-storage.rs:6:9: 6:14
        _1 = Option::<Cell<u32>>::None;  // scope 0 at ui/consts/promoted-storage.rs:6:17: 6:21
        StorageLive(_2);                 // scope 1 at ui/consts/promoted-storage.rs:7:9: 7:14
        _2 = const 0_i32;                // scope 1 at ui/consts/promoted-storage.rs:7:17: 7:18
        StorageLive(_3);                 // scope 2 at ui/consts/promoted-storage.rs:8:5: 14:6
        goto -> bb1;                     // scope 2 at ui/consts/promoted-storage.rs:8:5: 14:6
    }

    bb1: {
        StorageLive(_5);                 // scope 2 at ui/consts/promoted-storage.rs:8:11: 8:17
        StorageLive(_6);                 // scope 2 at ui/consts/promoted-storage.rs:8:11: 8:12
        _6 = _2;                         // scope 2 at ui/consts/promoted-storage.rs:8:11: 8:12
        _5 = Eq(move _6, const 0_i32);   // scope 2 at ui/consts/promoted-storage.rs:8:11: 8:17
        StorageDead(_6);                 // scope 2 at ui/consts/promoted-storage.rs:8:16: 8:17
        switchInt(move _5) -> [0: bb5, otherwise: bb2]; // scope 2 at ui/consts/promoted-storage.rs:8:11: 8:17
    }

    bb2: {
        StorageLive(_7);                 // scope 2 at ui/consts/promoted-storage.rs:9:13: 9:18
        _7 = Option::<Cell<u32>>::None;  // scope 2 at ui/consts/promoted-storage.rs:9:21: 9:25
        StorageLive(_8);                 // scope 3 at ui/consts/promoted-storage.rs:10:13: 10:14
        _8 = move _7;                    // scope 3 at ui/consts/promoted-storage.rs:10:13: 10:14
        _1 = move _8;                    // scope 3 at ui/consts/promoted-storage.rs:10:9: 10:14
        StorageDead(_8);                 // scope 3 at ui/consts/promoted-storage.rs:10:13: 10:14
        StorageLive(_9);                 // scope 3 at ui/consts/promoted-storage.rs:11:13: 11:31
        StorageLive(_10);                // scope 3 at ui/consts/promoted-storage.rs:11:18: 11:30
        ConstEvalCounter;                // scope 3 at ui/consts/promoted-storage.rs:11:18: 11:30
        _10 = Cell::<u32>::new(const 0_u32) -> bb3; // scope 3 at ui/consts/promoted-storage.rs:11:18: 11:30
                                         // mir::Constant
                                         // + span: ui/consts/promoted-storage.rs:11:18: 11:27
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u32) -> Cell<u32> {Cell::<u32>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = Option::<Cell<u32>>::Some(move _10); // scope 3 at ui/consts/promoted-storage.rs:11:13: 11:31
        StorageDead(_10);                // scope 3 at ui/consts/promoted-storage.rs:11:30: 11:31
        _7 = move _9;                    // scope 3 at ui/consts/promoted-storage.rs:11:9: 11:31
        StorageDead(_9);                 // scope 3 at ui/consts/promoted-storage.rs:11:30: 11:31
        _11 = CheckedAdd(_2, const 1_i32); // scope 4 at ui/consts/promoted-storage.rs:13:9: 13:15
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_i32) -> bb4; // scope 4 at ui/consts/promoted-storage.rs:13:9: 13:15
    }

    bb4: {
        _2 = move (_11.0: i32);          // scope 4 at ui/consts/promoted-storage.rs:13:9: 13:15
        _4 = const ();                   // scope 2 at ui/consts/promoted-storage.rs:8:18: 14:6
        StorageDead(_7);                 // scope 2 at ui/consts/promoted-storage.rs:14:5: 14:6
        StorageDead(_5);                 // scope 2 at ui/consts/promoted-storage.rs:14:5: 14:6
        ConstEvalCounter;                // scope 2 at ui/consts/promoted-storage.rs:8:5: 14:6
        goto -> bb1;                     // scope 2 at ui/consts/promoted-storage.rs:8:5: 14:6
    }

    bb5: {
        StorageLive(_13);                // scope 2 at ui/consts/promoted-storage.rs:8:5: 14:6
        _3 = const ();                   // scope 2 at ui/consts/promoted-storage.rs:8:5: 14:6
        StorageDead(_13);                // scope 2 at ui/consts/promoted-storage.rs:14:5: 14:6
        StorageDead(_5);                 // scope 2 at ui/consts/promoted-storage.rs:14:5: 14:6
        StorageDead(_3);                 // scope 2 at ui/consts/promoted-storage.rs:14:5: 14:6
        _0 = move _1;                    // scope 2 at ui/consts/promoted-storage.rs:15:5: 15:6
        StorageDead(_2);                 // scope 1 at ui/consts/promoted-storage.rs:16:1: 16:2
        StorageDead(_1);                 // scope 0 at ui/consts/promoted-storage.rs:16:1: 16:2
        return;                          // scope 0 at ui/consts/promoted-storage.rs:5:1: 16:3
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/promoted-storage.rs:18:11: 18:11
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/consts/promoted-storage.rs:20:2: 20:2
    }
}

promoted[0] in main: &Option<Cell<u32>> = {
    let mut _0: &std::option::Option<std::cell::Cell<u32>>; // return place in scope 0 at ui/consts/promoted-storage.rs:19:25: 19:27
    let mut _1: std::option::Option<std::cell::Cell<u32>>; // in scope 0 at ui/consts/promoted-storage.rs:19:26: 19:27

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/promoted-storage.rs:19:26: 19:27
                                         // mir::Constant
                                         // + span: ui/consts/promoted-storage.rs:19:26: 19:27
                                         // + literal: Const { ty: Option<Cell<u32>>, val: Unevaluated(C, [], None) }
        _0 = &_1;                        // scope 0 at ui/consts/promoted-storage.rs:19:25: 19:27
        return;                          // scope 0 at ui/consts/promoted-storage.rs:19:25: 19:27
    }
}
