// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: Baz<[i32; 4]>;
    let mut _2: [i32; 4];
    let mut _3: (&[i32; 4], &[i32; 4]);
    let mut _4: &[i32; 4];
    let mut _7: bool;
    let mut _8: bool;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug d => _1;
        let _5: &[i32; 4];
        let _6: &[i32; 4];
        let mut _12: &[i32; 4];
        scope 2 {
            debug left_val => _5;
            debug right_val => _6;
            let _9: core::panicking::AssertKind;
            scope 3 {
                debug kind => _9;
            }
        }
    }

    bb0: {
        _2 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _1 = Baz::<[i32; 4]> { a: move _2 };
        _12 = const _;
        _4 = &(_1.0: [i32; 4]);
        _3 = (_12, move _4);
        _5 = (_3.0: &[i32; 4]);
        _6 = (_3.1: &[i32; 4]);
        _8 = <[i32; 4] as PartialEq>::eq(_5, _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<[i32; 4], [i32; 4]>(move _9, _5, _6, move _11) -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &[i32; 4] = {
    let mut _0: &[i32; 4];
    let mut _1: [i32; 4];

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}
