// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:6:1: 6:28>::eq(_1: &CustomEq, _2: &CustomEq) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:7:11: 7:16
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:7:31: 7:35

    bb0: {
        _0 = const false;                // scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:8:9: 8:14
        return;                          // scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:9:6: 9:6
    }
}

fn <impl at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    debug other => _2;                   // in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    let _3: isize;                       // in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    let mut _4: &Foo;                    // in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    let mut _6: &Foo;                    // in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    let mut _7: bool;                    // in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    let mut _8: isize;                   // in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    let mut _9: isize;                   // in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    let mut _10: bool;                   // in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    let mut _11: (&Foo, &Foo);           // in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    let mut _12: &Foo;                   // in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    let mut _13: &Foo;                   // in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    let mut _14: isize;                  // in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    let mut _15: isize;                  // in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    let mut _18: &CustomEq;              // in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:16:9: 16:17
    let mut _19: &CustomEq;              // in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:16:9: 16:17
    let mut _20: &Foo;                   // in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    let mut _21: &Foo;                   // in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    let mut _22: &Foo;                   // in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    let mut _23: &Foo;                   // in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
        let _5: isize;                   // in scope 1 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
            let _16: &CustomEq;          // in scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:16:9: 16:17
            let _17: &CustomEq;          // in scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:16:9: 16:17
            scope 3 {
                debug __self_0 => _16;   // in scope 3 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:16:9: 16:17
                debug __arg1_0 => _17;   // in scope 3 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:16:9: 16:17
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
        _3 = discriminant((*_4));        // scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
        _6 = _2;                         // scope 1 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
        _5 = discriminant((*_6));        // scope 1 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
        _8 = _3;                         // scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
        _9 = _5;                         // scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
        _7 = Eq(move _8, move _9);       // scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
        goto -> bb3;                     // scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
        _13 = _2;                        // scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
        _11 = (move _12, move _13);      // scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
        _20 = deref_copy (_11.0: &Foo);  // scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
        _15 = discriminant((*_20));      // scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
        switchInt(move _15) -> [2: bb5, otherwise: bb4]; // scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    }

    bb3: {
        return;                          // scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:19: 12:19
    }

    bb4: {
        _10 = const true;                // scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
        goto -> bb7;                     // scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    }

    bb5: {
        _21 = deref_copy (_11.1: &Foo);  // scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
        _14 = discriminant((*_21));      // scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
        switchInt(move _14) -> [2: bb6, otherwise: bb4]; // scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    }

    bb6: {
        _22 = deref_copy (_11.0: &Foo);  // scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:16:9: 16:17
        _16 = &(((*_22) as Qux).0: CustomEq); // scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:16:9: 16:17
        _23 = deref_copy (_11.1: &Foo);  // scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:16:9: 16:17
        _17 = &(((*_23) as Qux).0: CustomEq); // scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:16:9: 16:17
        _18 = _16;                       // scope 3 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:16:9: 16:17
        _19 = _17;                       // scope 3 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:16:9: 16:17
        _10 = <CustomEq as PartialEq>::eq(move _18, move _19) -> bb7; // scope 3 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:16:9: 16:17
                                         // mir::Constant
                                         // + span: ui/consts/const_in_pattern/custom-eq-branch-warn.rs:16:9: 16:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a CustomEq, &'b CustomEq) -> bool {<CustomEq as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = move _10;                   // scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
        goto -> bb3;                     // scope 2 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:10: 12:19
    }
}

fn <impl at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:21: 12:23>::assert_receiver_is_total_eq(_1: &Foo) -> () {
    debug self => _1;                    // in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:21: 12:23
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:21: 12:23
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:12:23: 12:23
    }
}

const BAR_BAZ: Foo = {
    let mut _0: Foo;                     // return place in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:21:16: 21:19
    let mut _1: bool;                    // in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:21:25: 21:33
    let mut _2: CustomEq;                // in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:24:14: 24:22

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:21:25: 21:33
        _1 = Eq(const 42_i32, const 42_i32); // scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:21:25: 21:33
        switchInt(move _1) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:21:25: 21:33
    }

    bb1: {
        _0 = Foo::Bar;                   // scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:22:5: 22:13
        goto -> bb3;                     // scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:21:22: 25:2
    }

    bb2: {
        StorageLive(_2);                 // scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:24:14: 24:22
        _2 = CustomEq;                   // scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:24:14: 24:22
        _0 = Foo::Qux(move _2);          // scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:24:5: 24:23
        StorageDead(_2);                 // scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:24:22: 24:23
        goto -> bb3;                     // scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:21:22: 25:2
    }

    bb3: {
        StorageDead(_1);                 // scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:25:1: 25:2
        return;                          // scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:21:1: 25:3
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:27:11: 27:11

    bb0: {
        return;                          // scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:36:2: 36:2
    }
}

fn Foo::Qux(_1: CustomEq) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:16:5: 16:8

    bb0: {
        _0 = Foo::Qux(move _1);          // scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:16:5: 16:8
        return;                          // scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:16:5: 16:8
    }
}

// MIR FOR CTFE
fn Foo::Qux(_1: CustomEq) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:16:5: 16:8

    bb0: {
        _0 = Foo::Qux(move _1);          // scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:16:5: 16:8
        return;                          // scope 0 at ui/consts/const_in_pattern/custom-eq-branch-warn.rs:16:5: 16:8
    }
}
