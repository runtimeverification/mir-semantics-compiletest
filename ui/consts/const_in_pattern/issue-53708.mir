// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const_in_pattern/issue-53708.rs:3:10: 3:19>::eq(_1: &S, _2: &S) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/const_in_pattern/issue-53708.rs:3:10: 3:19
    debug other => _2;                   // in scope 0 at ui/consts/const_in_pattern/issue-53708.rs:3:10: 3:19
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const_in_pattern/issue-53708.rs:3:10: 3:19

    bb0: {
        _0 = const true;                 // scope 0 at ui/consts/const_in_pattern/issue-53708.rs:3:10: 3:19
        return;                          // scope 0 at ui/consts/const_in_pattern/issue-53708.rs:3:19: 3:19
    }
}

fn <impl at ui/consts/const_in_pattern/issue-53708.rs:3:21: 3:23>::assert_receiver_is_total_eq(_1: &S) -> () {
    debug self => _1;                    // in scope 0 at ui/consts/const_in_pattern/issue-53708.rs:3:21: 3:23
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_in_pattern/issue-53708.rs:3:21: 3:23

    bb0: {
        return;                          // scope 0 at ui/consts/const_in_pattern/issue-53708.rs:3:23: 3:23
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_in_pattern/issue-53708.rs:6:11: 6:11

    bb0: {
        return;                          // scope 0 at ui/consts/const_in_pattern/issue-53708.rs:11:2: 11:2
    }
}

const C: &S = {
    let mut _0: &S;                      // return place in scope 0 at ui/consts/const_in_pattern/issue-53708.rs:7:14: 7:16
    let _1: &S;                          // in scope 0 at ui/consts/const_in_pattern/issue-53708.rs:7:19: 7:21
    let _2: S;                           // in scope 0 at ui/consts/const_in_pattern/issue-53708.rs:7:20: 7:21
    let mut _3: &S;                      // in scope 0 at ui/consts/const_in_pattern/issue-53708.rs:7:19: 7:21

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_in_pattern/issue-53708.rs:7:19: 7:21
        _3 = const _;                    // scope 0 at ui/consts/const_in_pattern/issue-53708.rs:7:19: 7:21
                                         // mir::Constant
                                         // + span: ui/consts/const_in_pattern/issue-53708.rs:7:19: 7:21
                                         // + literal: Const { ty: &S, val: Unevaluated(C, [], Some(promoted[0])) }
        _1 = &(*_3);                     // scope 0 at ui/consts/const_in_pattern/issue-53708.rs:7:19: 7:21
        _0 = &(*_1);                     // scope 0 at ui/consts/const_in_pattern/issue-53708.rs:7:19: 7:21
        StorageDead(_1);                 // scope 0 at ui/consts/const_in_pattern/issue-53708.rs:7:20: 7:21
        return;                          // scope 0 at ui/consts/const_in_pattern/issue-53708.rs:7:5: 7:22
    }
}

promoted[0] in C: &S = {
    let mut _0: &S;                      // return place in scope 0 at ui/consts/const_in_pattern/issue-53708.rs:7:19: 7:21
    let mut _1: S;                       // in scope 0 at ui/consts/const_in_pattern/issue-53708.rs:7:20: 7:21

    bb0: {
        _1 = S;                          // scope 0 at ui/consts/const_in_pattern/issue-53708.rs:7:20: 7:21
        _0 = &_1;                        // scope 0 at ui/consts/const_in_pattern/issue-53708.rs:7:19: 7:21
        return;                          // scope 0 at ui/consts/const_in_pattern/issue-53708.rs:7:19: 7:21
    }
}
