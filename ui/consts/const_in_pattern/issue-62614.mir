// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const_in_pattern/issue-62614.rs:5:1: 5:23>::eq(_1: &Sum, _2: &Sum) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:6:11: 6:16
    debug other => _2;                   // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:6:18: 6:23
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:6:35: 6:39
    let mut _3: u32;                     // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:6:42: 6:57
    let mut _4: u32;                     // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:6:42: 6:48
    let mut _5: u32;                     // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:6:51: 6:57
    let mut _6: (u32, bool);             // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:6:42: 6:57
    let mut _7: u32;                     // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:6:61: 6:78
    let mut _8: u32;                     // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:6:61: 6:68
    let mut _9: u32;                     // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:6:71: 6:78
    let mut _10: (u32, bool);            // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:6:61: 6:78

    bb0: {
        _4 = ((*_1).0: u32);             // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:6:42: 6:48
        _5 = ((*_1).1: u32);             // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:6:51: 6:57
        _6 = CheckedAdd(_4, _5);         // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:6:42: 6:57
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> bb1; // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:6:42: 6:57
    }

    bb1: {
        _3 = move (_6.0: u32);           // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:6:42: 6:57
        _8 = ((*_2).0: u32);             // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:6:61: 6:68
        _9 = ((*_2).1: u32);             // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:6:71: 6:78
        _10 = CheckedAdd(_8, _9);        // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:6:61: 6:78
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, move _9) -> bb2; // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:6:61: 6:78
    }

    bb2: {
        _7 = move (_10.0: u32);          // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:6:61: 6:78
        _0 = Eq(move _3, move _7);       // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:6:42: 6:78
        return;                          // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:6:80: 6:80
    }
}

fn <impl at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19>::eq(_1: &Eek, _2: &Eek) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    debug other => _2;                   // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    let _3: isize;                       // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    let mut _4: &Eek;                    // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    let mut _6: &Eek;                    // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    let mut _7: bool;                    // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    let mut _8: isize;                   // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    let mut _9: isize;                   // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    let mut _10: bool;                   // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    let mut _11: (&Eek, &Eek);           // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    let mut _12: &Eek;                   // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    let mut _13: &Eek;                   // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    let mut _14: isize;                  // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    let mut _15: isize;                  // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    let mut _18: &Sum;                   // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:14:22: 14:25
    let mut _19: &Sum;                   // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:14:22: 14:25
    let mut _20: &Eek;                   // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    let mut _21: &Eek;                   // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    let mut _22: &Eek;                   // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    let mut _23: &Eek;                   // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
        let _5: isize;                   // in scope 1 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
            let _16: &Sum;               // in scope 2 at ui/consts/const_in_pattern/issue-62614.rs:14:22: 14:25
            let _17: &Sum;               // in scope 2 at ui/consts/const_in_pattern/issue-62614.rs:14:22: 14:25
            scope 3 {
                debug __self_0 => _16;   // in scope 3 at ui/consts/const_in_pattern/issue-62614.rs:14:22: 14:25
                debug __arg1_0 => _17;   // in scope 3 at ui/consts/const_in_pattern/issue-62614.rs:14:22: 14:25
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
        _3 = discriminant((*_4));        // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
        _6 = _2;                         // scope 1 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
        _5 = discriminant((*_6));        // scope 1 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
        _8 = _3;                         // scope 2 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
        _9 = _5;                         // scope 2 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
        _7 = Eq(move _8, move _9);       // scope 2 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
        goto -> bb3;                     // scope 2 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
        _13 = _2;                        // scope 2 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
        _11 = (move _12, move _13);      // scope 2 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
        _20 = deref_copy (_11.0: &Eek);  // scope 2 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
        _15 = discriminant((*_20));      // scope 2 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
        switchInt(move _15) -> [1: bb5, otherwise: bb4]; // scope 2 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    }

    bb3: {
        return;                          // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:19: 11:19
    }

    bb4: {
        _10 = const true;                // scope 2 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
        goto -> bb7;                     // scope 2 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    }

    bb5: {
        _21 = deref_copy (_11.1: &Eek);  // scope 2 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
        _14 = discriminant((*_21));      // scope 2 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
        switchInt(move _14) -> [1: bb6, otherwise: bb4]; // scope 2 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    }

    bb6: {
        _22 = deref_copy (_11.0: &Eek);  // scope 2 at ui/consts/const_in_pattern/issue-62614.rs:14:22: 14:25
        _16 = &(((*_22) as UnusedByTheConst).0: Sum); // scope 2 at ui/consts/const_in_pattern/issue-62614.rs:14:22: 14:25
        _23 = deref_copy (_11.1: &Eek);  // scope 2 at ui/consts/const_in_pattern/issue-62614.rs:14:22: 14:25
        _17 = &(((*_23) as UnusedByTheConst).0: Sum); // scope 2 at ui/consts/const_in_pattern/issue-62614.rs:14:22: 14:25
        _18 = _16;                       // scope 3 at ui/consts/const_in_pattern/issue-62614.rs:14:22: 14:25
        _19 = _17;                       // scope 3 at ui/consts/const_in_pattern/issue-62614.rs:14:22: 14:25
        _10 = <Sum as PartialEq>::eq(move _18, move _19) -> bb7; // scope 3 at ui/consts/const_in_pattern/issue-62614.rs:14:22: 14:25
                                         // mir::Constant
                                         // + span: ui/consts/const_in_pattern/issue-62614.rs:14:22: 14:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Sum, &'b Sum) -> bool {<Sum as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = move _10;                   // scope 2 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
        goto -> bb3;                     // scope 2 at ui/consts/const_in_pattern/issue-62614.rs:11:10: 11:19
    }
}

fn <impl at ui/consts/const_in_pattern/issue-62614.rs:11:21: 11:23>::assert_receiver_is_total_eq(_1: &Eek) -> () {
    debug self => _1;                    // in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:21: 11:23
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:21: 11:23
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:11:23: 11:23
    }
}

const THE_CONST: Eek = {
    let mut _0: Eek;                     // return place in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:17:18: 17:21

    bb0: {
        _0 = Eek::TheConst;              // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:17:24: 17:37
        return;                          // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:17:1: 17:38
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:19:15: 19:15

    bb0: {
        return;                          // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:24:2: 24:2
    }
}

fn Sum(_1: u32, _2: u32) -> Sum {
    let mut _0: Sum;                     // return place in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:3:1: 3:11

    bb0: {
        _0 = Sum(move _1, move _2);      // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:3:1: 3:11
        return;                          // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:3:1: 3:11
    }
}

// MIR FOR CTFE
fn Sum(_1: u32, _2: u32) -> Sum {
    let mut _0: Sum;                     // return place in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:3:1: 3:11

    bb0: {
        _0 = Sum(move _1, move _2);      // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:3:1: 3:11
        return;                          // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:3:1: 3:11
    }
}

fn Eek::UnusedByTheConst(_1: Sum) -> Eek {
    let mut _0: Eek;                     // return place in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:14:5: 14:21

    bb0: {
        _0 = Eek::UnusedByTheConst(move _1); // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:14:5: 14:21
        return;                          // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:14:5: 14:21
    }
}

// MIR FOR CTFE
fn Eek::UnusedByTheConst(_1: Sum) -> Eek {
    let mut _0: Eek;                     // return place in scope 0 at ui/consts/const_in_pattern/issue-62614.rs:14:5: 14:21

    bb0: {
        _0 = Eek::UnusedByTheConst(move _1); // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:14:5: 14:21
        return;                          // scope 0 at ui/consts/const_in_pattern/issue-62614.rs:14:5: 14:21
    }
}
