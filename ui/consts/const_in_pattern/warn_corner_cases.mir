// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const_in_pattern/warn_corner_cases.rs:17:16: 17:21>::clone(_1: &NoDerive) -> NoDerive {
    debug self => _1;
    let mut _0: NoDerive;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/consts/const_in_pattern/warn_corner_cases.rs:17:23: 17:28>::fmt(_1: &NoDerive, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&u32;
    let _6: &u32;

    bb0: {
        _3 = const "NoDerive";
        _6 = &((*_1).0: u32);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/consts/const_in_pattern/warn_corner_cases.rs:21:1: 21:28>::eq(_1: &NoDerive, _2: &NoDerive) -> bool {
    debug self => _1;
    let mut _0: bool;

    bb0: {
        _0 = const false;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::option::Option<NoDerive>;
    let mut _2: isize;
    let _3: !;
    let mut _4: std::option::Option<NoDerive>;
    let _5: std::option::Option<NoDerive>;
    let _6: ();
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &&std::option::Option<NoDerive>;
    let _14: &std::option::Option<NoDerive>;
    let mut _15: &[core::fmt::rt::Placeholder];
    let _16: &[core::fmt::rt::Placeholder; 1];
    let _17: [core::fmt::rt::Placeholder; 1];
    let mut _18: core::fmt::rt::Placeholder;
    let mut _19: core::fmt::rt::Alignment;
    let mut _20: core::fmt::rt::Count;
    let mut _21: core::fmt::rt::Count;
    let mut _22: core::fmt::rt::UnsafeArg;
    let mut _23: std::option::Option<NoDerive>;
    let mut _24: isize;
    let _25: !;
    let mut _26: std::option::Option<NoDerive>;
    let _27: std::option::Option<NoDerive>;
    let _28: ();
    let mut _29: std::fmt::Arguments<'_>;
    let mut _30: &[&str];
    let mut _31: &[core::fmt::rt::Argument<'_>];
    let _32: &[core::fmt::rt::Argument<'_>; 1];
    let _33: [core::fmt::rt::Argument<'_>; 1];
    let mut _34: core::fmt::rt::Argument<'_>;
    let _35: &&std::option::Option<NoDerive>;
    let _36: &std::option::Option<NoDerive>;
    let mut _37: &[core::fmt::rt::Placeholder];
    let _38: &[core::fmt::rt::Placeholder; 1];
    let _39: [core::fmt::rt::Placeholder; 1];
    let mut _40: core::fmt::rt::Placeholder;
    let mut _41: core::fmt::rt::Alignment;
    let mut _42: core::fmt::rt::Count;
    let mut _43: core::fmt::rt::Count;
    let mut _44: core::fmt::rt::UnsafeArg;
    let mut _45: std::option::Option<NoDerive>;
    let mut _46: isize;
    let _47: !;
    let mut _48: std::option::Option<NoDerive>;
    let _49: std::option::Option<NoDerive>;
    let _50: ();
    let mut _51: std::fmt::Arguments<'_>;
    let mut _52: &[&str];
    let mut _53: &[core::fmt::rt::Argument<'_>];
    let _54: &[core::fmt::rt::Argument<'_>; 1];
    let _55: [core::fmt::rt::Argument<'_>; 1];
    let mut _56: core::fmt::rt::Argument<'_>;
    let _57: &&std::option::Option<NoDerive>;
    let _58: &std::option::Option<NoDerive>;
    let mut _59: &[core::fmt::rt::Placeholder];
    let _60: &[core::fmt::rt::Placeholder; 1];
    let _61: [core::fmt::rt::Placeholder; 1];
    let mut _62: core::fmt::rt::Placeholder;
    let mut _63: core::fmt::rt::Alignment;
    let mut _64: core::fmt::rt::Count;
    let mut _65: core::fmt::rt::Count;
    let mut _66: core::fmt::rt::UnsafeArg;
    scope 1 {
        debug tmp => _5;
        let mut _69: &[&str; 2];
        scope 2 {
        }
    }
    scope 3 {
        debug tmp => _27;
        let mut _68: &[&str; 2];
        scope 4 {
        }
    }
    scope 5 {
        debug tmp => _49;
        let mut _67: &[&str; 2];
        scope 6 {
        }
    }

    bb0: {
        _1 = Option::<NoDerive>::None;
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        _4 = const _;
        _5 = _4;
        _69 = const _;
        _8 = _69 as &[&str] (Pointer(Unsize));
        _14 = &_5;
        _13 = &_14;
        _12 = core::fmt::rt::Argument::<'_>::new_debug::<&Option<NoDerive>>(_13) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = begin_panic::<&str>(const "whoops") -> unwind continue;
    }

    bb4: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _19 = core::fmt::rt::Alignment::Unknown;
        _20 = core::fmt::rt::Count::Implied;
        _21 = core::fmt::rt::Count::Implied;
        _18 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _19, const 4_u32, move _20, move _21) -> [return: bb5, unwind continue];
    }

    bb5: {
        _17 = [move _18];
        _16 = &_17;
        _15 = _16 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _22 = core::fmt::rt::UnsafeArg::new() -> [return: bb6, unwind continue];
    }

    bb6: {
        _7 = Arguments::<'_>::new_v1_formatted(move _8, move _9, move _15, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb7, unwind continue];
    }

    bb7: {
        _6 = _eprint(move _7) -> [return: bb8, unwind continue];
    }

    bb8: {
        _23 = Option::<NoDerive>::None;
        _24 = discriminant(_23);
        switchInt(move _24) -> [0: bb9, 1: bb10, otherwise: bb2];
    }

    bb9: {
        _26 = const _;
        _27 = _26;
        _68 = const _;
        _30 = _68 as &[&str] (Pointer(Unsize));
        _36 = &_27;
        _35 = &_36;
        _34 = core::fmt::rt::Argument::<'_>::new_debug::<&Option<NoDerive>>(_35) -> [return: bb11, unwind continue];
    }

    bb10: {
        _25 = begin_panic::<&str>(const "whoops") -> unwind continue;
    }

    bb11: {
        _33 = [move _34];
        _32 = &_33;
        _31 = _32 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _41 = core::fmt::rt::Alignment::Unknown;
        _42 = core::fmt::rt::Count::Implied;
        _43 = core::fmt::rt::Count::Implied;
        _40 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _41, const 4_u32, move _42, move _43) -> [return: bb12, unwind continue];
    }

    bb12: {
        _39 = [move _40];
        _38 = &_39;
        _37 = _38 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _44 = core::fmt::rt::UnsafeArg::new() -> [return: bb13, unwind continue];
    }

    bb13: {
        _29 = Arguments::<'_>::new_v1_formatted(move _30, move _31, move _37, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb14, unwind continue];
    }

    bb14: {
        _28 = _eprint(move _29) -> [return: bb15, unwind continue];
    }

    bb15: {
        _45 = Option::<NoDerive>::None;
        _46 = discriminant(_45);
        switchInt(move _46) -> [0: bb16, 1: bb17, otherwise: bb2];
    }

    bb16: {
        _48 = const _;
        _49 = _48;
        _67 = const _;
        _52 = _67 as &[&str] (Pointer(Unsize));
        _58 = &_49;
        _57 = &_58;
        _56 = core::fmt::rt::Argument::<'_>::new_debug::<&Option<NoDerive>>(_57) -> [return: bb18, unwind continue];
    }

    bb17: {
        _47 = begin_panic::<&str>(const "whoops") -> unwind continue;
    }

    bb18: {
        _55 = [move _56];
        _54 = &_55;
        _53 = _54 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _63 = core::fmt::rt::Alignment::Unknown;
        _64 = core::fmt::rt::Count::Implied;
        _65 = core::fmt::rt::Count::Implied;
        _62 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _63, const 4_u32, move _64, move _65) -> [return: bb19, unwind continue];
    }

    bb19: {
        _61 = [move _62];
        _60 = &_61;
        _59 = _60 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _66 = core::fmt::rt::UnsafeArg::new() -> [return: bb20, unwind continue];
    }

    bb20: {
        _51 = Arguments::<'_>::new_v1_formatted(move _52, move _53, move _59, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb21, unwind continue];
    }

    bb21: {
        _50 = _eprint(move _51) -> [return: bb22, unwind continue];
    }

    bb22: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "[ui/consts/const_in_pattern/warn_corner_cases.rs:38] METHOD_CALL = ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "[ui/consts/const_in_pattern/warn_corner_cases.rs:32] CALL = ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "[ui/consts/const_in_pattern/warn_corner_cases.rs:26] INDEX = ", const "\n"];
        _0 = &_1;
        return;
    }
}

const main::INDEX: Option<NoDerive> = {
    let mut _0: std::option::Option<NoDerive>;
    let mut _1: [std::option::Option<NoDerive>; 2];
    let mut _2: std::option::Option<NoDerive>;
    let mut _3: std::option::Option<NoDerive>;
    let mut _4: NoDerive;
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = Option::<NoDerive>::None;
        StorageLive(_3);
        StorageLive(_4);
        _4 = NoDerive(const 10_u32);
        _3 = Option::<NoDerive>::Some(move _4);
        StorageDead(_4);
        _1 = [move _2, move _3];
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_5);
        _5 = const 0_usize;
        _6 = Len(_1);
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = _1[_5];
        StorageDead(_5);
        StorageDead(_1);
        return;
    }
}

fn build() -> Option<NoDerive> {
    let mut _0: std::option::Option<NoDerive>;

    bb0: {
        _0 = Option::<NoDerive>::None;
        return;
    }
}

// MIR FOR CTFE
fn build() -> Option<NoDerive> {
    let mut _0: std::option::Option<NoDerive>;

    bb0: {
        _0 = Option::<NoDerive>::None;
        return;
    }
}

const CALL: Option<NoDerive> = {
    let mut _0: std::option::Option<NoDerive>;

    bb0: {
        ConstEvalCounter;
        _0 = build() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main::<impl at ui/consts/const_in_pattern/warn_corner_cases.rs:36:5: 36:18>::none() -> Option<NoDerive> {
    let mut _0: std::option::Option<NoDerive>;

    bb0: {
        _0 = Option::<NoDerive>::None;
        return;
    }
}

// MIR FOR CTFE
fn main::<impl at ui/consts/const_in_pattern/warn_corner_cases.rs:36:5: 36:18>::none() -> Option<NoDerive> {
    let mut _0: std::option::Option<NoDerive>;

    bb0: {
        _0 = Option::<NoDerive>::None;
        return;
    }
}

const METHOD_CALL: Option<NoDerive> = {
    let mut _0: std::option::Option<NoDerive>;

    bb0: {
        ConstEvalCounter;
        _0 = main::<impl NoDerive>::none() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn NoDerive(_1: u32) -> NoDerive {
    let mut _0: NoDerive;

    bb0: {
        _0 = NoDerive(move _1);
        return;
    }
}

// MIR FOR CTFE
fn NoDerive(_1: u32) -> NoDerive {
    let mut _0: NoDerive;

    bb0: {
        _0 = NoDerive(move _1);
        return;
    }
}
