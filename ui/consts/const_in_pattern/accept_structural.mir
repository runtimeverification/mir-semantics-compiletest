// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const_in_pattern/accept_structural.rs:19:16: 19:21>::clone(_1: &NoPartialEq) -> NoPartialEq {
    debug self => _1;
    let mut _0: NoPartialEq;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/consts/const_in_pattern/accept_structural.rs:19:23: 19:28>::fmt(_1: &NoPartialEq, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&u32;
    let _6: &u32;

    bb0: {
        _3 = const "NoPartialEq";
        _6 = &((*_1).0: u32);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/consts/const_in_pattern/accept_structural.rs:22:16: 22:21>::clone(_1: &NoDerive) -> NoDerive {
    debug self => _1;
    let mut _0: NoDerive;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/consts/const_in_pattern/accept_structural.rs:22:23: 22:28>::fmt(_1: &NoDerive, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&u32;
    let _6: &u32;

    bb0: {
        _3 = const "NoDerive";
        _6 = &((*_1).0: u32);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/consts/const_in_pattern/accept_structural.rs:26:1: 26:28>::eq(_1: &NoDerive, _2: &NoDerive) -> bool {
    debug self => _1;
    let mut _0: bool;

    bb0: {
        _0 = const false;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: u32;
    let mut _2: u32;
    let _3: u32;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &&u32;
    let _12: &u32;
    let mut _13: &[core::fmt::rt::Placeholder];
    let _14: &[core::fmt::rt::Placeholder; 1];
    let _15: [core::fmt::rt::Placeholder; 1];
    let mut _16: core::fmt::rt::Placeholder;
    let mut _17: core::fmt::rt::Alignment;
    let mut _18: core::fmt::rt::Count;
    let mut _19: core::fmt::rt::Count;
    let mut _20: core::fmt::rt::UnsafeArg;
    let _21: !;
    let mut _22: u32;
    let mut _23: u32;
    let _24: u32;
    let _25: ();
    let mut _26: std::fmt::Arguments<'_>;
    let mut _27: &[&str];
    let mut _28: &[core::fmt::rt::Argument<'_>];
    let _29: &[core::fmt::rt::Argument<'_>; 1];
    let _30: [core::fmt::rt::Argument<'_>; 1];
    let mut _31: core::fmt::rt::Argument<'_>;
    let _32: &&u32;
    let _33: &u32;
    let mut _34: &[core::fmt::rt::Placeholder];
    let _35: &[core::fmt::rt::Placeholder; 1];
    let _36: [core::fmt::rt::Placeholder; 1];
    let mut _37: core::fmt::rt::Placeholder;
    let mut _38: core::fmt::rt::Alignment;
    let mut _39: core::fmt::rt::Count;
    let mut _40: core::fmt::rt::Count;
    let mut _41: core::fmt::rt::UnsafeArg;
    let _42: !;
    let mut _43: u32;
    let mut _44: u32;
    let _45: u32;
    let _46: ();
    let mut _47: std::fmt::Arguments<'_>;
    let mut _48: &[&str];
    let mut _49: &[core::fmt::rt::Argument<'_>];
    let _50: &[core::fmt::rt::Argument<'_>; 1];
    let _51: [core::fmt::rt::Argument<'_>; 1];
    let mut _52: core::fmt::rt::Argument<'_>;
    let _53: &&u32;
    let _54: &u32;
    let mut _55: &[core::fmt::rt::Placeholder];
    let _56: &[core::fmt::rt::Placeholder; 1];
    let _57: [core::fmt::rt::Placeholder; 1];
    let mut _58: core::fmt::rt::Placeholder;
    let mut _59: core::fmt::rt::Alignment;
    let mut _60: core::fmt::rt::Count;
    let mut _61: core::fmt::rt::Count;
    let mut _62: core::fmt::rt::UnsafeArg;
    let _63: !;
    let mut _64: std::option::Option<NoDerive>;
    let mut _65: isize;
    let mut _66: std::option::Option<NoDerive>;
    let _67: std::option::Option<NoDerive>;
    let _68: ();
    let mut _69: std::fmt::Arguments<'_>;
    let mut _70: &[&str];
    let mut _71: &[core::fmt::rt::Argument<'_>];
    let _72: &[core::fmt::rt::Argument<'_>; 1];
    let _73: [core::fmt::rt::Argument<'_>; 1];
    let mut _74: core::fmt::rt::Argument<'_>;
    let _75: &&std::option::Option<NoDerive>;
    let _76: &std::option::Option<NoDerive>;
    let mut _77: &[core::fmt::rt::Placeholder];
    let _78: &[core::fmt::rt::Placeholder; 1];
    let _79: [core::fmt::rt::Placeholder; 1];
    let mut _80: core::fmt::rt::Placeholder;
    let mut _81: core::fmt::rt::Alignment;
    let mut _82: core::fmt::rt::Count;
    let mut _83: core::fmt::rt::Count;
    let mut _84: core::fmt::rt::UnsafeArg;
    let _85: !;
    let mut _86: (std::option::Option<NoDerive>, std::option::Option<NoDerive>);
    let mut _87: std::option::Option<NoDerive>;
    let mut _88: std::option::Option<NoDerive>;
    let mut _89: isize;
    let mut _90: isize;
    let mut _91: (std::option::Option<NoDerive>, std::option::Option<NoDerive>);
    let _92: (std::option::Option<NoDerive>, std::option::Option<NoDerive>);
    let _93: ();
    let mut _94: std::fmt::Arguments<'_>;
    let mut _95: &[&str];
    let mut _96: &[core::fmt::rt::Argument<'_>];
    let _97: &[core::fmt::rt::Argument<'_>; 1];
    let _98: [core::fmt::rt::Argument<'_>; 1];
    let mut _99: core::fmt::rt::Argument<'_>;
    let _100: &&(std::option::Option<NoDerive>, std::option::Option<NoDerive>);
    let _101: &(std::option::Option<NoDerive>, std::option::Option<NoDerive>);
    let mut _102: &[core::fmt::rt::Placeholder];
    let _103: &[core::fmt::rt::Placeholder; 1];
    let _104: [core::fmt::rt::Placeholder; 1];
    let mut _105: core::fmt::rt::Placeholder;
    let mut _106: core::fmt::rt::Alignment;
    let mut _107: core::fmt::rt::Count;
    let mut _108: core::fmt::rt::Count;
    let mut _109: core::fmt::rt::UnsafeArg;
    let _110: !;
    let mut _111: std::option::Option<NoDerive>;
    let mut _112: isize;
    let mut _113: std::option::Option<NoDerive>;
    let _114: std::option::Option<NoDerive>;
    let _115: ();
    let mut _116: std::fmt::Arguments<'_>;
    let mut _117: &[&str];
    let mut _118: &[core::fmt::rt::Argument<'_>];
    let _119: &[core::fmt::rt::Argument<'_>; 1];
    let _120: [core::fmt::rt::Argument<'_>; 1];
    let mut _121: core::fmt::rt::Argument<'_>;
    let _122: &&std::option::Option<NoDerive>;
    let _123: &std::option::Option<NoDerive>;
    let mut _124: &[core::fmt::rt::Placeholder];
    let _125: &[core::fmt::rt::Placeholder; 1];
    let _126: [core::fmt::rt::Placeholder; 1];
    let mut _127: core::fmt::rt::Placeholder;
    let mut _128: core::fmt::rt::Alignment;
    let mut _129: core::fmt::rt::Count;
    let mut _130: core::fmt::rt::Count;
    let mut _131: core::fmt::rt::UnsafeArg;
    let _132: !;
    let mut _133: [std::option::Option<NoDerive>; 2];
    let mut _134: std::option::Option<NoDerive>;
    let mut _135: isize;
    let mut _136: isize;
    let mut _137: [std::option::Option<NoDerive>; 2];
    let _138: [std::option::Option<NoDerive>; 2];
    let _139: ();
    let mut _140: std::fmt::Arguments<'_>;
    let mut _141: &[&str];
    let mut _142: &[core::fmt::rt::Argument<'_>];
    let _143: &[core::fmt::rt::Argument<'_>; 1];
    let _144: [core::fmt::rt::Argument<'_>; 1];
    let mut _145: core::fmt::rt::Argument<'_>;
    let _146: &&[std::option::Option<NoDerive>; 2];
    let _147: &[std::option::Option<NoDerive>; 2];
    let mut _148: &[core::fmt::rt::Placeholder];
    let _149: &[core::fmt::rt::Placeholder; 1];
    let _150: [core::fmt::rt::Placeholder; 1];
    let mut _151: core::fmt::rt::Placeholder;
    let mut _152: core::fmt::rt::Alignment;
    let mut _153: core::fmt::rt::Count;
    let mut _154: core::fmt::rt::Count;
    let mut _155: core::fmt::rt::UnsafeArg;
    let _156: !;
    let mut _157: [std::option::Option<NoDerive>; 2];
    let mut _158: std::option::Option<NoDerive>;
    let mut _159: std::option::Option<NoDerive>;
    let mut _160: isize;
    let mut _161: isize;
    let mut _162: [std::option::Option<NoDerive>; 2];
    let _163: [std::option::Option<NoDerive>; 2];
    let _164: ();
    let mut _165: std::fmt::Arguments<'_>;
    let mut _166: &[&str];
    let mut _167: &[core::fmt::rt::Argument<'_>];
    let _168: &[core::fmt::rt::Argument<'_>; 1];
    let _169: [core::fmt::rt::Argument<'_>; 1];
    let mut _170: core::fmt::rt::Argument<'_>;
    let _171: &&[std::option::Option<NoDerive>; 2];
    let _172: &[std::option::Option<NoDerive>; 2];
    let mut _173: &[core::fmt::rt::Placeholder];
    let _174: &[core::fmt::rt::Placeholder; 1];
    let _175: [core::fmt::rt::Placeholder; 1];
    let mut _176: core::fmt::rt::Placeholder;
    let mut _177: core::fmt::rt::Alignment;
    let mut _178: core::fmt::rt::Count;
    let mut _179: core::fmt::rt::Count;
    let mut _180: core::fmt::rt::UnsafeArg;
    let _181: !;
    let mut _182: std::option::Option<NoDerive>;
    let mut _183: isize;
    let mut _184: std::option::Option<NoDerive>;
    let _185: std::option::Option<NoDerive>;
    let _186: ();
    let mut _187: std::fmt::Arguments<'_>;
    let mut _188: &[&str];
    let mut _189: &[core::fmt::rt::Argument<'_>];
    let _190: &[core::fmt::rt::Argument<'_>; 1];
    let _191: [core::fmt::rt::Argument<'_>; 1];
    let mut _192: core::fmt::rt::Argument<'_>;
    let _193: &&std::option::Option<NoDerive>;
    let _194: &std::option::Option<NoDerive>;
    let mut _195: &[core::fmt::rt::Placeholder];
    let _196: &[core::fmt::rt::Placeholder; 1];
    let _197: [core::fmt::rt::Placeholder; 1];
    let mut _198: core::fmt::rt::Placeholder;
    let mut _199: core::fmt::rt::Alignment;
    let mut _200: core::fmt::rt::Count;
    let mut _201: core::fmt::rt::Count;
    let mut _202: core::fmt::rt::UnsafeArg;
    let _203: !;
    let mut _204: std::option::Option<NoDerive>;
    let mut _205: isize;
    let mut _206: std::option::Option<NoDerive>;
    let _207: std::option::Option<NoDerive>;
    let _208: ();
    let mut _209: std::fmt::Arguments<'_>;
    let mut _210: &[&str];
    let mut _211: &[core::fmt::rt::Argument<'_>];
    let _212: &[core::fmt::rt::Argument<'_>; 1];
    let _213: [core::fmt::rt::Argument<'_>; 1];
    let mut _214: core::fmt::rt::Argument<'_>;
    let _215: &&std::option::Option<NoDerive>;
    let _216: &std::option::Option<NoDerive>;
    let mut _217: &[core::fmt::rt::Placeholder];
    let _218: &[core::fmt::rt::Placeholder; 1];
    let _219: [core::fmt::rt::Placeholder; 1];
    let mut _220: core::fmt::rt::Placeholder;
    let mut _221: core::fmt::rt::Alignment;
    let mut _222: core::fmt::rt::Count;
    let mut _223: core::fmt::rt::Count;
    let mut _224: core::fmt::rt::UnsafeArg;
    let _225: !;
    let mut _226: isize;
    let mut _227: &std::option::Option<NoDerive>;
    let _228: &std::option::Option<NoDerive>;
    let _229: ();
    let mut _230: std::fmt::Arguments<'_>;
    let mut _231: &[&str];
    let mut _232: &[core::fmt::rt::Argument<'_>];
    let _233: &[core::fmt::rt::Argument<'_>; 1];
    let _234: [core::fmt::rt::Argument<'_>; 1];
    let mut _235: core::fmt::rt::Argument<'_>;
    let _236: &&&std::option::Option<NoDerive>;
    let _237: &&std::option::Option<NoDerive>;
    let mut _238: &[core::fmt::rt::Placeholder];
    let _239: &[core::fmt::rt::Placeholder; 1];
    let _240: [core::fmt::rt::Placeholder; 1];
    let mut _241: core::fmt::rt::Placeholder;
    let mut _242: core::fmt::rt::Alignment;
    let mut _243: core::fmt::rt::Count;
    let mut _244: core::fmt::rt::Count;
    let mut _245: core::fmt::rt::UnsafeArg;
    let _246: !;
    let mut _248: &std::option::Option<NoDerive>;
    scope 1 {
        debug tmp => _3;
        let mut _258: &[&str; 2];
        scope 2 {
        }
    }
    scope 3 {
        debug tmp => _24;
        let mut _257: &[&str; 2];
        scope 4 {
        }
    }
    scope 5 {
        debug tmp => _45;
        let mut _256: &[&str; 2];
        scope 6 {
        }
    }
    scope 7 {
        debug tmp => _67;
        let mut _255: &[&str; 2];
        scope 8 {
        }
    }
    scope 9 {
        debug tmp => _92;
        let mut _254: &[&str; 2];
        scope 10 {
        }
    }
    scope 11 {
        debug tmp => _114;
        let mut _253: &[&str; 2];
        scope 12 {
        }
    }
    scope 13 {
        debug tmp => _138;
        let mut _252: &[&str; 2];
        scope 14 {
        }
    }
    scope 15 {
        debug tmp => _163;
        let mut _251: &[&str; 2];
        scope 16 {
        }
    }
    scope 17 {
        debug tmp => _185;
        let mut _250: &[&str; 2];
        scope 18 {
        }
    }
    scope 19 {
        debug tmp => _207;
        let mut _249: &[&str; 2];
        scope 20 {
        }
    }
    scope 21 {
        debug tmp => _228;
        let mut _247: &[&str; 2];
        scope 22 {
        }
    }

    bb0: {
        _1 = const 1_u32;
        switchInt(_1) -> [1: bb2, otherwise: bb1];
    }

    bb1: {
        _21 = begin_panic::<&str>(const "whoops") -> unwind continue;
    }

    bb2: {
        _2 = const _;
        _3 = _2;
        _258 = const _;
        _6 = _258 as &[&str] (Pointer(Unsize));
        _12 = &_3;
        _11 = &_12;
        _10 = core::fmt::rt::Argument::<'_>::new_debug::<&u32>(_11) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _17 = core::fmt::rt::Alignment::Unknown;
        _18 = core::fmt::rt::Count::Implied;
        _19 = core::fmt::rt::Count::Implied;
        _16 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _17, const 4_u32, move _18, move _19) -> [return: bb4, unwind continue];
    }

    bb4: {
        _15 = [move _16];
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _20 = core::fmt::rt::UnsafeArg::new() -> [return: bb5, unwind continue];
    }

    bb5: {
        _5 = Arguments::<'_>::new_v1_formatted(move _6, move _7, move _13, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb6, unwind continue];
    }

    bb6: {
        _4 = _eprint(move _5) -> [return: bb7, unwind continue];
    }

    bb7: {
        _22 = const 1_u32;
        switchInt(_22) -> [1: bb9, otherwise: bb8];
    }

    bb8: {
        _42 = begin_panic::<&str>(const "whoops") -> unwind continue;
    }

    bb9: {
        _23 = const _;
        _24 = _23;
        _257 = const _;
        _27 = _257 as &[&str] (Pointer(Unsize));
        _33 = &_24;
        _32 = &_33;
        _31 = core::fmt::rt::Argument::<'_>::new_debug::<&u32>(_32) -> [return: bb10, unwind continue];
    }

    bb10: {
        _30 = [move _31];
        _29 = &_30;
        _28 = _29 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _38 = core::fmt::rt::Alignment::Unknown;
        _39 = core::fmt::rt::Count::Implied;
        _40 = core::fmt::rt::Count::Implied;
        _37 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _38, const 4_u32, move _39, move _40) -> [return: bb11, unwind continue];
    }

    bb11: {
        _36 = [move _37];
        _35 = &_36;
        _34 = _35 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _41 = core::fmt::rt::UnsafeArg::new() -> [return: bb12, unwind continue];
    }

    bb12: {
        _26 = Arguments::<'_>::new_v1_formatted(move _27, move _28, move _34, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb13, unwind continue];
    }

    bb13: {
        _25 = _eprint(move _26) -> [return: bb14, unwind continue];
    }

    bb14: {
        _43 = const 1_u32;
        switchInt(_43) -> [1: bb16, otherwise: bb15];
    }

    bb15: {
        _63 = begin_panic::<&str>(const "whoops") -> unwind continue;
    }

    bb16: {
        _44 = const _;
        _45 = _44;
        _256 = const _;
        _48 = _256 as &[&str] (Pointer(Unsize));
        _54 = &_45;
        _53 = &_54;
        _52 = core::fmt::rt::Argument::<'_>::new_debug::<&u32>(_53) -> [return: bb17, unwind continue];
    }

    bb17: {
        _51 = [move _52];
        _50 = &_51;
        _49 = _50 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _59 = core::fmt::rt::Alignment::Unknown;
        _60 = core::fmt::rt::Count::Implied;
        _61 = core::fmt::rt::Count::Implied;
        _58 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _59, const 4_u32, move _60, move _61) -> [return: bb18, unwind continue];
    }

    bb18: {
        _57 = [move _58];
        _56 = &_57;
        _55 = _56 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _62 = core::fmt::rt::UnsafeArg::new() -> [return: bb19, unwind continue];
    }

    bb19: {
        _47 = Arguments::<'_>::new_v1_formatted(move _48, move _49, move _55, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb20, unwind continue];
    }

    bb20: {
        _46 = _eprint(move _47) -> [return: bb21, unwind continue];
    }

    bb21: {
        _64 = Option::<NoDerive>::None;
        _65 = discriminant(_64);
        switchInt(move _65) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _85 = begin_panic::<&str>(const "whoops") -> unwind continue;
    }

    bb23: {
        _66 = const _;
        _67 = _66;
        _255 = const _;
        _70 = _255 as &[&str] (Pointer(Unsize));
        _76 = &_67;
        _75 = &_76;
        _74 = core::fmt::rt::Argument::<'_>::new_debug::<&Option<NoDerive>>(_75) -> [return: bb24, unwind continue];
    }

    bb24: {
        _73 = [move _74];
        _72 = &_73;
        _71 = _72 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _81 = core::fmt::rt::Alignment::Unknown;
        _82 = core::fmt::rt::Count::Implied;
        _83 = core::fmt::rt::Count::Implied;
        _80 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _81, const 4_u32, move _82, move _83) -> [return: bb25, unwind continue];
    }

    bb25: {
        _79 = [move _80];
        _78 = &_79;
        _77 = _78 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _84 = core::fmt::rt::UnsafeArg::new() -> [return: bb26, unwind continue];
    }

    bb26: {
        _69 = Arguments::<'_>::new_v1_formatted(move _70, move _71, move _77, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb27, unwind continue];
    }

    bb27: {
        _68 = _eprint(move _69) -> [return: bb28, unwind continue];
    }

    bb28: {
        _87 = Option::<NoDerive>::None;
        _88 = Option::<NoDerive>::None;
        _86 = (move _87, move _88);
        _90 = discriminant((_86.0: std::option::Option<NoDerive>));
        switchInt(move _90) -> [0: bb29, otherwise: bb30];
    }

    bb29: {
        _89 = discriminant((_86.1: std::option::Option<NoDerive>));
        switchInt(move _89) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        _110 = begin_panic::<&str>(const "whoops") -> unwind continue;
    }

    bb31: {
        _91 = const _;
        _92 = _91;
        _254 = const _;
        _95 = _254 as &[&str] (Pointer(Unsize));
        _101 = &_92;
        _100 = &_101;
        _99 = core::fmt::rt::Argument::<'_>::new_debug::<&(Option<NoDerive>, Option<NoDerive>)>(_100) -> [return: bb32, unwind continue];
    }

    bb32: {
        _98 = [move _99];
        _97 = &_98;
        _96 = _97 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _106 = core::fmt::rt::Alignment::Unknown;
        _107 = core::fmt::rt::Count::Implied;
        _108 = core::fmt::rt::Count::Implied;
        _105 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _106, const 4_u32, move _107, move _108) -> [return: bb33, unwind continue];
    }

    bb33: {
        _104 = [move _105];
        _103 = &_104;
        _102 = _103 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _109 = core::fmt::rt::UnsafeArg::new() -> [return: bb34, unwind continue];
    }

    bb34: {
        _94 = Arguments::<'_>::new_v1_formatted(move _95, move _96, move _102, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb35, unwind continue];
    }

    bb35: {
        _93 = _eprint(move _94) -> [return: bb36, unwind continue];
    }

    bb36: {
        _111 = Option::<NoDerive>::None;
        _112 = discriminant(_111);
        switchInt(move _112) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _132 = begin_panic::<&str>(const "whoops") -> unwind continue;
    }

    bb38: {
        _113 = const _;
        _114 = _113;
        _253 = const _;
        _117 = _253 as &[&str] (Pointer(Unsize));
        _123 = &_114;
        _122 = &_123;
        _121 = core::fmt::rt::Argument::<'_>::new_debug::<&Option<NoDerive>>(_122) -> [return: bb39, unwind continue];
    }

    bb39: {
        _120 = [move _121];
        _119 = &_120;
        _118 = _119 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _128 = core::fmt::rt::Alignment::Unknown;
        _129 = core::fmt::rt::Count::Implied;
        _130 = core::fmt::rt::Count::Implied;
        _127 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _128, const 4_u32, move _129, move _130) -> [return: bb40, unwind continue];
    }

    bb40: {
        _126 = [move _127];
        _125 = &_126;
        _124 = _125 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _131 = core::fmt::rt::UnsafeArg::new() -> [return: bb41, unwind continue];
    }

    bb41: {
        _116 = Arguments::<'_>::new_v1_formatted(move _117, move _118, move _124, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb42, unwind continue];
    }

    bb42: {
        _115 = _eprint(move _116) -> [return: bb43, unwind continue];
    }

    bb43: {
        _134 = Option::<NoDerive>::None;
        _133 = [move _134; 2];
        _136 = discriminant(_133[0 of 2]);
        switchInt(move _136) -> [0: bb44, otherwise: bb45];
    }

    bb44: {
        _135 = discriminant(_133[1 of 2]);
        switchInt(move _135) -> [0: bb46, otherwise: bb45];
    }

    bb45: {
        _156 = begin_panic::<&str>(const "whoops") -> unwind continue;
    }

    bb46: {
        _137 = const _;
        _138 = _137;
        _252 = const _;
        _141 = _252 as &[&str] (Pointer(Unsize));
        _147 = &_138;
        _146 = &_147;
        _145 = core::fmt::rt::Argument::<'_>::new_debug::<&[Option<NoDerive>; 2]>(_146) -> [return: bb47, unwind continue];
    }

    bb47: {
        _144 = [move _145];
        _143 = &_144;
        _142 = _143 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _152 = core::fmt::rt::Alignment::Unknown;
        _153 = core::fmt::rt::Count::Implied;
        _154 = core::fmt::rt::Count::Implied;
        _151 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _152, const 4_u32, move _153, move _154) -> [return: bb48, unwind continue];
    }

    bb48: {
        _150 = [move _151];
        _149 = &_150;
        _148 = _149 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _155 = core::fmt::rt::UnsafeArg::new() -> [return: bb49, unwind continue];
    }

    bb49: {
        _140 = Arguments::<'_>::new_v1_formatted(move _141, move _142, move _148, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb50, unwind continue];
    }

    bb50: {
        _139 = _eprint(move _140) -> [return: bb51, unwind continue];
    }

    bb51: {
        _158 = Option::<NoDerive>::None;
        _159 = Option::<NoDerive>::None;
        _157 = [move _158, move _159];
        _161 = discriminant(_157[0 of 2]);
        switchInt(move _161) -> [0: bb52, otherwise: bb53];
    }

    bb52: {
        _160 = discriminant(_157[1 of 2]);
        switchInt(move _160) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _181 = begin_panic::<&str>(const "whoops") -> unwind continue;
    }

    bb54: {
        _162 = const _;
        _163 = _162;
        _251 = const _;
        _166 = _251 as &[&str] (Pointer(Unsize));
        _172 = &_163;
        _171 = &_172;
        _170 = core::fmt::rt::Argument::<'_>::new_debug::<&[Option<NoDerive>; 2]>(_171) -> [return: bb55, unwind continue];
    }

    bb55: {
        _169 = [move _170];
        _168 = &_169;
        _167 = _168 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _177 = core::fmt::rt::Alignment::Unknown;
        _178 = core::fmt::rt::Count::Implied;
        _179 = core::fmt::rt::Count::Implied;
        _176 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _177, const 4_u32, move _178, move _179) -> [return: bb56, unwind continue];
    }

    bb56: {
        _175 = [move _176];
        _174 = &_175;
        _173 = _174 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _180 = core::fmt::rt::UnsafeArg::new() -> [return: bb57, unwind continue];
    }

    bb57: {
        _165 = Arguments::<'_>::new_v1_formatted(move _166, move _167, move _173, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb58, unwind continue];
    }

    bb58: {
        _164 = _eprint(move _165) -> [return: bb59, unwind continue];
    }

    bb59: {
        _182 = Option::<NoDerive>::None;
        _183 = discriminant(_182);
        switchInt(move _183) -> [0: bb61, otherwise: bb60];
    }

    bb60: {
        _203 = begin_panic::<&str>(const "whoops") -> unwind continue;
    }

    bb61: {
        _184 = const _;
        _185 = _184;
        _250 = const _;
        _188 = _250 as &[&str] (Pointer(Unsize));
        _194 = &_185;
        _193 = &_194;
        _192 = core::fmt::rt::Argument::<'_>::new_debug::<&Option<NoDerive>>(_193) -> [return: bb62, unwind continue];
    }

    bb62: {
        _191 = [move _192];
        _190 = &_191;
        _189 = _190 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _199 = core::fmt::rt::Alignment::Unknown;
        _200 = core::fmt::rt::Count::Implied;
        _201 = core::fmt::rt::Count::Implied;
        _198 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _199, const 4_u32, move _200, move _201) -> [return: bb63, unwind continue];
    }

    bb63: {
        _197 = [move _198];
        _196 = &_197;
        _195 = _196 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _202 = core::fmt::rt::UnsafeArg::new() -> [return: bb64, unwind continue];
    }

    bb64: {
        _187 = Arguments::<'_>::new_v1_formatted(move _188, move _189, move _195, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb65, unwind continue];
    }

    bb65: {
        _186 = _eprint(move _187) -> [return: bb66, unwind continue];
    }

    bb66: {
        _204 = Option::<NoDerive>::None;
        _205 = discriminant(_204);
        switchInt(move _205) -> [0: bb68, otherwise: bb67];
    }

    bb67: {
        _225 = begin_panic::<&str>(const "whoops") -> unwind continue;
    }

    bb68: {
        _206 = const _;
        _207 = _206;
        _249 = const _;
        _210 = _249 as &[&str] (Pointer(Unsize));
        _216 = &_207;
        _215 = &_216;
        _214 = core::fmt::rt::Argument::<'_>::new_debug::<&Option<NoDerive>>(_215) -> [return: bb69, unwind continue];
    }

    bb69: {
        _213 = [move _214];
        _212 = &_213;
        _211 = _212 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _221 = core::fmt::rt::Alignment::Unknown;
        _222 = core::fmt::rt::Count::Implied;
        _223 = core::fmt::rt::Count::Implied;
        _220 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _221, const 4_u32, move _222, move _223) -> [return: bb70, unwind continue];
    }

    bb70: {
        _219 = [move _220];
        _218 = &_219;
        _217 = _218 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _224 = core::fmt::rt::UnsafeArg::new() -> [return: bb71, unwind continue];
    }

    bb71: {
        _209 = Arguments::<'_>::new_v1_formatted(move _210, move _211, move _217, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb72, unwind continue];
    }

    bb72: {
        _208 = _eprint(move _209) -> [return: bb73, unwind continue];
    }

    bb73: {
        _248 = const _;
        _226 = discriminant((*_248));
        switchInt(move _226) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        _246 = begin_panic::<&str>(const "whoops") -> unwind continue;
    }

    bb75: {
        _227 = const _;
        _228 = _227;
        _247 = const _;
        _231 = _247 as &[&str] (Pointer(Unsize));
        _237 = &_228;
        _236 = &_237;
        _235 = core::fmt::rt::Argument::<'_>::new_debug::<&&Option<NoDerive>>(_236) -> [return: bb76, unwind continue];
    }

    bb76: {
        _234 = [move _235];
        _233 = &_234;
        _232 = _233 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _242 = core::fmt::rt::Alignment::Unknown;
        _243 = core::fmt::rt::Count::Implied;
        _244 = core::fmt::rt::Count::Implied;
        _241 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _242, const 4_u32, move _243, move _244) -> [return: bb77, unwind continue];
    }

    bb77: {
        _240 = [move _241];
        _239 = &_240;
        _238 = _239 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _245 = core::fmt::rt::UnsafeArg::new() -> [return: bb78, unwind continue];
    }

    bb78: {
        _230 = Arguments::<'_>::new_v1_formatted(move _231, move _232, move _238, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb79, unwind continue];
    }

    bb79: {
        _229 = _eprint(move _230) -> [return: bb80, unwind continue];
    }

    bb80: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "[ui/consts/const_in_pattern/accept_structural.rs:65] ADDR_OF = ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Option<NoDerive> = {
    let mut _0: &std::option::Option<NoDerive>;
    let mut _1: std::option::Option<NoDerive>;

    bb0: {
        _1 = Option::<NoDerive>::None;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "[ui/consts/const_in_pattern/accept_structural.rs:62] BLOCK = ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "[ui/consts/const_in_pattern/accept_structural.rs:59] NoDerive::ASSOC = ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "[ui/consts/const_in_pattern/accept_structural.rs:55] REPEAT = ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "[ui/consts/const_in_pattern/accept_structural.rs:52] ARRAY = ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "[ui/consts/const_in_pattern/accept_structural.rs:49] TYPE_ASCRIPTION = ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "[ui/consts/const_in_pattern/accept_structural.rs:46] TUPLE = ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "[ui/consts/const_in_pattern/accept_structural.rs:43] INDIRECT = ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "[ui/consts/const_in_pattern/accept_structural.rs:39] ONE_CAST = ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "[ui/consts/const_in_pattern/accept_structural.rs:35] FIELD2 = ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "[ui/consts/const_in_pattern/accept_structural.rs:33] FIELD1 = ", const "\n"];
        _0 = &_1;
        return;
    }
}

const FIELD1: u32 = {
    let mut _0: u32;
    let mut _1: NoPartialEq;

    bb0: {
        StorageLive(_1);
        _1 = NoPartialEq(const 1_u32);
        _0 = (_1.0: u32);
        StorageDead(_1);
        return;
    }
}

const FIELD2: u32 = {
    let mut _0: u32;
    let mut _1: NoDerive;

    bb0: {
        StorageLive(_1);
        _1 = NoDerive(const 1_u32);
        _0 = (_1.0: u32);
        StorageDead(_1);
        return;
    }
}

CLike::One::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 1_isize;
        return;
    }
}

CLike::Two::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 2_isize;
        return;
    }
}

const ONE_CAST: u32 = {
    let mut _0: u32;
    let mut _1: isize;
    let mut _2: (isize, bool);

    bb0: {
        StorageLive(_1);
        _2 = CheckedAdd(const _, const 0_isize);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _1 = move (_2.0: isize);
        _0 = move _1 as u32 (IntToInt);
        StorageDead(_1);
        return;
    }
}

const NO_DERIVE_NONE: Option<NoDerive> = {
    let mut _0: std::option::Option<NoDerive>;

    bb0: {
        _0 = Option::<NoDerive>::None;
        return;
    }
}

const INDIRECT: Option<NoDerive> = {
    let mut _0: std::option::Option<NoDerive>;

    bb0: {
        _0 = const _;
        return;
    }
}

const TUPLE: (Option<NoDerive>, Option<NoDerive>) = {
    let mut _0: (std::option::Option<NoDerive>, std::option::Option<NoDerive>);
    let mut _1: std::option::Option<NoDerive>;
    let mut _2: std::option::Option<NoDerive>;

    bb0: {
        StorageLive(_1);
        _1 = Option::<NoDerive>::None;
        StorageLive(_2);
        _2 = Option::<NoDerive>::None;
        _0 = (move _1, move _2);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const TYPE_ASCRIPTION: Option<NoDerive> = {
    let mut _0: std::option::Option<NoDerive>;
    let mut _1: std::option::Option<NoDerive>;

    bb0: {
        StorageLive(_1);
        _1 = Option::<NoDerive>::None;
        _0 = _1;
        StorageDead(_1);
        return;
    }
}

const ARRAY: [Option<NoDerive>; 2] = {
    let mut _0: [std::option::Option<NoDerive>; 2];
    let mut _1: std::option::Option<NoDerive>;
    let mut _2: std::option::Option<NoDerive>;

    bb0: {
        StorageLive(_1);
        _1 = Option::<NoDerive>::None;
        StorageLive(_2);
        _2 = Option::<NoDerive>::None;
        _0 = [move _1, move _2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

ARRAY::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

const REPEAT: [Option<NoDerive>; 2] = {
    let mut _0: [std::option::Option<NoDerive>; 2];
    let mut _1: std::option::Option<NoDerive>;

    bb0: {
        StorageLive(_1);
        _1 = Option::<NoDerive>::None;
        _0 = [move _1; 2];
        StorageDead(_1);
        return;
    }
}

REPEAT::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

REPEAT::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

const main::<impl at ui/consts/const_in_pattern/accept_structural.rs:58:5: 58:28>::ASSOC: Option<NoDerive> = {
    let mut _0: std::option::Option<NoDerive>;

    bb0: {
        _0 = Option::<NoDerive>::None;
        return;
    }
}

const BLOCK: Option<NoDerive> = {
    let mut _0: std::option::Option<NoDerive>;
    let _1: NoDerive;

    bb0: {
        StorageLive(_1);
        _1 = NoDerive(const 10_u32);
        StorageDead(_1);
        _0 = Option::<NoDerive>::None;
        return;
    }
}

const ADDR_OF: &Option<NoDerive> = {
    let mut _0: &std::option::Option<NoDerive>;
    let _1: &std::option::Option<NoDerive>;
    let _2: std::option::Option<NoDerive>;
    let mut _3: &std::option::Option<NoDerive>;

    bb0: {
        StorageLive(_1);
        _3 = const _;
        _1 = &(*_3);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in ADDR_OF: &Option<NoDerive> = {
    let mut _0: &std::option::Option<NoDerive>;
    let mut _1: std::option::Option<NoDerive>;

    bb0: {
        _1 = Option::<NoDerive>::None;
        _0 = &_1;
        return;
    }
}

fn NoPartialEq(_1: u32) -> NoPartialEq {
    let mut _0: NoPartialEq;

    bb0: {
        _0 = NoPartialEq(move _1);
        return;
    }
}

// MIR FOR CTFE
fn NoPartialEq(_1: u32) -> NoPartialEq {
    let mut _0: NoPartialEq;

    bb0: {
        _0 = NoPartialEq(move _1);
        return;
    }
}

fn NoDerive(_1: u32) -> NoDerive {
    let mut _0: NoDerive;

    bb0: {
        _0 = NoDerive(move _1);
        return;
    }
}

// MIR FOR CTFE
fn NoDerive(_1: u32) -> NoDerive {
    let mut _0: NoDerive;

    bb0: {
        _0 = NoDerive(move _1);
        return;
    }
}
