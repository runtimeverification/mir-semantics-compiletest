// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const FOO: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 10_isize;
        return;
    }
}

const BAR: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 3_isize;
        return;
    }
}

const ZST: &() = {
    let mut _0: &();
    scope 1 {
    }

    bb0: {
        _0 = const 1_usize as &() (Transmute);
        return;
    }
}

const ZST_ARR: &[u8; 0] = {
    let mut _0: &[u8; 0];
    scope 1 {
    }

    bb0: {
        _0 = const 1_usize as &[u8; 0] (Transmute);
        return;
    }
}

ZST_ARR::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn foo() -> isize {
    let mut _0: isize;

    bb0: {
        _0 = const 4_isize;
        return;
    }
}

// MIR FOR CTFE
fn foo() -> isize {
    let mut _0: isize;

    bb0: {
        _0 = const 4_isize;
        return;
    }
}

const BOO: isize = {
    let mut _0: isize;

    bb0: {
        ConstEvalCounter;
        _0 = foo() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: isize;
    let mut _3: (&i32, &i32);
    let mut _4: &i32;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: i32;
    let mut _10: i32;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&i32, &i32);
    let mut _16: &i32;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: i32;
    let mut _22: i32;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&i32, &i32);
    let mut _28: &i32;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: i32;
    let mut _34: i32;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => const 3_isize;
        let _2: i32;
        scope 2 {
            debug y => _2;
            let _5: &i32;
            let _6: &i32;
            let _14: i32;
            let mut _40: &i32;
            scope 3 {
                debug left_val => _5;
                debug right_val => _6;
                let _11: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _11;
                }
            }
            scope 5 {
                debug z => const 9_i32;
                let _17: &i32;
                let _18: &i32;
                let _26: i32;
                let mut _39: &i32;
                scope 6 {
                    debug left_val => _17;
                    debug right_val => _18;
                    let _23: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _23;
                    }
                }
                scope 8 {
                    debug z => const 10_i32;
                    let _29: &i32;
                    let _30: &i32;
                    let mut _38: &i32;
                    scope 9 {
                        debug left_val => _29;
                        debug right_val => _30;
                        let _35: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _35;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 3_isize;
        switchInt(_1) -> [10: bb2, 3: bb3, 4: bb4, otherwise: bb1];
    }

    bb1: {
        _2 = const 3_i32;
        goto -> bb5;
    }

    bb2: {
        _2 = const 1_i32;
        goto -> bb5;
    }

    bb3: {
        _2 = const 2_i32;
        goto -> bb5;
    }

    bb4: {
        _2 = const 4_i32;
        goto -> bb5;
    }

    bb5: {
        _4 = &_2;
        _40 = const _;
        _3 = (move _4, _40);
        _5 = (_3.0: &i32);
        _6 = (_3.1: &i32);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<i32, i32>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb7: {
        _14 = const 9_i32;
        _16 = &_14;
        _39 = const _;
        _15 = (move _16, _39);
        _17 = (_15.0: &i32);
        _18 = (_15.1: &i32);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<i32, i32>(move _23, _17, _18, move _25) -> unwind continue;
    }

    bb9: {
        _26 = const 10_i32;
        _28 = &_26;
        _38 = const _;
        _27 = (move _28, _38);
        _29 = (_27.0: &i32);
        _30 = (_27.1: &i32);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<i32, i32>(move _35, _29, _30, move _37) -> unwind continue;
    }

    bb11: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 10_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 9_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}
