// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/issue-67696-const-prop-ice.rs:12:1: 12:21>::foo(_1: &[for<'a> fn(&'a ())]) -> [for<'a> fn(&'a ())] {
    debug self => _1;                    // in scope 0 at ui/consts/issue-67696-const-prop-ice.rs:13:12: 13:17
    let mut _0: [for<'a> fn(&'a ())];    // return place in scope 0 at ui/consts/issue-67696-const-prop-ice.rs:13:22: 13:26
    let mut _2: &[for<'a> fn(&'a ())];   // in scope 0 at ui/consts/issue-67696-const-prop-ice.rs:13:47: 13:60
    let mut _3: &[for<'a> fn(&'a ()); 0]; // in scope 0 at ui/consts/issue-67696-const-prop-ice.rs:13:48: 13:51
    let _4: &[for<'a> fn(&'a ()); 0];    // in scope 0 at ui/consts/issue-67696-const-prop-ice.rs:13:48: 13:51
    let mut _5: &[for<'a> fn(&'a ()); 0]; // in scope 0 at ui/consts/issue-67696-const-prop-ice.rs:13:48: 13:51

    bb0: {
        _5 = const _;                    // scope 0 at ui/consts/issue-67696-const-prop-ice.rs:13:48: 13:51
                                         // mir::Constant
                                         // + span: ui/consts/issue-67696-const-prop-ice.rs:13:48: 13:51
                                         // + literal: Const { ty: &[for<'a> fn(&'a ()); 0], val: Unevaluated(<[for<'a> fn(&'a ())] as A>::foo, [], Some(promoted[0])) }
        _4 = _5;                         // scope 0 at ui/consts/issue-67696-const-prop-ice.rs:13:48: 13:51
        _3 = _4;                         // scope 0 at ui/consts/issue-67696-const-prop-ice.rs:13:48: 13:51
        _2 = move _3 as &[for<'a> fn(&'a ())] (Pointer(Unsize)); // scope 0 at ui/consts/issue-67696-const-prop-ice.rs:13:48: 13:51
        _0 = (*_2);                      // scope 0 at ui/consts/issue-67696-const-prop-ice.rs:13:46: 13:60
        return;                          // scope 0 at ui/consts/issue-67696-const-prop-ice.rs:13:62: 13:62
    }
}

promoted[0] in <impl at ui/consts/issue-67696-const-prop-ice.rs:12:1: 12:21>::foo: &[for<'a> fn(&'a ()); 0] = {
    let mut _0: &[for<'a> fn(&'a ()); 0]; // return place in scope 0 at ui/consts/issue-67696-const-prop-ice.rs:13:48: 13:51
    let mut _1: [for<'a> fn(&'a ()); 0]; // in scope 0 at ui/consts/issue-67696-const-prop-ice.rs:13:49: 13:51

    bb0: {
        _1 = [];                         // scope 0 at ui/consts/issue-67696-const-prop-ice.rs:13:49: 13:51
        _0 = &_1;                        // scope 0 at ui/consts/issue-67696-const-prop-ice.rs:13:48: 13:51
        return;                          // scope 0 at ui/consts/issue-67696-const-prop-ice.rs:13:48: 13:51
    }
}

fn <impl at ui/consts/issue-67696-const-prop-ice.rs:16:1: 16:15>::foo(_1: &i32) -> i32 {
    debug self => _1;                    // in scope 0 at ui/consts/issue-67696-const-prop-ice.rs:17:12: 17:17
    let mut _0: i32;                     // return place in scope 0 at ui/consts/issue-67696-const-prop-ice.rs:17:22: 17:26

    bb0: {
        _0 = const 3_i32;                // scope 0 at ui/consts/issue-67696-const-prop-ice.rs:17:29: 17:30
        return;                          // scope 0 at ui/consts/issue-67696-const-prop-ice.rs:17:32: 17:32
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-67696-const-prop-ice.rs:20:11: 20:11

    bb0: {
        return;                          // scope 0 at ui/consts/issue-67696-const-prop-ice.rs:20:13: 20:13
    }
}
