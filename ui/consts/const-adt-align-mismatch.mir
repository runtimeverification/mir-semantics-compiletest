// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::Bar::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

fn <impl at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: (&Foo, &Foo);
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: isize;
    let mut _13: u32;
    let mut _14: u32;
    let mut _17: &Foo;
    let mut _18: &Foo;
    let mut _19: &Foo;
    let mut _20: &Foo;
    let mut _21: &Foo;
    let mut _22: &Foo;
    let mut _23: &Foo;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _11: &u32;
            let _12: &u32;
            let _15: &[u16; 4];
            let _16: &[u16; 4];
            scope 3 {
                debug __self_0 => _11;
                debug __arg1_0 => _12;
            }
            scope 4 {
                debug __self_0 => _15;
                debug __arg1_0 => _16;
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = (_1, _2);
        _17 = deref_copy (_7.0: &Foo);
        _10 = discriminant((*_17));
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb3: {
        return;
    }

    bb4: {
        _18 = deref_copy (_7.1: &Foo);
        _8 = discriminant((*_18));
        switchInt(move _8) -> [0: bb7, otherwise: bb5];
    }

    bb5: {
        _6 = const true;
        goto -> bb9;
    }

    bb6: {
        _19 = deref_copy (_7.1: &Foo);
        _9 = discriminant((*_19));
        switchInt(move _9) -> [1: bb8, otherwise: bb5];
    }

    bb7: {
        _20 = deref_copy (_7.0: &Foo);
        _11 = &(((*_20) as A).0: u32);
        _21 = deref_copy (_7.1: &Foo);
        _12 = &(((*_21) as A).0: u32);
        _13 = (*_11);
        _14 = (*_12);
        _6 = Eq(move _13, move _14);
        goto -> bb9;
    }

    bb8: {
        _22 = deref_copy (_7.0: &Foo);
        _15 = &(((*_22) as Bar).0: [u16; 4]);
        _23 = deref_copy (_7.1: &Foo);
        _16 = &(((*_23) as Bar).0: [u16; 4]);
        _6 = <[u16; 4] as PartialEq>::eq(_15, _16) -> [return: bb9, unwind continue];
    }

    bb9: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn <impl at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &u32;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&u32;
    let _8: &[u16; 4];
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&[u16; 4];
    let _12: &str;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _12 = const "C";
        _0 = Formatter::<'_>::write_str(_2, _12) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as A).0: u32);
        _5 = const "A";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb5, unwind continue];
    }

    bb4: {
        _8 = &(((*_1) as Bar).0: [u16; 4]);
        _9 = const "Bar";
        _11 = &_8;
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

static FOO: Foo = {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::C;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&Foo, &Foo);
    let _2: &Foo;
    let _3: &Foo;
    let _4: &Foo;
    let mut _5: bool;
    let mut _6: bool;
    let _8: !;
    let mut _9: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _10: (&usize, &usize);
    let _11: &usize;
    let _12: &usize;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: (&usize, &usize);
    let mut _21: &usize;
    let _22: usize;
    let _23: &usize;
    let _24: &usize;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: usize;
    let mut _28: usize;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: &usize;
    let mut _33: &usize;
    let mut _34: &usize;
    let mut _35: &Foo;
    scope 1 {
        debug left_val => _3;
        debug right_val => _4;
        let _7: core::panicking::AssertKind;
        scope 2 {
            debug kind => _7;
        }
    }
    scope 3 {
        debug left_val => _11;
        debug right_val => _12;
        let _17: core::panicking::AssertKind;
        scope 4 {
            debug kind => _17;
        }
    }
    scope 5 {
        debug left_val => _23;
        debug right_val => _24;
        let _29: core::panicking::AssertKind;
        scope 6 {
            debug kind => _29;
        }
    }

    bb0: {
        _2 = const {alloc1: &Foo};
        _35 = const _;
        _1 = (_2, _35);
        _3 = (_1.0: &Foo);
        _4 = (_1.1: &Foo);
        _6 = <Foo as PartialEq>::eq(_3, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _7 = core::panicking::AssertKind::Eq;
        _9 = Option::<Arguments<'_>>::None;
        _8 = core::panicking::assert_failed::<Foo, Foo>(move _7, _3, _4, move _9) -> unwind continue;
    }

    bb3: {
        _34 = const _;
        _33 = const _;
        _10 = (_34, _33);
        _11 = (_10.0: &usize);
        _12 = (_10.1: &usize);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<usize, usize>(move _17, _11, _12, move _19) -> unwind continue;
    }

    bb5: {
        _22 = std::mem::min_align_of::<Foo>() -> [return: bb6, unwind continue];
    }

    bb6: {
        _21 = &_22;
        _32 = const _;
        _20 = (move _21, _32);
        _23 = (_20.0: &usize);
        _24 = (_20.1: &usize);
        _27 = (*_23);
        _28 = (*_24);
        _26 = Eq(move _27, move _28);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<usize, usize>(move _29, _23, _24, move _31) -> unwind continue;
    }

    bb8: {
        return;
    }
}

alloc1 (static: FOO, size: 12, align: 4) {
    02 00 __ __ __ __ __ __ __ __ __ __             │ ..░░░░░░░░░░
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 12_usize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<Foo>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo::C;
        _0 = &_1;
        return;
    }
}

fn Foo::A(_1: u32) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::A(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo::A(_1: u32) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::A(move _1);
        return;
    }
}

fn Foo::Bar(_1: [u16; 4]) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Bar(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo::Bar(_1: [u16; 4]) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Bar(move _1);
        return;
    }
}
