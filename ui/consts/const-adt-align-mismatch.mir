// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::Bar::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-adt-align-mismatch.rs:10:15: 10:16

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/consts/const-adt-align-mismatch.rs:10:15: 10:16
        return;                          // scope 0 at ui/consts/const-adt-align-mismatch.rs:10:15: 10:16
    }
}

fn <impl at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    debug other => _2;                   // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    let _3: isize;                       // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    let mut _4: &Foo;                    // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    let mut _6: &Foo;                    // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    let mut _7: bool;                    // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    let mut _8: isize;                   // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    let mut _9: isize;                   // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    let mut _10: bool;                   // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    let mut _11: (&Foo, &Foo);           // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    let mut _12: &Foo;                   // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    let mut _13: &Foo;                   // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    let mut _14: isize;                  // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    let mut _15: isize;                  // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    let mut _16: isize;                  // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    let mut _19: u32;                    // in scope 0 at ui/consts/const-adt-align-mismatch.rs:9:7: 9:10
    let mut _20: u32;                    // in scope 0 at ui/consts/const-adt-align-mismatch.rs:9:7: 9:10
    let mut _23: &[u16; 4];              // in scope 0 at ui/consts/const-adt-align-mismatch.rs:10:9: 10:17
    let mut _24: &[u16; 4];              // in scope 0 at ui/consts/const-adt-align-mismatch.rs:10:9: 10:17
    let mut _25: &Foo;                   // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    let mut _26: &Foo;                   // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    let mut _27: &Foo;                   // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    let mut _28: &Foo;                   // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    let mut _29: &Foo;                   // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    let mut _30: &Foo;                   // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    let mut _31: &Foo;                   // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
        let _5: isize;                   // in scope 1 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
            let _17: &u32;               // in scope 2 at ui/consts/const-adt-align-mismatch.rs:9:7: 9:10
            let _18: &u32;               // in scope 2 at ui/consts/const-adt-align-mismatch.rs:9:7: 9:10
            let _21: &[u16; 4];          // in scope 2 at ui/consts/const-adt-align-mismatch.rs:10:9: 10:17
            let _22: &[u16; 4];          // in scope 2 at ui/consts/const-adt-align-mismatch.rs:10:9: 10:17
            scope 3 {
                debug __self_0 => _17;   // in scope 3 at ui/consts/const-adt-align-mismatch.rs:9:7: 9:10
                debug __arg1_0 => _18;   // in scope 3 at ui/consts/const-adt-align-mismatch.rs:9:7: 9:10
            }
            scope 4 {
                debug __self_0 => _21;   // in scope 4 at ui/consts/const-adt-align-mismatch.rs:10:9: 10:17
                debug __arg1_0 => _22;   // in scope 4 at ui/consts/const-adt-align-mismatch.rs:10:9: 10:17
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
        _3 = discriminant((*_4));        // scope 0 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
        _6 = _2;                         // scope 1 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
        _5 = discriminant((*_6));        // scope 1 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
        _8 = _3;                         // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
        _9 = _5;                         // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
        _7 = Eq(move _8, move _9);       // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
        goto -> bb3;                     // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
        _13 = _2;                        // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
        _11 = (move _12, move _13);      // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
        _25 = deref_copy (_11.0: &Foo);  // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
        _16 = discriminant((*_25));      // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    }

    bb3: {
        return;                          // scope 0 at ui/consts/const-adt-align-mismatch.rs:7:19: 7:19
    }

    bb4: {
        _26 = deref_copy (_11.1: &Foo);  // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
        _14 = discriminant((*_26));      // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
        switchInt(move _14) -> [0: bb7, otherwise: bb5]; // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    }

    bb5: {
        _10 = const true;                // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
        goto -> bb9;                     // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    }

    bb6: {
        _27 = deref_copy (_11.1: &Foo);  // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
        _15 = discriminant((*_27));      // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
        switchInt(move _15) -> [1: bb8, otherwise: bb5]; // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    }

    bb7: {
        _28 = deref_copy (_11.0: &Foo);  // scope 2 at ui/consts/const-adt-align-mismatch.rs:9:7: 9:10
        _17 = &(((*_28) as A).0: u32);   // scope 2 at ui/consts/const-adt-align-mismatch.rs:9:7: 9:10
        _29 = deref_copy (_11.1: &Foo);  // scope 2 at ui/consts/const-adt-align-mismatch.rs:9:7: 9:10
        _18 = &(((*_29) as A).0: u32);   // scope 2 at ui/consts/const-adt-align-mismatch.rs:9:7: 9:10
        _19 = (*_17);                    // scope 3 at ui/consts/const-adt-align-mismatch.rs:9:7: 9:10
        _20 = (*_18);                    // scope 3 at ui/consts/const-adt-align-mismatch.rs:9:7: 9:10
        _10 = Eq(move _19, move _20);    // scope 3 at ui/consts/const-adt-align-mismatch.rs:9:7: 9:10
        goto -> bb9;                     // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:18: 7:19
    }

    bb8: {
        _30 = deref_copy (_11.0: &Foo);  // scope 2 at ui/consts/const-adt-align-mismatch.rs:10:9: 10:17
        _21 = &(((*_30) as Bar).0: [u16; 4]); // scope 2 at ui/consts/const-adt-align-mismatch.rs:10:9: 10:17
        _31 = deref_copy (_11.1: &Foo);  // scope 2 at ui/consts/const-adt-align-mismatch.rs:10:9: 10:17
        _22 = &(((*_31) as Bar).0: [u16; 4]); // scope 2 at ui/consts/const-adt-align-mismatch.rs:10:9: 10:17
        _23 = _21;                       // scope 4 at ui/consts/const-adt-align-mismatch.rs:10:9: 10:17
        _24 = _22;                       // scope 4 at ui/consts/const-adt-align-mismatch.rs:10:9: 10:17
        _10 = <[u16; 4] as PartialEq>::eq(move _23, move _24) -> bb9; // scope 4 at ui/consts/const-adt-align-mismatch.rs:10:9: 10:17
                                         // mir::Constant
                                         // + span: ui/consts/const-adt-align-mismatch.rs:10:9: 10:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [u16; 4], &'b [u16; 4]) -> bool {<[u16; 4] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _0 = move _10;                   // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
        goto -> bb3;                     // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:10: 7:19
    }
}

fn <impl at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
    debug f => _2;                       // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
    let mut _3: isize;                   // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
    let _4: &u32;                        // in scope 0 at ui/consts/const-adt-align-mismatch.rs:9:7: 9:10
    let mut _5: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
    let mut _6: &str;                    // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
    let _7: &str;                        // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/consts/const-adt-align-mismatch.rs:9:7: 9:10
    let mut _9: &&u32;                   // in scope 0 at ui/consts/const-adt-align-mismatch.rs:9:7: 9:10
    let _10: &&u32;                      // in scope 0 at ui/consts/const-adt-align-mismatch.rs:9:7: 9:10
    let _11: &[u16; 4];                  // in scope 0 at ui/consts/const-adt-align-mismatch.rs:10:9: 10:17
    let mut _12: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
    let mut _13: &str;                   // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
    let _14: &str;                       // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
    let mut _15: &dyn std::fmt::Debug;   // in scope 0 at ui/consts/const-adt-align-mismatch.rs:10:9: 10:17
    let mut _16: &&[u16; 4];             // in scope 0 at ui/consts/const-adt-align-mismatch.rs:10:9: 10:17
    let _17: &&[u16; 4];                 // in scope 0 at ui/consts/const-adt-align-mismatch.rs:10:9: 10:17
    let mut _18: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
    let mut _19: &str;                   // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
    let _20: &str;                       // in scope 0 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/consts/const-adt-align-mismatch.rs:9:7: 9:10
    }
    scope 2 {
        debug __self_0 => _11;           // in scope 2 at ui/consts/const-adt-align-mismatch.rs:10:9: 10:17
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
    }

    bb1: {
        _18 = &mut (*_2);                // scope 0 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
        _20 = const "C";                 // scope 0 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
                                         // mir::Constant
                                         // + span: ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _19 = _20;                       // scope 0 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
        _0 = Formatter::<'_>::write_str(move _18, move _19) -> bb5; // scope 0 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
                                         // mir::Constant
                                         // + span: ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
    }

    bb3: {
        _4 = &(((*_1) as A).0: u32);     // scope 0 at ui/consts/const-adt-align-mismatch.rs:9:7: 9:10
        _5 = &mut (*_2);                 // scope 1 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
        _7 = const "A";                  // scope 1 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
                                         // mir::Constant
                                         // + span: ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 1 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
        _10 = &_4;                       // scope 1 at ui/consts/const-adt-align-mismatch.rs:9:7: 9:10
        _9 = _10;                        // scope 1 at ui/consts/const-adt-align-mismatch.rs:9:7: 9:10
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/consts/const-adt-align-mismatch.rs:9:7: 9:10
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _5, move _6, move _8) -> bb5; // scope 1 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
                                         // mir::Constant
                                         // + span: ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &(((*_1) as Bar).0: [u16; 4]); // scope 0 at ui/consts/const-adt-align-mismatch.rs:10:9: 10:17
        _12 = &mut (*_2);                // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
        _14 = const "Bar";               // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
                                         // mir::Constant
                                         // + span: ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = _14;                       // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
        _17 = &_11;                      // scope 2 at ui/consts/const-adt-align-mismatch.rs:10:9: 10:17
        _16 = _17;                       // scope 2 at ui/consts/const-adt-align-mismatch.rs:10:9: 10:17
        _15 = move _16 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/consts/const-adt-align-mismatch.rs:10:9: 10:17
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _12, move _13, move _15) -> bb5; // scope 2 at ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
                                         // mir::Constant
                                         // + span: ui/consts/const-adt-align-mismatch.rs:7:21: 7:26
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/consts/const-adt-align-mismatch.rs:7:26: 7:26
    }
}

static FOO: Foo = {
    let mut _0: Foo;                     // return place in scope 0 at ui/consts/const-adt-align-mismatch.rs:16:13: 16:16

    bb0: {
        _0 = Foo::C;                     // scope 0 at ui/consts/const-adt-align-mismatch.rs:16:19: 16:25
        return;                          // scope 0 at ui/consts/const-adt-align-mismatch.rs:16:1: 16:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-adt-align-mismatch.rs:18:11: 18:11
    let mut _1: (&Foo, &Foo);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &Foo;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: &Foo;                        // in scope 0 at ui/consts/const-adt-align-mismatch.rs:19:16: 19:19
    let mut _4: &Foo;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: &Foo;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &Foo;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: &Foo;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _20: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _21: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _22: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _23: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _25: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _26: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _27: usize;                      // in scope 0 at ui/consts/const-adt-align-mismatch.rs:21:16: 21:42
    let mut _28: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _29: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _30: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _33: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _34: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _36: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _37: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _38: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _39: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _40: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _41: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _43: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _44: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _45: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _46: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _22;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _23;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _24: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _24;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _29;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _30;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _35: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _35;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = const {alloc1: &Foo};       // scope 0 at ui/consts/const-adt-align-mismatch.rs:19:16: 19:19
                                         // mir::Constant
                                         // + span: ui/consts/const-adt-align-mismatch.rs:19:16: 19:19
                                         // + literal: Const { ty: &Foo, val: Value(Scalar(alloc1)) }
        _2 = _3;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _46 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Foo, val: Unevaluated(main, [], Some(promoted[3])) }
        _4 = _46;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_1.0: &Foo);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_1.1: &Foo);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = _5;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = <Foo as PartialEq>::eq(move _9, move _10) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = Not(move _8);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _11 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<Foo, Foo>(move _13, move _14, move _16, move _18); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Foo, &'b Foo, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Foo, Foo>}, val: Value(<ZST>) }
    }

    bb3: {
        _45 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[2])) }
        _20 = _45;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _44 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[1])) }
        _21 = _44;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _19 = (move _20, move _21);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _22 = (_19.0: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _23 = (_19.1: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _27 = std::mem::min_align_of::<Foo>() -> bb4; // scope 0 at ui/consts/const-adt-align-mismatch.rs:21:16: 21:42
                                         // mir::Constant
                                         // + span: ui/consts/const-adt-align-mismatch.rs:21:16: 21:40
                                         // + literal: Const { ty: fn() -> usize {std::mem::min_align_of::<Foo>}, val: Value(<ZST>) }
    }

    bb4: {
        _26 = &_27;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _43 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _28 = _43;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _25 = (move _26, move _28);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _29 = (_25.0: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _30 = (_25.1: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _33 = (*_29);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _34 = const 4_usize;             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _32 = Eq(move _33, move _34);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _31 = Not(move _32);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _31) -> [0: bb6, otherwise: bb5]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _35 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = _29;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _39;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _41 = _30;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = _41;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _36 = core::panicking::assert_failed::<usize, usize>(move _37, move _38, move _40, move _42); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/consts/const-adt-align-mismatch.rs:22:2: 22:2
    }
}

alloc1 (static: FOO, size: 12, align: 4) {
    02 00 __ __ __ __ __ __ __ __ __ __             │ ..░░░░░░░░░░
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/consts/const-adt-align-mismatch.rs:21:44: 21:45

    bb0: {
        _1 = const 4_usize;              // scope 0 at ui/consts/const-adt-align-mismatch.rs:21:44: 21:45
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/consts/const-adt-align-mismatch.rs:20:39: 20:41

    bb0: {
        _1 = const 12_usize;             // scope 0 at ui/consts/const-adt-align-mismatch.rs:20:39: 20:41
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/consts/const-adt-align-mismatch.rs:20:16: 20:37

    bb0: {
        _1 = std::mem::size_of::<Foo>() -> bb1; // scope 0 at ui/consts/const-adt-align-mismatch.rs:20:16: 20:37
                                         // mir::Constant
                                         // + span: ui/consts/const-adt-align-mismatch.rs:20:16: 20:35
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Foo>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[3] in main: &Foo = {
    let mut _0: &Foo;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Foo;                     // in scope 0 at ui/consts/const-adt-align-mismatch.rs:19:21: 19:27

    bb0: {
        _1 = Foo::C;                     // scope 0 at ui/consts/const-adt-align-mismatch.rs:19:21: 19:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn Foo::A(_1: u32) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/consts/const-adt-align-mismatch.rs:9:5: 9:6

    bb0: {
        _0 = Foo::A(move _1);            // scope 0 at ui/consts/const-adt-align-mismatch.rs:9:5: 9:6
        return;                          // scope 0 at ui/consts/const-adt-align-mismatch.rs:9:5: 9:6
    }
}

// MIR FOR CTFE
fn Foo::A(_1: u32) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/consts/const-adt-align-mismatch.rs:9:5: 9:6

    bb0: {
        _0 = Foo::A(move _1);            // scope 0 at ui/consts/const-adt-align-mismatch.rs:9:5: 9:6
        return;                          // scope 0 at ui/consts/const-adt-align-mismatch.rs:9:5: 9:6
    }
}

fn Foo::Bar(_1: [u16; 4]) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/consts/const-adt-align-mismatch.rs:10:5: 10:8

    bb0: {
        _0 = Foo::Bar(move _1);          // scope 0 at ui/consts/const-adt-align-mismatch.rs:10:5: 10:8
        return;                          // scope 0 at ui/consts/const-adt-align-mismatch.rs:10:5: 10:8
    }
}

// MIR FOR CTFE
fn Foo::Bar(_1: [u16; 4]) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/consts/const-adt-align-mismatch.rs:10:5: 10:8

    bb0: {
        _0 = Foo::Bar(move _1);          // scope 0 at ui/consts/const-adt-align-mismatch.rs:10:5: 10:8
        return;                          // scope 0 at ui/consts/const-adt-align-mismatch.rs:10:5: 10:8
    }
}
