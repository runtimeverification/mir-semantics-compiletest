// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const TEST_A: Discriminant<Test> = {
    let mut _0: std::mem::Discriminant<Test>; // return place in scope 0 at ui/consts/const_discriminant.rs:14:15: 14:33
    let mut _1: &Test;                   // in scope 0 at ui/consts/const_discriminant.rs:14:49: 14:60
    let _2: &Test;                       // in scope 0 at ui/consts/const_discriminant.rs:14:49: 14:60
    let _3: Test;                        // in scope 0 at ui/consts/const_discriminant.rs:14:50: 14:60
    let mut _4: &Test;                   // in scope 0 at ui/consts/const_discriminant.rs:14:49: 14:60

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_discriminant.rs:14:49: 14:60
        StorageLive(_2);                 // scope 0 at ui/consts/const_discriminant.rs:14:49: 14:60
        _4 = const _;                    // scope 0 at ui/consts/const_discriminant.rs:14:49: 14:60
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:14:49: 14:60
                                         // + literal: Const { ty: &Test, val: Unevaluated(TEST_A, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at ui/consts/const_discriminant.rs:14:49: 14:60
        _1 = &(*_2);                     // scope 0 at ui/consts/const_discriminant.rs:14:49: 14:60
        ConstEvalCounter;                // scope 0 at ui/consts/const_discriminant.rs:14:36: 14:61
        _0 = discriminant::<Test>(move _1) -> bb1; // scope 0 at ui/consts/const_discriminant.rs:14:36: 14:61
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:14:36: 14:48
                                         // + literal: Const { ty: for<'a> fn(&'a Test) -> Discriminant<Test> {discriminant::<Test>}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/const_discriminant.rs:14:60: 14:61
        StorageDead(_1);                 // scope 0 at ui/consts/const_discriminant.rs:14:60: 14:61
        return;                          // scope 0 at ui/consts/const_discriminant.rs:14:1: 14:62
    }
}

promoted[0] in TEST_A: &Test = {
    let mut _0: &Test;                   // return place in scope 0 at ui/consts/const_discriminant.rs:14:49: 14:60
    let mut _1: Test;                    // in scope 0 at ui/consts/const_discriminant.rs:14:50: 14:60

    bb0: {
        _1 = Test::A(const 5_u8);        // scope 0 at ui/consts/const_discriminant.rs:14:50: 14:60
        _0 = &_1;                        // scope 0 at ui/consts/const_discriminant.rs:14:49: 14:60
        return;                          // scope 0 at ui/consts/const_discriminant.rs:14:49: 14:60
    }
}

const TEST_A_OTHER: Discriminant<Test> = {
    let mut _0: std::mem::Discriminant<Test>; // return place in scope 0 at ui/consts/const_discriminant.rs:15:21: 15:39
    let mut _1: &Test;                   // in scope 0 at ui/consts/const_discriminant.rs:15:55: 15:67
    let _2: &Test;                       // in scope 0 at ui/consts/const_discriminant.rs:15:55: 15:67
    let _3: Test;                        // in scope 0 at ui/consts/const_discriminant.rs:15:56: 15:67
    let mut _4: &Test;                   // in scope 0 at ui/consts/const_discriminant.rs:15:55: 15:67

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_discriminant.rs:15:55: 15:67
        StorageLive(_2);                 // scope 0 at ui/consts/const_discriminant.rs:15:55: 15:67
        _4 = const _;                    // scope 0 at ui/consts/const_discriminant.rs:15:55: 15:67
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:15:55: 15:67
                                         // + literal: Const { ty: &Test, val: Unevaluated(TEST_A_OTHER, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at ui/consts/const_discriminant.rs:15:55: 15:67
        _1 = &(*_2);                     // scope 0 at ui/consts/const_discriminant.rs:15:55: 15:67
        ConstEvalCounter;                // scope 0 at ui/consts/const_discriminant.rs:15:42: 15:68
        _0 = discriminant::<Test>(move _1) -> bb1; // scope 0 at ui/consts/const_discriminant.rs:15:42: 15:68
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:15:42: 15:54
                                         // + literal: Const { ty: for<'a> fn(&'a Test) -> Discriminant<Test> {discriminant::<Test>}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/const_discriminant.rs:15:67: 15:68
        StorageDead(_1);                 // scope 0 at ui/consts/const_discriminant.rs:15:67: 15:68
        return;                          // scope 0 at ui/consts/const_discriminant.rs:15:1: 15:69
    }
}

promoted[0] in TEST_A_OTHER: &Test = {
    let mut _0: &Test;                   // return place in scope 0 at ui/consts/const_discriminant.rs:15:55: 15:67
    let mut _1: Test;                    // in scope 0 at ui/consts/const_discriminant.rs:15:56: 15:67

    bb0: {
        _1 = Test::A(const 17_u8);       // scope 0 at ui/consts/const_discriminant.rs:15:56: 15:67
        _0 = &_1;                        // scope 0 at ui/consts/const_discriminant.rs:15:55: 15:67
        return;                          // scope 0 at ui/consts/const_discriminant.rs:15:55: 15:67
    }
}

const TEST_B: Discriminant<Test> = {
    let mut _0: std::mem::Discriminant<Test>; // return place in scope 0 at ui/consts/const_discriminant.rs:16:15: 16:33
    let mut _1: &Test;                   // in scope 0 at ui/consts/const_discriminant.rs:16:49: 16:57
    let _2: &Test;                       // in scope 0 at ui/consts/const_discriminant.rs:16:49: 16:57
    let _3: Test;                        // in scope 0 at ui/consts/const_discriminant.rs:16:50: 16:57
    let mut _4: &Test;                   // in scope 0 at ui/consts/const_discriminant.rs:16:49: 16:57

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_discriminant.rs:16:49: 16:57
        StorageLive(_2);                 // scope 0 at ui/consts/const_discriminant.rs:16:49: 16:57
        _4 = const _;                    // scope 0 at ui/consts/const_discriminant.rs:16:49: 16:57
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:16:49: 16:57
                                         // + literal: Const { ty: &Test, val: Unevaluated(TEST_B, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at ui/consts/const_discriminant.rs:16:49: 16:57
        _1 = &(*_2);                     // scope 0 at ui/consts/const_discriminant.rs:16:49: 16:57
        ConstEvalCounter;                // scope 0 at ui/consts/const_discriminant.rs:16:36: 16:58
        _0 = discriminant::<Test>(move _1) -> bb1; // scope 0 at ui/consts/const_discriminant.rs:16:36: 16:58
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:16:36: 16:48
                                         // + literal: Const { ty: for<'a> fn(&'a Test) -> Discriminant<Test> {discriminant::<Test>}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/const_discriminant.rs:16:57: 16:58
        StorageDead(_1);                 // scope 0 at ui/consts/const_discriminant.rs:16:57: 16:58
        return;                          // scope 0 at ui/consts/const_discriminant.rs:16:1: 16:59
    }
}

promoted[0] in TEST_B: &Test = {
    let mut _0: &Test;                   // return place in scope 0 at ui/consts/const_discriminant.rs:16:49: 16:57
    let mut _1: Test;                    // in scope 0 at ui/consts/const_discriminant.rs:16:50: 16:57

    bb0: {
        _1 = Test::B;                    // scope 0 at ui/consts/const_discriminant.rs:16:50: 16:57
        _0 = &_1;                        // scope 0 at ui/consts/const_discriminant.rs:16:49: 16:57
        return;                          // scope 0 at ui/consts/const_discriminant.rs:16:49: 16:57
    }
}

const TEST_V: Discriminant<SingleVariant> = {
    let mut _0: std::mem::Discriminant<SingleVariant>; // return place in scope 0 at ui/consts/const_discriminant.rs:25:15: 25:42
    let mut _1: &SingleVariant;          // in scope 0 at ui/consts/const_discriminant.rs:25:58: 25:75
    let _2: &SingleVariant;              // in scope 0 at ui/consts/const_discriminant.rs:25:58: 25:75
    let _3: SingleVariant;               // in scope 0 at ui/consts/const_discriminant.rs:25:59: 25:75
    let mut _4: &SingleVariant;          // in scope 0 at ui/consts/const_discriminant.rs:25:58: 25:75

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_discriminant.rs:25:58: 25:75
        StorageLive(_2);                 // scope 0 at ui/consts/const_discriminant.rs:25:58: 25:75
        _4 = const _;                    // scope 0 at ui/consts/const_discriminant.rs:25:58: 25:75
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:25:58: 25:75
                                         // + literal: Const { ty: &SingleVariant, val: Unevaluated(TEST_V, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at ui/consts/const_discriminant.rs:25:58: 25:75
        _1 = &(*_2);                     // scope 0 at ui/consts/const_discriminant.rs:25:58: 25:75
        ConstEvalCounter;                // scope 0 at ui/consts/const_discriminant.rs:25:45: 25:76
        _0 = discriminant::<SingleVariant>(move _1) -> bb1; // scope 0 at ui/consts/const_discriminant.rs:25:45: 25:76
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:25:45: 25:57
                                         // + literal: Const { ty: for<'a> fn(&'a SingleVariant) -> Discriminant<SingleVariant> {discriminant::<SingleVariant>}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/const_discriminant.rs:25:75: 25:76
        StorageDead(_1);                 // scope 0 at ui/consts/const_discriminant.rs:25:75: 25:76
        return;                          // scope 0 at ui/consts/const_discriminant.rs:25:1: 25:77
    }
}

promoted[0] in TEST_V: &SingleVariant = {
    let mut _0: &SingleVariant;          // return place in scope 0 at ui/consts/const_discriminant.rs:25:58: 25:75
    let mut _1: SingleVariant;           // in scope 0 at ui/consts/const_discriminant.rs:25:59: 25:75

    bb0: {
        _1 = SingleVariant::V;           // scope 0 at ui/consts/const_discriminant.rs:25:59: 25:75
        _0 = &_1;                        // scope 0 at ui/consts/const_discriminant.rs:25:58: 25:75
        return;                          // scope 0 at ui/consts/const_discriminant.rs:25:58: 25:75
    }
}

const TEST_VOID: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_discriminant.rs:27:22: 27:24
    let _1: ();                          // in scope 0 at ui/consts/const_discriminant.rs:30:5: 30:76
    let _2: std::mem::Discriminant<Void>; // in scope 0 at ui/consts/const_discriminant.rs:30:14: 30:73
    let mut _3: &Void;                   // in scope 0 at ui/consts/const_discriminant.rs:30:37: 30:72
    let _4: &Void;                       // in scope 0 at ui/consts/const_discriminant.rs:30:37: 30:72
    let _5: *const Void;                 // in scope 0 at ui/consts/const_discriminant.rs:30:39: 30:72
    let mut _6: *const ();               // in scope 0 at ui/consts/const_discriminant.rs:30:40: 30:56
    let _7: &();                         // in scope 0 at ui/consts/const_discriminant.rs:30:40: 30:43
    let _8: ();                          // in scope 0 at ui/consts/const_discriminant.rs:30:41: 30:43
    scope 1 {
        let mut _9: &();                 // in scope 1 at ui/consts/const_discriminant.rs:30:40: 30:43
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_discriminant.rs:30:5: 30:76
        StorageLive(_2);                 // scope 1 at ui/consts/const_discriminant.rs:30:14: 30:73
        StorageLive(_3);                 // scope 1 at ui/consts/const_discriminant.rs:30:37: 30:72
        StorageLive(_4);                 // scope 1 at ui/consts/const_discriminant.rs:30:37: 30:72
        StorageLive(_5);                 // scope 1 at ui/consts/const_discriminant.rs:30:39: 30:72
        StorageLive(_6);                 // scope 1 at ui/consts/const_discriminant.rs:30:40: 30:56
        StorageLive(_7);                 // scope 1 at ui/consts/const_discriminant.rs:30:40: 30:43
        _9 = const _;                    // scope 1 at ui/consts/const_discriminant.rs:30:40: 30:43
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:30:40: 30:43
                                         // + literal: Const { ty: &(), val: Unevaluated(TEST_VOID, [], Some(promoted[0])) }
        _7 = &(*_9);                     // scope 1 at ui/consts/const_discriminant.rs:30:40: 30:43
        _6 = &raw const (*_7);           // scope 1 at ui/consts/const_discriminant.rs:30:40: 30:43
        _5 = move _6 as *const Void (PtrToPtr); // scope 1 at ui/consts/const_discriminant.rs:30:39: 30:72
        StorageDead(_6);                 // scope 1 at ui/consts/const_discriminant.rs:30:71: 30:72
        _4 = &(*_5);                     // scope 1 at ui/consts/const_discriminant.rs:30:37: 30:72
        _3 = &(*_4);                     // scope 1 at ui/consts/const_discriminant.rs:30:37: 30:72
        ConstEvalCounter;                // scope 1 at ui/consts/const_discriminant.rs:30:14: 30:73
        _2 = discriminant::<Void>(move _3) -> bb1; // scope 1 at ui/consts/const_discriminant.rs:30:14: 30:73
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:30:14: 30:36
                                         // + literal: Const { ty: for<'a> fn(&'a Void) -> Discriminant<Void> {discriminant::<Void>}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 1 at ui/consts/const_discriminant.rs:30:72: 30:73
        StorageDead(_7);                 // scope 1 at ui/consts/const_discriminant.rs:30:73: 30:74
        StorageDead(_5);                 // scope 1 at ui/consts/const_discriminant.rs:30:73: 30:74
        StorageDead(_4);                 // scope 1 at ui/consts/const_discriminant.rs:30:73: 30:74
        StorageDead(_2);                 // scope 1 at ui/consts/const_discriminant.rs:30:73: 30:74
        _1 = const ();                   // scope 1 at ui/consts/const_discriminant.rs:30:5: 30:76
        StorageDead(_1);                 // scope 0 at ui/consts/const_discriminant.rs:30:76: 30:77
        _0 = const ();                   // scope 0 at ui/consts/const_discriminant.rs:27:27: 31:2
        return;                          // scope 0 at ui/consts/const_discriminant.rs:27:1: 31:3
    }
}

promoted[0] in TEST_VOID: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/consts/const_discriminant.rs:30:40: 30:43
    let mut _1: ();                      // in scope 0 at ui/consts/const_discriminant.rs:30:41: 30:43

    bb0: {
        _1 = ();                         // scope 0 at ui/consts/const_discriminant.rs:30:41: 30:43
        _0 = &_1;                        // scope 0 at ui/consts/const_discriminant.rs:30:40: 30:43
        return;                          // scope 0 at ui/consts/const_discriminant.rs:30:40: 30:43
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_discriminant.rs:34:11: 34:11
    let mut _1: (&std::mem::Discriminant<Test>, &std::mem::Discriminant<Test>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _5: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _6: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _8: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _9: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _11: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _12: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _13: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _14: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _15: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _16: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _18: (&std::mem::Discriminant<Test>, &std::mem::Discriminant<Test>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _19: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _20: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _21: std::mem::Discriminant<Test>; // in scope 0 at ui/consts/const_discriminant.rs:36:24: 36:61
    let mut _22: &Test;                  // in scope 0 at ui/consts/const_discriminant.rs:36:37: 36:60
    let _23: &Test;                      // in scope 0 at ui/consts/const_discriminant.rs:36:37: 36:60
    let mut _24: &Test;                  // in scope 0 at ui/consts/const_discriminant.rs:36:47: 36:59
    let _25: &Test;                      // in scope 0 at ui/consts/const_discriminant.rs:36:47: 36:59
    let _26: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _27: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _28: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _29: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _30: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _31: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _33: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _34: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _35: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _36: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _37: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _38: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _40: (&std::mem::Discriminant<Test>, &std::mem::Discriminant<Test>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _41: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _42: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _43: std::mem::Discriminant<Test>; // in scope 0 at ui/consts/const_discriminant.rs:37:24: 37:57
    let mut _44: &Test;                  // in scope 0 at ui/consts/const_discriminant.rs:37:37: 37:56
    let _45: &Test;                      // in scope 0 at ui/consts/const_discriminant.rs:37:37: 37:56
    let mut _46: &Test;                  // in scope 0 at ui/consts/const_discriminant.rs:37:47: 37:55
    let _47: &Test;                      // in scope 0 at ui/consts/const_discriminant.rs:37:47: 37:55
    let _48: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _49: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _50: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _51: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _52: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _53: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _55: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _56: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _57: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _58: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _59: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _60: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _62: (&std::mem::Discriminant<Test>, &std::mem::Discriminant<Test>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:15: 88:32
    let mut _63: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
    let mut _64: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
    let _65: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
    let _66: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
    let mut _67: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
    let mut _68: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:29
    let mut _69: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:33: 90:43
    let _71: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:114
    let mut _72: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
    let mut _73: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
    let _74: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
    let mut _75: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
    let _76: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
    let mut _77: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:85: 95:113
    let mut _78: (&std::mem::Discriminant<Test>, &std::mem::Discriminant<Test>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:15: 88:32
    let mut _79: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
    let mut _80: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
    let _81: std::mem::Discriminant<Test>; // in scope 0 at ui/consts/const_discriminant.rs:39:24: 39:73
    let mut _82: &Test;                  // in scope 0 at ui/consts/const_discriminant.rs:39:37: 39:72
    let _83: &Test;                      // in scope 0 at ui/consts/const_discriminant.rs:39:37: 39:72
    let mut _84: &Test;                  // in scope 0 at ui/consts/const_discriminant.rs:39:47: 39:71
    let _85: &Test;                      // in scope 0 at ui/consts/const_discriminant.rs:39:47: 39:71
    let _86: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
    let _87: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
    let mut _88: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
    let mut _89: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:29
    let mut _90: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:33: 90:43
    let _92: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:114
    let mut _93: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
    let mut _94: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
    let _95: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
    let mut _96: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
    let _97: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:85: 95:113
    let mut _99: (&std::mem::Discriminant<SingleVariant>, &std::mem::Discriminant<SingleVariant>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _100: &std::mem::Discriminant<SingleVariant>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _101: &std::mem::Discriminant<SingleVariant>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _102: std::mem::Discriminant<SingleVariant>; // in scope 0 at ui/consts/const_discriminant.rs:41:24: 41:66
    let mut _103: &SingleVariant;        // in scope 0 at ui/consts/const_discriminant.rs:41:37: 41:65
    let _104: &SingleVariant;            // in scope 0 at ui/consts/const_discriminant.rs:41:37: 41:65
    let mut _105: &SingleVariant;        // in scope 0 at ui/consts/const_discriminant.rs:41:47: 41:64
    let _106: &SingleVariant;            // in scope 0 at ui/consts/const_discriminant.rs:41:47: 41:64
    let _107: &std::mem::Discriminant<SingleVariant>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _108: &std::mem::Discriminant<SingleVariant>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _109: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _110: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _111: &std::mem::Discriminant<SingleVariant>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _112: &std::mem::Discriminant<SingleVariant>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _114: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _115: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _116: &std::mem::Discriminant<SingleVariant>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _117: &std::mem::Discriminant<SingleVariant>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _118: &std::mem::Discriminant<SingleVariant>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _119: &std::mem::Discriminant<SingleVariant>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _121: &SingleVariant;        // in scope 0 at ui/consts/const_discriminant.rs:41:47: 41:64
    let mut _122: &std::mem::Discriminant<SingleVariant>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _123: &Test;                 // in scope 0 at ui/consts/const_discriminant.rs:39:47: 39:71
    let mut _124: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
    let mut _125: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
    let mut _126: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
    let mut _127: &Test;                 // in scope 0 at ui/consts/const_discriminant.rs:37:47: 37:55
    let mut _128: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _129: &Test;                 // in scope 0 at ui/consts/const_discriminant.rs:36:47: 36:59
    let mut _130: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _131: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _132: &std::mem::Discriminant<Test>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _4;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _5;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _10: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _10;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _26;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _27;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _32: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _32;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _48;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _49;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _54: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _54;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug left_val => _65;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
        debug right_val => _66;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
        let _70: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:25: 91:29
        scope 8 {
            debug kind => _70;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:25: 91:29
        }
    }
    scope 9 {
        debug left_val => _86;           // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
        debug right_val => _87;          // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
        let _91: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:25: 91:29
        scope 10 {
            debug kind => _91;           // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:25: 91:29
        }
    }
    scope 11 {
        debug left_val => _107;          // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _108;         // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _113: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 12 {
            debug kind => _113;          // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _132 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Discriminant<Test>, val: Unevaluated(main, [], Some(promoted[11])) }
        _2 = _132;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _131 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Discriminant<Test>, val: Unevaluated(main, [], Some(promoted[10])) }
        _3 = _131;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _4 = (_1.0: &std::mem::Discriminant<Test>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _5 = (_1.1: &std::mem::Discriminant<Test>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _8 = _4;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _9 = _5;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _7 = <Discriminant<Test> as PartialEq>::eq(move _8, move _9) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Discriminant<Test>, &'b Discriminant<Test>) -> bool {<Discriminant<Test> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = Not(move _7);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _6) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _10 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _12 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = _4;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _13 = _14;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _11 = core::panicking::assert_failed::<Discriminant<Test>, Discriminant<Test>>(move _12, move _13, move _15, move _17); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Discriminant<Test>, &'b Discriminant<Test>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Discriminant<Test>, Discriminant<Test>>}, val: Value(<ZST>) }
    }

    bb3: {
        _130 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Discriminant<Test>, val: Unevaluated(main, [], Some(promoted[9])) }
        _19 = _130;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _129 = const _;                  // scope 0 at ui/consts/const_discriminant.rs:36:47: 36:59
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:36:47: 36:59
                                         // + literal: Const { ty: &Test, val: Unevaluated(main, [], Some(promoted[8])) }
        _25 = _129;                      // scope 0 at ui/consts/const_discriminant.rs:36:47: 36:59
        _24 = _25;                       // scope 0 at ui/consts/const_discriminant.rs:36:47: 36:59
        _23 = std::hint::black_box::<&Test>(move _24) -> bb4; // scope 0 at ui/consts/const_discriminant.rs:36:37: 36:60
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:36:37: 36:46
                                         // + literal: Const { ty: fn(&Test) -> &Test {std::hint::black_box::<&Test>}, val: Value(<ZST>) }
    }

    bb4: {
        _22 = _23;                       // scope 0 at ui/consts/const_discriminant.rs:36:37: 36:60
        _21 = discriminant::<Test>(move _22) -> bb5; // scope 0 at ui/consts/const_discriminant.rs:36:24: 36:61
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:36:24: 36:36
                                         // + literal: Const { ty: for<'a> fn(&'a Test) -> Discriminant<Test> {discriminant::<Test>}, val: Value(<ZST>) }
    }

    bb5: {
        _20 = &_21;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _18 = (move _19, move _20);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _26 = (_18.0: &std::mem::Discriminant<Test>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _27 = (_18.1: &std::mem::Discriminant<Test>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _30 = _26;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _31 = _27;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _29 = <Discriminant<Test> as PartialEq>::eq(move _30, move _31) -> bb6; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Discriminant<Test>, &'b Discriminant<Test>) -> bool {<Discriminant<Test> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        _28 = Not(move _29);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _28) -> [0: bb8, otherwise: bb7]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _32 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _34 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _36 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _35 = _36;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _27;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _37 = _38;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _33 = core::panicking::assert_failed::<Discriminant<Test>, Discriminant<Test>>(move _34, move _35, move _37, move _39); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Discriminant<Test>, &'b Discriminant<Test>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Discriminant<Test>, Discriminant<Test>>}, val: Value(<ZST>) }
    }

    bb8: {
        _128 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Discriminant<Test>, val: Unevaluated(main, [], Some(promoted[7])) }
        _41 = _128;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _127 = const _;                  // scope 0 at ui/consts/const_discriminant.rs:37:47: 37:55
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:37:47: 37:55
                                         // + literal: Const { ty: &Test, val: Unevaluated(main, [], Some(promoted[6])) }
        _47 = _127;                      // scope 0 at ui/consts/const_discriminant.rs:37:47: 37:55
        _46 = _47;                       // scope 0 at ui/consts/const_discriminant.rs:37:47: 37:55
        _45 = std::hint::black_box::<&Test>(move _46) -> bb9; // scope 0 at ui/consts/const_discriminant.rs:37:37: 37:56
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:37:37: 37:46
                                         // + literal: Const { ty: fn(&Test) -> &Test {std::hint::black_box::<&Test>}, val: Value(<ZST>) }
    }

    bb9: {
        _44 = _45;                       // scope 0 at ui/consts/const_discriminant.rs:37:37: 37:56
        _43 = discriminant::<Test>(move _44) -> bb10; // scope 0 at ui/consts/const_discriminant.rs:37:24: 37:57
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:37:24: 37:36
                                         // + literal: Const { ty: for<'a> fn(&'a Test) -> Discriminant<Test> {discriminant::<Test>}, val: Value(<ZST>) }
    }

    bb10: {
        _42 = &_43;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _40 = (move _41, move _42);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _48 = (_40.0: &std::mem::Discriminant<Test>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _49 = (_40.1: &std::mem::Discriminant<Test>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _52 = _48;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _53 = _49;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _51 = <Discriminant<Test> as PartialEq>::eq(move _52, move _53) -> bb11; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Discriminant<Test>, &'b Discriminant<Test>) -> bool {<Discriminant<Test> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb11: {
        _50 = Not(move _51);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _50) -> [0: bb13, otherwise: bb12]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb12: {
        _54 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _56 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = _48;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _58;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _60 = _49;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _59 = _60;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _55 = core::panicking::assert_failed::<Discriminant<Test>, Discriminant<Test>>(move _56, move _57, move _59, move _61); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Discriminant<Test>, &'b Discriminant<Test>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Discriminant<Test>, Discriminant<Test>>}, val: Value(<ZST>) }
    }

    bb13: {
        _126 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
                                         // + literal: Const { ty: &Discriminant<Test>, val: Unevaluated(main, [], Some(promoted[5])) }
        _63 = _126;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
        _125 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
                                         // + literal: Const { ty: &Discriminant<Test>, val: Unevaluated(main, [], Some(promoted[4])) }
        _64 = _125;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
        _62 = (move _63, move _64);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:15: 88:32
        _65 = (_62.0: &std::mem::Discriminant<Test>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
        _66 = (_62.1: &std::mem::Discriminant<Test>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
        _68 = _65;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:29
        _69 = _66;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:33: 90:43
        _67 = <Discriminant<Test> as PartialEq>::eq(move _68, move _69) -> bb14; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Discriminant<Test>, &'b Discriminant<Test>) -> bool {<Discriminant<Test> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb14: {
        switchInt(move _67) -> [0: bb16, otherwise: bb15]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
    }

    bb15: {
        _70 = const core::panicking::AssertKind::Ne; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:32: 91:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:32: 91:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x01)) }
        _72 = const core::panicking::AssertKind::Ne; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x01)) }
        _74 = _65;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
        _73 = _74;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
        _76 = _66;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
        _75 = _76;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
        _77 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:85: 95:113
        _71 = core::panicking::assert_failed::<Discriminant<Test>, Discriminant<Test>>(move _72, move _73, move _75, move _77); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Discriminant<Test>, &'b Discriminant<Test>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Discriminant<Test>, Discriminant<Test>>}, val: Value(<ZST>) }
    }

    bb16: {
        _124 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
                                         // + literal: Const { ty: &Discriminant<Test>, val: Unevaluated(main, [], Some(promoted[3])) }
        _79 = _124;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
        _123 = const _;                  // scope 0 at ui/consts/const_discriminant.rs:39:47: 39:71
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:39:47: 39:71
                                         // + literal: Const { ty: &Test, val: Unevaluated(main, [], Some(promoted[2])) }
        _85 = _123;                      // scope 0 at ui/consts/const_discriminant.rs:39:47: 39:71
        _84 = _85;                       // scope 0 at ui/consts/const_discriminant.rs:39:47: 39:71
        _83 = std::hint::black_box::<&Test>(move _84) -> bb17; // scope 0 at ui/consts/const_discriminant.rs:39:37: 39:72
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:39:37: 39:46
                                         // + literal: Const { ty: fn(&Test) -> &Test {std::hint::black_box::<&Test>}, val: Value(<ZST>) }
    }

    bb17: {
        _82 = _83;                       // scope 0 at ui/consts/const_discriminant.rs:39:37: 39:72
        _81 = discriminant::<Test>(move _82) -> bb18; // scope 0 at ui/consts/const_discriminant.rs:39:24: 39:73
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:39:24: 39:36
                                         // + literal: Const { ty: for<'a> fn(&'a Test) -> Discriminant<Test> {discriminant::<Test>}, val: Value(<ZST>) }
    }

    bb18: {
        _80 = &_81;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
        _78 = (move _79, move _80);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:15: 88:32
        _86 = (_78.0: &std::mem::Discriminant<Test>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
        _87 = (_78.1: &std::mem::Discriminant<Test>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
        _89 = _86;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:29
        _90 = _87;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:33: 90:43
        _88 = <Discriminant<Test> as PartialEq>::eq(move _89, move _90) -> bb19; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Discriminant<Test>, &'b Discriminant<Test>) -> bool {<Discriminant<Test> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb19: {
        switchInt(move _88) -> [0: bb21, otherwise: bb20]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
    }

    bb20: {
        _91 = const core::panicking::AssertKind::Ne; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:32: 91:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:32: 91:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x01)) }
        _93 = const core::panicking::AssertKind::Ne; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x01)) }
        _95 = _86;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
        _94 = _95;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
        _97 = _87;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
        _96 = _97;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
        _98 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:85: 95:113
        _92 = core::panicking::assert_failed::<Discriminant<Test>, Discriminant<Test>>(move _93, move _94, move _96, move _98); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Discriminant<Test>, &'b Discriminant<Test>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Discriminant<Test>, Discriminant<Test>>}, val: Value(<ZST>) }
    }

    bb21: {
        _122 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Discriminant<SingleVariant>, val: Unevaluated(main, [], Some(promoted[1])) }
        _100 = _122;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _121 = const _;                  // scope 0 at ui/consts/const_discriminant.rs:41:47: 41:64
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:41:47: 41:64
                                         // + literal: Const { ty: &SingleVariant, val: Unevaluated(main, [], Some(promoted[0])) }
        _106 = _121;                     // scope 0 at ui/consts/const_discriminant.rs:41:47: 41:64
        _105 = _106;                     // scope 0 at ui/consts/const_discriminant.rs:41:47: 41:64
        _104 = std::hint::black_box::<&SingleVariant>(move _105) -> bb22; // scope 0 at ui/consts/const_discriminant.rs:41:37: 41:65
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:41:37: 41:46
                                         // + literal: Const { ty: fn(&SingleVariant) -> &SingleVariant {std::hint::black_box::<&SingleVariant>}, val: Value(<ZST>) }
    }

    bb22: {
        _103 = _104;                     // scope 0 at ui/consts/const_discriminant.rs:41:37: 41:65
        _102 = discriminant::<SingleVariant>(move _103) -> bb23; // scope 0 at ui/consts/const_discriminant.rs:41:24: 41:66
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:41:24: 41:36
                                         // + literal: Const { ty: for<'a> fn(&'a SingleVariant) -> Discriminant<SingleVariant> {discriminant::<SingleVariant>}, val: Value(<ZST>) }
    }

    bb23: {
        _101 = &_102;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _99 = (move _100, move _101);    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _107 = (_99.0: &std::mem::Discriminant<SingleVariant>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _108 = (_99.1: &std::mem::Discriminant<SingleVariant>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _111 = _107;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _112 = _108;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _110 = <Discriminant<SingleVariant> as PartialEq>::eq(move _111, move _112) -> bb24; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Discriminant<SingleVariant>, &'b Discriminant<SingleVariant>) -> bool {<Discriminant<SingleVariant> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb24: {
        _109 = Not(move _110);           // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _109) -> [0: bb26, otherwise: bb25]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb25: {
        _113 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _115 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _117 = _107;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _116 = _117;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _119 = _108;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _118 = _119;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _120 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _114 = core::panicking::assert_failed::<Discriminant<SingleVariant>, Discriminant<SingleVariant>>(move _115, move _116, move _118, move _120); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Discriminant<SingleVariant>, &'b Discriminant<SingleVariant>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Discriminant<SingleVariant>, Discriminant<SingleVariant>>}, val: Value(<ZST>) }
    }

    bb26: {
        return;                          // scope 0 at ui/consts/const_discriminant.rs:42:2: 42:2
    }
}

promoted[0] in main: &SingleVariant = {
    let mut _0: &SingleVariant;          // return place in scope 0 at ui/consts/const_discriminant.rs:41:47: 41:64
    let mut _1: SingleVariant;           // in scope 0 at ui/consts/const_discriminant.rs:41:48: 41:64

    bb0: {
        _1 = SingleVariant::V;           // scope 0 at ui/consts/const_discriminant.rs:41:48: 41:64
        _0 = &_1;                        // scope 0 at ui/consts/const_discriminant.rs:41:47: 41:64
        return;                          // scope 0 at ui/consts/const_discriminant.rs:41:47: 41:64
    }
}

promoted[1] in main: &Discriminant<SingleVariant> = {
    let mut _0: &std::mem::Discriminant<SingleVariant>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::mem::Discriminant<SingleVariant>; // in scope 0 at ui/consts/const_discriminant.rs:41:16: 41:22

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_discriminant.rs:41:16: 41:22
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:41:16: 41:22
                                         // + literal: Const { ty: Discriminant<SingleVariant>, val: Unevaluated(TEST_V, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[2] in main: &Test = {
    let mut _0: &Test;                   // return place in scope 0 at ui/consts/const_discriminant.rs:39:47: 39:71
    let mut _1: Test;                    // in scope 0 at ui/consts/const_discriminant.rs:39:48: 39:71

    bb0: {
        _1 = Test::C { a: const 42_u8, b: const 7_u8 }; // scope 0 at ui/consts/const_discriminant.rs:39:48: 39:71
        _0 = &_1;                        // scope 0 at ui/consts/const_discriminant.rs:39:47: 39:71
        return;                          // scope 0 at ui/consts/const_discriminant.rs:39:47: 39:71
    }
}

promoted[3] in main: &Discriminant<Test> = {
    let mut _0: &std::mem::Discriminant<Test>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
    let mut _1: std::mem::Discriminant<Test>; // in scope 0 at ui/consts/const_discriminant.rs:39:16: 39:22

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_discriminant.rs:39:16: 39:22
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:39:16: 39:22
                                         // + literal: Const { ty: Discriminant<Test>, val: Unevaluated(TEST_B, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
    }
}

promoted[4] in main: &Discriminant<Test> = {
    let mut _0: &std::mem::Discriminant<Test>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
    let mut _1: std::mem::Discriminant<Test>; // in scope 0 at ui/consts/const_discriminant.rs:38:24: 38:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_discriminant.rs:38:24: 38:30
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:38:24: 38:30
                                         // + literal: Const { ty: Discriminant<Test>, val: Unevaluated(TEST_B, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
    }
}

promoted[5] in main: &Discriminant<Test> = {
    let mut _0: &std::mem::Discriminant<Test>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
    let mut _1: std::mem::Discriminant<Test>; // in scope 0 at ui/consts/const_discriminant.rs:38:16: 38:22

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_discriminant.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:38:16: 38:22
                                         // + literal: Const { ty: Discriminant<Test>, val: Unevaluated(TEST_A, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
    }
}

promoted[6] in main: &Test = {
    let mut _0: &Test;                   // return place in scope 0 at ui/consts/const_discriminant.rs:37:47: 37:55
    let mut _1: Test;                    // in scope 0 at ui/consts/const_discriminant.rs:37:48: 37:55

    bb0: {
        _1 = Test::B;                    // scope 0 at ui/consts/const_discriminant.rs:37:48: 37:55
        _0 = &_1;                        // scope 0 at ui/consts/const_discriminant.rs:37:47: 37:55
        return;                          // scope 0 at ui/consts/const_discriminant.rs:37:47: 37:55
    }
}

promoted[7] in main: &Discriminant<Test> = {
    let mut _0: &std::mem::Discriminant<Test>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::mem::Discriminant<Test>; // in scope 0 at ui/consts/const_discriminant.rs:37:16: 37:22

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_discriminant.rs:37:16: 37:22
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:37:16: 37:22
                                         // + literal: Const { ty: Discriminant<Test>, val: Unevaluated(TEST_B, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[8] in main: &Test = {
    let mut _0: &Test;                   // return place in scope 0 at ui/consts/const_discriminant.rs:36:47: 36:59
    let mut _1: Test;                    // in scope 0 at ui/consts/const_discriminant.rs:36:48: 36:59

    bb0: {
        _1 = Test::A(const 17_u8);       // scope 0 at ui/consts/const_discriminant.rs:36:48: 36:59
        _0 = &_1;                        // scope 0 at ui/consts/const_discriminant.rs:36:47: 36:59
        return;                          // scope 0 at ui/consts/const_discriminant.rs:36:47: 36:59
    }
}

promoted[9] in main: &Discriminant<Test> = {
    let mut _0: &std::mem::Discriminant<Test>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::mem::Discriminant<Test>; // in scope 0 at ui/consts/const_discriminant.rs:36:16: 36:22

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_discriminant.rs:36:16: 36:22
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:36:16: 36:22
                                         // + literal: Const { ty: Discriminant<Test>, val: Unevaluated(TEST_A, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[10] in main: &Discriminant<Test> = {
    let mut _0: &std::mem::Discriminant<Test>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::mem::Discriminant<Test>; // in scope 0 at ui/consts/const_discriminant.rs:35:24: 35:36

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_discriminant.rs:35:24: 35:36
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:35:24: 35:36
                                         // + literal: Const { ty: Discriminant<Test>, val: Unevaluated(TEST_A_OTHER, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[11] in main: &Discriminant<Test> = {
    let mut _0: &std::mem::Discriminant<Test>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::mem::Discriminant<Test>; // in scope 0 at ui/consts/const_discriminant.rs:35:16: 35:22

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_discriminant.rs:35:16: 35:22
                                         // mir::Constant
                                         // + span: ui/consts/const_discriminant.rs:35:16: 35:22
                                         // + literal: Const { ty: Discriminant<Test>, val: Unevaluated(TEST_A, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

fn Test::A(_1: u8) -> Test {
    let mut _0: Test;                    // return place in scope 0 at ui/consts/const_discriminant.rs:9:5: 9:6

    bb0: {
        _0 = Test::A(move _1);           // scope 0 at ui/consts/const_discriminant.rs:9:5: 9:6
        return;                          // scope 0 at ui/consts/const_discriminant.rs:9:5: 9:6
    }
}

// MIR FOR CTFE
fn Test::A(_1: u8) -> Test {
    let mut _0: Test;                    // return place in scope 0 at ui/consts/const_discriminant.rs:9:5: 9:6

    bb0: {
        _0 = Test::A(move _1);           // scope 0 at ui/consts/const_discriminant.rs:9:5: 9:6
        return;                          // scope 0 at ui/consts/const_discriminant.rs:9:5: 9:6
    }
}

fn SingleVariant::Never(_1: Void) -> SingleVariant {
    let mut _0: SingleVariant;           // return place in scope 0 at ui/consts/const_discriminant.rs:22:5: 22:10

    bb0: {
        _0 = SingleVariant::Never(move _1); // scope 0 at ui/consts/const_discriminant.rs:22:5: 22:10
        return;                          // scope 0 at ui/consts/const_discriminant.rs:22:5: 22:10
    }
}

// MIR FOR CTFE
fn SingleVariant::Never(_1: Void) -> SingleVariant {
    let mut _0: SingleVariant;           // return place in scope 0 at ui/consts/const_discriminant.rs:22:5: 22:10

    bb0: {
        _0 = SingleVariant::Never(move _1); // scope 0 at ui/consts/const_discriminant.rs:22:5: 22:10
        return;                          // scope 0 at ui/consts/const_discriminant.rs:22:5: 22:10
    }
}
