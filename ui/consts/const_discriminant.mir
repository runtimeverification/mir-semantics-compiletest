// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const TEST_A: Discriminant<Test> = {
    let mut _0: std::mem::Discriminant<Test>;
    let mut _1: &Test;
    let _2: &Test;
    let _3: Test;
    let mut _4: &Test;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = discriminant::<Test>(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in TEST_A: &Test = {
    let mut _0: &Test;
    let mut _1: Test;

    bb0: {
        _1 = Test::A(const 5_u8);
        _0 = &_1;
        return;
    }
}

const TEST_A_OTHER: Discriminant<Test> = {
    let mut _0: std::mem::Discriminant<Test>;
    let mut _1: &Test;
    let _2: &Test;
    let _3: Test;
    let mut _4: &Test;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = discriminant::<Test>(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in TEST_A_OTHER: &Test = {
    let mut _0: &Test;
    let mut _1: Test;

    bb0: {
        _1 = Test::A(const 17_u8);
        _0 = &_1;
        return;
    }
}

const TEST_B: Discriminant<Test> = {
    let mut _0: std::mem::Discriminant<Test>;
    let mut _1: &Test;
    let _2: &Test;
    let _3: Test;
    let mut _4: &Test;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = discriminant::<Test>(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in TEST_B: &Test = {
    let mut _0: &Test;
    let mut _1: Test;

    bb0: {
        _1 = Test::B;
        _0 = &_1;
        return;
    }
}

const TEST_V: Discriminant<SingleVariant> = {
    let mut _0: std::mem::Discriminant<SingleVariant>;
    let mut _1: &SingleVariant;
    let _2: &SingleVariant;
    let _3: SingleVariant;
    let mut _4: &SingleVariant;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = discriminant::<SingleVariant>(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in TEST_V: &SingleVariant = {
    let mut _0: &SingleVariant;
    let mut _1: SingleVariant;

    bb0: {
        _1 = SingleVariant::V;
        _0 = &_1;
        return;
    }
}

const TEST_VOID: () = {
    let mut _0: ();
    let _1: ();
    let _2: std::mem::Discriminant<Void>;
    let mut _3: &Void;
    let _4: &Void;
    let _5: *const Void;
    let mut _6: *const ();
    let _7: &();
    let _8: ();
    scope 1 {
        let mut _9: &();
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _9 = const _;
        _7 = &(*_9);
        _6 = &raw const (*_7);
        _5 = move _6 as *const Void (PtrToPtr);
        StorageDead(_6);
        _4 = &(*_5);
        _3 = &(*_4);
        ConstEvalCounter;
        _2 = discriminant::<Void>(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_2);
        _1 = const ();
        StorageDead(_1);
        _0 = const ();
        return;
    }
}

promoted[0] in TEST_VOID: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::mem::Discriminant<Test>, &std::mem::Discriminant<Test>);
    let _2: &std::mem::Discriminant<Test>;
    let _3: &std::mem::Discriminant<Test>;
    let mut _4: bool;
    let mut _5: bool;
    let _7: !;
    let mut _8: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _9: (&std::mem::Discriminant<Test>, &std::mem::Discriminant<Test>);
    let mut _10: &std::mem::Discriminant<Test>;
    let _11: std::mem::Discriminant<Test>;
    let mut _12: &Test;
    let _13: &Test;
    let _14: &std::mem::Discriminant<Test>;
    let _15: &std::mem::Discriminant<Test>;
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&std::mem::Discriminant<Test>, &std::mem::Discriminant<Test>);
    let mut _22: &std::mem::Discriminant<Test>;
    let _23: std::mem::Discriminant<Test>;
    let mut _24: &Test;
    let _25: &Test;
    let _26: &std::mem::Discriminant<Test>;
    let _27: &std::mem::Discriminant<Test>;
    let mut _28: bool;
    let mut _29: bool;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: (&std::mem::Discriminant<Test>, &std::mem::Discriminant<Test>);
    let _34: &std::mem::Discriminant<Test>;
    let _35: &std::mem::Discriminant<Test>;
    let mut _36: bool;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&std::mem::Discriminant<Test>, &std::mem::Discriminant<Test>);
    let mut _41: &std::mem::Discriminant<Test>;
    let _42: std::mem::Discriminant<Test>;
    let mut _43: &Test;
    let _44: &Test;
    let _45: &std::mem::Discriminant<Test>;
    let _46: &std::mem::Discriminant<Test>;
    let mut _47: bool;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: (&std::mem::Discriminant<SingleVariant>, &std::mem::Discriminant<SingleVariant>);
    let mut _52: &std::mem::Discriminant<SingleVariant>;
    let _53: std::mem::Discriminant<SingleVariant>;
    let mut _54: &SingleVariant;
    let _55: &SingleVariant;
    let _56: &std::mem::Discriminant<SingleVariant>;
    let _57: &std::mem::Discriminant<SingleVariant>;
    let mut _58: bool;
    let mut _59: bool;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: &SingleVariant;
    let mut _64: &std::mem::Discriminant<SingleVariant>;
    let mut _65: &Test;
    let mut _66: &std::mem::Discriminant<Test>;
    let mut _67: &std::mem::Discriminant<Test>;
    let mut _68: &std::mem::Discriminant<Test>;
    let mut _69: &Test;
    let mut _70: &std::mem::Discriminant<Test>;
    let mut _71: &Test;
    let mut _72: &std::mem::Discriminant<Test>;
    let mut _73: &std::mem::Discriminant<Test>;
    let mut _74: &std::mem::Discriminant<Test>;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _6: core::panicking::AssertKind;
        scope 2 {
            debug kind => _6;
        }
    }
    scope 3 {
        debug left_val => _14;
        debug right_val => _15;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug left_val => _26;
        debug right_val => _27;
        let _30: core::panicking::AssertKind;
        scope 6 {
            debug kind => _30;
        }
    }
    scope 7 {
        debug left_val => _34;
        debug right_val => _35;
        let _37: core::panicking::AssertKind;
        scope 8 {
            debug kind => _37;
        }
    }
    scope 9 {
        debug left_val => _45;
        debug right_val => _46;
        let _48: core::panicking::AssertKind;
        scope 10 {
            debug kind => _48;
        }
    }
    scope 11 {
        debug left_val => _56;
        debug right_val => _57;
        let _60: core::panicking::AssertKind;
        scope 12 {
            debug kind => _60;
        }
    }

    bb0: {
        _74 = const _;
        _73 = const _;
        _1 = (_74, _73);
        _2 = (_1.0: &std::mem::Discriminant<Test>);
        _3 = (_1.1: &std::mem::Discriminant<Test>);
        _5 = <Discriminant<Test> as PartialEq>::eq(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = core::panicking::AssertKind::Eq;
        _8 = Option::<Arguments<'_>>::None;
        _7 = core::panicking::assert_failed::<Discriminant<Test>, Discriminant<Test>>(move _6, _2, _3, move _8) -> unwind continue;
    }

    bb3: {
        _72 = const _;
        _71 = const _;
        _13 = std::hint::black_box::<&Test>(_71) -> [return: bb4, unwind continue];
    }

    bb4: {
        _12 = _13;
        _11 = discriminant::<Test>(move _12) -> [return: bb5, unwind continue];
    }

    bb5: {
        _10 = &_11;
        _9 = (_72, move _10);
        _14 = (_9.0: &std::mem::Discriminant<Test>);
        _15 = (_9.1: &std::mem::Discriminant<Test>);
        _17 = <Discriminant<Test> as PartialEq>::eq(_14, _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<Discriminant<Test>, Discriminant<Test>>(move _18, _14, _15, move _20) -> unwind continue;
    }

    bb8: {
        _70 = const _;
        _69 = const _;
        _25 = std::hint::black_box::<&Test>(_69) -> [return: bb9, unwind continue];
    }

    bb9: {
        _24 = _25;
        _23 = discriminant::<Test>(move _24) -> [return: bb10, unwind continue];
    }

    bb10: {
        _22 = &_23;
        _21 = (_70, move _22);
        _26 = (_21.0: &std::mem::Discriminant<Test>);
        _27 = (_21.1: &std::mem::Discriminant<Test>);
        _29 = <Discriminant<Test> as PartialEq>::eq(_26, _27) -> [return: bb11, unwind continue];
    }

    bb11: {
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<Discriminant<Test>, Discriminant<Test>>(move _30, _26, _27, move _32) -> unwind continue;
    }

    bb13: {
        _68 = const _;
        _67 = const _;
        _33 = (_68, _67);
        _34 = (_33.0: &std::mem::Discriminant<Test>);
        _35 = (_33.1: &std::mem::Discriminant<Test>);
        _36 = <Discriminant<Test> as PartialEq>::eq(_34, _35) -> [return: bb14, unwind continue];
    }

    bb14: {
        switchInt(move _36) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _37 = core::panicking::AssertKind::Ne;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<Discriminant<Test>, Discriminant<Test>>(move _37, _34, _35, move _39) -> unwind continue;
    }

    bb16: {
        _66 = const _;
        _65 = const _;
        _44 = std::hint::black_box::<&Test>(_65) -> [return: bb17, unwind continue];
    }

    bb17: {
        _43 = _44;
        _42 = discriminant::<Test>(move _43) -> [return: bb18, unwind continue];
    }

    bb18: {
        _41 = &_42;
        _40 = (_66, move _41);
        _45 = (_40.0: &std::mem::Discriminant<Test>);
        _46 = (_40.1: &std::mem::Discriminant<Test>);
        _47 = <Discriminant<Test> as PartialEq>::eq(_45, _46) -> [return: bb19, unwind continue];
    }

    bb19: {
        switchInt(move _47) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _48 = core::panicking::AssertKind::Ne;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<Discriminant<Test>, Discriminant<Test>>(move _48, _45, _46, move _50) -> unwind continue;
    }

    bb21: {
        _64 = const _;
        _63 = const _;
        _55 = std::hint::black_box::<&SingleVariant>(_63) -> [return: bb22, unwind continue];
    }

    bb22: {
        _54 = _55;
        _53 = discriminant::<SingleVariant>(move _54) -> [return: bb23, unwind continue];
    }

    bb23: {
        _52 = &_53;
        _51 = (_64, move _52);
        _56 = (_51.0: &std::mem::Discriminant<SingleVariant>);
        _57 = (_51.1: &std::mem::Discriminant<SingleVariant>);
        _59 = <Discriminant<SingleVariant> as PartialEq>::eq(_56, _57) -> [return: bb24, unwind continue];
    }

    bb24: {
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<Discriminant<SingleVariant>, Discriminant<SingleVariant>>(move _60, _56, _57, move _62) -> unwind continue;
    }

    bb26: {
        return;
    }
}

promoted[0] in main: &SingleVariant = {
    let mut _0: &SingleVariant;
    let mut _1: SingleVariant;

    bb0: {
        _1 = SingleVariant::V;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Discriminant<SingleVariant> = {
    let mut _0: &std::mem::Discriminant<SingleVariant>;
    let mut _1: std::mem::Discriminant<SingleVariant>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &Test = {
    let mut _0: &Test;
    let mut _1: Test;

    bb0: {
        _1 = Test::C { a: const 42_u8, b: const 7_u8 };
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &Discriminant<Test> = {
    let mut _0: &std::mem::Discriminant<Test>;
    let mut _1: std::mem::Discriminant<Test>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &Discriminant<Test> = {
    let mut _0: &std::mem::Discriminant<Test>;
    let mut _1: std::mem::Discriminant<Test>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &Discriminant<Test> = {
    let mut _0: &std::mem::Discriminant<Test>;
    let mut _1: std::mem::Discriminant<Test>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &Test = {
    let mut _0: &Test;
    let mut _1: Test;

    bb0: {
        _1 = Test::B;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &Discriminant<Test> = {
    let mut _0: &std::mem::Discriminant<Test>;
    let mut _1: std::mem::Discriminant<Test>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &Test = {
    let mut _0: &Test;
    let mut _1: Test;

    bb0: {
        _1 = Test::A(const 17_u8);
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &Discriminant<Test> = {
    let mut _0: &std::mem::Discriminant<Test>;
    let mut _1: std::mem::Discriminant<Test>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &Discriminant<Test> = {
    let mut _0: &std::mem::Discriminant<Test>;
    let mut _1: std::mem::Discriminant<Test>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &Discriminant<Test> = {
    let mut _0: &std::mem::Discriminant<Test>;
    let mut _1: std::mem::Discriminant<Test>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

fn Test::A(_1: u8) -> Test {
    let mut _0: Test;

    bb0: {
        _0 = Test::A(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Test::A(_1: u8) -> Test {
    let mut _0: Test;

    bb0: {
        _0 = Test::A(move _1);
        return;
    }
}

fn SingleVariant::Never(_1: Void) -> SingleVariant {
    let mut _0: SingleVariant;

    bb0: {
        _0 = SingleVariant::Never(move _1);
        return;
    }
}

// MIR FOR CTFE
fn SingleVariant::Never(_1: Void) -> SingleVariant {
    let mut _0: SingleVariant;

    bb0: {
        _0 = SingleVariant::Never(move _1);
        return;
    }
}
