// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const X: *const u8 = {
    let mut _0: *const u8;               // return place in scope 0 at ui/consts/const-err-rpass.rs:5:10: 5:19
    let mut _1: *const u8;               // in scope 0 at ui/consts/const-err-rpass.rs:5:22: 5:30
    let mut _2: *const [u8; 0];          // in scope 0 at ui/consts/const-err-rpass.rs:5:22: 5:25
    let _3: &[u8; 0];                    // in scope 0 at ui/consts/const-err-rpass.rs:5:22: 5:25

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-err-rpass.rs:5:22: 5:30
        StorageLive(_2);                 // scope 0 at ui/consts/const-err-rpass.rs:5:22: 5:25
        StorageLive(_3);                 // scope 0 at ui/consts/const-err-rpass.rs:5:22: 5:25
        _3 = const b"";                  // scope 0 at ui/consts/const-err-rpass.rs:5:22: 5:25
                                         // mir::Constant
                                         // + span: ui/consts/const-err-rpass.rs:5:22: 5:25
                                         // + literal: Const { ty: &[u8; 0], val: Value(Scalar(alloc1)) }
        _2 = &raw const (*_3);           // scope 0 at ui/consts/const-err-rpass.rs:5:22: 5:25
        _1 = move _2 as *const u8 (Pointer(ArrayToPointer)); // scope 0 at ui/consts/const-err-rpass.rs:5:22: 5:30
        _0 = _1;                         // scope 0 at ui/consts/const-err-rpass.rs:5:22: 5:30
        StorageDead(_3);                 // scope 0 at ui/consts/const-err-rpass.rs:5:29: 5:30
        StorageDead(_2);                 // scope 0 at ui/consts/const-err-rpass.rs:5:29: 5:30
        StorageDead(_1);                 // scope 0 at ui/consts/const-err-rpass.rs:5:29: 5:30
        return;                          // scope 0 at ui/consts/const-err-rpass.rs:5:1: 5:31
    }
}

alloc1 (size: 0, align: 1) {}

const Y: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-err-rpass.rs:6:10: 6:14

    bb0: {
        _0 = Eq(const 'A', const 'B');   // scope 0 at ui/consts/const-err-rpass.rs:6:17: 6:27
        return;                          // scope 0 at ui/consts/const-err-rpass.rs:6:1: 6:28
    }
}

const Z: char = {
    let mut _0: char;                    // return place in scope 0 at ui/consts/const-err-rpass.rs:7:10: 7:14

    bb0: {
        _0 = const 'A';                  // scope 0 at ui/consts/const-err-rpass.rs:7:17: 7:20
        return;                          // scope 0 at ui/consts/const-err-rpass.rs:7:1: 7:21
    }
}

const W: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-err-rpass.rs:8:10: 8:14

    bb0: {
        _0 = Le(const _, const 'B');     // scope 0 at ui/consts/const-err-rpass.rs:8:17: 8:25
        return;                          // scope 0 at ui/consts/const-err-rpass.rs:8:1: 8:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-err-rpass.rs:11:11: 11:11
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                    scope 5 {
                        scope 6 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        return;                          // scope 0 at ui/consts/const-err-rpass.rs:18:2: 18:2
    }
}
