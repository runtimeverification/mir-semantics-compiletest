// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut STDERR_BUFFER_SPACE: [u8; 42] = {
    let mut _0: [u8; 42];                // return place in scope 0 at ui/consts/static_mut_containing_mut_ref.rs:3:33: 3:41

    bb0: {
        _0 = [const 0_u8; 42];           // scope 0 at ui/consts/static_mut_containing_mut_ref.rs:3:44: 3:53
        return;                          // scope 0 at ui/consts/static_mut_containing_mut_ref.rs:3:1: 3:54
    }
}

STDERR_BUFFER_SPACE::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/static_mut_containing_mut_ref.rs:3:38: 3:40

    bb0: {
        _0 = const 42_usize;             // scope 0 at ui/consts/static_mut_containing_mut_ref.rs:3:38: 3:40
        return;                          // scope 0 at ui/consts/static_mut_containing_mut_ref.rs:3:38: 3:40
    }
}

STDERR_BUFFER_SPACE::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/static_mut_containing_mut_ref.rs:3:50: 3:52

    bb0: {
        _0 = const 42_usize;             // scope 0 at ui/consts/static_mut_containing_mut_ref.rs:3:50: 3:52
        return;                          // scope 0 at ui/consts/static_mut_containing_mut_ref.rs:3:50: 3:52
    }
}

static mut STDERR_BUFFER: *mut [u8] = {
    let mut _0: *mut [u8];               // return place in scope 0 at ui/consts/static_mut_containing_mut_ref.rs:5:31: 5:40
    let mut _1: *mut [u8; 42];           // in scope 0 at ui/consts/static_mut_containing_mut_ref.rs:5:52: 5:76
    let mut _2: &mut [u8; 42];           // in scope 0 at ui/consts/static_mut_containing_mut_ref.rs:5:52: 5:76
    let mut _3: *mut [u8; 42];           // in scope 0 at ui/consts/static_mut_containing_mut_ref.rs:5:57: 5:76
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/static_mut_containing_mut_ref.rs:5:52: 5:76
        StorageLive(_2);                 // scope 1 at ui/consts/static_mut_containing_mut_ref.rs:5:52: 5:76
        StorageLive(_3);                 // scope 1 at ui/consts/static_mut_containing_mut_ref.rs:5:57: 5:76
        _3 = const {alloc1: *mut [u8; 42]}; // scope 1 at ui/consts/static_mut_containing_mut_ref.rs:5:57: 5:76
                                         // mir::Constant
                                         // + span: ui/consts/static_mut_containing_mut_ref.rs:5:57: 5:76
                                         // + literal: Const { ty: *mut [u8; 42], val: Value(Scalar(alloc1)) }
        _2 = &mut (*_3);                 // scope 1 at ui/consts/static_mut_containing_mut_ref.rs:5:52: 5:76
        _1 = &raw mut (*_2);             // scope 1 at ui/consts/static_mut_containing_mut_ref.rs:5:52: 5:76
        _0 = move _1 as *mut [u8] (Pointer(Unsize)); // scope 1 at ui/consts/static_mut_containing_mut_ref.rs:5:52: 5:76
        StorageDead(_1);                 // scope 1 at ui/consts/static_mut_containing_mut_ref.rs:5:75: 5:76
        StorageDead(_2);                 // scope 0 at ui/consts/static_mut_containing_mut_ref.rs:5:77: 5:78
        return;                          // scope 0 at ui/consts/static_mut_containing_mut_ref.rs:5:1: 5:79
    }
}

alloc1 (static: STDERR_BUFFER_SPACE, size: 42, align: 1) {
    0x00 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x10 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x20 │ 00 00 00 00 00 00 00 00 00 00                   │ ..........
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/static_mut_containing_mut_ref.rs:7:11: 7:11

    bb0: {
        return;                          // scope 0 at ui/consts/static_mut_containing_mut_ref.rs:7:13: 7:13
    }
}
