// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const INT_U32_NO: u32 = {
    let mut _0: u32;
    let mut _1: u32;

    bb0: {
        StorageLive(_1);
        _1 = const 42_u32;
        ConstEvalCounter;
        _0 = core::num::<impl u32>::saturating_add(move _1, const 2_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}

const INT_U32: u32 = {
    let mut _0: u32;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::saturating_add(const _, const 1_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const INT_U128: u128 = {
    let mut _0: u128;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u128>::saturating_add(const _, const 1_u128) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const INT_I128: i128 = {
    let mut _0: i128;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i128>::saturating_add(const _, const 1_i128) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const INT_I128_NEG: i128 = {
    let mut _0: i128;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i128>::saturating_add(const _, const -1_i128) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const INT_U32_NO_SUB: u32 = {
    let mut _0: u32;
    let mut _1: u32;

    bb0: {
        StorageLive(_1);
        _1 = const 42_u32;
        ConstEvalCounter;
        _0 = core::num::<impl u32>::saturating_sub(move _1, const 2_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}

const INT_U32_SUB: u32 = {
    let mut _0: u32;
    let mut _1: u32;

    bb0: {
        StorageLive(_1);
        _1 = const 1_u32;
        ConstEvalCounter;
        _0 = core::num::<impl u32>::saturating_sub(move _1, const 2_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}

const INT_I32_NO_SUB: i32 = {
    let mut _0: i32;
    let mut _1: i32;

    bb0: {
        StorageLive(_1);
        _1 = const -42_i32;
        ConstEvalCounter;
        _0 = core::num::<impl i32>::saturating_sub(move _1, const 2_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}

const INT_I32_NEG_SUB: i32 = {
    let mut _0: i32;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::saturating_sub(const _, const 1_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const INT_I32_POS_SUB: i32 = {
    let mut _0: i32;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::saturating_sub(const _, const -1_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const INT_U128_SUB: u128 = {
    let mut _0: u128;
    let mut _1: u128;

    bb0: {
        StorageLive(_1);
        _1 = const 0_u128;
        ConstEvalCounter;
        _0 = core::num::<impl u128>::saturating_sub(move _1, const 1_u128) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}

const INT_I128_NEG_SUB: i128 = {
    let mut _0: i128;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i128>::saturating_sub(const _, const 1_i128) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const INT_I128_POS_SUB: i128 = {
    let mut _0: i128;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i128>::saturating_sub(const _, const -1_i128) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u32, &u32);
    let _2: &u32;
    let _3: &u32;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: u32;
    let mut _7: u32;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&u32, &u32);
    let _12: &u32;
    let _13: &u32;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: u32;
    let mut _17: u32;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&u128, &u128);
    let _22: &u128;
    let _23: &u128;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: u128;
    let mut _27: u128;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&i128, &i128);
    let _32: &i128;
    let _33: &i128;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: i128;
    let mut _37: i128;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&i128, &i128);
    let _42: &i128;
    let _43: &i128;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: i128;
    let mut _47: i128;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: (&u32, &u32);
    let _52: &u32;
    let _53: &u32;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: u32;
    let mut _57: u32;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&u32, &u32);
    let _62: &u32;
    let _63: &u32;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: u32;
    let mut _67: u32;
    let _69: !;
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _71: (&i32, &i32);
    let _72: &i32;
    let _73: &i32;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: i32;
    let mut _77: i32;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _81: (&i32, &i32);
    let _82: &i32;
    let _83: &i32;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: i32;
    let mut _87: i32;
    let _89: !;
    let mut _90: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _91: (&i32, &i32);
    let _92: &i32;
    let _93: &i32;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: i32;
    let mut _97: i32;
    let _99: !;
    let mut _100: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _101: (&u128, &u128);
    let _102: &u128;
    let _103: &u128;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: u128;
    let mut _107: u128;
    let _109: !;
    let mut _110: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _111: (&i128, &i128);
    let _112: &i128;
    let _113: &i128;
    let mut _114: bool;
    let mut _115: bool;
    let mut _116: i128;
    let mut _117: i128;
    let _119: !;
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _121: (&i128, &i128);
    let _122: &i128;
    let _123: &i128;
    let mut _124: bool;
    let mut _125: bool;
    let mut _126: i128;
    let mut _127: i128;
    let _129: !;
    let mut _130: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _131: &i128;
    let mut _132: &i128;
    let mut _133: &i128;
    let mut _134: &i128;
    let mut _135: &u128;
    let mut _136: &u128;
    let mut _137: &i32;
    let mut _138: &i32;
    let mut _139: &i32;
    let mut _140: &i32;
    let mut _141: &i32;
    let mut _142: &i32;
    let mut _143: &u32;
    let mut _144: &u32;
    let mut _145: &u32;
    let mut _146: &u32;
    let mut _147: &i128;
    let mut _148: &i128;
    let mut _149: &i128;
    let mut _150: &i128;
    let mut _151: &u128;
    let mut _152: &u128;
    let mut _153: &u32;
    let mut _154: &u32;
    let mut _155: &u32;
    let mut _156: &u32;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _12;
        debug right_val => _13;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 6 {
            debug kind => _28;
        }
    }
    scope 7 {
        debug left_val => _32;
        debug right_val => _33;
        let _38: core::panicking::AssertKind;
        scope 8 {
            debug kind => _38;
        }
    }
    scope 9 {
        debug left_val => _42;
        debug right_val => _43;
        let _48: core::panicking::AssertKind;
        scope 10 {
            debug kind => _48;
        }
    }
    scope 11 {
        debug left_val => _52;
        debug right_val => _53;
        let _58: core::panicking::AssertKind;
        scope 12 {
            debug kind => _58;
        }
    }
    scope 13 {
        debug left_val => _62;
        debug right_val => _63;
        let _68: core::panicking::AssertKind;
        scope 14 {
            debug kind => _68;
        }
    }
    scope 15 {
        debug left_val => _72;
        debug right_val => _73;
        let _78: core::panicking::AssertKind;
        scope 16 {
            debug kind => _78;
        }
    }
    scope 17 {
        debug left_val => _82;
        debug right_val => _83;
        let _88: core::panicking::AssertKind;
        scope 18 {
            debug kind => _88;
        }
    }
    scope 19 {
        debug left_val => _92;
        debug right_val => _93;
        let _98: core::panicking::AssertKind;
        scope 20 {
            debug kind => _98;
        }
    }
    scope 21 {
        debug left_val => _102;
        debug right_val => _103;
        let _108: core::panicking::AssertKind;
        scope 22 {
            debug kind => _108;
        }
    }
    scope 23 {
        debug left_val => _112;
        debug right_val => _113;
        let _118: core::panicking::AssertKind;
        scope 24 {
            debug kind => _118;
        }
    }
    scope 25 {
        debug left_val => _122;
        debug right_val => _123;
        let _128: core::panicking::AssertKind;
        scope 26 {
            debug kind => _128;
        }
    }

    bb0: {
        _156 = const _;
        _155 = const _;
        _1 = (_156, _155);
        _2 = (_1.0: &u32);
        _3 = (_1.1: &u32);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<u32, u32>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        _154 = const _;
        _153 = const _;
        _11 = (_154, _153);
        _12 = (_11.0: &u32);
        _13 = (_11.1: &u32);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<u32, u32>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb4: {
        _152 = const _;
        _151 = const _;
        _21 = (_152, _151);
        _22 = (_21.0: &u128);
        _23 = (_21.1: &u128);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<u128, u128>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb6: {
        _150 = const _;
        _149 = const _;
        _31 = (_150, _149);
        _32 = (_31.0: &i128);
        _33 = (_31.1: &i128);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<i128, i128>(move _38, _32, _33, move _40) -> unwind continue;
    }

    bb8: {
        _148 = const _;
        _147 = const _;
        _41 = (_148, _147);
        _42 = (_41.0: &i128);
        _43 = (_41.1: &i128);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<i128, i128>(move _48, _42, _43, move _50) -> unwind continue;
    }

    bb10: {
        _146 = const _;
        _145 = const _;
        _51 = (_146, _145);
        _52 = (_51.0: &u32);
        _53 = (_51.1: &u32);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<u32, u32>(move _58, _52, _53, move _60) -> unwind continue;
    }

    bb12: {
        _144 = const _;
        _143 = const _;
        _61 = (_144, _143);
        _62 = (_61.0: &u32);
        _63 = (_61.1: &u32);
        _66 = (*_62);
        _67 = (*_63);
        _65 = Eq(move _66, move _67);
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _68 = core::panicking::AssertKind::Eq;
        _70 = Option::<Arguments<'_>>::None;
        _69 = core::panicking::assert_failed::<u32, u32>(move _68, _62, _63, move _70) -> unwind continue;
    }

    bb14: {
        _142 = const _;
        _141 = const _;
        _71 = (_142, _141);
        _72 = (_71.0: &i32);
        _73 = (_71.1: &i32);
        _76 = (*_72);
        _77 = (*_73);
        _75 = Eq(move _76, move _77);
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<i32, i32>(move _78, _72, _73, move _80) -> unwind continue;
    }

    bb16: {
        _140 = const _;
        _139 = const _;
        _81 = (_140, _139);
        _82 = (_81.0: &i32);
        _83 = (_81.1: &i32);
        _86 = (*_82);
        _87 = (*_83);
        _85 = Eq(move _86, move _87);
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _88 = core::panicking::AssertKind::Eq;
        _90 = Option::<Arguments<'_>>::None;
        _89 = core::panicking::assert_failed::<i32, i32>(move _88, _82, _83, move _90) -> unwind continue;
    }

    bb18: {
        _138 = const _;
        _137 = const _;
        _91 = (_138, _137);
        _92 = (_91.0: &i32);
        _93 = (_91.1: &i32);
        _96 = (*_92);
        _97 = (*_93);
        _95 = Eq(move _96, move _97);
        _94 = Not(move _95);
        switchInt(move _94) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _98 = core::panicking::AssertKind::Eq;
        _100 = Option::<Arguments<'_>>::None;
        _99 = core::panicking::assert_failed::<i32, i32>(move _98, _92, _93, move _100) -> unwind continue;
    }

    bb20: {
        _136 = const _;
        _135 = const _;
        _101 = (_136, _135);
        _102 = (_101.0: &u128);
        _103 = (_101.1: &u128);
        _106 = (*_102);
        _107 = (*_103);
        _105 = Eq(move _106, move _107);
        _104 = Not(move _105);
        switchInt(move _104) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _108 = core::panicking::AssertKind::Eq;
        _110 = Option::<Arguments<'_>>::None;
        _109 = core::panicking::assert_failed::<u128, u128>(move _108, _102, _103, move _110) -> unwind continue;
    }

    bb22: {
        _134 = const _;
        _133 = const _;
        _111 = (_134, _133);
        _112 = (_111.0: &i128);
        _113 = (_111.1: &i128);
        _116 = (*_112);
        _117 = (*_113);
        _115 = Eq(move _116, move _117);
        _114 = Not(move _115);
        switchInt(move _114) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _118 = core::panicking::AssertKind::Eq;
        _120 = Option::<Arguments<'_>>::None;
        _119 = core::panicking::assert_failed::<i128, i128>(move _118, _112, _113, move _120) -> unwind continue;
    }

    bb24: {
        _132 = const _;
        _131 = const _;
        _121 = (_132, _131);
        _122 = (_121.0: &i128);
        _123 = (_121.1: &i128);
        _126 = (*_122);
        _127 = (*_123);
        _125 = Eq(move _126, move _127);
        _124 = Not(move _125);
        switchInt(move _124) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _128 = core::panicking::AssertKind::Eq;
        _130 = Option::<Arguments<'_>>::None;
        _129 = core::panicking::assert_failed::<i128, i128>(move _128, _122, _123, move _130) -> unwind continue;
    }

    bb26: {
        return;
    }
}

promoted[0] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const 0_u128;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const -44_i32;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 0_u32;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 40_u32;
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[24] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 44_u32;
        _0 = &_1;
        return;
    }
}

promoted[25] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}
