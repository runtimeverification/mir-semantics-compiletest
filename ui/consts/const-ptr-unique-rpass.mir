// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const PTR: *mut u32 = {
    let mut _0: *mut u32;
    let mut _1: std::ptr::Unique<u32>;

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = Unique::<u32>::dangling() -> [return: bb1, unwind continue];
    }

    bb1: {
        ConstEvalCounter;
        _0 = Unique::<u32>::as_ptr(move _1) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&*mut u32, &*mut u32);
    let mut _2: &*mut u32;
    let _3: *mut u32;
    let mut _4: std::ptr::Unique<u32>;
    let mut _5: fn() -> std::ptr::Unique<u32>;
    let mut _6: fn() -> std::ptr::Unique<u32>;
    let _7: &*mut u32;
    let _8: &*mut u32;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: *mut u32;
    let mut _12: *mut u32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: &*mut u32;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _13: core::panicking::AssertKind;
        scope 2 {
            debug kind => _13;
        }
    }

    bb0: {
        _16 = const _;
        _6 = Unique::<u32>::dangling as fn() -> std::ptr::Unique<u32> (Pointer(ReifyFnPointer));
        _5 = test::black_box::<fn() -> Unique<u32>>(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = move _5() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = Unique::<u32>::as_ptr(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _2 = &_3;
        _1 = (_16, move _2);
        _7 = (_1.0: &*mut u32);
        _8 = (_1.1: &*mut u32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<*mut u32, *mut u32>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb5: {
        return;
    }
}

promoted[0] in main: &*mut u32 = {
    let mut _0: &*mut u32;
    let mut _1: *mut u32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}
