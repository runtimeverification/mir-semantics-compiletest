// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const PTR: *mut u32 = {
    let mut _0: *mut u32;                // return place in scope 0 at ui/consts/const-ptr-unique-rpass.rs:11:12: 11:20
    let mut _1: std::ptr::Unique<u32>;   // in scope 0 at ui/consts/const-ptr-unique-rpass.rs:11:23: 11:41

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-ptr-unique-rpass.rs:11:23: 11:41
        ConstEvalCounter;                // scope 0 at ui/consts/const-ptr-unique-rpass.rs:11:23: 11:41
        _1 = Unique::<u32>::dangling() -> bb1; // scope 0 at ui/consts/const-ptr-unique-rpass.rs:11:23: 11:41
                                         // mir::Constant
                                         // + span: ui/consts/const-ptr-unique-rpass.rs:11:23: 11:39
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Unique<u32> {Unique::<u32>::dangling}, val: Value(<ZST>) }
    }

    bb1: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-ptr-unique-rpass.rs:11:23: 11:50
        _0 = Unique::<u32>::as_ptr(move _1) -> bb2; // scope 0 at ui/consts/const-ptr-unique-rpass.rs:11:23: 11:50
                                         // mir::Constant
                                         // + span: ui/consts/const-ptr-unique-rpass.rs:11:42: 11:48
                                         // + literal: Const { ty: fn(Unique<u32>) -> *mut u32 {Unique::<u32>::as_ptr}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_1);                 // scope 0 at ui/consts/const-ptr-unique-rpass.rs:11:49: 11:50
        return;                          // scope 0 at ui/consts/const-ptr-unique-rpass.rs:11:1: 11:51
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-ptr-unique-rpass.rs:13:15: 13:15
    let mut _1: (&*mut u32, &*mut u32);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &*mut u32;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &*mut u32;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: *mut u32;                    // in scope 0 at ui/consts/const-ptr-unique-rpass.rs:15:21: 15:71
    let mut _5: std::ptr::Unique<u32>;   // in scope 0 at ui/consts/const-ptr-unique-rpass.rs:15:21: 15:62
    let mut _6: fn() -> std::ptr::Unique<u32>; // in scope 0 at ui/consts/const-ptr-unique-rpass.rs:15:21: 15:60
    let mut _7: fn() -> std::ptr::Unique<u32>; // in scope 0 at ui/consts/const-ptr-unique-rpass.rs:15:36: 15:59
    let _8: &*mut u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _9: &*mut u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: *mut u32;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: *mut u32;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &*mut u32;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &*mut u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &*mut u32;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &*mut u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: &*mut u32;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _22 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &*mut u32, val: Unevaluated(main, [], Some(promoted[0])) }
        _2 = _22;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _7 = Unique::<u32>::dangling as fn() -> std::ptr::Unique<u32> (Pointer(ReifyFnPointer)); // scope 0 at ui/consts/const-ptr-unique-rpass.rs:15:36: 15:59
                                         // mir::Constant
                                         // + span: ui/consts/const-ptr-unique-rpass.rs:15:36: 15:59
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> Unique<u32> {Unique::<u32>::dangling}, val: Value(<ZST>) }
        _6 = test::black_box::<fn() -> Unique<u32>>(move _7) -> bb1; // scope 0 at ui/consts/const-ptr-unique-rpass.rs:15:21: 15:60
                                         // mir::Constant
                                         // + span: ui/consts/const-ptr-unique-rpass.rs:15:21: 15:35
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(fn() -> Unique<u32>) -> fn() -> Unique<u32> {test::black_box::<fn() -> Unique<u32>>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = move _6() -> bb2;           // scope 0 at ui/consts/const-ptr-unique-rpass.rs:15:21: 15:62
    }

    bb2: {
        _4 = Unique::<u32>::as_ptr(move _5) -> bb3; // scope 0 at ui/consts/const-ptr-unique-rpass.rs:15:21: 15:71
                                         // mir::Constant
                                         // + span: ui/consts/const-ptr-unique-rpass.rs:15:63: 15:69
                                         // + literal: Const { ty: fn(Unique<u32>) -> *mut u32 {Unique::<u32>::as_ptr}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = &_4;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_1.0: &*mut u32);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_1.1: &*mut u32);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = const {0x4 as *mut u32};   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
                                         // + literal: Const { ty: *mut u32, val: Value(Scalar(0x0000000000000004)) }
        _13 = (*_9);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb5, otherwise: bb4]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _14 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<*mut u32, *mut u32>(move _16, move _17, move _19, move _21); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a *mut u32, &'b *mut u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<*mut u32, *mut u32>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/consts/const-ptr-unique-rpass.rs:16:2: 16:2
    }
}

promoted[0] in main: &*mut u32 = {
    let mut _0: &*mut u32;               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: *mut u32;                // in scope 0 at ui/consts/const-ptr-unique-rpass.rs:15:16: 15:19

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-ptr-unique-rpass.rs:15:16: 15:19
                                         // mir::Constant
                                         // + span: ui/consts/const-ptr-unique-rpass.rs:15:16: 15:19
                                         // + literal: Const { ty: *mut u32, val: Unevaluated(PTR, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}
