// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn tester_fn(_1: T) -> <T as FnOnce<()>>::Output {
    debug f => _1;                       // in scope 0 at ui/consts/fn_trait_refs.rs:13:23: 13:24
    let mut _0: <T as std::ops::FnOnce<()>>::Output; // return place in scope 0 at ui/consts/fn_trait_refs.rs:13:32: 13:41
    let mut _2: &T;                      // in scope 0 at ui/consts/fn_trait_refs.rs:17:5: 17:6
    let mut _3: ();                      // in scope 0 at ui/consts/fn_trait_refs.rs:17:5: 17:8

    bb0: {
        _2 = &_1;                        // scope 0 at ui/consts/fn_trait_refs.rs:17:5: 17:6
        _0 = <T as Fn<()>>::call(move _2, move _3) -> [return: bb1, unwind: bb3]; // scope 0 at ui/consts/fn_trait_refs.rs:17:5: 17:8
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:17:5: 17:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a T, ()) -> <T as FnOnce<()>>::Output {<T as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/consts/fn_trait_refs.rs:18:1: 18:2
    }

    bb2: {
        return;                          // scope 0 at ui/consts/fn_trait_refs.rs:18:2: 18:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/consts/fn_trait_refs.rs:18:1: 18:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/consts/fn_trait_refs.rs:13:1: 18:2
    }
}

// MIR FOR CTFE
fn tester_fn(_1: T) -> <T as FnOnce<()>>::Output {
    debug f => _1;                       // in scope 0 at ui/consts/fn_trait_refs.rs:13:23: 13:24
    let mut _0: <T as std::ops::FnOnce<()>>::Output; // return place in scope 0 at ui/consts/fn_trait_refs.rs:13:32: 13:41
    let mut _2: &T;                      // in scope 0 at ui/consts/fn_trait_refs.rs:17:5: 17:6
    let mut _3: ();                      // in scope 0 at ui/consts/fn_trait_refs.rs:17:5: 17:8

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/fn_trait_refs.rs:17:5: 17:6
        _2 = &_1;                        // scope 0 at ui/consts/fn_trait_refs.rs:17:5: 17:6
        StorageLive(_3);                 // scope 0 at ui/consts/fn_trait_refs.rs:17:5: 17:8
        _3 = ();                         // scope 0 at ui/consts/fn_trait_refs.rs:17:5: 17:8
        ConstEvalCounter;                // scope 0 at ui/consts/fn_trait_refs.rs:17:5: 17:8
        _0 = <T as Fn<()>>::call(move _2, move _3) -> [return: bb1, unwind: bb3]; // scope 0 at ui/consts/fn_trait_refs.rs:17:5: 17:8
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:17:5: 17:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a T, ()) -> <T as FnOnce<()>>::Output {<T as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at ui/consts/fn_trait_refs.rs:17:7: 17:8
        StorageDead(_2);                 // scope 0 at ui/consts/fn_trait_refs.rs:17:7: 17:8
        drop(_1) -> [return: bb2, unwind: bb4]; // scope 0 at ui/consts/fn_trait_refs.rs:18:1: 18:2
    }

    bb2: {
        return;                          // scope 0 at ui/consts/fn_trait_refs.rs:18:2: 18:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/consts/fn_trait_refs.rs:18:1: 18:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/consts/fn_trait_refs.rs:13:1: 18:2
    }
}

fn tester_fn_mut(_1: T) -> <T as FnOnce<()>>::Output {
    debug f => _1;                       // in scope 0 at ui/consts/fn_trait_refs.rs:20:27: 20:32
    let mut _0: <T as std::ops::FnOnce<()>>::Output; // return place in scope 0 at ui/consts/fn_trait_refs.rs:20:40: 20:49
    let mut _2: &mut T;                  // in scope 0 at ui/consts/fn_trait_refs.rs:24:5: 24:6
    let mut _3: ();                      // in scope 0 at ui/consts/fn_trait_refs.rs:24:5: 24:8

    bb0: {
        _2 = &mut _1;                    // scope 0 at ui/consts/fn_trait_refs.rs:24:5: 24:6
        _0 = <T as FnMut<()>>::call_mut(move _2, move _3) -> [return: bb1, unwind: bb3]; // scope 0 at ui/consts/fn_trait_refs.rs:24:5: 24:8
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:24:5: 24:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut T, ()) -> <T as FnOnce<()>>::Output {<T as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/consts/fn_trait_refs.rs:25:1: 25:2
    }

    bb2: {
        return;                          // scope 0 at ui/consts/fn_trait_refs.rs:25:2: 25:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/consts/fn_trait_refs.rs:25:1: 25:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/consts/fn_trait_refs.rs:20:1: 25:2
    }
}

// MIR FOR CTFE
fn tester_fn_mut(_1: T) -> <T as FnOnce<()>>::Output {
    debug f => _1;                       // in scope 0 at ui/consts/fn_trait_refs.rs:20:27: 20:32
    let mut _0: <T as std::ops::FnOnce<()>>::Output; // return place in scope 0 at ui/consts/fn_trait_refs.rs:20:40: 20:49
    let mut _2: &mut T;                  // in scope 0 at ui/consts/fn_trait_refs.rs:24:5: 24:6
    let mut _3: ();                      // in scope 0 at ui/consts/fn_trait_refs.rs:24:5: 24:8

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/fn_trait_refs.rs:24:5: 24:6
        _2 = &mut _1;                    // scope 0 at ui/consts/fn_trait_refs.rs:24:5: 24:6
        StorageLive(_3);                 // scope 0 at ui/consts/fn_trait_refs.rs:24:5: 24:8
        _3 = ();                         // scope 0 at ui/consts/fn_trait_refs.rs:24:5: 24:8
        ConstEvalCounter;                // scope 0 at ui/consts/fn_trait_refs.rs:24:5: 24:8
        _0 = <T as FnMut<()>>::call_mut(move _2, move _3) -> [return: bb1, unwind: bb3]; // scope 0 at ui/consts/fn_trait_refs.rs:24:5: 24:8
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:24:5: 24:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut T, ()) -> <T as FnOnce<()>>::Output {<T as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at ui/consts/fn_trait_refs.rs:24:7: 24:8
        StorageDead(_2);                 // scope 0 at ui/consts/fn_trait_refs.rs:24:7: 24:8
        drop(_1) -> [return: bb2, unwind: bb4]; // scope 0 at ui/consts/fn_trait_refs.rs:25:1: 25:2
    }

    bb2: {
        return;                          // scope 0 at ui/consts/fn_trait_refs.rs:25:2: 25:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/consts/fn_trait_refs.rs:25:1: 25:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/consts/fn_trait_refs.rs:20:1: 25:2
    }
}

fn tester_fn_once(_1: T) -> <T as FnOnce<()>>::Output {
    debug f => _1;                       // in scope 0 at ui/consts/fn_trait_refs.rs:27:28: 27:29
    let mut _0: <T as std::ops::FnOnce<()>>::Output; // return place in scope 0 at ui/consts/fn_trait_refs.rs:27:37: 27:46
    let mut _2: T;                       // in scope 0 at ui/consts/fn_trait_refs.rs:31:5: 31:6
    let mut _3: ();                      // in scope 0 at ui/consts/fn_trait_refs.rs:31:5: 31:8

    bb0: {
        _2 = move _1;                    // scope 0 at ui/consts/fn_trait_refs.rs:31:5: 31:6
        _0 = <T as FnOnce<()>>::call_once(move _2, move _3) -> bb1; // scope 0 at ui/consts/fn_trait_refs.rs:31:5: 31:8
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:31:5: 31:6
                                         // + literal: Const { ty: extern "rust-call" fn(T, ()) -> <T as FnOnce<()>>::Output {<T as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/fn_trait_refs.rs:32:2: 32:2
    }
}

// MIR FOR CTFE
fn tester_fn_once(_1: T) -> <T as FnOnce<()>>::Output {
    debug f => _1;                       // in scope 0 at ui/consts/fn_trait_refs.rs:27:28: 27:29
    let mut _0: <T as std::ops::FnOnce<()>>::Output; // return place in scope 0 at ui/consts/fn_trait_refs.rs:27:37: 27:46
    let mut _2: T;                       // in scope 0 at ui/consts/fn_trait_refs.rs:31:5: 31:6
    let mut _3: ();                      // in scope 0 at ui/consts/fn_trait_refs.rs:31:5: 31:8

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/fn_trait_refs.rs:31:5: 31:6
        _2 = move _1;                    // scope 0 at ui/consts/fn_trait_refs.rs:31:5: 31:6
        StorageLive(_3);                 // scope 0 at ui/consts/fn_trait_refs.rs:31:5: 31:8
        _3 = ();                         // scope 0 at ui/consts/fn_trait_refs.rs:31:5: 31:8
        ConstEvalCounter;                // scope 0 at ui/consts/fn_trait_refs.rs:31:5: 31:8
        _0 = <T as FnOnce<()>>::call_once(move _2, move _3) -> [return: bb1, unwind: bb2]; // scope 0 at ui/consts/fn_trait_refs.rs:31:5: 31:8
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:31:5: 31:6
                                         // + literal: Const { ty: extern "rust-call" fn(T, ()) -> <T as FnOnce<()>>::Output {<T as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at ui/consts/fn_trait_refs.rs:31:7: 31:8
        StorageDead(_2);                 // scope 0 at ui/consts/fn_trait_refs.rs:31:7: 31:8
        return;                          // scope 0 at ui/consts/fn_trait_refs.rs:32:2: 32:2
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at ui/consts/fn_trait_refs.rs:27:1: 32:2
    }
}

fn test_fn(_1: T) -> (<T as FnOnce<()>>::Output, <T as FnOnce<()>>::Output, <T as FnOnce<()>>::Output) {
    debug f => _1;                       // in scope 0 at ui/consts/fn_trait_refs.rs:34:21: 34:26
    let mut _0: (<T as std::ops::FnOnce<()>>::Output, <T as std::ops::FnOnce<()>>::Output, <T as std::ops::FnOnce<()>>::Output); // return place in scope 0 at ui/consts/fn_trait_refs.rs:34:34: 34:67
    let mut _2: <T as std::ops::FnOnce<()>>::Output; // in scope 0 at ui/consts/fn_trait_refs.rs:40:9: 40:22
    let mut _3: &T;                      // in scope 0 at ui/consts/fn_trait_refs.rs:40:19: 40:21
    let mut _4: <T as std::ops::FnOnce<()>>::Output; // in scope 0 at ui/consts/fn_trait_refs.rs:42:9: 42:26
    let mut _5: &T;                      // in scope 0 at ui/consts/fn_trait_refs.rs:42:23: 42:25
    let mut _6: <T as std::ops::FnOnce<()>>::Output; // in scope 0 at ui/consts/fn_trait_refs.rs:44:9: 44:27
    let mut _7: &T;                      // in scope 0 at ui/consts/fn_trait_refs.rs:44:24: 44:26

    bb0: {
        _3 = &_1;                        // scope 0 at ui/consts/fn_trait_refs.rs:40:19: 40:21
        _2 = tester_fn::<&T>(move _3) -> [return: bb1, unwind: bb7]; // scope 0 at ui/consts/fn_trait_refs.rs:40:9: 40:22
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:40:9: 40:18
                                         // + literal: Const { ty: fn(&T) -> <&T as FnOnce<()>>::Output {tester_fn::<&T>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_1;                        // scope 0 at ui/consts/fn_trait_refs.rs:42:23: 42:25
        _4 = tester_fn_mut::<&T>(move _5) -> [return: bb2, unwind: bb6]; // scope 0 at ui/consts/fn_trait_refs.rs:42:9: 42:26
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:42:9: 42:22
                                         // + literal: Const { ty: fn(&T) -> <&T as FnOnce<()>>::Output {tester_fn_mut::<&T>}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &_1;                        // scope 0 at ui/consts/fn_trait_refs.rs:44:24: 44:26
        _6 = tester_fn_once::<&T>(move _7) -> [return: bb3, unwind: bb5]; // scope 0 at ui/consts/fn_trait_refs.rs:44:9: 44:27
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:44:9: 44:23
                                         // + literal: Const { ty: fn(&T) -> <&T as FnOnce<()>>::Output {tester_fn_once::<&T>}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = (move _2, move _4, move _6); // scope 0 at ui/consts/fn_trait_refs.rs:38:5: 45:6
        drop(_1) -> bb4;                 // scope 0 at ui/consts/fn_trait_refs.rs:46:1: 46:2
    }

    bb4: {
        return;                          // scope 0 at ui/consts/fn_trait_refs.rs:46:2: 46:2
    }

    bb5 (cleanup): {
        drop(_4) -> bb6;                 // scope 0 at ui/consts/fn_trait_refs.rs:45:5: 45:6
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/consts/fn_trait_refs.rs:45:5: 45:6
    }

    bb7 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at ui/consts/fn_trait_refs.rs:46:1: 46:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/consts/fn_trait_refs.rs:34:1: 46:2
    }
}

// MIR FOR CTFE
fn test_fn(_1: T) -> (<T as FnOnce<()>>::Output, <T as FnOnce<()>>::Output, <T as FnOnce<()>>::Output) {
    debug f => _1;                       // in scope 0 at ui/consts/fn_trait_refs.rs:34:21: 34:26
    let mut _0: (<T as std::ops::FnOnce<()>>::Output, <T as std::ops::FnOnce<()>>::Output, <T as std::ops::FnOnce<()>>::Output); // return place in scope 0 at ui/consts/fn_trait_refs.rs:34:34: 34:67
    let mut _2: <T as std::ops::FnOnce<()>>::Output; // in scope 0 at ui/consts/fn_trait_refs.rs:40:9: 40:22
    let mut _3: &T;                      // in scope 0 at ui/consts/fn_trait_refs.rs:40:19: 40:21
    let mut _4: <T as std::ops::FnOnce<()>>::Output; // in scope 0 at ui/consts/fn_trait_refs.rs:42:9: 42:26
    let mut _5: &T;                      // in scope 0 at ui/consts/fn_trait_refs.rs:42:23: 42:25
    let mut _6: <T as std::ops::FnOnce<()>>::Output; // in scope 0 at ui/consts/fn_trait_refs.rs:44:9: 44:27
    let mut _7: &T;                      // in scope 0 at ui/consts/fn_trait_refs.rs:44:24: 44:26

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/fn_trait_refs.rs:40:9: 40:22
        StorageLive(_3);                 // scope 0 at ui/consts/fn_trait_refs.rs:40:19: 40:21
        _3 = &_1;                        // scope 0 at ui/consts/fn_trait_refs.rs:40:19: 40:21
        ConstEvalCounter;                // scope 0 at ui/consts/fn_trait_refs.rs:40:9: 40:22
        _2 = tester_fn::<&T>(move _3) -> [return: bb1, unwind: bb7]; // scope 0 at ui/consts/fn_trait_refs.rs:40:9: 40:22
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:40:9: 40:18
                                         // + literal: Const { ty: fn(&T) -> <&T as FnOnce<()>>::Output {tester_fn::<&T>}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at ui/consts/fn_trait_refs.rs:40:21: 40:22
        StorageLive(_4);                 // scope 0 at ui/consts/fn_trait_refs.rs:42:9: 42:26
        StorageLive(_5);                 // scope 0 at ui/consts/fn_trait_refs.rs:42:23: 42:25
        _5 = &_1;                        // scope 0 at ui/consts/fn_trait_refs.rs:42:23: 42:25
        ConstEvalCounter;                // scope 0 at ui/consts/fn_trait_refs.rs:42:9: 42:26
        _4 = tester_fn_mut::<&T>(move _5) -> [return: bb2, unwind: bb6]; // scope 0 at ui/consts/fn_trait_refs.rs:42:9: 42:26
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:42:9: 42:22
                                         // + literal: Const { ty: fn(&T) -> <&T as FnOnce<()>>::Output {tester_fn_mut::<&T>}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_5);                 // scope 0 at ui/consts/fn_trait_refs.rs:42:25: 42:26
        StorageLive(_6);                 // scope 0 at ui/consts/fn_trait_refs.rs:44:9: 44:27
        StorageLive(_7);                 // scope 0 at ui/consts/fn_trait_refs.rs:44:24: 44:26
        _7 = &_1;                        // scope 0 at ui/consts/fn_trait_refs.rs:44:24: 44:26
        ConstEvalCounter;                // scope 0 at ui/consts/fn_trait_refs.rs:44:9: 44:27
        _6 = tester_fn_once::<&T>(move _7) -> [return: bb3, unwind: bb5]; // scope 0 at ui/consts/fn_trait_refs.rs:44:9: 44:27
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:44:9: 44:23
                                         // + literal: Const { ty: fn(&T) -> <&T as FnOnce<()>>::Output {tester_fn_once::<&T>}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_7);                 // scope 0 at ui/consts/fn_trait_refs.rs:44:26: 44:27
        _0 = (move _2, move _4, move _6); // scope 0 at ui/consts/fn_trait_refs.rs:38:5: 45:6
        StorageDead(_6);                 // scope 0 at ui/consts/fn_trait_refs.rs:45:5: 45:6
        StorageDead(_4);                 // scope 0 at ui/consts/fn_trait_refs.rs:45:5: 45:6
        StorageDead(_2);                 // scope 0 at ui/consts/fn_trait_refs.rs:45:5: 45:6
        drop(_1) -> [return: bb4, unwind: bb8]; // scope 0 at ui/consts/fn_trait_refs.rs:46:1: 46:2
    }

    bb4: {
        return;                          // scope 0 at ui/consts/fn_trait_refs.rs:46:2: 46:2
    }

    bb5 (cleanup): {
        drop(_4) -> bb6;                 // scope 0 at ui/consts/fn_trait_refs.rs:45:5: 45:6
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/consts/fn_trait_refs.rs:45:5: 45:6
    }

    bb7 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at ui/consts/fn_trait_refs.rs:46:1: 46:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/consts/fn_trait_refs.rs:34:1: 46:2
    }
}

fn test_fn_mut(_1: T) -> (<T as FnOnce<()>>::Output, <T as FnOnce<()>>::Output) {
    debug f => _1;                       // in scope 0 at ui/consts/fn_trait_refs.rs:48:25: 48:30
    let mut _0: (<T as std::ops::FnOnce<()>>::Output, <T as std::ops::FnOnce<()>>::Output); // return place in scope 0 at ui/consts/fn_trait_refs.rs:48:38: 48:60
    let mut _2: <T as std::ops::FnOnce<()>>::Output; // in scope 0 at ui/consts/fn_trait_refs.rs:54:9: 54:30
    let mut _3: &mut T;                  // in scope 0 at ui/consts/fn_trait_refs.rs:54:23: 54:29
    let mut _4: <T as std::ops::FnOnce<()>>::Output; // in scope 0 at ui/consts/fn_trait_refs.rs:56:9: 56:31
    let mut _5: &mut T;                  // in scope 0 at ui/consts/fn_trait_refs.rs:56:24: 56:30

    bb0: {
        _3 = &mut _1;                    // scope 0 at ui/consts/fn_trait_refs.rs:54:23: 54:29
        _2 = tester_fn_mut::<&mut T>(move _3) -> [return: bb1, unwind: bb5]; // scope 0 at ui/consts/fn_trait_refs.rs:54:9: 54:30
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:54:9: 54:22
                                         // + literal: Const { ty: fn(&mut T) -> <&mut T as FnOnce<()>>::Output {tester_fn_mut::<&mut T>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut _1;                    // scope 0 at ui/consts/fn_trait_refs.rs:56:24: 56:30
        _4 = tester_fn_once::<&mut T>(move _5) -> [return: bb2, unwind: bb4]; // scope 0 at ui/consts/fn_trait_refs.rs:56:9: 56:31
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:56:9: 56:23
                                         // + literal: Const { ty: fn(&mut T) -> <&mut T as FnOnce<()>>::Output {tester_fn_once::<&mut T>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = (move _2, move _4);         // scope 0 at ui/consts/fn_trait_refs.rs:52:5: 57:6
        drop(_1) -> bb3;                 // scope 0 at ui/consts/fn_trait_refs.rs:58:1: 58:2
    }

    bb3: {
        return;                          // scope 0 at ui/consts/fn_trait_refs.rs:58:2: 58:2
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/consts/fn_trait_refs.rs:57:5: 57:6
    }

    bb5 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/consts/fn_trait_refs.rs:58:1: 58:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/consts/fn_trait_refs.rs:48:1: 58:2
    }
}

// MIR FOR CTFE
fn test_fn_mut(_1: T) -> (<T as FnOnce<()>>::Output, <T as FnOnce<()>>::Output) {
    debug f => _1;                       // in scope 0 at ui/consts/fn_trait_refs.rs:48:25: 48:30
    let mut _0: (<T as std::ops::FnOnce<()>>::Output, <T as std::ops::FnOnce<()>>::Output); // return place in scope 0 at ui/consts/fn_trait_refs.rs:48:38: 48:60
    let mut _2: <T as std::ops::FnOnce<()>>::Output; // in scope 0 at ui/consts/fn_trait_refs.rs:54:9: 54:30
    let mut _3: &mut T;                  // in scope 0 at ui/consts/fn_trait_refs.rs:54:23: 54:29
    let mut _4: <T as std::ops::FnOnce<()>>::Output; // in scope 0 at ui/consts/fn_trait_refs.rs:56:9: 56:31
    let mut _5: &mut T;                  // in scope 0 at ui/consts/fn_trait_refs.rs:56:24: 56:30

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/fn_trait_refs.rs:54:9: 54:30
        StorageLive(_3);                 // scope 0 at ui/consts/fn_trait_refs.rs:54:23: 54:29
        _3 = &mut _1;                    // scope 0 at ui/consts/fn_trait_refs.rs:54:23: 54:29
        ConstEvalCounter;                // scope 0 at ui/consts/fn_trait_refs.rs:54:9: 54:30
        _2 = tester_fn_mut::<&mut T>(move _3) -> [return: bb1, unwind: bb5]; // scope 0 at ui/consts/fn_trait_refs.rs:54:9: 54:30
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:54:9: 54:22
                                         // + literal: Const { ty: fn(&mut T) -> <&mut T as FnOnce<()>>::Output {tester_fn_mut::<&mut T>}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at ui/consts/fn_trait_refs.rs:54:29: 54:30
        StorageLive(_4);                 // scope 0 at ui/consts/fn_trait_refs.rs:56:9: 56:31
        StorageLive(_5);                 // scope 0 at ui/consts/fn_trait_refs.rs:56:24: 56:30
        _5 = &mut _1;                    // scope 0 at ui/consts/fn_trait_refs.rs:56:24: 56:30
        ConstEvalCounter;                // scope 0 at ui/consts/fn_trait_refs.rs:56:9: 56:31
        _4 = tester_fn_once::<&mut T>(move _5) -> [return: bb2, unwind: bb4]; // scope 0 at ui/consts/fn_trait_refs.rs:56:9: 56:31
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:56:9: 56:23
                                         // + literal: Const { ty: fn(&mut T) -> <&mut T as FnOnce<()>>::Output {tester_fn_once::<&mut T>}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_5);                 // scope 0 at ui/consts/fn_trait_refs.rs:56:30: 56:31
        _0 = (move _2, move _4);         // scope 0 at ui/consts/fn_trait_refs.rs:52:5: 57:6
        StorageDead(_4);                 // scope 0 at ui/consts/fn_trait_refs.rs:57:5: 57:6
        StorageDead(_2);                 // scope 0 at ui/consts/fn_trait_refs.rs:57:5: 57:6
        drop(_1) -> [return: bb3, unwind: bb6]; // scope 0 at ui/consts/fn_trait_refs.rs:58:1: 58:2
    }

    bb3: {
        return;                          // scope 0 at ui/consts/fn_trait_refs.rs:58:2: 58:2
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/consts/fn_trait_refs.rs:57:5: 57:6
    }

    bb5 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/consts/fn_trait_refs.rs:58:1: 58:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/consts/fn_trait_refs.rs:48:1: 58:2
    }
}

fn test(_1: i32) -> i32 {
    debug i => _1;                       // in scope 0 at ui/consts/fn_trait_refs.rs:59:15: 59:16
    let mut _0: i32;                     // return place in scope 0 at ui/consts/fn_trait_refs.rs:59:26: 59:29
    let mut _2: i32;                     // in scope 0 at ui/consts/fn_trait_refs.rs:60:5: 60:6
    let mut _3: (i32, bool);             // in scope 0 at ui/consts/fn_trait_refs.rs:60:5: 60:10

    bb0: {
        _2 = _1;                         // scope 0 at ui/consts/fn_trait_refs.rs:60:5: 60:6
        _3 = CheckedAdd(_2, const 1_i32); // scope 0 at ui/consts/fn_trait_refs.rs:60:5: 60:10
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, const 1_i32) -> bb1; // scope 0 at ui/consts/fn_trait_refs.rs:60:5: 60:10
    }

    bb1: {
        _0 = move (_3.0: i32);           // scope 0 at ui/consts/fn_trait_refs.rs:60:5: 60:10
        return;                          // scope 0 at ui/consts/fn_trait_refs.rs:61:2: 61:2
    }
}

// MIR FOR CTFE
fn test(_1: i32) -> i32 {
    debug i => _1;                       // in scope 0 at ui/consts/fn_trait_refs.rs:59:15: 59:16
    let mut _0: i32;                     // return place in scope 0 at ui/consts/fn_trait_refs.rs:59:26: 59:29
    let mut _2: i32;                     // in scope 0 at ui/consts/fn_trait_refs.rs:60:5: 60:6
    let mut _3: (i32, bool);             // in scope 0 at ui/consts/fn_trait_refs.rs:60:5: 60:10

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/fn_trait_refs.rs:60:5: 60:6
        _2 = _1;                         // scope 0 at ui/consts/fn_trait_refs.rs:60:5: 60:6
        _3 = CheckedAdd(_2, const 1_i32); // scope 0 at ui/consts/fn_trait_refs.rs:60:5: 60:10
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, const 1_i32) -> bb1; // scope 0 at ui/consts/fn_trait_refs.rs:60:5: 60:10
    }

    bb1: {
        _0 = move (_3.0: i32);           // scope 0 at ui/consts/fn_trait_refs.rs:60:5: 60:10
        StorageDead(_2);                 // scope 0 at ui/consts/fn_trait_refs.rs:60:9: 60:10
        return;                          // scope 0 at ui/consts/fn_trait_refs.rs:61:2: 61:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/fn_trait_refs.rs:63:11: 63:11

    bb0: {
        return;                          // scope 0 at ui/consts/fn_trait_refs.rs:77:2: 77:2
    }
}

fn one() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/fn_trait_refs.rs:64:23: 64:26

    bb0: {
        _0 = const 1_i32;                // scope 0 at ui/consts/fn_trait_refs.rs:65:9: 65:10
        return;                          // scope 0 at ui/consts/fn_trait_refs.rs:66:6: 66:6
    }
}

// MIR FOR CTFE
fn one() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/fn_trait_refs.rs:64:23: 64:26

    bb0: {
        _0 = const 1_i32;                // scope 0 at ui/consts/fn_trait_refs.rs:65:9: 65:10
        return;                          // scope 0 at ui/consts/fn_trait_refs.rs:66:6: 66:6
    }
}

fn two() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/fn_trait_refs.rs:67:23: 67:26

    bb0: {
        _0 = const 2_i32;                // scope 0 at ui/consts/fn_trait_refs.rs:68:9: 68:10
        return;                          // scope 0 at ui/consts/fn_trait_refs.rs:69:6: 69:6
    }
}

// MIR FOR CTFE
fn two() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/fn_trait_refs.rs:67:23: 67:26

    bb0: {
        _0 = const 2_i32;                // scope 0 at ui/consts/fn_trait_refs.rs:68:9: 68:10
        return;                          // scope 0 at ui/consts/fn_trait_refs.rs:69:6: 69:6
    }
}

const _: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/fn_trait_refs.rs:70:14: 70:16
    let _1: (i32, i32, i32);             // in scope 0 at ui/consts/fn_trait_refs.rs:71:13: 71:21
    let _2: ();                          // in scope 0 at ui/consts/fn_trait_refs.rs:72:9: 72:39
    let mut _3: bool;                    // in scope 0 at ui/consts/fn_trait_refs.rs:72:9: 72:39
    let mut _4: bool;                    // in scope 0 at ui/consts/fn_trait_refs.rs:72:17: 72:38
    let mut _5: &(i32, i32, i32);        // in scope 0 at ui/consts/fn_trait_refs.rs:72:17: 72:25
    let mut _6: &(i32, i32, i32);        // in scope 0 at ui/consts/fn_trait_refs.rs:72:29: 72:38
    let _7: (i32, i32, i32);             // in scope 0 at ui/consts/fn_trait_refs.rs:72:29: 72:38
    let mut _8: !;                       // in scope 0 at ui/consts/fn_trait_refs.rs:72:9: 72:39
    let _10: ();                         // in scope 0 at ui/consts/fn_trait_refs.rs:75:9: 75:36
    let mut _11: bool;                   // in scope 0 at ui/consts/fn_trait_refs.rs:75:9: 75:36
    let mut _12: bool;                   // in scope 0 at ui/consts/fn_trait_refs.rs:75:17: 75:35
    let mut _13: &(i32, i32);            // in scope 0 at ui/consts/fn_trait_refs.rs:75:17: 75:25
    let mut _14: &(i32, i32);            // in scope 0 at ui/consts/fn_trait_refs.rs:75:29: 75:35
    let _15: (i32, i32);                 // in scope 0 at ui/consts/fn_trait_refs.rs:75:29: 75:35
    let mut _16: !;                      // in scope 0 at ui/consts/fn_trait_refs.rs:75:9: 75:36
    scope 1 {
        debug test_one => _1;            // in scope 1 at ui/consts/fn_trait_refs.rs:71:13: 71:21
        let _9: (i32, i32);              // in scope 1 at ui/consts/fn_trait_refs.rs:74:13: 74:21
        let mut _18: &(i32, i32, i32);   // in scope 1 at ui/consts/fn_trait_refs.rs:72:29: 72:38
        scope 2 {
            debug test_two => _9;        // in scope 2 at ui/consts/fn_trait_refs.rs:74:13: 74:21
            let mut _17: &(i32, i32);    // in scope 2 at ui/consts/fn_trait_refs.rs:75:29: 75:35
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/fn_trait_refs.rs:71:13: 71:21
        ConstEvalCounter;                // scope 0 at ui/consts/fn_trait_refs.rs:71:24: 71:36
        _1 = test_fn::<fn() -> i32 {one}>(one) -> bb1; // scope 0 at ui/consts/fn_trait_refs.rs:71:24: 71:36
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:71:24: 71:31
                                         // + literal: Const { ty: fn(fn() -> i32 {one}) -> (<fn() -> i32 {one} as FnOnce<()>>::Output, <fn() -> i32 {one} as FnOnce<()>>::Output, <fn() -> i32 {one} as FnOnce<()>>::Output) {test_fn::<fn() -> i32 {one}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:71:32: 71:35
                                         // + literal: Const { ty: fn() -> i32 {one}, val: Value(<ZST>) }
    }

    bb1: {
        StorageLive(_2);                 // scope 1 at ui/consts/fn_trait_refs.rs:72:9: 72:39
        StorageLive(_3);                 // scope 1 at ui/consts/fn_trait_refs.rs:72:9: 72:39
        StorageLive(_4);                 // scope 1 at ui/consts/fn_trait_refs.rs:72:17: 72:38
        StorageLive(_5);                 // scope 1 at ui/consts/fn_trait_refs.rs:72:17: 72:25
        _5 = &_1;                        // scope 1 at ui/consts/fn_trait_refs.rs:72:17: 72:25
        StorageLive(_6);                 // scope 1 at ui/consts/fn_trait_refs.rs:72:29: 72:38
        _18 = const _;                   // scope 1 at ui/consts/fn_trait_refs.rs:72:29: 72:38
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:72:29: 72:38
                                         // + literal: Const { ty: &(i32, i32, i32), val: Unevaluated(_, [], Some(promoted[1])) }
        _6 = &(*_18);                    // scope 1 at ui/consts/fn_trait_refs.rs:72:29: 72:38
        ConstEvalCounter;                // scope 1 at ui/consts/fn_trait_refs.rs:72:17: 72:38
        _4 = <(i32, i32, i32) as PartialEq>::eq(move _5, move _6) -> bb2; // scope 1 at ui/consts/fn_trait_refs.rs:72:17: 72:38
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:72:17: 72:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (i32, i32, i32), &'b (i32, i32, i32)) -> bool {<(i32, i32, i32) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_6);                 // scope 1 at ui/consts/fn_trait_refs.rs:72:37: 72:38
        StorageDead(_5);                 // scope 1 at ui/consts/fn_trait_refs.rs:72:37: 72:38
        _3 = Not(move _4);               // scope 1 at ui/consts/fn_trait_refs.rs:72:9: 72:39
        StorageDead(_4);                 // scope 1 at ui/consts/fn_trait_refs.rs:72:38: 72:39
        switchInt(move _3) -> [0: bb4, otherwise: bb3]; // scope 1 at ui/consts/fn_trait_refs.rs:72:9: 72:39
    }

    bb3: {
        StorageLive(_8);                 // scope 1 at ui/consts/fn_trait_refs.rs:72:9: 72:39
        ConstEvalCounter;                // scope 1 at ui/consts/fn_trait_refs.rs:72:9: 72:39
        _8 = core::panicking::panic(const "assertion failed: test_one == (1, 1, 1)"); // scope 1 at ui/consts/fn_trait_refs.rs:72:9: 72:39
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:72:9: 72:39
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _2 = const ();                   // scope 1 at ui/consts/fn_trait_refs.rs:72:39: 72:39
        StorageDead(_3);                 // scope 1 at ui/consts/fn_trait_refs.rs:72:38: 72:39
        StorageDead(_2);                 // scope 1 at ui/consts/fn_trait_refs.rs:72:38: 72:39
        StorageLive(_9);                 // scope 1 at ui/consts/fn_trait_refs.rs:74:13: 74:21
        ConstEvalCounter;                // scope 1 at ui/consts/fn_trait_refs.rs:74:24: 74:40
        _9 = test_fn_mut::<fn() -> i32 {two}>(two) -> bb5; // scope 1 at ui/consts/fn_trait_refs.rs:74:24: 74:40
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:74:24: 74:35
                                         // + literal: Const { ty: fn(fn() -> i32 {two}) -> (<fn() -> i32 {two} as FnOnce<()>>::Output, <fn() -> i32 {two} as FnOnce<()>>::Output) {test_fn_mut::<fn() -> i32 {two}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:74:36: 74:39
                                         // + literal: Const { ty: fn() -> i32 {two}, val: Value(<ZST>) }
    }

    bb5: {
        StorageLive(_10);                // scope 2 at ui/consts/fn_trait_refs.rs:75:9: 75:36
        StorageLive(_11);                // scope 2 at ui/consts/fn_trait_refs.rs:75:9: 75:36
        StorageLive(_12);                // scope 2 at ui/consts/fn_trait_refs.rs:75:17: 75:35
        StorageLive(_13);                // scope 2 at ui/consts/fn_trait_refs.rs:75:17: 75:25
        _13 = &_9;                       // scope 2 at ui/consts/fn_trait_refs.rs:75:17: 75:25
        StorageLive(_14);                // scope 2 at ui/consts/fn_trait_refs.rs:75:29: 75:35
        _17 = const _;                   // scope 2 at ui/consts/fn_trait_refs.rs:75:29: 75:35
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:75:29: 75:35
                                         // + literal: Const { ty: &(i32, i32), val: Unevaluated(_, [], Some(promoted[0])) }
        _14 = &(*_17);                   // scope 2 at ui/consts/fn_trait_refs.rs:75:29: 75:35
        ConstEvalCounter;                // scope 2 at ui/consts/fn_trait_refs.rs:75:17: 75:35
        _12 = <(i32, i32) as PartialEq>::eq(move _13, move _14) -> bb6; // scope 2 at ui/consts/fn_trait_refs.rs:75:17: 75:35
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:75:17: 75:35
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (i32, i32), &'b (i32, i32)) -> bool {<(i32, i32) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        StorageDead(_14);                // scope 2 at ui/consts/fn_trait_refs.rs:75:34: 75:35
        StorageDead(_13);                // scope 2 at ui/consts/fn_trait_refs.rs:75:34: 75:35
        _11 = Not(move _12);             // scope 2 at ui/consts/fn_trait_refs.rs:75:9: 75:36
        StorageDead(_12);                // scope 2 at ui/consts/fn_trait_refs.rs:75:35: 75:36
        switchInt(move _11) -> [0: bb8, otherwise: bb7]; // scope 2 at ui/consts/fn_trait_refs.rs:75:9: 75:36
    }

    bb7: {
        StorageLive(_16);                // scope 2 at ui/consts/fn_trait_refs.rs:75:9: 75:36
        ConstEvalCounter;                // scope 2 at ui/consts/fn_trait_refs.rs:75:9: 75:36
        _16 = core::panicking::panic(const "assertion failed: test_two == (2, 2)"); // scope 2 at ui/consts/fn_trait_refs.rs:75:9: 75:36
                                         // mir::Constant
                                         // + span: ui/consts/fn_trait_refs.rs:75:9: 75:36
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb8: {
        _10 = const ();                  // scope 2 at ui/consts/fn_trait_refs.rs:75:36: 75:36
        StorageDead(_11);                // scope 2 at ui/consts/fn_trait_refs.rs:75:35: 75:36
        StorageDead(_10);                // scope 2 at ui/consts/fn_trait_refs.rs:75:35: 75:36
        _0 = const ();                   // scope 0 at ui/consts/fn_trait_refs.rs:70:19: 76:6
        StorageDead(_9);                 // scope 1 at ui/consts/fn_trait_refs.rs:76:5: 76:6
        StorageDead(_1);                 // scope 0 at ui/consts/fn_trait_refs.rs:76:5: 76:6
        return;                          // scope 0 at ui/consts/fn_trait_refs.rs:70:5: 76:7
    }
}

promoted[0] in _: &(i32, i32) = {
    let mut _0: &(i32, i32);             // return place in scope 0 at ui/consts/fn_trait_refs.rs:75:29: 75:35
    let mut _1: (i32, i32);              // in scope 0 at ui/consts/fn_trait_refs.rs:75:29: 75:35

    bb0: {
        _1 = (const 2_i32, const 2_i32); // scope 0 at ui/consts/fn_trait_refs.rs:75:29: 75:35
        _0 = &_1;                        // scope 0 at ui/consts/fn_trait_refs.rs:75:29: 75:35
        return;                          // scope 0 at ui/consts/fn_trait_refs.rs:75:29: 75:35
    }
}

promoted[1] in _: &(i32, i32, i32) = {
    let mut _0: &(i32, i32, i32);        // return place in scope 0 at ui/consts/fn_trait_refs.rs:72:29: 72:38
    let mut _1: (i32, i32, i32);         // in scope 0 at ui/consts/fn_trait_refs.rs:72:29: 72:38

    bb0: {
        _1 = (const 1_i32, const 1_i32, const 1_i32); // scope 0 at ui/consts/fn_trait_refs.rs:72:29: 72:38
        _0 = &_1;                        // scope 0 at ui/consts/fn_trait_refs.rs:72:29: 72:38
        return;                          // scope 0 at ui/consts/fn_trait_refs.rs:72:29: 72:38
    }
}
