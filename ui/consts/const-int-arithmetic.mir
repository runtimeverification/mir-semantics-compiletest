// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn checked() -> () {
    let mut _0: ();
    let mut _1: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _2: &std::option::Option<i8>;
    let _3: &std::option::Option<i8>;
    let mut _4: bool;
    let mut _5: bool;
    let _7: !;
    let mut _8: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _9: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _10: &std::option::Option<i8>;
    let _11: &std::option::Option<i8>;
    let mut _12: bool;
    let mut _13: bool;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _18: &std::option::Option<i8>;
    let _19: &std::option::Option<i8>;
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _26: &std::option::Option<i8>;
    let _27: &std::option::Option<i8>;
    let mut _28: bool;
    let mut _29: bool;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _34: &std::option::Option<i8>;
    let _35: &std::option::Option<i8>;
    let mut _36: bool;
    let mut _37: bool;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _42: &std::option::Option<i8>;
    let _43: &std::option::Option<i8>;
    let mut _44: bool;
    let mut _45: bool;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _50: &std::option::Option<i8>;
    let _51: &std::option::Option<i8>;
    let mut _52: bool;
    let mut _53: bool;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _58: &std::option::Option<i8>;
    let _59: &std::option::Option<i8>;
    let mut _60: bool;
    let mut _61: bool;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _66: &std::option::Option<i8>;
    let _67: &std::option::Option<i8>;
    let mut _68: bool;
    let mut _69: bool;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _74: &std::option::Option<i8>;
    let _75: &std::option::Option<i8>;
    let mut _76: bool;
    let mut _77: bool;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _81: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _82: &std::option::Option<i8>;
    let _83: &std::option::Option<i8>;
    let mut _84: bool;
    let mut _85: bool;
    let _87: !;
    let mut _88: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _89: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _90: &std::option::Option<i8>;
    let _91: &std::option::Option<i8>;
    let mut _92: bool;
    let mut _93: bool;
    let _95: !;
    let mut _96: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _97: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _98: &std::option::Option<i8>;
    let _99: &std::option::Option<i8>;
    let mut _100: bool;
    let mut _101: bool;
    let _103: !;
    let mut _104: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _105: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _106: &std::option::Option<i8>;
    let _107: &std::option::Option<i8>;
    let mut _108: bool;
    let mut _109: bool;
    let _111: !;
    let mut _112: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _113: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _114: &std::option::Option<i8>;
    let _115: &std::option::Option<i8>;
    let mut _116: bool;
    let mut _117: bool;
    let _119: !;
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _121: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _122: &std::option::Option<i8>;
    let _123: &std::option::Option<i8>;
    let mut _124: bool;
    let mut _125: bool;
    let _127: !;
    let mut _128: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _129: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _130: &std::option::Option<i8>;
    let _131: &std::option::Option<i8>;
    let mut _132: bool;
    let mut _133: bool;
    let _135: !;
    let mut _136: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _137: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _138: &std::option::Option<i8>;
    let _139: &std::option::Option<i8>;
    let mut _140: bool;
    let mut _141: bool;
    let _143: !;
    let mut _144: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _145: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _146: &std::option::Option<i8>;
    let _147: &std::option::Option<i8>;
    let mut _148: bool;
    let mut _149: bool;
    let _151: !;
    let mut _152: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _153: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _154: &std::option::Option<i8>;
    let _155: &std::option::Option<i8>;
    let mut _156: bool;
    let mut _157: bool;
    let _159: !;
    let mut _160: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _161: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _162: &std::option::Option<i8>;
    let _163: &std::option::Option<i8>;
    let mut _164: bool;
    let mut _165: bool;
    let _167: !;
    let mut _168: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _169: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _170: &std::option::Option<i8>;
    let _171: &std::option::Option<i8>;
    let mut _172: bool;
    let mut _173: bool;
    let _175: !;
    let mut _176: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _177: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _178: &std::option::Option<i8>;
    let _179: &std::option::Option<i8>;
    let mut _180: bool;
    let mut _181: bool;
    let _183: !;
    let mut _184: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _185: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _186: &std::option::Option<i8>;
    let _187: &std::option::Option<i8>;
    let mut _188: bool;
    let mut _189: bool;
    let _191: !;
    let mut _192: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _193: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _194: &std::option::Option<i8>;
    let _195: &std::option::Option<i8>;
    let mut _196: bool;
    let mut _197: bool;
    let _199: !;
    let mut _200: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _201: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _202: &std::option::Option<i8>;
    let _203: &std::option::Option<i8>;
    let mut _204: bool;
    let mut _205: bool;
    let _207: !;
    let mut _208: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _209: (&std::option::Option<i8>, &std::option::Option<i8>);
    let _210: &std::option::Option<i8>;
    let _211: &std::option::Option<i8>;
    let mut _212: bool;
    let mut _213: bool;
    let _215: !;
    let mut _216: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _217: &std::option::Option<i8>;
    let mut _218: &std::option::Option<i8>;
    let mut _219: &std::option::Option<i8>;
    let mut _220: &std::option::Option<i8>;
    let mut _221: &std::option::Option<i8>;
    let mut _222: &std::option::Option<i8>;
    let mut _223: &std::option::Option<i8>;
    let mut _224: &std::option::Option<i8>;
    let mut _225: &std::option::Option<i8>;
    let mut _226: &std::option::Option<i8>;
    let mut _227: &std::option::Option<i8>;
    let mut _228: &std::option::Option<i8>;
    let mut _229: &std::option::Option<i8>;
    let mut _230: &std::option::Option<i8>;
    let mut _231: &std::option::Option<i8>;
    let mut _232: &std::option::Option<i8>;
    let mut _233: &std::option::Option<i8>;
    let mut _234: &std::option::Option<i8>;
    let mut _235: &std::option::Option<i8>;
    let mut _236: &std::option::Option<i8>;
    let mut _237: &std::option::Option<i8>;
    let mut _238: &std::option::Option<i8>;
    let mut _239: &std::option::Option<i8>;
    let mut _240: &std::option::Option<i8>;
    let mut _241: &std::option::Option<i8>;
    let mut _242: &std::option::Option<i8>;
    let mut _243: &std::option::Option<i8>;
    let mut _244: &std::option::Option<i8>;
    let mut _245: &std::option::Option<i8>;
    let mut _246: &std::option::Option<i8>;
    let mut _247: &std::option::Option<i8>;
    let mut _248: &std::option::Option<i8>;
    let mut _249: &std::option::Option<i8>;
    let mut _250: &std::option::Option<i8>;
    let mut _251: &std::option::Option<i8>;
    let mut _252: &std::option::Option<i8>;
    let mut _253: &std::option::Option<i8>;
    let mut _254: &std::option::Option<i8>;
    let mut _255: &std::option::Option<i8>;
    let mut _256: &std::option::Option<i8>;
    let mut _257: &std::option::Option<i8>;
    let mut _258: &std::option::Option<i8>;
    let mut _259: &std::option::Option<i8>;
    let mut _260: &std::option::Option<i8>;
    let mut _261: &std::option::Option<i8>;
    let mut _262: &std::option::Option<i8>;
    let mut _263: &std::option::Option<i8>;
    let mut _264: &std::option::Option<i8>;
    let mut _265: &std::option::Option<i8>;
    let mut _266: &std::option::Option<i8>;
    let mut _267: &std::option::Option<i8>;
    let mut _268: &std::option::Option<i8>;
    let mut _269: &std::option::Option<i8>;
    let mut _270: &std::option::Option<i8>;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _6: core::panicking::AssertKind;
        scope 2 {
            debug kind => _6;
        }
    }
    scope 3 {
        debug left_val => _10;
        debug right_val => _11;
        let _14: core::panicking::AssertKind;
        scope 4 {
            debug kind => _14;
        }
    }
    scope 5 {
        debug left_val => _18;
        debug right_val => _19;
        let _22: core::panicking::AssertKind;
        scope 6 {
            debug kind => _22;
        }
    }
    scope 7 {
        debug left_val => _26;
        debug right_val => _27;
        let _30: core::panicking::AssertKind;
        scope 8 {
            debug kind => _30;
        }
    }
    scope 9 {
        debug left_val => _34;
        debug right_val => _35;
        let _38: core::panicking::AssertKind;
        scope 10 {
            debug kind => _38;
        }
    }
    scope 11 {
        debug left_val => _42;
        debug right_val => _43;
        let _46: core::panicking::AssertKind;
        scope 12 {
            debug kind => _46;
        }
    }
    scope 13 {
        debug left_val => _50;
        debug right_val => _51;
        let _54: core::panicking::AssertKind;
        scope 14 {
            debug kind => _54;
        }
    }
    scope 15 {
        debug left_val => _58;
        debug right_val => _59;
        let _62: core::panicking::AssertKind;
        scope 16 {
            debug kind => _62;
        }
    }
    scope 17 {
        debug left_val => _66;
        debug right_val => _67;
        let _70: core::panicking::AssertKind;
        scope 18 {
            debug kind => _70;
        }
    }
    scope 19 {
        debug left_val => _74;
        debug right_val => _75;
        let _78: core::panicking::AssertKind;
        scope 20 {
            debug kind => _78;
        }
    }
    scope 21 {
        debug left_val => _82;
        debug right_val => _83;
        let _86: core::panicking::AssertKind;
        scope 22 {
            debug kind => _86;
        }
    }
    scope 23 {
        debug left_val => _90;
        debug right_val => _91;
        let _94: core::panicking::AssertKind;
        scope 24 {
            debug kind => _94;
        }
    }
    scope 25 {
        debug left_val => _98;
        debug right_val => _99;
        let _102: core::panicking::AssertKind;
        scope 26 {
            debug kind => _102;
        }
    }
    scope 27 {
        debug left_val => _106;
        debug right_val => _107;
        let _110: core::panicking::AssertKind;
        scope 28 {
            debug kind => _110;
        }
    }
    scope 29 {
        debug left_val => _114;
        debug right_val => _115;
        let _118: core::panicking::AssertKind;
        scope 30 {
            debug kind => _118;
        }
    }
    scope 31 {
        debug left_val => _122;
        debug right_val => _123;
        let _126: core::panicking::AssertKind;
        scope 32 {
            debug kind => _126;
        }
    }
    scope 33 {
        debug left_val => _130;
        debug right_val => _131;
        let _134: core::panicking::AssertKind;
        scope 34 {
            debug kind => _134;
        }
    }
    scope 35 {
        debug left_val => _138;
        debug right_val => _139;
        let _142: core::panicking::AssertKind;
        scope 36 {
            debug kind => _142;
        }
    }
    scope 37 {
        debug left_val => _146;
        debug right_val => _147;
        let _150: core::panicking::AssertKind;
        scope 38 {
            debug kind => _150;
        }
    }
    scope 39 {
        debug left_val => _154;
        debug right_val => _155;
        let _158: core::panicking::AssertKind;
        scope 40 {
            debug kind => _158;
        }
    }
    scope 41 {
        debug left_val => _162;
        debug right_val => _163;
        let _166: core::panicking::AssertKind;
        scope 42 {
            debug kind => _166;
        }
    }
    scope 43 {
        debug left_val => _170;
        debug right_val => _171;
        let _174: core::panicking::AssertKind;
        scope 44 {
            debug kind => _174;
        }
    }
    scope 45 {
        debug left_val => _178;
        debug right_val => _179;
        let _182: core::panicking::AssertKind;
        scope 46 {
            debug kind => _182;
        }
    }
    scope 47 {
        debug left_val => _186;
        debug right_val => _187;
        let _190: core::panicking::AssertKind;
        scope 48 {
            debug kind => _190;
        }
    }
    scope 49 {
        debug left_val => _194;
        debug right_val => _195;
        let _198: core::panicking::AssertKind;
        scope 50 {
            debug kind => _198;
        }
    }
    scope 51 {
        debug left_val => _202;
        debug right_val => _203;
        let _206: core::panicking::AssertKind;
        scope 52 {
            debug kind => _206;
        }
    }
    scope 53 {
        debug left_val => _210;
        debug right_val => _211;
        let _214: core::panicking::AssertKind;
        scope 54 {
            debug kind => _214;
        }
    }

    bb0: {
        _270 = const _;
        _269 = const _;
        _1 = (_270, _269);
        _2 = (_1.0: &std::option::Option<i8>);
        _3 = (_1.1: &std::option::Option<i8>);
        _5 = <Option<i8> as PartialEq>::eq(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = core::panicking::AssertKind::Eq;
        _8 = Option::<Arguments<'_>>::None;
        _7 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _6, _2, _3, move _8) -> unwind continue;
    }

    bb3: {
        _268 = const _;
        _267 = const _;
        _9 = (_268, _267);
        _10 = (_9.0: &std::option::Option<i8>);
        _11 = (_9.1: &std::option::Option<i8>);
        _13 = <Option<i8> as PartialEq>::eq(_10, _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _14, _10, _11, move _16) -> unwind continue;
    }

    bb6: {
        _266 = const _;
        _265 = const _;
        _17 = (_266, _265);
        _18 = (_17.0: &std::option::Option<i8>);
        _19 = (_17.1: &std::option::Option<i8>);
        _21 = <Option<i8> as PartialEq>::eq(_18, _19) -> [return: bb7, unwind continue];
    }

    bb7: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _22, _18, _19, move _24) -> unwind continue;
    }

    bb9: {
        _264 = const _;
        _263 = const _;
        _25 = (_264, _263);
        _26 = (_25.0: &std::option::Option<i8>);
        _27 = (_25.1: &std::option::Option<i8>);
        _29 = <Option<i8> as PartialEq>::eq(_26, _27) -> [return: bb10, unwind continue];
    }

    bb10: {
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _30, _26, _27, move _32) -> unwind continue;
    }

    bb12: {
        _262 = const _;
        _261 = const _;
        _33 = (_262, _261);
        _34 = (_33.0: &std::option::Option<i8>);
        _35 = (_33.1: &std::option::Option<i8>);
        _37 = <Option<i8> as PartialEq>::eq(_34, _35) -> [return: bb13, unwind continue];
    }

    bb13: {
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _38, _34, _35, move _40) -> unwind continue;
    }

    bb15: {
        _260 = const _;
        _259 = const _;
        _41 = (_260, _259);
        _42 = (_41.0: &std::option::Option<i8>);
        _43 = (_41.1: &std::option::Option<i8>);
        _45 = <Option<i8> as PartialEq>::eq(_42, _43) -> [return: bb16, unwind continue];
    }

    bb16: {
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _46, _42, _43, move _48) -> unwind continue;
    }

    bb18: {
        _258 = const _;
        _257 = const _;
        _49 = (_258, _257);
        _50 = (_49.0: &std::option::Option<i8>);
        _51 = (_49.1: &std::option::Option<i8>);
        _53 = <Option<i8> as PartialEq>::eq(_50, _51) -> [return: bb19, unwind continue];
    }

    bb19: {
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _54, _50, _51, move _56) -> unwind continue;
    }

    bb21: {
        _256 = const _;
        _255 = const _;
        _57 = (_256, _255);
        _58 = (_57.0: &std::option::Option<i8>);
        _59 = (_57.1: &std::option::Option<i8>);
        _61 = <Option<i8> as PartialEq>::eq(_58, _59) -> [return: bb22, unwind continue];
    }

    bb22: {
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _62, _58, _59, move _64) -> unwind continue;
    }

    bb24: {
        _254 = const _;
        _253 = const _;
        _65 = (_254, _253);
        _66 = (_65.0: &std::option::Option<i8>);
        _67 = (_65.1: &std::option::Option<i8>);
        _69 = <Option<i8> as PartialEq>::eq(_66, _67) -> [return: bb25, unwind continue];
    }

    bb25: {
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _70, _66, _67, move _72) -> unwind continue;
    }

    bb27: {
        _252 = const _;
        _251 = const _;
        _73 = (_252, _251);
        _74 = (_73.0: &std::option::Option<i8>);
        _75 = (_73.1: &std::option::Option<i8>);
        _77 = <Option<i8> as PartialEq>::eq(_74, _75) -> [return: bb28, unwind continue];
    }

    bb28: {
        _76 = Not(move _77);
        switchInt(move _76) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _78, _74, _75, move _80) -> unwind continue;
    }

    bb30: {
        _250 = const _;
        _249 = const _;
        _81 = (_250, _249);
        _82 = (_81.0: &std::option::Option<i8>);
        _83 = (_81.1: &std::option::Option<i8>);
        _85 = <Option<i8> as PartialEq>::eq(_82, _83) -> [return: bb31, unwind continue];
    }

    bb31: {
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _86 = core::panicking::AssertKind::Eq;
        _88 = Option::<Arguments<'_>>::None;
        _87 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _86, _82, _83, move _88) -> unwind continue;
    }

    bb33: {
        _248 = const _;
        _247 = const _;
        _89 = (_248, _247);
        _90 = (_89.0: &std::option::Option<i8>);
        _91 = (_89.1: &std::option::Option<i8>);
        _93 = <Option<i8> as PartialEq>::eq(_90, _91) -> [return: bb34, unwind continue];
    }

    bb34: {
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _94 = core::panicking::AssertKind::Eq;
        _96 = Option::<Arguments<'_>>::None;
        _95 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _94, _90, _91, move _96) -> unwind continue;
    }

    bb36: {
        _246 = const _;
        _245 = const _;
        _97 = (_246, _245);
        _98 = (_97.0: &std::option::Option<i8>);
        _99 = (_97.1: &std::option::Option<i8>);
        _101 = <Option<i8> as PartialEq>::eq(_98, _99) -> [return: bb37, unwind continue];
    }

    bb37: {
        _100 = Not(move _101);
        switchInt(move _100) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _102 = core::panicking::AssertKind::Eq;
        _104 = Option::<Arguments<'_>>::None;
        _103 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _102, _98, _99, move _104) -> unwind continue;
    }

    bb39: {
        _244 = const _;
        _243 = const _;
        _105 = (_244, _243);
        _106 = (_105.0: &std::option::Option<i8>);
        _107 = (_105.1: &std::option::Option<i8>);
        _109 = <Option<i8> as PartialEq>::eq(_106, _107) -> [return: bb40, unwind continue];
    }

    bb40: {
        _108 = Not(move _109);
        switchInt(move _108) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _110 = core::panicking::AssertKind::Eq;
        _112 = Option::<Arguments<'_>>::None;
        _111 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _110, _106, _107, move _112) -> unwind continue;
    }

    bb42: {
        _242 = const _;
        _241 = const _;
        _113 = (_242, _241);
        _114 = (_113.0: &std::option::Option<i8>);
        _115 = (_113.1: &std::option::Option<i8>);
        _117 = <Option<i8> as PartialEq>::eq(_114, _115) -> [return: bb43, unwind continue];
    }

    bb43: {
        _116 = Not(move _117);
        switchInt(move _116) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _118 = core::panicking::AssertKind::Eq;
        _120 = Option::<Arguments<'_>>::None;
        _119 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _118, _114, _115, move _120) -> unwind continue;
    }

    bb45: {
        _240 = const _;
        _239 = const _;
        _121 = (_240, _239);
        _122 = (_121.0: &std::option::Option<i8>);
        _123 = (_121.1: &std::option::Option<i8>);
        _125 = <Option<i8> as PartialEq>::eq(_122, _123) -> [return: bb46, unwind continue];
    }

    bb46: {
        _124 = Not(move _125);
        switchInt(move _124) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _126 = core::panicking::AssertKind::Eq;
        _128 = Option::<Arguments<'_>>::None;
        _127 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _126, _122, _123, move _128) -> unwind continue;
    }

    bb48: {
        _238 = const _;
        _237 = const _;
        _129 = (_238, _237);
        _130 = (_129.0: &std::option::Option<i8>);
        _131 = (_129.1: &std::option::Option<i8>);
        _133 = <Option<i8> as PartialEq>::eq(_130, _131) -> [return: bb49, unwind continue];
    }

    bb49: {
        _132 = Not(move _133);
        switchInt(move _132) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _134 = core::panicking::AssertKind::Eq;
        _136 = Option::<Arguments<'_>>::None;
        _135 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _134, _130, _131, move _136) -> unwind continue;
    }

    bb51: {
        _236 = const _;
        _235 = const _;
        _137 = (_236, _235);
        _138 = (_137.0: &std::option::Option<i8>);
        _139 = (_137.1: &std::option::Option<i8>);
        _141 = <Option<i8> as PartialEq>::eq(_138, _139) -> [return: bb52, unwind continue];
    }

    bb52: {
        _140 = Not(move _141);
        switchInt(move _140) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _142 = core::panicking::AssertKind::Eq;
        _144 = Option::<Arguments<'_>>::None;
        _143 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _142, _138, _139, move _144) -> unwind continue;
    }

    bb54: {
        _234 = const _;
        _233 = const _;
        _145 = (_234, _233);
        _146 = (_145.0: &std::option::Option<i8>);
        _147 = (_145.1: &std::option::Option<i8>);
        _149 = <Option<i8> as PartialEq>::eq(_146, _147) -> [return: bb55, unwind continue];
    }

    bb55: {
        _148 = Not(move _149);
        switchInt(move _148) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _150 = core::panicking::AssertKind::Eq;
        _152 = Option::<Arguments<'_>>::None;
        _151 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _150, _146, _147, move _152) -> unwind continue;
    }

    bb57: {
        _232 = const _;
        _231 = const _;
        _153 = (_232, _231);
        _154 = (_153.0: &std::option::Option<i8>);
        _155 = (_153.1: &std::option::Option<i8>);
        _157 = <Option<i8> as PartialEq>::eq(_154, _155) -> [return: bb58, unwind continue];
    }

    bb58: {
        _156 = Not(move _157);
        switchInt(move _156) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _158 = core::panicking::AssertKind::Eq;
        _160 = Option::<Arguments<'_>>::None;
        _159 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _158, _154, _155, move _160) -> unwind continue;
    }

    bb60: {
        _230 = const _;
        _229 = const _;
        _161 = (_230, _229);
        _162 = (_161.0: &std::option::Option<i8>);
        _163 = (_161.1: &std::option::Option<i8>);
        _165 = <Option<i8> as PartialEq>::eq(_162, _163) -> [return: bb61, unwind continue];
    }

    bb61: {
        _164 = Not(move _165);
        switchInt(move _164) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _166 = core::panicking::AssertKind::Eq;
        _168 = Option::<Arguments<'_>>::None;
        _167 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _166, _162, _163, move _168) -> unwind continue;
    }

    bb63: {
        _228 = const _;
        _227 = const _;
        _169 = (_228, _227);
        _170 = (_169.0: &std::option::Option<i8>);
        _171 = (_169.1: &std::option::Option<i8>);
        _173 = <Option<i8> as PartialEq>::eq(_170, _171) -> [return: bb64, unwind continue];
    }

    bb64: {
        _172 = Not(move _173);
        switchInt(move _172) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _174 = core::panicking::AssertKind::Eq;
        _176 = Option::<Arguments<'_>>::None;
        _175 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _174, _170, _171, move _176) -> unwind continue;
    }

    bb66: {
        _226 = const _;
        _225 = const _;
        _177 = (_226, _225);
        _178 = (_177.0: &std::option::Option<i8>);
        _179 = (_177.1: &std::option::Option<i8>);
        _181 = <Option<i8> as PartialEq>::eq(_178, _179) -> [return: bb67, unwind continue];
    }

    bb67: {
        _180 = Not(move _181);
        switchInt(move _180) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        _182 = core::panicking::AssertKind::Eq;
        _184 = Option::<Arguments<'_>>::None;
        _183 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _182, _178, _179, move _184) -> unwind continue;
    }

    bb69: {
        _224 = const _;
        _223 = const _;
        _185 = (_224, _223);
        _186 = (_185.0: &std::option::Option<i8>);
        _187 = (_185.1: &std::option::Option<i8>);
        _189 = <Option<i8> as PartialEq>::eq(_186, _187) -> [return: bb70, unwind continue];
    }

    bb70: {
        _188 = Not(move _189);
        switchInt(move _188) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _190 = core::panicking::AssertKind::Eq;
        _192 = Option::<Arguments<'_>>::None;
        _191 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _190, _186, _187, move _192) -> unwind continue;
    }

    bb72: {
        _222 = const _;
        _221 = const _;
        _193 = (_222, _221);
        _194 = (_193.0: &std::option::Option<i8>);
        _195 = (_193.1: &std::option::Option<i8>);
        _197 = <Option<i8> as PartialEq>::eq(_194, _195) -> [return: bb73, unwind continue];
    }

    bb73: {
        _196 = Not(move _197);
        switchInt(move _196) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        _198 = core::panicking::AssertKind::Eq;
        _200 = Option::<Arguments<'_>>::None;
        _199 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _198, _194, _195, move _200) -> unwind continue;
    }

    bb75: {
        _220 = const _;
        _219 = const _;
        _201 = (_220, _219);
        _202 = (_201.0: &std::option::Option<i8>);
        _203 = (_201.1: &std::option::Option<i8>);
        _205 = <Option<i8> as PartialEq>::eq(_202, _203) -> [return: bb76, unwind continue];
    }

    bb76: {
        _204 = Not(move _205);
        switchInt(move _204) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        _206 = core::panicking::AssertKind::Eq;
        _208 = Option::<Arguments<'_>>::None;
        _207 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _206, _202, _203, move _208) -> unwind continue;
    }

    bb78: {
        _218 = const _;
        _217 = const _;
        _209 = (_218, _217);
        _210 = (_209.0: &std::option::Option<i8>);
        _211 = (_209.1: &std::option::Option<i8>);
        _213 = <Option<i8> as PartialEq>::eq(_210, _211) -> [return: bb79, unwind continue];
    }

    bb79: {
        _212 = Not(move _213);
        switchInt(move _212) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        _214 = core::panicking::AssertKind::Eq;
        _216 = Option::<Arguments<'_>>::None;
        _215 = core::panicking::assert_failed::<Option<i8>, Option<i8>>(move _214, _210, _211, move _216) -> unwind continue;
    }

    bb81: {
        return;
    }
}

promoted[0] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::None;
        _0 = &_1;
        return;
    }
}

promoted[1] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::None;
        _0 = &_1;
        return;
    }
}

promoted[3] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[4] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::Some(const 1_i8);
        _0 = &_1;
        return;
    }
}

promoted[5] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[6] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::None;
        _0 = &_1;
        return;
    }
}

promoted[7] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[8] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::None;
        _0 = &_1;
        return;
    }
}

promoted[9] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[10] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::Some(const i8::MAX);
        _0 = &_1;
        return;
    }
}

promoted[11] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[12] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::None;
        _0 = &_1;
        return;
    }
}

promoted[13] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[14] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::Some(const 5_i8);
        _0 = &_1;
        return;
    }
}

promoted[15] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[16] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::None;
        _0 = &_1;
        return;
    }
}

promoted[17] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[18] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::Some(const 1_i8);
        _0 = &_1;
        return;
    }
}

promoted[19] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[20] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::None;
        _0 = &_1;
        return;
    }
}

promoted[21] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[22] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::Some(const 16_i8);
        _0 = &_1;
        return;
    }
}

promoted[23] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[24] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::None;
        _0 = &_1;
        return;
    }
}

promoted[25] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[26] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::Some(const -5_i8);
        _0 = &_1;
        return;
    }
}

promoted[27] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[28] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::None;
        _0 = &_1;
        return;
    }
}

promoted[29] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[30] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::None;
        _0 = &_1;
        return;
    }
}

promoted[31] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[32] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::Some(const 1_i8);
        _0 = &_1;
        return;
    }
}

promoted[33] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[34] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::None;
        _0 = &_1;
        return;
    }
}

promoted[35] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[36] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::None;
        _0 = &_1;
        return;
    }
}

promoted[37] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[38] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::Some(const i8::MAX);
        _0 = &_1;
        return;
    }
}

promoted[39] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[40] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::None;
        _0 = &_1;
        return;
    }
}

promoted[41] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[42] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::None;
        _0 = &_1;
        return;
    }
}

promoted[43] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[44] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::Some(const 3_i8);
        _0 = &_1;
        return;
    }
}

promoted[45] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[46] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::None;
        _0 = &_1;
        return;
    }
}

promoted[47] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[48] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::Some(const 3_i8);
        _0 = &_1;
        return;
    }
}

promoted[49] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[50] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::None;
        _0 = &_1;
        return;
    }
}

promoted[51] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[52] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = Option::<i8>::Some(const 7_i8);
        _0 = &_1;
        return;
    }
}

promoted[53] in checked: &Option<i8> = {
    let mut _0: &std::option::Option<i8>;
    let mut _1: std::option::Option<i8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

const C1: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_add(const 5_i8, const 2_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C2: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_add(const i8::MAX, const 2_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C3: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_sub(const 5_i8, const 2_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C4: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_sub(const -127_i8, const 2_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C5: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_mul(const 1_i8, const 3_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C6: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_mul(const 5_i8, const 122_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C7: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_mul(const -127_i8, const -99_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C8: Option<i8> = {
    let mut _0: std::option::Option<i8>;
    let mut _1: i8;
    let mut _2: (i8, bool);

    bb0: {
        StorageLive(_1);
        _2 = CheckedAdd(const _, const 1_i8);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_i8) -> [success: bb1, unwind continue];
    }

    bb1: {
        _1 = move (_2.0: i8);
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_div(move _1, const -1_i8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_1);
        return;
    }
}

const C9: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_div(const _, const -1_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C10: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_div(const 1_i8, const 0_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C11: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_rem(const 5_i8, const 2_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C12: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_rem(const 5_i8, const 0_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C13: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_rem(const _, const -1_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C14: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_neg(const 5_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C15: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_neg(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C16: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_shl(const 1_i8, const 4_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C17: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_shl(const 1_i8, const 129_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C18: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_shr(const 16_i8, const 4_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C19: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_shr(const 16_i8, const 128_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C20: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_abs(const -5_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C21: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_abs(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C22: Option<i8> = {
    let mut _0: std::option::Option<i8>;
    let mut _1: i8;
    let mut _2: (i8, bool);

    bb0: {
        StorageLive(_1);
        _2 = CheckedAdd(const _, const 1_i8);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_i8) -> [success: bb1, unwind continue];
    }

    bb1: {
        _1 = move (_2.0: i8);
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_div_euclid(move _1, const -1_i8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_1);
        return;
    }
}

const C23: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_div_euclid(const _, const -1_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C24: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_div_euclid(const 1_i8, const 0_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C25: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_rem_euclid(const 5_i8, const 2_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C26: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_rem_euclid(const 5_i8, const 0_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C27: Option<i8> = {
    let mut _0: std::option::Option<i8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::checked_rem_euclid(const _, const -1_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn checked_i128() -> () {
    let mut _0: ();
    let mut _1: (&std::option::Option<i128>, &std::option::Option<i128>);
    let _2: &std::option::Option<i128>;
    let _3: &std::option::Option<i128>;
    let mut _4: bool;
    let mut _5: bool;
    let _7: !;
    let mut _8: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _9: (&std::option::Option<i128>, &std::option::Option<i128>);
    let _10: &std::option::Option<i128>;
    let _11: &std::option::Option<i128>;
    let mut _12: bool;
    let mut _13: bool;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: &std::option::Option<i128>;
    let mut _18: &std::option::Option<i128>;
    let mut _19: &std::option::Option<i128>;
    let mut _20: &std::option::Option<i128>;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _6: core::panicking::AssertKind;
        scope 2 {
            debug kind => _6;
        }
    }
    scope 3 {
        debug left_val => _10;
        debug right_val => _11;
        let _14: core::panicking::AssertKind;
        scope 4 {
            debug kind => _14;
        }
    }

    bb0: {
        _20 = const _;
        _19 = const _;
        _1 = (_20, _19);
        _2 = (_1.0: &std::option::Option<i128>);
        _3 = (_1.1: &std::option::Option<i128>);
        _5 = <Option<i128> as PartialEq>::eq(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = core::panicking::AssertKind::Eq;
        _8 = Option::<Arguments<'_>>::None;
        _7 = core::panicking::assert_failed::<Option<i128>, Option<i128>>(move _6, _2, _3, move _8) -> unwind continue;
    }

    bb3: {
        _18 = const _;
        _17 = const _;
        _9 = (_18, _17);
        _10 = (_9.0: &std::option::Option<i128>);
        _11 = (_9.1: &std::option::Option<i128>);
        _13 = <Option<i128> as PartialEq>::eq(_10, _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<Option<i128>, Option<i128>>(move _14, _10, _11, move _16) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in checked_i128: &Option<i128> = {
    let mut _0: &std::option::Option<i128>;
    let mut _1: std::option::Option<i128>;

    bb0: {
        _1 = Option::<i128>::None;
        _0 = &_1;
        return;
    }
}

promoted[1] in checked_i128: &Option<i128> = {
    let mut _0: &std::option::Option<i128>;
    let mut _1: std::option::Option<i128>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in checked_i128: &Option<i128> = {
    let mut _0: &std::option::Option<i128>;
    let mut _1: std::option::Option<i128>;

    bb0: {
        _1 = Option::<i128>::None;
        _0 = &_1;
        return;
    }
}

promoted[3] in checked_i128: &Option<i128> = {
    let mut _0: &std::option::Option<i128>;
    let mut _1: std::option::Option<i128>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

const CHK_ADD_I128: Option<i128> = {
    let mut _0: std::option::Option<i128>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i128>::checked_add(const _, const 1_i128) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const CHK_MUL_I128: Option<i128> = {
    let mut _0: std::option::Option<i128>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i128>::checked_mul(const _, const -1_i128) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn saturating_and_wrapping() -> () {
    let mut _0: ();
    let mut _1: (&i8, &i8);
    let _2: &i8;
    let _3: &i8;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: i8;
    let mut _7: i8;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&i8, &i8);
    let _12: &i8;
    let _13: &i8;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: i8;
    let mut _17: i8;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&i8, &i8);
    let _22: &i8;
    let _23: &i8;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: i8;
    let mut _27: i8;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&i8, &i8);
    let _32: &i8;
    let _33: &i8;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: i8;
    let mut _37: i8;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&i8, &i8);
    let _42: &i8;
    let _43: &i8;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: i8;
    let mut _47: i8;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: (&i8, &i8);
    let _52: &i8;
    let _53: &i8;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: i8;
    let mut _57: i8;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&i8, &i8);
    let _62: &i8;
    let _63: &i8;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: i8;
    let mut _67: i8;
    let _69: !;
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _71: (&i8, &i8);
    let _72: &i8;
    let _73: &i8;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: i8;
    let mut _77: i8;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _81: (&i8, &i8);
    let _82: &i8;
    let _83: &i8;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: i8;
    let mut _87: i8;
    let _89: !;
    let mut _90: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _91: (&i8, &i8);
    let _92: &i8;
    let _93: &i8;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: i8;
    let mut _97: i8;
    let _99: !;
    let mut _100: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _101: (&i8, &i8);
    let _102: &i8;
    let _103: &i8;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: i8;
    let mut _107: i8;
    let _109: !;
    let mut _110: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _111: (&i8, &i8);
    let _112: &i8;
    let _113: &i8;
    let mut _114: bool;
    let mut _115: bool;
    let mut _116: i8;
    let mut _117: i8;
    let _119: !;
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _121: (&i8, &i8);
    let _122: &i8;
    let _123: &i8;
    let mut _124: bool;
    let mut _125: bool;
    let mut _126: i8;
    let mut _127: i8;
    let _129: !;
    let mut _130: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _131: (&i8, &i8);
    let _132: &i8;
    let _133: &i8;
    let mut _134: bool;
    let mut _135: bool;
    let mut _136: i8;
    let mut _137: i8;
    let _139: !;
    let mut _140: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _141: (&i8, &i8);
    let _142: &i8;
    let _143: &i8;
    let mut _144: bool;
    let mut _145: bool;
    let mut _146: i8;
    let mut _147: i8;
    let _149: !;
    let mut _150: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _151: (&i8, &i8);
    let _152: &i8;
    let _153: &i8;
    let mut _154: bool;
    let mut _155: bool;
    let mut _156: i8;
    let mut _157: i8;
    let _159: !;
    let mut _160: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _161: (&i8, &i8);
    let _162: &i8;
    let _163: &i8;
    let mut _164: bool;
    let mut _165: bool;
    let mut _166: i8;
    let mut _167: i8;
    let _169: !;
    let mut _170: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _171: (&i8, &i8);
    let _172: &i8;
    let _173: &i8;
    let mut _174: bool;
    let mut _175: bool;
    let mut _176: i8;
    let mut _177: i8;
    let _179: !;
    let mut _180: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _181: (&i8, &i8);
    let _182: &i8;
    let _183: &i8;
    let mut _184: bool;
    let mut _185: bool;
    let mut _186: i8;
    let mut _187: i8;
    let _189: !;
    let mut _190: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _191: (&i8, &i8);
    let _192: &i8;
    let _193: &i8;
    let mut _194: bool;
    let mut _195: bool;
    let mut _196: i8;
    let mut _197: i8;
    let _199: !;
    let mut _200: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _201: (&i8, &i8);
    let _202: &i8;
    let _203: &i8;
    let mut _204: bool;
    let mut _205: bool;
    let mut _206: i8;
    let mut _207: i8;
    let _209: !;
    let mut _210: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _211: (&i8, &i8);
    let _212: &i8;
    let _213: &i8;
    let mut _214: bool;
    let mut _215: bool;
    let mut _216: i8;
    let mut _217: i8;
    let _219: !;
    let mut _220: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _221: (&i8, &i8);
    let _222: &i8;
    let _223: &i8;
    let mut _224: bool;
    let mut _225: bool;
    let mut _226: i8;
    let mut _227: i8;
    let _229: !;
    let mut _230: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _231: (&i8, &i8);
    let _232: &i8;
    let _233: &i8;
    let mut _234: bool;
    let mut _235: bool;
    let mut _236: i8;
    let mut _237: i8;
    let _239: !;
    let mut _240: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _241: (&i8, &i8);
    let _242: &i8;
    let _243: &i8;
    let mut _244: bool;
    let mut _245: bool;
    let mut _246: i8;
    let mut _247: i8;
    let _249: !;
    let mut _250: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _251: &i8;
    let mut _252: &i8;
    let mut _253: &i8;
    let mut _254: &i8;
    let mut _255: &i8;
    let mut _256: &i8;
    let mut _257: &i8;
    let mut _258: &i8;
    let mut _259: &i8;
    let mut _260: &i8;
    let mut _261: &i8;
    let mut _262: &i8;
    let mut _263: &i8;
    let mut _264: &i8;
    let mut _265: &i8;
    let mut _266: &i8;
    let mut _267: &i8;
    let mut _268: &i8;
    let mut _269: &i8;
    let mut _270: &i8;
    let mut _271: &i8;
    let mut _272: &i8;
    let mut _273: &i8;
    let mut _274: &i8;
    let mut _275: &i8;
    let mut _276: &i8;
    let mut _277: &i8;
    let mut _278: &i8;
    let mut _279: &i8;
    let mut _280: &i8;
    let mut _281: &i8;
    let mut _282: &i8;
    let mut _283: &i8;
    let mut _284: &i8;
    let mut _285: &i8;
    let mut _286: &i8;
    let mut _287: &i8;
    let mut _288: &i8;
    let mut _289: &i8;
    let mut _290: &i8;
    let mut _291: &i8;
    let mut _292: &i8;
    let mut _293: &i8;
    let mut _294: &i8;
    let mut _295: &i8;
    let mut _296: &i8;
    let mut _297: &i8;
    let mut _298: &i8;
    let mut _299: &i8;
    let mut _300: &i8;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _12;
        debug right_val => _13;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 6 {
            debug kind => _28;
        }
    }
    scope 7 {
        debug left_val => _32;
        debug right_val => _33;
        let _38: core::panicking::AssertKind;
        scope 8 {
            debug kind => _38;
        }
    }
    scope 9 {
        debug left_val => _42;
        debug right_val => _43;
        let _48: core::panicking::AssertKind;
        scope 10 {
            debug kind => _48;
        }
    }
    scope 11 {
        debug left_val => _52;
        debug right_val => _53;
        let _58: core::panicking::AssertKind;
        scope 12 {
            debug kind => _58;
        }
    }
    scope 13 {
        debug left_val => _62;
        debug right_val => _63;
        let _68: core::panicking::AssertKind;
        scope 14 {
            debug kind => _68;
        }
    }
    scope 15 {
        debug left_val => _72;
        debug right_val => _73;
        let _78: core::panicking::AssertKind;
        scope 16 {
            debug kind => _78;
        }
    }
    scope 17 {
        debug left_val => _82;
        debug right_val => _83;
        let _88: core::panicking::AssertKind;
        scope 18 {
            debug kind => _88;
        }
    }
    scope 19 {
        debug left_val => _92;
        debug right_val => _93;
        let _98: core::panicking::AssertKind;
        scope 20 {
            debug kind => _98;
        }
    }
    scope 21 {
        debug left_val => _102;
        debug right_val => _103;
        let _108: core::panicking::AssertKind;
        scope 22 {
            debug kind => _108;
        }
    }
    scope 23 {
        debug left_val => _112;
        debug right_val => _113;
        let _118: core::panicking::AssertKind;
        scope 24 {
            debug kind => _118;
        }
    }
    scope 25 {
        debug left_val => _122;
        debug right_val => _123;
        let _128: core::panicking::AssertKind;
        scope 26 {
            debug kind => _128;
        }
    }
    scope 27 {
        debug left_val => _132;
        debug right_val => _133;
        let _138: core::panicking::AssertKind;
        scope 28 {
            debug kind => _138;
        }
    }
    scope 29 {
        debug left_val => _142;
        debug right_val => _143;
        let _148: core::panicking::AssertKind;
        scope 30 {
            debug kind => _148;
        }
    }
    scope 31 {
        debug left_val => _152;
        debug right_val => _153;
        let _158: core::panicking::AssertKind;
        scope 32 {
            debug kind => _158;
        }
    }
    scope 33 {
        debug left_val => _162;
        debug right_val => _163;
        let _168: core::panicking::AssertKind;
        scope 34 {
            debug kind => _168;
        }
    }
    scope 35 {
        debug left_val => _172;
        debug right_val => _173;
        let _178: core::panicking::AssertKind;
        scope 36 {
            debug kind => _178;
        }
    }
    scope 37 {
        debug left_val => _182;
        debug right_val => _183;
        let _188: core::panicking::AssertKind;
        scope 38 {
            debug kind => _188;
        }
    }
    scope 39 {
        debug left_val => _192;
        debug right_val => _193;
        let _198: core::panicking::AssertKind;
        scope 40 {
            debug kind => _198;
        }
    }
    scope 41 {
        debug left_val => _202;
        debug right_val => _203;
        let _208: core::panicking::AssertKind;
        scope 42 {
            debug kind => _208;
        }
    }
    scope 43 {
        debug left_val => _212;
        debug right_val => _213;
        let _218: core::panicking::AssertKind;
        scope 44 {
            debug kind => _218;
        }
    }
    scope 45 {
        debug left_val => _222;
        debug right_val => _223;
        let _228: core::panicking::AssertKind;
        scope 46 {
            debug kind => _228;
        }
    }
    scope 47 {
        debug left_val => _232;
        debug right_val => _233;
        let _238: core::panicking::AssertKind;
        scope 48 {
            debug kind => _238;
        }
    }
    scope 49 {
        debug left_val => _242;
        debug right_val => _243;
        let _248: core::panicking::AssertKind;
        scope 50 {
            debug kind => _248;
        }
    }

    bb0: {
        _300 = const _;
        _299 = const _;
        _1 = (_300, _299);
        _2 = (_1.0: &i8);
        _3 = (_1.1: &i8);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<i8, i8>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        _298 = const _;
        _297 = const _;
        _11 = (_298, _297);
        _12 = (_11.0: &i8);
        _13 = (_11.1: &i8);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<i8, i8>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb4: {
        _296 = const _;
        _295 = const _;
        _21 = (_296, _295);
        _22 = (_21.0: &i8);
        _23 = (_21.1: &i8);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<i8, i8>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb6: {
        _294 = const _;
        _293 = const _;
        _31 = (_294, _293);
        _32 = (_31.0: &i8);
        _33 = (_31.1: &i8);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<i8, i8>(move _38, _32, _33, move _40) -> unwind continue;
    }

    bb8: {
        _292 = const _;
        _291 = const _;
        _41 = (_292, _291);
        _42 = (_41.0: &i8);
        _43 = (_41.1: &i8);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<i8, i8>(move _48, _42, _43, move _50) -> unwind continue;
    }

    bb10: {
        _290 = const _;
        _289 = const _;
        _51 = (_290, _289);
        _52 = (_51.0: &i8);
        _53 = (_51.1: &i8);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<i8, i8>(move _58, _52, _53, move _60) -> unwind continue;
    }

    bb12: {
        _288 = const _;
        _287 = const _;
        _61 = (_288, _287);
        _62 = (_61.0: &i8);
        _63 = (_61.1: &i8);
        _66 = (*_62);
        _67 = (*_63);
        _65 = Eq(move _66, move _67);
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _68 = core::panicking::AssertKind::Eq;
        _70 = Option::<Arguments<'_>>::None;
        _69 = core::panicking::assert_failed::<i8, i8>(move _68, _62, _63, move _70) -> unwind continue;
    }

    bb14: {
        _286 = const _;
        _285 = const _;
        _71 = (_286, _285);
        _72 = (_71.0: &i8);
        _73 = (_71.1: &i8);
        _76 = (*_72);
        _77 = (*_73);
        _75 = Eq(move _76, move _77);
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<i8, i8>(move _78, _72, _73, move _80) -> unwind continue;
    }

    bb16: {
        _284 = const _;
        _283 = const _;
        _81 = (_284, _283);
        _82 = (_81.0: &i8);
        _83 = (_81.1: &i8);
        _86 = (*_82);
        _87 = (*_83);
        _85 = Eq(move _86, move _87);
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _88 = core::panicking::AssertKind::Eq;
        _90 = Option::<Arguments<'_>>::None;
        _89 = core::panicking::assert_failed::<i8, i8>(move _88, _82, _83, move _90) -> unwind continue;
    }

    bb18: {
        _282 = const _;
        _281 = const _;
        _91 = (_282, _281);
        _92 = (_91.0: &i8);
        _93 = (_91.1: &i8);
        _96 = (*_92);
        _97 = (*_93);
        _95 = Eq(move _96, move _97);
        _94 = Not(move _95);
        switchInt(move _94) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _98 = core::panicking::AssertKind::Eq;
        _100 = Option::<Arguments<'_>>::None;
        _99 = core::panicking::assert_failed::<i8, i8>(move _98, _92, _93, move _100) -> unwind continue;
    }

    bb20: {
        _280 = const _;
        _279 = const _;
        _101 = (_280, _279);
        _102 = (_101.0: &i8);
        _103 = (_101.1: &i8);
        _106 = (*_102);
        _107 = (*_103);
        _105 = Eq(move _106, move _107);
        _104 = Not(move _105);
        switchInt(move _104) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _108 = core::panicking::AssertKind::Eq;
        _110 = Option::<Arguments<'_>>::None;
        _109 = core::panicking::assert_failed::<i8, i8>(move _108, _102, _103, move _110) -> unwind continue;
    }

    bb22: {
        _278 = const _;
        _277 = const _;
        _111 = (_278, _277);
        _112 = (_111.0: &i8);
        _113 = (_111.1: &i8);
        _116 = (*_112);
        _117 = (*_113);
        _115 = Eq(move _116, move _117);
        _114 = Not(move _115);
        switchInt(move _114) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _118 = core::panicking::AssertKind::Eq;
        _120 = Option::<Arguments<'_>>::None;
        _119 = core::panicking::assert_failed::<i8, i8>(move _118, _112, _113, move _120) -> unwind continue;
    }

    bb24: {
        _276 = const _;
        _275 = const _;
        _121 = (_276, _275);
        _122 = (_121.0: &i8);
        _123 = (_121.1: &i8);
        _126 = (*_122);
        _127 = (*_123);
        _125 = Eq(move _126, move _127);
        _124 = Not(move _125);
        switchInt(move _124) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _128 = core::panicking::AssertKind::Eq;
        _130 = Option::<Arguments<'_>>::None;
        _129 = core::panicking::assert_failed::<i8, i8>(move _128, _122, _123, move _130) -> unwind continue;
    }

    bb26: {
        _274 = const _;
        _273 = const _;
        _131 = (_274, _273);
        _132 = (_131.0: &i8);
        _133 = (_131.1: &i8);
        _136 = (*_132);
        _137 = (*_133);
        _135 = Eq(move _136, move _137);
        _134 = Not(move _135);
        switchInt(move _134) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _138 = core::panicking::AssertKind::Eq;
        _140 = Option::<Arguments<'_>>::None;
        _139 = core::panicking::assert_failed::<i8, i8>(move _138, _132, _133, move _140) -> unwind continue;
    }

    bb28: {
        _272 = const _;
        _271 = const _;
        _141 = (_272, _271);
        _142 = (_141.0: &i8);
        _143 = (_141.1: &i8);
        _146 = (*_142);
        _147 = (*_143);
        _145 = Eq(move _146, move _147);
        _144 = Not(move _145);
        switchInt(move _144) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _148 = core::panicking::AssertKind::Eq;
        _150 = Option::<Arguments<'_>>::None;
        _149 = core::panicking::assert_failed::<i8, i8>(move _148, _142, _143, move _150) -> unwind continue;
    }

    bb30: {
        _270 = const _;
        _269 = const _;
        _151 = (_270, _269);
        _152 = (_151.0: &i8);
        _153 = (_151.1: &i8);
        _156 = (*_152);
        _157 = (*_153);
        _155 = Eq(move _156, move _157);
        _154 = Not(move _155);
        switchInt(move _154) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _158 = core::panicking::AssertKind::Eq;
        _160 = Option::<Arguments<'_>>::None;
        _159 = core::panicking::assert_failed::<i8, i8>(move _158, _152, _153, move _160) -> unwind continue;
    }

    bb32: {
        _268 = const _;
        _267 = const _;
        _161 = (_268, _267);
        _162 = (_161.0: &i8);
        _163 = (_161.1: &i8);
        _166 = (*_162);
        _167 = (*_163);
        _165 = Eq(move _166, move _167);
        _164 = Not(move _165);
        switchInt(move _164) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _168 = core::panicking::AssertKind::Eq;
        _170 = Option::<Arguments<'_>>::None;
        _169 = core::panicking::assert_failed::<i8, i8>(move _168, _162, _163, move _170) -> unwind continue;
    }

    bb34: {
        _266 = const _;
        _265 = const _;
        _171 = (_266, _265);
        _172 = (_171.0: &i8);
        _173 = (_171.1: &i8);
        _176 = (*_172);
        _177 = (*_173);
        _175 = Eq(move _176, move _177);
        _174 = Not(move _175);
        switchInt(move _174) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _178 = core::panicking::AssertKind::Eq;
        _180 = Option::<Arguments<'_>>::None;
        _179 = core::panicking::assert_failed::<i8, i8>(move _178, _172, _173, move _180) -> unwind continue;
    }

    bb36: {
        _264 = const _;
        _263 = const _;
        _181 = (_264, _263);
        _182 = (_181.0: &i8);
        _183 = (_181.1: &i8);
        _186 = (*_182);
        _187 = (*_183);
        _185 = Eq(move _186, move _187);
        _184 = Not(move _185);
        switchInt(move _184) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _188 = core::panicking::AssertKind::Eq;
        _190 = Option::<Arguments<'_>>::None;
        _189 = core::panicking::assert_failed::<i8, i8>(move _188, _182, _183, move _190) -> unwind continue;
    }

    bb38: {
        _262 = const _;
        _261 = const _;
        _191 = (_262, _261);
        _192 = (_191.0: &i8);
        _193 = (_191.1: &i8);
        _196 = (*_192);
        _197 = (*_193);
        _195 = Eq(move _196, move _197);
        _194 = Not(move _195);
        switchInt(move _194) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _198 = core::panicking::AssertKind::Eq;
        _200 = Option::<Arguments<'_>>::None;
        _199 = core::panicking::assert_failed::<i8, i8>(move _198, _192, _193, move _200) -> unwind continue;
    }

    bb40: {
        _260 = const _;
        _259 = const _;
        _201 = (_260, _259);
        _202 = (_201.0: &i8);
        _203 = (_201.1: &i8);
        _206 = (*_202);
        _207 = (*_203);
        _205 = Eq(move _206, move _207);
        _204 = Not(move _205);
        switchInt(move _204) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _208 = core::panicking::AssertKind::Eq;
        _210 = Option::<Arguments<'_>>::None;
        _209 = core::panicking::assert_failed::<i8, i8>(move _208, _202, _203, move _210) -> unwind continue;
    }

    bb42: {
        _258 = const _;
        _257 = const _;
        _211 = (_258, _257);
        _212 = (_211.0: &i8);
        _213 = (_211.1: &i8);
        _216 = (*_212);
        _217 = (*_213);
        _215 = Eq(move _216, move _217);
        _214 = Not(move _215);
        switchInt(move _214) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        _218 = core::panicking::AssertKind::Eq;
        _220 = Option::<Arguments<'_>>::None;
        _219 = core::panicking::assert_failed::<i8, i8>(move _218, _212, _213, move _220) -> unwind continue;
    }

    bb44: {
        _256 = const _;
        _255 = const _;
        _221 = (_256, _255);
        _222 = (_221.0: &i8);
        _223 = (_221.1: &i8);
        _226 = (*_222);
        _227 = (*_223);
        _225 = Eq(move _226, move _227);
        _224 = Not(move _225);
        switchInt(move _224) -> [0: bb46, otherwise: bb45];
    }

    bb45: {
        _228 = core::panicking::AssertKind::Eq;
        _230 = Option::<Arguments<'_>>::None;
        _229 = core::panicking::assert_failed::<i8, i8>(move _228, _222, _223, move _230) -> unwind continue;
    }

    bb46: {
        _254 = const _;
        _253 = const _;
        _231 = (_254, _253);
        _232 = (_231.0: &i8);
        _233 = (_231.1: &i8);
        _236 = (*_232);
        _237 = (*_233);
        _235 = Eq(move _236, move _237);
        _234 = Not(move _235);
        switchInt(move _234) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _238 = core::panicking::AssertKind::Eq;
        _240 = Option::<Arguments<'_>>::None;
        _239 = core::panicking::assert_failed::<i8, i8>(move _238, _232, _233, move _240) -> unwind continue;
    }

    bb48: {
        _252 = const _;
        _251 = const _;
        _241 = (_252, _251);
        _242 = (_241.0: &i8);
        _243 = (_241.1: &i8);
        _246 = (*_242);
        _247 = (*_243);
        _245 = Eq(move _246, move _247);
        _244 = Not(move _245);
        switchInt(move _244) -> [0: bb50, otherwise: bb49];
    }

    bb49: {
        _248 = core::panicking::AssertKind::Eq;
        _250 = Option::<Arguments<'_>>::None;
        _249 = core::panicking::assert_failed::<i8, i8>(move _248, _242, _243, move _250) -> unwind continue;
    }

    bb50: {
        return;
    }
}

promoted[0] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 0_i8;
        _0 = &_1;
        return;
    }
}

promoted[1] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 0_i8;
        _0 = &_1;
        return;
    }
}

promoted[3] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[4] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const i8::MIN;
        _0 = &_1;
        return;
    }
}

promoted[5] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[6] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 10_i8;
        _0 = &_1;
        return;
    }
}

promoted[7] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[8] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 0_i8;
        _0 = &_1;
        return;
    }
}

promoted[9] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[10] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 0_i8;
        _0 = &_1;
        return;
    }
}

promoted[11] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[12] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const i8::MIN;
        _0 = &_1;
        return;
    }
}

promoted[13] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[14] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 10_i8;
        _0 = &_1;
        return;
    }
}

promoted[15] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[16] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[17] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[18] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[19] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[20] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 100_i8;
        _0 = &_1;
        return;
    }
}

promoted[21] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[22] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 100_i8;
        _0 = &_1;
        return;
    }
}

promoted[23] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[24] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = Add(const _, const 1_i8);
        _0 = &_1;
        return;
    }
}

promoted[25] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[26] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[27] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[28] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 100_i8;
        _0 = &_1;
        return;
    }
}

promoted[29] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[30] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const -100_i8;
        _0 = &_1;
        return;
    }
}

promoted[31] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[32] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[33] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[34] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[35] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[36] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 120_i8;
        _0 = &_1;
        return;
    }
}

promoted[37] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[38] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[39] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[40] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[41] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[42] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const -27_i8;
        _0 = &_1;
        return;
    }
}

promoted[43] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[44] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[45] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[46] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[47] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[48] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 101_i8;
        _0 = &_1;
        return;
    }
}

promoted[49] in saturating_and_wrapping: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

const C28: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_add(const 100_i8, const 1_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C29: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_add(const _, const 100_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C30: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_add(const _, const -1_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C31: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_sub(const 100_i8, const i8::MAX) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C32: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_sub(const _, const 100_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C33: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_sub(const _, const -1_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C34: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_mul(const 10_i8, const 12_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C35: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_mul(const _, const 10_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C36: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_mul(const _, const 10_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C37: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_neg(const 100_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C38: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_neg(const -100_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C39: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_neg(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C40: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_neg(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C57: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_abs(const 100_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C58: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_abs(const -100_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C59: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_abs(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C60: i8 = {
    let mut _0: i8;
    let mut _1: i8;
    let mut _2: (i8, bool);

    bb0: {
        StorageLive(_1);
        _2 = CheckedAdd(const _, const 1_i8);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_i8) -> [success: bb1, unwind continue];
    }

    bb1: {
        _1 = move (_2.0: i8);
        ConstEvalCounter;
        _0 = core::num::<impl i8>::saturating_abs(move _1) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_1);
        return;
    }
}

const C41: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::wrapping_div(const 100_i8, const 10_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C42: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::wrapping_div(const i8::MIN, const -1_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C43: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::wrapping_rem(const 100_i8, const 10_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C44: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::wrapping_rem(const i8::MIN, const -1_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C45: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::wrapping_div_euclid(const 100_i8, const 10_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C46: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::wrapping_div_euclid(const i8::MIN, const -1_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C47: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::wrapping_rem_euclid(const 100_i8, const 10_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C48: i8 = {
    let mut _0: i8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::wrapping_rem_euclid(const i8::MIN, const -1_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn saturating_and_wrapping_i128() -> () {
    let mut _0: ();
    let mut _1: (&i128, &i128);
    let _2: &i128;
    let _3: &i128;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: i128;
    let mut _7: i128;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&i128, &i128);
    let _12: &i128;
    let _13: &i128;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: i128;
    let mut _17: i128;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&i128, &i128);
    let _22: &i128;
    let _23: &i128;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: i128;
    let mut _27: i128;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&i128, &i128);
    let _32: &i128;
    let _33: &i128;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: i128;
    let mut _37: i128;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: &i128;
    let mut _42: &i128;
    let mut _43: &i128;
    let mut _44: &i128;
    let mut _45: &i128;
    let mut _46: &i128;
    let mut _47: &i128;
    let mut _48: &i128;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _12;
        debug right_val => _13;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 6 {
            debug kind => _28;
        }
    }
    scope 7 {
        debug left_val => _32;
        debug right_val => _33;
        let _38: core::panicking::AssertKind;
        scope 8 {
            debug kind => _38;
        }
    }

    bb0: {
        _48 = const _;
        _47 = const _;
        _1 = (_48, _47);
        _2 = (_1.0: &i128);
        _3 = (_1.1: &i128);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<i128, i128>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        _46 = const _;
        _45 = const _;
        _11 = (_46, _45);
        _12 = (_11.0: &i128);
        _13 = (_11.1: &i128);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<i128, i128>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb4: {
        _44 = const _;
        _43 = const _;
        _21 = (_44, _43);
        _22 = (_21.0: &i128);
        _23 = (_21.1: &i128);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<i128, i128>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb6: {
        _42 = const _;
        _41 = const _;
        _31 = (_42, _41);
        _32 = (_31.0: &i128);
        _33 = (_31.1: &i128);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<i128, i128>(move _38, _32, _33, move _40) -> unwind continue;
    }

    bb8: {
        return;
    }
}

promoted[0] in saturating_and_wrapping_i128: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = Sub(const _, const 2_i128);
        _0 = &_1;
        return;
    }
}

promoted[1] in saturating_and_wrapping_i128: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in saturating_and_wrapping_i128: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[3] in saturating_and_wrapping_i128: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[4] in saturating_and_wrapping_i128: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[5] in saturating_and_wrapping_i128: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[6] in saturating_and_wrapping_i128: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[7] in saturating_and_wrapping_i128: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

const SAT_ADD_I128: i128 = {
    let mut _0: i128;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i128>::saturating_add(const _, const 1_i128) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const SAT_MUL_I128: i128 = {
    let mut _0: i128;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i128>::saturating_mul(const _, const 2_i128) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const WRP_ADD_I128: i128 = {
    let mut _0: i128;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i128>::wrapping_add(const _, const 1_i128) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const WRP_MUL_I128: i128 = {
    let mut _0: i128;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i128>::wrapping_mul(const _, const 3_i128) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn overflowing() -> () {
    let mut _0: ();
    let mut _1: (&(i8, bool), &(i8, bool));
    let _2: &(i8, bool);
    let _3: &(i8, bool);
    let mut _4: bool;
    let mut _5: bool;
    let _7: !;
    let mut _8: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _9: (&(i8, bool), &(i8, bool));
    let _10: &(i8, bool);
    let _11: &(i8, bool);
    let mut _12: bool;
    let mut _13: bool;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&(i8, bool), &(i8, bool));
    let _18: &(i8, bool);
    let _19: &(i8, bool);
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&(i8, bool), &(i8, bool));
    let _26: &(i8, bool);
    let _27: &(i8, bool);
    let mut _28: bool;
    let mut _29: bool;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: (&(i8, bool), &(i8, bool));
    let _34: &(i8, bool);
    let _35: &(i8, bool);
    let mut _36: bool;
    let mut _37: bool;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&(i8, bool), &(i8, bool));
    let _42: &(i8, bool);
    let _43: &(i8, bool);
    let mut _44: bool;
    let mut _45: bool;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&(i8, bool), &(i8, bool));
    let _50: &(i8, bool);
    let _51: &(i8, bool);
    let mut _52: bool;
    let mut _53: bool;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: (&(i8, bool), &(i8, bool));
    let _58: &(i8, bool);
    let _59: &(i8, bool);
    let mut _60: bool;
    let mut _61: bool;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: &(i8, bool);
    let mut _66: &(i8, bool);
    let mut _67: &(i8, bool);
    let mut _68: &(i8, bool);
    let mut _69: &(i8, bool);
    let mut _70: &(i8, bool);
    let mut _71: &(i8, bool);
    let mut _72: &(i8, bool);
    let mut _73: &(i8, bool);
    let mut _74: &(i8, bool);
    let mut _75: &(i8, bool);
    let mut _76: &(i8, bool);
    let mut _77: &(i8, bool);
    let mut _78: &(i8, bool);
    let mut _79: &(i8, bool);
    let mut _80: &(i8, bool);
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _6: core::panicking::AssertKind;
        scope 2 {
            debug kind => _6;
        }
    }
    scope 3 {
        debug left_val => _10;
        debug right_val => _11;
        let _14: core::panicking::AssertKind;
        scope 4 {
            debug kind => _14;
        }
    }
    scope 5 {
        debug left_val => _18;
        debug right_val => _19;
        let _22: core::panicking::AssertKind;
        scope 6 {
            debug kind => _22;
        }
    }
    scope 7 {
        debug left_val => _26;
        debug right_val => _27;
        let _30: core::panicking::AssertKind;
        scope 8 {
            debug kind => _30;
        }
    }
    scope 9 {
        debug left_val => _34;
        debug right_val => _35;
        let _38: core::panicking::AssertKind;
        scope 10 {
            debug kind => _38;
        }
    }
    scope 11 {
        debug left_val => _42;
        debug right_val => _43;
        let _46: core::panicking::AssertKind;
        scope 12 {
            debug kind => _46;
        }
    }
    scope 13 {
        debug left_val => _50;
        debug right_val => _51;
        let _54: core::panicking::AssertKind;
        scope 14 {
            debug kind => _54;
        }
    }
    scope 15 {
        debug left_val => _58;
        debug right_val => _59;
        let _62: core::panicking::AssertKind;
        scope 16 {
            debug kind => _62;
        }
    }

    bb0: {
        _80 = const _;
        _79 = const _;
        _1 = (_80, _79);
        _2 = (_1.0: &(i8, bool));
        _3 = (_1.1: &(i8, bool));
        _5 = <(i8, bool) as PartialEq>::eq(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = core::panicking::AssertKind::Eq;
        _8 = Option::<Arguments<'_>>::None;
        _7 = core::panicking::assert_failed::<(i8, bool), (i8, bool)>(move _6, _2, _3, move _8) -> unwind continue;
    }

    bb3: {
        _78 = const _;
        _77 = const _;
        _9 = (_78, _77);
        _10 = (_9.0: &(i8, bool));
        _11 = (_9.1: &(i8, bool));
        _13 = <(i8, bool) as PartialEq>::eq(_10, _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<(i8, bool), (i8, bool)>(move _14, _10, _11, move _16) -> unwind continue;
    }

    bb6: {
        _76 = const _;
        _75 = const _;
        _17 = (_76, _75);
        _18 = (_17.0: &(i8, bool));
        _19 = (_17.1: &(i8, bool));
        _21 = <(i8, bool) as PartialEq>::eq(_18, _19) -> [return: bb7, unwind continue];
    }

    bb7: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<(i8, bool), (i8, bool)>(move _22, _18, _19, move _24) -> unwind continue;
    }

    bb9: {
        _74 = const _;
        _73 = const _;
        _25 = (_74, _73);
        _26 = (_25.0: &(i8, bool));
        _27 = (_25.1: &(i8, bool));
        _29 = <(i8, bool) as PartialEq>::eq(_26, _27) -> [return: bb10, unwind continue];
    }

    bb10: {
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<(i8, bool), (i8, bool)>(move _30, _26, _27, move _32) -> unwind continue;
    }

    bb12: {
        _72 = const _;
        _71 = const _;
        _33 = (_72, _71);
        _34 = (_33.0: &(i8, bool));
        _35 = (_33.1: &(i8, bool));
        _37 = <(i8, bool) as PartialEq>::eq(_34, _35) -> [return: bb13, unwind continue];
    }

    bb13: {
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<(i8, bool), (i8, bool)>(move _38, _34, _35, move _40) -> unwind continue;
    }

    bb15: {
        _70 = const _;
        _69 = const _;
        _41 = (_70, _69);
        _42 = (_41.0: &(i8, bool));
        _43 = (_41.1: &(i8, bool));
        _45 = <(i8, bool) as PartialEq>::eq(_42, _43) -> [return: bb16, unwind continue];
    }

    bb16: {
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<(i8, bool), (i8, bool)>(move _46, _42, _43, move _48) -> unwind continue;
    }

    bb18: {
        _68 = const _;
        _67 = const _;
        _49 = (_68, _67);
        _50 = (_49.0: &(i8, bool));
        _51 = (_49.1: &(i8, bool));
        _53 = <(i8, bool) as PartialEq>::eq(_50, _51) -> [return: bb19, unwind continue];
    }

    bb19: {
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<(i8, bool), (i8, bool)>(move _54, _50, _51, move _56) -> unwind continue;
    }

    bb21: {
        _66 = const _;
        _65 = const _;
        _57 = (_66, _65);
        _58 = (_57.0: &(i8, bool));
        _59 = (_57.1: &(i8, bool));
        _61 = <(i8, bool) as PartialEq>::eq(_58, _59) -> [return: bb22, unwind continue];
    }

    bb22: {
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<(i8, bool), (i8, bool)>(move _62, _58, _59, move _64) -> unwind continue;
    }

    bb24: {
        return;
    }
}

promoted[0] in overflowing: &(i8, bool) = {
    let mut _0: &(i8, bool);
    let mut _1: (i8, bool);

    bb0: {
        _1 = (const 0_i8, const true);
        _0 = &_1;
        return;
    }
}

promoted[1] in overflowing: &(i8, bool) = {
    let mut _0: &(i8, bool);
    let mut _1: (i8, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in overflowing: &(i8, bool) = {
    let mut _0: &(i8, bool);
    let mut _1: (i8, bool);

    bb0: {
        _1 = (const 1_i8, const false);
        _0 = &_1;
        return;
    }
}

promoted[3] in overflowing: &(i8, bool) = {
    let mut _0: &(i8, bool);
    let mut _1: (i8, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[4] in overflowing: &(i8, bool) = {
    let mut _0: &(i8, bool);
    let mut _1: (i8, bool);

    bb0: {
        _1 = (const _, const true);
        _0 = &_1;
        return;
    }
}

promoted[5] in overflowing: &(i8, bool) = {
    let mut _0: &(i8, bool);
    let mut _1: (i8, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[6] in overflowing: &(i8, bool) = {
    let mut _0: &(i8, bool);
    let mut _1: (i8, bool);

    bb0: {
        _1 = (const 2_i8, const false);
        _0 = &_1;
        return;
    }
}

promoted[7] in overflowing: &(i8, bool) = {
    let mut _0: &(i8, bool);
    let mut _1: (i8, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[8] in overflowing: &(i8, bool) = {
    let mut _0: &(i8, bool);
    let mut _1: (i8, bool);

    bb0: {
        _1 = (const 0_i8, const true);
        _0 = &_1;
        return;
    }
}

promoted[9] in overflowing: &(i8, bool) = {
    let mut _0: &(i8, bool);
    let mut _1: (i8, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[10] in overflowing: &(i8, bool) = {
    let mut _0: &(i8, bool);
    let mut _1: (i8, bool);

    bb0: {
        _1 = (const 1_i8, const false);
        _0 = &_1;
        return;
    }
}

promoted[11] in overflowing: &(i8, bool) = {
    let mut _0: &(i8, bool);
    let mut _1: (i8, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[12] in overflowing: &(i8, bool) = {
    let mut _0: &(i8, bool);
    let mut _1: (i8, bool);

    bb0: {
        _1 = (const _, const true);
        _0 = &_1;
        return;
    }
}

promoted[13] in overflowing: &(i8, bool) = {
    let mut _0: &(i8, bool);
    let mut _1: (i8, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[14] in overflowing: &(i8, bool) = {
    let mut _0: &(i8, bool);
    let mut _1: (i8, bool);

    bb0: {
        _1 = (const 2_i8, const false);
        _0 = &_1;
        return;
    }
}

promoted[15] in overflowing: &(i8, bool) = {
    let mut _0: &(i8, bool);
    let mut _1: (i8, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

const C49: (i8, bool) = {
    let mut _0: (i8, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::overflowing_div(const 5_i8, const 2_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C50: (i8, bool) = {
    let mut _0: (i8, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::overflowing_div(const _, const -1_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C51: (i8, bool) = {
    let mut _0: (i8, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::overflowing_rem(const 5_i8, const 2_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C52: (i8, bool) = {
    let mut _0: (i8, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::overflowing_rem(const _, const -1_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C53: (i8, bool) = {
    let mut _0: (i8, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::overflowing_div_euclid(const 5_i8, const 2_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C54: (i8, bool) = {
    let mut _0: (i8, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::overflowing_div_euclid(const _, const -1_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C55: (i8, bool) = {
    let mut _0: (i8, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::overflowing_rem_euclid(const 5_i8, const 2_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const C56: (i8, bool) = {
    let mut _0: (i8, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i8>::overflowing_rem_euclid(const _, const -1_i8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn overflowing_i128() -> () {
    let mut _0: ();
    let mut _1: (&(i128, bool), &(i128, bool));
    let _2: &(i128, bool);
    let _3: &(i128, bool);
    let mut _4: bool;
    let mut _5: bool;
    let _7: !;
    let mut _8: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _9: (&(i128, bool), &(i128, bool));
    let _10: &(i128, bool);
    let _11: &(i128, bool);
    let mut _12: bool;
    let mut _13: bool;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: &(i128, bool);
    let mut _18: &(i128, bool);
    let mut _19: &(i128, bool);
    let mut _20: &(i128, bool);
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _6: core::panicking::AssertKind;
        scope 2 {
            debug kind => _6;
        }
    }
    scope 3 {
        debug left_val => _10;
        debug right_val => _11;
        let _14: core::panicking::AssertKind;
        scope 4 {
            debug kind => _14;
        }
    }

    bb0: {
        _20 = const _;
        _19 = const _;
        _1 = (_20, _19);
        _2 = (_1.0: &(i128, bool));
        _3 = (_1.1: &(i128, bool));
        _5 = <(i128, bool) as PartialEq>::eq(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = core::panicking::AssertKind::Eq;
        _8 = Option::<Arguments<'_>>::None;
        _7 = core::panicking::assert_failed::<(i128, bool), (i128, bool)>(move _6, _2, _3, move _8) -> unwind continue;
    }

    bb3: {
        _18 = const _;
        _17 = const _;
        _9 = (_18, _17);
        _10 = (_9.0: &(i128, bool));
        _11 = (_9.1: &(i128, bool));
        _13 = <(i128, bool) as PartialEq>::eq(_10, _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<(i128, bool), (i128, bool)>(move _14, _10, _11, move _16) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in overflowing_i128: &(i128, bool) = {
    let mut _0: &(i128, bool);
    let mut _1: (i128, bool);
    let mut _2: i128;

    bb0: {
        _2 = Sub(const _, const 2_i128);
        _1 = (move _2, const true);
        _0 = &_1;
        return;
    }
}

promoted[1] in overflowing_i128: &(i128, bool) = {
    let mut _0: &(i128, bool);
    let mut _1: (i128, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in overflowing_i128: &(i128, bool) = {
    let mut _0: &(i128, bool);
    let mut _1: (i128, bool);

    bb0: {
        _1 = (const _, const true);
        _0 = &_1;
        return;
    }
}

promoted[3] in overflowing_i128: &(i128, bool) = {
    let mut _0: &(i128, bool);
    let mut _1: (i128, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

const OFL_ADD_I128: (i128, bool) = {
    let mut _0: (i128, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i128>::overflowing_add(const _, const 1_i128) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const OFL_MUL_I128: (i128, bool) = {
    let mut _0: (i128, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i128>::overflowing_mul(const _, const 3_i128) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();
    let _5: ();
    let _6: ();

    bb0: {
        _1 = checked() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = checked_i128() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = saturating_and_wrapping() -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = saturating_and_wrapping_i128() -> [return: bb4, unwind continue];
    }

    bb4: {
        _5 = overflowing() -> [return: bb5, unwind continue];
    }

    bb5: {
        _6 = overflowing_i128() -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}
