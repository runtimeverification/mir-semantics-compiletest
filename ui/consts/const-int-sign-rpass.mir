// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const NEGATIVE_A: bool = {
    let mut _0: bool;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::is_negative(const -10_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const NEGATIVE_B: bool = {
    let mut _0: bool;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::is_negative(const 10_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const POSITIVE_A: bool = {
    let mut _0: bool;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::is_positive(const -10_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const POSITIVE_B: bool = {
    let mut _0: bool;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::is_positive(const 10_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const SIGNUM_POS: i32 = {
    let mut _0: i32;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::signum(const 10_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const SIGNUM_NIL: i32 = {
    let mut _0: i32;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::signum(const 0_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const SIGNUM_NEG: i32 = {
    let mut _0: i32;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::signum(const -42_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const ABS_A: i32 = {
    let mut _0: i32;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::abs(const 10_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const ABS_B: i32 = {
    let mut _0: i32;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::abs(const -10_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: !;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: !;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: !;
    let mut _9: bool;
    let mut _10: !;
    let mut _11: (&i32, &i32);
    let _12: &i32;
    let _13: &i32;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: i32;
    let mut _17: i32;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&i32, &i32);
    let _22: &i32;
    let _23: &i32;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: i32;
    let mut _27: i32;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&i32, &i32);
    let _32: &i32;
    let _33: &i32;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: i32;
    let mut _37: i32;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&i32, &i32);
    let _42: &i32;
    let _43: &i32;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: i32;
    let mut _47: i32;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: (&i32, &i32);
    let _52: &i32;
    let _53: &i32;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: i32;
    let mut _57: i32;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: &i32;
    let mut _62: &i32;
    let mut _63: &i32;
    let mut _64: &i32;
    let mut _65: &i32;
    let mut _66: &i32;
    let mut _67: &i32;
    let mut _68: &i32;
    let mut _69: &i32;
    let mut _70: &i32;
    scope 1 {
        debug left_val => _12;
        debug right_val => _13;
        let _18: core::panicking::AssertKind;
        scope 2 {
            debug kind => _18;
        }
    }
    scope 3 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 4 {
            debug kind => _28;
        }
    }
    scope 5 {
        debug left_val => _32;
        debug right_val => _33;
        let _38: core::panicking::AssertKind;
        scope 6 {
            debug kind => _38;
        }
    }
    scope 7 {
        debug left_val => _42;
        debug right_val => _43;
        let _48: core::panicking::AssertKind;
        scope 8 {
            debug kind => _48;
        }
    }
    scope 9 {
        debug left_val => _52;
        debug right_val => _53;
        let _58: core::panicking::AssertKind;
        scope 10 {
            debug kind => _58;
        }
    }

    bb0: {
        _1 = Not(const _);
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _2 = core::panicking::panic(const "assertion failed: NEGATIVE_A") -> unwind continue;
    }

    bb2: {
        _4 = Not(const _);
        _3 = Not(move _4);
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _5 = core::panicking::panic(const "assertion failed: !NEGATIVE_B") -> unwind continue;
    }

    bb4: {
        _7 = Not(const _);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _8 = core::panicking::panic(const "assertion failed: !POSITIVE_A") -> unwind continue;
    }

    bb6: {
        _9 = Not(const _);
        switchInt(move _9) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _10 = core::panicking::panic(const "assertion failed: POSITIVE_B") -> unwind continue;
    }

    bb8: {
        _70 = const _;
        _69 = const _;
        _11 = (_70, _69);
        _12 = (_11.0: &i32);
        _13 = (_11.1: &i32);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<i32, i32>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb10: {
        _68 = const _;
        _67 = const _;
        _21 = (_68, _67);
        _22 = (_21.0: &i32);
        _23 = (_21.1: &i32);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<i32, i32>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb12: {
        _66 = const _;
        _65 = const _;
        _31 = (_66, _65);
        _32 = (_31.0: &i32);
        _33 = (_31.1: &i32);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<i32, i32>(move _38, _32, _33, move _40) -> unwind continue;
    }

    bb14: {
        _64 = const _;
        _63 = const _;
        _41 = (_64, _63);
        _42 = (_41.0: &i32);
        _43 = (_41.1: &i32);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<i32, i32>(move _48, _42, _43, move _50) -> unwind continue;
    }

    bb16: {
        _62 = const _;
        _61 = const _;
        _51 = (_62, _61);
        _52 = (_51.0: &i32);
        _53 = (_51.1: &i32);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<i32, i32>(move _58, _52, _53, move _60) -> unwind continue;
    }

    bb18: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 10_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 10_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const -1_i32;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}
