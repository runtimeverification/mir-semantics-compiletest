// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-vec-of-fns.rs:12:8: 12:8

    bb0: {
        return;                          // scope 0 at ui/consts/const-vec-of-fns.rs:12:11: 12:11
    }
}

static bare_fns: &[fn()] = {
    let mut _0: &[fn()];                 // return place in scope 0 at ui/consts/const-vec-of-fns.rs:13:18: 13:33
    let mut _1: &[fn(); 2];              // in scope 0 at ui/consts/const-vec-of-fns.rs:13:36: 13:43
    let _2: &[fn(); 2];                  // in scope 0 at ui/consts/const-vec-of-fns.rs:13:36: 13:43
    let _3: [fn(); 2];                   // in scope 0 at ui/consts/const-vec-of-fns.rs:13:37: 13:43
    let mut _4: fn();                    // in scope 0 at ui/consts/const-vec-of-fns.rs:13:38: 13:39
    let mut _5: fn();                    // in scope 0 at ui/consts/const-vec-of-fns.rs:13:41: 13:42
    let mut _6: &[fn(); 2];              // in scope 0 at ui/consts/const-vec-of-fns.rs:13:36: 13:43

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-vec-of-fns.rs:13:36: 13:43
        StorageLive(_2);                 // scope 0 at ui/consts/const-vec-of-fns.rs:13:36: 13:43
        _6 = const _;                    // scope 0 at ui/consts/const-vec-of-fns.rs:13:36: 13:43
                                         // mir::Constant
                                         // + span: ui/consts/const-vec-of-fns.rs:13:36: 13:43
                                         // + literal: Const { ty: &[fn(); 2], val: Unevaluated(bare_fns, [], Some(promoted[0])) }
        _2 = &(*_6);                     // scope 0 at ui/consts/const-vec-of-fns.rs:13:36: 13:43
        _1 = &(*_2);                     // scope 0 at ui/consts/const-vec-of-fns.rs:13:36: 13:43
        _0 = move _1 as &[fn()] (Pointer(Unsize)); // scope 0 at ui/consts/const-vec-of-fns.rs:13:36: 13:43
        StorageDead(_2);                 // scope 0 at ui/consts/const-vec-of-fns.rs:13:42: 13:43
        StorageDead(_1);                 // scope 0 at ui/consts/const-vec-of-fns.rs:13:42: 13:43
        return;                          // scope 0 at ui/consts/const-vec-of-fns.rs:13:1: 13:44
    }
}

promoted[0] in bare_fns: &[fn(); 2] = {
    let mut _0: &[fn(); 2];              // return place in scope 0 at ui/consts/const-vec-of-fns.rs:13:36: 13:43
    let mut _1: [fn(); 2];               // in scope 0 at ui/consts/const-vec-of-fns.rs:13:37: 13:43
    let mut _2: fn();                    // in scope 0 at ui/consts/const-vec-of-fns.rs:13:38: 13:39
    let mut _3: fn();                    // in scope 0 at ui/consts/const-vec-of-fns.rs:13:41: 13:42

    bb0: {
        _2 = f as fn() (Pointer(ReifyFnPointer)); // scope 0 at ui/consts/const-vec-of-fns.rs:13:38: 13:39
                                         // mir::Constant
                                         // + span: ui/consts/const-vec-of-fns.rs:13:38: 13:39
                                         // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }
        _3 = f as fn() (Pointer(ReifyFnPointer)); // scope 0 at ui/consts/const-vec-of-fns.rs:13:41: 13:42
                                         // mir::Constant
                                         // + span: ui/consts/const-vec-of-fns.rs:13:41: 13:42
                                         // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }
        _1 = [move _2, move _3];         // scope 0 at ui/consts/const-vec-of-fns.rs:13:37: 13:43
        _0 = &_1;                        // scope 0 at ui/consts/const-vec-of-fns.rs:13:36: 13:43
        return;                          // scope 0 at ui/consts/const-vec-of-fns.rs:13:36: 13:43
    }
}

static mut closures: &mut [S<fn()>] = {
    let mut _0: &mut [S<fn()>];          // return place in scope 0 at ui/consts/const-vec-of-fns.rs:15:22: 15:44
    let mut _1: &mut [S<fn()>; 2];       // in scope 0 at ui/consts/const-vec-of-fns.rs:15:47: 15:80
    let mut _2: &mut [S<fn()>; 2];       // in scope 0 at ui/consts/const-vec-of-fns.rs:15:47: 15:80
    let mut _3: [S<fn()>; 2];            // in scope 0 at ui/consts/const-vec-of-fns.rs:15:52: 15:80
    let mut _4: S<fn()>;                 // in scope 0 at ui/consts/const-vec-of-fns.rs:15:53: 15:65
    let mut _5: fn();                    // in scope 0 at ui/consts/const-vec-of-fns.rs:15:55: 15:64
    let mut _6: S<fn()>;                 // in scope 0 at ui/consts/const-vec-of-fns.rs:15:67: 15:79
    let mut _7: fn();                    // in scope 0 at ui/consts/const-vec-of-fns.rs:15:69: 15:78

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-vec-of-fns.rs:15:47: 15:80
        StorageLive(_2);                 // scope 0 at ui/consts/const-vec-of-fns.rs:15:47: 15:80
        StorageLive(_3);                 // scope 0 at ui/consts/const-vec-of-fns.rs:15:52: 15:80
        StorageLive(_4);                 // scope 0 at ui/consts/const-vec-of-fns.rs:15:53: 15:65
        StorageLive(_5);                 // scope 0 at ui/consts/const-vec-of-fns.rs:15:55: 15:64
        _5 = f as fn() (Pointer(ReifyFnPointer)); // scope 0 at ui/consts/const-vec-of-fns.rs:15:55: 15:56
                                         // mir::Constant
                                         // + span: ui/consts/const-vec-of-fns.rs:15:55: 15:56
                                         // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }
        _4 = S::<fn()>(move _5);         // scope 0 at ui/consts/const-vec-of-fns.rs:15:53: 15:65
        StorageDead(_5);                 // scope 0 at ui/consts/const-vec-of-fns.rs:15:64: 15:65
        StorageLive(_6);                 // scope 0 at ui/consts/const-vec-of-fns.rs:15:67: 15:79
        StorageLive(_7);                 // scope 0 at ui/consts/const-vec-of-fns.rs:15:69: 15:78
        _7 = f as fn() (Pointer(ReifyFnPointer)); // scope 0 at ui/consts/const-vec-of-fns.rs:15:69: 15:70
                                         // mir::Constant
                                         // + span: ui/consts/const-vec-of-fns.rs:15:69: 15:70
                                         // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }
        _6 = S::<fn()>(move _7);         // scope 0 at ui/consts/const-vec-of-fns.rs:15:67: 15:79
        StorageDead(_7);                 // scope 0 at ui/consts/const-vec-of-fns.rs:15:78: 15:79
        _3 = [move _4, move _6];         // scope 0 at ui/consts/const-vec-of-fns.rs:15:52: 15:80
        StorageDead(_6);                 // scope 0 at ui/consts/const-vec-of-fns.rs:15:79: 15:80
        StorageDead(_4);                 // scope 0 at ui/consts/const-vec-of-fns.rs:15:79: 15:80
        _2 = &mut _3;                    // scope 0 at ui/consts/const-vec-of-fns.rs:15:47: 15:80
        _1 = &mut (*_2);                 // scope 0 at ui/consts/const-vec-of-fns.rs:15:47: 15:80
        _0 = move _1 as &mut [S<fn()>] (Pointer(Unsize)); // scope 0 at ui/consts/const-vec-of-fns.rs:15:47: 15:80
        StorageDead(_2);                 // scope 0 at ui/consts/const-vec-of-fns.rs:15:79: 15:80
        StorageDead(_1);                 // scope 0 at ui/consts/const-vec-of-fns.rs:15:79: 15:80
        return;                          // scope 0 at ui/consts/const-vec-of-fns.rs:15:1: 15:81
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-vec-of-fns.rs:17:15: 17:15
    let mut _1: std::slice::Iter<'_, fn()>; // in scope 0 at ui/consts/const-vec-of-fns.rs:19:25: 19:33
    let mut _2: &[fn()];                 // in scope 0 at ui/consts/const-vec-of-fns.rs:19:25: 19:33
    let mut _3: &&[fn()];                // in scope 0 at ui/consts/const-vec-of-fns.rs:19:25: 19:33
    let _5: ();                          // in scope 0 at ui/consts/const-vec-of-fns.rs:19:25: 19:33
    let mut _6: std::option::Option<&fn()>; // in scope 0 at ui/consts/const-vec-of-fns.rs:19:25: 19:33
    let mut _7: &mut std::slice::Iter<'_, fn()>; // in scope 0 at ui/consts/const-vec-of-fns.rs:19:25: 19:33
    let mut _8: &mut std::slice::Iter<'_, fn()>; // in scope 0 at ui/consts/const-vec-of-fns.rs:19:25: 19:33
    let mut _9: isize;                   // in scope 0 at ui/consts/const-vec-of-fns.rs:19:9: 19:47
    let mut _11: fn();                   // in scope 0 at ui/consts/const-vec-of-fns.rs:19:36: 19:43
    let mut _12: std::slice::IterMut<'_, S<fn()>>; // in scope 0 at ui/consts/const-vec-of-fns.rs:20:24: 20:38
    let mut _13: &mut [S<fn()>];         // in scope 0 at ui/consts/const-vec-of-fns.rs:20:24: 20:38
    let mut _14: *mut &mut [S<fn()>];    // in scope 0 at ui/consts/const-vec-of-fns.rs:20:30: 20:38
    let _16: ();                         // in scope 0 at ui/consts/const-vec-of-fns.rs:20:24: 20:38
    let mut _17: std::option::Option<&mut S<fn()>>; // in scope 0 at ui/consts/const-vec-of-fns.rs:20:24: 20:38
    let mut _18: &mut std::slice::IterMut<'_, S<fn()>>; // in scope 0 at ui/consts/const-vec-of-fns.rs:20:24: 20:38
    let mut _19: &mut std::slice::IterMut<'_, S<fn()>>; // in scope 0 at ui/consts/const-vec-of-fns.rs:20:24: 20:38
    let mut _20: isize;                  // in scope 0 at ui/consts/const-vec-of-fns.rs:20:9: 23:10
    let mut _23: fn();                   // in scope 0 at ui/consts/const-vec-of-fns.rs:22:13: 22:23
    let mut _24: &fn();                  // in scope 0 at ui/consts/const-vec-of-fns.rs:19:25: 19:33
    let mut _25: &mut [S<fn()>];         // in scope 0 at ui/consts/const-vec-of-fns.rs:20:30: 20:38
    scope 1 {
        let mut _4: std::slice::Iter<'_, fn()>; // in scope 1 at ui/consts/const-vec-of-fns.rs:19:25: 19:33
        let mut _15: std::slice::IterMut<'_, S<fn()>>; // in scope 1 at ui/consts/const-vec-of-fns.rs:20:24: 20:38
        scope 2 {
            debug iter => _4;            // in scope 2 at ui/consts/const-vec-of-fns.rs:19:25: 19:33
            let _10: fn();               // in scope 2 at ui/consts/const-vec-of-fns.rs:19:14: 19:21
            scope 3 {
                debug bare_fn => _10;    // in scope 3 at ui/consts/const-vec-of-fns.rs:19:14: 19:21
            }
        }
        scope 4 {
            debug iter => _15;           // in scope 4 at ui/consts/const-vec-of-fns.rs:20:24: 20:38
            let _21: &mut S<fn()>;       // in scope 4 at ui/consts/const-vec-of-fns.rs:20:13: 20:20
            scope 5 {
                debug closure => _21;    // in scope 5 at ui/consts/const-vec-of-fns.rs:20:13: 20:20
                let _22: &mut fn();      // in scope 5 at ui/consts/const-vec-of-fns.rs:21:19: 21:34
                scope 6 {
                    debug closure => _22; // in scope 6 at ui/consts/const-vec-of-fns.rs:21:19: 21:34
                }
            }
        }
    }

    bb0: {
        _3 = const {alloc1: &&[fn()]};   // scope 1 at ui/consts/const-vec-of-fns.rs:19:25: 19:33
                                         // mir::Constant
                                         // + span: ui/consts/const-vec-of-fns.rs:19:25: 19:33
                                         // + literal: Const { ty: &&[fn()], val: Value(Scalar(alloc1)) }
        _2 = (*_3);                      // scope 1 at ui/consts/const-vec-of-fns.rs:19:25: 19:33
        _1 = <&[fn()] as IntoIterator>::into_iter(move _2) -> bb1; // scope 1 at ui/consts/const-vec-of-fns.rs:19:25: 19:33
                                         // mir::Constant
                                         // + span: ui/consts/const-vec-of-fns.rs:19:25: 19:33
                                         // + literal: Const { ty: fn(&[fn()]) -> <&[fn()] as IntoIterator>::IntoIter {<&[fn()] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = move _1;                    // scope 1 at ui/consts/const-vec-of-fns.rs:19:25: 19:33
        goto -> bb2;                     // scope 2 at ui/consts/const-vec-of-fns.rs:19:9: 19:47
    }

    bb2: {
        _8 = &mut _4;                    // scope 2 at ui/consts/const-vec-of-fns.rs:19:25: 19:33
        _7 = &mut (*_8);                 // scope 2 at ui/consts/const-vec-of-fns.rs:19:25: 19:33
        _6 = <std::slice::Iter<'_, fn()> as Iterator>::next(move _7) -> bb3; // scope 2 at ui/consts/const-vec-of-fns.rs:19:25: 19:33
                                         // mir::Constant
                                         // + span: ui/consts/const-vec-of-fns.rs:19:25: 19:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, fn()>) -> Option<<std::slice::Iter<'_, fn()> as Iterator>::Item> {<std::slice::Iter<'_, fn()> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = discriminant(_6);           // scope 2 at ui/consts/const-vec-of-fns.rs:19:25: 19:33
        switchInt(move _9) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 2 at ui/consts/const-vec-of-fns.rs:19:25: 19:33
    }

    bb4: {
        _24 = deref_copy ((_6 as Some).0: &fn()); // scope 2 at ui/consts/const-vec-of-fns.rs:19:14: 19:21
        _10 = (*_24);                    // scope 2 at ui/consts/const-vec-of-fns.rs:19:14: 19:21
        _11 = _10;                       // scope 3 at ui/consts/const-vec-of-fns.rs:19:36: 19:43
        _5 = move _11() -> bb2;          // scope 3 at ui/consts/const-vec-of-fns.rs:19:36: 19:45
    }

    bb5: {
        unreachable;                     // scope 2 at ui/consts/const-vec-of-fns.rs:19:25: 19:33
    }

    bb6: {
        _14 = const {alloc2: *mut &mut [S<fn()>]}; // scope 1 at ui/consts/const-vec-of-fns.rs:20:30: 20:38
                                         // mir::Constant
                                         // + span: ui/consts/const-vec-of-fns.rs:20:30: 20:38
                                         // + literal: Const { ty: *mut &mut [S<fn()>], val: Value(Scalar(alloc2)) }
        _25 = deref_copy (*_14);         // scope 1 at ui/consts/const-vec-of-fns.rs:20:24: 20:38
        _13 = &mut (*_25);               // scope 1 at ui/consts/const-vec-of-fns.rs:20:24: 20:38
        _12 = <&mut [S<fn()>] as IntoIterator>::into_iter(move _13) -> bb7; // scope 1 at ui/consts/const-vec-of-fns.rs:20:24: 20:38
                                         // mir::Constant
                                         // + span: ui/consts/const-vec-of-fns.rs:20:24: 20:38
                                         // + literal: Const { ty: fn(&mut [S<fn()>]) -> <&mut [S<fn()>] as IntoIterator>::IntoIter {<&mut [S<fn()>] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb7: {
        _15 = move _12;                  // scope 1 at ui/consts/const-vec-of-fns.rs:20:24: 20:38
        goto -> bb8;                     // scope 4 at ui/consts/const-vec-of-fns.rs:20:9: 23:10
    }

    bb8: {
        _19 = &mut _15;                  // scope 4 at ui/consts/const-vec-of-fns.rs:20:24: 20:38
        _18 = &mut (*_19);               // scope 4 at ui/consts/const-vec-of-fns.rs:20:24: 20:38
        _17 = <std::slice::IterMut<'_, S<fn()>> as Iterator>::next(move _18) -> bb9; // scope 4 at ui/consts/const-vec-of-fns.rs:20:24: 20:38
                                         // mir::Constant
                                         // + span: ui/consts/const-vec-of-fns.rs:20:24: 20:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::IterMut<'_, S<fn()>>) -> Option<<std::slice::IterMut<'_, S<fn()>> as Iterator>::Item> {<std::slice::IterMut<'_, S<fn()>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb9: {
        _20 = discriminant(_17);         // scope 4 at ui/consts/const-vec-of-fns.rs:20:24: 20:38
        switchInt(move _20) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 4 at ui/consts/const-vec-of-fns.rs:20:24: 20:38
    }

    bb10: {
        _21 = move ((_17 as Some).0: &mut S<fn()>); // scope 4 at ui/consts/const-vec-of-fns.rs:20:13: 20:20
        _22 = &mut ((*_21).0: fn());     // scope 5 at ui/consts/const-vec-of-fns.rs:21:19: 21:34
        _23 = (*_22);                    // scope 6 at ui/consts/const-vec-of-fns.rs:22:13: 22:23
        _16 = move _23() -> bb8;         // scope 6 at ui/consts/const-vec-of-fns.rs:22:13: 22:25
    }

    bb11: {
        unreachable;                     // scope 4 at ui/consts/const-vec-of-fns.rs:20:24: 20:38
    }

    bb12: {
        return;                          // scope 0 at ui/consts/const-vec-of-fns.rs:25:2: 25:2
    }
}

alloc2 (static: closures, size: 16, align: 8) {
    ╾───────alloc10───────╼ 02 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc10 (size: 16, align: 8) {
    ╾───────alloc5────────╼ ╾───────alloc5────────╼ │ ╾──────╼╾──────╼
}

alloc5 (fn: f)

alloc1 (static: bare_fns, size: 16, align: 8) {
    ╾───────alloc6────────╼ 02 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc6 (size: 16, align: 8) {
    ╾───────alloc5────────╼ ╾───────alloc5────────╼ │ ╾──────╼╾──────╼
}

fn S(_1: F) -> S<F> {
    let mut _0: S<F>;                    // return place in scope 0 at ui/consts/const-vec-of-fns.rs:14:1: 14:22

    bb0: {
        _0 = S::<F>(move _1);            // scope 0 at ui/consts/const-vec-of-fns.rs:14:1: 14:22
        return;                          // scope 0 at ui/consts/const-vec-of-fns.rs:14:1: 14:22
    }
}

// MIR FOR CTFE
fn S(_1: F) -> S<F> {
    let mut _0: S<F>;                    // return place in scope 0 at ui/consts/const-vec-of-fns.rs:14:1: 14:22

    bb0: {
        _0 = S::<F>(move _1);            // scope 0 at ui/consts/const-vec-of-fns.rs:14:1: 14:22
        return;                          // scope 0 at ui/consts/const-vec-of-fns.rs:14:1: 14:22
    }
}
