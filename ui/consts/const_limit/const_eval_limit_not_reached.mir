// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const X: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_limit/const_eval_limit_not_reached.rs:9:10: 9:15
    let mut _1: usize;                   // in scope 0 at ui/consts/const_limit/const_eval_limit_not_reached.rs:10:9: 10:14
    let _2: ();                          // in scope 0 at ui/consts/const_limit/const_eval_limit_not_reached.rs:11:5: 13:6
    let mut _3: ();                      // in scope 0 at ui/consts/const_limit/const_eval_limit_not_reached.rs:9:1: 16:3
    let mut _4: bool;                    // in scope 0 at ui/consts/const_limit/const_eval_limit_not_reached.rs:11:11: 11:20
    let mut _5: usize;                   // in scope 0 at ui/consts/const_limit/const_eval_limit_not_reached.rs:11:11: 11:12
    let mut _6: (usize, bool);           // in scope 0 at ui/consts/const_limit/const_eval_limit_not_reached.rs:12:9: 12:15
    let mut _7: !;                       // in scope 0 at ui/consts/const_limit/const_eval_limit_not_reached.rs:11:5: 13:6
    let _8: ();                          // in scope 0 at ui/consts/const_limit/const_eval_limit_not_reached.rs:11:5: 13:6
    let mut _9: !;                       // in scope 0 at ui/consts/const_limit/const_eval_limit_not_reached.rs:11:5: 13:6
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/const_limit/const_eval_limit_not_reached.rs:10:9: 10:14
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_limit/const_eval_limit_not_reached.rs:10:9: 10:14
        _1 = const 0_usize;              // scope 0 at ui/consts/const_limit/const_eval_limit_not_reached.rs:10:17: 10:18
        StorageLive(_2);                 // scope 1 at ui/consts/const_limit/const_eval_limit_not_reached.rs:11:5: 13:6
        goto -> bb1;                     // scope 1 at ui/consts/const_limit/const_eval_limit_not_reached.rs:11:5: 13:6
    }

    bb1: {
        StorageLive(_4);                 // scope 1 at ui/consts/const_limit/const_eval_limit_not_reached.rs:11:11: 11:20
        StorageLive(_5);                 // scope 1 at ui/consts/const_limit/const_eval_limit_not_reached.rs:11:11: 11:12
        _5 = _1;                         // scope 1 at ui/consts/const_limit/const_eval_limit_not_reached.rs:11:11: 11:12
        _4 = Ne(move _5, const 1000_usize); // scope 1 at ui/consts/const_limit/const_eval_limit_not_reached.rs:11:11: 11:20
        StorageDead(_5);                 // scope 1 at ui/consts/const_limit/const_eval_limit_not_reached.rs:11:19: 11:20
        switchInt(move _4) -> [0: bb4, otherwise: bb2]; // scope 1 at ui/consts/const_limit/const_eval_limit_not_reached.rs:11:11: 11:20
    }

    bb2: {
        _6 = CheckedAdd(_1, const 1_usize); // scope 1 at ui/consts/const_limit/const_eval_limit_not_reached.rs:12:9: 12:15
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_usize) -> bb3; // scope 1 at ui/consts/const_limit/const_eval_limit_not_reached.rs:12:9: 12:15
    }

    bb3: {
        _1 = move (_6.0: usize);         // scope 1 at ui/consts/const_limit/const_eval_limit_not_reached.rs:12:9: 12:15
        _3 = const ();                   // scope 1 at ui/consts/const_limit/const_eval_limit_not_reached.rs:11:21: 13:6
        StorageDead(_4);                 // scope 1 at ui/consts/const_limit/const_eval_limit_not_reached.rs:13:5: 13:6
        ConstEvalCounter;                // scope 1 at ui/consts/const_limit/const_eval_limit_not_reached.rs:11:5: 13:6
        goto -> bb1;                     // scope 1 at ui/consts/const_limit/const_eval_limit_not_reached.rs:11:5: 13:6
    }

    bb4: {
        StorageLive(_8);                 // scope 1 at ui/consts/const_limit/const_eval_limit_not_reached.rs:11:5: 13:6
        _2 = const ();                   // scope 1 at ui/consts/const_limit/const_eval_limit_not_reached.rs:11:5: 13:6
        StorageDead(_8);                 // scope 1 at ui/consts/const_limit/const_eval_limit_not_reached.rs:13:5: 13:6
        StorageDead(_4);                 // scope 1 at ui/consts/const_limit/const_eval_limit_not_reached.rs:13:5: 13:6
        StorageDead(_2);                 // scope 1 at ui/consts/const_limit/const_eval_limit_not_reached.rs:13:5: 13:6
        _0 = _1;                         // scope 1 at ui/consts/const_limit/const_eval_limit_not_reached.rs:15:5: 15:6
        StorageDead(_1);                 // scope 0 at ui/consts/const_limit/const_eval_limit_not_reached.rs:16:1: 16:2
        return;                          // scope 0 at ui/consts/const_limit/const_eval_limit_not_reached.rs:9:1: 16:3
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_limit/const_eval_limit_not_reached.rs:18:11: 18:11
    let mut _1: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _5: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _8: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _4;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _5;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _6: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _6;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _8 = const _;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[1])) }
        _2 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _7 = const _;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _7;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _4 = (_1.0: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _5 = (_1.1: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        return;                          // scope 0 at ui/consts/const_limit/const_eval_limit_not_reached.rs:20:2: 20:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/consts/const_limit/const_eval_limit_not_reached.rs:19:19: 19:23

    bb0: {
        _1 = const 1000_usize;           // scope 0 at ui/consts/const_limit/const_eval_limit_not_reached.rs:19:19: 19:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/consts/const_limit/const_eval_limit_not_reached.rs:19:16: 19:17

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_limit/const_eval_limit_not_reached.rs:19:16: 19:17
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}
