// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const-fn-method.rs:5:1: 5:9>::new() -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo { value: const 22_u32 };
        return;
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/const-fn-method.rs:5:1: 5:9>::new() -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo { value: const 22_u32 };
        return;
    }
}

const FOO: Foo = {
    let mut _0: Foo;

    bb0: {
        ConstEvalCounter;
        _0 = Foo::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u32, &u32);
    let mut _2: &u32;
    let _3: &u32;
    let _4: &u32;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: u32;
    let mut _8: u32;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _12: &u32;
    let mut _13: &Foo;
    scope 1 {
        debug left_val => _3;
        debug right_val => _4;
        let _9: core::panicking::AssertKind;
        scope 2 {
            debug kind => _9;
        }
    }
    scope 3 {
    }

    bb0: {
        _13 = const _;
        _2 = &((*_13).0: u32);
        _12 = const _;
        _1 = (move _2, _12);
        _3 = (_1.0: &u32);
        _4 = (_1.1: &u32);
        _7 = (*_3);
        _8 = (*_4);
        _6 = Eq(move _7, move _8);
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<u32, u32>(move _9, _3, _4, move _11) -> unwind continue;
    }

    bb2: {
        return;
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 22_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 22_usize;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: u32;
    let mut _2: Foo;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        ConstEvalCounter;
        _2 = Foo::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = (_2.0: u32);
        _0 = move _1 as usize (IntToInt);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
