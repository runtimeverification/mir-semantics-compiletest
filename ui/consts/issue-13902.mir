// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const JSVAL_TAG_CLEAR: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/issue-13902.rs:5:24: 5:27

    bb0: {
        _0 = const 4294967168_u32;       // scope 0 at ui/consts/issue-13902.rs:5:30: 5:40
        return;                          // scope 0 at ui/consts/issue-13902.rs:5:1: 5:41
    }
}

const JSVAL_TYPE_INT32: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/consts/issue-13902.rs:6:25: 6:27

    bb0: {
        _0 = const 1_u8;                 // scope 0 at ui/consts/issue-13902.rs:6:30: 6:34
        return;                          // scope 0 at ui/consts/issue-13902.rs:6:1: 6:35
    }
}

const JSVAL_TYPE_UNDEFINED: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/consts/issue-13902.rs:7:29: 7:31

    bb0: {
        _0 = const 2_u8;                 // scope 0 at ui/consts/issue-13902.rs:7:34: 7:38
        return;                          // scope 0 at ui/consts/issue-13902.rs:7:1: 7:39
    }
}

ValueTag::JSVAL_TAG_INT32::{constant#0}: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/issue-13902.rs:10:23: 10:66
    let mut _1: u32;                     // in scope 0 at ui/consts/issue-13902.rs:10:41: 10:66

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/issue-13902.rs:10:41: 10:66
        _1 = const _ as u32 (IntToInt);  // scope 0 at ui/consts/issue-13902.rs:10:41: 10:66
        _0 = BitOr(const _, move _1);    // scope 0 at ui/consts/issue-13902.rs:10:23: 10:66
        StorageDead(_1);                 // scope 0 at ui/consts/issue-13902.rs:10:65: 10:66
        return;                          // scope 0 at ui/consts/issue-13902.rs:10:23: 10:66
    }
}

ValueTag::JSVAL_TAG_UNDEFINED::{constant#0}: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/issue-13902.rs:11:27: 11:74
    let mut _1: u32;                     // in scope 0 at ui/consts/issue-13902.rs:11:45: 11:74

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/issue-13902.rs:11:45: 11:74
        _1 = const _ as u32 (IntToInt);  // scope 0 at ui/consts/issue-13902.rs:11:45: 11:74
        _0 = BitOr(const _, move _1);    // scope 0 at ui/consts/issue-13902.rs:11:27: 11:74
        StorageDead(_1);                 // scope 0 at ui/consts/issue-13902.rs:11:73: 11:74
        return;                          // scope 0 at ui/consts/issue-13902.rs:11:27: 11:74
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-13902.rs:14:11: 14:11
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/consts/issue-13902.rs:16:2: 16:2
    }
}
