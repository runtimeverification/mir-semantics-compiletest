// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const A: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_let_assign.rs:5:10: 5:12
    let mut _1: S;                       // in scope 0 at ui/consts/const_let_assign.rs:6:9: 6:14
    scope 1 {
        debug s => _1;                   // in scope 1 at ui/consts/const_let_assign.rs:6:9: 6:14
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_let_assign.rs:6:9: 6:14
        _1 = S(const 0_i32);             // scope 0 at ui/consts/const_let_assign.rs:6:17: 6:21
        (_1.0: i32) = const 1_i32;       // scope 1 at ui/consts/const_let_assign.rs:7:5: 7:12
        _0 = const ();                   // scope 0 at ui/consts/const_let_assign.rs:5:15: 8:2
        StorageDead(_1);                 // scope 0 at ui/consts/const_let_assign.rs:8:1: 8:2
        return;                          // scope 0 at ui/consts/const_let_assign.rs:5:1: 8:3
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_let_assign.rs:10:11: 10:11

    bb0: {
        return;                          // scope 0 at ui/consts/const_let_assign.rs:10:13: 10:13
    }
}

fn S(_1: i32) -> S {
    let mut _0: S;                       // return place in scope 0 at ui/consts/const_let_assign.rs:3:1: 3:9

    bb0: {
        _0 = S(move _1);                 // scope 0 at ui/consts/const_let_assign.rs:3:1: 3:9
        return;                          // scope 0 at ui/consts/const_let_assign.rs:3:1: 3:9
    }
}

// MIR FOR CTFE
fn S(_1: i32) -> S {
    let mut _0: S;                       // return place in scope 0 at ui/consts/const_let_assign.rs:3:1: 3:9

    bb0: {
        _0 = S(move _1);                 // scope 0 at ui/consts/const_let_assign.rs:3:1: 3:9
        return;                          // scope 0 at ui/consts/const_let_assign.rs:3:1: 3:9
    }
}
