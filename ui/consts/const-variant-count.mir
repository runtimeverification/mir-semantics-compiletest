// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const TEST_VOID: usize = {
    let mut _0: usize;

    bb0: {
        ConstEvalCounter;
        _0 = std::mem::variant_count::<Void>() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const TEST_FOO: usize = {
    let mut _0: usize;

    bb0: {
        ConstEvalCounter;
        _0 = std::mem::variant_count::<Foo>() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const TEST_BAR: usize = {
    let mut _0: usize;

    bb0: {
        ConstEvalCounter;
        _0 = std::mem::variant_count::<Bar>() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const NO_ICE_STRUCT: usize = {
    let mut _0: usize;

    bb0: {
        ConstEvalCounter;
        _0 = std::mem::variant_count::<Baz>() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const NO_ICE_BOOL: usize = {
    let mut _0: usize;

    bb0: {
        ConstEvalCounter;
        _0 = std::mem::variant_count::<bool>() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const NO_ICE_PRIM: usize = {
    let mut _0: usize;

    bb0: {
        ConstEvalCounter;
        _0 = std::mem::variant_count::<*const u8>() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let _2: &usize;
    let _3: &usize;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&usize, &usize);
    let _12: &usize;
    let _13: &usize;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: usize;
    let mut _17: usize;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&usize, &usize);
    let _22: &usize;
    let _23: &usize;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: usize;
    let mut _27: usize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&usize, &usize);
    let mut _32: &usize;
    let _33: usize;
    let _34: &usize;
    let _35: &usize;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: usize;
    let mut _39: usize;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&usize, &usize);
    let mut _44: &usize;
    let _45: usize;
    let _46: &usize;
    let _47: &usize;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: usize;
    let mut _51: usize;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _55: (&usize, &usize);
    let mut _56: &usize;
    let _57: usize;
    let _58: &usize;
    let _59: &usize;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: usize;
    let mut _63: usize;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: (&usize, &usize);
    let mut _68: &usize;
    let _69: usize;
    let _70: &usize;
    let _71: &usize;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: usize;
    let mut _75: usize;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _79: (&usize, &usize);
    let mut _80: &usize;
    let _81: usize;
    let _82: &usize;
    let _83: &usize;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: usize;
    let mut _87: usize;
    let _89: !;
    let mut _90: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _91: (&usize, &usize);
    let mut _92: &usize;
    let _93: usize;
    let _94: &usize;
    let _95: &usize;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: usize;
    let mut _99: usize;
    let _101: !;
    let mut _102: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _103: &usize;
    let mut _104: &usize;
    let mut _105: &usize;
    let mut _106: &usize;
    let mut _107: &usize;
    let mut _108: &usize;
    let mut _109: &usize;
    let mut _110: &usize;
    let mut _111: &usize;
    let mut _112: &usize;
    let mut _113: &usize;
    let mut _114: &usize;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _12;
        debug right_val => _13;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 6 {
            debug kind => _28;
        }
    }
    scope 7 {
        debug left_val => _34;
        debug right_val => _35;
        let _40: core::panicking::AssertKind;
        scope 8 {
            debug kind => _40;
        }
    }
    scope 9 {
        debug left_val => _46;
        debug right_val => _47;
        let _52: core::panicking::AssertKind;
        scope 10 {
            debug kind => _52;
        }
    }
    scope 11 {
        debug left_val => _58;
        debug right_val => _59;
        let _64: core::panicking::AssertKind;
        scope 12 {
            debug kind => _64;
        }
    }
    scope 13 {
        debug left_val => _70;
        debug right_val => _71;
        let _76: core::panicking::AssertKind;
        scope 14 {
            debug kind => _76;
        }
    }
    scope 15 {
        debug left_val => _82;
        debug right_val => _83;
        let _88: core::panicking::AssertKind;
        scope 16 {
            debug kind => _88;
        }
    }
    scope 17 {
        debug left_val => _94;
        debug right_val => _95;
        let _100: core::panicking::AssertKind;
        scope 18 {
            debug kind => _100;
        }
    }

    bb0: {
        _114 = const _;
        _113 = const _;
        _1 = (_114, _113);
        _2 = (_1.0: &usize);
        _3 = (_1.1: &usize);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<usize, usize>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        _112 = const _;
        _111 = const _;
        _11 = (_112, _111);
        _12 = (_11.0: &usize);
        _13 = (_11.1: &usize);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<usize, usize>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb4: {
        _110 = const _;
        _109 = const _;
        _21 = (_110, _109);
        _22 = (_21.0: &usize);
        _23 = (_21.1: &usize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<usize, usize>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb6: {
        _33 = std::mem::variant_count::<Void>() -> [return: bb7, unwind continue];
    }

    bb7: {
        _32 = &_33;
        _108 = const _;
        _31 = (move _32, _108);
        _34 = (_31.0: &usize);
        _35 = (_31.1: &usize);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<usize, usize>(move _40, _34, _35, move _42) -> unwind continue;
    }

    bb9: {
        _45 = std::mem::variant_count::<Foo>() -> [return: bb10, unwind continue];
    }

    bb10: {
        _44 = &_45;
        _107 = const _;
        _43 = (move _44, _107);
        _46 = (_43.0: &usize);
        _47 = (_43.1: &usize);
        _50 = (*_46);
        _51 = (*_47);
        _49 = Eq(move _50, move _51);
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<usize, usize>(move _52, _46, _47, move _54) -> unwind continue;
    }

    bb12: {
        _57 = std::mem::variant_count::<Bar>() -> [return: bb13, unwind continue];
    }

    bb13: {
        _56 = &_57;
        _106 = const _;
        _55 = (move _56, _106);
        _58 = (_55.0: &usize);
        _59 = (_55.1: &usize);
        _62 = (*_58);
        _63 = (*_59);
        _61 = Eq(move _62, move _63);
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<usize, usize>(move _64, _58, _59, move _66) -> unwind continue;
    }

    bb15: {
        _69 = std::mem::variant_count::<Option<char>>() -> [return: bb16, unwind continue];
    }

    bb16: {
        _68 = &_69;
        _105 = const _;
        _67 = (move _68, _105);
        _70 = (_67.0: &usize);
        _71 = (_67.1: &usize);
        _74 = (*_70);
        _75 = (*_71);
        _73 = Eq(move _74, move _75);
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<usize, usize>(move _76, _70, _71, move _78) -> unwind continue;
    }

    bb18: {
        _81 = std::mem::variant_count::<Option<!>>() -> [return: bb19, unwind continue];
    }

    bb19: {
        _80 = &_81;
        _104 = const _;
        _79 = (move _80, _104);
        _82 = (_79.0: &usize);
        _83 = (_79.1: &usize);
        _86 = (*_82);
        _87 = (*_83);
        _85 = Eq(move _86, move _87);
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _88 = core::panicking::AssertKind::Eq;
        _90 = Option::<Arguments<'_>>::None;
        _89 = core::panicking::assert_failed::<usize, usize>(move _88, _82, _83, move _90) -> unwind continue;
    }

    bb21: {
        _93 = std::mem::variant_count::<Result<!, !>>() -> [return: bb22, unwind continue];
    }

    bb22: {
        _92 = &_93;
        _103 = const _;
        _91 = (move _92, _103);
        _94 = (_91.0: &usize);
        _95 = (_91.1: &usize);
        _98 = (*_94);
        _99 = (*_95);
        _97 = Eq(move _98, move _99);
        _96 = Not(move _97);
        switchInt(move _96) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _100 = core::panicking::AssertKind::Eq;
        _102 = Option::<Arguments<'_>>::None;
        _101 = core::panicking::assert_failed::<usize, usize>(move _100, _94, _95, move _102) -> unwind continue;
    }

    bb24: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 5_usize;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 5_usize;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

fn Bar::D(_1: usize) -> Bar {
    let mut _0: Bar;

    bb0: {
        _0 = Bar::D(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Bar::D(_1: usize) -> Bar {
    let mut _0: Bar;

    bb0: {
        _0 = Bar::D(move _1);
        return;
    }
}
