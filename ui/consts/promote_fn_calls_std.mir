// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    scope 1 {
        debug x => const _;
        scope 2 {
            debug x => const _;
            scope 3 {
                debug x => const _;
                scope 4 {
                    debug x => const _;
                    scope 5 {
                        debug x => const _;
                        scope 6 {
                            debug x => const _;
                            scope 7 {
                                debug x => const _;
                                scope 8 {
                                    debug x => const _;
                                    scope 9 {
                                        debug x => const _;
                                        scope 10 {
                                            debug x => const _;
                                            scope 11 {
                                                debug x => const _;
                                                scope 12 {
                                                    debug x => const _;
                                                    scope 13 {
                                                        debug x => const _;
                                                        scope 14 {
                                                            debug x => const _;
                                                            scope 15 {
                                                                debug x => const _;
                                                                scope 16 {
                                                                    debug x => const _;
                                                                    scope 17 {
                                                                        debug x => const _;
                                                                        scope 18 {
                                                                            debug x => const _;
                                                                            scope 19 {
                                                                                debug x => const _;
                                                                                scope 20 {
                                                                                    debug x => const _;
                                                                                    scope 21 {
                                                                                        debug x => const _;
                                                                                        scope 22 {
                                                                                            debug x => const _;
                                                                                            scope 23 {
                                                                                                debug x => const _;
                                                                                                scope 24 {
                                                                                                    debug x => const _;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = core::num::<impl isize>::min_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = core::num::<impl i128>::min_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = core::num::<impl i64>::min_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = core::num::<impl i32>::min_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = core::num::<impl i16>::min_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = core::num::<impl i8>::min_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = core::num::<impl isize>::max_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = core::num::<impl i128>::max_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = core::num::<impl i64>::max_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = core::num::<impl i32>::max_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = core::num::<impl i16>::max_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = core::num::<impl i8>::max_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = core::num::<impl usize>::min_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = core::num::<impl u128>::min_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = core::num::<impl u64>::min_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = core::num::<impl u32>::min_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = core::num::<impl u16>::min_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = core::num::<impl u8>::min_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = core::num::<impl usize>::max_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = core::num::<impl u128>::max_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = core::num::<impl u64>::max_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = core::num::<impl u32>::max_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = core::num::<impl u16>::max_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = core::num::<impl u8>::max_value() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}
