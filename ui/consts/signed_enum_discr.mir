// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
A::B::{constant#0}: i8 = {
    let mut _0: i8;                      // return place in scope 0 at ui/consts/signed_enum_discr.rs:8:9: 8:11

    bb0: {
        _0 = const -1_i8;                // scope 0 at ui/consts/signed_enum_discr.rs:8:9: 8:11
        return;                          // scope 0 at ui/consts/signed_enum_discr.rs:8:9: 8:11
    }
}

A::C::{constant#0}: i8 = {
    let mut _0: i8;                      // return place in scope 0 at ui/consts/signed_enum_discr.rs:9:9: 9:10

    bb0: {
        _0 = const 1_i8;                 // scope 0 at ui/consts/signed_enum_discr.rs:9:9: 9:10
        return;                          // scope 0 at ui/consts/signed_enum_discr.rs:9:9: 9:10
    }
}

fn <impl at ui/consts/signed_enum_discr.rs:5:10: 5:12>::assert_receiver_is_total_eq(_1: &A) -> () {
    debug self => _1;                    // in scope 0 at ui/consts/signed_enum_discr.rs:5:10: 5:12
    let mut _0: ();                      // return place in scope 0 at ui/consts/signed_enum_discr.rs:5:10: 5:12

    bb0: {
        return;                          // scope 0 at ui/consts/signed_enum_discr.rs:5:12: 5:12
    }
}

fn <impl at ui/consts/signed_enum_discr.rs:5:14: 5:23>::eq(_1: &A, _2: &A) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/signed_enum_discr.rs:5:14: 5:23
    debug other => _2;                   // in scope 0 at ui/consts/signed_enum_discr.rs:5:14: 5:23
    let mut _0: bool;                    // return place in scope 0 at ui/consts/signed_enum_discr.rs:5:14: 5:23
    let _3: i8;                          // in scope 0 at ui/consts/signed_enum_discr.rs:5:14: 5:23
    let mut _4: &A;                      // in scope 0 at ui/consts/signed_enum_discr.rs:5:14: 5:23
    let mut _6: &A;                      // in scope 0 at ui/consts/signed_enum_discr.rs:5:14: 5:23
    let mut _7: i8;                      // in scope 0 at ui/consts/signed_enum_discr.rs:5:14: 5:23
    let mut _8: i8;                      // in scope 0 at ui/consts/signed_enum_discr.rs:5:14: 5:23
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/consts/signed_enum_discr.rs:5:14: 5:23
        let _5: i8;                      // in scope 1 at ui/consts/signed_enum_discr.rs:5:14: 5:23
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/consts/signed_enum_discr.rs:5:14: 5:23
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/consts/signed_enum_discr.rs:5:14: 5:23
        _3 = discriminant((*_4));        // scope 0 at ui/consts/signed_enum_discr.rs:5:14: 5:23
        _6 = _2;                         // scope 1 at ui/consts/signed_enum_discr.rs:5:14: 5:23
        _5 = discriminant((*_6));        // scope 1 at ui/consts/signed_enum_discr.rs:5:14: 5:23
        _7 = _3;                         // scope 2 at ui/consts/signed_enum_discr.rs:5:14: 5:23
        _8 = _5;                         // scope 2 at ui/consts/signed_enum_discr.rs:5:14: 5:23
        _0 = Eq(move _7, move _8);       // scope 2 at ui/consts/signed_enum_discr.rs:5:14: 5:23
        return;                          // scope 0 at ui/consts/signed_enum_discr.rs:5:23: 5:23
    }
}

const D: A = {
    let mut _0: A;                       // return place in scope 0 at ui/consts/signed_enum_discr.rs:12:14: 12:15

    bb0: {
        _0 = A::B;                       // scope 0 at ui/consts/signed_enum_discr.rs:12:18: 12:22
        return;                          // scope 0 at ui/consts/signed_enum_discr.rs:12:1: 12:23
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/signed_enum_discr.rs:14:11: 14:11

    bb0: {
        return;                          // scope 0 at ui/consts/signed_enum_discr.rs:19:2: 19:2
    }
}
