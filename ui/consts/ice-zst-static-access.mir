// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/ice-zst-static-access.rs:8:16: 8:21>::clone(_1: &Glfw) -> Glfw {
    debug self => _1;                    // in scope 0 at ui/consts/ice-zst-static-access.rs:8:16: 8:21
    let mut _0: Glfw;                    // return place in scope 0 at ui/consts/ice-zst-static-access.rs:8:16: 8:21

    bb0: {
        return;                          // scope 0 at ui/consts/ice-zst-static-access.rs:8:21: 8:21
    }
}

static mut GLFW: Option<Glfw> = {
    let mut _0: std::option::Option<Glfw>; // return place in scope 0 at ui/consts/ice-zst-static-access.rs:11:18: 11:30

    bb0: {
        _0 = Option::<Glfw>::None;       // scope 0 at ui/consts/ice-zst-static-access.rs:11:33: 11:37
        return;                          // scope 0 at ui/consts/ice-zst-static-access.rs:11:1: 11:38
    }
}

fn new() -> Glfw {
    let mut _0: Glfw;                    // return place in scope 0 at ui/consts/ice-zst-static-access.rs:12:17: 12:21
    let mut _1: *mut std::option::Option<Glfw>; // in scope 0 at ui/consts/ice-zst-static-access.rs:14:29: 14:33
    let mut _2: isize;                   // in scope 0 at ui/consts/ice-zst-static-access.rs:14:16: 14:26
    let mut _4: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
    scope 1 {
        scope 2 {
            debug glfw => _3;            // in scope 2 at ui/consts/ice-zst-static-access.rs:14:21: 14:25
            let _3: Glfw;                // in scope 2 at ui/consts/ice-zst-static-access.rs:14:21: 14:25
        }
    }

    bb0: {
        _1 = const {alloc1: *mut Option<Glfw>}; // scope 2 at ui/consts/ice-zst-static-access.rs:14:29: 14:33
                                         // mir::Constant
                                         // + span: ui/consts/ice-zst-static-access.rs:14:29: 14:33
                                         // + literal: Const { ty: *mut Option<Glfw>, val: Value(Scalar(alloc1)) }
        _2 = discriminant((*_1));        // scope 2 at ui/consts/ice-zst-static-access.rs:14:16: 14:26
        switchInt(move _2) -> [1: bb1, otherwise: bb2]; // scope 2 at ui/consts/ice-zst-static-access.rs:14:16: 14:26
    }

    bb1: {
        return;                          // scope 0 at ui/consts/ice-zst-static-access.rs:20:2: 20:2
    }

    bb2: {
        _4 = core::panicking::panic(const "not yet implemented"); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

alloc1 (static: GLFW, size: 1, align: 1) {
    00                                              â”‚ .
}

_dispatch_queue_attr_concurrent::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/ice-zst-static-access.rs:23:50: 23:51

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/ice-zst-static-access.rs:23:50: 23:51
        return;                          // scope 0 at ui/consts/ice-zst-static-access.rs:23:50: 23:51
    }
}

static DISPATCH_QUEUE_CONCURRENT: &[u8; 0] = {
    let mut _0: &[u8; 0];                // return place in scope 0 at ui/consts/ice-zst-static-access.rs:26:35: 26:51
    let _1: &[u8; 0];                    // in scope 0 at ui/consts/ice-zst-static-access.rs:27:14: 27:46
    let _2: *const [u8; 0];              // in scope 0 at ui/consts/ice-zst-static-access.rs:27:15: 27:46
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/ice-zst-static-access.rs:27:14: 27:46
        StorageLive(_2);                 // scope 1 at ui/consts/ice-zst-static-access.rs:27:15: 27:46
        _2 = const {alloc2: *const [u8; 0]}; // scope 1 at ui/consts/ice-zst-static-access.rs:27:15: 27:46
                                         // mir::Constant
                                         // + span: ui/consts/ice-zst-static-access.rs:27:15: 27:46
                                         // + literal: Const { ty: *const [u8; 0], val: Value(Scalar(alloc2)) }
        _1 = &(*_2);                     // scope 1 at ui/consts/ice-zst-static-access.rs:27:14: 27:46
        _0 = &(*_1);                     // scope 1 at ui/consts/ice-zst-static-access.rs:27:14: 27:46
        StorageDead(_1);                 // scope 0 at ui/consts/ice-zst-static-access.rs:27:47: 27:48
        return;                          // scope 0 at ui/consts/ice-zst-static-access.rs:26:1: 27:49
    }
}

alloc2 (extern static: _dispatch_queue_attr_concurrent)

DISPATCH_QUEUE_CONCURRENT::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/ice-zst-static-access.rs:26:49: 26:50

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/ice-zst-static-access.rs:26:49: 26:50
        return;                          // scope 0 at ui/consts/ice-zst-static-access.rs:26:49: 26:50
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/ice-zst-static-access.rs:29:11: 29:11
    let _1: Glfw;                        // in scope 0 at ui/consts/ice-zst-static-access.rs:31:5: 31:10

    bb0: {
        _1 = new() -> bb1;               // scope 0 at ui/consts/ice-zst-static-access.rs:31:5: 31:10
                                         // mir::Constant
                                         // + span: ui/consts/ice-zst-static-access.rs:31:5: 31:8
                                         // + literal: Const { ty: fn() -> Glfw {new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/ice-zst-static-access.rs:32:2: 32:2
    }
}
