// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Big::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 8_usize;
        return;
    }
}

const x: &[u64; 8] = {
    let mut _0: &[u64; 8];
    let _1: &[u64; 8];
    let _2: [u64; 8];
    let mut _3: &[u64; 8];

    bb0: {
        StorageLive(_1);
        _3 = const _;
        _1 = &(*_3);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in x: &[u64; 8] = {
    let mut _0: &[u64; 8];
    let mut _1: [u64; 8];

    bb0: {
        _1 = [const 13_u64, const 14_u64, const 10_u64, const 13_u64, const 11_u64, const 14_u64, const 14_u64, const 15_u64];
        _0 = &_1;
        return;
    }
}

const y: &Pair<'_> = {
    let mut _0: &Pair<'_>;
    let _1: &Pair<'_>;
    let _2: Pair<'_>;
    let mut _3: &[u64; 8];
    let _4: &[u64; 8];
    let mut _5: &Pair<'_>;

    bb0: {
        StorageLive(_1);
        _5 = const _;
        _1 = &(*_5);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in y: &Pair<'_> = {
    let mut _0: &Pair<'_>;
    let mut _1: Pair<'_>;
    let mut _2: &[u64; 8];
    let mut _3: &[u64; 8];

    bb0: {
        _3 = const _;
        _2 = &(*_3);
        _1 = Pair::<'_> { a: const 15_isize, b: move _2 };
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&*const [u64; 8], &*const [u64; 8]);
    let mut _2: &*const [u64; 8];
    let _3: *const [u64; 8];
    let _4: &Pair<'_>;
    let _5: &*const [u64; 8];
    let _6: &*const [u64; 8];
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: *const [u64; 8];
    let mut _10: *const [u64; 8];
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: &*const [u64; 8];
    let mut _15: &[u64; 8];
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }

    bb0: {
        _14 = const _;
        _4 = const _;
        _15 = deref_copy ((*_4).1: &[u64; 8]);
        _3 = &raw const (*_15);
        _2 = &_3;
        _1 = (_14, move _2);
        _5 = (_1.0: &*const [u64; 8]);
        _6 = (_1.1: &*const [u64; 8]);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<*const [u64; 8], *const [u64; 8]>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb2: {
        return;
    }
}

promoted[0] in main: &*const [u64; 8] = {
    let mut _0: &*const [u64; 8];
    let mut _1: *const [u64; 8];
    let mut _2: &[u64; 8];

    bb0: {
        _2 = const _;
        _1 = &raw const (*_2);
        _0 = &_1;
        return;
    }
}
