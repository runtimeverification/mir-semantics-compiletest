// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Big::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-region-ptrs-noncopy.rs:5:18: 5:19

    bb0: {
        _0 = const 8_usize;              // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:5:18: 5:19
        return;                          // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:5:18: 5:19
    }
}

const x: &[u64; 8] = {
    let mut _0: &[u64; 8];               // return place in scope 0 at ui/consts/const-region-ptrs-noncopy.rs:7:10: 7:22
    let _1: &[u64; 8];                   // in scope 0 at ui/consts/const-region-ptrs-noncopy.rs:7:25: 7:60
    let _2: [u64; 8];                    // in scope 0 at ui/consts/const-region-ptrs-noncopy.rs:7:26: 7:60
    let mut _3: &[u64; 8];               // in scope 0 at ui/consts/const-region-ptrs-noncopy.rs:7:25: 7:60

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:7:25: 7:60
        _3 = const _;                    // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:7:25: 7:60
                                         // mir::Constant
                                         // + span: ui/consts/const-region-ptrs-noncopy.rs:7:25: 7:60
                                         // + literal: Const { ty: &[u64; 8], val: Unevaluated(x, [], Some(promoted[0])) }
        _1 = &(*_3);                     // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:7:25: 7:60
        _0 = &(*_1);                     // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:7:25: 7:60
        StorageDead(_1);                 // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:7:59: 7:60
        return;                          // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:7:1: 7:61
    }
}

promoted[0] in x: &[u64; 8] = {
    let mut _0: &[u64; 8];               // return place in scope 0 at ui/consts/const-region-ptrs-noncopy.rs:7:25: 7:60
    let mut _1: [u64; 8];                // in scope 0 at ui/consts/const-region-ptrs-noncopy.rs:7:26: 7:60

    bb0: {
        _1 = [const 13_u64, const 14_u64, const 10_u64, const 13_u64, const 11_u64, const 14_u64, const 14_u64, const 15_u64]; // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:7:26: 7:60
        _0 = &_1;                        // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:7:25: 7:60
        return;                          // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:7:25: 7:60
    }
}

const y: &Pair<'_> = {
    let mut _0: &Pair<'_>;               // return place in scope 0 at ui/consts/const-region-ptrs-noncopy.rs:8:10: 8:32
    let _1: &Pair<'_>;                   // in scope 0 at ui/consts/const-region-ptrs-noncopy.rs:8:35: 8:54
    let _2: Pair<'_>;                    // in scope 0 at ui/consts/const-region-ptrs-noncopy.rs:8:36: 8:54
    let mut _3: &[u64; 8];               // in scope 0 at ui/consts/const-region-ptrs-noncopy.rs:8:52: 8:53
    let _4: &[u64; 8];                   // in scope 0 at ui/consts/const-region-ptrs-noncopy.rs:8:52: 8:53
    let mut _5: &Pair<'_>;               // in scope 0 at ui/consts/const-region-ptrs-noncopy.rs:8:35: 8:54

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:8:35: 8:54
        _5 = const _;                    // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:8:35: 8:54
                                         // mir::Constant
                                         // + span: ui/consts/const-region-ptrs-noncopy.rs:8:35: 8:54
                                         // + literal: Const { ty: &Pair<'_>, val: Unevaluated(y, [], Some(promoted[0])) }
        _1 = &(*_5);                     // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:8:35: 8:54
        _0 = &(*_1);                     // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:8:35: 8:54
        StorageDead(_1);                 // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:8:53: 8:54
        return;                          // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:8:1: 8:55
    }
}

promoted[0] in y: &Pair<'_> = {
    let mut _0: &Pair<'_>;               // return place in scope 0 at ui/consts/const-region-ptrs-noncopy.rs:8:35: 8:54
    let mut _1: Pair<'_>;                // in scope 0 at ui/consts/const-region-ptrs-noncopy.rs:8:36: 8:54
    let mut _2: &[u64; 8];               // in scope 0 at ui/consts/const-region-ptrs-noncopy.rs:8:52: 8:53
    let mut _3: &[u64; 8];               // in scope 0 at ui/consts/const-region-ptrs-noncopy.rs:8:52: 8:53

    bb0: {
        _3 = const _;                    // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:8:52: 8:53
                                         // mir::Constant
                                         // + span: ui/consts/const-region-ptrs-noncopy.rs:8:52: 8:53
                                         // + literal: Const { ty: &[u64; 8], val: Unevaluated(x, [], None) }
        _2 = &(*_3);                     // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:8:52: 8:53
        _1 = Pair::<'_> { a: const 15_isize, b: move _2 }; // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:8:36: 8:54
        _0 = &_1;                        // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:8:35: 8:54
        return;                          // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:8:35: 8:54
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-region-ptrs-noncopy.rs:10:15: 10:15
    let mut _1: (&*const [u64; 8], &*const [u64; 8]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &*const [u64; 8];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &*const [u64; 8];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: *const [u64; 8];             // in scope 0 at ui/consts/const-region-ptrs-noncopy.rs:11:33: 11:50
    let _5: &Pair<'_>;                   // in scope 0 at ui/consts/const-region-ptrs-noncopy.rs:11:33: 11:34
    let _6: &*const [u64; 8];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _7: &*const [u64; 8];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: *const [u64; 8];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: *const [u64; 8];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &*const [u64; 8];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &*const [u64; 8];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &*const [u64; 8];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &*const [u64; 8];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _20: &*const [u64; 8];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _21: &[u64; 8];              // in scope 0 at ui/consts/const-region-ptrs-noncopy.rs:11:33: 11:34
    scope 1 {
        debug left_val => _6;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _7;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _12: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _12;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _20 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &*const [u64; 8], val: Unevaluated(main, [], Some(promoted[0])) }
        _2 = _20;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _5 = const _;                    // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:11:33: 11:34
                                         // mir::Constant
                                         // + span: ui/consts/const-region-ptrs-noncopy.rs:11:33: 11:34
                                         // + literal: Const { ty: &Pair<'_>, val: Unevaluated(y, [], None) }
        _21 = deref_copy ((*_5).1: &[u64; 8]); // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:11:33: 11:36
        _4 = &raw const (*_21);          // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:11:33: 11:36
        _3 = &_4;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_1.0: &*const [u64; 8]);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_1.1: &*const [u64; 8]);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = (*_6);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = (*_7);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = Eq(move _10, move _11);     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _8 = Not(move _9);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb2, otherwise: bb1]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _12 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<*const [u64; 8], *const [u64; 8]>(move _14, move _15, move _17, move _19); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a *const [u64; 8], &'b *const [u64; 8], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<*const [u64; 8], *const [u64; 8]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:12:2: 12:2
    }
}

promoted[0] in main: &*const [u64; 8] = {
    let mut _0: &*const [u64; 8];        // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: *const [u64; 8];         // in scope 0 at ui/consts/const-region-ptrs-noncopy.rs:11:16: 11:31
    let mut _2: &[u64; 8];               // in scope 0 at ui/consts/const-region-ptrs-noncopy.rs:11:16: 11:17

    bb0: {
        _2 = const _;                    // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:11:16: 11:17
                                         // mir::Constant
                                         // + span: ui/consts/const-region-ptrs-noncopy.rs:11:16: 11:17
                                         // + literal: Const { ty: &[u64; 8], val: Unevaluated(x, [], None) }
        _1 = &raw const (*_2);           // scope 0 at ui/consts/const-region-ptrs-noncopy.rs:11:16: 11:17
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}
