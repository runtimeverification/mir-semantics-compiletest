// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const <impl at ui/consts/assoc-const.rs:11:1: 11:18>::VALUE: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/assoc-const.rs:12:18: 12:23

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/assoc-const.rs:12:26: 12:27
        return;                          // scope 0 at ui/consts/assoc-const.rs:12:5: 12:28
    }
}

const <impl at ui/consts/assoc-const.rs:15:1: 15:29>::VALUE: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/assoc-const.rs:16:18: 16:23
    let mut _1: (usize, bool);           // in scope 0 at ui/consts/assoc-const.rs:16:26: 16:38

    bb0: {
        _1 = CheckedAdd(const _, const 1_usize); // scope 0 at ui/consts/assoc-const.rs:16:26: 16:38
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_usize) -> bb1; // scope 0 at ui/consts/assoc-const.rs:16:26: 16:38
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/consts/assoc-const.rs:16:26: 16:38
        return;                          // scope 0 at ui/consts/assoc-const.rs:16:5: 16:39
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/assoc-const.rs:19:11: 19:11
    let _1: [i32; 4];                    // in scope 0 at ui/consts/assoc-const.rs:20:9: 20:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/assoc-const.rs:20:9: 20:10
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]; // scope 0 at ui/consts/assoc-const.rs:20:59: 20:71
        return;                          // scope 0 at ui/consts/assoc-const.rs:21:2: 21:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/assoc-const.rs:20:18: 20:55

    bb0: {
        _0 = const _;                    // scope 0 at ui/consts/assoc-const.rs:20:18: 20:55
        return;                          // scope 0 at ui/consts/assoc-const.rs:20:18: 20:55
    }
}

fn Succ(_1: N) -> Succ<N> {
    let mut _0: Succ<N>;                 // return place in scope 0 at ui/consts/assoc-const.rs:9:1: 9:15

    bb0: {
        _0 = Succ::<N>(move _1);         // scope 0 at ui/consts/assoc-const.rs:9:1: 9:15
        return;                          // scope 0 at ui/consts/assoc-const.rs:9:1: 9:15
    }
}

// MIR FOR CTFE
fn Succ(_1: N) -> Succ<N> {
    let mut _0: Succ<N>;                 // return place in scope 0 at ui/consts/assoc-const.rs:9:1: 9:15

    bb0: {
        _0 = Succ::<N>(move _1);         // scope 0 at ui/consts/assoc-const.rs:9:1: 9:15
        return;                          // scope 0 at ui/consts/assoc-const.rs:9:1: 9:15
    }
}
