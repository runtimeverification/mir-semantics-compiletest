// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: &[i32];
    let mut _2: usize;
    let mut _3: usize;
    let mut _4: bool;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let _8: &[i32];
    let _9: &i32;
    let mut _10: &[i32; 2];
    scope 1 {
        debug a => _8;
        debug x => _9;
    }

    bb0: {
        _10 = const _;
        _1 = _10 as &[i32] (Pointer(Unsize));
        _5 = Len((*_1));
        _6 = const 1_usize;
        _7 = Ge(move _5, move _6);
        switchInt(move _7) -> [0: bb1, otherwise: bb3];
    }

    bb1: {
        _2 = Len((*_1));
        _3 = const 0_usize;
        _4 = Eq(move _2, move _3);
        switchInt(move _4) -> [0: bb2, otherwise: bb4];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _8 = &(*_1)[:-1];
        _9 = &(*_1)[-1 of 1];
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];
    let mut _1: [i32; 2];

    bb0: {
        _1 = [const 0_i32, const 1_i32];
        _0 = &_1;
        return;
    }
}
