// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_prop_slice_pat_ice.rs:3:11: 3:11
    let mut _1: &[i32];                  // in scope 0 at ui/consts/const_prop_slice_pat_ice.rs:4:11: 4:28
    let mut _2: &[i32; 2];               // in scope 0 at ui/consts/const_prop_slice_pat_ice.rs:4:11: 4:18
    let _3: &[i32; 2];                   // in scope 0 at ui/consts/const_prop_slice_pat_ice.rs:4:11: 4:18
    let _4: &[i32];                      // in scope 0 at ui/consts/const_prop_slice_pat_ice.rs:5:10: 5:11
    let _5: &i32;                        // in scope 0 at ui/consts/const_prop_slice_pat_ice.rs:5:18: 5:19
    let mut _6: &[i32; 2];               // in scope 0 at ui/consts/const_prop_slice_pat_ice.rs:4:11: 4:18
    scope 1 {
        debug a => _4;                   // in scope 1 at ui/consts/const_prop_slice_pat_ice.rs:5:10: 5:11
        debug x => _5;                   // in scope 1 at ui/consts/const_prop_slice_pat_ice.rs:5:18: 5:19
    }

    bb0: {
        _6 = const _;                    // scope 0 at ui/consts/const_prop_slice_pat_ice.rs:4:11: 4:18
                                         // mir::Constant
                                         // + span: ui/consts/const_prop_slice_pat_ice.rs:4:11: 4:18
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _6;                         // scope 0 at ui/consts/const_prop_slice_pat_ice.rs:4:11: 4:18
        _2 = _3;                         // scope 0 at ui/consts/const_prop_slice_pat_ice.rs:4:11: 4:18
        _1 = move _2 as &[i32] (Pointer(Unsize)); // scope 0 at ui/consts/const_prop_slice_pat_ice.rs:4:11: 4:18
        _4 = &(*_1)[:-1];                // scope 0 at ui/consts/const_prop_slice_pat_ice.rs:5:10: 5:11
        _5 = &(*_1)[-1 of 1];            // scope 0 at ui/consts/const_prop_slice_pat_ice.rs:5:18: 5:19
        return;                          // scope 0 at ui/consts/const_prop_slice_pat_ice.rs:8:2: 8:2
    }
}

promoted[0] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];               // return place in scope 0 at ui/consts/const_prop_slice_pat_ice.rs:4:11: 4:18
    let mut _1: [i32; 2];                // in scope 0 at ui/consts/const_prop_slice_pat_ice.rs:4:12: 4:18

    bb0: {
        _1 = [const 0_i32, const 1_i32]; // scope 0 at ui/consts/const_prop_slice_pat_ice.rs:4:12: 4:18
        _0 = &_1;                        // scope 0 at ui/consts/const_prop_slice_pat_ice.rs:4:11: 4:18
        return;                          // scope 0 at ui/consts/const_prop_slice_pat_ice.rs:4:11: 4:18
    }
}
