// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const ADD_A: (u32, bool) = {
    let mut _0: (u32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::overflowing_add(const 5_u32, const 2_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const ADD_B: (u32, bool) = {
    let mut _0: (u32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::overflowing_add(const _, const 1_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const SUB_A: (u32, bool) = {
    let mut _0: (u32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::overflowing_sub(const 5_u32, const 2_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const SUB_B: (u32, bool) = {
    let mut _0: (u32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::overflowing_sub(const 0_u32, const 1_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const MUL_A: (u32, bool) = {
    let mut _0: (u32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::overflowing_mul(const 5_u32, const 2_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const MUL_B: (u32, bool) = {
    let mut _0: (u32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::overflowing_mul(const 1000000000_u32, const 10_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const SHL_A: (u32, bool) = {
    let mut _0: (u32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::overflowing_shl(const 1_u32, const 4_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const SHL_B: (u32, bool) = {
    let mut _0: (u32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::overflowing_shl(const 1_u32, const 132_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const SHR_A: (u32, bool) = {
    let mut _0: (u32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::overflowing_shr(const 16_u32, const 4_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const SHR_B: (u32, bool) = {
    let mut _0: (u32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::overflowing_shr(const 16_u32, const 132_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const NEG_A: (u32, bool) = {
    let mut _0: (u32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::overflowing_neg(const 0_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const NEG_B: (u32, bool) = {
    let mut _0: (u32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::overflowing_neg(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const ABS_POS: (i32, bool) = {
    let mut _0: (i32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::overflowing_abs(const 10_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const ABS_NEG: (i32, bool) = {
    let mut _0: (i32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::overflowing_abs(const -10_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const ABS_MIN: (i32, bool) = {
    let mut _0: (i32, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::overflowing_abs(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&(u32, bool), &(u32, bool));
    let _2: &(u32, bool);
    let _3: &(u32, bool);
    let mut _4: bool;
    let mut _5: bool;
    let _7: !;
    let mut _8: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _9: (&(u32, bool), &(u32, bool));
    let _10: &(u32, bool);
    let _11: &(u32, bool);
    let mut _12: bool;
    let mut _13: bool;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&(u32, bool), &(u32, bool));
    let _18: &(u32, bool);
    let _19: &(u32, bool);
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&(u32, bool), &(u32, bool));
    let _26: &(u32, bool);
    let _27: &(u32, bool);
    let mut _28: bool;
    let mut _29: bool;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: (&(u32, bool), &(u32, bool));
    let _34: &(u32, bool);
    let _35: &(u32, bool);
    let mut _36: bool;
    let mut _37: bool;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&(u32, bool), &(u32, bool));
    let _42: &(u32, bool);
    let _43: &(u32, bool);
    let mut _44: bool;
    let mut _45: bool;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&(u32, bool), &(u32, bool));
    let _50: &(u32, bool);
    let _51: &(u32, bool);
    let mut _52: bool;
    let mut _53: bool;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: (&(u32, bool), &(u32, bool));
    let _58: &(u32, bool);
    let _59: &(u32, bool);
    let mut _60: bool;
    let mut _61: bool;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: (&(u32, bool), &(u32, bool));
    let _66: &(u32, bool);
    let _67: &(u32, bool);
    let mut _68: bool;
    let mut _69: bool;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&(u32, bool), &(u32, bool));
    let _74: &(u32, bool);
    let _75: &(u32, bool);
    let mut _76: bool;
    let mut _77: bool;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _81: (&(u32, bool), &(u32, bool));
    let _82: &(u32, bool);
    let _83: &(u32, bool);
    let mut _84: bool;
    let mut _85: bool;
    let _87: !;
    let mut _88: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _89: (&(u32, bool), &(u32, bool));
    let _90: &(u32, bool);
    let _91: &(u32, bool);
    let mut _92: bool;
    let mut _93: bool;
    let _95: !;
    let mut _96: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _97: (&(i32, bool), &(i32, bool));
    let _98: &(i32, bool);
    let _99: &(i32, bool);
    let mut _100: bool;
    let mut _101: bool;
    let _103: !;
    let mut _104: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _105: (&(i32, bool), &(i32, bool));
    let _106: &(i32, bool);
    let _107: &(i32, bool);
    let mut _108: bool;
    let mut _109: bool;
    let _111: !;
    let mut _112: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _113: (&(i32, bool), &(i32, bool));
    let _114: &(i32, bool);
    let _115: &(i32, bool);
    let mut _116: bool;
    let mut _117: bool;
    let _119: !;
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _121: &(i32, bool);
    let mut _122: &(i32, bool);
    let mut _123: &(i32, bool);
    let mut _124: &(i32, bool);
    let mut _125: &(i32, bool);
    let mut _126: &(i32, bool);
    let mut _127: &(u32, bool);
    let mut _128: &(u32, bool);
    let mut _129: &(u32, bool);
    let mut _130: &(u32, bool);
    let mut _131: &(u32, bool);
    let mut _132: &(u32, bool);
    let mut _133: &(u32, bool);
    let mut _134: &(u32, bool);
    let mut _135: &(u32, bool);
    let mut _136: &(u32, bool);
    let mut _137: &(u32, bool);
    let mut _138: &(u32, bool);
    let mut _139: &(u32, bool);
    let mut _140: &(u32, bool);
    let mut _141: &(u32, bool);
    let mut _142: &(u32, bool);
    let mut _143: &(u32, bool);
    let mut _144: &(u32, bool);
    let mut _145: &(u32, bool);
    let mut _146: &(u32, bool);
    let mut _147: &(u32, bool);
    let mut _148: &(u32, bool);
    let mut _149: &(u32, bool);
    let mut _150: &(u32, bool);
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _6: core::panicking::AssertKind;
        scope 2 {
            debug kind => _6;
        }
    }
    scope 3 {
        debug left_val => _10;
        debug right_val => _11;
        let _14: core::panicking::AssertKind;
        scope 4 {
            debug kind => _14;
        }
    }
    scope 5 {
        debug left_val => _18;
        debug right_val => _19;
        let _22: core::panicking::AssertKind;
        scope 6 {
            debug kind => _22;
        }
    }
    scope 7 {
        debug left_val => _26;
        debug right_val => _27;
        let _30: core::panicking::AssertKind;
        scope 8 {
            debug kind => _30;
        }
    }
    scope 9 {
        debug left_val => _34;
        debug right_val => _35;
        let _38: core::panicking::AssertKind;
        scope 10 {
            debug kind => _38;
        }
    }
    scope 11 {
        debug left_val => _42;
        debug right_val => _43;
        let _46: core::panicking::AssertKind;
        scope 12 {
            debug kind => _46;
        }
    }
    scope 13 {
        debug left_val => _50;
        debug right_val => _51;
        let _54: core::panicking::AssertKind;
        scope 14 {
            debug kind => _54;
        }
    }
    scope 15 {
        debug left_val => _58;
        debug right_val => _59;
        let _62: core::panicking::AssertKind;
        scope 16 {
            debug kind => _62;
        }
    }
    scope 17 {
        debug left_val => _66;
        debug right_val => _67;
        let _70: core::panicking::AssertKind;
        scope 18 {
            debug kind => _70;
        }
    }
    scope 19 {
        debug left_val => _74;
        debug right_val => _75;
        let _78: core::panicking::AssertKind;
        scope 20 {
            debug kind => _78;
        }
    }
    scope 21 {
        debug left_val => _82;
        debug right_val => _83;
        let _86: core::panicking::AssertKind;
        scope 22 {
            debug kind => _86;
        }
    }
    scope 23 {
        debug left_val => _90;
        debug right_val => _91;
        let _94: core::panicking::AssertKind;
        scope 24 {
            debug kind => _94;
        }
    }
    scope 25 {
        debug left_val => _98;
        debug right_val => _99;
        let _102: core::panicking::AssertKind;
        scope 26 {
            debug kind => _102;
        }
    }
    scope 27 {
        debug left_val => _106;
        debug right_val => _107;
        let _110: core::panicking::AssertKind;
        scope 28 {
            debug kind => _110;
        }
    }
    scope 29 {
        debug left_val => _114;
        debug right_val => _115;
        let _118: core::panicking::AssertKind;
        scope 30 {
            debug kind => _118;
        }
    }

    bb0: {
        _150 = const _;
        _149 = const _;
        _1 = (_150, _149);
        _2 = (_1.0: &(u32, bool));
        _3 = (_1.1: &(u32, bool));
        _5 = <(u32, bool) as PartialEq>::eq(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = core::panicking::AssertKind::Eq;
        _8 = Option::<Arguments<'_>>::None;
        _7 = core::panicking::assert_failed::<(u32, bool), (u32, bool)>(move _6, _2, _3, move _8) -> unwind continue;
    }

    bb3: {
        _148 = const _;
        _147 = const _;
        _9 = (_148, _147);
        _10 = (_9.0: &(u32, bool));
        _11 = (_9.1: &(u32, bool));
        _13 = <(u32, bool) as PartialEq>::eq(_10, _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<(u32, bool), (u32, bool)>(move _14, _10, _11, move _16) -> unwind continue;
    }

    bb6: {
        _146 = const _;
        _145 = const _;
        _17 = (_146, _145);
        _18 = (_17.0: &(u32, bool));
        _19 = (_17.1: &(u32, bool));
        _21 = <(u32, bool) as PartialEq>::eq(_18, _19) -> [return: bb7, unwind continue];
    }

    bb7: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<(u32, bool), (u32, bool)>(move _22, _18, _19, move _24) -> unwind continue;
    }

    bb9: {
        _144 = const _;
        _143 = const _;
        _25 = (_144, _143);
        _26 = (_25.0: &(u32, bool));
        _27 = (_25.1: &(u32, bool));
        _29 = <(u32, bool) as PartialEq>::eq(_26, _27) -> [return: bb10, unwind continue];
    }

    bb10: {
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<(u32, bool), (u32, bool)>(move _30, _26, _27, move _32) -> unwind continue;
    }

    bb12: {
        _142 = const _;
        _141 = const _;
        _33 = (_142, _141);
        _34 = (_33.0: &(u32, bool));
        _35 = (_33.1: &(u32, bool));
        _37 = <(u32, bool) as PartialEq>::eq(_34, _35) -> [return: bb13, unwind continue];
    }

    bb13: {
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<(u32, bool), (u32, bool)>(move _38, _34, _35, move _40) -> unwind continue;
    }

    bb15: {
        _140 = const _;
        _139 = const _;
        _41 = (_140, _139);
        _42 = (_41.0: &(u32, bool));
        _43 = (_41.1: &(u32, bool));
        _45 = <(u32, bool) as PartialEq>::eq(_42, _43) -> [return: bb16, unwind continue];
    }

    bb16: {
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<(u32, bool), (u32, bool)>(move _46, _42, _43, move _48) -> unwind continue;
    }

    bb18: {
        _138 = const _;
        _137 = const _;
        _49 = (_138, _137);
        _50 = (_49.0: &(u32, bool));
        _51 = (_49.1: &(u32, bool));
        _53 = <(u32, bool) as PartialEq>::eq(_50, _51) -> [return: bb19, unwind continue];
    }

    bb19: {
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<(u32, bool), (u32, bool)>(move _54, _50, _51, move _56) -> unwind continue;
    }

    bb21: {
        _136 = const _;
        _135 = const _;
        _57 = (_136, _135);
        _58 = (_57.0: &(u32, bool));
        _59 = (_57.1: &(u32, bool));
        _61 = <(u32, bool) as PartialEq>::eq(_58, _59) -> [return: bb22, unwind continue];
    }

    bb22: {
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<(u32, bool), (u32, bool)>(move _62, _58, _59, move _64) -> unwind continue;
    }

    bb24: {
        _134 = const _;
        _133 = const _;
        _65 = (_134, _133);
        _66 = (_65.0: &(u32, bool));
        _67 = (_65.1: &(u32, bool));
        _69 = <(u32, bool) as PartialEq>::eq(_66, _67) -> [return: bb25, unwind continue];
    }

    bb25: {
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<(u32, bool), (u32, bool)>(move _70, _66, _67, move _72) -> unwind continue;
    }

    bb27: {
        _132 = const _;
        _131 = const _;
        _73 = (_132, _131);
        _74 = (_73.0: &(u32, bool));
        _75 = (_73.1: &(u32, bool));
        _77 = <(u32, bool) as PartialEq>::eq(_74, _75) -> [return: bb28, unwind continue];
    }

    bb28: {
        _76 = Not(move _77);
        switchInt(move _76) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<(u32, bool), (u32, bool)>(move _78, _74, _75, move _80) -> unwind continue;
    }

    bb30: {
        _130 = const _;
        _129 = const _;
        _81 = (_130, _129);
        _82 = (_81.0: &(u32, bool));
        _83 = (_81.1: &(u32, bool));
        _85 = <(u32, bool) as PartialEq>::eq(_82, _83) -> [return: bb31, unwind continue];
    }

    bb31: {
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _86 = core::panicking::AssertKind::Eq;
        _88 = Option::<Arguments<'_>>::None;
        _87 = core::panicking::assert_failed::<(u32, bool), (u32, bool)>(move _86, _82, _83, move _88) -> unwind continue;
    }

    bb33: {
        _128 = const _;
        _127 = const _;
        _89 = (_128, _127);
        _90 = (_89.0: &(u32, bool));
        _91 = (_89.1: &(u32, bool));
        _93 = <(u32, bool) as PartialEq>::eq(_90, _91) -> [return: bb34, unwind continue];
    }

    bb34: {
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _94 = core::panicking::AssertKind::Eq;
        _96 = Option::<Arguments<'_>>::None;
        _95 = core::panicking::assert_failed::<(u32, bool), (u32, bool)>(move _94, _90, _91, move _96) -> unwind continue;
    }

    bb36: {
        _126 = const _;
        _125 = const _;
        _97 = (_126, _125);
        _98 = (_97.0: &(i32, bool));
        _99 = (_97.1: &(i32, bool));
        _101 = <(i32, bool) as PartialEq>::eq(_98, _99) -> [return: bb37, unwind continue];
    }

    bb37: {
        _100 = Not(move _101);
        switchInt(move _100) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _102 = core::panicking::AssertKind::Eq;
        _104 = Option::<Arguments<'_>>::None;
        _103 = core::panicking::assert_failed::<(i32, bool), (i32, bool)>(move _102, _98, _99, move _104) -> unwind continue;
    }

    bb39: {
        _124 = const _;
        _123 = const _;
        _105 = (_124, _123);
        _106 = (_105.0: &(i32, bool));
        _107 = (_105.1: &(i32, bool));
        _109 = <(i32, bool) as PartialEq>::eq(_106, _107) -> [return: bb40, unwind continue];
    }

    bb40: {
        _108 = Not(move _109);
        switchInt(move _108) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _110 = core::panicking::AssertKind::Eq;
        _112 = Option::<Arguments<'_>>::None;
        _111 = core::panicking::assert_failed::<(i32, bool), (i32, bool)>(move _110, _106, _107, move _112) -> unwind continue;
    }

    bb42: {
        _122 = const _;
        _121 = const _;
        _113 = (_122, _121);
        _114 = (_113.0: &(i32, bool));
        _115 = (_113.1: &(i32, bool));
        _117 = <(i32, bool) as PartialEq>::eq(_114, _115) -> [return: bb43, unwind continue];
    }

    bb43: {
        _116 = Not(move _117);
        switchInt(move _116) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _118 = core::panicking::AssertKind::Eq;
        _120 = Option::<Arguments<'_>>::None;
        _119 = core::panicking::assert_failed::<(i32, bool), (i32, bool)>(move _118, _114, _115, move _120) -> unwind continue;
    }

    bb45: {
        return;
    }
}

promoted[0] in main: &(i32, bool) = {
    let mut _0: &(i32, bool);
    let mut _1: (i32, bool);

    bb0: {
        _1 = (const _, const true);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &(i32, bool) = {
    let mut _0: &(i32, bool);
    let mut _1: (i32, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &(i32, bool) = {
    let mut _0: &(i32, bool);
    let mut _1: (i32, bool);

    bb0: {
        _1 = (const 10_i32, const false);
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &(i32, bool) = {
    let mut _0: &(i32, bool);
    let mut _1: (i32, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &(i32, bool) = {
    let mut _0: &(i32, bool);
    let mut _1: (i32, bool);

    bb0: {
        _1 = (const 10_i32, const false);
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &(i32, bool) = {
    let mut _0: &(i32, bool);
    let mut _1: (i32, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &(u32, bool) = {
    let mut _0: &(u32, bool);
    let mut _1: (u32, bool);

    bb0: {
        _1 = (const 1_u32, const true);
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &(u32, bool) = {
    let mut _0: &(u32, bool);
    let mut _1: (u32, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &(u32, bool) = {
    let mut _0: &(u32, bool);
    let mut _1: (u32, bool);

    bb0: {
        _1 = (const 0_u32, const false);
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &(u32, bool) = {
    let mut _0: &(u32, bool);
    let mut _1: (u32, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &(u32, bool) = {
    let mut _0: &(u32, bool);
    let mut _1: (u32, bool);

    bb0: {
        _1 = (const 1_u32, const true);
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &(u32, bool) = {
    let mut _0: &(u32, bool);
    let mut _1: (u32, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &(u32, bool) = {
    let mut _0: &(u32, bool);
    let mut _1: (u32, bool);

    bb0: {
        _1 = (const 1_u32, const false);
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &(u32, bool) = {
    let mut _0: &(u32, bool);
    let mut _1: (u32, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &(u32, bool) = {
    let mut _0: &(u32, bool);
    let mut _1: (u32, bool);

    bb0: {
        _1 = (const 16_u32, const true);
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &(u32, bool) = {
    let mut _0: &(u32, bool);
    let mut _1: (u32, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &(u32, bool) = {
    let mut _0: &(u32, bool);
    let mut _1: (u32, bool);

    bb0: {
        _1 = (const 16_u32, const false);
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &(u32, bool) = {
    let mut _0: &(u32, bool);
    let mut _1: (u32, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &(u32, bool) = {
    let mut _0: &(u32, bool);
    let mut _1: (u32, bool);

    bb0: {
        _1 = (const 1410065408_u32, const true);
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &(u32, bool) = {
    let mut _0: &(u32, bool);
    let mut _1: (u32, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &(u32, bool) = {
    let mut _0: &(u32, bool);
    let mut _1: (u32, bool);

    bb0: {
        _1 = (const 10_u32, const false);
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &(u32, bool) = {
    let mut _0: &(u32, bool);
    let mut _1: (u32, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &(u32, bool) = {
    let mut _0: &(u32, bool);
    let mut _1: (u32, bool);

    bb0: {
        _1 = (const _, const true);
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &(u32, bool) = {
    let mut _0: &(u32, bool);
    let mut _1: (u32, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[24] in main: &(u32, bool) = {
    let mut _0: &(u32, bool);
    let mut _1: (u32, bool);

    bb0: {
        _1 = (const 3_u32, const false);
        _0 = &_1;
        return;
    }
}

promoted[25] in main: &(u32, bool) = {
    let mut _0: &(u32, bool);
    let mut _1: (u32, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[26] in main: &(u32, bool) = {
    let mut _0: &(u32, bool);
    let mut _1: (u32, bool);

    bb0: {
        _1 = (const 0_u32, const true);
        _0 = &_1;
        return;
    }
}

promoted[27] in main: &(u32, bool) = {
    let mut _0: &(u32, bool);
    let mut _1: (u32, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[28] in main: &(u32, bool) = {
    let mut _0: &(u32, bool);
    let mut _1: (u32, bool);

    bb0: {
        _1 = (const 7_u32, const false);
        _0 = &_1;
        return;
    }
}

promoted[29] in main: &(u32, bool) = {
    let mut _0: &(u32, bool);
    let mut _1: (u32, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}
