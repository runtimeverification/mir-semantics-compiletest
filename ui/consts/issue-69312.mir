// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-69312.rs:7:11: 7:11
    let _1: [u32; 0];                    // in scope 0 at ui/consts/issue-69312.rs:8:9: 8:13
    let _2: usize;                       // in scope 0 at ui/consts/issue-69312.rs:9:10: 9:11
    let mut _3: usize;                   // in scope 0 at ui/consts/issue-69312.rs:9:5: 9:12
    let mut _4: bool;                    // in scope 0 at ui/consts/issue-69312.rs:9:5: 9:12
    scope 1 {
        debug cols => _1;                // in scope 1 at ui/consts/issue-69312.rs:8:9: 8:13
    }

    bb0: {
        _2 = const 0_usize;              // scope 1 at ui/consts/issue-69312.rs:9:10: 9:11
        _3 = const 0_usize;              // scope 1 at ui/consts/issue-69312.rs:9:5: 9:12
        _4 = const false;                // scope 1 at ui/consts/issue-69312.rs:9:5: 9:12
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1; // scope 1 at ui/consts/issue-69312.rs:9:5: 9:12
    }

    bb1: {
        return;                          // scope 0 at ui/consts/issue-69312.rs:10:2: 10:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/issue-69312.rs:8:23: 8:24

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/issue-69312.rs:8:23: 8:24
        return;                          // scope 0 at ui/consts/issue-69312.rs:8:23: 8:24
    }
}
