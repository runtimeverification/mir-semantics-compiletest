// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const _: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_forget.rs:5:10: 5:12

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const_forget.rs:5:15: 5:27
        _0 = std::mem::forget::<i32>(const 0_i32) -> bb1; // scope 0 at ui/consts/const_forget.rs:5:15: 5:27
                                         // mir::Constant
                                         // + span: ui/consts/const_forget.rs:5:15: 5:21
                                         // + literal: Const { ty: fn(i32) {std::mem::forget::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const_forget.rs:5:1: 5:28
    }
}

const _: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_forget.rs:6:10: 6:12
    let mut _1: std::vec::Vec<std::vec::Vec<std::boxed::Box<i32>>>; // in scope 0 at ui/consts/const_forget.rs:6:22: 6:49

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_forget.rs:6:22: 6:49
        ConstEvalCounter;                // scope 0 at ui/consts/const_forget.rs:6:22: 6:49
        _1 = Vec::<Vec<Box<i32>>>::new() -> bb1; // scope 0 at ui/consts/const_forget.rs:6:22: 6:49
                                         // mir::Constant
                                         // + span: ui/consts/const_forget.rs:6:22: 6:47
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<Vec<Box<i32>>> {Vec::<Vec<Box<i32>>>::new}, val: Value(<ZST>) }
    }

    bb1: {
        ConstEvalCounter;                // scope 0 at ui/consts/const_forget.rs:6:15: 6:50
        _0 = std::mem::forget::<Vec<Vec<Box<i32>>>>(move _1) -> [return: bb2, unwind: bb3]; // scope 0 at ui/consts/const_forget.rs:6:15: 6:50
                                         // mir::Constant
                                         // + span: ui/consts/const_forget.rs:6:15: 6:21
                                         // + literal: Const { ty: fn(Vec<Vec<Box<i32>>>) {std::mem::forget::<Vec<Vec<Box<i32>>>>}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_1);                 // scope 0 at ui/consts/const_forget.rs:6:49: 6:50
        return;                          // scope 0 at ui/consts/const_forget.rs:6:1: 6:51
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at ui/consts/const_forget.rs:6:1: 6:51
    }
}

fn const_forget_box(_1: Box<T>) -> () {
    debug b => _1;                       // in scope 0 at ui/consts/const_forget.rs:16:38: 16:39
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_forget.rs:16:49: 16:49
    let _2: ();                          // in scope 0 at ui/consts/const_forget.rs:17:5: 17:14
    let mut _3: std::boxed::Box<T>;      // in scope 0 at ui/consts/const_forget.rs:17:12: 17:13

    bb0: {
        _3 = move _1;                    // scope 0 at ui/consts/const_forget.rs:17:12: 17:13
        _2 = std::mem::forget::<Box<T>>(move _3) -> bb1; // scope 0 at ui/consts/const_forget.rs:17:5: 17:14
                                         // mir::Constant
                                         // + span: ui/consts/const_forget.rs:17:5: 17:11
                                         // + literal: Const { ty: fn(Box<T>) {std::mem::forget::<Box<T>>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const_forget.rs:18:2: 18:2
    }
}

// MIR FOR CTFE
fn const_forget_box(_1: Box<T>) -> () {
    debug b => _1;                       // in scope 0 at ui/consts/const_forget.rs:16:38: 16:39
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_forget.rs:16:49: 16:49
    let _2: ();                          // in scope 0 at ui/consts/const_forget.rs:17:5: 17:14
    let mut _3: std::boxed::Box<T>;      // in scope 0 at ui/consts/const_forget.rs:17:12: 17:13

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const_forget.rs:17:5: 17:14
        StorageLive(_3);                 // scope 0 at ui/consts/const_forget.rs:17:12: 17:13
        _3 = move _1;                    // scope 0 at ui/consts/const_forget.rs:17:12: 17:13
        ConstEvalCounter;                // scope 0 at ui/consts/const_forget.rs:17:5: 17:14
        _2 = std::mem::forget::<Box<T>>(move _3) -> [return: bb1, unwind: bb2]; // scope 0 at ui/consts/const_forget.rs:17:5: 17:14
                                         // mir::Constant
                                         // + span: ui/consts/const_forget.rs:17:5: 17:11
                                         // + literal: Const { ty: fn(Box<T>) {std::mem::forget::<Box<T>>}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at ui/consts/const_forget.rs:17:13: 17:14
        StorageDead(_2);                 // scope 0 at ui/consts/const_forget.rs:17:14: 17:15
        _0 = const ();                   // scope 0 at ui/consts/const_forget.rs:16:49: 18:2
        return;                          // scope 0 at ui/consts/const_forget.rs:18:2: 18:2
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at ui/consts/const_forget.rs:16:1: 18:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_forget.rs:20:11: 20:11

    bb0: {
        return;                          // scope 0 at ui/consts/const_forget.rs:20:13: 20:13
    }
}
