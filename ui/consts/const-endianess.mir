// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const BE_U32: u32 = {
    let mut _0: u32;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::to_be(const 55_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const LE_U32: u32 = {
    let mut _0: u32;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::to_le(const 55_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u32, &u32);
    let mut _2: &u32;
    let _3: u32;
    let mut _4: u32;
    let _5: &u32;
    let _6: &u32;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: u32;
    let mut _10: u32;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&u32, &u32);
    let mut _15: &u32;
    let _16: u32;
    let mut _17: u32;
    let _18: &u32;
    let _19: &u32;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: u32;
    let mut _23: u32;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&u128, &u128);
    let mut _28: &u128;
    let _29: u128;
    let mut _30: u128;
    let _31: &u128;
    let _32: &u128;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: u128;
    let mut _36: u128;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&i128, &i128);
    let mut _41: &i128;
    let _42: i128;
    let mut _43: i128;
    let _44: &i128;
    let _45: &i128;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: i128;
    let mut _49: i128;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: &i128;
    let mut _54: &u128;
    let mut _55: &u32;
    let mut _56: &u32;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }
    scope 5 {
        debug left_val => _31;
        debug right_val => _32;
        let _37: core::panicking::AssertKind;
        scope 6 {
            debug kind => _37;
        }
    }
    scope 7 {
        debug left_val => _44;
        debug right_val => _45;
        let _50: core::panicking::AssertKind;
        scope 8 {
            debug kind => _50;
        }
    }

    bb0: {
        _56 = const _;
        _4 = test::black_box::<u32>(const 55_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = core::num::<impl u32>::to_be(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = &_3;
        _1 = (_56, move _2);
        _5 = (_1.0: &u32);
        _6 = (_1.1: &u32);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<u32, u32>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb4: {
        _55 = const _;
        _17 = test::black_box::<u32>(const 55_u32) -> [return: bb5, unwind continue];
    }

    bb5: {
        _16 = core::num::<impl u32>::to_le(move _17) -> [return: bb6, unwind continue];
    }

    bb6: {
        _15 = &_16;
        _14 = (_55, move _15);
        _18 = (_14.0: &u32);
        _19 = (_14.1: &u32);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<u32, u32>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb8: {
        _54 = const _;
        _30 = test::black_box::<u128>(const 999999_u128) -> [return: bb9, unwind continue];
    }

    bb9: {
        _29 = core::num::<impl u128>::to_be(move _30) -> [return: bb10, unwind continue];
    }

    bb10: {
        _28 = &_29;
        _27 = (_54, move _28);
        _31 = (_27.0: &u128);
        _32 = (_27.1: &u128);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<u128, u128>(move _37, _31, _32, move _39) -> unwind continue;
    }

    bb12: {
        _53 = const _;
        _43 = test::black_box::<i128>(const -999999_i128) -> [return: bb13, unwind continue];
    }

    bb13: {
        _42 = core::num::<impl i128>::to_le(move _43) -> [return: bb14, unwind continue];
    }

    bb14: {
        _41 = &_42;
        _40 = (_53, move _41);
        _44 = (_40.0: &i128);
        _45 = (_40.1: &i128);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<i128, i128>(move _50, _44, _45, move _52) -> unwind continue;
    }

    bb16: {
        return;
    }
}

promoted[0] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u128 = {
    let mut _0: &u128;
    let mut _1: u128;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

const BE_U128: u128 = {
    let mut _0: u128;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u128>::to_be(const 999999_u128) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const LE_I128: i128 = {
    let mut _0: i128;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i128>::to_le(const -999999_i128) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}
