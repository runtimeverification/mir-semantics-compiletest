// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const FOO: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/consts/const-repeated-values.rs:2:12: 2:17

    bb0: {
        _0 = const 42_isize;             // scope 0 at ui/consts/const-repeated-values.rs:2:20: 2:22
        return;                          // scope 0 at ui/consts/const-repeated-values.rs:2:1: 2:23
    }
}

Bar::Boo::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/consts/const-repeated-values.rs:5:11: 5:24
    let mut _1: [&isize; 4];             // in scope 0 at ui/consts/const-repeated-values.rs:5:12: 5:21
    let mut _2: &isize;                  // in scope 0 at ui/consts/const-repeated-values.rs:5:13: 5:17
    let _3: isize;                       // in scope 0 at ui/consts/const-repeated-values.rs:5:14: 5:17
    let _4: usize;                       // in scope 0 at ui/consts/const-repeated-values.rs:5:22: 5:23
    let mut _5: usize;                   // in scope 0 at ui/consts/const-repeated-values.rs:5:12: 5:24
    let mut _6: bool;                    // in scope 0 at ui/consts/const-repeated-values.rs:5:12: 5:24
    let mut _7: &isize;                  // in scope 0 at ui/consts/const-repeated-values.rs:5:13: 5:17
    let mut _8: &isize;                  // in scope 0 at ui/consts/const-repeated-values.rs:5:12: 5:21

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-repeated-values.rs:5:12: 5:21
        StorageLive(_2);                 // scope 0 at ui/consts/const-repeated-values.rs:5:13: 5:17
        _7 = const _;                    // scope 0 at ui/consts/const-repeated-values.rs:5:13: 5:17
                                         // mir::Constant
                                         // + span: ui/consts/const-repeated-values.rs:5:13: 5:17
                                         // + literal: Const { ty: &isize, val: Unevaluated(Bar::Boo::{constant#0}, [], Some(promoted[0])) }
        _2 = &(*_7);                     // scope 0 at ui/consts/const-repeated-values.rs:5:13: 5:17
        _1 = [move _2; 4];               // scope 0 at ui/consts/const-repeated-values.rs:5:12: 5:21
        StorageDead(_2);                 // scope 0 at ui/consts/const-repeated-values.rs:5:20: 5:21
        StorageLive(_4);                 // scope 0 at ui/consts/const-repeated-values.rs:5:22: 5:23
        _4 = const 3_usize;              // scope 0 at ui/consts/const-repeated-values.rs:5:22: 5:23
        _5 = Len(_1);                    // scope 0 at ui/consts/const-repeated-values.rs:5:12: 5:24
        _6 = Lt(_4, _5);                 // scope 0 at ui/consts/const-repeated-values.rs:5:12: 5:24
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _4) -> bb1; // scope 0 at ui/consts/const-repeated-values.rs:5:12: 5:24
    }

    bb1: {
        _8 = deref_copy _1[_4];          // scope 0 at ui/consts/const-repeated-values.rs:5:11: 5:24
        _0 = (*_8);                      // scope 0 at ui/consts/const-repeated-values.rs:5:11: 5:24
        StorageDead(_4);                 // scope 0 at ui/consts/const-repeated-values.rs:5:23: 5:24
        StorageDead(_1);                 // scope 0 at ui/consts/const-repeated-values.rs:5:23: 5:24
        return;                          // scope 0 at ui/consts/const-repeated-values.rs:5:11: 5:24
    }
}

promoted[0] in Bar::Boo::{constant#0}: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at ui/consts/const-repeated-values.rs:5:13: 5:17
    let mut _1: isize;                   // in scope 0 at ui/consts/const-repeated-values.rs:5:14: 5:17

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-repeated-values.rs:5:14: 5:17
        _0 = &_1;                        // scope 0 at ui/consts/const-repeated-values.rs:5:13: 5:17
        return;                          // scope 0 at ui/consts/const-repeated-values.rs:5:13: 5:17
    }
}

Bar::Boo::{constant#0}::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-repeated-values.rs:5:19: 5:20

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/consts/const-repeated-values.rs:5:19: 5:20
        return;                          // scope 0 at ui/consts/const-repeated-values.rs:5:19: 5:20
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-repeated-values.rs:8:11: 8:11
    let mut _1: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: &isize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _5: &isize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _8: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _4;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _5;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _6: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _6;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _8 = const _;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[1])) }
        _2 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _7 = const _;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _7;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _4 = (_1.0: &isize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _5 = (_1.1: &isize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        return;                          // scope 0 at ui/consts/const-repeated-values.rs:10:2: 10:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/consts/const-repeated-values.rs:9:35: 9:37

    bb0: {
        _1 = const 42_isize;             // scope 0 at ui/consts/const-repeated-values.rs:9:35: 9:37
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: isize;                   // in scope 0 at ui/consts/const-repeated-values.rs:9:16: 9:33
    let mut _2: isize;                   // in scope 0 at ui/consts/const-repeated-values.rs:9:16: 9:33
    let mut _3: (isize, bool);           // in scope 0 at ui/consts/const-repeated-values.rs:9:16: 9:33

    bb0: {
        _3 = CheckedAdd(const _, const 0_isize); // scope 0 at ui/consts/const-repeated-values.rs:9:16: 9:33
        _2 = move (_3.0: isize);         // scope 0 at ui/consts/const-repeated-values.rs:9:16: 9:33
        _1 = move _2 as isize (IntToInt); // scope 0 at ui/consts/const-repeated-values.rs:9:16: 9:33
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}
