// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const <impl at ui/consts/issue-58435-ice-with-assoc-const.rs:7:1: 7:13>::ID: for<'a> fn(&'a S<T>) -> &'a S<T> = {
    let mut _0: for<'a> fn(&'a S<T>) -> &'a S<T>; // return place in scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:8:15: 8:33
    let mut _1: [closure@ui/consts/issue-58435-ice-with-assoc-const.rs:8:36: 8:39]; // in scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:8:36: 8:41

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:8:36: 8:41
        _1 = [closure@ui/consts/issue-58435-ice-with-assoc-const.rs:8:36: 8:39]; // scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:8:36: 8:41
                                         // closure
                                         // + def_id: DefId(0:10 ~ issue_58435_ice_with_assoc_const[e9ce]::{impl#0}::ID::{closure#0})
                                         // + substs: [
                                         //     T,
                                         //     i8,
                                         //     for<'a> extern "rust-call" fn((&'a S<T>,)) -> &'a S<T>,
                                         //     (),
                                         // ]
        _0 = move _1 as for<'a> fn(&'a S<T>) -> &'a S<T> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:8:36: 8:41
        StorageDead(_1);                 // scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:8:38: 8:39
        return;                          // scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:8:5: 8:42
    }
}

fn <impl at ui/consts/issue-58435-ice-with-assoc-const.rs:7:1: 7:13>::ID::{closure#0}(_1: &[closure@ui/consts/issue-58435-ice-with-assoc-const.rs:8:36: 8:39], _2: &S<T>) -> &S<T> {
    debug s => _2;                       // in scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:8:37: 8:38
    let mut _0: &S<T>;                   // return place in scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:8:40: 8:40

    bb0: {
        _0 = _2;                         // scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:8:40: 8:41
        return;                          // scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:8:41: 8:41
    }
}

fn <impl at ui/consts/issue-58435-ice-with-assoc-const.rs:7:1: 7:13>::id(_1: &S<T>) -> &S<T> {
    debug self => _1;                    // in scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:9:15: 9:20
    let mut _0: &S<T>;                   // return place in scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:10:9: 10:23
    let mut _2: &S<T>;                   // in scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:10:18: 10:22

    bb0: {
        _2 = _1;                         // scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:10:18: 10:22
        _0 = const _(move _2) -> bb1;    // scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:10:9: 10:23
                                         // mir::Constant
                                         // + span: ui/consts/issue-58435-ice-with-assoc-const.rs:10:9: 10:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a S<T>) -> &'a S<T>, val: Unevaluated(S::<T>::ID, [T], None) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:11:6: 11:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:14:11: 14:11
    let _1: S<u32>;                      // in scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:15:9: 15:10
    let mut _2: bool;                    // in scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:16:5: 16:38
    let mut _3: bool;                    // in scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:16:13: 16:37
    let mut _4: u32;                     // in scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:16:13: 16:31
    let mut _5: &S<u32>;                 // in scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:16:13: 16:29
    let mut _6: &S<u32>;                 // in scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:16:26: 16:28
    let _7: &S<u32>;                     // in scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:16:26: 16:28
    let mut _8: !;                       // in scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:16:5: 16:38
    let mut _9: bool;                    // in scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:17:5: 17:28
    let mut _10: bool;                   // in scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:17:13: 17:27
    let mut _11: u32;                    // in scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:17:13: 17:21
    let mut _12: &S<u32>;                // in scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:17:13: 17:19
    let mut _13: &S<u32>;                // in scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:17:13: 17:19
    let mut _14: !;                      // in scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:17:5: 17:28
    scope 1 {
        debug s => _1;                   // in scope 1 at ui/consts/issue-58435-ice-with-assoc-const.rs:15:9: 15:10
    }

    bb0: {
        _1 = S::<u32>(const 10_u32);     // scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:15:13: 15:21
        _7 = &_1;                        // scope 1 at ui/consts/issue-58435-ice-with-assoc-const.rs:16:26: 16:28
        _6 = _7;                         // scope 1 at ui/consts/issue-58435-ice-with-assoc-const.rs:16:26: 16:28
        _5 = const _(move _6) -> bb1;    // scope 1 at ui/consts/issue-58435-ice-with-assoc-const.rs:16:13: 16:29
                                         // mir::Constant
                                         // + span: ui/consts/issue-58435-ice-with-assoc-const.rs:16:13: 16:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a S<u32>) -> &'a S<u32>, val: Unevaluated(S::<T>::ID, [u32], None) }
    }

    bb1: {
        _4 = ((*_5).0: u32);             // scope 1 at ui/consts/issue-58435-ice-with-assoc-const.rs:16:13: 16:31
        _3 = Eq(move _4, const 10_u32);  // scope 1 at ui/consts/issue-58435-ice-with-assoc-const.rs:16:13: 16:37
        _2 = Not(move _3);               // scope 1 at ui/consts/issue-58435-ice-with-assoc-const.rs:16:5: 16:38
        switchInt(move _2) -> [0: bb3, otherwise: bb2]; // scope 1 at ui/consts/issue-58435-ice-with-assoc-const.rs:16:5: 16:38
    }

    bb2: {
        _8 = core::panicking::panic(const "assertion failed: S::<u32>::ID(&s).0 == 10"); // scope 1 at ui/consts/issue-58435-ice-with-assoc-const.rs:16:5: 16:38
                                         // mir::Constant
                                         // + span: ui/consts/issue-58435-ice-with-assoc-const.rs:16:5: 16:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _13 = &_1;                       // scope 1 at ui/consts/issue-58435-ice-with-assoc-const.rs:17:13: 17:19
        _12 = S::<u32>::id(move _13) -> bb4; // scope 1 at ui/consts/issue-58435-ice-with-assoc-const.rs:17:13: 17:19
                                         // mir::Constant
                                         // + span: ui/consts/issue-58435-ice-with-assoc-const.rs:17:15: 17:17
                                         // + literal: Const { ty: for<'a> fn(&'a S<u32>) -> &'a S<u32> {S::<u32>::id}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = ((*_12).0: u32);           // scope 1 at ui/consts/issue-58435-ice-with-assoc-const.rs:17:13: 17:21
        _10 = Eq(move _11, const 10_u32); // scope 1 at ui/consts/issue-58435-ice-with-assoc-const.rs:17:13: 17:27
        _9 = Not(move _10);              // scope 1 at ui/consts/issue-58435-ice-with-assoc-const.rs:17:5: 17:28
        switchInt(move _9) -> [0: bb6, otherwise: bb5]; // scope 1 at ui/consts/issue-58435-ice-with-assoc-const.rs:17:5: 17:28
    }

    bb5: {
        _14 = core::panicking::panic(const "assertion failed: s.id().0 == 10"); // scope 1 at ui/consts/issue-58435-ice-with-assoc-const.rs:17:5: 17:28
                                         // mir::Constant
                                         // + span: ui/consts/issue-58435-ice-with-assoc-const.rs:17:5: 17:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        return;                          // scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:18:2: 18:2
    }
}

fn S(_1: T) -> S<T> {
    let mut _0: S<T>;                    // return place in scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:5:1: 5:12

    bb0: {
        _0 = S::<T>(move _1);            // scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:5:1: 5:12
        return;                          // scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:5:1: 5:12
    }
}

// MIR FOR CTFE
fn S(_1: T) -> S<T> {
    let mut _0: S<T>;                    // return place in scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:5:1: 5:12

    bb0: {
        _0 = S::<T>(move _1);            // scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:5:1: 5:12
        return;                          // scope 0 at ui/consts/issue-58435-ice-with-assoc-const.rs:5:1: 5:12
    }
}
