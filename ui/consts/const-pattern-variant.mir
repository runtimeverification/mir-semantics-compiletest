// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const-pattern-variant.rs:4:10: 4:19>::eq(_1: &Cake, _2: &Cake) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/const-pattern-variant.rs:4:10: 4:19
    debug other => _2;                   // in scope 0 at ui/consts/const-pattern-variant.rs:4:10: 4:19
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-pattern-variant.rs:4:10: 4:19
    let _3: isize;                       // in scope 0 at ui/consts/const-pattern-variant.rs:4:10: 4:19
    let mut _4: &Cake;                   // in scope 0 at ui/consts/const-pattern-variant.rs:4:10: 4:19
    let mut _6: &Cake;                   // in scope 0 at ui/consts/const-pattern-variant.rs:4:10: 4:19
    let mut _7: isize;                   // in scope 0 at ui/consts/const-pattern-variant.rs:4:10: 4:19
    let mut _8: isize;                   // in scope 0 at ui/consts/const-pattern-variant.rs:4:10: 4:19
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/consts/const-pattern-variant.rs:4:10: 4:19
        let _5: isize;                   // in scope 1 at ui/consts/const-pattern-variant.rs:4:10: 4:19
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/consts/const-pattern-variant.rs:4:10: 4:19
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/consts/const-pattern-variant.rs:4:10: 4:19
        _3 = discriminant((*_4));        // scope 0 at ui/consts/const-pattern-variant.rs:4:10: 4:19
        _6 = _2;                         // scope 1 at ui/consts/const-pattern-variant.rs:4:10: 4:19
        _5 = discriminant((*_6));        // scope 1 at ui/consts/const-pattern-variant.rs:4:10: 4:19
        _7 = _3;                         // scope 2 at ui/consts/const-pattern-variant.rs:4:10: 4:19
        _8 = _5;                         // scope 2 at ui/consts/const-pattern-variant.rs:4:10: 4:19
        _0 = Eq(move _7, move _8);       // scope 2 at ui/consts/const-pattern-variant.rs:4:10: 4:19
        return;                          // scope 0 at ui/consts/const-pattern-variant.rs:4:19: 4:19
    }
}

fn <impl at ui/consts/const-pattern-variant.rs:4:21: 4:23>::assert_receiver_is_total_eq(_1: &Cake) -> () {
    debug self => _1;                    // in scope 0 at ui/consts/const-pattern-variant.rs:4:21: 4:23
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-pattern-variant.rs:4:21: 4:23

    bb0: {
        return;                          // scope 0 at ui/consts/const-pattern-variant.rs:4:23: 4:23
    }
}

const BOO: (Cake, Cake) = {
    let mut _0: (Cake, Cake);            // return place in scope 0 at ui/consts/const-pattern-variant.rs:11:12: 11:24
    let mut _1: Cake;                    // in scope 0 at ui/consts/const-pattern-variant.rs:11:28: 11:34
    let mut _2: Cake;                    // in scope 0 at ui/consts/const-pattern-variant.rs:11:36: 11:47

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-pattern-variant.rs:11:28: 11:34
        _1 = Cake::Marmor;               // scope 0 at ui/consts/const-pattern-variant.rs:11:28: 11:34
        StorageLive(_2);                 // scope 0 at ui/consts/const-pattern-variant.rs:11:36: 11:47
        _2 = Cake::BlackForest;          // scope 0 at ui/consts/const-pattern-variant.rs:11:36: 11:47
        _0 = (move _1, move _2);         // scope 0 at ui/consts/const-pattern-variant.rs:11:27: 11:48
        StorageDead(_2);                 // scope 0 at ui/consts/const-pattern-variant.rs:11:47: 11:48
        StorageDead(_1);                 // scope 0 at ui/consts/const-pattern-variant.rs:11:47: 11:48
        return;                          // scope 0 at ui/consts/const-pattern-variant.rs:11:1: 11:49
    }
}

const FOO: Cake = {
    let mut _0: Cake;                    // return place in scope 0 at ui/consts/const-pattern-variant.rs:12:12: 12:16
    let mut _1: (Cake, Cake);            // in scope 0 at ui/consts/const-pattern-variant.rs:12:19: 12:22

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-pattern-variant.rs:12:19: 12:22
        _1 = const _;                    // scope 0 at ui/consts/const-pattern-variant.rs:12:19: 12:22
                                         // mir::Constant
                                         // + span: ui/consts/const-pattern-variant.rs:12:19: 12:22
                                         // + literal: Const { ty: (Cake, Cake), val: Unevaluated(BOO, [], None) }
        _0 = move (_1.1: Cake);          // scope 0 at ui/consts/const-pattern-variant.rs:12:19: 12:24
        StorageDead(_1);                 // scope 0 at ui/consts/const-pattern-variant.rs:12:23: 12:24
        return;                          // scope 0 at ui/consts/const-pattern-variant.rs:12:1: 12:25
    }
}

fn foo() -> Cake {
    let mut _0: Cake;                    // return place in scope 0 at ui/consts/const-pattern-variant.rs:14:19: 14:23

    bb0: {
        _0 = const Cake::Marmor;         // scope 0 at ui/consts/const-pattern-variant.rs:15:5: 15:11
                                         // mir::Constant
                                         // + span: ui/consts/const-pattern-variant.rs:15:5: 15:11
                                         // + literal: Const { ty: Cake, val: Value(Scalar(0x01)) }
        return;                          // scope 0 at ui/consts/const-pattern-variant.rs:16:2: 16:2
    }
}

// MIR FOR CTFE
fn foo() -> Cake {
    let mut _0: Cake;                    // return place in scope 0 at ui/consts/const-pattern-variant.rs:14:19: 14:23

    bb0: {
        _0 = Cake::Marmor;               // scope 0 at ui/consts/const-pattern-variant.rs:15:5: 15:11
        return;                          // scope 0 at ui/consts/const-pattern-variant.rs:16:2: 16:2
    }
}

const WORKS: Cake = {
    let mut _0: Cake;                    // return place in scope 0 at ui/consts/const-pattern-variant.rs:18:14: 18:18

    bb0: {
        _0 = Cake::Marmor;               // scope 0 at ui/consts/const-pattern-variant.rs:18:21: 18:27
        return;                          // scope 0 at ui/consts/const-pattern-variant.rs:18:1: 18:28
    }
}

const GOO: Cake = {
    let mut _0: Cake;                    // return place in scope 0 at ui/consts/const-pattern-variant.rs:20:12: 20:16

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-pattern-variant.rs:20:19: 20:24
        _0 = foo() -> bb1;               // scope 0 at ui/consts/const-pattern-variant.rs:20:19: 20:24
                                         // mir::Constant
                                         // + span: ui/consts/const-pattern-variant.rs:20:19: 20:22
                                         // + literal: Const { ty: fn() -> Cake {foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-pattern-variant.rs:20:1: 20:25
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-pattern-variant.rs:22:11: 22:11
    let _1: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _3: &[&str];                 // in scope 0 at ui/consts/const-pattern-variant.rs:24:25: 24:29
    let mut _4: &[&str; 1];              // in scope 0 at ui/consts/const-pattern-variant.rs:24:25: 24:29
    let _5: &[&str; 1];                  // in scope 0 at ui/consts/const-pattern-variant.rs:24:25: 24:29
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _8: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _9: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[&str; 1];             // in scope 0 at ui/consts/const-pattern-variant.rs:24:25: 24:29

    bb0: {
        _10 = const _;                   // scope 0 at ui/consts/const-pattern-variant.rs:24:25: 24:29
                                         // mir::Constant
                                         // + span: ui/consts/const-pattern-variant.rs:24:25: 24:29
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[1])) }
        _5 = _10;                        // scope 0 at ui/consts/const-pattern-variant.rs:24:25: 24:29
        _4 = _5;                         // scope 0 at ui/consts/const-pattern-variant.rs:24:25: 24:29
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at ui/consts/const-pattern-variant.rs:24:25: 24:29
        _9 = const _;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(main, [], Some(promoted[0])) }
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = _print(move _2) -> bb2;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/consts/const-pattern-variant.rs:29:2: 29:2
    }
}

promoted[0] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/consts/const-pattern-variant.rs:24:25: 24:29
    let mut _1: [&str; 1];               // in scope 0 at ui/consts/const-pattern-variant.rs:24:25: 24:29

    bb0: {
        _1 = [const "hi\n"];             // scope 0 at ui/consts/const-pattern-variant.rs:24:25: 24:29
                                         // mir::Constant
                                         // + span: ui/consts/const-pattern-variant.rs:24:25: 24:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/consts/const-pattern-variant.rs:24:25: 24:29
        return;                          // scope 0 at ui/consts/const-pattern-variant.rs:24:25: 24:29
    }
}

promoted[2] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/consts/const-pattern-variant.rs:25:25: 25:30
    let mut _1: [&str; 1];               // in scope 0 at ui/consts/const-pattern-variant.rs:25:25: 25:30

    bb0: {
        _1 = [const "meh\n"];            // scope 0 at ui/consts/const-pattern-variant.rs:25:25: 25:30
                                         // mir::Constant
                                         // + span: ui/consts/const-pattern-variant.rs:25:25: 25:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/consts/const-pattern-variant.rs:25:25: 25:30
        return;                          // scope 0 at ui/consts/const-pattern-variant.rs:25:25: 25:30
    }
}

promoted[4] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[5] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/consts/const-pattern-variant.rs:26:27: 26:32
    let mut _1: [&str; 1];               // in scope 0 at ui/consts/const-pattern-variant.rs:26:27: 26:32

    bb0: {
        _1 = [const "möp\n"];            // scope 0 at ui/consts/const-pattern-variant.rs:26:27: 26:32
                                         // mir::Constant
                                         // + span: ui/consts/const-pattern-variant.rs:26:27: 26:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/consts/const-pattern-variant.rs:26:27: 26:32
        return;                          // scope 0 at ui/consts/const-pattern-variant.rs:26:27: 26:32
    }
}

promoted[6] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[7] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/consts/const-pattern-variant.rs:27:23: 27:28
    let mut _1: [&str; 1];               // in scope 0 at ui/consts/const-pattern-variant.rs:27:23: 27:28

    bb0: {
        _1 = [const "bye\n"];            // scope 0 at ui/consts/const-pattern-variant.rs:27:23: 27:28
                                         // mir::Constant
                                         // + span: ui/consts/const-pattern-variant.rs:27:23: 27:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/consts/const-pattern-variant.rs:27:23: 27:28
        return;                          // scope 0 at ui/consts/const-pattern-variant.rs:27:23: 27:28
    }
}
