// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const ARR: [usize; 1] = {
    let mut _0: [usize; 1];              // return place in scope 0 at ui/consts/const-index-feature-gate.rs:3:12: 3:22

    bb0: {
        _0 = [const 2_usize];            // scope 0 at ui/consts/const-index-feature-gate.rs:3:25: 3:28
        return;                          // scope 0 at ui/consts/const-index-feature-gate.rs:3:1: 3:29
    }
}

ARR::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-index-feature-gate.rs:3:20: 3:21

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const-index-feature-gate.rs:3:20: 3:21
        return;                          // scope 0 at ui/consts/const-index-feature-gate.rs:3:20: 3:21
    }
}

const ARR2: [i32; 2] = {
    let mut _0: [i32; 2];                // return place in scope 0 at ui/consts/const-index-feature-gate.rs:4:13: 4:26

    bb0: {
        _0 = [const 5_i32, const 6_i32]; // scope 0 at ui/consts/const-index-feature-gate.rs:4:29: 4:35
        return;                          // scope 0 at ui/consts/const-index-feature-gate.rs:4:1: 4:36
    }
}

ARR2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-index-feature-gate.rs:4:19: 4:25
    let mut _1: [usize; 1];              // in scope 0 at ui/consts/const-index-feature-gate.rs:4:19: 4:22
    let _2: usize;                       // in scope 0 at ui/consts/const-index-feature-gate.rs:4:23: 4:24
    let mut _3: usize;                   // in scope 0 at ui/consts/const-index-feature-gate.rs:4:19: 4:25
    let mut _4: bool;                    // in scope 0 at ui/consts/const-index-feature-gate.rs:4:19: 4:25

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-index-feature-gate.rs:4:19: 4:22
        _1 = const _;                    // scope 0 at ui/consts/const-index-feature-gate.rs:4:19: 4:22
        StorageLive(_2);                 // scope 0 at ui/consts/const-index-feature-gate.rs:4:23: 4:24
        _2 = const 0_usize;              // scope 0 at ui/consts/const-index-feature-gate.rs:4:23: 4:24
        _3 = Len(_1);                    // scope 0 at ui/consts/const-index-feature-gate.rs:4:19: 4:25
        _4 = Lt(_2, _3);                 // scope 0 at ui/consts/const-index-feature-gate.rs:4:19: 4:25
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1; // scope 0 at ui/consts/const-index-feature-gate.rs:4:19: 4:25
    }

    bb1: {
        _0 = _1[_2];                     // scope 0 at ui/consts/const-index-feature-gate.rs:4:19: 4:25
        StorageDead(_2);                 // scope 0 at ui/consts/const-index-feature-gate.rs:4:24: 4:25
        StorageDead(_1);                 // scope 0 at ui/consts/const-index-feature-gate.rs:4:24: 4:25
        return;                          // scope 0 at ui/consts/const-index-feature-gate.rs:4:19: 4:25
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-index-feature-gate.rs:6:11: 6:11

    bb0: {
        return;                          // scope 0 at ui/consts/const-index-feature-gate.rs:7:2: 7:2
    }
}
