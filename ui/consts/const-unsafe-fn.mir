// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn dummy(_1: u32) -> u32 {
    debug v => _1;
    let mut _0: u32;

    bb0: {
        _0 = Not(_1);
        return;
    }
}

// MIR FOR CTFE
fn dummy(_1: u32) -> u32 {
    debug v => _1;
    let mut _0: u32;
    let mut _2: u32;

    bb0: {
        StorageLive(_2);
        _2 = _1;
        _0 = Not(move _2);
        StorageDead(_2);
        return;
    }
}

fn <impl at ui/consts/const-unsafe-fn.rs:10:1: 10:10>::new() -> Type {
    let mut _0: Type;

    bb0: {
        return;
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/const-unsafe-fn.rs:10:1: 10:10>::new() -> Type {
    let mut _0: Type;

    bb0: {
        _0 = Type;
        return;
    }
}

const VAL: u32 = {
    let mut _0: u32;
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;
        _0 = dummy(const 65535_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const TYPE_INST: Type = {
    let mut _0: Type;
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;
        _0 = Type::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u32, &u32);
    let _2: &u32;
    let _3: &u32;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: u32;
    let mut _7: u32;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: &u32;
    let mut _12: &u32;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }

    bb0: {
        _12 = const _;
        _11 = const _;
        _1 = (_12, _11);
        _2 = (_1.0: &u32);
        _3 = (_1.1: &u32);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<u32, u32>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        return;
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 4294901760_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}
