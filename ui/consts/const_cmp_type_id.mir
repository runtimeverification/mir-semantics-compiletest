// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_cmp_type_id.rs:7:17: 7:17
    let mut _1: bool;                    // in scope 0 at ui/consts/const_cmp_type_id.rs:8:5: 8:54
    let mut _2: bool;                    // in scope 0 at ui/consts/const_cmp_type_id.rs:8:13: 8:53
    let mut _3: &std::any::TypeId;       // in scope 0 at ui/consts/const_cmp_type_id.rs:8:13: 8:31
    let _4: std::any::TypeId;            // in scope 0 at ui/consts/const_cmp_type_id.rs:8:13: 8:31
    let mut _5: &std::any::TypeId;       // in scope 0 at ui/consts/const_cmp_type_id.rs:8:35: 8:53
    let _6: std::any::TypeId;            // in scope 0 at ui/consts/const_cmp_type_id.rs:8:35: 8:53
    let mut _7: !;                       // in scope 0 at ui/consts/const_cmp_type_id.rs:8:5: 8:54
    let mut _8: bool;                    // in scope 0 at ui/consts/const_cmp_type_id.rs:9:5: 9:54
    let mut _9: bool;                    // in scope 0 at ui/consts/const_cmp_type_id.rs:9:13: 9:53
    let mut _10: &std::any::TypeId;      // in scope 0 at ui/consts/const_cmp_type_id.rs:9:13: 9:31
    let _11: std::any::TypeId;           // in scope 0 at ui/consts/const_cmp_type_id.rs:9:13: 9:31
    let mut _12: &std::any::TypeId;      // in scope 0 at ui/consts/const_cmp_type_id.rs:9:35: 9:53
    let _13: std::any::TypeId;           // in scope 0 at ui/consts/const_cmp_type_id.rs:9:35: 9:53
    let mut _14: !;                      // in scope 0 at ui/consts/const_cmp_type_id.rs:9:5: 9:54

    bb0: {
        _4 = TypeId::of::<u8>() -> bb1;  // scope 0 at ui/consts/const_cmp_type_id.rs:8:13: 8:31
                                         // mir::Constant
                                         // + span: ui/consts/const_cmp_type_id.rs:8:13: 8:29
                                         // + literal: Const { ty: fn() -> TypeId {TypeId::of::<u8>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_4;                        // scope 0 at ui/consts/const_cmp_type_id.rs:8:13: 8:31
        _6 = TypeId::of::<u8>() -> bb2;  // scope 0 at ui/consts/const_cmp_type_id.rs:8:35: 8:53
                                         // mir::Constant
                                         // + span: ui/consts/const_cmp_type_id.rs:8:35: 8:51
                                         // + literal: Const { ty: fn() -> TypeId {TypeId::of::<u8>}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &_6;                        // scope 0 at ui/consts/const_cmp_type_id.rs:8:35: 8:53
        _2 = <TypeId as PartialEq>::eq(move _3, move _5) -> bb3; // scope 0 at ui/consts/const_cmp_type_id.rs:8:13: 8:53
                                         // mir::Constant
                                         // + span: ui/consts/const_cmp_type_id.rs:8:13: 8:53
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a TypeId, &'b TypeId) -> bool {<TypeId as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = Not(move _2);               // scope 0 at ui/consts/const_cmp_type_id.rs:8:5: 8:54
        switchInt(move _1) -> [0: bb5, otherwise: bb4]; // scope 0 at ui/consts/const_cmp_type_id.rs:8:5: 8:54
    }

    bb4: {
        _7 = core::panicking::panic(const "assertion failed: TypeId::of::<u8>() == TypeId::of::<u8>()"); // scope 0 at ui/consts/const_cmp_type_id.rs:8:5: 8:54
                                         // mir::Constant
                                         // + span: ui/consts/const_cmp_type_id.rs:8:5: 8:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _11 = TypeId::of::<()>() -> bb6; // scope 0 at ui/consts/const_cmp_type_id.rs:9:13: 9:31
                                         // mir::Constant
                                         // + span: ui/consts/const_cmp_type_id.rs:9:13: 9:29
                                         // + literal: Const { ty: fn() -> TypeId {TypeId::of::<()>}, val: Value(<ZST>) }
    }

    bb6: {
        _10 = &_11;                      // scope 0 at ui/consts/const_cmp_type_id.rs:9:13: 9:31
        _13 = TypeId::of::<u8>() -> bb7; // scope 0 at ui/consts/const_cmp_type_id.rs:9:35: 9:53
                                         // mir::Constant
                                         // + span: ui/consts/const_cmp_type_id.rs:9:35: 9:51
                                         // + literal: Const { ty: fn() -> TypeId {TypeId::of::<u8>}, val: Value(<ZST>) }
    }

    bb7: {
        _12 = &_13;                      // scope 0 at ui/consts/const_cmp_type_id.rs:9:35: 9:53
        _9 = <TypeId as PartialEq>::ne(move _10, move _12) -> bb8; // scope 0 at ui/consts/const_cmp_type_id.rs:9:13: 9:53
                                         // mir::Constant
                                         // + span: ui/consts/const_cmp_type_id.rs:9:13: 9:53
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a TypeId, &'b TypeId) -> bool {<TypeId as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb8: {
        _8 = Not(move _9);               // scope 0 at ui/consts/const_cmp_type_id.rs:9:5: 9:54
        switchInt(move _8) -> [0: bb10, otherwise: bb9]; // scope 0 at ui/consts/const_cmp_type_id.rs:9:5: 9:54
    }

    bb9: {
        _14 = core::panicking::panic(const "assertion failed: TypeId::of::<()>() != TypeId::of::<u8>()"); // scope 0 at ui/consts/const_cmp_type_id.rs:9:5: 9:54
                                         // mir::Constant
                                         // + span: ui/consts/const_cmp_type_id.rs:9:5: 9:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        return;                          // scope 0 at ui/consts/const_cmp_type_id.rs:12:2: 12:2
    }
}

// MIR FOR CTFE
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_cmp_type_id.rs:7:17: 7:17
    let _1: ();                          // in scope 0 at ui/consts/const_cmp_type_id.rs:8:5: 8:54
    let mut _2: bool;                    // in scope 0 at ui/consts/const_cmp_type_id.rs:8:5: 8:54
    let mut _3: bool;                    // in scope 0 at ui/consts/const_cmp_type_id.rs:8:13: 8:53
    let mut _4: &std::any::TypeId;       // in scope 0 at ui/consts/const_cmp_type_id.rs:8:13: 8:31
    let _5: std::any::TypeId;            // in scope 0 at ui/consts/const_cmp_type_id.rs:8:13: 8:31
    let mut _6: &std::any::TypeId;       // in scope 0 at ui/consts/const_cmp_type_id.rs:8:35: 8:53
    let _7: std::any::TypeId;            // in scope 0 at ui/consts/const_cmp_type_id.rs:8:35: 8:53
    let mut _8: !;                       // in scope 0 at ui/consts/const_cmp_type_id.rs:8:5: 8:54
    let _9: ();                          // in scope 0 at ui/consts/const_cmp_type_id.rs:9:5: 9:54
    let mut _10: bool;                   // in scope 0 at ui/consts/const_cmp_type_id.rs:9:5: 9:54
    let mut _11: bool;                   // in scope 0 at ui/consts/const_cmp_type_id.rs:9:13: 9:53
    let mut _12: &std::any::TypeId;      // in scope 0 at ui/consts/const_cmp_type_id.rs:9:13: 9:31
    let _13: std::any::TypeId;           // in scope 0 at ui/consts/const_cmp_type_id.rs:9:13: 9:31
    let mut _14: &std::any::TypeId;      // in scope 0 at ui/consts/const_cmp_type_id.rs:9:35: 9:53
    let _15: std::any::TypeId;           // in scope 0 at ui/consts/const_cmp_type_id.rs:9:35: 9:53
    let mut _16: !;                      // in scope 0 at ui/consts/const_cmp_type_id.rs:9:5: 9:54

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_cmp_type_id.rs:8:5: 8:54
        StorageLive(_2);                 // scope 0 at ui/consts/const_cmp_type_id.rs:8:5: 8:54
        StorageLive(_3);                 // scope 0 at ui/consts/const_cmp_type_id.rs:8:13: 8:53
        StorageLive(_4);                 // scope 0 at ui/consts/const_cmp_type_id.rs:8:13: 8:31
        StorageLive(_5);                 // scope 0 at ui/consts/const_cmp_type_id.rs:8:13: 8:31
        ConstEvalCounter;                // scope 0 at ui/consts/const_cmp_type_id.rs:8:13: 8:31
        _5 = TypeId::of::<u8>() -> bb1;  // scope 0 at ui/consts/const_cmp_type_id.rs:8:13: 8:31
                                         // mir::Constant
                                         // + span: ui/consts/const_cmp_type_id.rs:8:13: 8:29
                                         // + literal: Const { ty: fn() -> TypeId {TypeId::of::<u8>}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at ui/consts/const_cmp_type_id.rs:8:13: 8:31
        StorageLive(_6);                 // scope 0 at ui/consts/const_cmp_type_id.rs:8:35: 8:53
        StorageLive(_7);                 // scope 0 at ui/consts/const_cmp_type_id.rs:8:35: 8:53
        ConstEvalCounter;                // scope 0 at ui/consts/const_cmp_type_id.rs:8:35: 8:53
        _7 = TypeId::of::<u8>() -> bb2;  // scope 0 at ui/consts/const_cmp_type_id.rs:8:35: 8:53
                                         // mir::Constant
                                         // + span: ui/consts/const_cmp_type_id.rs:8:35: 8:51
                                         // + literal: Const { ty: fn() -> TypeId {TypeId::of::<u8>}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = &_7;                        // scope 0 at ui/consts/const_cmp_type_id.rs:8:35: 8:53
        ConstEvalCounter;                // scope 0 at ui/consts/const_cmp_type_id.rs:8:13: 8:53
        _3 = <TypeId as PartialEq>::eq(move _4, move _6) -> bb3; // scope 0 at ui/consts/const_cmp_type_id.rs:8:13: 8:53
                                         // mir::Constant
                                         // + span: ui/consts/const_cmp_type_id.rs:8:13: 8:53
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a TypeId, &'b TypeId) -> bool {<TypeId as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_6);                 // scope 0 at ui/consts/const_cmp_type_id.rs:8:52: 8:53
        StorageDead(_4);                 // scope 0 at ui/consts/const_cmp_type_id.rs:8:52: 8:53
        _2 = Not(move _3);               // scope 0 at ui/consts/const_cmp_type_id.rs:8:5: 8:54
        StorageDead(_7);                 // scope 0 at ui/consts/const_cmp_type_id.rs:8:53: 8:54
        StorageDead(_5);                 // scope 0 at ui/consts/const_cmp_type_id.rs:8:53: 8:54
        StorageDead(_3);                 // scope 0 at ui/consts/const_cmp_type_id.rs:8:53: 8:54
        switchInt(move _2) -> [0: bb5, otherwise: bb4]; // scope 0 at ui/consts/const_cmp_type_id.rs:8:5: 8:54
    }

    bb4: {
        StorageLive(_8);                 // scope 0 at ui/consts/const_cmp_type_id.rs:8:5: 8:54
        ConstEvalCounter;                // scope 0 at ui/consts/const_cmp_type_id.rs:8:5: 8:54
        _8 = core::panicking::panic(const "assertion failed: TypeId::of::<u8>() == TypeId::of::<u8>()"); // scope 0 at ui/consts/const_cmp_type_id.rs:8:5: 8:54
                                         // mir::Constant
                                         // + span: ui/consts/const_cmp_type_id.rs:8:5: 8:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _1 = const ();                   // scope 0 at ui/consts/const_cmp_type_id.rs:8:54: 8:54
        StorageDead(_2);                 // scope 0 at ui/consts/const_cmp_type_id.rs:8:53: 8:54
        StorageDead(_1);                 // scope 0 at ui/consts/const_cmp_type_id.rs:8:53: 8:54
        StorageLive(_9);                 // scope 0 at ui/consts/const_cmp_type_id.rs:9:5: 9:54
        StorageLive(_10);                // scope 0 at ui/consts/const_cmp_type_id.rs:9:5: 9:54
        StorageLive(_11);                // scope 0 at ui/consts/const_cmp_type_id.rs:9:13: 9:53
        StorageLive(_12);                // scope 0 at ui/consts/const_cmp_type_id.rs:9:13: 9:31
        StorageLive(_13);                // scope 0 at ui/consts/const_cmp_type_id.rs:9:13: 9:31
        ConstEvalCounter;                // scope 0 at ui/consts/const_cmp_type_id.rs:9:13: 9:31
        _13 = TypeId::of::<()>() -> bb6; // scope 0 at ui/consts/const_cmp_type_id.rs:9:13: 9:31
                                         // mir::Constant
                                         // + span: ui/consts/const_cmp_type_id.rs:9:13: 9:29
                                         // + literal: Const { ty: fn() -> TypeId {TypeId::of::<()>}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = &_13;                      // scope 0 at ui/consts/const_cmp_type_id.rs:9:13: 9:31
        StorageLive(_14);                // scope 0 at ui/consts/const_cmp_type_id.rs:9:35: 9:53
        StorageLive(_15);                // scope 0 at ui/consts/const_cmp_type_id.rs:9:35: 9:53
        ConstEvalCounter;                // scope 0 at ui/consts/const_cmp_type_id.rs:9:35: 9:53
        _15 = TypeId::of::<u8>() -> bb7; // scope 0 at ui/consts/const_cmp_type_id.rs:9:35: 9:53
                                         // mir::Constant
                                         // + span: ui/consts/const_cmp_type_id.rs:9:35: 9:51
                                         // + literal: Const { ty: fn() -> TypeId {TypeId::of::<u8>}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = &_15;                      // scope 0 at ui/consts/const_cmp_type_id.rs:9:35: 9:53
        ConstEvalCounter;                // scope 0 at ui/consts/const_cmp_type_id.rs:9:13: 9:53
        _11 = <TypeId as PartialEq>::ne(move _12, move _14) -> bb8; // scope 0 at ui/consts/const_cmp_type_id.rs:9:13: 9:53
                                         // mir::Constant
                                         // + span: ui/consts/const_cmp_type_id.rs:9:13: 9:53
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a TypeId, &'b TypeId) -> bool {<TypeId as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb8: {
        StorageDead(_14);                // scope 0 at ui/consts/const_cmp_type_id.rs:9:52: 9:53
        StorageDead(_12);                // scope 0 at ui/consts/const_cmp_type_id.rs:9:52: 9:53
        _10 = Not(move _11);             // scope 0 at ui/consts/const_cmp_type_id.rs:9:5: 9:54
        StorageDead(_15);                // scope 0 at ui/consts/const_cmp_type_id.rs:9:53: 9:54
        StorageDead(_13);                // scope 0 at ui/consts/const_cmp_type_id.rs:9:53: 9:54
        StorageDead(_11);                // scope 0 at ui/consts/const_cmp_type_id.rs:9:53: 9:54
        switchInt(move _10) -> [0: bb10, otherwise: bb9]; // scope 0 at ui/consts/const_cmp_type_id.rs:9:5: 9:54
    }

    bb9: {
        StorageLive(_16);                // scope 0 at ui/consts/const_cmp_type_id.rs:9:5: 9:54
        ConstEvalCounter;                // scope 0 at ui/consts/const_cmp_type_id.rs:9:5: 9:54
        _16 = core::panicking::panic(const "assertion failed: TypeId::of::<()>() != TypeId::of::<u8>()"); // scope 0 at ui/consts/const_cmp_type_id.rs:9:5: 9:54
                                         // mir::Constant
                                         // + span: ui/consts/const_cmp_type_id.rs:9:5: 9:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        _9 = const ();                   // scope 0 at ui/consts/const_cmp_type_id.rs:9:54: 9:54
        StorageDead(_10);                // scope 0 at ui/consts/const_cmp_type_id.rs:9:53: 9:54
        StorageDead(_9);                 // scope 0 at ui/consts/const_cmp_type_id.rs:9:53: 9:54
        _0 = const ();                   // scope 0 at ui/consts/const_cmp_type_id.rs:7:17: 12:2
        return;                          // scope 0 at ui/consts/const_cmp_type_id.rs:12:2: 12:2
    }
}

const _A: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const_cmp_type_id.rs:10:15: 10:19
    let mut _1: &std::any::TypeId;       // in scope 0 at ui/consts/const_cmp_type_id.rs:10:22: 10:40
    let _2: std::any::TypeId;            // in scope 0 at ui/consts/const_cmp_type_id.rs:10:22: 10:40
    let mut _3: &std::any::TypeId;       // in scope 0 at ui/consts/const_cmp_type_id.rs:10:43: 10:62
    let _4: std::any::TypeId;            // in scope 0 at ui/consts/const_cmp_type_id.rs:10:43: 10:62
    let mut _5: &std::any::TypeId;       // in scope 0 at ui/consts/const_cmp_type_id.rs:10:43: 10:62
    let mut _6: &std::any::TypeId;       // in scope 0 at ui/consts/const_cmp_type_id.rs:10:22: 10:40

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_cmp_type_id.rs:10:22: 10:40
        _6 = const _;                    // scope 0 at ui/consts/const_cmp_type_id.rs:10:22: 10:40
                                         // mir::Constant
                                         // + span: ui/consts/const_cmp_type_id.rs:10:22: 10:40
                                         // + literal: Const { ty: &TypeId, val: Unevaluated(_A, [], Some(promoted[1])) }
        _1 = &(*_6);                     // scope 0 at ui/consts/const_cmp_type_id.rs:10:22: 10:40
        StorageLive(_3);                 // scope 0 at ui/consts/const_cmp_type_id.rs:10:43: 10:62
        _5 = const _;                    // scope 0 at ui/consts/const_cmp_type_id.rs:10:43: 10:62
                                         // mir::Constant
                                         // + span: ui/consts/const_cmp_type_id.rs:10:43: 10:62
                                         // + literal: Const { ty: &TypeId, val: Unevaluated(_A, [], Some(promoted[0])) }
        _3 = &(*_5);                     // scope 0 at ui/consts/const_cmp_type_id.rs:10:43: 10:62
        ConstEvalCounter;                // scope 0 at ui/consts/const_cmp_type_id.rs:10:22: 10:62
        _0 = <TypeId as PartialOrd>::lt(move _1, move _3) -> bb1; // scope 0 at ui/consts/const_cmp_type_id.rs:10:22: 10:62
                                         // mir::Constant
                                         // + span: ui/consts/const_cmp_type_id.rs:10:22: 10:62
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a TypeId, &'b TypeId) -> bool {<TypeId as PartialOrd>::lt}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at ui/consts/const_cmp_type_id.rs:10:61: 10:62
        StorageDead(_1);                 // scope 0 at ui/consts/const_cmp_type_id.rs:10:61: 10:62
        return;                          // scope 0 at ui/consts/const_cmp_type_id.rs:10:5: 10:63
    }
}

promoted[0] in _A: &TypeId = {
    let mut _0: &std::any::TypeId;       // return place in scope 0 at ui/consts/const_cmp_type_id.rs:10:43: 10:62
    let mut _1: std::any::TypeId;        // in scope 0 at ui/consts/const_cmp_type_id.rs:10:43: 10:62

    bb0: {
        _1 = TypeId::of::<u16>() -> bb1; // scope 0 at ui/consts/const_cmp_type_id.rs:10:43: 10:62
                                         // mir::Constant
                                         // + span: ui/consts/const_cmp_type_id.rs:10:43: 10:60
                                         // + literal: Const { ty: fn() -> TypeId {TypeId::of::<u16>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at ui/consts/const_cmp_type_id.rs:10:43: 10:62
        return;                          // scope 0 at ui/consts/const_cmp_type_id.rs:10:43: 10:62
    }
}

promoted[1] in _A: &TypeId = {
    let mut _0: &std::any::TypeId;       // return place in scope 0 at ui/consts/const_cmp_type_id.rs:10:22: 10:40
    let mut _1: std::any::TypeId;        // in scope 0 at ui/consts/const_cmp_type_id.rs:10:22: 10:40

    bb0: {
        _1 = TypeId::of::<u8>() -> bb1;  // scope 0 at ui/consts/const_cmp_type_id.rs:10:22: 10:40
                                         // mir::Constant
                                         // + span: ui/consts/const_cmp_type_id.rs:10:22: 10:38
                                         // + literal: Const { ty: fn() -> TypeId {TypeId::of::<u8>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at ui/consts/const_cmp_type_id.rs:10:22: 10:40
        return;                          // scope 0 at ui/consts/const_cmp_type_id.rs:10:22: 10:40
    }
}
