// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static C: E = {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const-enum-byref-self.rs:5:11: 5:12

    bb0: {
        _0 = E::V;                       // scope 0 at ui/consts/const-enum-byref-self.rs:5:15: 5:19
        return;                          // scope 0 at ui/consts/const-enum-byref-self.rs:5:1: 5:20
    }
}

fn <impl at ui/consts/const-enum-byref-self.rs:7:1: 7:7>::method(_1: &E) -> () {
    debug self => _1;                    // in scope 0 at ui/consts/const-enum-byref-self.rs:8:19: 8:24
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-enum-byref-self.rs:8:26: 8:26
    let mut _2: isize;                   // in scope 0 at ui/consts/const-enum-byref-self.rs:10:13: 10:17
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at ui/consts/const-enum-byref-self.rs:9:15: 9:20
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/consts/const-enum-byref-self.rs:9:9: 9:20
    }

    bb1: {
        _3 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/consts/const-enum-byref-self.rs:9:15: 9:20
    }

    bb3: {
        return;                          // scope 0 at ui/consts/const-enum-byref-self.rs:13:6: 13:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-enum-byref-self.rs:16:15: 16:15
    let mut _1: &E;                      // in scope 0 at ui/consts/const-enum-byref-self.rs:17:5: 17:15
    let _2: &E;                          // in scope 0 at ui/consts/const-enum-byref-self.rs:17:5: 17:6

    bb0: {
        _2 = const {alloc1: &E};         // scope 0 at ui/consts/const-enum-byref-self.rs:17:5: 17:6
                                         // mir::Constant
                                         // + span: ui/consts/const-enum-byref-self.rs:17:5: 17:6
                                         // + literal: Const { ty: &E, val: Value(Scalar(alloc1)) }
        _1 = _2;                         // scope 0 at ui/consts/const-enum-byref-self.rs:17:5: 17:15
        _0 = E::method(move _1) -> bb1;  // scope 0 at ui/consts/const-enum-byref-self.rs:17:5: 17:15
                                         // mir::Constant
                                         // + span: ui/consts/const-enum-byref-self.rs:17:7: 17:13
                                         // + literal: Const { ty: for<'a> fn(&'a E) {E::method}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-enum-byref-self.rs:18:2: 18:2
    }
}

alloc1 (static: C, size: 16, align: 8) {
    00 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
}

fn E::VV(_1: isize) -> E {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const-enum-byref-self.rs:4:13: 4:15

    bb0: {
        _0 = E::VV(move _1);             // scope 0 at ui/consts/const-enum-byref-self.rs:4:13: 4:15
        return;                          // scope 0 at ui/consts/const-enum-byref-self.rs:4:13: 4:15
    }
}

// MIR FOR CTFE
fn E::VV(_1: isize) -> E {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const-enum-byref-self.rs:4:13: 4:15

    bb0: {
        _0 = E::VV(move _1);             // scope 0 at ui/consts/const-enum-byref-self.rs:4:13: 4:15
        return;                          // scope 0 at ui/consts/const-enum-byref-self.rs:4:13: 4:15
    }
}
