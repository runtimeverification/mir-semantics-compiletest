// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn add(_1: u32, _2: u32) -> u32 {
    debug x => _1;
    debug y => _2;
    let mut _0: u32;

    bb0: {
        _0 = Add(_1, _2);
        return;
    }
}

// MIR FOR CTFE
fn add(_1: u32, _2: u32) -> u32 {
    debug x => _1;
    debug y => _2;
    let mut _0: u32;
    let mut _3: u32;
    let mut _4: u32;

    bb0: {
        StorageLive(_3);
        _3 = _1;
        StorageLive(_4);
        _4 = _2;
        _0 = Add(move _3, move _4);
        StorageDead(_4);
        StorageDead(_3);
        return;
    }
}

fn sub(_1: u32, _2: u32) -> u32 {
    debug x => _1;
    debug y => _2;
    let mut _0: u32;

    bb0: {
        _0 = Sub(_1, _2);
        return;
    }
}

// MIR FOR CTFE
fn sub(_1: u32, _2: u32) -> u32 {
    debug x => _1;
    debug y => _2;
    let mut _0: u32;
    let mut _3: u32;
    let mut _4: u32;

    bb0: {
        StorageLive(_3);
        _3 = _1;
        StorageLive(_4);
        _4 = _2;
        _0 = Sub(move _3, move _4);
        StorageDead(_4);
        StorageDead(_3);
        return;
    }
}

fn div(_1: u32, _2: u32) -> u32 {
    debug x => _1;
    debug y => _2;
    let mut _0: u32;
    let mut _3: bool;

    bb0: {
        _3 = Eq(_2, const 0_u32);
        assert(!move _3, "attempt to divide `{}` by zero", _1) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Div(_1, _2);
        return;
    }
}

// MIR FOR CTFE
fn div(_1: u32, _2: u32) -> u32 {
    debug x => _1;
    debug y => _2;
    let mut _0: u32;
    let mut _3: u32;
    let mut _4: u32;
    let mut _5: bool;

    bb0: {
        StorageLive(_3);
        _3 = _1;
        StorageLive(_4);
        _4 = _2;
        _5 = Eq(_4, const 0_u32);
        assert(!move _5, "attempt to divide `{}` by zero", _3) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Div(move _3, move _4);
        StorageDead(_4);
        StorageDead(_3);
        return;
    }
}

fn generic(_1: T) -> T {
    debug t => _1;
    let mut _0: T;

    bb0: {
        _0 = move _1;
        return;
    }
}

// MIR FOR CTFE
fn generic(_1: T) -> T {
    debug t => _1;
    let mut _0: T;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn generic_arr(_1: [T; 1]) -> T {
    debug t => _1;
    let mut _0: T;
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        _2 = const 0_usize;
        _3 = const 1_usize;
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = _1[_2];
        return;
    }
}

// MIR FOR CTFE
fn generic_arr(_1: [T; 1]) -> T {
    debug t => _1;
    let mut _0: T;
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_2);
        _2 = const 0_usize;
        _3 = Len(_1);
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = _1[_2];
        StorageDead(_2);
        return;
    }
}

generic_arr::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

const SUM: u32 = {
    let mut _0: u32;

    bb0: {
        ConstEvalCounter;
        _0 = add(const 44_u32, const 22_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const DIFF: u32 = {
    let mut _0: u32;

    bb0: {
        ConstEvalCounter;
        _0 = sub(const 44_u32, const 22_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const DIV: u32 = {
    let mut _0: u32;
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;
        _0 = div(const 44_u32, const 22_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u32, &u32);
    let _2: &u32;
    let _3: &u32;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: u32;
    let mut _7: u32;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: !;
    let mut _14: (&u32, &u32);
    let _15: &u32;
    let _16: &u32;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: u32;
    let mut _20: u32;
    let _22: !;
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _24: (&u32, &u32);
    let _25: &u32;
    let _26: &u32;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: u32;
    let mut _30: u32;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: &u32;
    let mut _35: &u32;
    let mut _36: &u32;
    let mut _37: &u32;
    let mut _38: &u32;
    let mut _39: &u32;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _15;
        debug right_val => _16;
        let _21: core::panicking::AssertKind;
        scope 4 {
            debug kind => _21;
        }
    }
    scope 5 {
        debug left_val => _25;
        debug right_val => _26;
        let _31: core::panicking::AssertKind;
        scope 6 {
            debug kind => _31;
        }
    }
    scope 7 {
        scope 8 {
            scope 9 {
            }
        }
    }

    bb0: {
        _39 = const _;
        _38 = const _;
        _1 = (_39, _38);
        _2 = (_1.0: &u32);
        _3 = (_1.1: &u32);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<u32, u32>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        _12 = Ne(const _, const 88_u32);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _13 = core::panicking::panic(const "assertion failed: SUM != 88") -> unwind continue;
    }

    bb4: {
        _37 = const _;
        _36 = const _;
        _14 = (_37, _36);
        _15 = (_14.0: &u32);
        _16 = (_14.1: &u32);
        _19 = (*_15);
        _20 = (*_16);
        _18 = Eq(move _19, move _20);
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _21 = core::panicking::AssertKind::Eq;
        _23 = Option::<Arguments<'_>>::None;
        _22 = core::panicking::assert_failed::<u32, u32>(move _21, _15, _16, move _23) -> unwind continue;
    }

    bb6: {
        _35 = const _;
        _34 = const _;
        _24 = (_35, _34);
        _25 = (_24.0: &u32);
        _26 = (_24.1: &u32);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<u32, u32>(move _31, _25, _26, move _33) -> unwind continue;
    }

    bb8: {
        return;
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 2_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 22_u32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 66_u32;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: u32;

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = sub(const 100_u32, const 99_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = move _1 as usize (IntToInt);
        StorageDead(_1);
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        ConstEvalCounter;
        _0 = generic::<usize>(const 1_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;
    let mut _1: [usize; 1];

    bb0: {
        StorageLive(_1);
        _1 = [const 1_usize];
        ConstEvalCounter;
        _0 = generic_arr::<usize>(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}
