// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const _: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:3:10: 3:13
    let mut _1: bool;                    // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:3:19: 3:23

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:3:19: 3:23
        _1 = const true;                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:3:19: 3:23
        switchInt(move _1) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:3:19: 3:23
    }

    bb1: {
        _0 = const 5_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:3:26: 3:27
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:3:16: 3:40
    }

    bb2: {
        _0 = const 6_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:3:37: 3:38
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:3:16: 3:40
    }

    bb3: {
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:3:39: 3:40
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:3:1: 3:41
    }
}

const _: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:5:10: 5:13
    let mut _1: std::option::Option<bool>; // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:5:36: 5:47
    let mut _2: isize;                   // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:5:23: 5:33
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:5:36: 5:47
        _1 = Option::<bool>::Some(const false); // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:5:36: 5:47
        _2 = discriminant(_1);           // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:5:23: 5:33
        switchInt(move _2) -> [1: bb1, otherwise: bb3]; // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:5:23: 5:33
    }

    bb1: {
        switchInt(((_1 as Some).0: bool)) -> [0: bb3, otherwise: bb2]; // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:5:23: 5:33
    }

    bb2: {
        _0 = const 0_i32;                // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:5:50: 5:51
        goto -> bb4;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:5:16: 5:64
    }

    bb3: {
        _0 = const 1_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:5:61: 5:62
        goto -> bb4;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:5:16: 5:64
    }

    bb4: {
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:5:63: 5:64
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:5:1: 5:65
    }
}

const _: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:7:10: 7:13
    let mut _1: i32;                     // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:7:22: 7:23

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:7:22: 7:23
        _1 = const 1_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:7:22: 7:23
        switchInt(_1) -> [2: bb2, 4: bb3, otherwise: bb1]; // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:7:16: 7:23
    }

    bb1: {
        _0 = const 0_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:10:10: 10:11
        goto -> bb4;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:10:10: 10:11
    }

    bb2: {
        _0 = const 3_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:8:10: 8:11
        goto -> bb4;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:8:10: 8:11
    }

    bb3: {
        _0 = const 5_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:9:10: 9:11
        goto -> bb4;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:9:10: 9:11
    }

    bb4: {
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:11:1: 11:2
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:7:1: 11:3
    }
}

static FOO: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:13:13: 13:16
    let _1: i32;                         // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:14:9: 14:10
    let mut _2: bool;                    // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:14:16: 14:20
    let mut _4: std::option::Option<i32>; // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:19:22: 19:29
    let mut _5: i32;                     // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:19:27: 19:28
    let mut _6: isize;                   // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:19:12: 19:19
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:14:9: 14:10
        let _3: i32;                     // in scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:15:9: 15:10
        scope 2 {
            debug x => _3;               // in scope 2 at ui/consts/control-flow/feature-gate-const-if-match.rs:15:9: 15:10
            scope 3 {
                debug x => _7;           // in scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:19:17: 19:18
                let _7: i32;             // in scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:19:17: 19:18
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:14:9: 14:10
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:14:16: 14:20
        _2 = const true;                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:14:16: 14:20
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:14:16: 14:20
    }

    bb1: {
        _1 = const 0_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:14:23: 14:24
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:14:13: 14:37
    }

    bb2: {
        _1 = const 1_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:14:34: 14:35
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:14:13: 14:37
    }

    bb3: {
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:14:36: 14:37
        StorageLive(_3);                 // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:15:9: 15:10
        switchInt(_1) -> [0: bb5, otherwise: bb4]; // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:15:13: 15:20
    }

    bb4: {
        _3 = const 0_i32;                // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:17:14: 17:15
        goto -> bb6;                     // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:17:14: 17:15
    }

    bb5: {
        _3 = const 1_i32;                // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:16:14: 16:15
        goto -> bb6;                     // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:16:14: 16:15
    }

    bb6: {
        StorageLive(_4);                 // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:19:22: 19:29
        StorageLive(_5);                 // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:19:27: 19:28
        _5 = _3;                         // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:19:27: 19:28
        _4 = Option::<i32>::Some(move _5); // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:19:22: 19:29
        StorageDead(_5);                 // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:19:28: 19:29
        _6 = discriminant(_4);           // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:19:12: 19:19
        switchInt(move _6) -> [1: bb7, otherwise: bb8]; // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:19:12: 19:19
    }

    bb7: {
        StorageLive(_7);                 // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:19:17: 19:18
        _7 = ((_4 as Some).0: i32);      // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:19:17: 19:18
        _0 = _7;                         // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:19:32: 19:33
        StorageDead(_7);                 // scope 2 at ui/consts/control-flow/feature-gate-const-if-match.rs:19:34: 19:35
        goto -> bb9;                     // scope 2 at ui/consts/control-flow/feature-gate-const-if-match.rs:19:5: 19:46
    }

    bb8: {
        _0 = const 1_i32;                // scope 2 at ui/consts/control-flow/feature-gate-const-if-match.rs:19:43: 19:44
        goto -> bb9;                     // scope 2 at ui/consts/control-flow/feature-gate-const-if-match.rs:19:5: 19:46
    }

    bb9: {
        StorageDead(_3);                 // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:20:1: 20:2
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:20:1: 20:2
        StorageDead(_4);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:20:1: 20:2
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:13:1: 20:3
    }
}

static mut BAR: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:22:17: 22:20
    let _1: i32;                         // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:23:9: 23:10
    let mut _2: bool;                    // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:23:16: 23:20
    let mut _4: std::option::Option<i32>; // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:28:22: 28:29
    let mut _5: i32;                     // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:28:27: 28:28
    let mut _6: isize;                   // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:28:12: 28:19
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:23:9: 23:10
        let _3: i32;                     // in scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:24:9: 24:10
        scope 2 {
            debug x => _3;               // in scope 2 at ui/consts/control-flow/feature-gate-const-if-match.rs:24:9: 24:10
            scope 3 {
                debug x => _7;           // in scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:28:17: 28:18
                let _7: i32;             // in scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:28:17: 28:18
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:23:9: 23:10
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:23:16: 23:20
        _2 = const true;                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:23:16: 23:20
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:23:16: 23:20
    }

    bb1: {
        _1 = const 0_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:23:23: 23:24
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:23:13: 23:37
    }

    bb2: {
        _1 = const 1_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:23:34: 23:35
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:23:13: 23:37
    }

    bb3: {
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:23:36: 23:37
        StorageLive(_3);                 // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:24:9: 24:10
        switchInt(_1) -> [0: bb5, otherwise: bb4]; // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:24:13: 24:20
    }

    bb4: {
        _3 = const 0_i32;                // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:26:14: 26:15
        goto -> bb6;                     // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:26:14: 26:15
    }

    bb5: {
        _3 = const 1_i32;                // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:25:14: 25:15
        goto -> bb6;                     // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:25:14: 25:15
    }

    bb6: {
        StorageLive(_4);                 // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:28:22: 28:29
        StorageLive(_5);                 // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:28:27: 28:28
        _5 = _3;                         // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:28:27: 28:28
        _4 = Option::<i32>::Some(move _5); // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:28:22: 28:29
        StorageDead(_5);                 // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:28:28: 28:29
        _6 = discriminant(_4);           // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:28:12: 28:19
        switchInt(move _6) -> [1: bb7, otherwise: bb8]; // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:28:12: 28:19
    }

    bb7: {
        StorageLive(_7);                 // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:28:17: 28:18
        _7 = ((_4 as Some).0: i32);      // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:28:17: 28:18
        _0 = _7;                         // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:28:32: 28:33
        StorageDead(_7);                 // scope 2 at ui/consts/control-flow/feature-gate-const-if-match.rs:28:34: 28:35
        goto -> bb9;                     // scope 2 at ui/consts/control-flow/feature-gate-const-if-match.rs:28:5: 28:46
    }

    bb8: {
        _0 = const 1_i32;                // scope 2 at ui/consts/control-flow/feature-gate-const-if-match.rs:28:43: 28:44
        goto -> bb9;                     // scope 2 at ui/consts/control-flow/feature-gate-const-if-match.rs:28:5: 28:46
    }

    bb9: {
        StorageDead(_3);                 // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:29:1: 29:2
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:29:1: 29:2
        StorageDead(_4);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:29:1: 29:2
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:22:1: 29:3
    }
}

fn if_() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:31:19: 31:22

    bb0: {
        _0 = const 5_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:32:15: 32:16
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:33:2: 33:2
    }
}

// MIR FOR CTFE
fn if_() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:31:19: 31:22
    let mut _1: bool;                    // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:32:8: 32:12

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:32:8: 32:12
        _1 = const true;                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:32:8: 32:12
        switchInt(move _1) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:32:8: 32:12
    }

    bb1: {
        _0 = const 5_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:32:15: 32:16
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:32:5: 32:29
    }

    bb2: {
        _0 = const 6_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:32:26: 32:27
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:32:5: 32:29
    }

    bb3: {
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:32:28: 32:29
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:33:2: 33:2
    }
}

fn if_let(_1: Option<bool>) -> i32 {
    debug a => _1;                       // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:35:17: 35:18
    let mut _0: i32;                     // return place in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:35:37: 35:40
    let mut _2: isize;                   // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:36:12: 36:22
    scope 1 {
    }

    bb0: {
        _2 = discriminant(_1);           // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:36:12: 36:22
        switchInt(move _2) -> [1: bb1, otherwise: bb3]; // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:36:12: 36:22
    }

    bb1: {
        switchInt(((_1 as Some).0: bool)) -> [0: bb3, otherwise: bb2]; // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:36:12: 36:22
    }

    bb2: {
        _0 = const 0_i32;                // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:36:29: 36:30
        goto -> bb4;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:36:5: 36:43
    }

    bb3: {
        _0 = const 1_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:36:40: 36:41
        goto -> bb4;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:36:5: 36:43
    }

    bb4: {
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:37:2: 37:2
    }
}

// MIR FOR CTFE
fn if_let(_1: Option<bool>) -> i32 {
    debug a => _1;                       // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:35:17: 35:18
    let mut _0: i32;                     // return place in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:35:37: 35:40
    let mut _2: isize;                   // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:36:12: 36:22
    scope 1 {
    }

    bb0: {
        _2 = discriminant(_1);           // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:36:12: 36:22
        switchInt(move _2) -> [1: bb1, otherwise: bb3]; // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:36:12: 36:22
    }

    bb1: {
        switchInt(((_1 as Some).0: bool)) -> [0: bb3, otherwise: bb2]; // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:36:12: 36:22
    }

    bb2: {
        _0 = const 0_i32;                // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:36:29: 36:30
        goto -> bb4;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:36:5: 36:43
    }

    bb3: {
        _0 = const 1_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:36:40: 36:41
        goto -> bb4;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:36:5: 36:43
    }

    bb4: {
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:37:2: 37:2
    }
}

fn match_(_1: i32) -> i32 {
    debug i => _1;                       // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:39:17: 39:18
    let mut _0: i32;                     // return place in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:39:28: 39:31
    let _2: i32;                         // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:9: 41:10
    let _3: &i32;                        // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:9: 41:10
    let mut _4: bool;                    // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:14: 41:20
    let mut _5: i32;                     // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:14: 41:15
    scope 1 {
        debug i => _2;                   // in scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:9: 41:10
        debug i => _3;                   // in scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:9: 41:10
    }

    bb0: {
        _3 = &_1;                        // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:9: 41:10
        _5 = (*_3);                      // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:14: 41:15
        _4 = Gt(move _5, const 10_i32);  // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:14: 41:20
        switchInt(move _4) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:14: 41:20
    }

    bb1: {
        _0 = const 0_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:43:14: 43:15
        goto -> bb5;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:43:14: 43:15
    }

    bb2: {
        _2 = _1;                         // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:9: 41:10
        _0 = _2;                         // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:24: 41:25
        goto -> bb5;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:24: 41:25
    }

    bb3: {
        switchInt(_1) -> [1: bb4, otherwise: bb1]; // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:40:5: 40:12
    }

    bb4: {
        _0 = const 2_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:42:14: 42:15
        goto -> bb5;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:42:14: 42:15
    }

    bb5: {
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:45:2: 45:2
    }
}

// MIR FOR CTFE
fn match_(_1: i32) -> i32 {
    debug i => _1;                       // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:39:17: 39:18
    let mut _0: i32;                     // return place in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:39:28: 39:31
    let mut _2: &i32;                    // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:40:11: 40:12
    let _3: i32;                         // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:9: 41:10
    let _4: &i32;                        // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:9: 41:10
    let mut _5: bool;                    // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:14: 41:20
    let mut _6: i32;                     // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:14: 41:15
    scope 1 {
        debug i => _3;                   // in scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:9: 41:10
        debug i => _4;                   // in scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:9: 41:10
    }

    bb0: {
        StorageLive(_4);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:9: 41:10
        _4 = &_1;                        // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:9: 41:10
        StorageLive(_5);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:14: 41:20
        StorageLive(_6);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:14: 41:15
        _6 = (*_4);                      // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:14: 41:15
        _5 = Gt(move _6, const 10_i32);  // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:14: 41:20
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:14: 41:20
    }

    bb1: {
        _0 = const 0_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:43:14: 43:15
        goto -> bb5;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:43:14: 43:15
    }

    bb2: {
        StorageDead(_6);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:19: 41:20
        StorageDead(_5);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:19: 41:20
        StorageLive(_3);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:9: 41:10
        _3 = _1;                         // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:9: 41:10
        _0 = _3;                         // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:24: 41:25
        StorageDead(_3);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:24: 41:25
        StorageDead(_4);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:24: 41:25
        goto -> bb5;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:24: 41:25
    }

    bb3: {
        StorageDead(_6);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:19: 41:20
        StorageDead(_5);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:19: 41:20
        StorageDead(_4);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:41:24: 41:25
        switchInt(_1) -> [1: bb4, otherwise: bb1]; // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:40:5: 40:12
    }

    bb4: {
        _0 = const 2_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:42:14: 42:15
        goto -> bb5;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:42:14: 42:15
    }

    bb5: {
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:45:2: 45:2
    }
}

const Foo::IF: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:48:15: 48:18
    let mut _1: bool;                    // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:48:24: 48:28

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:48:24: 48:28
        _1 = const true;                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:48:24: 48:28
        switchInt(const true) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:48:24: 48:28
    }

    bb1: {
        _0 = const 5_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:48:31: 48:32
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:48:21: 48:45
    }

    bb2: {
        _0 = const 6_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:48:42: 48:43
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:48:21: 48:45
    }

    bb3: {
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:48:44: 48:45
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:48:5: 48:46
    }
}

const Foo::IF_LET: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:49:19: 49:22
    let mut _1: std::option::Option<bool>; // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:49:45: 49:49
    let mut _2: isize;                   // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:49:32: 49:42
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:49:45: 49:49
        _1 = const Option::<bool>::None; // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:49:45: 49:49
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/feature-gate-const-if-match.rs:49:45: 49:49
                                         // + literal: Const { ty: Option<bool>, val: Value(Scalar(0x02)) }
        _2 = const 0_isize;              // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:49:32: 49:42
        switchInt(const 0_isize) -> [1: bb1, otherwise: bb3]; // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:49:32: 49:42
    }

    bb1: {
        switchInt(const {transmute(0x02): bool}) -> [0: bb3, otherwise: bb2]; // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:49:32: 49:42
    }

    bb2: {
        _0 = const 5_i32;                // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:49:52: 49:53
        goto -> bb4;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:49:25: 49:66
    }

    bb3: {
        _0 = const 6_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:49:63: 49:64
        goto -> bb4;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:49:25: 49:66
    }

    bb4: {
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:49:65: 49:66
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:49:5: 49:67
    }
}

const Foo::MATCH: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:50:18: 50:21
    let mut _1: i32;                     // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:50:30: 50:31

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:50:30: 50:31
        _1 = const 0_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:50:30: 50:31
        switchInt(const 0_i32) -> [1: bb2, otherwise: bb1]; // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:50:24: 50:31
    }

    bb1: {
        _0 = const 0_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:52:14: 52:15
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:52:14: 52:15
    }

    bb2: {
        _0 = const 2_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:51:14: 51:15
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:51:14: 51:15
    }

    bb3: {
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:53:5: 53:6
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:50:5: 53:7
    }
}

const <impl at ui/consts/control-flow/feature-gate-const-if-match.rs:56:1: 56:16>::IF: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:57:15: 57:18
    let mut _1: bool;                    // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:57:24: 57:28

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:57:24: 57:28
        _1 = const true;                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:57:24: 57:28
        switchInt(const true) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:57:24: 57:28
    }

    bb1: {
        _0 = const 5_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:57:31: 57:32
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:57:21: 57:45
    }

    bb2: {
        _0 = const 6_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:57:42: 57:43
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:57:21: 57:45
    }

    bb3: {
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:57:44: 57:45
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:57:5: 57:46
    }
}

const <impl at ui/consts/control-flow/feature-gate-const-if-match.rs:56:1: 56:16>::IF_LET: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:58:19: 58:22
    let mut _1: std::option::Option<bool>; // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:58:45: 58:49
    let mut _2: isize;                   // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:58:32: 58:42
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:58:45: 58:49
        _1 = const Option::<bool>::None; // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:58:45: 58:49
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/feature-gate-const-if-match.rs:58:45: 58:49
                                         // + literal: Const { ty: Option<bool>, val: Value(Scalar(0x02)) }
        _2 = const 0_isize;              // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:58:32: 58:42
        switchInt(const 0_isize) -> [1: bb1, otherwise: bb3]; // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:58:32: 58:42
    }

    bb1: {
        switchInt(const {transmute(0x02): bool}) -> [0: bb3, otherwise: bb2]; // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:58:32: 58:42
    }

    bb2: {
        _0 = const 5_i32;                // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:58:52: 58:53
        goto -> bb4;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:58:25: 58:66
    }

    bb3: {
        _0 = const 6_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:58:63: 58:64
        goto -> bb4;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:58:25: 58:66
    }

    bb4: {
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:58:65: 58:66
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:58:5: 58:67
    }
}

const <impl at ui/consts/control-flow/feature-gate-const-if-match.rs:56:1: 56:16>::MATCH: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:59:18: 59:21
    let mut _1: i32;                     // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:59:30: 59:31

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:59:30: 59:31
        _1 = const 0_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:59:30: 59:31
        switchInt(const 0_i32) -> [1: bb2, otherwise: bb1]; // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:59:24: 59:31
    }

    bb1: {
        _0 = const 0_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:61:14: 61:15
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:61:14: 61:15
    }

    bb2: {
        _0 = const 2_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:60:14: 60:15
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:60:14: 60:15
    }

    bb3: {
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:62:5: 62:6
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:59:5: 62:7
    }
}

fn non_const_outside() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:65:24: 65:24

    bb0: {
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:74:2: 74:2
    }
}

fn const_inside(_1: bool) -> i32 {
    debug y => _1;                       // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:66:27: 66:28
    let _2: i32;                         // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:67:13: 67:14
    let mut _3: bool;                    // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:67:20: 67:21
    let mut _5: std::option::Option<i32>; // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:26: 72:33
    let mut _6: i32;                     // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:31: 72:32
    scope 1 {
        debug x => _2;                   // in scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:67:13: 67:14
        let _4: i32;                     // in scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:68:13: 68:14
        scope 2 {
            debug x => _4;               // in scope 2 at ui/consts/control-flow/feature-gate-const-if-match.rs:68:13: 68:14
            scope 3 {
                debug x => _0;           // in scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:21: 72:22
                let mut _0: i32;         // return place in scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:21: 72:22
            }
        }
    }

    bb0: {
        _3 = _1;                         // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:67:20: 67:21
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:67:20: 67:21
    }

    bb1: {
        _2 = const 0_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:67:24: 67:25
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:67:17: 67:38
    }

    bb2: {
        _2 = const 1_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:67:35: 67:36
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:67:17: 67:38
    }

    bb3: {
        switchInt(_2) -> [0: bb5, otherwise: bb4]; // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:68:17: 68:24
    }

    bb4: {
        _4 = const 0_i32;                // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:70:18: 70:19
        goto -> bb6;                     // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:70:18: 70:19
    }

    bb5: {
        _4 = const 1_i32;                // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:69:18: 69:19
        goto -> bb6;                     // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:69:18: 69:19
    }

    bb6: {
        _6 = _4;                         // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:31: 72:32
        _5 = Option::<i32>::Some(move _6); // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:26: 72:33
        _0 = ((_5 as Some).0: i32);      // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:21: 72:22
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:73:6: 73:6
    }
}

// MIR FOR CTFE
fn const_inside(_1: bool) -> i32 {
    debug y => _1;                       // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:66:27: 66:28
    let mut _0: i32;                     // return place in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:66:39: 66:42
    let _2: i32;                         // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:67:13: 67:14
    let mut _3: bool;                    // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:67:20: 67:21
    let mut _5: std::option::Option<i32>; // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:26: 72:33
    let mut _6: i32;                     // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:31: 72:32
    let mut _7: isize;                   // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:16: 72:23
    scope 1 {
        debug x => _2;                   // in scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:67:13: 67:14
        let _4: i32;                     // in scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:68:13: 68:14
        scope 2 {
            debug x => _4;               // in scope 2 at ui/consts/control-flow/feature-gate-const-if-match.rs:68:13: 68:14
            scope 3 {
                debug x => _8;           // in scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:21: 72:22
                let _8: i32;             // in scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:21: 72:22
            }
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:67:13: 67:14
        StorageLive(_3);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:67:20: 67:21
        _3 = _1;                         // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:67:20: 67:21
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:67:20: 67:21
    }

    bb1: {
        _2 = const 0_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:67:24: 67:25
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:67:17: 67:38
    }

    bb2: {
        _2 = const 1_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:67:35: 67:36
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:67:17: 67:38
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:67:37: 67:38
        StorageLive(_4);                 // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:68:13: 68:14
        switchInt(_2) -> [0: bb5, otherwise: bb4]; // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:68:17: 68:24
    }

    bb4: {
        _4 = const 0_i32;                // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:70:18: 70:19
        goto -> bb6;                     // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:70:18: 70:19
    }

    bb5: {
        _4 = const 1_i32;                // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:69:18: 69:19
        goto -> bb6;                     // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:69:18: 69:19
    }

    bb6: {
        StorageLive(_5);                 // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:26: 72:33
        StorageLive(_6);                 // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:31: 72:32
        _6 = _4;                         // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:31: 72:32
        _5 = Option::<i32>::Some(move _6); // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:26: 72:33
        StorageDead(_6);                 // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:32: 72:33
        _7 = discriminant(_5);           // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:16: 72:23
        switchInt(move _7) -> [1: bb7, otherwise: bb8]; // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:16: 72:23
    }

    bb7: {
        StorageLive(_8);                 // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:21: 72:22
        _8 = ((_5 as Some).0: i32);      // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:21: 72:22
        _0 = _8;                         // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:36: 72:37
        StorageDead(_8);                 // scope 2 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:38: 72:39
        goto -> bb9;                     // scope 2 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:9: 72:50
    }

    bb8: {
        _0 = const 1_i32;                // scope 2 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:47: 72:48
        goto -> bb9;                     // scope 2 at ui/consts/control-flow/feature-gate-const-if-match.rs:72:9: 72:50
    }

    bb9: {
        StorageDead(_4);                 // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:73:5: 73:6
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:73:5: 73:6
        StorageDead(_5);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:73:5: 73:6
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:73:6: 73:6
    }
}

fn const_outside() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:76:26: 76:26

    bb0: {
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:85:2: 85:2
    }
}

// MIR FOR CTFE
fn const_outside() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:76:26: 76:26

    bb0: {
        _0 = const ();                   // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:76:26: 85:2
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:85:2: 85:2
    }
}

fn non_const_inside(_1: bool) -> i32 {
    debug y => _1;                       // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:77:25: 77:26
    let _2: i32;                         // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:78:13: 78:14
    let mut _3: bool;                    // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:78:20: 78:21
    let mut _5: std::option::Option<i32>; // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:83:26: 83:33
    let mut _6: i32;                     // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:83:31: 83:32
    scope 1 {
        debug x => _2;                   // in scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:78:13: 78:14
        let _4: i32;                     // in scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:79:13: 79:14
        scope 2 {
            debug x => _4;               // in scope 2 at ui/consts/control-flow/feature-gate-const-if-match.rs:79:13: 79:14
            scope 3 {
                debug x => _0;           // in scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:83:21: 83:22
                let mut _0: i32;         // return place in scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:83:21: 83:22
            }
        }
    }

    bb0: {
        _3 = _1;                         // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:78:20: 78:21
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:78:20: 78:21
    }

    bb1: {
        _2 = const 0_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:78:24: 78:25
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:78:17: 78:38
    }

    bb2: {
        _2 = const 1_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:78:35: 78:36
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:78:17: 78:38
    }

    bb3: {
        switchInt(_2) -> [0: bb5, otherwise: bb4]; // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:79:17: 79:24
    }

    bb4: {
        _4 = const 0_i32;                // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:81:18: 81:19
        goto -> bb6;                     // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:81:18: 81:19
    }

    bb5: {
        _4 = const 1_i32;                // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:80:18: 80:19
        goto -> bb6;                     // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:80:18: 80:19
    }

    bb6: {
        _6 = _4;                         // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:83:31: 83:32
        _5 = Option::<i32>::Some(move _6); // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:83:26: 83:33
        _0 = ((_5 as Some).0: i32);      // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:83:21: 83:22
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:84:6: 84:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:87:11: 87:11
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:96:2: 96:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:88:17: 95:6
    let _1: i32;                         // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:89:13: 89:14
    let mut _2: bool;                    // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:89:20: 89:25
    let mut _4: std::option::Option<usize>; // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:94:26: 94:33
    let mut _5: usize;                   // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:94:31: 94:32
    let mut _6: isize;                   // in scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:94:16: 94:23
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:89:13: 89:14
        let _3: usize;                   // in scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:90:13: 90:14
        scope 2 {
            debug x => _3;               // in scope 2 at ui/consts/control-flow/feature-gate-const-if-match.rs:90:13: 90:14
            scope 3 {
                debug x => _7;           // in scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:94:21: 94:22
                let _7: usize;           // in scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:94:21: 94:22
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:89:13: 89:14
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:89:20: 89:25
        _2 = const false;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:89:20: 89:25
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:89:20: 89:25
    }

    bb1: {
        _1 = const 0_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:89:28: 89:29
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:89:17: 89:42
    }

    bb2: {
        _1 = const 1_i32;                // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:89:39: 89:40
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:89:17: 89:42
    }

    bb3: {
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:89:41: 89:42
        StorageLive(_3);                 // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:90:13: 90:14
        switchInt(_1) -> [0: bb5, otherwise: bb4]; // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:90:17: 90:24
    }

    bb4: {
        _3 = const 0_usize;              // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:92:18: 92:19
        goto -> bb6;                     // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:92:18: 92:19
    }

    bb5: {
        _3 = const 1_usize;              // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:91:18: 91:19
        goto -> bb6;                     // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:91:18: 91:19
    }

    bb6: {
        StorageLive(_4);                 // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:94:26: 94:33
        StorageLive(_5);                 // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:94:31: 94:32
        _5 = _3;                         // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:94:31: 94:32
        _4 = Option::<usize>::Some(move _5); // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:94:26: 94:33
        StorageDead(_5);                 // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:94:32: 94:33
        _6 = discriminant(_4);           // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:94:16: 94:23
        switchInt(move _6) -> [1: bb7, otherwise: bb8]; // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:94:16: 94:23
    }

    bb7: {
        StorageLive(_7);                 // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:94:21: 94:22
        _7 = ((_4 as Some).0: usize);    // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:94:21: 94:22
        _0 = _7;                         // scope 3 at ui/consts/control-flow/feature-gate-const-if-match.rs:94:36: 94:37
        StorageDead(_7);                 // scope 2 at ui/consts/control-flow/feature-gate-const-if-match.rs:94:38: 94:39
        goto -> bb9;                     // scope 2 at ui/consts/control-flow/feature-gate-const-if-match.rs:94:9: 94:50
    }

    bb8: {
        _0 = const 1_usize;              // scope 2 at ui/consts/control-flow/feature-gate-const-if-match.rs:94:47: 94:48
        goto -> bb9;                     // scope 2 at ui/consts/control-flow/feature-gate-const-if-match.rs:94:9: 94:50
    }

    bb9: {
        StorageDead(_3);                 // scope 1 at ui/consts/control-flow/feature-gate-const-if-match.rs:95:5: 95:6
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:95:5: 95:6
        StorageDead(_4);                 // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:95:5: 95:6
        return;                          // scope 0 at ui/consts/control-flow/feature-gate-const-if-match.rs:88:17: 95:6
    }
}
