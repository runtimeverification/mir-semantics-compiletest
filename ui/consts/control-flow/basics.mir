// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const X: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/control-flow/basics.rs:5:10: 5:13

    bb0: {
        _0 = const 4_u32;                // scope 0 at ui/consts/control-flow/basics.rs:5:16: 5:17
        return;                          // scope 0 at ui/consts/control-flow/basics.rs:5:1: 5:18
    }
}

const Y: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/control-flow/basics.rs:6:10: 6:13

    bb0: {
        _0 = const 5_u32;                // scope 0 at ui/consts/control-flow/basics.rs:6:16: 6:17
        return;                          // scope 0 at ui/consts/control-flow/basics.rs:6:1: 6:18
    }
}

const ABS_DIFF: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/control-flow/basics.rs:8:17: 8:20
    let mut _1: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:8:26: 8:31
    let mut _2: (u32, bool);             // in scope 0 at ui/consts/control-flow/basics.rs:9:5: 9:10
    let mut _3: (u32, bool);             // in scope 0 at ui/consts/control-flow/basics.rs:11:5: 11:10

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/basics.rs:8:26: 8:31
        _1 = Lt(const _, const _);       // scope 0 at ui/consts/control-flow/basics.rs:8:26: 8:31
        switchInt(move _1) -> [0: bb3, otherwise: bb1]; // scope 0 at ui/consts/control-flow/basics.rs:8:26: 8:31
    }

    bb1: {
        _2 = CheckedSub(const _, const _); // scope 0 at ui/consts/control-flow/basics.rs:9:5: 9:10
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, const _) -> bb2; // scope 0 at ui/consts/control-flow/basics.rs:9:5: 9:10
    }

    bb2: {
        _0 = move (_2.0: u32);           // scope 0 at ui/consts/control-flow/basics.rs:9:5: 9:10
        goto -> bb5;                     // scope 0 at ui/consts/control-flow/basics.rs:8:23: 12:2
    }

    bb3: {
        _3 = CheckedSub(const _, const _); // scope 0 at ui/consts/control-flow/basics.rs:11:5: 11:10
        assert(!move (_3.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, const _) -> bb4; // scope 0 at ui/consts/control-flow/basics.rs:11:5: 11:10
    }

    bb4: {
        _0 = move (_3.0: u32);           // scope 0 at ui/consts/control-flow/basics.rs:11:5: 11:10
        goto -> bb5;                     // scope 0 at ui/consts/control-flow/basics.rs:8:23: 12:2
    }

    bb5: {
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/basics.rs:12:1: 12:2
        return;                          // scope 0 at ui/consts/control-flow/basics.rs:8:1: 12:3
    }
}

fn abs_diff(_1: u32, _2: u32) -> u32 {
    debug a => _1;                       // in scope 0 at ui/consts/control-flow/basics.rs:14:19: 14:20
    debug b => _2;                       // in scope 0 at ui/consts/control-flow/basics.rs:14:27: 14:28
    let mut _0: u32;                     // return place in scope 0 at ui/consts/control-flow/basics.rs:14:38: 14:41
    let mut _3: (u32, u32);              // in scope 0 at ui/consts/control-flow/basics.rs:15:11: 15:17
    let mut _4: u32;                     // in scope 0 at ui/consts/control-flow/basics.rs:15:12: 15:13
    let mut _5: u32;                     // in scope 0 at ui/consts/control-flow/basics.rs:15:15: 15:16
    let _6: u32;                         // in scope 0 at ui/consts/control-flow/basics.rs:16:10: 16:13
    let _7: &u32;                        // in scope 0 at ui/consts/control-flow/basics.rs:16:10: 16:13
    let _8: u32;                         // in scope 0 at ui/consts/control-flow/basics.rs:16:15: 16:21
    let _9: &u32;                        // in scope 0 at ui/consts/control-flow/basics.rs:16:15: 16:21
    let mut _10: bool;                   // in scope 0 at ui/consts/control-flow/basics.rs:16:26: 16:38
    let mut _11: u32;                    // in scope 0 at ui/consts/control-flow/basics.rs:16:26: 16:29
    let mut _12: u32;                    // in scope 0 at ui/consts/control-flow/basics.rs:16:32: 16:38
    let mut _13: u32;                    // in scope 0 at ui/consts/control-flow/basics.rs:16:42: 16:45
    let mut _14: u32;                    // in scope 0 at ui/consts/control-flow/basics.rs:16:48: 16:54
    let mut _15: (u32, bool);            // in scope 0 at ui/consts/control-flow/basics.rs:16:42: 16:54
    let _16: u32;                        // in scope 0 at ui/consts/control-flow/basics.rs:17:10: 17:16
    let _17: u32;                        // in scope 0 at ui/consts/control-flow/basics.rs:17:18: 17:21
    let mut _18: u32;                    // in scope 0 at ui/consts/control-flow/basics.rs:17:26: 17:29
    let mut _19: u32;                    // in scope 0 at ui/consts/control-flow/basics.rs:17:32: 17:38
    let mut _20: (u32, bool);            // in scope 0 at ui/consts/control-flow/basics.rs:17:26: 17:38
    scope 1 {
        debug big => _6;                 // in scope 1 at ui/consts/control-flow/basics.rs:16:10: 16:13
        debug big => _7;                 // in scope 1 at ui/consts/control-flow/basics.rs:16:10: 16:13
        debug little => _8;              // in scope 1 at ui/consts/control-flow/basics.rs:16:15: 16:21
        debug little => _9;              // in scope 1 at ui/consts/control-flow/basics.rs:16:15: 16:21
    }
    scope 2 {
        debug little => _16;             // in scope 2 at ui/consts/control-flow/basics.rs:17:10: 17:16
        debug big => _17;                // in scope 2 at ui/consts/control-flow/basics.rs:17:18: 17:21
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/consts/control-flow/basics.rs:15:12: 15:13
        _5 = _2;                         // scope 0 at ui/consts/control-flow/basics.rs:15:15: 15:16
        _3 = (move _4, move _5);         // scope 0 at ui/consts/control-flow/basics.rs:15:11: 15:17
        _7 = &(_3.0: u32);               // scope 0 at ui/consts/control-flow/basics.rs:16:10: 16:13
        _9 = &(_3.1: u32);               // scope 0 at ui/consts/control-flow/basics.rs:16:15: 16:21
        _11 = (*_7);                     // scope 0 at ui/consts/control-flow/basics.rs:16:26: 16:29
        _12 = (*_9);                     // scope 0 at ui/consts/control-flow/basics.rs:16:32: 16:38
        _10 = Gt(move _11, move _12);    // scope 0 at ui/consts/control-flow/basics.rs:16:26: 16:38
        switchInt(move _10) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/consts/control-flow/basics.rs:16:26: 16:38
    }

    bb1: {
        _6 = (_3.0: u32);                // scope 0 at ui/consts/control-flow/basics.rs:16:10: 16:13
        _8 = (_3.1: u32);                // scope 0 at ui/consts/control-flow/basics.rs:16:15: 16:21
        _13 = _6;                        // scope 1 at ui/consts/control-flow/basics.rs:16:42: 16:45
        _14 = _8;                        // scope 1 at ui/consts/control-flow/basics.rs:16:48: 16:54
        _15 = CheckedSub(_13, _14);      // scope 1 at ui/consts/control-flow/basics.rs:16:42: 16:54
        assert(!move (_15.1: bool), "attempt to compute `{} - {}`, which would overflow", move _13, move _14) -> bb3; // scope 1 at ui/consts/control-flow/basics.rs:16:42: 16:54
    }

    bb2: {
        _16 = (_3.0: u32);               // scope 0 at ui/consts/control-flow/basics.rs:17:10: 17:16
        _17 = (_3.1: u32);               // scope 0 at ui/consts/control-flow/basics.rs:17:18: 17:21
        _18 = _17;                       // scope 2 at ui/consts/control-flow/basics.rs:17:26: 17:29
        _19 = _16;                       // scope 2 at ui/consts/control-flow/basics.rs:17:32: 17:38
        _20 = CheckedSub(_18, _19);      // scope 2 at ui/consts/control-flow/basics.rs:17:26: 17:38
        assert(!move (_20.1: bool), "attempt to compute `{} - {}`, which would overflow", move _18, move _19) -> bb4; // scope 2 at ui/consts/control-flow/basics.rs:17:26: 17:38
    }

    bb3: {
        _0 = move (_15.0: u32);          // scope 1 at ui/consts/control-flow/basics.rs:16:42: 16:54
        goto -> bb5;                     // scope 0 at ui/consts/control-flow/basics.rs:16:53: 16:54
    }

    bb4: {
        _0 = move (_20.0: u32);          // scope 2 at ui/consts/control-flow/basics.rs:17:26: 17:38
        goto -> bb5;                     // scope 0 at ui/consts/control-flow/basics.rs:17:37: 17:38
    }

    bb5: {
        return;                          // scope 0 at ui/consts/control-flow/basics.rs:19:2: 19:2
    }
}

// MIR FOR CTFE
fn abs_diff(_1: u32, _2: u32) -> u32 {
    debug a => _1;                       // in scope 0 at ui/consts/control-flow/basics.rs:14:19: 14:20
    debug b => _2;                       // in scope 0 at ui/consts/control-flow/basics.rs:14:27: 14:28
    let mut _0: u32;                     // return place in scope 0 at ui/consts/control-flow/basics.rs:14:38: 14:41
    let mut _3: (u32, u32);              // in scope 0 at ui/consts/control-flow/basics.rs:15:11: 15:17
    let mut _4: u32;                     // in scope 0 at ui/consts/control-flow/basics.rs:15:12: 15:13
    let mut _5: u32;                     // in scope 0 at ui/consts/control-flow/basics.rs:15:15: 15:16
    let _6: u32;                         // in scope 0 at ui/consts/control-flow/basics.rs:16:10: 16:13
    let _7: &u32;                        // in scope 0 at ui/consts/control-flow/basics.rs:16:10: 16:13
    let _8: u32;                         // in scope 0 at ui/consts/control-flow/basics.rs:16:15: 16:21
    let _9: &u32;                        // in scope 0 at ui/consts/control-flow/basics.rs:16:15: 16:21
    let mut _10: bool;                   // in scope 0 at ui/consts/control-flow/basics.rs:16:26: 16:38
    let mut _11: u32;                    // in scope 0 at ui/consts/control-flow/basics.rs:16:26: 16:29
    let mut _12: u32;                    // in scope 0 at ui/consts/control-flow/basics.rs:16:32: 16:38
    let mut _13: u32;                    // in scope 0 at ui/consts/control-flow/basics.rs:16:42: 16:45
    let mut _14: u32;                    // in scope 0 at ui/consts/control-flow/basics.rs:16:48: 16:54
    let mut _15: (u32, bool);            // in scope 0 at ui/consts/control-flow/basics.rs:16:42: 16:54
    let _16: u32;                        // in scope 0 at ui/consts/control-flow/basics.rs:17:10: 17:16
    let _17: u32;                        // in scope 0 at ui/consts/control-flow/basics.rs:17:18: 17:21
    let mut _18: u32;                    // in scope 0 at ui/consts/control-flow/basics.rs:17:26: 17:29
    let mut _19: u32;                    // in scope 0 at ui/consts/control-flow/basics.rs:17:32: 17:38
    let mut _20: (u32, bool);            // in scope 0 at ui/consts/control-flow/basics.rs:17:26: 17:38
    scope 1 {
        debug big => _6;                 // in scope 1 at ui/consts/control-flow/basics.rs:16:10: 16:13
        debug big => _7;                 // in scope 1 at ui/consts/control-flow/basics.rs:16:10: 16:13
        debug little => _8;              // in scope 1 at ui/consts/control-flow/basics.rs:16:15: 16:21
        debug little => _9;              // in scope 1 at ui/consts/control-flow/basics.rs:16:15: 16:21
    }
    scope 2 {
        debug little => _16;             // in scope 2 at ui/consts/control-flow/basics.rs:17:10: 17:16
        debug big => _17;                // in scope 2 at ui/consts/control-flow/basics.rs:17:18: 17:21
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:15:11: 15:17
        StorageLive(_4);                 // scope 0 at ui/consts/control-flow/basics.rs:15:12: 15:13
        _4 = _1;                         // scope 0 at ui/consts/control-flow/basics.rs:15:12: 15:13
        StorageLive(_5);                 // scope 0 at ui/consts/control-flow/basics.rs:15:15: 15:16
        _5 = _2;                         // scope 0 at ui/consts/control-flow/basics.rs:15:15: 15:16
        _3 = (move _4, move _5);         // scope 0 at ui/consts/control-flow/basics.rs:15:11: 15:17
        StorageDead(_5);                 // scope 0 at ui/consts/control-flow/basics.rs:15:16: 15:17
        StorageDead(_4);                 // scope 0 at ui/consts/control-flow/basics.rs:15:16: 15:17
        StorageLive(_7);                 // scope 0 at ui/consts/control-flow/basics.rs:16:10: 16:13
        _7 = &(_3.0: u32);               // scope 0 at ui/consts/control-flow/basics.rs:16:10: 16:13
        StorageLive(_9);                 // scope 0 at ui/consts/control-flow/basics.rs:16:15: 16:21
        _9 = &(_3.1: u32);               // scope 0 at ui/consts/control-flow/basics.rs:16:15: 16:21
        StorageLive(_10);                // scope 0 at ui/consts/control-flow/basics.rs:16:26: 16:38
        StorageLive(_11);                // scope 0 at ui/consts/control-flow/basics.rs:16:26: 16:29
        _11 = (*_7);                     // scope 0 at ui/consts/control-flow/basics.rs:16:26: 16:29
        StorageLive(_12);                // scope 0 at ui/consts/control-flow/basics.rs:16:32: 16:38
        _12 = (*_9);                     // scope 0 at ui/consts/control-flow/basics.rs:16:32: 16:38
        _10 = Gt(move _11, move _12);    // scope 0 at ui/consts/control-flow/basics.rs:16:26: 16:38
        switchInt(move _10) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/consts/control-flow/basics.rs:16:26: 16:38
    }

    bb1: {
        StorageDead(_12);                // scope 0 at ui/consts/control-flow/basics.rs:16:37: 16:38
        StorageDead(_11);                // scope 0 at ui/consts/control-flow/basics.rs:16:37: 16:38
        StorageDead(_10);                // scope 0 at ui/consts/control-flow/basics.rs:16:37: 16:38
        StorageLive(_6);                 // scope 0 at ui/consts/control-flow/basics.rs:16:10: 16:13
        _6 = (_3.0: u32);                // scope 0 at ui/consts/control-flow/basics.rs:16:10: 16:13
        StorageLive(_8);                 // scope 0 at ui/consts/control-flow/basics.rs:16:15: 16:21
        _8 = (_3.1: u32);                // scope 0 at ui/consts/control-flow/basics.rs:16:15: 16:21
        StorageLive(_13);                // scope 1 at ui/consts/control-flow/basics.rs:16:42: 16:45
        _13 = _6;                        // scope 1 at ui/consts/control-flow/basics.rs:16:42: 16:45
        StorageLive(_14);                // scope 1 at ui/consts/control-flow/basics.rs:16:48: 16:54
        _14 = _8;                        // scope 1 at ui/consts/control-flow/basics.rs:16:48: 16:54
        _15 = CheckedSub(_13, _14);      // scope 1 at ui/consts/control-flow/basics.rs:16:42: 16:54
        assert(!move (_15.1: bool), "attempt to compute `{} - {}`, which would overflow", move _13, move _14) -> bb3; // scope 1 at ui/consts/control-flow/basics.rs:16:42: 16:54
    }

    bb2: {
        StorageDead(_12);                // scope 0 at ui/consts/control-flow/basics.rs:16:37: 16:38
        StorageDead(_11);                // scope 0 at ui/consts/control-flow/basics.rs:16:37: 16:38
        StorageDead(_10);                // scope 0 at ui/consts/control-flow/basics.rs:16:37: 16:38
        StorageDead(_9);                 // scope 0 at ui/consts/control-flow/basics.rs:16:53: 16:54
        StorageDead(_7);                 // scope 0 at ui/consts/control-flow/basics.rs:16:53: 16:54
        StorageLive(_16);                // scope 0 at ui/consts/control-flow/basics.rs:17:10: 17:16
        _16 = (_3.0: u32);               // scope 0 at ui/consts/control-flow/basics.rs:17:10: 17:16
        StorageLive(_17);                // scope 0 at ui/consts/control-flow/basics.rs:17:18: 17:21
        _17 = (_3.1: u32);               // scope 0 at ui/consts/control-flow/basics.rs:17:18: 17:21
        StorageLive(_18);                // scope 2 at ui/consts/control-flow/basics.rs:17:26: 17:29
        _18 = _17;                       // scope 2 at ui/consts/control-flow/basics.rs:17:26: 17:29
        StorageLive(_19);                // scope 2 at ui/consts/control-flow/basics.rs:17:32: 17:38
        _19 = _16;                       // scope 2 at ui/consts/control-flow/basics.rs:17:32: 17:38
        _20 = CheckedSub(_18, _19);      // scope 2 at ui/consts/control-flow/basics.rs:17:26: 17:38
        assert(!move (_20.1: bool), "attempt to compute `{} - {}`, which would overflow", move _18, move _19) -> bb4; // scope 2 at ui/consts/control-flow/basics.rs:17:26: 17:38
    }

    bb3: {
        _0 = move (_15.0: u32);          // scope 1 at ui/consts/control-flow/basics.rs:16:42: 16:54
        StorageDead(_14);                // scope 1 at ui/consts/control-flow/basics.rs:16:53: 16:54
        StorageDead(_13);                // scope 1 at ui/consts/control-flow/basics.rs:16:53: 16:54
        StorageDead(_8);                 // scope 0 at ui/consts/control-flow/basics.rs:16:53: 16:54
        StorageDead(_6);                 // scope 0 at ui/consts/control-flow/basics.rs:16:53: 16:54
        StorageDead(_9);                 // scope 0 at ui/consts/control-flow/basics.rs:16:53: 16:54
        StorageDead(_7);                 // scope 0 at ui/consts/control-flow/basics.rs:16:53: 16:54
        goto -> bb5;                     // scope 0 at ui/consts/control-flow/basics.rs:16:53: 16:54
    }

    bb4: {
        _0 = move (_20.0: u32);          // scope 2 at ui/consts/control-flow/basics.rs:17:26: 17:38
        StorageDead(_19);                // scope 2 at ui/consts/control-flow/basics.rs:17:37: 17:38
        StorageDead(_18);                // scope 2 at ui/consts/control-flow/basics.rs:17:37: 17:38
        StorageDead(_17);                // scope 0 at ui/consts/control-flow/basics.rs:17:37: 17:38
        StorageDead(_16);                // scope 0 at ui/consts/control-flow/basics.rs:17:37: 17:38
        goto -> bb5;                     // scope 0 at ui/consts/control-flow/basics.rs:17:37: 17:38
    }

    bb5: {
        StorageDead(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:19:1: 19:2
        return;                          // scope 0 at ui/consts/control-flow/basics.rs:19:2: 19:2
    }
}

fn gcd(_1: u32, _2: u32) -> u32 {
    debug a => _1;                       // in scope 0 at ui/consts/control-flow/basics.rs:21:14: 21:15
    debug b => _2;                       // in scope 0 at ui/consts/control-flow/basics.rs:21:22: 21:23
    let mut _0: u32;                     // return place in scope 0 at ui/consts/control-flow/basics.rs:21:33: 21:36
    let mut _3: u32;                     // in scope 0 at ui/consts/control-flow/basics.rs:22:8: 22:9
    let mut _4: u32;                     // in scope 0 at ui/consts/control-flow/basics.rs:26:9: 26:10
    let mut _5: u32;                     // in scope 0 at ui/consts/control-flow/basics.rs:26:12: 26:17
    let mut _6: u32;                     // in scope 0 at ui/consts/control-flow/basics.rs:26:12: 26:13
    let mut _7: u32;                     // in scope 0 at ui/consts/control-flow/basics.rs:26:16: 26:17
    let mut _8: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:26:12: 26:17

    bb0: {
        _3 = _2;                         // scope 0 at ui/consts/control-flow/basics.rs:22:8: 22:9
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/consts/control-flow/basics.rs:22:8: 22:14
    }

    bb1: {
        _0 = _1;                         // scope 0 at ui/consts/control-flow/basics.rs:23:16: 23:17
        goto -> bb4;                     // scope 0 at ui/consts/control-flow/basics.rs:27:2: 27:2
    }

    bb2: {
        _4 = _2;                         // scope 0 at ui/consts/control-flow/basics.rs:26:9: 26:10
        _6 = _1;                         // scope 0 at ui/consts/control-flow/basics.rs:26:12: 26:13
        _7 = _2;                         // scope 0 at ui/consts/control-flow/basics.rs:26:16: 26:17
        _8 = Eq(_7, const 0_u32);        // scope 0 at ui/consts/control-flow/basics.rs:26:12: 26:17
        assert(!move _8, "attempt to calculate the remainder of `{}` with a divisor of zero", _6) -> bb3; // scope 0 at ui/consts/control-flow/basics.rs:26:12: 26:17
    }

    bb3: {
        _5 = Rem(move _6, move _7);      // scope 0 at ui/consts/control-flow/basics.rs:26:12: 26:17
        _0 = gcd(move _4, move _5) -> bb4; // scope 0 at ui/consts/control-flow/basics.rs:26:5: 26:18
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:26:5: 26:8
                                         // + literal: Const { ty: fn(u32, u32) -> u32 {gcd}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/consts/control-flow/basics.rs:27:2: 27:2
    }
}

// MIR FOR CTFE
fn gcd(_1: u32, _2: u32) -> u32 {
    debug a => _1;                       // in scope 0 at ui/consts/control-flow/basics.rs:21:14: 21:15
    debug b => _2;                       // in scope 0 at ui/consts/control-flow/basics.rs:21:22: 21:23
    let mut _0: u32;                     // return place in scope 0 at ui/consts/control-flow/basics.rs:21:33: 21:36
    let _3: ();                          // in scope 0 at ui/consts/control-flow/basics.rs:22:5: 24:6
    let mut _4: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:22:8: 22:14
    let mut _5: u32;                     // in scope 0 at ui/consts/control-flow/basics.rs:22:8: 22:9
    let mut _6: !;                       // in scope 0 at ui/consts/control-flow/basics.rs:22:15: 24:6
    let mut _7: u32;                     // in scope 0 at ui/consts/control-flow/basics.rs:26:9: 26:10
    let mut _8: u32;                     // in scope 0 at ui/consts/control-flow/basics.rs:26:12: 26:17
    let mut _9: u32;                     // in scope 0 at ui/consts/control-flow/basics.rs:26:12: 26:13
    let mut _10: u32;                    // in scope 0 at ui/consts/control-flow/basics.rs:26:16: 26:17
    let mut _11: bool;                   // in scope 0 at ui/consts/control-flow/basics.rs:26:12: 26:17

    bb0: {
        StorageLive(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:22:5: 24:6
        StorageLive(_4);                 // scope 0 at ui/consts/control-flow/basics.rs:22:8: 22:14
        StorageLive(_5);                 // scope 0 at ui/consts/control-flow/basics.rs:22:8: 22:9
        _5 = _2;                         // scope 0 at ui/consts/control-flow/basics.rs:22:8: 22:9
        _4 = Eq(move _5, const 0_u32);   // scope 0 at ui/consts/control-flow/basics.rs:22:8: 22:14
        StorageDead(_5);                 // scope 0 at ui/consts/control-flow/basics.rs:22:13: 22:14
        switchInt(move _4) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/consts/control-flow/basics.rs:22:8: 22:14
    }

    bb1: {
        _0 = _1;                         // scope 0 at ui/consts/control-flow/basics.rs:23:16: 23:17
        StorageDead(_4);                 // scope 0 at ui/consts/control-flow/basics.rs:24:5: 24:6
        StorageDead(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:24:5: 24:6
        goto -> bb5;                     // scope 0 at ui/consts/control-flow/basics.rs:27:2: 27:2
    }

    bb2: {
        _3 = const ();                   // scope 0 at ui/consts/control-flow/basics.rs:24:6: 24:6
        StorageDead(_4);                 // scope 0 at ui/consts/control-flow/basics.rs:24:5: 24:6
        StorageDead(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:24:5: 24:6
        StorageLive(_7);                 // scope 0 at ui/consts/control-flow/basics.rs:26:9: 26:10
        _7 = _2;                         // scope 0 at ui/consts/control-flow/basics.rs:26:9: 26:10
        StorageLive(_8);                 // scope 0 at ui/consts/control-flow/basics.rs:26:12: 26:17
        StorageLive(_9);                 // scope 0 at ui/consts/control-flow/basics.rs:26:12: 26:13
        _9 = _1;                         // scope 0 at ui/consts/control-flow/basics.rs:26:12: 26:13
        StorageLive(_10);                // scope 0 at ui/consts/control-flow/basics.rs:26:16: 26:17
        _10 = _2;                        // scope 0 at ui/consts/control-flow/basics.rs:26:16: 26:17
        _11 = Eq(_10, const 0_u32);      // scope 0 at ui/consts/control-flow/basics.rs:26:12: 26:17
        assert(!move _11, "attempt to calculate the remainder of `{}` with a divisor of zero", _9) -> bb3; // scope 0 at ui/consts/control-flow/basics.rs:26:12: 26:17
    }

    bb3: {
        _8 = Rem(move _9, move _10);     // scope 0 at ui/consts/control-flow/basics.rs:26:12: 26:17
        StorageDead(_10);                // scope 0 at ui/consts/control-flow/basics.rs:26:16: 26:17
        StorageDead(_9);                 // scope 0 at ui/consts/control-flow/basics.rs:26:16: 26:17
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/basics.rs:26:5: 26:18
        _0 = gcd(move _7, move _8) -> bb4; // scope 0 at ui/consts/control-flow/basics.rs:26:5: 26:18
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:26:5: 26:8
                                         // + literal: Const { ty: fn(u32, u32) -> u32 {gcd}, val: Value(<ZST>) }
    }

    bb4: {
        StorageDead(_8);                 // scope 0 at ui/consts/control-flow/basics.rs:26:17: 26:18
        StorageDead(_7);                 // scope 0 at ui/consts/control-flow/basics.rs:26:17: 26:18
        goto -> bb5;                     // scope 0 at ui/consts/control-flow/basics.rs:27:2: 27:2
    }

    bb5: {
        return;                          // scope 0 at ui/consts/control-flow/basics.rs:27:2: 27:2
    }
}

fn fib(_1: u64) -> u64 {
    debug n => _1;                       // in scope 0 at ui/consts/control-flow/basics.rs:29:14: 29:15
    let mut _0: u64;                     // return place in scope 0 at ui/consts/control-flow/basics.rs:29:25: 29:28
    let mut _2: u64;                     // in scope 0 at ui/consts/control-flow/basics.rs:30:8: 30:9
    let mut _3: (u64, u64);              // in scope 0 at ui/consts/control-flow/basics.rs:34:9: 34:16
    let mut _5: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:36:11: 36:16
    let mut _6: u64;                     // in scope 0 at ui/consts/control-flow/basics.rs:36:11: 36:12
    let mut _7: u64;                     // in scope 0 at ui/consts/control-flow/basics.rs:36:15: 36:16
    let mut _8: u64;                     // in scope 0 at ui/consts/control-flow/basics.rs:37:16: 37:21
    let mut _9: u64;                     // in scope 0 at ui/consts/control-flow/basics.rs:37:23: 37:36
    let mut _10: u64;                    // in scope 0 at ui/consts/control-flow/basics.rs:37:23: 37:28
    let mut _11: u64;                    // in scope 0 at ui/consts/control-flow/basics.rs:37:31: 37:36
    let mut _12: (u64, bool);            // in scope 0 at ui/consts/control-flow/basics.rs:37:23: 37:36
    let mut _13: (u64, bool);            // in scope 0 at ui/consts/control-flow/basics.rs:38:9: 38:15
    scope 1 {
        debug fib => _3;                 // in scope 1 at ui/consts/control-flow/basics.rs:34:9: 34:16
        let mut _4: u64;                 // in scope 1 at ui/consts/control-flow/basics.rs:35:9: 35:14
        scope 2 {
            debug i => _4;               // in scope 2 at ui/consts/control-flow/basics.rs:35:9: 35:14
        }
    }

    bb0: {
        _2 = _1;                         // scope 0 at ui/consts/control-flow/basics.rs:30:8: 30:9
        switchInt(move _2) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/consts/control-flow/basics.rs:30:8: 30:14
    }

    bb1: {
        _0 = const 0_u64;                // scope 0 at ui/consts/control-flow/basics.rs:31:16: 31:17
        goto -> bb8;                     // scope 0 at ui/consts/control-flow/basics.rs:42:2: 42:2
    }

    bb2: {
        _3 = const (0_u64, 1_u64);       // scope 0 at ui/consts/control-flow/basics.rs:34:19: 34:25
        _4 = const 1_u64;                // scope 1 at ui/consts/control-flow/basics.rs:35:17: 35:18
        goto -> bb3;                     // scope 2 at ui/consts/control-flow/basics.rs:36:5: 39:6
    }

    bb3: {
        _6 = _4;                         // scope 2 at ui/consts/control-flow/basics.rs:36:11: 36:12
        _7 = _1;                         // scope 2 at ui/consts/control-flow/basics.rs:36:15: 36:16
        _5 = Lt(move _6, move _7);       // scope 2 at ui/consts/control-flow/basics.rs:36:11: 36:16
        switchInt(move _5) -> [0: bb7, otherwise: bb4]; // scope 2 at ui/consts/control-flow/basics.rs:36:11: 36:16
    }

    bb4: {
        _8 = (_3.1: u64);                // scope 2 at ui/consts/control-flow/basics.rs:37:16: 37:21
        _10 = (_3.0: u64);               // scope 2 at ui/consts/control-flow/basics.rs:37:23: 37:28
        _11 = (_3.1: u64);               // scope 2 at ui/consts/control-flow/basics.rs:37:31: 37:36
        _12 = CheckedAdd(_10, _11);      // scope 2 at ui/consts/control-flow/basics.rs:37:23: 37:36
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", move _10, move _11) -> bb5; // scope 2 at ui/consts/control-flow/basics.rs:37:23: 37:36
    }

    bb5: {
        _9 = move (_12.0: u64);          // scope 2 at ui/consts/control-flow/basics.rs:37:23: 37:36
        _3 = (move _8, move _9);         // scope 2 at ui/consts/control-flow/basics.rs:37:9: 37:37
        _13 = CheckedAdd(_4, const 1_u64); // scope 2 at ui/consts/control-flow/basics.rs:38:9: 38:15
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", _4, const 1_u64) -> bb6; // scope 2 at ui/consts/control-flow/basics.rs:38:9: 38:15
    }

    bb6: {
        _4 = move (_13.0: u64);          // scope 2 at ui/consts/control-flow/basics.rs:38:9: 38:15
        goto -> bb3;                     // scope 2 at ui/consts/control-flow/basics.rs:36:5: 39:6
    }

    bb7: {
        _0 = (_3.1: u64);                // scope 2 at ui/consts/control-flow/basics.rs:41:5: 41:10
        goto -> bb8;                     // scope 0 at ui/consts/control-flow/basics.rs:42:2: 42:2
    }

    bb8: {
        return;                          // scope 0 at ui/consts/control-flow/basics.rs:42:2: 42:2
    }
}

// MIR FOR CTFE
fn fib(_1: u64) -> u64 {
    debug n => _1;                       // in scope 0 at ui/consts/control-flow/basics.rs:29:14: 29:15
    let mut _0: u64;                     // return place in scope 0 at ui/consts/control-flow/basics.rs:29:25: 29:28
    let _2: ();                          // in scope 0 at ui/consts/control-flow/basics.rs:30:5: 32:6
    let mut _3: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:30:8: 30:14
    let mut _4: u64;                     // in scope 0 at ui/consts/control-flow/basics.rs:30:8: 30:9
    let mut _5: !;                       // in scope 0 at ui/consts/control-flow/basics.rs:30:15: 32:6
    let mut _6: (u64, u64);              // in scope 0 at ui/consts/control-flow/basics.rs:34:9: 34:16
    let _8: ();                          // in scope 0 at ui/consts/control-flow/basics.rs:36:5: 39:6
    let mut _9: ();                      // in scope 0 at ui/consts/control-flow/basics.rs:29:1: 42:2
    let mut _10: bool;                   // in scope 0 at ui/consts/control-flow/basics.rs:36:11: 36:16
    let mut _11: u64;                    // in scope 0 at ui/consts/control-flow/basics.rs:36:11: 36:12
    let mut _12: u64;                    // in scope 0 at ui/consts/control-flow/basics.rs:36:15: 36:16
    let mut _13: u64;                    // in scope 0 at ui/consts/control-flow/basics.rs:37:16: 37:21
    let mut _14: u64;                    // in scope 0 at ui/consts/control-flow/basics.rs:37:23: 37:36
    let mut _15: u64;                    // in scope 0 at ui/consts/control-flow/basics.rs:37:23: 37:28
    let mut _16: u64;                    // in scope 0 at ui/consts/control-flow/basics.rs:37:31: 37:36
    let mut _17: (u64, bool);            // in scope 0 at ui/consts/control-flow/basics.rs:37:23: 37:36
    let mut _18: (u64, bool);            // in scope 0 at ui/consts/control-flow/basics.rs:38:9: 38:15
    let mut _19: !;                      // in scope 0 at ui/consts/control-flow/basics.rs:36:5: 39:6
    let _20: ();                         // in scope 0 at ui/consts/control-flow/basics.rs:36:5: 39:6
    let mut _21: !;                      // in scope 0 at ui/consts/control-flow/basics.rs:36:5: 39:6
    scope 1 {
        debug fib => _6;                 // in scope 1 at ui/consts/control-flow/basics.rs:34:9: 34:16
        let mut _7: u64;                 // in scope 1 at ui/consts/control-flow/basics.rs:35:9: 35:14
        scope 2 {
            debug i => _7;               // in scope 2 at ui/consts/control-flow/basics.rs:35:9: 35:14
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/basics.rs:30:5: 32:6
        StorageLive(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:30:8: 30:14
        StorageLive(_4);                 // scope 0 at ui/consts/control-flow/basics.rs:30:8: 30:9
        _4 = _1;                         // scope 0 at ui/consts/control-flow/basics.rs:30:8: 30:9
        _3 = Eq(move _4, const 0_u64);   // scope 0 at ui/consts/control-flow/basics.rs:30:8: 30:14
        StorageDead(_4);                 // scope 0 at ui/consts/control-flow/basics.rs:30:13: 30:14
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/consts/control-flow/basics.rs:30:8: 30:14
    }

    bb1: {
        _0 = const 0_u64;                // scope 0 at ui/consts/control-flow/basics.rs:31:16: 31:17
        StorageDead(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:32:5: 32:6
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/basics.rs:32:5: 32:6
        goto -> bb8;                     // scope 0 at ui/consts/control-flow/basics.rs:42:2: 42:2
    }

    bb2: {
        _2 = const ();                   // scope 0 at ui/consts/control-flow/basics.rs:32:6: 32:6
        StorageDead(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:32:5: 32:6
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/basics.rs:32:5: 32:6
        StorageLive(_6);                 // scope 0 at ui/consts/control-flow/basics.rs:34:9: 34:16
        _6 = (const 0_u64, const 1_u64); // scope 0 at ui/consts/control-flow/basics.rs:34:19: 34:25
        StorageLive(_7);                 // scope 1 at ui/consts/control-flow/basics.rs:35:9: 35:14
        _7 = const 1_u64;                // scope 1 at ui/consts/control-flow/basics.rs:35:17: 35:18
        StorageLive(_8);                 // scope 2 at ui/consts/control-flow/basics.rs:36:5: 39:6
        goto -> bb3;                     // scope 2 at ui/consts/control-flow/basics.rs:36:5: 39:6
    }

    bb3: {
        StorageLive(_10);                // scope 2 at ui/consts/control-flow/basics.rs:36:11: 36:16
        StorageLive(_11);                // scope 2 at ui/consts/control-flow/basics.rs:36:11: 36:12
        _11 = _7;                        // scope 2 at ui/consts/control-flow/basics.rs:36:11: 36:12
        StorageLive(_12);                // scope 2 at ui/consts/control-flow/basics.rs:36:15: 36:16
        _12 = _1;                        // scope 2 at ui/consts/control-flow/basics.rs:36:15: 36:16
        _10 = Lt(move _11, move _12);    // scope 2 at ui/consts/control-flow/basics.rs:36:11: 36:16
        StorageDead(_12);                // scope 2 at ui/consts/control-flow/basics.rs:36:15: 36:16
        StorageDead(_11);                // scope 2 at ui/consts/control-flow/basics.rs:36:15: 36:16
        switchInt(move _10) -> [0: bb7, otherwise: bb4]; // scope 2 at ui/consts/control-flow/basics.rs:36:11: 36:16
    }

    bb4: {
        StorageLive(_13);                // scope 2 at ui/consts/control-flow/basics.rs:37:16: 37:21
        _13 = (_6.1: u64);               // scope 2 at ui/consts/control-flow/basics.rs:37:16: 37:21
        StorageLive(_14);                // scope 2 at ui/consts/control-flow/basics.rs:37:23: 37:36
        StorageLive(_15);                // scope 2 at ui/consts/control-flow/basics.rs:37:23: 37:28
        _15 = (_6.0: u64);               // scope 2 at ui/consts/control-flow/basics.rs:37:23: 37:28
        StorageLive(_16);                // scope 2 at ui/consts/control-flow/basics.rs:37:31: 37:36
        _16 = (_6.1: u64);               // scope 2 at ui/consts/control-flow/basics.rs:37:31: 37:36
        _17 = CheckedAdd(_15, _16);      // scope 2 at ui/consts/control-flow/basics.rs:37:23: 37:36
        assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", move _15, move _16) -> bb5; // scope 2 at ui/consts/control-flow/basics.rs:37:23: 37:36
    }

    bb5: {
        _14 = move (_17.0: u64);         // scope 2 at ui/consts/control-flow/basics.rs:37:23: 37:36
        StorageDead(_16);                // scope 2 at ui/consts/control-flow/basics.rs:37:35: 37:36
        StorageDead(_15);                // scope 2 at ui/consts/control-flow/basics.rs:37:35: 37:36
        _6 = (move _13, move _14);       // scope 2 at ui/consts/control-flow/basics.rs:37:9: 37:37
        StorageDead(_14);                // scope 2 at ui/consts/control-flow/basics.rs:37:36: 37:37
        StorageDead(_13);                // scope 2 at ui/consts/control-flow/basics.rs:37:36: 37:37
        _18 = CheckedAdd(_7, const 1_u64); // scope 2 at ui/consts/control-flow/basics.rs:38:9: 38:15
        assert(!move (_18.1: bool), "attempt to compute `{} + {}`, which would overflow", _7, const 1_u64) -> bb6; // scope 2 at ui/consts/control-flow/basics.rs:38:9: 38:15
    }

    bb6: {
        _7 = move (_18.0: u64);          // scope 2 at ui/consts/control-flow/basics.rs:38:9: 38:15
        _9 = const ();                   // scope 2 at ui/consts/control-flow/basics.rs:36:17: 39:6
        StorageDead(_10);                // scope 2 at ui/consts/control-flow/basics.rs:39:5: 39:6
        ConstEvalCounter;                // scope 2 at ui/consts/control-flow/basics.rs:36:5: 39:6
        goto -> bb3;                     // scope 2 at ui/consts/control-flow/basics.rs:36:5: 39:6
    }

    bb7: {
        StorageLive(_20);                // scope 2 at ui/consts/control-flow/basics.rs:36:5: 39:6
        _8 = const ();                   // scope 2 at ui/consts/control-flow/basics.rs:36:5: 39:6
        StorageDead(_20);                // scope 2 at ui/consts/control-flow/basics.rs:39:5: 39:6
        StorageDead(_10);                // scope 2 at ui/consts/control-flow/basics.rs:39:5: 39:6
        StorageDead(_8);                 // scope 2 at ui/consts/control-flow/basics.rs:39:5: 39:6
        _0 = (_6.1: u64);                // scope 2 at ui/consts/control-flow/basics.rs:41:5: 41:10
        StorageDead(_7);                 // scope 1 at ui/consts/control-flow/basics.rs:42:1: 42:2
        StorageDead(_6);                 // scope 0 at ui/consts/control-flow/basics.rs:42:1: 42:2
        goto -> bb8;                     // scope 0 at ui/consts/control-flow/basics.rs:42:2: 42:2
    }

    bb8: {
        return;                          // scope 0 at ui/consts/control-flow/basics.rs:42:2: 42:2
    }
}

fn is_prime(_1: u64) -> bool {
    debug n => _1;                       // in scope 0 at ui/consts/control-flow/basics.rs:44:19: 44:20
    let mut _0: bool;                    // return place in scope 0 at ui/consts/control-flow/basics.rs:44:30: 44:34
    let mut _2: u64;                     // in scope 0 at ui/consts/control-flow/basics.rs:45:8: 45:13
    let mut _3: u64;                     // in scope 0 at ui/consts/control-flow/basics.rs:45:8: 45:9
    let mut _4: u64;                     // in scope 0 at ui/consts/control-flow/basics.rs:49:9: 49:16
    let mut _5: u64;                     // in scope 0 at ui/consts/control-flow/basics.rs:51:12: 51:19
    let mut _6: u64;                     // in scope 0 at ui/consts/control-flow/basics.rs:51:12: 51:13
    let mut _7: u64;                     // in scope 0 at ui/consts/control-flow/basics.rs:51:16: 51:19
    let mut _8: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:51:12: 51:19
    let mut _9: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:55:12: 55:25
    let mut _10: u64;                    // in scope 0 at ui/consts/control-flow/basics.rs:55:12: 55:21
    let mut _11: u64;                    // in scope 0 at ui/consts/control-flow/basics.rs:55:12: 55:15
    let mut _12: u64;                    // in scope 0 at ui/consts/control-flow/basics.rs:55:18: 55:21
    let mut _13: (u64, bool);            // in scope 0 at ui/consts/control-flow/basics.rs:55:12: 55:21
    let mut _14: u64;                    // in scope 0 at ui/consts/control-flow/basics.rs:55:24: 55:25
    let mut _15: (u64, bool);            // in scope 0 at ui/consts/control-flow/basics.rs:59:9: 59:17
    scope 1 {
        debug div => _4;                 // in scope 1 at ui/consts/control-flow/basics.rs:49:9: 49:16
    }

    bb0: {
        _3 = _1;                         // scope 0 at ui/consts/control-flow/basics.rs:45:8: 45:9
        _2 = Rem(move _3, const 2_u64);  // scope 0 at ui/consts/control-flow/basics.rs:45:8: 45:13
        switchInt(move _2) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/consts/control-flow/basics.rs:45:8: 45:18
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/consts/control-flow/basics.rs:46:16: 46:21
        goto -> bb11;                    // scope 0 at no-location
    }

    bb2: {
        _4 = const 3_u64;                // scope 0 at ui/consts/control-flow/basics.rs:49:19: 49:20
        goto -> bb3;                     // scope 1 at ui/consts/control-flow/basics.rs:50:5: 60:6
    }

    bb3: {
        _6 = _1;                         // scope 1 at ui/consts/control-flow/basics.rs:51:12: 51:13
        _7 = _4;                         // scope 1 at ui/consts/control-flow/basics.rs:51:16: 51:19
        _8 = Eq(_7, const 0_u64);        // scope 1 at ui/consts/control-flow/basics.rs:51:12: 51:19
        assert(!move _8, "attempt to calculate the remainder of `{}` with a divisor of zero", _6) -> bb4; // scope 1 at ui/consts/control-flow/basics.rs:51:12: 51:19
    }

    bb4: {
        _5 = Rem(move _6, move _7);      // scope 1 at ui/consts/control-flow/basics.rs:51:12: 51:19
        switchInt(move _5) -> [0: bb5, otherwise: bb6]; // scope 1 at ui/consts/control-flow/basics.rs:51:12: 51:24
    }

    bb5: {
        _0 = const false;                // scope 1 at ui/consts/control-flow/basics.rs:52:20: 52:25
        goto -> bb11;                    // scope 1 at no-location
    }

    bb6: {
        _11 = _4;                        // scope 1 at ui/consts/control-flow/basics.rs:55:12: 55:15
        _12 = _4;                        // scope 1 at ui/consts/control-flow/basics.rs:55:18: 55:21
        _13 = CheckedMul(_11, _12);      // scope 1 at ui/consts/control-flow/basics.rs:55:12: 55:21
        assert(!move (_13.1: bool), "attempt to compute `{} * {}`, which would overflow", move _11, move _12) -> bb7; // scope 1 at ui/consts/control-flow/basics.rs:55:12: 55:21
    }

    bb7: {
        _10 = move (_13.0: u64);         // scope 1 at ui/consts/control-flow/basics.rs:55:12: 55:21
        _14 = _1;                        // scope 1 at ui/consts/control-flow/basics.rs:55:24: 55:25
        _9 = Gt(move _10, move _14);     // scope 1 at ui/consts/control-flow/basics.rs:55:12: 55:25
        switchInt(move _9) -> [0: bb9, otherwise: bb8]; // scope 1 at ui/consts/control-flow/basics.rs:55:12: 55:25
    }

    bb8: {
        _0 = const true;                 // scope 1 at ui/consts/control-flow/basics.rs:56:20: 56:24
        goto -> bb11;                    // scope 1 at no-location
    }

    bb9: {
        _15 = CheckedAdd(_4, const 2_u64); // scope 1 at ui/consts/control-flow/basics.rs:59:9: 59:17
        assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", _4, const 2_u64) -> bb10; // scope 1 at ui/consts/control-flow/basics.rs:59:9: 59:17
    }

    bb10: {
        _4 = move (_15.0: u64);          // scope 1 at ui/consts/control-flow/basics.rs:59:9: 59:17
        goto -> bb3;                     // scope 1 at ui/consts/control-flow/basics.rs:50:5: 60:6
    }

    bb11: {
        return;                          // scope 0 at ui/consts/control-flow/basics.rs:61:2: 61:2
    }
}

// MIR FOR CTFE
fn is_prime(_1: u64) -> bool {
    debug n => _1;                       // in scope 0 at ui/consts/control-flow/basics.rs:44:19: 44:20
    let mut _0: bool;                    // return place in scope 0 at ui/consts/control-flow/basics.rs:44:30: 44:34
    let _2: ();                          // in scope 0 at ui/consts/control-flow/basics.rs:45:5: 47:6
    let mut _3: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:45:8: 45:18
    let mut _4: u64;                     // in scope 0 at ui/consts/control-flow/basics.rs:45:8: 45:13
    let mut _5: u64;                     // in scope 0 at ui/consts/control-flow/basics.rs:45:8: 45:9
    let mut _6: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:45:8: 45:13
    let mut _7: !;                       // in scope 0 at ui/consts/control-flow/basics.rs:45:19: 47:6
    let mut _8: u64;                     // in scope 0 at ui/consts/control-flow/basics.rs:49:9: 49:16
    let mut _9: !;                       // in scope 0 at ui/consts/control-flow/basics.rs:50:5: 60:6
    let mut _10: ();                     // in scope 0 at ui/consts/control-flow/basics.rs:44:1: 61:2
    let _11: ();                         // in scope 0 at ui/consts/control-flow/basics.rs:51:9: 53:10
    let mut _12: bool;                   // in scope 0 at ui/consts/control-flow/basics.rs:51:12: 51:24
    let mut _13: u64;                    // in scope 0 at ui/consts/control-flow/basics.rs:51:12: 51:19
    let mut _14: u64;                    // in scope 0 at ui/consts/control-flow/basics.rs:51:12: 51:13
    let mut _15: u64;                    // in scope 0 at ui/consts/control-flow/basics.rs:51:16: 51:19
    let mut _16: bool;                   // in scope 0 at ui/consts/control-flow/basics.rs:51:12: 51:19
    let mut _17: !;                      // in scope 0 at ui/consts/control-flow/basics.rs:51:25: 53:10
    let _18: ();                         // in scope 0 at ui/consts/control-flow/basics.rs:55:9: 57:10
    let mut _19: bool;                   // in scope 0 at ui/consts/control-flow/basics.rs:55:12: 55:25
    let mut _20: u64;                    // in scope 0 at ui/consts/control-flow/basics.rs:55:12: 55:21
    let mut _21: u64;                    // in scope 0 at ui/consts/control-flow/basics.rs:55:12: 55:15
    let mut _22: u64;                    // in scope 0 at ui/consts/control-flow/basics.rs:55:18: 55:21
    let mut _23: (u64, bool);            // in scope 0 at ui/consts/control-flow/basics.rs:55:12: 55:21
    let mut _24: u64;                    // in scope 0 at ui/consts/control-flow/basics.rs:55:24: 55:25
    let mut _25: !;                      // in scope 0 at ui/consts/control-flow/basics.rs:55:26: 57:10
    let mut _26: (u64, bool);            // in scope 0 at ui/consts/control-flow/basics.rs:59:9: 59:17
    scope 1 {
        debug div => _8;                 // in scope 1 at ui/consts/control-flow/basics.rs:49:9: 49:16
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/basics.rs:45:5: 47:6
        StorageLive(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:45:8: 45:18
        StorageLive(_4);                 // scope 0 at ui/consts/control-flow/basics.rs:45:8: 45:13
        StorageLive(_5);                 // scope 0 at ui/consts/control-flow/basics.rs:45:8: 45:9
        _5 = _1;                         // scope 0 at ui/consts/control-flow/basics.rs:45:8: 45:9
        _6 = Eq(const 2_u64, const 0_u64); // scope 0 at ui/consts/control-flow/basics.rs:45:8: 45:13
        assert(!move _6, "attempt to calculate the remainder of `{}` with a divisor of zero", _5) -> bb1; // scope 0 at ui/consts/control-flow/basics.rs:45:8: 45:13
    }

    bb1: {
        _4 = Rem(move _5, const 2_u64);  // scope 0 at ui/consts/control-flow/basics.rs:45:8: 45:13
        StorageDead(_5);                 // scope 0 at ui/consts/control-flow/basics.rs:45:12: 45:13
        _3 = Eq(move _4, const 0_u64);   // scope 0 at ui/consts/control-flow/basics.rs:45:8: 45:18
        StorageDead(_4);                 // scope 0 at ui/consts/control-flow/basics.rs:45:17: 45:18
        switchInt(move _3) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/control-flow/basics.rs:45:8: 45:18
    }

    bb2: {
        _0 = const false;                // scope 0 at ui/consts/control-flow/basics.rs:46:16: 46:21
        StorageDead(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:47:5: 47:6
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/basics.rs:47:5: 47:6
        goto -> bb13;                    // scope 0 at no-location
    }

    bb3: {
        _2 = const ();                   // scope 0 at ui/consts/control-flow/basics.rs:47:6: 47:6
        StorageDead(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:47:5: 47:6
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/basics.rs:47:5: 47:6
        StorageLive(_8);                 // scope 0 at ui/consts/control-flow/basics.rs:49:9: 49:16
        _8 = const 3_u64;                // scope 0 at ui/consts/control-flow/basics.rs:49:19: 49:20
        StorageLive(_9);                 // scope 1 at ui/consts/control-flow/basics.rs:50:5: 60:6
        goto -> bb4;                     // scope 1 at ui/consts/control-flow/basics.rs:50:5: 60:6
    }

    bb4: {
        StorageLive(_11);                // scope 1 at ui/consts/control-flow/basics.rs:51:9: 53:10
        StorageLive(_12);                // scope 1 at ui/consts/control-flow/basics.rs:51:12: 51:24
        StorageLive(_13);                // scope 1 at ui/consts/control-flow/basics.rs:51:12: 51:19
        StorageLive(_14);                // scope 1 at ui/consts/control-flow/basics.rs:51:12: 51:13
        _14 = _1;                        // scope 1 at ui/consts/control-flow/basics.rs:51:12: 51:13
        StorageLive(_15);                // scope 1 at ui/consts/control-flow/basics.rs:51:16: 51:19
        _15 = _8;                        // scope 1 at ui/consts/control-flow/basics.rs:51:16: 51:19
        _16 = Eq(_15, const 0_u64);      // scope 1 at ui/consts/control-flow/basics.rs:51:12: 51:19
        assert(!move _16, "attempt to calculate the remainder of `{}` with a divisor of zero", _14) -> bb5; // scope 1 at ui/consts/control-flow/basics.rs:51:12: 51:19
    }

    bb5: {
        _13 = Rem(move _14, move _15);   // scope 1 at ui/consts/control-flow/basics.rs:51:12: 51:19
        StorageDead(_15);                // scope 1 at ui/consts/control-flow/basics.rs:51:18: 51:19
        StorageDead(_14);                // scope 1 at ui/consts/control-flow/basics.rs:51:18: 51:19
        _12 = Eq(move _13, const 0_u64); // scope 1 at ui/consts/control-flow/basics.rs:51:12: 51:24
        StorageDead(_13);                // scope 1 at ui/consts/control-flow/basics.rs:51:23: 51:24
        switchInt(move _12) -> [0: bb7, otherwise: bb6]; // scope 1 at ui/consts/control-flow/basics.rs:51:12: 51:24
    }

    bb6: {
        _0 = const false;                // scope 1 at ui/consts/control-flow/basics.rs:52:20: 52:25
        StorageDead(_12);                // scope 1 at ui/consts/control-flow/basics.rs:53:9: 53:10
        StorageDead(_11);                // scope 1 at ui/consts/control-flow/basics.rs:53:9: 53:10
        goto -> bb12;                    // scope 1 at no-location
    }

    bb7: {
        _11 = const ();                  // scope 1 at ui/consts/control-flow/basics.rs:53:10: 53:10
        StorageDead(_12);                // scope 1 at ui/consts/control-flow/basics.rs:53:9: 53:10
        StorageDead(_11);                // scope 1 at ui/consts/control-flow/basics.rs:53:9: 53:10
        StorageLive(_18);                // scope 1 at ui/consts/control-flow/basics.rs:55:9: 57:10
        StorageLive(_19);                // scope 1 at ui/consts/control-flow/basics.rs:55:12: 55:25
        StorageLive(_20);                // scope 1 at ui/consts/control-flow/basics.rs:55:12: 55:21
        StorageLive(_21);                // scope 1 at ui/consts/control-flow/basics.rs:55:12: 55:15
        _21 = _8;                        // scope 1 at ui/consts/control-flow/basics.rs:55:12: 55:15
        StorageLive(_22);                // scope 1 at ui/consts/control-flow/basics.rs:55:18: 55:21
        _22 = _8;                        // scope 1 at ui/consts/control-flow/basics.rs:55:18: 55:21
        _23 = CheckedMul(_21, _22);      // scope 1 at ui/consts/control-flow/basics.rs:55:12: 55:21
        assert(!move (_23.1: bool), "attempt to compute `{} * {}`, which would overflow", move _21, move _22) -> bb8; // scope 1 at ui/consts/control-flow/basics.rs:55:12: 55:21
    }

    bb8: {
        _20 = move (_23.0: u64);         // scope 1 at ui/consts/control-flow/basics.rs:55:12: 55:21
        StorageDead(_22);                // scope 1 at ui/consts/control-flow/basics.rs:55:20: 55:21
        StorageDead(_21);                // scope 1 at ui/consts/control-flow/basics.rs:55:20: 55:21
        StorageLive(_24);                // scope 1 at ui/consts/control-flow/basics.rs:55:24: 55:25
        _24 = _1;                        // scope 1 at ui/consts/control-flow/basics.rs:55:24: 55:25
        _19 = Gt(move _20, move _24);    // scope 1 at ui/consts/control-flow/basics.rs:55:12: 55:25
        StorageDead(_24);                // scope 1 at ui/consts/control-flow/basics.rs:55:24: 55:25
        StorageDead(_20);                // scope 1 at ui/consts/control-flow/basics.rs:55:24: 55:25
        switchInt(move _19) -> [0: bb10, otherwise: bb9]; // scope 1 at ui/consts/control-flow/basics.rs:55:12: 55:25
    }

    bb9: {
        _0 = const true;                 // scope 1 at ui/consts/control-flow/basics.rs:56:20: 56:24
        StorageDead(_19);                // scope 1 at ui/consts/control-flow/basics.rs:57:9: 57:10
        StorageDead(_18);                // scope 1 at ui/consts/control-flow/basics.rs:57:9: 57:10
        goto -> bb12;                    // scope 1 at no-location
    }

    bb10: {
        _18 = const ();                  // scope 1 at ui/consts/control-flow/basics.rs:57:10: 57:10
        StorageDead(_19);                // scope 1 at ui/consts/control-flow/basics.rs:57:9: 57:10
        StorageDead(_18);                // scope 1 at ui/consts/control-flow/basics.rs:57:9: 57:10
        _26 = CheckedAdd(_8, const 2_u64); // scope 1 at ui/consts/control-flow/basics.rs:59:9: 59:17
        assert(!move (_26.1: bool), "attempt to compute `{} + {}`, which would overflow", _8, const 2_u64) -> bb11; // scope 1 at ui/consts/control-flow/basics.rs:59:9: 59:17
    }

    bb11: {
        _8 = move (_26.0: u64);          // scope 1 at ui/consts/control-flow/basics.rs:59:9: 59:17
        _10 = const ();                  // scope 1 at ui/consts/control-flow/basics.rs:50:10: 60:6
        ConstEvalCounter;                // scope 1 at ui/consts/control-flow/basics.rs:50:5: 60:6
        goto -> bb4;                     // scope 1 at ui/consts/control-flow/basics.rs:50:5: 60:6
    }

    bb12: {
        StorageDead(_9);                 // scope 1 at ui/consts/control-flow/basics.rs:60:5: 60:6
        StorageDead(_8);                 // scope 0 at ui/consts/control-flow/basics.rs:61:1: 61:2
        goto -> bb13;                    // scope 0 at no-location
    }

    bb13: {
        return;                          // scope 0 at ui/consts/control-flow/basics.rs:61:2: 61:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/basics.rs:70:11: 70:11
    let mut _1: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
    let mut _2: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:71:19: 71:51
    let mut _3: u32;                     // in scope 0 at ui/consts/control-flow/basics.rs:71:19: 71:33
    let mut _4: u32;                     // in scope 0 at ui/consts/control-flow/basics.rs:71:37: 71:51
    let mut _5: !;                       // in scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
    let mut _6: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
    let mut _7: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:72:19: 72:45
    let mut _8: u32;                     // in scope 0 at ui/consts/control-flow/basics.rs:72:31: 72:45
    let mut _9: !;                       // in scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
    let mut _10: bool;                   // in scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
    let mut _11: bool;                   // in scope 0 at ui/consts/control-flow/basics.rs:74:19: 74:35
    let mut _12: u32;                    // in scope 0 at ui/consts/control-flow/basics.rs:74:19: 74:30
    let mut _13: !;                      // in scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
    let mut _14: bool;                   // in scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
    let mut _15: bool;                   // in scope 0 at ui/consts/control-flow/basics.rs:75:19: 75:35
    let mut _16: u32;                    // in scope 0 at ui/consts/control-flow/basics.rs:75:19: 75:30
    let mut _17: !;                      // in scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
    let mut _18: bool;                   // in scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
    let mut _19: bool;                   // in scope 0 at ui/consts/control-flow/basics.rs:77:19: 77:30
    let mut _20: u64;                    // in scope 0 at ui/consts/control-flow/basics.rs:77:19: 77:25
    let mut _21: !;                      // in scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
    let mut _22: bool;                   // in scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
    let mut _23: bool;                   // in scope 0 at ui/consts/control-flow/basics.rs:78:19: 78:31
    let mut _24: u64;                    // in scope 0 at ui/consts/control-flow/basics.rs:78:19: 78:25
    let mut _25: !;                      // in scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
    let mut _26: bool;                   // in scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
    let mut _27: bool;                   // in scope 0 at ui/consts/control-flow/basics.rs:80:19: 80:32
    let mut _28: !;                      // in scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
    let mut _29: bool;                   // in scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
    let mut _30: bool;                   // in scope 0 at ui/consts/control-flow/basics.rs:81:19: 81:33
    let mut _31: bool;                   // in scope 0 at ui/consts/control-flow/basics.rs:81:20: 81:33
    let mut _32: !;                      // in scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23

    bb0: {
        _3 = abs_diff(const 4_u32, const 5_u32) -> bb1; // scope 0 at ui/consts/control-flow/basics.rs:71:19: 71:33
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:71:19: 71:27
                                         // + literal: Const { ty: fn(u32, u32) -> u32 {abs_diff}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = abs_diff(const 5_u32, const 4_u32) -> bb2; // scope 0 at ui/consts/control-flow/basics.rs:71:37: 71:51
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:71:37: 71:45
                                         // + literal: Const { ty: fn(u32, u32) -> u32 {abs_diff}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = Eq(move _3, move _4);       // scope 0 at ui/consts/control-flow/basics.rs:71:19: 71:51
        _1 = Not(move _2);               // scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
        switchInt(move _1) -> [0: bb4, otherwise: bb3]; // scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
    }

    bb3: {
        _5 = core::panicking::panic(const "assertion failed: abs_diff(4, 5) == abs_diff(5, 4)"); // scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:66:9: 66:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _8 = abs_diff(const 5_u32, const 4_u32) -> bb5; // scope 0 at ui/consts/control-flow/basics.rs:72:31: 72:45
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:72:31: 72:39
                                         // + literal: Const { ty: fn(u32, u32) -> u32 {abs_diff}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = Eq(const _, move _8);       // scope 0 at ui/consts/control-flow/basics.rs:72:19: 72:45
        _6 = Not(move _7);               // scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
        switchInt(move _6) -> [0: bb7, otherwise: bb6]; // scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
    }

    bb6: {
        _9 = core::panicking::panic(const "assertion failed: ABS_DIFF == abs_diff(5, 4)"); // scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:66:9: 66:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _12 = gcd(const 48_u32, const 18_u32) -> bb8; // scope 0 at ui/consts/control-flow/basics.rs:74:19: 74:30
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:74:19: 74:22
                                         // + literal: Const { ty: fn(u32, u32) -> u32 {gcd}, val: Value(<ZST>) }
    }

    bb8: {
        _11 = Eq(move _12, const 6_u32); // scope 0 at ui/consts/control-flow/basics.rs:74:19: 74:35
        _10 = Not(move _11);             // scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
        switchInt(move _10) -> [0: bb10, otherwise: bb9]; // scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
    }

    bb9: {
        _13 = core::panicking::panic(const "assertion failed: gcd(48, 18) == 6"); // scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:66:9: 66:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        _16 = gcd(const 18_u32, const 48_u32) -> bb11; // scope 0 at ui/consts/control-flow/basics.rs:75:19: 75:30
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:75:19: 75:22
                                         // + literal: Const { ty: fn(u32, u32) -> u32 {gcd}, val: Value(<ZST>) }
    }

    bb11: {
        _15 = Eq(move _16, const 6_u32); // scope 0 at ui/consts/control-flow/basics.rs:75:19: 75:35
        _14 = Not(move _15);             // scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
        switchInt(move _14) -> [0: bb13, otherwise: bb12]; // scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
    }

    bb12: {
        _17 = core::panicking::panic(const "assertion failed: gcd(18, 48) == 6"); // scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:66:9: 66:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        _20 = fib(const 2_u64) -> bb14;  // scope 0 at ui/consts/control-flow/basics.rs:77:19: 77:25
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:77:19: 77:22
                                         // + literal: Const { ty: fn(u64) -> u64 {fib}, val: Value(<ZST>) }
    }

    bb14: {
        _19 = Eq(move _20, const 1_u64); // scope 0 at ui/consts/control-flow/basics.rs:77:19: 77:30
        _18 = Not(move _19);             // scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
        switchInt(move _18) -> [0: bb16, otherwise: bb15]; // scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
    }

    bb15: {
        _21 = core::panicking::panic(const "assertion failed: fib(2) == 1"); // scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:66:9: 66:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb16: {
        _24 = fib(const 8_u64) -> bb17;  // scope 0 at ui/consts/control-flow/basics.rs:78:19: 78:25
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:78:19: 78:22
                                         // + literal: Const { ty: fn(u64) -> u64 {fib}, val: Value(<ZST>) }
    }

    bb17: {
        _23 = Eq(move _24, const 21_u64); // scope 0 at ui/consts/control-flow/basics.rs:78:19: 78:31
        _22 = Not(move _23);             // scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
        switchInt(move _22) -> [0: bb19, otherwise: bb18]; // scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
    }

    bb18: {
        _25 = core::panicking::panic(const "assertion failed: fib(8) == 21"); // scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:66:9: 66:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb19: {
        _27 = is_prime(const 113_u64) -> bb20; // scope 0 at ui/consts/control-flow/basics.rs:80:19: 80:32
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:80:19: 80:27
                                         // + literal: Const { ty: fn(u64) -> bool {is_prime}, val: Value(<ZST>) }
    }

    bb20: {
        _26 = Not(move _27);             // scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
        switchInt(move _26) -> [0: bb22, otherwise: bb21]; // scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
    }

    bb21: {
        _28 = core::panicking::panic(const "assertion failed: is_prime(113)"); // scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:66:9: 66:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb22: {
        _31 = is_prime(const 117_u64) -> bb23; // scope 0 at ui/consts/control-flow/basics.rs:81:20: 81:33
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:81:20: 81:28
                                         // + literal: Const { ty: fn(u64) -> bool {is_prime}, val: Value(<ZST>) }
    }

    bb23: {
        _30 = Not(move _31);             // scope 0 at ui/consts/control-flow/basics.rs:81:19: 81:33
        _29 = Not(move _30);             // scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
        switchInt(move _29) -> [0: bb25, otherwise: bb24]; // scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
    }

    bb24: {
        _32 = core::panicking::panic(const "assertion failed: !is_prime(117)"); // scope 0 at ui/consts/control-flow/basics.rs:66:9: 66:23
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:66:9: 66:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb25: {
        return;                          // scope 0 at ui/consts/control-flow/basics.rs:82:2: 82:2
    }
}

const main::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/basics.rs:65:18: 65:20
    let mut _1: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
    let mut _2: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:71:19: 71:51
    let mut _3: u32;                     // in scope 0 at ui/consts/control-flow/basics.rs:71:19: 71:33
    let mut _4: u32;                     // in scope 0 at ui/consts/control-flow/basics.rs:71:37: 71:51
    let mut _5: !;                       // in scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/basics.rs:71:19: 71:51
        StorageLive(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:71:19: 71:33
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/basics.rs:71:19: 71:33
        _3 = abs_diff(const 4_u32, const 5_u32) -> bb1; // scope 0 at ui/consts/control-flow/basics.rs:71:19: 71:33
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:71:19: 71:27
                                         // + literal: Const { ty: fn(u32, u32) -> u32 {abs_diff}, val: Value(<ZST>) }
    }

    bb1: {
        StorageLive(_4);                 // scope 0 at ui/consts/control-flow/basics.rs:71:37: 71:51
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/basics.rs:71:37: 71:51
        _4 = abs_diff(const 5_u32, const 4_u32) -> bb2; // scope 0 at ui/consts/control-flow/basics.rs:71:37: 71:51
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:71:37: 71:45
                                         // + literal: Const { ty: fn(u32, u32) -> u32 {abs_diff}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = Eq(move _3, move _4);       // scope 0 at ui/consts/control-flow/basics.rs:71:19: 71:51
        StorageDead(_4);                 // scope 0 at ui/consts/control-flow/basics.rs:71:50: 71:51
        StorageDead(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:71:50: 71:51
        _1 = Not(move _2);               // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/basics.rs:65:36: 65:37
        switchInt(move _1) -> [0: bb4, otherwise: bb3]; // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
    }

    bb3: {
        StorageLive(_5);                 // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        _5 = core::panicking::panic(const "assertion failed: abs_diff(4, 5) == abs_diff(5, 4)"); // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:65:23: 65:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _0 = const ();                   // scope 0 at ui/consts/control-flow/basics.rs:65:37: 65:37
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/basics.rs:65:36: 65:37
        return;                          // scope 0 at ui/consts/control-flow/basics.rs:65:9: 65:38
    }
}

const main::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/basics.rs:65:18: 65:20
    let mut _1: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
    let mut _2: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:72:19: 72:45
    let mut _3: u32;                     // in scope 0 at ui/consts/control-flow/basics.rs:72:31: 72:45
    let mut _4: !;                       // in scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/basics.rs:72:19: 72:45
        StorageLive(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:72:31: 72:45
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/basics.rs:72:31: 72:45
        _3 = abs_diff(const 5_u32, const 4_u32) -> bb1; // scope 0 at ui/consts/control-flow/basics.rs:72:31: 72:45
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:72:31: 72:39
                                         // + literal: Const { ty: fn(u32, u32) -> u32 {abs_diff}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(const _, move _3);       // scope 0 at ui/consts/control-flow/basics.rs:72:19: 72:45
        StorageDead(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:72:44: 72:45
        _1 = Not(move _2);               // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/basics.rs:65:36: 65:37
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        _4 = core::panicking::panic(const "assertion failed: ABS_DIFF == abs_diff(5, 4)"); // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:65:23: 65:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/control-flow/basics.rs:65:37: 65:37
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/basics.rs:65:36: 65:37
        return;                          // scope 0 at ui/consts/control-flow/basics.rs:65:9: 65:38
    }
}

const main::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/basics.rs:65:18: 65:20
    let mut _1: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
    let mut _2: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:74:19: 74:35
    let mut _3: u32;                     // in scope 0 at ui/consts/control-flow/basics.rs:74:19: 74:30
    let mut _4: !;                       // in scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/basics.rs:74:19: 74:35
        StorageLive(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:74:19: 74:30
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/basics.rs:74:19: 74:30
        _3 = gcd(const 48_u32, const 18_u32) -> bb1; // scope 0 at ui/consts/control-flow/basics.rs:74:19: 74:30
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:74:19: 74:22
                                         // + literal: Const { ty: fn(u32, u32) -> u32 {gcd}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const 6_u32);   // scope 0 at ui/consts/control-flow/basics.rs:74:19: 74:35
        StorageDead(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:74:34: 74:35
        _1 = Not(move _2);               // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/basics.rs:65:36: 65:37
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        _4 = core::panicking::panic(const "assertion failed: gcd(48, 18) == 6"); // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:65:23: 65:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/control-flow/basics.rs:65:37: 65:37
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/basics.rs:65:36: 65:37
        return;                          // scope 0 at ui/consts/control-flow/basics.rs:65:9: 65:38
    }
}

const main::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/basics.rs:65:18: 65:20
    let mut _1: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
    let mut _2: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:75:19: 75:35
    let mut _3: u32;                     // in scope 0 at ui/consts/control-flow/basics.rs:75:19: 75:30
    let mut _4: !;                       // in scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/basics.rs:75:19: 75:35
        StorageLive(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:75:19: 75:30
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/basics.rs:75:19: 75:30
        _3 = gcd(const 18_u32, const 48_u32) -> bb1; // scope 0 at ui/consts/control-flow/basics.rs:75:19: 75:30
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:75:19: 75:22
                                         // + literal: Const { ty: fn(u32, u32) -> u32 {gcd}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const 6_u32);   // scope 0 at ui/consts/control-flow/basics.rs:75:19: 75:35
        StorageDead(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:75:34: 75:35
        _1 = Not(move _2);               // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/basics.rs:65:36: 65:37
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        _4 = core::panicking::panic(const "assertion failed: gcd(18, 48) == 6"); // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:65:23: 65:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/control-flow/basics.rs:65:37: 65:37
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/basics.rs:65:36: 65:37
        return;                          // scope 0 at ui/consts/control-flow/basics.rs:65:9: 65:38
    }
}

const main::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/basics.rs:65:18: 65:20
    let mut _1: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
    let mut _2: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:77:19: 77:30
    let mut _3: u64;                     // in scope 0 at ui/consts/control-flow/basics.rs:77:19: 77:25
    let mut _4: !;                       // in scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/basics.rs:77:19: 77:30
        StorageLive(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:77:19: 77:25
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/basics.rs:77:19: 77:25
        _3 = fib(const 2_u64) -> bb1;    // scope 0 at ui/consts/control-flow/basics.rs:77:19: 77:25
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:77:19: 77:22
                                         // + literal: Const { ty: fn(u64) -> u64 {fib}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const 1_u64);   // scope 0 at ui/consts/control-flow/basics.rs:77:19: 77:30
        StorageDead(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:77:29: 77:30
        _1 = Not(move _2);               // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/basics.rs:65:36: 65:37
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        _4 = core::panicking::panic(const "assertion failed: fib(2) == 1"); // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:65:23: 65:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/control-flow/basics.rs:65:37: 65:37
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/basics.rs:65:36: 65:37
        return;                          // scope 0 at ui/consts/control-flow/basics.rs:65:9: 65:38
    }
}

const main::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/basics.rs:65:18: 65:20
    let mut _1: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
    let mut _2: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:78:19: 78:31
    let mut _3: u64;                     // in scope 0 at ui/consts/control-flow/basics.rs:78:19: 78:25
    let mut _4: !;                       // in scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/basics.rs:78:19: 78:31
        StorageLive(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:78:19: 78:25
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/basics.rs:78:19: 78:25
        _3 = fib(const 8_u64) -> bb1;    // scope 0 at ui/consts/control-flow/basics.rs:78:19: 78:25
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:78:19: 78:22
                                         // + literal: Const { ty: fn(u64) -> u64 {fib}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const 21_u64);  // scope 0 at ui/consts/control-flow/basics.rs:78:19: 78:31
        StorageDead(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:78:30: 78:31
        _1 = Not(move _2);               // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/basics.rs:65:36: 65:37
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        _4 = core::panicking::panic(const "assertion failed: fib(8) == 21"); // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:65:23: 65:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/control-flow/basics.rs:65:37: 65:37
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/basics.rs:65:36: 65:37
        return;                          // scope 0 at ui/consts/control-flow/basics.rs:65:9: 65:38
    }
}

const main::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/basics.rs:65:18: 65:20
    let mut _1: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
    let mut _2: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:80:19: 80:32
    let mut _3: !;                       // in scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/basics.rs:80:19: 80:32
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/basics.rs:80:19: 80:32
        _2 = is_prime(const 113_u64) -> bb1; // scope 0 at ui/consts/control-flow/basics.rs:80:19: 80:32
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:80:19: 80:27
                                         // + literal: Const { ty: fn(u64) -> bool {is_prime}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Not(move _2);               // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/basics.rs:65:36: 65:37
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
    }

    bb2: {
        StorageLive(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        _3 = core::panicking::panic(const "assertion failed: is_prime(113)"); // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:65:23: 65:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/control-flow/basics.rs:65:37: 65:37
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/basics.rs:65:36: 65:37
        return;                          // scope 0 at ui/consts/control-flow/basics.rs:65:9: 65:38
    }
}

const main::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/basics.rs:65:18: 65:20
    let mut _1: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
    let mut _2: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:81:19: 81:33
    let mut _3: bool;                    // in scope 0 at ui/consts/control-flow/basics.rs:81:20: 81:33
    let mut _4: !;                       // in scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/basics.rs:81:19: 81:33
        StorageLive(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:81:20: 81:33
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/basics.rs:81:20: 81:33
        _3 = is_prime(const 117_u64) -> bb1; // scope 0 at ui/consts/control-flow/basics.rs:81:20: 81:33
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:81:20: 81:28
                                         // + literal: Const { ty: fn(u64) -> bool {is_prime}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Not(move _3);               // scope 0 at ui/consts/control-flow/basics.rs:81:19: 81:33
        StorageDead(_3);                 // scope 0 at ui/consts/control-flow/basics.rs:81:32: 81:33
        _1 = Not(move _2);               // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/basics.rs:65:36: 65:37
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
        _4 = core::panicking::panic(const "assertion failed: !is_prime(117)"); // scope 0 at ui/consts/control-flow/basics.rs:65:23: 65:37
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/basics.rs:65:23: 65:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/control-flow/basics.rs:65:37: 65:37
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/basics.rs:65:36: 65:37
        return;                          // scope 0 at ui/consts/control-flow/basics.rs:65:9: 65:38
    }
}
