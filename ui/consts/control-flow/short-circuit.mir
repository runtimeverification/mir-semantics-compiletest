// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const TRUE: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/control-flow/short-circuit.rs:6:13: 6:17
    let mut _1: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:18:12: 20:6
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        switchInt(const true) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/consts/control-flow/short-circuit.rs:6:20: 6:36
    }

    bb1: {
        _0 = const true;                 // scope 0 at ui/consts/control-flow/short-circuit.rs:6:20: 6:36
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/short-circuit.rs:6:35: 6:36
        return;                          // scope 0 at ui/consts/control-flow/short-circuit.rs:6:1: 6:37
    }

    bb2: {
        StorageLive(_1);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:18:12: 20:6
        StorageLive(_2);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
        ConstEvalCounter;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
        _2 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

const FALSE: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/control-flow/short-circuit.rs:7:14: 7:18
    let mut _1: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:18:12: 20:6
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        switchInt(const false) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/consts/control-flow/short-circuit.rs:7:21: 7:38
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/consts/control-flow/short-circuit.rs:7:21: 7:38
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/short-circuit.rs:7:37: 7:38
        return;                          // scope 0 at ui/consts/control-flow/short-circuit.rs:7:1: 7:39
    }

    bb2: {
        StorageLive(_1);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:18:12: 20:6
        StorageLive(_2);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
        ConstEvalCounter;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
        _2 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/short-circuit.rs:9:11: 9:11

    bb0: {
        return;                          // scope 0 at ui/consts/control-flow/short-circuit.rs:12:2: 12:2
    }
}
