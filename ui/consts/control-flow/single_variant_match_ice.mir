// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const FOO: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:7:12: 7:15
    let mut _1: Foo;                     // in scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:7:24: 7:33

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:7:24: 7:33
        _1 = Foo::Prob;                  // scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:7:24: 7:33
        _0 = const 42_u32;               // scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:8:18: 8:20
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:9:1: 9:2
        return;                          // scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:7:1: 9:3
    }
}

const BAR: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:11:12: 11:15
    let mut _1: Foo;                     // in scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:11:24: 11:33
    let _2: Foo;                         // in scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:12:5: 12:6
    scope 1 {
        debug x => _2;                   // in scope 1 at ui/consts/control-flow/single_variant_match_ice.rs:12:5: 12:6
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:11:24: 11:33
        _1 = Foo::Prob;                  // scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:11:24: 11:33
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:12:5: 12:6
        _2 = move _1;                    // scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:12:5: 12:6
        _0 = const 42_u32;               // scope 1 at ui/consts/control-flow/single_variant_match_ice.rs:12:10: 12:12
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:12:11: 12:12
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:13:1: 13:2
        return;                          // scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:11:1: 13:3
    }
}

fn <impl at ui/consts/control-flow/single_variant_match_ice.rs:15:1: 15:9>::as_val(_1: &Foo) -> u8 {
    debug self => _1;                    // in scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:16:25: 16:30
    let mut _0: u8;                      // return place in scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:16:35: 16:37

    bb0: {
        _0 = const 1_u8;                 // scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:20:21: 20:24
        return;                          // scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:22:6: 22:6
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/control-flow/single_variant_match_ice.rs:15:1: 15:9>::as_val(_1: &Foo) -> u8 {
    debug self => _1;                    // in scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:16:25: 16:30
    let mut _0: u8;                      // return place in scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:16:35: 16:37

    bb0: {
        _0 = const 1_u8;                 // scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:20:21: 20:24
        return;                          // scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:22:6: 22:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:25:11: 25:11

    bb0: {
        return;                          // scope 0 at ui/consts/control-flow/single_variant_match_ice.rs:25:13: 25:13
    }
}
