// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const _: Option<Vec<i32>> = {
    let mut _0: std::option::Option<std::vec::Vec<i32>>; // return place in scope 0 at ui/consts/control-flow/drop-pass.rs:8:10: 8:26
    let _1: std::option::Option<std::vec::Vec<i32>>; // in scope 0 at ui/consts/control-flow/drop-pass.rs:9:9: 9:10
    let mut _3: std::vec::Vec<i32>;      // in scope 0 at ui/consts/control-flow/drop-pass.rs:10:18: 10:28
    let mut _4: bool;                    // in scope 0 at ui/consts/control-flow/drop-pass.rs:12:8: 12:12
    scope 1 {
        debug y => _1;                   // in scope 1 at ui/consts/control-flow/drop-pass.rs:9:9: 9:10
        let _2: std::option::Option<std::vec::Vec<i32>>; // in scope 1 at ui/consts/control-flow/drop-pass.rs:10:9: 10:10
        scope 2 {
            debug x => _2;               // in scope 2 at ui/consts/control-flow/drop-pass.rs:10:9: 10:10
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/drop-pass.rs:9:9: 9:10
        _1 = Option::<Vec<i32>>::None;   // scope 0 at ui/consts/control-flow/drop-pass.rs:9:31: 9:35
        StorageLive(_2);                 // scope 1 at ui/consts/control-flow/drop-pass.rs:10:9: 10:10
        StorageLive(_3);                 // scope 1 at ui/consts/control-flow/drop-pass.rs:10:18: 10:28
        ConstEvalCounter;                // scope 1 at ui/consts/control-flow/drop-pass.rs:10:18: 10:28
        _3 = Vec::<i32>::new() -> [return: bb1, unwind: bb6]; // scope 1 at ui/consts/control-flow/drop-pass.rs:10:18: 10:28
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/drop-pass.rs:10:18: 10:26
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() -> Vec<i32> {Vec::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Option::<Vec<i32>>::Some(move _3); // scope 1 at ui/consts/control-flow/drop-pass.rs:10:13: 10:29
        StorageDead(_3);                 // scope 1 at ui/consts/control-flow/drop-pass.rs:10:28: 10:29
        StorageLive(_4);                 // scope 2 at ui/consts/control-flow/drop-pass.rs:12:8: 12:12
        _4 = const true;                 // scope 2 at ui/consts/control-flow/drop-pass.rs:12:8: 12:12
        switchInt(move _4) -> [0: bb3, otherwise: bb2]; // scope 2 at ui/consts/control-flow/drop-pass.rs:12:8: 12:12
    }

    bb2: {
        _0 = move _2;                    // scope 2 at ui/consts/control-flow/drop-pass.rs:13:9: 13:10
        goto -> bb4;                     // scope 2 at ui/consts/control-flow/drop-pass.rs:12:5: 16:6
    }

    bb3: {
        _0 = move _2;                    // scope 2 at ui/consts/control-flow/drop-pass.rs:15:9: 15:10
        goto -> bb4;                     // scope 2 at ui/consts/control-flow/drop-pass.rs:12:5: 16:6
    }

    bb4: {
        StorageDead(_4);                 // scope 2 at ui/consts/control-flow/drop-pass.rs:16:5: 16:6
        StorageDead(_2);                 // scope 1 at ui/consts/control-flow/drop-pass.rs:17:1: 17:2
        drop(_1) -> [return: bb5, unwind: bb7]; // scope 0 at ui/consts/control-flow/drop-pass.rs:17:1: 17:2
    }

    bb5: {
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/drop-pass.rs:17:1: 17:2
        return;                          // scope 0 at ui/consts/control-flow/drop-pass.rs:8:1: 17:3
    }

    bb6 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at ui/consts/control-flow/drop-pass.rs:17:1: 17:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/consts/control-flow/drop-pass.rs:8:1: 17:3
    }
}

const _: Option<Vec<i32>> = {
    let mut _0: std::option::Option<std::vec::Vec<i32>>; // return place in scope 0 at ui/consts/control-flow/drop-pass.rs:19:10: 19:26
    let _1: std::option::Option<std::vec::Vec<i32>>; // in scope 0 at ui/consts/control-flow/drop-pass.rs:20:9: 20:10
    let mut _2: std::vec::Vec<i32>;      // in scope 0 at ui/consts/control-flow/drop-pass.rs:20:18: 20:28
    let mut _3: ();                      // in scope 0 at ui/consts/control-flow/drop-pass.rs:21:11: 21:13
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/control-flow/drop-pass.rs:20:9: 20:10
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/drop-pass.rs:20:9: 20:10
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/drop-pass.rs:20:18: 20:28
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/drop-pass.rs:20:18: 20:28
        _2 = Vec::<i32>::new() -> bb1;   // scope 0 at ui/consts/control-flow/drop-pass.rs:20:18: 20:28
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/drop-pass.rs:20:18: 20:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<i32> {Vec::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Option::<Vec<i32>>::Some(move _2); // scope 0 at ui/consts/control-flow/drop-pass.rs:20:13: 20:29
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/drop-pass.rs:20:28: 20:29
        StorageLive(_3);                 // scope 1 at ui/consts/control-flow/drop-pass.rs:21:11: 21:13
        _3 = ();                         // scope 1 at ui/consts/control-flow/drop-pass.rs:21:11: 21:13
        _0 = move _1;                    // scope 1 at ui/consts/control-flow/drop-pass.rs:22:15: 22:16
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/drop-pass.rs:24:1: 24:2
        StorageDead(_3);                 // scope 0 at ui/consts/control-flow/drop-pass.rs:24:1: 24:2
        return;                          // scope 0 at ui/consts/control-flow/drop-pass.rs:19:1: 24:3
    }
}

const _: Option<Vec<i32>> = {
    let mut _0: std::option::Option<std::vec::Vec<i32>>; // return place in scope 0 at ui/consts/control-flow/drop-pass.rs:26:10: 26:26
    let mut _1: std::option::Option<std::vec::Vec<i32>>; // in scope 0 at ui/consts/control-flow/drop-pass.rs:27:9: 27:17
    let mut _2: std::vec::Vec<i32>;      // in scope 0 at ui/consts/control-flow/drop-pass.rs:27:25: 27:35
    let _5: ();                          // in scope 0 at ui/consts/control-flow/drop-pass.rs:31:5: 41:6
    let mut _6: ();                      // in scope 0 at ui/consts/control-flow/drop-pass.rs:26:1: 44:3
    let mut _7: bool;                    // in scope 0 at ui/consts/control-flow/drop-pass.rs:31:11: 31:17
    let mut _8: i32;                     // in scope 0 at ui/consts/control-flow/drop-pass.rs:31:11: 31:12
    let mut _9: std::option::Option<std::vec::Vec<i32>>; // in scope 0 at ui/consts/control-flow/drop-pass.rs:32:15: 32:19
    let mut _10: std::option::Option<std::vec::Vec<i32>>; // in scope 0 at ui/consts/control-flow/drop-pass.rs:33:16: 33:20
    let mut _11: std::option::Option<std::vec::Vec<i32>>; // in scope 0 at ui/consts/control-flow/drop-pass.rs:37:16: 37:19
    let mut _12: std::option::Option<std::vec::Vec<i32>>; // in scope 0 at ui/consts/control-flow/drop-pass.rs:38:15: 38:19
    let mut _13: (i32, bool);            // in scope 0 at ui/consts/control-flow/drop-pass.rs:40:9: 40:15
    let mut _14: !;                      // in scope 0 at ui/consts/control-flow/drop-pass.rs:31:5: 41:6
    let _15: ();                         // in scope 0 at ui/consts/control-flow/drop-pass.rs:31:5: 41:6
    let mut _16: !;                      // in scope 0 at ui/consts/control-flow/drop-pass.rs:31:5: 41:6
    let mut _17: bool;                   // in scope 0 at ui/consts/control-flow/drop-pass.rs:44:1: 44:2
    let mut _18: bool;                   // in scope 0 at ui/consts/control-flow/drop-pass.rs:44:1: 44:2
    scope 1 {
        debug some => _1;                // in scope 1 at ui/consts/control-flow/drop-pass.rs:27:9: 27:17
        let mut _3: std::option::Option<std::vec::Vec<i32>>; // in scope 1 at ui/consts/control-flow/drop-pass.rs:28:9: 28:16
        scope 2 {
            debug tmp => _3;             // in scope 2 at ui/consts/control-flow/drop-pass.rs:28:9: 28:16
            let mut _4: i32;             // in scope 2 at ui/consts/control-flow/drop-pass.rs:30:9: 30:14
            scope 3 {
                debug i => _4;           // in scope 3 at ui/consts/control-flow/drop-pass.rs:30:9: 30:14
            }
        }
    }

    bb0: {
        _18 = const false;               // scope 0 at ui/consts/control-flow/drop-pass.rs:27:9: 27:17
        _17 = const false;               // scope 0 at ui/consts/control-flow/drop-pass.rs:27:9: 27:17
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/drop-pass.rs:27:9: 27:17
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/drop-pass.rs:27:25: 27:35
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/drop-pass.rs:27:25: 27:35
        _2 = Vec::<i32>::new() -> bb1;   // scope 0 at ui/consts/control-flow/drop-pass.rs:27:25: 27:35
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/drop-pass.rs:27:25: 27:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<i32> {Vec::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _18 = const true;                // scope 0 at ui/consts/control-flow/drop-pass.rs:27:20: 27:36
        _1 = Option::<Vec<i32>>::Some(move _2); // scope 0 at ui/consts/control-flow/drop-pass.rs:27:20: 27:36
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/drop-pass.rs:27:35: 27:36
        StorageLive(_3);                 // scope 1 at ui/consts/control-flow/drop-pass.rs:28:9: 28:16
        _17 = const true;                // scope 1 at ui/consts/control-flow/drop-pass.rs:28:19: 28:23
        _3 = Option::<Vec<i32>>::None;   // scope 1 at ui/consts/control-flow/drop-pass.rs:28:19: 28:23
        StorageLive(_4);                 // scope 2 at ui/consts/control-flow/drop-pass.rs:30:9: 30:14
        _4 = const 0_i32;                // scope 2 at ui/consts/control-flow/drop-pass.rs:30:17: 30:18
        StorageLive(_5);                 // scope 3 at ui/consts/control-flow/drop-pass.rs:31:5: 41:6
        goto -> bb2;                     // scope 3 at ui/consts/control-flow/drop-pass.rs:31:5: 41:6
    }

    bb2: {
        StorageLive(_7);                 // scope 3 at ui/consts/control-flow/drop-pass.rs:31:11: 31:17
        StorageLive(_8);                 // scope 3 at ui/consts/control-flow/drop-pass.rs:31:11: 31:12
        _8 = _4;                         // scope 3 at ui/consts/control-flow/drop-pass.rs:31:11: 31:12
        _7 = Lt(move _8, const 10_i32);  // scope 3 at ui/consts/control-flow/drop-pass.rs:31:11: 31:17
        StorageDead(_8);                 // scope 3 at ui/consts/control-flow/drop-pass.rs:31:16: 31:17
        switchInt(move _7) -> [0: bb5, otherwise: bb3]; // scope 3 at ui/consts/control-flow/drop-pass.rs:31:11: 31:17
    }

    bb3: {
        StorageLive(_9);                 // scope 3 at ui/consts/control-flow/drop-pass.rs:32:15: 32:19
        _18 = const false;               // scope 3 at ui/consts/control-flow/drop-pass.rs:32:15: 32:19
        _9 = move _1;                    // scope 3 at ui/consts/control-flow/drop-pass.rs:32:15: 32:19
        drop(_3) -> [return: bb9, unwind: bb8]; // scope 3 at ui/consts/control-flow/drop-pass.rs:32:9: 32:12
    }

    bb4: {
        _4 = move (_13.0: i32);          // scope 3 at ui/consts/control-flow/drop-pass.rs:40:9: 40:15
        _6 = const ();                   // scope 3 at ui/consts/control-flow/drop-pass.rs:31:18: 41:6
        StorageDead(_7);                 // scope 3 at ui/consts/control-flow/drop-pass.rs:41:5: 41:6
        ConstEvalCounter;                // scope 3 at ui/consts/control-flow/drop-pass.rs:31:5: 41:6
        goto -> bb2;                     // scope 3 at ui/consts/control-flow/drop-pass.rs:31:5: 41:6
    }

    bb5: {
        StorageLive(_15);                // scope 3 at ui/consts/control-flow/drop-pass.rs:31:5: 41:6
        _5 = const ();                   // scope 3 at ui/consts/control-flow/drop-pass.rs:31:5: 41:6
        StorageDead(_15);                // scope 3 at ui/consts/control-flow/drop-pass.rs:41:5: 41:6
        StorageDead(_7);                 // scope 3 at ui/consts/control-flow/drop-pass.rs:41:5: 41:6
        StorageDead(_5);                 // scope 3 at ui/consts/control-flow/drop-pass.rs:41:5: 41:6
        _18 = const false;               // scope 3 at ui/consts/control-flow/drop-pass.rs:43:5: 43:9
        _0 = move _1;                    // scope 3 at ui/consts/control-flow/drop-pass.rs:43:5: 43:9
        StorageDead(_4);                 // scope 2 at ui/consts/control-flow/drop-pass.rs:44:1: 44:2
        drop(_3) -> [return: bb6, unwind: bb15]; // scope 1 at ui/consts/control-flow/drop-pass.rs:44:1: 44:2
    }

    bb6: {
        _17 = const false;               // scope 1 at ui/consts/control-flow/drop-pass.rs:44:1: 44:2
        StorageDead(_3);                 // scope 1 at ui/consts/control-flow/drop-pass.rs:44:1: 44:2
        _18 = const false;               // scope 0 at ui/consts/control-flow/drop-pass.rs:44:1: 44:2
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/drop-pass.rs:44:1: 44:2
        return;                          // scope 0 at ui/consts/control-flow/drop-pass.rs:26:1: 44:3
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/consts/control-flow/drop-pass.rs:26:1: 44:3
    }

    bb8 (cleanup): {
        _17 = const true;                // scope 3 at ui/consts/control-flow/drop-pass.rs:32:9: 32:12
        _3 = move _9;                    // scope 3 at ui/consts/control-flow/drop-pass.rs:32:9: 32:12
        goto -> bb13;                    // scope 3 at ui/consts/control-flow/drop-pass.rs:32:9: 32:12
    }

    bb9: {
        _17 = const true;                // scope 3 at ui/consts/control-flow/drop-pass.rs:32:9: 32:12
        _3 = move _9;                    // scope 3 at ui/consts/control-flow/drop-pass.rs:32:9: 32:12
        StorageDead(_9);                 // scope 3 at ui/consts/control-flow/drop-pass.rs:32:18: 32:19
        StorageLive(_10);                // scope 3 at ui/consts/control-flow/drop-pass.rs:33:16: 33:20
        _10 = Option::<Vec<i32>>::None;  // scope 3 at ui/consts/control-flow/drop-pass.rs:33:16: 33:20
        _18 = const true;                // scope 3 at ui/consts/control-flow/drop-pass.rs:33:9: 33:13
        _1 = move _10;                   // scope 3 at ui/consts/control-flow/drop-pass.rs:33:9: 33:13
        StorageDead(_10);                // scope 3 at ui/consts/control-flow/drop-pass.rs:33:19: 33:20
        StorageLive(_11);                // scope 3 at ui/consts/control-flow/drop-pass.rs:37:16: 37:19
        _17 = const false;               // scope 3 at ui/consts/control-flow/drop-pass.rs:37:16: 37:19
        _11 = move _3;                   // scope 3 at ui/consts/control-flow/drop-pass.rs:37:16: 37:19
        drop(_1) -> [return: bb11, unwind: bb10]; // scope 3 at ui/consts/control-flow/drop-pass.rs:37:9: 37:13
    }

    bb10 (cleanup): {
        _18 = const true;                // scope 3 at ui/consts/control-flow/drop-pass.rs:37:9: 37:13
        _1 = move _11;                   // scope 3 at ui/consts/control-flow/drop-pass.rs:37:9: 37:13
        goto -> bb13;                    // scope 3 at ui/consts/control-flow/drop-pass.rs:37:9: 37:13
    }

    bb11: {
        _18 = const true;                // scope 3 at ui/consts/control-flow/drop-pass.rs:37:9: 37:13
        _1 = move _11;                   // scope 3 at ui/consts/control-flow/drop-pass.rs:37:9: 37:13
        StorageDead(_11);                // scope 3 at ui/consts/control-flow/drop-pass.rs:37:18: 37:19
        StorageLive(_12);                // scope 3 at ui/consts/control-flow/drop-pass.rs:38:15: 38:19
        _12 = Option::<Vec<i32>>::None;  // scope 3 at ui/consts/control-flow/drop-pass.rs:38:15: 38:19
        _17 = const true;                // scope 3 at ui/consts/control-flow/drop-pass.rs:38:9: 38:12
        _3 = move _12;                   // scope 3 at ui/consts/control-flow/drop-pass.rs:38:9: 38:12
        StorageDead(_12);                // scope 3 at ui/consts/control-flow/drop-pass.rs:38:18: 38:19
        _13 = CheckedAdd(_4, const 1_i32); // scope 3 at ui/consts/control-flow/drop-pass.rs:40:9: 40:15
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", _4, const 1_i32) -> [success: bb4, unwind: bb13]; // scope 3 at ui/consts/control-flow/drop-pass.rs:40:9: 40:15
    }

    bb12 (cleanup): {
        drop(_3) -> bb15;                // scope 1 at ui/consts/control-flow/drop-pass.rs:44:1: 44:2
    }

    bb13 (cleanup): {
        switchInt(_17) -> [0: bb15, otherwise: bb12]; // scope 1 at ui/consts/control-flow/drop-pass.rs:44:1: 44:2
    }

    bb14 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at ui/consts/control-flow/drop-pass.rs:44:1: 44:2
    }

    bb15 (cleanup): {
        switchInt(_18) -> [0: bb7, otherwise: bb14]; // scope 0 at ui/consts/control-flow/drop-pass.rs:44:1: 44:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/drop-pass.rs:46:11: 46:11

    bb0: {
        return;                          // scope 0 at ui/consts/control-flow/drop-pass.rs:46:13: 46:13
    }
}
