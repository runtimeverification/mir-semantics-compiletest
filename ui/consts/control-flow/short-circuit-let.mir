// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const X: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/control-flow/short-circuit-let.rs:5:10: 5:13
    let mut _1: i32;                     // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:6:9: 6:14
    let mut _2: bool;                    // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:7:13: 7:37
    let mut _3: bool;                    // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:7:21: 7:37
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/control-flow/short-circuit-let.rs:6:9: 6:14
        scope 2 {
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:6:9: 6:14
        _1 = const 0_i32;                // scope 0 at ui/consts/control-flow/short-circuit-let.rs:6:17: 6:18
        StorageLive(_2);                 // scope 1 at ui/consts/control-flow/short-circuit-let.rs:7:13: 7:37
        switchInt(const true) -> [0: bb1, otherwise: bb2]; // scope 1 at ui/consts/control-flow/short-circuit-let.rs:7:13: 7:37
    }

    bb1: {
        _2 = const false;                // scope 1 at ui/consts/control-flow/short-circuit-let.rs:7:13: 7:37
        goto -> bb3;                     // scope 1 at ui/consts/control-flow/short-circuit-let.rs:7:13: 7:37
    }

    bb2: {
        StorageLive(_3);                 // scope 1 at ui/consts/control-flow/short-circuit-let.rs:7:21: 7:37
        _1 = const 1_i32;                // scope 1 at ui/consts/control-flow/short-circuit-let.rs:7:23: 7:28
        _3 = const false;                // scope 1 at ui/consts/control-flow/short-circuit-let.rs:7:30: 7:35
        _2 = move _3;                    // scope 1 at ui/consts/control-flow/short-circuit-let.rs:7:13: 7:37
        goto -> bb3;                     // scope 1 at ui/consts/control-flow/short-circuit-let.rs:7:13: 7:37
    }

    bb3: {
        StorageDead(_3);                 // scope 1 at ui/consts/control-flow/short-circuit-let.rs:7:36: 7:37
        StorageDead(_2);                 // scope 1 at ui/consts/control-flow/short-circuit-let.rs:7:37: 7:38
        _0 = _1;                         // scope 2 at ui/consts/control-flow/short-circuit-let.rs:8:5: 8:6
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:9:1: 9:2
        return;                          // scope 0 at ui/consts/control-flow/short-circuit-let.rs:5:1: 9:3
    }
}

const Y: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/control-flow/short-circuit-let.rs:11:10: 11:14
    let _1: bool;                        // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:12:9: 12:10
    let mut _2: bool;                    // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:12:13: 12:26
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/control-flow/short-circuit-let.rs:12:9: 12:10
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:12:9: 12:10
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:12:13: 12:26
        switchInt(const true) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/consts/control-flow/short-circuit-let.rs:12:13: 12:26
    }

    bb1: {
        _1 = const true;                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:12:13: 12:34
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/short-circuit-let.rs:12:13: 12:34
    }

    bb2: {
        _1 = const true;                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:12:13: 12:34
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/short-circuit-let.rs:12:13: 12:34
    }

    bb3: {
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:12:33: 12:34
        _0 = _1;                         // scope 1 at ui/consts/control-flow/short-circuit-let.rs:13:5: 13:6
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:14:1: 14:2
        return;                          // scope 0 at ui/consts/control-flow/short-circuit-let.rs:11:1: 14:3
    }

    bb4: {
        _2 = const false;                // scope 0 at ui/consts/control-flow/short-circuit-let.rs:12:13: 12:26
        goto -> bb6;                     // scope 0 at ui/consts/control-flow/short-circuit-let.rs:12:13: 12:26
    }

    bb5: {
        _2 = const false;                // scope 0 at ui/consts/control-flow/short-circuit-let.rs:12:13: 12:26
        goto -> bb6;                     // scope 0 at ui/consts/control-flow/short-circuit-let.rs:12:13: 12:26
    }

    bb6: {
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/consts/control-flow/short-circuit-let.rs:12:13: 12:34
    }
}

fn truthy() -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/control-flow/short-circuit-let.rs:16:22: 16:26
    let _1: bool;                        // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:17:9: 17:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/control-flow/short-circuit-let.rs:17:9: 17:10
    }

    bb0: {
        _1 = const true;                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:17:13: 17:33
        _0 = const true;                 // scope 1 at ui/consts/control-flow/short-circuit-let.rs:18:5: 18:6
        return;                          // scope 0 at ui/consts/control-flow/short-circuit-let.rs:19:2: 19:2
    }
}

// MIR FOR CTFE
fn truthy() -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/control-flow/short-circuit-let.rs:16:22: 16:26
    let _1: bool;                        // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:17:9: 17:10
    let mut _2: bool;                    // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:17:21: 17:33
    let mut _3: !;                       // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:17:21: 17:33
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/control-flow/short-circuit-let.rs:17:9: 17:10
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:17:9: 17:10
        switchInt(const true) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/consts/control-flow/short-circuit-let.rs:17:13: 17:33
    }

    bb1: {
        _1 = const true;                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:17:13: 17:33
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:17:32: 17:33
        _0 = _1;                         // scope 1 at ui/consts/control-flow/short-circuit-let.rs:18:5: 18:6
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:19:1: 19:2
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/short-circuit-let.rs:19:2: 19:2
    }

    bb2: {
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:17:21: 17:33
        _0 = const false;                // scope 0 at ui/consts/control-flow/short-circuit-let.rs:17:28: 17:33
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:17:32: 17:33
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:19:1: 19:2
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/short-circuit-let.rs:19:2: 19:2
    }

    bb3: {
        return;                          // scope 0 at ui/consts/control-flow/short-circuit-let.rs:19:2: 19:2
    }
}

fn falsy() -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/control-flow/short-circuit-let.rs:21:21: 21:25
    let _1: bool;                        // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:22:9: 22:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/control-flow/short-circuit-let.rs:22:9: 22:10
    }

    bb0: {
        _0 = const false;                // scope 0 at ui/consts/control-flow/short-circuit-let.rs:22:28: 22:33
        return;                          // scope 0 at ui/consts/control-flow/short-circuit-let.rs:24:2: 24:2
    }
}

// MIR FOR CTFE
fn falsy() -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/control-flow/short-circuit-let.rs:21:21: 21:25
    let _1: bool;                        // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:22:9: 22:10
    let mut _2: bool;                    // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:22:21: 22:33
    let mut _3: !;                       // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:22:21: 22:33
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/control-flow/short-circuit-let.rs:22:9: 22:10
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:22:9: 22:10
        switchInt(const true) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/consts/control-flow/short-circuit-let.rs:22:13: 22:33
    }

    bb1: {
        _1 = const false;                // scope 0 at ui/consts/control-flow/short-circuit-let.rs:22:13: 22:33
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:22:32: 22:33
        _0 = _1;                         // scope 1 at ui/consts/control-flow/short-circuit-let.rs:23:5: 23:6
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:24:1: 24:2
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/short-circuit-let.rs:24:2: 24:2
    }

    bb2: {
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:22:21: 22:33
        _0 = const false;                // scope 0 at ui/consts/control-flow/short-circuit-let.rs:22:28: 22:33
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:22:32: 22:33
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:24:1: 24:2
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/short-circuit-let.rs:24:2: 24:2
    }

    bb3: {
        return;                          // scope 0 at ui/consts/control-flow/short-circuit-let.rs:24:2: 24:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/short-circuit-let.rs:26:11: 26:11
    let mut _1: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _5: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:35:5: 35:34
    let mut _8: bool;                    // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:35:13: 35:33
    let mut _9: bool;                    // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:35:13: 35:21
    let mut _10: bool;                   // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:35:25: 35:33
    let mut _11: bool;                   // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:35:26: 35:33
    let mut _12: !;                      // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:35:5: 35:34
    let mut _13: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _14: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _4;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _5;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _6: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _6;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _14 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _2 = _14;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _13 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _13;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _4 = (_1.0: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _5 = (_1.1: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = truthy() -> bb4;            // scope 0 at ui/consts/control-flow/short-circuit-let.rs:35:13: 35:21
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/short-circuit-let.rs:35:13: 35:19
                                         // + literal: Const { ty: fn() -> bool {truthy}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = const false;                // scope 0 at ui/consts/control-flow/short-circuit-let.rs:35:13: 35:33
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/short-circuit-let.rs:35:13: 35:33
    }

    bb2: {
        _11 = falsy() -> bb5;            // scope 0 at ui/consts/control-flow/short-circuit-let.rs:35:26: 35:33
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/short-circuit-let.rs:35:26: 35:31
                                         // + literal: Const { ty: fn() -> bool {falsy}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = Not(move _8);               // scope 0 at ui/consts/control-flow/short-circuit-let.rs:35:5: 35:34
        switchInt(move _7) -> [0: bb7, otherwise: bb6]; // scope 0 at ui/consts/control-flow/short-circuit-let.rs:35:5: 35:34
    }

    bb4: {
        switchInt(move _9) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/consts/control-flow/short-circuit-let.rs:35:13: 35:33
    }

    bb5: {
        _10 = Not(move _11);             // scope 0 at ui/consts/control-flow/short-circuit-let.rs:35:25: 35:33
        _8 = move _10;                   // scope 0 at ui/consts/control-flow/short-circuit-let.rs:35:13: 35:33
        goto -> bb3;                     // scope 0 at ui/consts/control-flow/short-circuit-let.rs:35:13: 35:33
    }

    bb6: {
        _12 = core::panicking::panic(const "assertion failed: truthy() && !falsy()"); // scope 0 at ui/consts/control-flow/short-circuit-let.rs:35:5: 35:34
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/short-circuit-let.rs:35:5: 35:34
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        return;                          // scope 0 at ui/consts/control-flow/short-circuit-let.rs:36:2: 36:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:31:19: 31:20

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/consts/control-flow/short-circuit-let.rs:31:19: 31:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: i32;                     // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:31:16: 31:17

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/control-flow/short-circuit-let.rs:31:16: 31:17
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

const main::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/short-circuit-let.rs:27:14: 27:16
    let mut _1: bool;                    // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:27:19: 27:29
    let mut _2: !;                       // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:27:19: 27:29

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:27:19: 27:29
        _1 = Not(const _);               // scope 0 at ui/consts/control-flow/short-circuit-let.rs:27:19: 27:29
        switchInt(move _1) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/consts/control-flow/short-circuit-let.rs:27:19: 27:29
    }

    bb1: {
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:27:19: 27:29
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/short-circuit-let.rs:27:19: 27:29
        _2 = core::panicking::panic(const "assertion failed: Y"); // scope 0 at ui/consts/control-flow/short-circuit-let.rs:27:19: 27:29
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/short-circuit-let.rs:27:19: 27:29
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _0 = const ();                   // scope 0 at ui/consts/control-flow/short-circuit-let.rs:27:29: 27:29
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:27:28: 27:29
        return;                          // scope 0 at ui/consts/control-flow/short-circuit-let.rs:27:5: 27:30
    }
}

const main::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/short-circuit-let.rs:30:14: 30:16
    let mut _1: bool;                    // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:30:19: 30:34
    let mut _2: bool;                    // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:30:27: 30:33
    let mut _3: !;                       // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:30:19: 30:34

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:30:19: 30:34
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:30:27: 30:33
        _2 = Eq(const _, const 1_i32);   // scope 0 at ui/consts/control-flow/short-circuit-let.rs:30:27: 30:33
        _1 = Not(move _2);               // scope 0 at ui/consts/control-flow/short-circuit-let.rs:30:19: 30:34
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:30:33: 30:34
        switchInt(move _1) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/consts/control-flow/short-circuit-let.rs:30:19: 30:34
    }

    bb1: {
        StorageLive(_3);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:30:19: 30:34
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/short-circuit-let.rs:30:19: 30:34
        _3 = core::panicking::panic(const "assertion failed: X == 1"); // scope 0 at ui/consts/control-flow/short-circuit-let.rs:30:19: 30:34
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/short-circuit-let.rs:30:19: 30:34
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _0 = const ();                   // scope 0 at ui/consts/control-flow/short-circuit-let.rs:30:34: 30:34
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:30:33: 30:34
        return;                          // scope 0 at ui/consts/control-flow/short-circuit-let.rs:30:5: 30:35
    }
}

const main::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/short-circuit-let.rs:33:14: 33:16
    let mut _1: bool;                    // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:33:19: 33:36
    let mut _2: bool;                    // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:33:27: 33:35
    let mut _3: !;                       // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:33:19: 33:36

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:33:19: 33:36
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:33:27: 33:35
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/short-circuit-let.rs:33:27: 33:35
        _2 = truthy() -> bb1;            // scope 0 at ui/consts/control-flow/short-circuit-let.rs:33:27: 33:35
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/short-circuit-let.rs:33:27: 33:33
                                         // + literal: Const { ty: fn() -> bool {truthy}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Not(move _2);               // scope 0 at ui/consts/control-flow/short-circuit-let.rs:33:19: 33:36
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:33:35: 33:36
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/control-flow/short-circuit-let.rs:33:19: 33:36
    }

    bb2: {
        StorageLive(_3);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:33:19: 33:36
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/short-circuit-let.rs:33:19: 33:36
        _3 = core::panicking::panic(const "assertion failed: truthy()"); // scope 0 at ui/consts/control-flow/short-circuit-let.rs:33:19: 33:36
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/short-circuit-let.rs:33:19: 33:36
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/control-flow/short-circuit-let.rs:33:36: 33:36
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:33:35: 33:36
        return;                          // scope 0 at ui/consts/control-flow/short-circuit-let.rs:33:5: 33:37
    }
}

const main::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/short-circuit-let.rs:34:14: 34:16
    let mut _1: bool;                    // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:34:19: 34:36
    let mut _2: bool;                    // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:34:27: 34:35
    let mut _3: bool;                    // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:34:28: 34:35
    let mut _4: !;                       // in scope 0 at ui/consts/control-flow/short-circuit-let.rs:34:19: 34:36

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:34:19: 34:36
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:34:27: 34:35
        StorageLive(_3);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:34:28: 34:35
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/short-circuit-let.rs:34:28: 34:35
        _3 = falsy() -> bb1;             // scope 0 at ui/consts/control-flow/short-circuit-let.rs:34:28: 34:35
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/short-circuit-let.rs:34:28: 34:33
                                         // + literal: Const { ty: fn() -> bool {falsy}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Not(move _3);               // scope 0 at ui/consts/control-flow/short-circuit-let.rs:34:27: 34:35
        StorageDead(_3);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:34:34: 34:35
        _1 = Not(move _2);               // scope 0 at ui/consts/control-flow/short-circuit-let.rs:34:19: 34:36
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:34:35: 34:36
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/control-flow/short-circuit-let.rs:34:19: 34:36
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:34:19: 34:36
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/short-circuit-let.rs:34:19: 34:36
        _4 = core::panicking::panic(const "assertion failed: !falsy()"); // scope 0 at ui/consts/control-flow/short-circuit-let.rs:34:19: 34:36
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/short-circuit-let.rs:34:19: 34:36
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/control-flow/short-circuit-let.rs:34:36: 34:36
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/short-circuit-let.rs:34:35: 34:36
        return;                          // scope 0 at ui/consts/control-flow/short-circuit-let.rs:34:5: 34:37
    }
}
