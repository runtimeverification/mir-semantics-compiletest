// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const X: i32 = {
    let mut _0: i32;
    let mut _1: i32;
    let mut _2: bool;
    let mut _3: bool;
    scope 1 {
        debug x => _1;
        scope 2 {
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = const 0_i32;
        StorageLive(_2);
        switchInt(const true) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _2 = const false;
        goto -> bb3;
    }

    bb2: {
        StorageLive(_3);
        _1 = const 1_i32;
        _3 = const false;
        _2 = move _3;
        goto -> bb3;
    }

    bb3: {
        StorageDead(_3);
        StorageDead(_2);
        _0 = _1;
        StorageDead(_1);
        return;
    }
}

const Y: bool = {
    let mut _0: bool;
    let _1: bool;
    let mut _2: bool;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        switchInt(const true) -> [0: bb4, otherwise: bb5];
    }

    bb1: {
        _1 = const true;
        goto -> bb3;
    }

    bb2: {
        _1 = const true;
        goto -> bb3;
    }

    bb3: {
        StorageDead(_2);
        _0 = _1;
        StorageDead(_1);
        return;
    }

    bb4: {
        _2 = const false;
        goto -> bb6;
    }

    bb5: {
        _2 = const false;
        goto -> bb6;
    }

    bb6: {
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }
}

fn truthy() -> bool {
    let mut _0: bool;
    let _1: bool;
    scope 1 {
        debug x => const true;
    }

    bb0: {
        _1 = const true;
        _0 = _1;
        return;
    }
}

// MIR FOR CTFE
fn truthy() -> bool {
    let mut _0: bool;
    let _1: bool;
    let mut _2: bool;
    let mut _3: !;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_1);
        switchInt(const true) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _1 = const true;
        StorageDead(_2);
        _0 = _1;
        StorageDead(_1);
        goto -> bb3;
    }

    bb2: {
        StorageLive(_2);
        _0 = const false;
        StorageDead(_2);
        StorageDead(_1);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn falsy() -> bool {
    let mut _0: bool;
    scope 1 {
        debug x => const false;
    }

    bb0: {
        _0 = const false;
        return;
    }
}

// MIR FOR CTFE
fn falsy() -> bool {
    let mut _0: bool;
    let _1: bool;
    let mut _2: bool;
    let mut _3: !;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_1);
        switchInt(const true) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _1 = const false;
        StorageDead(_2);
        _0 = _1;
        StorageDead(_1);
        goto -> bb3;
    }

    bb2: {
        StorageLive(_2);
        _0 = const false;
        StorageDead(_2);
        StorageDead(_1);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: !;
    let mut _3: (&i32, &i32);
    let _4: &i32;
    let _5: &i32;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: i32;
    let mut _9: i32;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: !;
    let mut _19: &i32;
    let mut _20: &i32;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }

    bb0: {
        _1 = Not(const _);
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _2 = core::panicking::panic(const "assertion failed: Y") -> unwind continue;
    }

    bb2: {
        _20 = const _;
        _19 = const _;
        _3 = (_20, _19);
        _4 = (_3.0: &i32);
        _5 = (_3.1: &i32);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<i32, i32>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb4: {
        _15 = truthy() -> [return: bb8, unwind continue];
    }

    bb5: {
        _14 = const false;
        goto -> bb7;
    }

    bb6: {
        _17 = falsy() -> [return: bb9, unwind continue];
    }

    bb7: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb11, otherwise: bb10];
    }

    bb8: {
        switchInt(move _15) -> [0: bb5, otherwise: bb6];
    }

    bb9: {
        _16 = Not(move _17);
        _14 = move _16;
        goto -> bb7;
    }

    bb10: {
        _18 = core::panicking::panic(const "assertion failed: truthy() && !falsy()") -> unwind continue;
    }

    bb11: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

const main::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: !;

    bb0: {
        StorageLive(_1);
        _1 = Not(const _);
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageLive(_2);
        ConstEvalCounter;
        _2 = core::panicking::panic(const "assertion failed: Y") -> unwind continue;
    }

    bb2: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const main::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = Eq(const _, const 1_i32);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::panicking::panic(const "assertion failed: X == 1") -> unwind continue;
    }

    bb2: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const main::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        ConstEvalCounter;
        _2 = truthy() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageLive(_3);
        ConstEvalCounter;
        _3 = core::panicking::panic(const "assertion failed: truthy()") -> unwind continue;
    }

    bb3: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const main::_: () = {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = falsy() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Not(move _3);
        StorageDead(_3);
        _1 = Not(move _2);
        StorageDead(_2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageLive(_4);
        ConstEvalCounter;
        _4 = core::panicking::panic(const "assertion failed: !falsy()") -> unwind continue;
    }

    bb3: {
        _0 = const ();
        StorageDead(_1);
        return;
    }
}
