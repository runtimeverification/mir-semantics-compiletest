// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: E) -> () {
    debug e => _1;
    let mut _0: ();
    let mut _2: isize;

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb2, 1: bb2, 2: bb2, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        return;
    }
}

// MIR FOR CTFE
fn f(_1: E) -> () {
    debug e => _1;
    let mut _0: ();
    let mut _2: isize;

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const ();
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = const ();
        goto -> bb5;
    }

    bb4: {
        _0 = const ();
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn g(_1: E) -> usize {
    debug e => _1;
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

// MIR FOR CTFE
fn g(_1: E) -> usize {
    debug e => _1;
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let _2: &usize;
    let _3: &usize;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&usize, &usize);
    let mut _12: &usize;
    let _13: usize;
    let mut _14: E;
    let _15: &usize;
    let _16: &usize;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: usize;
    let mut _20: usize;
    let _22: !;
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _24: &usize;
    let mut _25: &usize;
    let mut _26: &usize;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _15;
        debug right_val => _16;
        let _21: core::panicking::AssertKind;
        scope 4 {
            debug kind => _21;
        }
    }

    bb0: {
        _26 = const _;
        _25 = const _;
        _1 = (_26, _25);
        _2 = (_1.0: &usize);
        _3 = (_1.1: &usize);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<usize, usize>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        _14 = E::A;
        _13 = g(move _14) -> [return: bb3, unwind continue];
    }

    bb3: {
        _12 = &_13;
        _24 = const _;
        _11 = (move _12, _24);
        _15 = (_11.0: &usize);
        _16 = (_11.1: &usize);
        _19 = (*_15);
        _20 = (*_16);
        _18 = Eq(move _19, move _20);
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _21 = core::panicking::AssertKind::Eq;
        _23 = Option::<Arguments<'_>>::None;
        _22 = core::panicking::assert_failed::<usize, usize>(move _21, _15, _16, move _23) -> unwind continue;
    }

    bb5: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

const X: usize = {
    let mut _0: usize;
    let mut _1: E;

    bb0: {
        StorageLive(_1);
        _1 = E::C;
        ConstEvalCounter;
        _0 = g(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}
