// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: E) -> () {
    debug e => _1;                       // in scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:11:12: 11:13
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:11:18: 11:18
    let mut _2: isize;                   // in scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:13:9: 13:13

    bb0: {
        _2 = discriminant(_1);           // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:12:11: 12:12
        switchInt(move _2) -> [0: bb2, 1: bb2, 2: bb2, otherwise: bb1]; // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:12:5: 12:12
    }

    bb1: {
        unreachable;                     // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:12:11: 12:12
    }

    bb2: {
        return;                          // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:17:2: 17:2
    }
}

// MIR FOR CTFE
fn f(_1: E) -> () {
    debug e => _1;                       // in scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:11:12: 11:13
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:11:18: 11:18
    let mut _2: isize;                   // in scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:13:9: 13:13

    bb0: {
        _2 = discriminant(_1);           // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:12:11: 12:12
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:12:5: 12:12
    }

    bb1: {
        _0 = const ();                   // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:15:17: 15:19
        goto -> bb5;                     // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:15:17: 15:19
    }

    bb2: {
        unreachable;                     // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:12:11: 12:12
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:13:17: 13:19
        goto -> bb5;                     // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:13:17: 13:19
    }

    bb4: {
        _0 = const ();                   // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:14:17: 14:19
        goto -> bb5;                     // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:14:17: 14:19
    }

    bb5: {
        return;                          // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:17:2: 17:2
    }
}

fn g(_1: E) -> usize {
    debug e => _1;                       // in scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:19:12: 19:13
    let mut _0: usize;                   // return place in scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:19:21: 19:26

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:21:14: 21:15
        return;                          // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:23:2: 23:2
    }
}

// MIR FOR CTFE
fn g(_1: E) -> usize {
    debug e => _1;                       // in scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:19:12: 19:13
    let mut _0: usize;                   // return place in scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:19:21: 19:26

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:21:14: 21:15
        return;                          // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:23:2: 23:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:25:11: 25:11
    let mut _1: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _5: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _9: usize;                       // in scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:28:16: 28:23
    let mut _10: E;                      // in scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:28:18: 28:22
    let mut _11: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _12: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _13: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _26: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _27: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _28: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _4;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _5;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _6: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _6;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _12;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _13;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _18: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _18;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _28 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[2])) }
        _2 = _28;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _27 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[1])) }
        _3 = _27;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _4 = (_1.0: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _5 = (_1.1: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = const E::A;                // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:28:18: 28:22
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/exhaustive-c-like-enum-match.rs:28:18: 28:22
                                         // + literal: Const { ty: E, val: Value(Scalar(0x00)) }
        _9 = g(move _10) -> bb1;         // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:28:16: 28:23
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/exhaustive-c-like-enum-match.rs:28:16: 28:17
                                         // + literal: Const { ty: fn(E) -> usize {g}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _26 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _11 = _26;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _11);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_7.0: &usize);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_7.1: &usize);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = (*_12);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = const 0_usize;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = Eq(move _16, move _17);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _14 = Not(move _15);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _18 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<usize, usize>(move _20, move _21, move _23, move _25); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:29:2: 29:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:28:25: 28:26

    bb0: {
        _1 = const 0_usize;              // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:28:25: 28:26
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:27:19: 27:20

    bb0: {
        _1 = const 0_usize;              // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:27:19: 27:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:27:16: 27:17

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:27:16: 27:17
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

const X: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:26:14: 26:19
    let mut _1: E;                       // in scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:26:24: 26:28

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:26:24: 26:28
        _1 = E::C;                       // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:26:24: 26:28
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:26:22: 26:29
        _0 = g(move _1) -> bb1;          // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:26:22: 26:29
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/exhaustive-c-like-enum-match.rs:26:22: 26:23
                                         // + literal: Const { ty: fn(E) -> usize {g}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:26:28: 26:29
        return;                          // scope 0 at ui/consts/control-flow/exhaustive-c-like-enum-match.rs:26:5: 26:30
    }
}
