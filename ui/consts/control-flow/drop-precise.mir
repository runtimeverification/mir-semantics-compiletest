// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const _: Vec<i32> = {
    let mut _0: std::vec::Vec<i32>;      // return place in scope 0 at ui/consts/control-flow/drop-precise.rs:6:10: 6:18
    let _1: (std::vec::Vec<i32>,);       // in scope 0 at ui/consts/control-flow/drop-precise.rs:7:9: 7:18
    let mut _2: std::vec::Vec<i32>;      // in scope 0 at ui/consts/control-flow/drop-precise.rs:7:22: 7:32
    scope 1 {
        debug vec_tuple => _1;           // in scope 1 at ui/consts/control-flow/drop-precise.rs:7:9: 7:18
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/drop-precise.rs:7:9: 7:18
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/drop-precise.rs:7:22: 7:32
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/drop-precise.rs:7:22: 7:32
        _2 = Vec::<i32>::new() -> bb1;   // scope 0 at ui/consts/control-flow/drop-precise.rs:7:22: 7:32
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/drop-precise.rs:7:22: 7:30
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<i32> {Vec::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = (move _2,);                 // scope 0 at ui/consts/control-flow/drop-precise.rs:7:21: 7:34
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/drop-precise.rs:7:33: 7:34
        _0 = move (_1.0: std::vec::Vec<i32>); // scope 1 at ui/consts/control-flow/drop-precise.rs:8:5: 8:16
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/drop-precise.rs:9:1: 9:2
        return;                          // scope 0 at ui/consts/control-flow/drop-precise.rs:6:1: 9:3
    }
}

const _: Vec<i32> = {
    let mut _0: std::vec::Vec<i32>;      // return place in scope 0 at ui/consts/control-flow/drop-precise.rs:11:10: 11:18
    let _1: std::result::Result<std::vec::Vec<i32>, std::vec::Vec<i32>>; // in scope 0 at ui/consts/control-flow/drop-precise.rs:12:9: 12:10
    let mut _2: std::vec::Vec<i32>;      // in scope 0 at ui/consts/control-flow/drop-precise.rs:12:37: 12:47
    let mut _3: isize;                   // in scope 0 at ui/consts/control-flow/drop-precise.rs:14:9: 14:14
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/control-flow/drop-precise.rs:12:9: 12:10
        let _4: std::vec::Vec<i32>;      // in scope 1 at ui/consts/control-flow/drop-precise.rs:14:12: 14:13
        scope 2 {
            debug x => _4;               // in scope 2 at ui/consts/control-flow/drop-precise.rs:14:12: 14:13
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/control-flow/drop-precise.rs:12:9: 12:10
        StorageLive(_2);                 // scope 0 at ui/consts/control-flow/drop-precise.rs:12:37: 12:47
        ConstEvalCounter;                // scope 0 at ui/consts/control-flow/drop-precise.rs:12:37: 12:47
        _2 = Vec::<i32>::new() -> bb1;   // scope 0 at ui/consts/control-flow/drop-precise.rs:12:37: 12:47
                                         // mir::Constant
                                         // + span: ui/consts/control-flow/drop-precise.rs:12:37: 12:45
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> Vec<i32> {Vec::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Result::<Vec<i32>, Vec<i32>>::Ok(move _2); // scope 0 at ui/consts/control-flow/drop-precise.rs:12:34: 12:48
        StorageDead(_2);                 // scope 0 at ui/consts/control-flow/drop-precise.rs:12:47: 12:48
        _3 = discriminant(_1);           // scope 1 at ui/consts/control-flow/drop-precise.rs:13:11: 13:12
        switchInt(move _3) -> [0: bb5, 1: bb2, otherwise: bb3]; // scope 1 at ui/consts/control-flow/drop-precise.rs:13:5: 13:12
    }

    bb2: {
        StorageLive(_4);                 // scope 1 at ui/consts/control-flow/drop-precise.rs:14:21: 14:22
        _4 = move ((_1 as Err).0: std::vec::Vec<i32>); // scope 1 at ui/consts/control-flow/drop-precise.rs:14:21: 14:22
        goto -> bb4;                     // scope 1 at ui/consts/control-flow/drop-precise.rs:13:5: 15:6
    }

    bb3: {
        unreachable;                     // scope 1 at ui/consts/control-flow/drop-precise.rs:13:11: 13:12
    }

    bb4: {
        _0 = move _4;                    // scope 2 at ui/consts/control-flow/drop-precise.rs:14:27: 14:28
        StorageDead(_4);                 // scope 1 at ui/consts/control-flow/drop-precise.rs:14:27: 14:28
        StorageDead(_1);                 // scope 0 at ui/consts/control-flow/drop-precise.rs:16:1: 16:2
        return;                          // scope 0 at ui/consts/control-flow/drop-precise.rs:11:1: 16:3
    }

    bb5: {
        StorageLive(_4);                 // scope 1 at ui/consts/control-flow/drop-precise.rs:14:12: 14:13
        _4 = move ((_1 as Ok).0: std::vec::Vec<i32>); // scope 1 at ui/consts/control-flow/drop-precise.rs:14:12: 14:13
        goto -> bb4;                     // scope 1 at ui/consts/control-flow/drop-precise.rs:13:5: 15:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/control-flow/drop-precise.rs:18:11: 18:11

    bb0: {
        return;                          // scope 0 at ui/consts/control-flow/drop-precise.rs:18:13: 18:13
    }
}
