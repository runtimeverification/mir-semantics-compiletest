// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static toplevel_mod: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const -1_isize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let _2: &isize;
    let _3: &isize;
    let _4: &isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: isize;
    let mut _8: isize;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _12: &isize;
    scope 1 {
        debug left_val => _3;
        debug right_val => _4;
        let _9: core::panicking::AssertKind;
        scope 2 {
            debug kind => _9;
        }
    }

    bb0: {
        _2 = const {alloc1: &isize};
        _12 = const _;
        _1 = (_2, _12);
        _3 = (_1.0: &isize);
        _4 = (_1.1: &isize);
        _7 = (*_3);
        _8 = (*_4);
        _6 = Eq(move _7, move _8);
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<isize, isize>(move _9, _3, _4, move _11) -> unwind continue;
    }

    bb2: {
        return;
    }
}

alloc1 (static: toplevel_mod, size: 8, align: 8) {
    ff ff ff ff ff ff ff ff                         â”‚ ........
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const -1_isize;
        _0 = &_1;
        return;
    }
}
