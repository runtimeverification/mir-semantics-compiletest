// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/issue-90762.rs:8:1: 8:20>::drop(_1: &mut Print) -> () {
    debug self => _1;                    // in scope 0 at ui/consts/issue-90762.rs:9:13: 9:22
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-90762.rs:9:24: 9:24
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/consts/issue-90762.rs:10:18: 10:22
    let mut _5: &[&str; 2];              // in scope 0 at ui/consts/issue-90762.rs:10:18: 10:22
    let _6: &[&str; 2];                  // in scope 0 at ui/consts/issue-90762.rs:10:18: 10:22
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/consts/issue-90762.rs:10:24: 10:30
    let mut _12: &usize;                 // in scope 0 at ui/consts/issue-90762.rs:10:24: 10:30
    let _13: &usize;                     // in scope 0 at ui/consts/issue-90762.rs:10:24: 10:30
    let _14: ();                         // in scope 0 at ui/consts/issue-90762.rs:11:9: 11:51
    let mut _15: &std::sync::atomic::AtomicBool; // in scope 0 at ui/consts/issue-90762.rs:11:9: 11:51
    let _16: &[std::sync::atomic::AtomicBool; 3]; // in scope 0 at ui/consts/issue-90762.rs:11:9: 11:12
    let _17: usize;                      // in scope 0 at ui/consts/issue-90762.rs:11:13: 11:19
    let mut _18: usize;                  // in scope 0 at ui/consts/issue-90762.rs:11:9: 11:20
    let mut _19: bool;                   // in scope 0 at ui/consts/issue-90762.rs:11:9: 11:20
    let mut _20: std::sync::atomic::Ordering; // in scope 0 at ui/consts/issue-90762.rs:11:33: 11:50
    let mut _21: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _22: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _23: usize;                      // in scope 0 at ui/consts/issue-90762.rs:12:20: 12:55
    let mut _24: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/consts/issue-90762.rs:12:20: 12:55
    let _25: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/consts/issue-90762.rs:12:20: 12:23
    let mut _26: std::sync::atomic::Ordering; // in scope 0 at ui/consts/issue-90762.rs:12:37: 12:54
    let mut _27: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _28: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _29: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _32: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _33: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _35: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _36: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _37: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _38: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _39: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _40: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _42: &[&str; 2];             // in scope 0 at ui/consts/issue-90762.rs:10:18: 10:22
    scope 1 {
        debug left_val => _28;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _29;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _34: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _34;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _42 = const _;                   // scope 0 at ui/consts/issue-90762.rs:10:18: 10:22
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:10:18: 10:22
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(<Print as Drop>::drop, [], Some(promoted[0])) }
        _6 = _42;                        // scope 0 at ui/consts/issue-90762.rs:10:18: 10:22
        _5 = _6;                         // scope 0 at ui/consts/issue-90762.rs:10:18: 10:22
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/consts/issue-90762.rs:10:18: 10:22
        _13 = &((*_1).0: usize);         // scope 0 at ui/consts/issue-90762.rs:10:24: 10:30
        _12 = _13;                       // scope 0 at ui/consts/issue-90762.rs:10:24: 10:30
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(move _12) -> bb1; // scope 0 at ui/consts/issue-90762.rs:10:24: 10:30
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:10:24: 10:30
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = [move _11];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _print(move _3) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _16 = const {alloc1: &[AtomicBool; 3]}; // scope 0 at ui/consts/issue-90762.rs:11:9: 11:12
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:11:9: 11:12
                                         // + literal: Const { ty: &[AtomicBool; 3], val: Value(Scalar(alloc1)) }
        _17 = ((*_1).0: usize);          // scope 0 at ui/consts/issue-90762.rs:11:13: 11:19
        _18 = const 3_usize;             // scope 0 at ui/consts/issue-90762.rs:11:9: 11:20
        _19 = Lt(_17, _18);              // scope 0 at ui/consts/issue-90762.rs:11:9: 11:20
        assert(move _19, "index out of bounds: the length is {} but the index is {}", move _18, _17) -> bb4; // scope 0 at ui/consts/issue-90762.rs:11:9: 11:20
    }

    bb4: {
        _15 = &(*_16)[_17];              // scope 0 at ui/consts/issue-90762.rs:11:9: 11:51
        _20 = const Relaxed;             // scope 0 at ui/consts/issue-90762.rs:11:33: 11:50
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:11:33: 11:50
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x00)) }
        _14 = AtomicBool::store(move _15, const true, move _20) -> bb5; // scope 0 at ui/consts/issue-90762.rs:11:9: 11:51
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:11:21: 11:26
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicBool, bool, std::sync::atomic::Ordering) {AtomicBool::store}, val: Value(<ZST>) }
    }

    bb5: {
        _25 = const {alloc2: &AtomicUsize}; // scope 0 at ui/consts/issue-90762.rs:12:20: 12:23
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:12:20: 12:23
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc2)) }
        _24 = _25;                       // scope 0 at ui/consts/issue-90762.rs:12:20: 12:55
        _26 = const Relaxed;             // scope 0 at ui/consts/issue-90762.rs:12:37: 12:54
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:12:37: 12:54
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x00)) }
        _23 = AtomicUsize::fetch_sub(move _24, const 1_usize, move _26) -> bb6; // scope 0 at ui/consts/issue-90762.rs:12:20: 12:55
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:12:24: 12:33
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, std::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_sub}, val: Value(<ZST>) }
    }

    bb6: {
        _22 = &_23;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _27 = &((*_1).0: usize);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _21 = (move _22, move _27);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _28 = (_21.0: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _29 = (_21.1: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _32 = (*_28);                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _33 = (*_29);                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _31 = Eq(move _32, move _33);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _30 = Not(move _31);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _30) -> [0: bb8, otherwise: bb7]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _34 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _36 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _38 = _28;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _38;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _40 = _29;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = _40;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _41 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _35 = core::panicking::assert_failed::<usize, usize>(move _36, move _37, move _39, move _41); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/consts/issue-90762.rs:13:6: 13:6
    }
}

alloc2 (static: BAR, size: 8, align: 8) {
    02 00 00 00 00 00 00 00                         │ ........
}

alloc1 (static: FOO, size: 3, align: 1) {
    00 00 00                                        │ ...
}

promoted[0] in <impl at ui/consts/issue-90762.rs:8:1: 8:20>::drop: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/consts/issue-90762.rs:10:18: 10:22
    let mut _1: [&str; 2];               // in scope 0 at ui/consts/issue-90762.rs:10:18: 10:22

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/consts/issue-90762.rs:10:18: 10:22
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:10:18: 10:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:10:18: 10:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/consts/issue-90762.rs:10:18: 10:22
        return;                          // scope 0 at ui/consts/issue-90762.rs:10:18: 10:22
    }
}

const A: Print = {
    let mut _0: Print;                   // return place in scope 0 at ui/consts/issue-90762.rs:16:10: 16:15

    bb0: {
        _0 = Print(const 0_usize);       // scope 0 at ui/consts/issue-90762.rs:16:18: 16:26
        return;                          // scope 0 at ui/consts/issue-90762.rs:16:1: 16:27
    }
}

const B: Print = {
    let mut _0: Print;                   // return place in scope 0 at ui/consts/issue-90762.rs:17:10: 17:15

    bb0: {
        _0 = Print(const 1_usize);       // scope 0 at ui/consts/issue-90762.rs:17:18: 17:26
        return;                          // scope 0 at ui/consts/issue-90762.rs:17:1: 17:27
    }
}

static FOO: [AtomicBool; 3] = {
    let mut _0: [std::sync::atomic::AtomicBool; 3]; // return place in scope 0 at ui/consts/issue-90762.rs:19:13: 19:28
    let mut _1: std::sync::atomic::AtomicBool; // in scope 0 at ui/consts/issue-90762.rs:20:6: 20:28
    let mut _2: std::sync::atomic::AtomicBool; // in scope 0 at ui/consts/issue-90762.rs:20:30: 20:52
    let mut _3: std::sync::atomic::AtomicBool; // in scope 0 at ui/consts/issue-90762.rs:20:54: 20:76

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/issue-90762.rs:20:6: 20:28
        ConstEvalCounter;                // scope 0 at ui/consts/issue-90762.rs:20:6: 20:28
        _1 = AtomicBool::new(const false) -> bb1; // scope 0 at ui/consts/issue-90762.rs:20:6: 20:28
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:20:6: 20:21
                                         // + literal: Const { ty: fn(bool) -> AtomicBool {AtomicBool::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageLive(_2);                 // scope 0 at ui/consts/issue-90762.rs:20:30: 20:52
        ConstEvalCounter;                // scope 0 at ui/consts/issue-90762.rs:20:30: 20:52
        _2 = AtomicBool::new(const false) -> bb2; // scope 0 at ui/consts/issue-90762.rs:20:30: 20:52
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:20:30: 20:45
                                         // + literal: Const { ty: fn(bool) -> AtomicBool {AtomicBool::new}, val: Value(<ZST>) }
    }

    bb2: {
        StorageLive(_3);                 // scope 0 at ui/consts/issue-90762.rs:20:54: 20:76
        ConstEvalCounter;                // scope 0 at ui/consts/issue-90762.rs:20:54: 20:76
        _3 = AtomicBool::new(const false) -> bb3; // scope 0 at ui/consts/issue-90762.rs:20:54: 20:76
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:20:54: 20:69
                                         // + literal: Const { ty: fn(bool) -> AtomicBool {AtomicBool::new}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = [move _1, move _2, move _3]; // scope 0 at ui/consts/issue-90762.rs:20:5: 20:77
        StorageDead(_3);                 // scope 0 at ui/consts/issue-90762.rs:20:76: 20:77
        StorageDead(_2);                 // scope 0 at ui/consts/issue-90762.rs:20:76: 20:77
        StorageDead(_1);                 // scope 0 at ui/consts/issue-90762.rs:20:76: 20:77
        return;                          // scope 0 at ui/consts/issue-90762.rs:19:1: 20:78
    }
}

FOO::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/issue-90762.rs:19:26: 19:27

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/consts/issue-90762.rs:19:26: 19:27
        return;                          // scope 0 at ui/consts/issue-90762.rs:19:26: 19:27
    }
}

static BAR: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize; // return place in scope 0 at ui/consts/issue-90762.rs:21:13: 21:24

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/issue-90762.rs:21:27: 21:46
        _0 = AtomicUsize::new(const 2_usize) -> bb1; // scope 0 at ui/consts/issue-90762.rs:21:27: 21:46
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:21:27: 21:43
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/issue-90762.rs:21:1: 21:47
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-90762.rs:23:11: 23:11
    let mut _1: Print;                   // in scope 0 at ui/consts/issue-90762.rs:25:27: 25:32
    let mut _2: Print;                   // in scope 0 at ui/consts/issue-90762.rs:25:34: 25:35
    let mut _3: Print;                   // in scope 0 at ui/consts/issue-90762.rs:25:37: 25:45
    let mut _4: std::iter::Enumerate<std::slice::Iter<'_, std::sync::atomic::AtomicBool>>; // in scope 0 at ui/consts/issue-90762.rs:27:19: 27:41
    let mut _5: std::iter::Enumerate<std::slice::Iter<'_, std::sync::atomic::AtomicBool>>; // in scope 0 at ui/consts/issue-90762.rs:27:19: 27:41
    let mut _6: std::slice::Iter<'_, std::sync::atomic::AtomicBool>; // in scope 0 at ui/consts/issue-90762.rs:27:19: 27:29
    let mut _7: &[std::sync::atomic::AtomicBool]; // in scope 0 at ui/consts/issue-90762.rs:27:19: 27:29
    let mut _8: &[std::sync::atomic::AtomicBool; 3]; // in scope 0 at ui/consts/issue-90762.rs:27:19: 27:29
    let _9: &[std::sync::atomic::AtomicBool; 3]; // in scope 0 at ui/consts/issue-90762.rs:27:19: 27:22
    let mut _10: std::iter::Enumerate<std::slice::Iter<'_, std::sync::atomic::AtomicBool>>; // in scope 0 at ui/consts/issue-90762.rs:27:19: 27:41
    let mut _11: std::option::Option<(usize, &std::sync::atomic::AtomicBool)>; // in scope 0 at ui/consts/issue-90762.rs:27:19: 27:41
    let mut _12: &mut std::iter::Enumerate<std::slice::Iter<'_, std::sync::atomic::AtomicBool>>; // in scope 0 at ui/consts/issue-90762.rs:27:19: 27:41
    let mut _13: &mut std::iter::Enumerate<std::slice::Iter<'_, std::sync::atomic::AtomicBool>>; // in scope 0 at ui/consts/issue-90762.rs:27:19: 27:41
    let mut _14: isize;                  // in scope 0 at ui/consts/issue-90762.rs:27:5: 29:6
    let mut _17: bool;                   // in scope 0 at ui/consts/issue-90762.rs:28:9: 28:60
    let mut _18: bool;                   // in scope 0 at ui/consts/issue-90762.rs:28:17: 28:42
    let mut _19: &std::sync::atomic::AtomicBool; // in scope 0 at ui/consts/issue-90762.rs:28:17: 28:42
    let mut _20: std::sync::atomic::Ordering; // in scope 0 at ui/consts/issue-90762.rs:28:24: 28:41
    let mut _21: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _22: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _23: &[&str];                // in scope 0 at ui/consts/issue-90762.rs:28:44: 28:56
    let mut _24: &[&str; 2];             // in scope 0 at ui/consts/issue-90762.rs:28:44: 28:56
    let _25: &[&str; 2];                 // in scope 0 at ui/consts/issue-90762.rs:28:44: 28:56
    let mut _26: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _27: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _28: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _29: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _30: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/consts/issue-90762.rs:28:58: 28:59
    let mut _31: &usize;                 // in scope 0 at ui/consts/issue-90762.rs:28:58: 28:59
    let _32: &usize;                     // in scope 0 at ui/consts/issue-90762.rs:28:58: 28:59
    let mut _33: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _34: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _35: usize;                      // in scope 0 at ui/consts/issue-90762.rs:30:16: 30:51
    let mut _36: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/consts/issue-90762.rs:30:16: 30:51
    let _37: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/consts/issue-90762.rs:30:16: 30:19
    let mut _38: std::sync::atomic::Ordering; // in scope 0 at ui/consts/issue-90762.rs:30:33: 30:50
    let mut _39: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _40: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _41: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _42: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _43: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _44: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _45: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _47: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _48: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _49: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _50: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _51: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _52: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _54: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug iter => _10;               // in scope 1 at ui/consts/issue-90762.rs:27:19: 27:41
        let _15: usize;                  // in scope 1 at ui/consts/issue-90762.rs:27:10: 27:11
        let _16: &std::sync::atomic::AtomicBool; // in scope 1 at ui/consts/issue-90762.rs:27:13: 27:14
        scope 2 {
            debug i => _15;              // in scope 2 at ui/consts/issue-90762.rs:27:10: 27:11
            debug b => _16;              // in scope 2 at ui/consts/issue-90762.rs:27:13: 27:14
            let mut _55: &[&str; 2];     // in scope 2 at ui/consts/issue-90762.rs:28:44: 28:56
        }
    }
    scope 3 {
        debug left_val => _40;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _41;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _46: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _46;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/issue-90762.rs:25:29: 25:30
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:25:29: 25:30
                                         // + literal: Const { ty: Print, val: Unevaluated(A, [], None) }
        _2 = const _;                    // scope 0 at ui/consts/issue-90762.rs:25:34: 25:35
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:25:34: 25:35
                                         // + literal: Const { ty: Print, val: Unevaluated(B, [], None) }
        _3 = Print(const 2_usize);       // scope 0 at ui/consts/issue-90762.rs:25:37: 25:45
        drop(_3) -> [return: bb1, unwind: bb19]; // scope 0 at ui/consts/issue-90762.rs:25:52: 25:53
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind: bb20]; // scope 0 at ui/consts/issue-90762.rs:25:52: 25:53
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/consts/issue-90762.rs:25:52: 25:53
    }

    bb3: {
        _9 = const {alloc1: &[AtomicBool; 3]}; // scope 0 at ui/consts/issue-90762.rs:27:19: 27:22
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:27:19: 27:22
                                         // + literal: Const { ty: &[AtomicBool; 3], val: Value(Scalar(alloc1)) }
        _8 = _9;                         // scope 0 at ui/consts/issue-90762.rs:27:19: 27:29
        _7 = move _8 as &[std::sync::atomic::AtomicBool] (Pointer(Unsize)); // scope 0 at ui/consts/issue-90762.rs:27:19: 27:29
        _6 = core::slice::<impl [AtomicBool]>::iter(move _7) -> bb4; // scope 0 at ui/consts/issue-90762.rs:27:19: 27:29
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:27:23: 27:27
                                         // + literal: Const { ty: for<'a> fn(&'a [AtomicBool]) -> std::slice::Iter<'a, AtomicBool> {core::slice::<impl [AtomicBool]>::iter}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = <std::slice::Iter<'_, AtomicBool> as Iterator>::enumerate(move _6) -> bb5; // scope 0 at ui/consts/issue-90762.rs:27:19: 27:41
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:27:30: 27:39
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, AtomicBool>) -> Enumerate<std::slice::Iter<'_, AtomicBool>> {<std::slice::Iter<'_, AtomicBool> as Iterator>::enumerate}, val: Value(<ZST>) }
    }

    bb5: {
        _4 = <Enumerate<std::slice::Iter<'_, AtomicBool>> as IntoIterator>::into_iter(move _5) -> bb6; // scope 0 at ui/consts/issue-90762.rs:27:19: 27:41
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:27:19: 27:41
                                         // + literal: Const { ty: fn(Enumerate<std::slice::Iter<'_, AtomicBool>>) -> <Enumerate<std::slice::Iter<'_, AtomicBool>> as IntoIterator>::IntoIter {<Enumerate<std::slice::Iter<'_, AtomicBool>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb6: {
        _10 = move _4;                   // scope 0 at ui/consts/issue-90762.rs:27:19: 27:41
        goto -> bb7;                     // scope 1 at ui/consts/issue-90762.rs:27:5: 29:6
    }

    bb7: {
        _13 = &mut _10;                  // scope 1 at ui/consts/issue-90762.rs:27:19: 27:41
        _12 = &mut (*_13);               // scope 1 at ui/consts/issue-90762.rs:27:19: 27:41
        _11 = <Enumerate<std::slice::Iter<'_, AtomicBool>> as Iterator>::next(move _12) -> bb8; // scope 1 at ui/consts/issue-90762.rs:27:19: 27:41
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:27:19: 27:41
                                         // + literal: Const { ty: for<'a> fn(&'a mut Enumerate<std::slice::Iter<'_, AtomicBool>>) -> Option<<Enumerate<std::slice::Iter<'_, AtomicBool>> as Iterator>::Item> {<Enumerate<std::slice::Iter<'_, AtomicBool>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb8: {
        _14 = discriminant(_11);         // scope 1 at ui/consts/issue-90762.rs:27:19: 27:41
        switchInt(move _14) -> [0: bb11, 1: bb9, otherwise: bb10]; // scope 1 at ui/consts/issue-90762.rs:27:19: 27:41
    }

    bb9: {
        _15 = (((_11 as Some).0: (usize, &std::sync::atomic::AtomicBool)).0: usize); // scope 1 at ui/consts/issue-90762.rs:27:10: 27:11
        _16 = (((_11 as Some).0: (usize, &std::sync::atomic::AtomicBool)).1: &std::sync::atomic::AtomicBool); // scope 1 at ui/consts/issue-90762.rs:27:13: 27:14
        _19 = _16;                       // scope 2 at ui/consts/issue-90762.rs:28:17: 28:42
        _20 = const Relaxed;             // scope 2 at ui/consts/issue-90762.rs:28:24: 28:41
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:28:24: 28:41
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x00)) }
        _18 = AtomicBool::load(move _19, move _20) -> bb12; // scope 2 at ui/consts/issue-90762.rs:28:17: 28:42
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:28:19: 28:23
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicBool, std::sync::atomic::Ordering) -> bool {AtomicBool::load}, val: Value(<ZST>) }
    }

    bb10: {
        unreachable;                     // scope 1 at ui/consts/issue-90762.rs:27:19: 27:41
    }

    bb11: {
        _37 = const {alloc2: &AtomicUsize}; // scope 0 at ui/consts/issue-90762.rs:30:16: 30:19
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:30:16: 30:19
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc2)) }
        _36 = _37;                       // scope 0 at ui/consts/issue-90762.rs:30:16: 30:51
        _38 = const Relaxed;             // scope 0 at ui/consts/issue-90762.rs:30:33: 30:50
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:30:33: 30:50
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x00)) }
        _35 = AtomicUsize::fetch_add(move _36, const 1_usize, move _38) -> bb16; // scope 0 at ui/consts/issue-90762.rs:30:16: 30:51
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:30:20: 30:29
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, std::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_add}, val: Value(<ZST>) }
    }

    bb12: {
        _17 = Not(move _18);             // scope 2 at ui/consts/issue-90762.rs:28:9: 28:60
        switchInt(move _17) -> [0: bb7, otherwise: bb13]; // scope 2 at ui/consts/issue-90762.rs:28:9: 28:60
    }

    bb13: {
        _55 = const _;                   // scope 2 at ui/consts/issue-90762.rs:28:44: 28:56
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:28:44: 28:56
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _25 = _55;                       // scope 2 at ui/consts/issue-90762.rs:28:44: 28:56
        _24 = _25;                       // scope 2 at ui/consts/issue-90762.rs:28:44: 28:56
        _23 = move _24 as &[&str] (Pointer(Unsize)); // scope 2 at ui/consts/issue-90762.rs:28:44: 28:56
        _32 = &_15;                      // scope 2 at ui/consts/issue-90762.rs:28:58: 28:59
        _31 = _32;                       // scope 2 at ui/consts/issue-90762.rs:28:58: 28:59
        _30 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(move _31) -> bb14; // scope 2 at ui/consts/issue-90762.rs:28:58: 28:59
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:28:58: 28:59
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb14: {
        _29 = [move _30];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _28 = &_29;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _27 = _28;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _26 = move _27 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _22 = Arguments::<'_>::new_v1(move _23, move _26) -> bb15; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb15: {
        _21 = panic_fmt(move _22);       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb16: {
        _34 = &_35;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _54 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _39 = _54;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _33 = (move _34, move _39);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _40 = (_33.0: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _41 = (_33.1: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _44 = (*_40);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _45 = const usize::MAX;          // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _43 = Eq(move _44, move _45);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _42 = Not(move _43);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _42) -> [0: bb18, otherwise: bb17]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb17: {
        _46 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _48 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _50 = _40;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _49 = _50;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _52 = _41;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _51 = _52;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _53 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _47 = core::panicking::assert_failed::<usize, usize>(move _48, move _49, move _51, move _53); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb18: {
        return;                          // scope 0 at ui/consts/issue-90762.rs:31:2: 31:2
    }

    bb19 (cleanup): {
        drop(_2) -> bb20;                // scope 0 at ui/consts/issue-90762.rs:25:52: 25:53
    }

    bb20 (cleanup): {
        drop(_1) -> bb21;                // scope 0 at ui/consts/issue-90762.rs:25:52: 25:53
    }

    bb21 (cleanup): {
        resume;                          // scope 0 at ui/consts/issue-90762.rs:23:1: 31:2
    }
}

alloc2 (static: BAR, size: 8, align: 8) {
    02 00 00 00 00 00 00 00                         │ ........
}

alloc1 (static: FOO, size: 3, align: 1) {
    00 00 00                                        │ ...
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/consts/issue-90762.rs:30:53: 30:71

    bb0: {
        _1 = core::num::<impl usize>::max_value() -> bb1; // scope 0 at ui/consts/issue-90762.rs:30:53: 30:71
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:30:53: 30:69
                                         // + literal: Const { ty: fn() -> usize {core::num::<impl usize>::max_value}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/consts/issue-90762.rs:28:44: 28:56
    let mut _1: [&str; 2];               // in scope 0 at ui/consts/issue-90762.rs:28:44: 28:56

    bb0: {
        _1 = [const "", const " not set"]; // scope 0 at ui/consts/issue-90762.rs:28:44: 28:56
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:28:44: 28:56
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/consts/issue-90762.rs:28:44: 28:56
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/consts/issue-90762.rs:28:44: 28:56
        return;                          // scope 0 at ui/consts/issue-90762.rs:28:44: 28:56
    }
}

fn Print(_1: usize) -> Print {
    let mut _0: Print;                   // return place in scope 0 at ui/consts/issue-90762.rs:6:1: 6:13

    bb0: {
        _0 = Print(move _1);             // scope 0 at ui/consts/issue-90762.rs:6:1: 6:13
        return;                          // scope 0 at ui/consts/issue-90762.rs:6:1: 6:13
    }
}

// MIR FOR CTFE
fn Print(_1: usize) -> Print {
    let mut _0: Print;                   // return place in scope 0 at ui/consts/issue-90762.rs:6:1: 6:13

    bb0: {
        _0 = Print(move _1);             // scope 0 at ui/consts/issue-90762.rs:6:1: 6:13
        return;                          // scope 0 at ui/consts/issue-90762.rs:6:1: 6:13
    }
}
