// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
AA::data::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_assign2.rs:4:20: 4:22

    bb0: {
        _0 = const 10_usize;             // scope 0 at ui/consts/const_let_assign2.rs:4:20: 4:22
        return;                          // scope 0 at ui/consts/const_let_assign2.rs:4:20: 4:22
    }
}

fn <impl at ui/consts/const_let_assign2.rs:7:1: 7:8>::new() -> AA {
    let mut _0: AA;                      // return place in scope 0 at ui/consts/const_let_assign2.rs:9:13: 9:20
    let mut _1: [u8; 10];                // in scope 0 at ui/consts/const_let_assign2.rs:9:38: 9:45
    let _2: usize;                       // in scope 0 at ui/consts/const_let_assign2.rs:10:18: 10:19
    scope 1 {
        debug res => _0;                 // in scope 1 at ui/consts/const_let_assign2.rs:9:13: 9:20
    }

    bb0: {
        _1 = [const 0_u8; 10];           // scope 0 at ui/consts/const_let_assign2.rs:9:38: 9:45
        _0 = AA { data: move _1 };       // scope 0 at ui/consts/const_let_assign2.rs:9:27: 9:47
        _2 = const 0_usize;              // scope 1 at ui/consts/const_let_assign2.rs:10:18: 10:19
        (_0.0: [u8; 10])[_2] = const 5_u8; // scope 1 at ui/consts/const_let_assign2.rs:10:9: 10:24
        return;                          // scope 0 at ui/consts/const_let_assign2.rs:12:6: 12:6
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/const_let_assign2.rs:7:1: 7:8>::new() -> AA {
    let mut _0: AA;                      // return place in scope 0 at ui/consts/const_let_assign2.rs:8:27: 8:31
    let mut _1: AA;                      // in scope 0 at ui/consts/const_let_assign2.rs:9:13: 9:20
    let mut _2: [u8; 10];                // in scope 0 at ui/consts/const_let_assign2.rs:9:38: 9:45
    let _3: usize;                       // in scope 0 at ui/consts/const_let_assign2.rs:10:18: 10:19
    let mut _4: usize;                   // in scope 0 at ui/consts/const_let_assign2.rs:10:9: 10:20
    let mut _5: bool;                    // in scope 0 at ui/consts/const_let_assign2.rs:10:9: 10:20
    scope 1 {
        debug res => _1;                 // in scope 1 at ui/consts/const_let_assign2.rs:9:13: 9:20
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_let_assign2.rs:9:13: 9:20
        StorageLive(_2);                 // scope 0 at ui/consts/const_let_assign2.rs:9:38: 9:45
        _2 = [const 0_u8; 10];           // scope 0 at ui/consts/const_let_assign2.rs:9:38: 9:45
        _1 = AA { data: move _2 };       // scope 0 at ui/consts/const_let_assign2.rs:9:27: 9:47
        StorageDead(_2);                 // scope 0 at ui/consts/const_let_assign2.rs:9:46: 9:47
        StorageLive(_3);                 // scope 1 at ui/consts/const_let_assign2.rs:10:18: 10:19
        _3 = const 0_usize;              // scope 1 at ui/consts/const_let_assign2.rs:10:18: 10:19
        _4 = Len((_1.0: [u8; 10]));      // scope 1 at ui/consts/const_let_assign2.rs:10:9: 10:20
        _5 = Lt(_3, _4);                 // scope 1 at ui/consts/const_let_assign2.rs:10:9: 10:20
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> bb1; // scope 1 at ui/consts/const_let_assign2.rs:10:9: 10:20
    }

    bb1: {
        (_1.0: [u8; 10])[_3] = const 5_u8; // scope 1 at ui/consts/const_let_assign2.rs:10:9: 10:24
        StorageDead(_3);                 // scope 1 at ui/consts/const_let_assign2.rs:10:24: 10:25
        _0 = move _1;                    // scope 1 at ui/consts/const_let_assign2.rs:11:9: 11:12
        StorageDead(_1);                 // scope 0 at ui/consts/const_let_assign2.rs:12:5: 12:6
        return;                          // scope 0 at ui/consts/const_let_assign2.rs:12:6: 12:6
    }
}

<impl at ui/consts/const_let_assign2.rs:7:1: 7:8>::new::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_assign2.rs:9:42: 9:44

    bb0: {
        _0 = const 10_usize;             // scope 0 at ui/consts/const_let_assign2.rs:9:42: 9:44
        return;                          // scope 0 at ui/consts/const_let_assign2.rs:9:42: 9:44
    }
}

static mut BB: AA = {
    let mut _0: AA;                      // return place in scope 0 at ui/consts/const_let_assign2.rs:15:16: 15:18

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const_let_assign2.rs:15:21: 15:30
        _0 = AA::new() -> bb1;           // scope 0 at ui/consts/const_let_assign2.rs:15:21: 15:30
                                         // mir::Constant
                                         // + span: ui/consts/const_let_assign2.rs:15:21: 15:28
                                         // + literal: Const { ty: fn() -> AA {AA::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const_let_assign2.rs:15:1: 15:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_let_assign2.rs:17:11: 17:11
    let _1: &mut AA;                     // in scope 0 at ui/consts/const_let_assign2.rs:18:9: 18:12
    let mut _2: &mut AA;                 // in scope 0 at ui/consts/const_let_assign2.rs:18:24: 18:31
    let mut _3: *mut AA;                 // in scope 0 at ui/consts/const_let_assign2.rs:18:29: 18:31
    let mut _4: std::slice::Iter<'_, u8>; // in scope 0 at ui/consts/const_let_assign2.rs:19:14: 19:29
    let mut _5: std::slice::Iter<'_, u8>; // in scope 0 at ui/consts/const_let_assign2.rs:19:14: 19:29
    let mut _6: &[u8];                   // in scope 0 at ui/consts/const_let_assign2.rs:19:14: 19:29
    let mut _7: &[u8; 10];               // in scope 0 at ui/consts/const_let_assign2.rs:19:14: 19:29
    let mut _9: std::option::Option<&u8>; // in scope 0 at ui/consts/const_let_assign2.rs:19:14: 19:29
    let mut _10: &mut std::slice::Iter<'_, u8>; // in scope 0 at ui/consts/const_let_assign2.rs:19:14: 19:29
    let mut _11: &mut std::slice::Iter<'_, u8>; // in scope 0 at ui/consts/const_let_assign2.rs:19:14: 19:29
    let mut _12: isize;                  // in scope 0 at ui/consts/const_let_assign2.rs:19:5: 21:6
    let _14: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _15: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _16: &[&str];                // in scope 0 at ui/consts/const_let_assign2.rs:20:18: 20:22
    let mut _17: &[&str; 2];             // in scope 0 at ui/consts/const_let_assign2.rs:20:18: 20:22
    let _18: &[&str; 2];                 // in scope 0 at ui/consts/const_let_assign2.rs:20:18: 20:22
    let mut _19: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _20: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _21: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _22: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _23: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/consts/const_let_assign2.rs:20:24: 20:25
    let mut _24: &&u8;                   // in scope 0 at ui/consts/const_let_assign2.rs:20:24: 20:25
    let _25: &&u8;                       // in scope 0 at ui/consts/const_let_assign2.rs:20:24: 20:25
    scope 1 {
        debug ptr => _1;                 // in scope 1 at ui/consts/const_let_assign2.rs:18:9: 18:12
        let mut _8: std::slice::Iter<'_, u8>; // in scope 1 at ui/consts/const_let_assign2.rs:19:14: 19:29
        scope 3 {
            debug iter => _8;            // in scope 3 at ui/consts/const_let_assign2.rs:19:14: 19:29
            let _13: &u8;                // in scope 3 at ui/consts/const_let_assign2.rs:19:9: 19:10
            scope 4 {
                debug a => _13;          // in scope 4 at ui/consts/const_let_assign2.rs:19:9: 19:10
                let mut _26: &[&str; 2]; // in scope 4 at ui/consts/const_let_assign2.rs:20:18: 20:22
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = const {alloc1: *mut AA};    // scope 2 at ui/consts/const_let_assign2.rs:18:29: 18:31
                                         // mir::Constant
                                         // + span: ui/consts/const_let_assign2.rs:18:29: 18:31
                                         // + literal: Const { ty: *mut AA, val: Value(Scalar(alloc1)) }
        _2 = &mut (*_3);                 // scope 2 at ui/consts/const_let_assign2.rs:18:24: 18:31
        _1 = &mut (*_2);                 // scope 0 at ui/consts/const_let_assign2.rs:18:24: 18:31
        _7 = &((*_1).0: [u8; 10]);       // scope 1 at ui/consts/const_let_assign2.rs:19:14: 19:29
        _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 1 at ui/consts/const_let_assign2.rs:19:14: 19:29
        _5 = core::slice::<impl [u8]>::iter(move _6) -> bb1; // scope 1 at ui/consts/const_let_assign2.rs:19:14: 19:29
                                         // mir::Constant
                                         // + span: ui/consts/const_let_assign2.rs:19:23: 19:27
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> std::slice::Iter<'a, u8> {core::slice::<impl [u8]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = <std::slice::Iter<'_, u8> as IntoIterator>::into_iter(move _5) -> bb2; // scope 1 at ui/consts/const_let_assign2.rs:19:14: 19:29
                                         // mir::Constant
                                         // + span: ui/consts/const_let_assign2.rs:19:14: 19:29
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, u8>) -> <std::slice::Iter<'_, u8> as IntoIterator>::IntoIter {<std::slice::Iter<'_, u8> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = move _4;                    // scope 1 at ui/consts/const_let_assign2.rs:19:14: 19:29
        goto -> bb3;                     // scope 3 at ui/consts/const_let_assign2.rs:19:5: 21:6
    }

    bb3: {
        _11 = &mut _8;                   // scope 3 at ui/consts/const_let_assign2.rs:19:14: 19:29
        _10 = &mut (*_11);               // scope 3 at ui/consts/const_let_assign2.rs:19:14: 19:29
        _9 = <std::slice::Iter<'_, u8> as Iterator>::next(move _10) -> bb4; // scope 3 at ui/consts/const_let_assign2.rs:19:14: 19:29
                                         // mir::Constant
                                         // + span: ui/consts/const_let_assign2.rs:19:14: 19:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, u8>) -> Option<<std::slice::Iter<'_, u8> as Iterator>::Item> {<std::slice::Iter<'_, u8> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = discriminant(_9);          // scope 3 at ui/consts/const_let_assign2.rs:19:14: 19:29
        switchInt(move _12) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 3 at ui/consts/const_let_assign2.rs:19:14: 19:29
    }

    bb5: {
        _13 = ((_9 as Some).0: &u8);     // scope 3 at ui/consts/const_let_assign2.rs:19:9: 19:10
        _26 = const _;                   // scope 4 at ui/consts/const_let_assign2.rs:20:18: 20:22
                                         // mir::Constant
                                         // + span: ui/consts/const_let_assign2.rs:20:18: 20:22
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _18 = _26;                       // scope 4 at ui/consts/const_let_assign2.rs:20:18: 20:22
        _17 = _18;                       // scope 4 at ui/consts/const_let_assign2.rs:20:18: 20:22
        _16 = move _17 as &[&str] (Pointer(Unsize)); // scope 4 at ui/consts/const_let_assign2.rs:20:18: 20:22
        _25 = &_13;                      // scope 4 at ui/consts/const_let_assign2.rs:20:24: 20:25
        _24 = _25;                       // scope 4 at ui/consts/const_let_assign2.rs:20:24: 20:25
        _23 = core::fmt::ArgumentV1::<'_>::new_display::<&u8>(move _24) -> bb8; // scope 4 at ui/consts/const_let_assign2.rs:20:24: 20:25
                                         // mir::Constant
                                         // + span: ui/consts/const_let_assign2.rs:20:24: 20:25
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &u8) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&u8>}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 3 at ui/consts/const_let_assign2.rs:19:14: 19:29
    }

    bb7: {
        return;                          // scope 0 at ui/consts/const_let_assign2.rs:22:2: 22:2
    }

    bb8: {
        _22 = [move _23];                // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _21 = &_22;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _20 = _21;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _19 = move _20 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _15 = Arguments::<'_>::new_v1(move _16, move _19) -> bb9; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _14 = _print(move _15) -> bb3;   // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }
}

alloc1 (static: BB, size: 10, align: 1) {
    05 00 00 00 00 00 00 00 00 00                   │ ..........
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/consts/const_let_assign2.rs:20:18: 20:22
    let mut _1: [&str; 2];               // in scope 0 at ui/consts/const_let_assign2.rs:20:18: 20:22

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/consts/const_let_assign2.rs:20:18: 20:22
                                         // mir::Constant
                                         // + span: ui/consts/const_let_assign2.rs:20:18: 20:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/consts/const_let_assign2.rs:20:18: 20:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/consts/const_let_assign2.rs:20:18: 20:22
        return;                          // scope 0 at ui/consts/const_let_assign2.rs:20:18: 20:22
    }
}
