// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static lsl: isize = {
    let mut _0: isize;
    let mut _1: u32;
    let mut _2: bool;

    bb0: {
        _1 = const 2_i32 as u32 (IntToInt);
        _2 = Lt(move _1, const 64_u32);
        assert(move _2, "attempt to shift left by `{}`, which would overflow", const 2_i32) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Shl(const 1_isize, const 2_i32);
        return;
    }
}

static add: isize = {
    let mut _0: isize;
    let mut _1: (isize, bool);

    bb0: {
        _1 = CheckedAdd(const 1_isize, const 2_isize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_isize, const 2_isize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_1.0: isize);
        return;
    }
}

static addf: f64 = {
    let mut _0: f64;

    bb0: {
        _0 = Add(const 1f64, const 2f64);
        return;
    }
}

static not: isize = {
    let mut _0: isize;

    bb0: {
        _0 = Not(const 0_isize);
        return;
    }
}

static notb: bool = {
    let mut _0: bool;

    bb0: {
        _0 = Not(const true);
        return;
    }
}

static neg: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const -1_isize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let _2: &isize;
    let _3: &isize;
    let _4: &isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: isize;
    let mut _8: isize;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _12: (&isize, &isize);
    let _13: &isize;
    let _14: &isize;
    let _15: &isize;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: isize;
    let mut _19: isize;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: (&f64, &f64);
    let _24: &f64;
    let _25: &f64;
    let _26: &f64;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: f64;
    let mut _30: f64;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: (&isize, &isize);
    let _35: &isize;
    let _36: &isize;
    let _37: &isize;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: isize;
    let mut _41: isize;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&bool, &bool);
    let _46: &bool;
    let _47: &bool;
    let _48: &bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let _54: !;
    let mut _55: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _56: (&isize, &isize);
    let _57: &isize;
    let _58: &isize;
    let _59: &isize;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: isize;
    let mut _63: isize;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: &isize;
    let mut _68: &bool;
    let mut _69: &isize;
    let mut _70: &f64;
    let mut _71: &isize;
    let mut _72: &isize;
    scope 1 {
        debug left_val => _3;
        debug right_val => _4;
        let _9: core::panicking::AssertKind;
        scope 2 {
            debug kind => _9;
        }
    }
    scope 3 {
        debug left_val => _14;
        debug right_val => _15;
        let _20: core::panicking::AssertKind;
        scope 4 {
            debug kind => _20;
        }
    }
    scope 5 {
        debug left_val => _25;
        debug right_val => _26;
        let _31: core::panicking::AssertKind;
        scope 6 {
            debug kind => _31;
        }
    }
    scope 7 {
        debug left_val => _36;
        debug right_val => _37;
        let _42: core::panicking::AssertKind;
        scope 8 {
            debug kind => _42;
        }
    }
    scope 9 {
        debug left_val => _47;
        debug right_val => _48;
        let _53: core::panicking::AssertKind;
        scope 10 {
            debug kind => _53;
        }
    }
    scope 11 {
        debug left_val => _58;
        debug right_val => _59;
        let _64: core::panicking::AssertKind;
        scope 12 {
            debug kind => _64;
        }
    }

    bb0: {
        _2 = const {alloc1: &isize};
        _72 = const _;
        _1 = (_2, _72);
        _3 = (_1.0: &isize);
        _4 = (_1.1: &isize);
        _7 = (*_3);
        _8 = (*_4);
        _6 = Eq(move _7, move _8);
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<isize, isize>(move _9, _3, _4, move _11) -> unwind continue;
    }

    bb2: {
        _13 = const {alloc2: &isize};
        _71 = const _;
        _12 = (_13, _71);
        _14 = (_12.0: &isize);
        _15 = (_12.1: &isize);
        _18 = (*_14);
        _19 = (*_15);
        _17 = Eq(move _18, move _19);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<isize, isize>(move _20, _14, _15, move _22) -> unwind continue;
    }

    bb4: {
        _24 = const {alloc3: &f64};
        _70 = const _;
        _23 = (_24, _70);
        _25 = (_23.0: &f64);
        _26 = (_23.1: &f64);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<f64, f64>(move _31, _25, _26, move _33) -> unwind continue;
    }

    bb6: {
        _35 = const {alloc4: &isize};
        _69 = const _;
        _34 = (_35, _69);
        _36 = (_34.0: &isize);
        _37 = (_34.1: &isize);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<isize, isize>(move _42, _36, _37, move _44) -> unwind continue;
    }

    bb8: {
        _46 = const {alloc5: &bool};
        _68 = const _;
        _45 = (_46, _68);
        _47 = (_45.0: &bool);
        _48 = (_45.1: &bool);
        _51 = (*_47);
        _52 = (*_48);
        _50 = Eq(move _51, move _52);
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _53 = core::panicking::AssertKind::Eq;
        _55 = Option::<Arguments<'_>>::None;
        _54 = core::panicking::assert_failed::<bool, bool>(move _53, _47, _48, move _55) -> unwind continue;
    }

    bb10: {
        _57 = const {alloc6: &isize};
        _67 = const _;
        _56 = (_57, _67);
        _58 = (_56.0: &isize);
        _59 = (_56.1: &isize);
        _62 = (*_58);
        _63 = (*_59);
        _61 = Eq(move _62, move _63);
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<isize, isize>(move _64, _58, _59, move _66) -> unwind continue;
    }

    bb12: {
        return;
    }
}

alloc6 (static: neg, size: 8, align: 8) {
    ff ff ff ff ff ff ff ff                         │ ........
}

alloc5 (static: notb, size: 1, align: 1) {
    00                                              │ .
}

alloc4 (static: not, size: 8, align: 8) {
    ff ff ff ff ff ff ff ff                         │ ........
}

alloc3 (static: addf, size: 8, align: 8) {
    00 00 00 00 00 00 08 40                         │ .......@
}

alloc2 (static: add, size: 8, align: 8) {
    03 00 00 00 00 00 00 00                         │ ........
}

alloc1 (static: lsl, size: 8, align: 8) {
    04 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const -1_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const false;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const -1_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 3f64;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 4_isize;
        _0 = &_1;
        return;
    }
}
