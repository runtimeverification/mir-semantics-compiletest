// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const STRUCT: MyStruct = {
    let mut _0: MyStruct;

    bb0: {
        _0 = MyStruct { field: const 42_usize };
        return;
    }
}

const TUP: (usize,) = {
    let mut _0: (usize,);

    bb0: {
        _0 = (const 43_usize,);
        return;
    }
}

const NESTED_S: Nested = {
    let mut _0: Nested;
    let mut _1: MyStruct;

    bb0: {
        StorageLive(_1);
        _1 = MyStruct { field: const 5_usize };
        _0 = Nested { nested: move _1 };
        StorageDead(_1);
        return;
    }
}

const NESTED_T: ((usize,),) = {
    let mut _0: ((usize,),);
    let mut _1: (usize,);

    bb0: {
        StorageLive(_1);
        _1 = (const 4_usize,);
        _0 = (move _1,);
        StorageDead(_1);
        return;
    }
}

const MIX_1: ((Nested,),) = {
    let mut _0: ((Nested,),);
    let mut _1: (Nested,);
    let mut _2: Nested;
    let mut _3: MyStruct;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = MyStruct { field: const 3_usize };
        _2 = Nested { nested: move _3 };
        StorageDead(_3);
        _1 = (move _2,);
        StorageDead(_2);
        _0 = (move _1,);
        StorageDead(_1);
        return;
    }
}

const MIX_2: Mix2 = {
    let mut _0: Mix2;
    let mut _1: ((usize,),);
    let mut _2: (usize,);

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = (const 2_usize,);
        _1 = (move _2,);
        StorageDead(_2);
        _0 = Mix2 { nested: move _1 };
        StorageDead(_1);
        return;
    }
}

const INSTANT_1: usize = {
    let mut _0: usize;
    let mut _1: MyStruct;

    bb0: {
        StorageLive(_1);
        _1 = MyStruct { field: const 1_usize };
        _0 = (_1.0: usize);
        StorageDead(_1);
        return;
    }
}

const INSTANT_2: usize = {
    let mut _0: usize;
    let mut _1: (usize,);

    bb0: {
        StorageLive(_1);
        _1 = (const 0_usize,);
        _0 = (_1.0: usize);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: [i32; 42];
    let mut _9: (&usize, &usize);
    let mut _10: &usize;
    let _11: usize;
    let mut _12: &[i32];
    let mut _13: &[i32; 42];
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: (&usize, &usize);
    let mut _24: &usize;
    let _25: usize;
    let mut _26: &[i32];
    let mut _27: &[i32; 43];
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: usize;
    let mut _33: usize;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&usize, &usize);
    let mut _38: &usize;
    let _39: usize;
    let mut _40: &[i32];
    let mut _41: &[i32; 5];
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: usize;
    let mut _47: usize;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: (&usize, &usize);
    let mut _52: &usize;
    let _53: usize;
    let mut _54: &[i32];
    let mut _55: &[i32; 4];
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: usize;
    let mut _61: usize;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: (&usize, &usize);
    let mut _66: &usize;
    let _67: usize;
    let mut _68: &[i32];
    let mut _69: &[i32; 3];
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: usize;
    let mut _75: usize;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _79: (&usize, &usize);
    let mut _80: &usize;
    let _81: usize;
    let mut _82: &[i32];
    let mut _83: &[i32; 2];
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: usize;
    let mut _89: usize;
    let _91: !;
    let mut _92: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _93: (&usize, &usize);
    let mut _94: &usize;
    let _95: usize;
    let mut _96: &[i32];
    let mut _97: &[i32; 1];
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: usize;
    let mut _103: usize;
    let _105: !;
    let mut _106: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _107: (&usize, &usize);
    let mut _108: &usize;
    let _109: usize;
    let mut _110: &[i32];
    let mut _111: &[i32; 0];
    let mut _114: bool;
    let mut _115: bool;
    let mut _116: usize;
    let mut _117: usize;
    let _119: !;
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        let _2: [i32; 43];
        scope 2 {
            debug b => _2;
            let _3: [i32; 5];
            scope 3 {
                debug c => _3;
                let _4: [i32; 4];
                scope 4 {
                    debug d => _4;
                    let _5: [i32; 3];
                    scope 5 {
                        debug e => _5;
                        let _6: [i32; 2];
                        scope 6 {
                            debug f => _6;
                            let _7: [i32; 1];
                            scope 7 {
                                debug g => _7;
                                let _8: [i32; 0];
                                scope 8 {
                                    debug h => const [];
                                    let _14: &usize;
                                    let _15: &usize;
                                    let _28: &usize;
                                    let _29: &usize;
                                    let _42: &usize;
                                    let _43: &usize;
                                    let _56: &usize;
                                    let _57: &usize;
                                    let _70: &usize;
                                    let _71: &usize;
                                    let _84: &usize;
                                    let _85: &usize;
                                    let _98: &usize;
                                    let _99: &usize;
                                    let _112: &usize;
                                    let _113: &usize;
                                    let mut _121: &usize;
                                    let mut _122: &usize;
                                    let mut _123: &usize;
                                    let mut _124: &usize;
                                    let mut _125: &usize;
                                    let mut _126: &usize;
                                    let mut _127: &usize;
                                    let mut _128: &usize;
                                    scope 9 {
                                        debug left_val => _14;
                                        debug right_val => _15;
                                        let _20: core::panicking::AssertKind;
                                        scope 10 {
                                            debug kind => _20;
                                        }
                                    }
                                    scope 11 {
                                        debug left_val => _28;
                                        debug right_val => _29;
                                        let _34: core::panicking::AssertKind;
                                        scope 12 {
                                            debug kind => _34;
                                        }
                                    }
                                    scope 13 {
                                        debug left_val => _42;
                                        debug right_val => _43;
                                        let _48: core::panicking::AssertKind;
                                        scope 14 {
                                            debug kind => _48;
                                        }
                                    }
                                    scope 15 {
                                        debug left_val => _56;
                                        debug right_val => _57;
                                        let _62: core::panicking::AssertKind;
                                        scope 16 {
                                            debug kind => _62;
                                        }
                                    }
                                    scope 17 {
                                        debug left_val => _70;
                                        debug right_val => _71;
                                        let _76: core::panicking::AssertKind;
                                        scope 18 {
                                            debug kind => _76;
                                        }
                                    }
                                    scope 19 {
                                        debug left_val => _84;
                                        debug right_val => _85;
                                        let _90: core::panicking::AssertKind;
                                        scope 20 {
                                            debug kind => _90;
                                        }
                                    }
                                    scope 21 {
                                        debug left_val => _98;
                                        debug right_val => _99;
                                        let _104: core::panicking::AssertKind;
                                        scope 22 {
                                            debug kind => _104;
                                        }
                                    }
                                    scope 23 {
                                        debug left_val => _112;
                                        debug right_val => _113;
                                        let _118: core::panicking::AssertKind;
                                        scope 24 {
                                            debug kind => _118;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = [const 0_i32; 42];
        _2 = [const 0_i32; 43];
        _3 = [const 0_i32; 5];
        _4 = [const 0_i32; 4];
        _5 = [const 0_i32; 3];
        _6 = [const 0_i32; 2];
        _7 = [const 0_i32; 1];
        _13 = &_1;
        _12 = move _13 as &[i32] (Pointer(Unsize));
        _11 = Len((*_12));
        _10 = &_11;
        _128 = const _;
        _9 = (move _10, _128);
        _14 = (_9.0: &usize);
        _15 = (_9.1: &usize);
        _18 = (*_14);
        _19 = (*_15);
        _17 = Eq(move _18, move _19);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<usize, usize>(move _20, _14, _15, move _22) -> unwind continue;
    }

    bb2: {
        _27 = &_2;
        _26 = move _27 as &[i32] (Pointer(Unsize));
        _25 = Len((*_26));
        _24 = &_25;
        _127 = const _;
        _23 = (move _24, _127);
        _28 = (_23.0: &usize);
        _29 = (_23.1: &usize);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<usize, usize>(move _34, _28, _29, move _36) -> unwind continue;
    }

    bb4: {
        _41 = &_3;
        _40 = move _41 as &[i32] (Pointer(Unsize));
        _39 = Len((*_40));
        _38 = &_39;
        _126 = const _;
        _37 = (move _38, _126);
        _42 = (_37.0: &usize);
        _43 = (_37.1: &usize);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<usize, usize>(move _48, _42, _43, move _50) -> unwind continue;
    }

    bb6: {
        _55 = &_4;
        _54 = move _55 as &[i32] (Pointer(Unsize));
        _53 = Len((*_54));
        _52 = &_53;
        _125 = const _;
        _51 = (move _52, _125);
        _56 = (_51.0: &usize);
        _57 = (_51.1: &usize);
        _60 = (*_56);
        _61 = (*_57);
        _59 = Eq(move _60, move _61);
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<usize, usize>(move _62, _56, _57, move _64) -> unwind continue;
    }

    bb8: {
        _69 = &_5;
        _68 = move _69 as &[i32] (Pointer(Unsize));
        _67 = Len((*_68));
        _66 = &_67;
        _124 = const _;
        _65 = (move _66, _124);
        _70 = (_65.0: &usize);
        _71 = (_65.1: &usize);
        _74 = (*_70);
        _75 = (*_71);
        _73 = Eq(move _74, move _75);
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<usize, usize>(move _76, _70, _71, move _78) -> unwind continue;
    }

    bb10: {
        _83 = &_6;
        _82 = move _83 as &[i32] (Pointer(Unsize));
        _81 = Len((*_82));
        _80 = &_81;
        _123 = const _;
        _79 = (move _80, _123);
        _84 = (_79.0: &usize);
        _85 = (_79.1: &usize);
        _88 = (*_84);
        _89 = (*_85);
        _87 = Eq(move _88, move _89);
        _86 = Not(move _87);
        switchInt(move _86) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _90 = core::panicking::AssertKind::Eq;
        _92 = Option::<Arguments<'_>>::None;
        _91 = core::panicking::assert_failed::<usize, usize>(move _90, _84, _85, move _92) -> unwind continue;
    }

    bb12: {
        _97 = &_7;
        _96 = move _97 as &[i32] (Pointer(Unsize));
        _95 = Len((*_96));
        _94 = &_95;
        _122 = const _;
        _93 = (move _94, _122);
        _98 = (_93.0: &usize);
        _99 = (_93.1: &usize);
        _102 = (*_98);
        _103 = (*_99);
        _101 = Eq(move _102, move _103);
        _100 = Not(move _101);
        switchInt(move _100) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _104 = core::panicking::AssertKind::Eq;
        _106 = Option::<Arguments<'_>>::None;
        _105 = core::panicking::assert_failed::<usize, usize>(move _104, _98, _99, move _106) -> unwind continue;
    }

    bb14: {
        _111 = &_8;
        _110 = move _111 as &[i32] (Pointer(Unsize));
        _109 = Len((*_110));
        _108 = &_109;
        _121 = const _;
        _107 = (move _108, _121);
        _112 = (_107.0: &usize);
        _113 = (_107.1: &usize);
        _116 = (*_112);
        _117 = (*_113);
        _115 = Eq(move _116, move _117);
        _114 = Not(move _115);
        switchInt(move _114) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _118 = core::panicking::AssertKind::Eq;
        _120 = Option::<Arguments<'_>>::None;
        _119 = core::panicking::assert_failed::<usize, usize>(move _118, _112, _113, move _120) -> unwind continue;
    }

    bb16: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 5_usize;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 43_usize;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 42_usize;
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: MyStruct;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        _0 = (_1.0: usize);
        StorageDead(_1);
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;
    let mut _1: (usize,);

    bb0: {
        StorageLive(_1);
        _1 = const _;
        _0 = (_1.0: usize);
        StorageDead(_1);
        return;
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;
    let mut _1: Nested;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        _0 = ((_1.0: MyStruct).0: usize);
        StorageDead(_1);
        return;
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;
    let mut _1: ((usize,),);

    bb0: {
        StorageLive(_1);
        _1 = const _;
        _0 = ((_1.0: (usize,)).0: usize);
        StorageDead(_1);
        return;
    }
}

main::{constant#4}: usize = {
    let mut _0: usize;
    let mut _1: ((Nested,),);

    bb0: {
        StorageLive(_1);
        _1 = const _;
        _0 = ((((_1.0: (Nested,)).0: Nested).0: MyStruct).0: usize);
        StorageDead(_1);
        return;
    }
}

main::{constant#5}: usize = {
    let mut _0: usize;
    let mut _1: Mix2;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        _0 = (((_1.0: ((usize,),)).0: (usize,)).0: usize);
        StorageDead(_1);
        return;
    }
}

main::{constant#6}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

main::{constant#7}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}
