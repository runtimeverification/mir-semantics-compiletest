// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const FOO_ARR: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:8:16: 8:34
    let _1: &[&str; 2];                  // in scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:8:37: 8:57
    let _2: [&str; 2];                   // in scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:8:38: 8:57
    let mut _3: &[&str; 2];              // in scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:8:37: 8:57

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:8:37: 8:57
        _3 = const _;                    // scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:8:37: 8:57
                                         // mir::Constant
                                         // + span: ui/consts/refs_check_const_value_eq-issue-88876.rs:8:37: 8:57
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(FOO_ARR, [], Some(promoted[0])) }
        _1 = &(*_3);                     // scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:8:37: 8:57
        _0 = &(*_1);                     // scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:8:37: 8:57
        StorageDead(_1);                 // scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:8:56: 8:57
        return;                          // scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:8:1: 8:58
    }
}

promoted[0] in FOO_ARR: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:8:37: 8:57
    let mut _1: [&str; 2];               // in scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:8:38: 8:57

    bb0: {
        _1 = [const "Hello", const "Friend"]; // scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:8:38: 8:57
                                         // mir::Constant
                                         // + span: ui/consts/refs_check_const_value_eq-issue-88876.rs:8:39: 8:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/consts/refs_check_const_value_eq-issue-88876.rs:8:48: 8:56
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:8:37: 8:57
        return;                          // scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:8:37: 8:57
    }
}

FOO_ARR::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:8:32: 8:33

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:8:32: 8:33
        return;                          // scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:8:32: 8:33
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:10:11: 10:11
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:12:2: 12:2
    }
}

main::{constant#0}: &[&str] = {
    let mut _0: &[&str];                 // return place in scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:11:24: 11:31
    let mut _1: &[&str; 2];              // in scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:11:24: 11:31
    let _2: &[&str; 2];                  // in scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:11:24: 11:31

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:11:24: 11:31
        StorageLive(_2);                 // scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:11:24: 11:31
        _2 = const _;                    // scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:11:24: 11:31
                                         // mir::Constant
                                         // + span: ui/consts/refs_check_const_value_eq-issue-88876.rs:11:24: 11:31
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(FOO_ARR, [], None) }
        _1 = &(*_2);                     // scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:11:24: 11:31
        _0 = move _1 as &[&str] (Pointer(Unsize)); // scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:11:24: 11:31
        StorageDead(_2);                 // scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:11:30: 11:31
        StorageDead(_1);                 // scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:11:30: 11:31
        return;                          // scope 0 at ui/consts/refs_check_const_value_eq-issue-88876.rs:11:24: 11:31
    }
}
