// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const-try.rs:15:1: 15:41>::from_residual(_1: Error) -> TryMe {
    debug residual => _1;                // in scope 0 at ui/consts/const-try.rs:16:22: 16:30
    let mut _0: TryMe;                   // return place in scope 0 at ui/consts/const-try.rs:16:42: 16:46

    bb0: {
        return;                          // scope 0 at ui/consts/const-try.rs:18:6: 18:6
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/const-try.rs:15:1: 15:41>::from_residual(_1: Error) -> TryMe {
    debug residual => _1;                // in scope 0 at ui/consts/const-try.rs:16:22: 16:30
    let mut _0: TryMe;                   // return place in scope 0 at ui/consts/const-try.rs:16:42: 16:46

    bb0: {
        _0 = TryMe;                      // scope 0 at ui/consts/const-try.rs:17:9: 17:14
        return;                          // scope 0 at ui/consts/const-try.rs:18:6: 18:6
    }
}

fn <impl at ui/consts/const-try.rs:21:1: 21:25>::from_output(_1: ()) -> TryMe {
    debug output => _1;                  // in scope 0 at ui/consts/const-try.rs:24:20: 24:26
    let mut _0: TryMe;                   // return place in scope 0 at ui/consts/const-try.rs:24:45: 24:49

    bb0: {
        return;                          // scope 0 at ui/consts/const-try.rs:26:6: 26:6
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/const-try.rs:21:1: 21:25>::from_output(_1: ()) -> TryMe {
    debug output => _1;                  // in scope 0 at ui/consts/const-try.rs:24:20: 24:26
    let mut _0: TryMe;                   // return place in scope 0 at ui/consts/const-try.rs:24:45: 24:49

    bb0: {
        _0 = TryMe;                      // scope 0 at ui/consts/const-try.rs:25:9: 25:14
        return;                          // scope 0 at ui/consts/const-try.rs:26:6: 26:6
    }
}

fn <impl at ui/consts/const-try.rs:21:1: 21:25>::branch(_1: TryMe) -> ControlFlow<Error> {
    debug self => _1;                    // in scope 0 at ui/consts/const-try.rs:27:15: 27:19
    let mut _0: std::ops::ControlFlow<Error>; // return place in scope 0 at ui/consts/const-try.rs:27:24: 27:65

    bb0: {
        _0 = const ControlFlow::<Error>::Break(Error); // scope 0 at ui/consts/const-try.rs:28:9: 28:34
                                         // mir::Constant
                                         // + span: ui/consts/const-try.rs:28:9: 28:34
                                         // + literal: Const { ty: ControlFlow<Error>, val: Value(Scalar(0x01)) }
        return;                          // scope 0 at ui/consts/const-try.rs:29:6: 29:6
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/const-try.rs:21:1: 21:25>::branch(_1: TryMe) -> ControlFlow<Error> {
    debug self => _1;                    // in scope 0 at ui/consts/const-try.rs:27:15: 27:19
    let mut _0: std::ops::ControlFlow<Error>; // return place in scope 0 at ui/consts/const-try.rs:27:24: 27:65
    let mut _2: Error;                   // in scope 0 at ui/consts/const-try.rs:28:28: 28:33

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const-try.rs:28:28: 28:33
        _2 = Error;                      // scope 0 at ui/consts/const-try.rs:28:28: 28:33
        _0 = ControlFlow::<Error>::Break(move _2); // scope 0 at ui/consts/const-try.rs:28:9: 28:34
        StorageDead(_2);                 // scope 0 at ui/consts/const-try.rs:28:33: 28:34
        return;                          // scope 0 at ui/consts/const-try.rs:29:6: 29:6
    }
}

fn t() -> TryMe {
    let mut _0: TryMe;                   // return place in scope 0 at ui/consts/const-try.rs:32:17: 32:22
    let mut _1: std::ops::ControlFlow<Error>; // in scope 0 at ui/consts/const-try.rs:33:5: 33:11
    let mut _2: TryMe;                   // in scope 0 at ui/consts/const-try.rs:33:5: 33:10
    let mut _3: isize;                   // in scope 0 at ui/consts/const-try.rs:33:10: 33:11
    let _4: Error;                       // in scope 0 at ui/consts/const-try.rs:33:10: 33:11
    let mut _5: Error;                   // in scope 0 at ui/consts/const-try.rs:33:10: 33:11
    let _6: ();                          // in scope 0 at ui/consts/const-try.rs:33:5: 33:11
    scope 1 {
        debug residual => _4;            // in scope 1 at ui/consts/const-try.rs:33:10: 33:11
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;                 // in scope 3 at ui/consts/const-try.rs:33:5: 33:11
        scope 4 {
        }
    }

    bb0: {
        _1 = <TryMe as Try>::branch(move _2) -> bb1; // scope 0 at ui/consts/const-try.rs:33:5: 33:11
                                         // mir::Constant
                                         // + span: ui/consts/const-try.rs:33:5: 33:11
                                         // + literal: Const { ty: fn(TryMe) -> ControlFlow<<TryMe as Try>::Residual, <TryMe as Try>::Output> {<TryMe as Try>::branch}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = discriminant(_1);           // scope 0 at ui/consts/const-try.rs:33:5: 33:11
        switchInt(move _3) -> [0: bb4, 1: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-try.rs:33:5: 33:11
    }

    bb2: {
        unreachable;                     // scope 0 at ui/consts/const-try.rs:33:5: 33:11
    }

    bb3: {
        _0 = <TryMe as FromResidual<Error>>::from_residual(move _5) -> bb4; // scope 2 at ui/consts/const-try.rs:33:5: 33:11
                                         // mir::Constant
                                         // + span: ui/consts/const-try.rs:33:10: 33:11
                                         // + literal: Const { ty: fn(Error) -> TryMe {<TryMe as FromResidual<Error>>::from_residual}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/consts/const-try.rs:35:2: 35:2
    }
}

// MIR FOR CTFE
fn t() -> TryMe {
    let mut _0: TryMe;                   // return place in scope 0 at ui/consts/const-try.rs:32:17: 32:22
    let _1: ();                          // in scope 0 at ui/consts/const-try.rs:33:5: 33:11
    let mut _2: std::ops::ControlFlow<Error>; // in scope 0 at ui/consts/const-try.rs:33:5: 33:11
    let mut _3: TryMe;                   // in scope 0 at ui/consts/const-try.rs:33:5: 33:10
    let mut _4: isize;                   // in scope 0 at ui/consts/const-try.rs:33:10: 33:11
    let _5: Error;                       // in scope 0 at ui/consts/const-try.rs:33:10: 33:11
    let mut _6: !;                       // in scope 0 at ui/consts/const-try.rs:33:10: 33:11
    let mut _7: Error;                   // in scope 0 at ui/consts/const-try.rs:33:10: 33:11
    let _8: ();                          // in scope 0 at ui/consts/const-try.rs:33:5: 33:11
    scope 1 {
        debug residual => _5;            // in scope 1 at ui/consts/const-try.rs:33:10: 33:11
        scope 2 {
        }
    }
    scope 3 {
        debug val => _8;                 // in scope 3 at ui/consts/const-try.rs:33:5: 33:11
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-try.rs:33:5: 33:11
        StorageLive(_2);                 // scope 0 at ui/consts/const-try.rs:33:5: 33:11
        StorageLive(_3);                 // scope 0 at ui/consts/const-try.rs:33:5: 33:10
        _3 = TryMe;                      // scope 0 at ui/consts/const-try.rs:33:5: 33:10
        ConstEvalCounter;                // scope 0 at ui/consts/const-try.rs:33:5: 33:11
        _2 = <TryMe as Try>::branch(move _3) -> bb1; // scope 0 at ui/consts/const-try.rs:33:5: 33:11
                                         // mir::Constant
                                         // + span: ui/consts/const-try.rs:33:5: 33:11
                                         // + literal: Const { ty: fn(TryMe) -> ControlFlow<<TryMe as Try>::Residual, <TryMe as Try>::Output> {<TryMe as Try>::branch}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at ui/consts/const-try.rs:33:10: 33:11
        _4 = discriminant(_2);           // scope 0 at ui/consts/const-try.rs:33:5: 33:11
        switchInt(move _4) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at ui/consts/const-try.rs:33:5: 33:11
    }

    bb2: {
        StorageLive(_8);                 // scope 0 at ui/consts/const-try.rs:33:5: 33:11
        _8 = ((_2 as Continue).0: ());   // scope 0 at ui/consts/const-try.rs:33:5: 33:11
        _1 = _8;                         // scope 4 at ui/consts/const-try.rs:33:5: 33:11
        StorageDead(_8);                 // scope 0 at ui/consts/const-try.rs:33:10: 33:11
        StorageDead(_2);                 // scope 0 at ui/consts/const-try.rs:33:11: 33:12
        StorageDead(_1);                 // scope 0 at ui/consts/const-try.rs:33:11: 33:12
        _0 = TryMe;                      // scope 0 at ui/consts/const-try.rs:34:5: 34:10
        goto -> bb6;                     // scope 0 at ui/consts/const-try.rs:35:2: 35:2
    }

    bb3: {
        unreachable;                     // scope 0 at ui/consts/const-try.rs:33:5: 33:11
    }

    bb4: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-try.rs:33:10: 33:11
        _5 = move ((_2 as Break).0: Error); // scope 0 at ui/consts/const-try.rs:33:10: 33:11
        StorageLive(_7);                 // scope 2 at ui/consts/const-try.rs:33:10: 33:11
        _7 = move _5;                    // scope 2 at ui/consts/const-try.rs:33:10: 33:11
        ConstEvalCounter;                // scope 2 at ui/consts/const-try.rs:33:5: 33:11
        _0 = <TryMe as FromResidual<Error>>::from_residual(move _7) -> bb5; // scope 2 at ui/consts/const-try.rs:33:5: 33:11
                                         // mir::Constant
                                         // + span: ui/consts/const-try.rs:33:10: 33:11
                                         // + literal: Const { ty: fn(Error) -> TryMe {<TryMe as FromResidual<Error>>::from_residual}, val: Value(<ZST>) }
    }

    bb5: {
        StorageDead(_7);                 // scope 2 at ui/consts/const-try.rs:33:10: 33:11
        StorageDead(_5);                 // scope 0 at ui/consts/const-try.rs:33:10: 33:11
        StorageDead(_2);                 // scope 0 at ui/consts/const-try.rs:33:11: 33:12
        StorageDead(_1);                 // scope 0 at ui/consts/const-try.rs:33:11: 33:12
        goto -> bb6;                     // scope 0 at ui/consts/const-try.rs:35:2: 35:2
    }

    bb6: {
        return;                          // scope 0 at ui/consts/const-try.rs:35:2: 35:2
    }
}

const _: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-try.rs:37:10: 37:12
    let _1: TryMe;                       // in scope 0 at ui/consts/const-try.rs:38:5: 38:8

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-try.rs:38:5: 38:8
        ConstEvalCounter;                // scope 0 at ui/consts/const-try.rs:38:5: 38:8
        _1 = t() -> bb1;                 // scope 0 at ui/consts/const-try.rs:38:5: 38:8
                                         // mir::Constant
                                         // + span: ui/consts/const-try.rs:38:5: 38:6
                                         // + literal: Const { ty: fn() -> TryMe {t}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/consts/const-try.rs:38:8: 38:9
        _0 = const ();                   // scope 0 at ui/consts/const-try.rs:37:15: 39:2
        return;                          // scope 0 at ui/consts/const-try.rs:37:1: 39:3
    }
}
