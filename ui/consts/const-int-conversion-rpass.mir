// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const REVERSE: u32 = {
    let mut _0: u32;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::reverse_bits(const 305419896_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const FROM_BE_BYTES: i32 = {
    let mut _0: i32;
    let mut _1: [u8; 4];

    bb0: {
        StorageLive(_1);
        _1 = [const 18_u8, const 52_u8, const 86_u8, const 120_u8];
        ConstEvalCounter;
        _0 = core::num::<impl i32>::from_be_bytes(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}

const FROM_LE_BYTES: i32 = {
    let mut _0: i32;
    let mut _1: [u8; 4];

    bb0: {
        StorageLive(_1);
        _1 = [const 18_u8, const 52_u8, const 86_u8, const 120_u8];
        ConstEvalCounter;
        _0 = core::num::<impl i32>::from_le_bytes(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}

const FROM_NE_BYTES: i32 = {
    let mut _0: i32;
    let mut _1: i32;
    let mut _2: [u8; 4];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = [const 128_u8, const 0_u8, const 0_u8, const 0_u8];
        ConstEvalCounter;
        _1 = core::num::<impl i32>::from_ne_bytes(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        ConstEvalCounter;
        _0 = core::num::<impl i32>::from_be(move _1) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_1);
        return;
    }
}

const TO_BE_BYTES: [u8; 4] = {
    let mut _0: [u8; 4];

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::to_be_bytes(const 305419896_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

TO_BE_BYTES::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

const TO_LE_BYTES: [u8; 4] = {
    let mut _0: [u8; 4];

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::to_le_bytes(const 305419896_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

TO_LE_BYTES::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

const TO_NE_BYTES: [u8; 4] = {
    let mut _0: [u8; 4];
    let mut _1: i32;

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = core::num::<impl i32>::to_be(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        ConstEvalCounter;
        _0 = core::num::<impl i32>::to_ne_bytes(move _1) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_1);
        return;
    }
}

TO_NE_BYTES::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u32, &u32);
    let _2: &u32;
    let _3: &u32;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: u32;
    let mut _7: u32;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&i32, &i32);
    let _12: &i32;
    let _13: &i32;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: i32;
    let mut _17: i32;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&i32, &i32);
    let _22: &i32;
    let _23: &i32;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: i32;
    let mut _27: i32;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&i32, &i32);
    let _32: &i32;
    let _33: &i32;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: i32;
    let mut _37: i32;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&[u8; 4], &[u8; 4]);
    let _42: &[u8; 4];
    let _43: &[u8; 4];
    let mut _44: bool;
    let mut _45: bool;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&[u8; 4], &[u8; 4]);
    let _50: &[u8; 4];
    let _51: &[u8; 4];
    let mut _52: bool;
    let mut _53: bool;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: (&[u8; 4], &[u8; 4]);
    let _58: &[u8; 4];
    let _59: &[u8; 4];
    let mut _60: bool;
    let mut _61: bool;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: &[u8; 4];
    let mut _66: &[u8; 4];
    let mut _67: &[u8; 4];
    let mut _68: &[u8; 4];
    let mut _69: &[u8; 4];
    let mut _70: &[u8; 4];
    let mut _71: &i32;
    let mut _72: &i32;
    let mut _73: &i32;
    let mut _74: &i32;
    let mut _75: &i32;
    let mut _76: &i32;
    let mut _77: &u32;
    let mut _78: &u32;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _12;
        debug right_val => _13;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 6 {
            debug kind => _28;
        }
    }
    scope 7 {
        debug left_val => _32;
        debug right_val => _33;
        let _38: core::panicking::AssertKind;
        scope 8 {
            debug kind => _38;
        }
    }
    scope 9 {
        debug left_val => _42;
        debug right_val => _43;
        let _46: core::panicking::AssertKind;
        scope 10 {
            debug kind => _46;
        }
    }
    scope 11 {
        debug left_val => _50;
        debug right_val => _51;
        let _54: core::panicking::AssertKind;
        scope 12 {
            debug kind => _54;
        }
    }
    scope 13 {
        debug left_val => _58;
        debug right_val => _59;
        let _62: core::panicking::AssertKind;
        scope 14 {
            debug kind => _62;
        }
    }

    bb0: {
        _78 = const _;
        _77 = const _;
        _1 = (_78, _77);
        _2 = (_1.0: &u32);
        _3 = (_1.1: &u32);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<u32, u32>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        _76 = const _;
        _75 = const _;
        _11 = (_76, _75);
        _12 = (_11.0: &i32);
        _13 = (_11.1: &i32);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<i32, i32>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb4: {
        _74 = const _;
        _73 = const _;
        _21 = (_74, _73);
        _22 = (_21.0: &i32);
        _23 = (_21.1: &i32);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<i32, i32>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb6: {
        _72 = const _;
        _71 = const _;
        _31 = (_72, _71);
        _32 = (_31.0: &i32);
        _33 = (_31.1: &i32);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<i32, i32>(move _38, _32, _33, move _40) -> unwind continue;
    }

    bb8: {
        _70 = const _;
        _69 = const _;
        _41 = (_70, _69);
        _42 = (_41.0: &[u8; 4]);
        _43 = (_41.1: &[u8; 4]);
        _45 = <[u8; 4] as PartialEq>::eq(_42, _43) -> [return: bb9, unwind continue];
    }

    bb9: {
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<[u8; 4], [u8; 4]>(move _46, _42, _43, move _48) -> unwind continue;
    }

    bb11: {
        _68 = const _;
        _67 = const _;
        _49 = (_68, _67);
        _50 = (_49.0: &[u8; 4]);
        _51 = (_49.1: &[u8; 4]);
        _53 = <[u8; 4] as PartialEq>::eq(_50, _51) -> [return: bb12, unwind continue];
    }

    bb12: {
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<[u8; 4], [u8; 4]>(move _54, _50, _51, move _56) -> unwind continue;
    }

    bb14: {
        _66 = const _;
        _65 = const _;
        _57 = (_66, _65);
        _58 = (_57.0: &[u8; 4]);
        _59 = (_57.1: &[u8; 4]);
        _61 = <[u8; 4] as PartialEq>::eq(_58, _59) -> [return: bb15, unwind continue];
    }

    bb15: {
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<[u8; 4], [u8; 4]>(move _62, _58, _59, move _64) -> unwind continue;
    }

    bb17: {
        return;
    }
}

promoted[0] in main: &[u8; 4] = {
    let mut _0: &[u8; 4];
    let mut _1: [u8; 4];

    bb0: {
        _1 = [const 128_u8, const 0_u8, const 0_u8, const 0_u8];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[u8; 4] = {
    let mut _0: &[u8; 4];
    let mut _1: [u8; 4];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[u8; 4] = {
    let mut _0: &[u8; 4];
    let mut _1: [u8; 4];

    bb0: {
        _1 = [const 120_u8, const 86_u8, const 52_u8, const 18_u8];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[u8; 4] = {
    let mut _0: &[u8; 4];
    let mut _1: [u8; 4];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[u8; 4] = {
    let mut _0: &[u8; 4];
    let mut _1: [u8; 4];

    bb0: {
        _1 = [const 18_u8, const 52_u8, const 86_u8, const 120_u8];
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[u8; 4] = {
    let mut _0: &[u8; 4];
    let mut _1: [u8; 4];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2018915346_i32;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 305419896_i32;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 510274632_u32;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}
