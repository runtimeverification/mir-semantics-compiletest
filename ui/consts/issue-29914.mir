// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const ARR: [usize; 5] = {
    let mut _0: [usize; 5];

    bb0: {
        _0 = [const 5_usize, const 4_usize, const 3_usize, const 2_usize, const 1_usize];
        return;
    }
}

ARR::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let mut _4: [usize; 5];
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let mut _8: usize;
    let mut _9: bool;
    let _10: &usize;
    let _11: &usize;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: usize;
    let mut _15: usize;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: &[usize; 5];
    let mut _20: &usize;
    scope 1 {
        debug left_val => _10;
        debug right_val => _11;
        let _16: core::panicking::AssertKind;
        scope 2 {
            debug kind => _16;
        }
    }

    bb0: {
        _20 = const _;
        _4 = const _;
        _5 = const 3_usize;
        _6 = const 5_usize;
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> [success: bb1, unwind continue];
    }

    bb1: {
        _3 = _4[_5];
        _8 = const 5_usize;
        _9 = Lt(_3, _8);
        assert(move _9, "index out of bounds: the length is {} but the index is {}", move _8, _3) -> [success: bb2, unwind continue];
    }

    bb2: {
        _19 = const _;
        _2 = &(*_19)[_3];
        _1 = (_20, move _2);
        _10 = (_1.0: &usize);
        _11 = (_1.1: &usize);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<usize, usize>(move _16, _10, _11, move _18) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &[usize; 5] = {
    let mut _0: &[usize; 5];
    let mut _1: [usize; 5];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}
