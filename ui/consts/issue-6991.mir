// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static x: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at ui/consts/issue-6991.rs:5:11: 5:25
    let _1: &usize;                      // in scope 0 at ui/consts/issue-6991.rs:5:28: 5:30
    let _2: usize;                       // in scope 0 at ui/consts/issue-6991.rs:5:29: 5:30
    let mut _3: &usize;                  // in scope 0 at ui/consts/issue-6991.rs:5:28: 5:30

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/issue-6991.rs:5:28: 5:30
        _3 = const _;                    // scope 0 at ui/consts/issue-6991.rs:5:28: 5:30
                                         // mir::Constant
                                         // + span: ui/consts/issue-6991.rs:5:28: 5:30
                                         // + literal: Const { ty: &usize, val: Unevaluated(x, [], Some(promoted[0])) }
        _1 = &(*_3);                     // scope 0 at ui/consts/issue-6991.rs:5:28: 5:30
        _0 = &(*_1);                     // scope 0 at ui/consts/issue-6991.rs:5:28: 5:30
        StorageDead(_1);                 // scope 0 at ui/consts/issue-6991.rs:5:29: 5:30
        return;                          // scope 0 at ui/consts/issue-6991.rs:5:1: 5:31
    }
}

promoted[0] in x: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at ui/consts/issue-6991.rs:5:28: 5:30
    let mut _1: usize;                   // in scope 0 at ui/consts/issue-6991.rs:5:29: 5:30

    bb0: {
        _1 = const 1_usize;              // scope 0 at ui/consts/issue-6991.rs:5:29: 5:30
        _0 = &_1;                        // scope 0 at ui/consts/issue-6991.rs:5:28: 5:30
        return;                          // scope 0 at ui/consts/issue-6991.rs:5:28: 5:30
    }
}

static y: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/issue-6991.rs:6:11: 6:16
    let mut _1: &&usize;                 // in scope 0 at ui/consts/issue-6991.rs:6:20: 6:21
    let mut _2: &usize;                  // in scope 0 at ui/consts/issue-6991.rs:6:20: 6:21

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/issue-6991.rs:6:20: 6:21
        _1 = const {alloc1: &&usize};    // scope 0 at ui/consts/issue-6991.rs:6:20: 6:21
                                         // mir::Constant
                                         // + span: ui/consts/issue-6991.rs:6:20: 6:21
                                         // + literal: Const { ty: &&usize, val: Value(Scalar(alloc1)) }
        _2 = deref_copy (*_1);           // scope 0 at ui/consts/issue-6991.rs:6:19: 6:21
        _0 = (*_2);                      // scope 0 at ui/consts/issue-6991.rs:6:19: 6:21
        StorageDead(_1);                 // scope 0 at ui/consts/issue-6991.rs:6:20: 6:21
        return;                          // scope 0 at ui/consts/issue-6991.rs:6:1: 6:22
    }
}

alloc1 (static: x, size: 8, align: 8) {
    ╾───────alloc4────────╼                         │ ╾──────╼
}

alloc4 (size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-6991.rs:8:11: 8:11

    bb0: {
        return;                          // scope 0 at ui/consts/issue-6991.rs:8:13: 8:13
    }
}
