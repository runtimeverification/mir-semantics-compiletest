// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static x: &usize = {
    let mut _0: &usize;
    let _1: &usize;
    let _2: usize;
    let mut _3: &usize;

    bb0: {
        StorageLive(_1);
        _3 = const _;
        _1 = &(*_3);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in x: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

static y: usize = {
    let mut _0: usize;
    let mut _1: &&usize;
    let mut _2: &usize;

    bb0: {
        StorageLive(_1);
        _1 = const {alloc1: &&usize};
        _2 = deref_copy (*_1);
        _0 = (*_2);
        StorageDead(_1);
        return;
    }
}

alloc1 (static: x, size: 8, align: 8) {
    ╾───────alloc5────────╼                         │ ╾──────╼
}

alloc5 (size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
