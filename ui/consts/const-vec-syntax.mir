// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: &[isize]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-vec-syntax.rs:4:19: 4:19

    bb0: {
        return;                          // scope 0 at ui/consts/const-vec-syntax.rs:4:21: 4:21
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-vec-syntax.rs:6:15: 6:15
    let _1: [isize; 3];                  // in scope 0 at ui/consts/const-vec-syntax.rs:7:9: 7:10
    let _2: ();                          // in scope 0 at ui/consts/const-vec-syntax.rs:8:5: 8:10
    let mut _3: &[isize];                // in scope 0 at ui/consts/const-vec-syntax.rs:8:7: 8:9
    let mut _4: &[isize; 3];             // in scope 0 at ui/consts/const-vec-syntax.rs:8:7: 8:9
    let _5: &[isize; 3];                 // in scope 0 at ui/consts/const-vec-syntax.rs:8:7: 8:9
    scope 1 {
        debug v => _1;                   // in scope 1 at ui/consts/const-vec-syntax.rs:7:9: 7:10
    }

    bb0: {
        _1 = [const 1_isize, const 2_isize, const 3_isize]; // scope 0 at ui/consts/const-vec-syntax.rs:7:13: 7:24
        _5 = &_1;                        // scope 1 at ui/consts/const-vec-syntax.rs:8:7: 8:9
        _4 = _5;                         // scope 1 at ui/consts/const-vec-syntax.rs:8:7: 8:9
        _3 = move _4 as &[isize] (Pointer(Unsize)); // scope 1 at ui/consts/const-vec-syntax.rs:8:7: 8:9
        _2 = f(move _3) -> bb1;          // scope 1 at ui/consts/const-vec-syntax.rs:8:5: 8:10
                                         // mir::Constant
                                         // + span: ui/consts/const-vec-syntax.rs:8:5: 8:6
                                         // + literal: Const { ty: for<'a> fn(&'a [isize]) {f}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-vec-syntax.rs:9:2: 9:2
    }
}
