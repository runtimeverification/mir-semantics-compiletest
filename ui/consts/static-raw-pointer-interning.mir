// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static FOO: Foo = {
    let mut _0: Foo;
    let mut _1: *const i32;
    let _2: &i32;
    let _3: i32;
    let mut _4: &i32;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &raw const (*_2);
        _0 = Foo { field: move _1 };
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in FOO: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 42_i32;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let mut _4: &Foo;
    let _5: &i32;
    let _6: &i32;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: i32;
    let mut _10: i32;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: &i32;
    let mut _15: *const i32;
    scope 1 {
        let mut _16: *const ();
        let mut _17: usize;
        let mut _18: usize;
        let mut _19: usize;
        let mut _20: usize;
        let mut _21: bool;
    }
    scope 2 {
        debug left_val => _5;
        debug right_val => _6;
        let _11: core::panicking::AssertKind;
        scope 3 {
            debug kind => _11;
        }
    }

    bb0: {
        _4 = const {alloc1: &Foo};
        _15 = deref_copy ((*_4).0: *const i32);
        _16 = _15 as *const () (PtrToPtr);
        _17 = _16 as usize (Transmute);
        _18 = AlignOf(i32);
        _19 = Sub(_18, const 1_usize);
        _20 = BitAnd(_17, _19);
        _21 = Eq(_20, const 0_usize);
        assert(_21, "misaligned pointer dereference: address must be a multiple of {} but is {}", _18, _17) -> [success: bb3, unwind unreachable];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<i32, i32>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb2: {
        return;
    }

    bb3: {
        _3 = (*_15);
        _2 = &_3;
        _14 = const _;
        _1 = (move _2, _14);
        _5 = (_1.0: &i32);
        _6 = (_1.1: &i32);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }
}

alloc1 (static: FOO, size: 8, align: 8) {
    ╾───────alloc5────────╼                         │ ╾──────╼
}

alloc5 (size: 4, align: 4) {
    2a 00 00 00                                     │ *...
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 42_i32;
        _0 = &_1;
        return;
    }
}
