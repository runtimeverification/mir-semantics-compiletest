// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn from_fn_1(_1: F) -> [f32; N] {
    debug f => _1;                       // in scope 0 at ui/consts/issue-104396.rs:8:54: 8:59
    let mut _0: [f32; N];                // return place in scope 0 at ui/consts/issue-104396.rs:9:9: 9:19
    let mut _3: bool;                    // in scope 0 at ui/consts/issue-104396.rs:11:11: 11:16
    let mut _4: usize;                   // in scope 0 at ui/consts/issue-104396.rs:11:11: 11:12
    let mut _5: f32;                     // in scope 0 at ui/consts/issue-104396.rs:12:21: 12:25
    let mut _6: &mut F;                  // in scope 0 at ui/consts/issue-104396.rs:12:21: 12:22
    let mut _7: (usize,);                // in scope 0 at ui/consts/issue-104396.rs:12:21: 12:25
    let mut _8: usize;                   // in scope 0 at ui/consts/issue-104396.rs:12:23: 12:24
    let _9: usize;                       // in scope 0 at ui/consts/issue-104396.rs:12:16: 12:17
    let mut _10: usize;                  // in scope 0 at ui/consts/issue-104396.rs:12:9: 12:18
    let mut _11: bool;                   // in scope 0 at ui/consts/issue-104396.rs:12:9: 12:18
    let mut _12: (usize, bool);          // in scope 0 at ui/consts/issue-104396.rs:13:9: 13:15
    scope 1 {
        debug result => _0;              // in scope 1 at ui/consts/issue-104396.rs:9:9: 9:19
        let mut _2: usize;               // in scope 1 at ui/consts/issue-104396.rs:10:9: 10:14
        scope 2 {
            debug i => _2;               // in scope 2 at ui/consts/issue-104396.rs:10:9: 10:14
        }
    }

    bb0: {
        _0 = [const 0f32; N];            // scope 0 at ui/consts/issue-104396.rs:9:22: 9:30
        _2 = const 0_usize;              // scope 1 at ui/consts/issue-104396.rs:10:17: 10:18
        goto -> bb1;                     // scope 2 at ui/consts/issue-104396.rs:11:5: 14:6
    }

    bb1: {
        _4 = _2;                         // scope 2 at ui/consts/issue-104396.rs:11:11: 11:12
        _3 = Lt(move _4, const N);       // scope 2 at ui/consts/issue-104396.rs:11:11: 11:16
        switchInt(move _3) -> [0: bb6, otherwise: bb2]; // scope 2 at ui/consts/issue-104396.rs:11:11: 11:16
    }

    bb2: {
        _6 = &mut _1;                    // scope 2 at ui/consts/issue-104396.rs:12:21: 12:22
        _8 = _2;                         // scope 2 at ui/consts/issue-104396.rs:12:23: 12:24
        _7 = (move _8,);                 // scope 2 at ui/consts/issue-104396.rs:12:21: 12:25
        _5 = <F as FnMut<(usize,)>>::call_mut(move _6, move _7) -> [return: bb3, unwind: bb8]; // scope 2 at ui/consts/issue-104396.rs:12:21: 12:25
                                         // mir::Constant
                                         // + span: ui/consts/issue-104396.rs:12:21: 12:22
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (usize,)) -> <F as FnOnce<(usize,)>>::Output {<F as FnMut<(usize,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = _2;                         // scope 2 at ui/consts/issue-104396.rs:12:16: 12:17
        _10 = const N;                   // scope 2 at ui/consts/issue-104396.rs:12:9: 12:18
        _11 = Lt(_9, _10);               // scope 2 at ui/consts/issue-104396.rs:12:9: 12:18
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> [success: bb4, unwind: bb8]; // scope 2 at ui/consts/issue-104396.rs:12:9: 12:18
    }

    bb4: {
        _0[_9] = move _5;                // scope 2 at ui/consts/issue-104396.rs:12:9: 12:25
        _12 = CheckedAdd(_2, const 1_usize); // scope 2 at ui/consts/issue-104396.rs:13:9: 13:15
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_usize) -> [success: bb5, unwind: bb8]; // scope 2 at ui/consts/issue-104396.rs:13:9: 13:15
    }

    bb5: {
        _2 = move (_12.0: usize);        // scope 2 at ui/consts/issue-104396.rs:13:9: 13:15
        goto -> bb1;                     // scope 2 at ui/consts/issue-104396.rs:11:5: 14:6
    }

    bb6: {
        drop(_1) -> bb7;                 // scope 0 at ui/consts/issue-104396.rs:16:1: 16:2
    }

    bb7: {
        return;                          // scope 0 at ui/consts/issue-104396.rs:16:2: 16:2
    }

    bb8 (cleanup): {
        drop(_1) -> bb9;                 // scope 0 at ui/consts/issue-104396.rs:16:1: 16:2
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/consts/issue-104396.rs:8:1: 16:2
    }
}

from_fn_1::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/issue-104396.rs:8:73: 8:74

    bb0: {
        _0 = const N;                    // scope 0 at ui/consts/issue-104396.rs:8:73: 8:74
        return;                          // scope 0 at ui/consts/issue-104396.rs:8:73: 8:74
    }
}

from_fn_1::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/issue-104396.rs:9:28: 9:29

    bb0: {
        _0 = const N;                    // scope 0 at ui/consts/issue-104396.rs:9:28: 9:29
        return;                          // scope 0 at ui/consts/issue-104396.rs:9:28: 9:29
    }
}

TestArray::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/issue-104396.rs:20:10: 20:15
    let mut _1: bool;                    // in scope 0 at ui/consts/issue-104396.rs:20:10: 20:15

    bb0: {
        _1 = Eq(const 2_usize, const 0_usize); // scope 0 at ui/consts/issue-104396.rs:20:10: 20:15
        assert(!move _1, "attempt to divide `{}` by zero", const N) -> bb1; // scope 0 at ui/consts/issue-104396.rs:20:10: 20:15
    }

    bb1: {
        _0 = Div(const N, const 2_usize); // scope 0 at ui/consts/issue-104396.rs:20:10: 20:15
        return;                          // scope 0 at ui/consts/issue-104396.rs:20:10: 20:15
    }
}

TestArray::array::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/issue-104396.rs:22:18: 22:23
    let mut _1: bool;                    // in scope 0 at ui/consts/issue-104396.rs:22:18: 22:23

    bb0: {
        _1 = Eq(const 2_usize, const 0_usize); // scope 0 at ui/consts/issue-104396.rs:22:18: 22:23
        assert(!move _1, "attempt to divide `{}` by zero", const N) -> bb1; // scope 0 at ui/consts/issue-104396.rs:22:18: 22:23
    }

    bb1: {
        _0 = Div(const N, const 2_usize); // scope 0 at ui/consts/issue-104396.rs:22:18: 22:23
        return;                          // scope 0 at ui/consts/issue-104396.rs:22:18: 22:23
    }
}

<impl at ui/consts/issue-104396.rs:25:1: 25:34>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/issue-104396.rs:27:10: 27:15
    let mut _1: bool;                    // in scope 0 at ui/consts/issue-104396.rs:27:10: 27:15

    bb0: {
        _1 = Eq(const 2_usize, const 0_usize); // scope 0 at ui/consts/issue-104396.rs:27:10: 27:15
        assert(!move _1, "attempt to divide `{}` by zero", const N) -> bb1; // scope 0 at ui/consts/issue-104396.rs:27:10: 27:15
    }

    bb1: {
        _0 = Div(const N, const 2_usize); // scope 0 at ui/consts/issue-104396.rs:27:10: 27:15
        return;                          // scope 0 at ui/consts/issue-104396.rs:27:10: 27:15
    }
}

<impl at ui/consts/issue-104396.rs:25:1: 25:34>::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/issue-104396.rs:25:32: 25:33

    bb0: {
        _0 = const N;                    // scope 0 at ui/consts/issue-104396.rs:25:32: 25:33
        return;                          // scope 0 at ui/consts/issue-104396.rs:25:32: 25:33
    }
}

fn <impl at ui/consts/issue-104396.rs:25:1: 25:34>::from_fn_2(_1: F) -> TestArray<N> {
    debug f => _1;                       // in scope 0 at ui/consts/issue-104396.rs:29:42: 29:43
    let mut _0: TestArray<N>;            // return place in scope 0 at ui/consts/issue-104396.rs:29:51: 29:55
    let mut _2: [f32; N / 2];            // in scope 0 at ui/consts/issue-104396.rs:30:23: 30:35
    let mut _3: F;                       // in scope 0 at ui/consts/issue-104396.rs:30:33: 30:34

    bb0: {
        _3 = move _1;                    // scope 0 at ui/consts/issue-104396.rs:30:33: 30:34
        _2 = from_fn_1::<N / 2, F>(move _3) -> bb1; // scope 0 at ui/consts/issue-104396.rs:30:23: 30:35
                                         // mir::Constant
                                         // + span: ui/consts/issue-104396.rs:30:23: 30:32
                                         // + literal: Const { ty: fn(F) -> [f32; N / 2] {from_fn_1::<N / 2, F>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = TestArray::<N> { array: move _2 }; // scope 0 at ui/consts/issue-104396.rs:30:9: 30:37
        return;                          // scope 0 at ui/consts/issue-104396.rs:31:6: 31:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-104396.rs:34:11: 34:11
    let _1: TestArray<4>;                // in scope 0 at ui/consts/issue-104396.rs:35:5: 35:39
    let mut _2: [closure@ui/consts/issue-104396.rs:35:31: 35:34]; // in scope 0 at ui/consts/issue-104396.rs:35:31: 35:38

    bb0: {
        _1 = TestArray::<4>::from_fn_2::<[closure@ui/consts/issue-104396.rs:35:31: 35:34]>(move _2) -> bb1; // scope 0 at ui/consts/issue-104396.rs:35:5: 35:39
                                         // mir::Constant
                                         // + span: ui/consts/issue-104396.rs:35:5: 35:30
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([closure@ui/consts/issue-104396.rs:35:31: 35:34]) -> TestArray<4> {TestArray::<4>::from_fn_2::<[closure@ui/consts/issue-104396.rs:35:31: 35:34]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/issue-104396.rs:36:2: 36:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/issue-104396.rs:35:17: 35:18

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/consts/issue-104396.rs:35:17: 35:18
        return;                          // scope 0 at ui/consts/issue-104396.rs:35:17: 35:18
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/consts/issue-104396.rs:35:31: 35:34], _2: usize) -> f32 {
    debug i => _2;                       // in scope 0 at ui/consts/issue-104396.rs:35:32: 35:33
    let mut _0: f32;                     // return place in scope 0 at ui/consts/issue-104396.rs:35:35: 35:35

    bb0: {
        _0 = const 0f32;                 // scope 0 at ui/consts/issue-104396.rs:35:35: 35:38
        return;                          // scope 0 at ui/consts/issue-104396.rs:35:38: 35:38
    }
}
