// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn basics(_1: (u32,)) -> u32 {
    let _2: u32;                         // in scope 0 at ui/consts/const_let_eq.rs:9:18: 9:19
    let mut _4: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:12:9: 12:10
    let mut _5: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:12:9: 12:14
    let mut _7: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:15:18: 15:19
    let mut _8: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:15:18: 15:23
    let mut _9: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:18:22: 18:23
    let mut _10: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:18:22: 18:27
    let mut _11: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:19:9: 19:10
    let mut _12: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:19:9: 19:14
    let _14: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:28:9: 28:10
    let mut _15: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:29:9: 29:10
    let mut _16: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:29:13: 29:19
    let _17: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:29:17: 29:18
    let mut _18: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:29:9: 29:19
    let mut _21: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:37:9: 37:18
    let mut _22: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:37:9: 37:10
    let mut _23: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:37:13: 37:18
    let mut _24: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:37:9: 37:18
    let mut _25: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:37:21: 37:26
    let mut _26: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:37:9: 37:26
    let mut _28: Foo<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:41:35: 41:41
    let _29: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:42:9: 42:10
    let mut _30: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:43:9: 43:10
    let mut _31: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:43:13: 43:21
    let _32: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:43:17: 43:18
    let mut _33: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:43:9: 43:21
    let mut _35: Bar<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:44:35: 44:47
    let _36: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:45:9: 45:10
    let mut _37: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:46:9: 46:10
    let mut _38: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:46:13: 46:21
    let _39: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:46:17: 46:18
    let mut _40: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:46:9: 46:21
    let mut _42: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:50:38: 50:41
    let _43: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:51:13: 51:14
    let mut _44: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:52:9: 52:10
    let mut _45: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:52:13: 52:23
    let _46: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:52:21: 52:22
    let mut _47: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:52:9: 52:23
    let mut _49: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:53:43: 53:46
    let _50: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:54:11: 54:12
    let mut _51: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:55:9: 55:10
    let mut _52: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:55:13: 55:21
    let _53: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:55:19: 55:20
    let mut _54: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:55:9: 55:21
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq.rs:9:18: 9:19
        let _3: u32;                     // in scope 1 at ui/consts/const_let_eq.rs:11:9: 11:10
        scope 2 {
            debug b => _3;               // in scope 2 at ui/consts/const_let_eq.rs:11:9: 11:10
            let _6: u32;                 // in scope 2 at ui/consts/const_let_eq.rs:15:9: 15:10
            scope 3 {
                debug c => _6;           // in scope 3 at ui/consts/const_let_eq.rs:15:9: 15:10
                let mut _0: u32;         // return place in scope 3 at ui/consts/const_let_eq.rs:18:9: 18:14
                scope 4 {
                    debug d => _0;       // in scope 4 at ui/consts/const_let_eq.rs:18:9: 18:14
                    let mut _13: [u32; 1]; // in scope 4 at ui/consts/const_let_eq.rs:27:9: 27:16
                    scope 5 {
                        debug arr => _13; // in scope 5 at ui/consts/const_let_eq.rs:27:9: 27:16
                        let mut _19: Foo<u32>; // in scope 5 at ui/consts/const_let_eq.rs:33:9: 33:16
                        scope 6 {
                            debug foo => _19; // in scope 6 at ui/consts/const_let_eq.rs:33:9: 33:16
                            let mut _20: Bar<u32>; // in scope 6 at ui/consts/const_let_eq.rs:34:9: 34:16
                            scope 7 {
                                debug bar => _20; // in scope 7 at ui/consts/const_let_eq.rs:34:9: 34:16
                                let mut _27: [Foo<u32>; 1]; // in scope 7 at ui/consts/const_let_eq.rs:41:9: 41:16
                                scope 8 {
                                    debug arr => _27; // in scope 8 at ui/consts/const_let_eq.rs:41:9: 41:16
                                    let mut _34: [Bar<u32>; 1]; // in scope 8 at ui/consts/const_let_eq.rs:44:9: 44:16
                                    scope 9 {
                                        debug arr => _34; // in scope 9 at ui/consts/const_let_eq.rs:44:9: 44:16
                                        let mut _41: Foo<[u32; 1]>; // in scope 9 at ui/consts/const_let_eq.rs:50:9: 50:16
                                        scope 10 {
                                            debug arr => _41; // in scope 10 at ui/consts/const_let_eq.rs:50:9: 50:16
                                            let mut _48: Bar<[u32; 1]>; // in scope 10 at ui/consts/const_let_eq.rs:53:9: 53:16
                                            scope 11 {
                                                debug arr => _48; // in scope 11 at ui/consts/const_let_eq.rs:53:9: 53:16
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = (_1.0: u32);                // scope 0 at ui/consts/const_let_eq.rs:9:18: 9:19
        _4 = _2;                         // scope 2 at ui/consts/const_let_eq.rs:12:9: 12:10
        _5 = CheckedAdd(_4, const 1_u32); // scope 2 at ui/consts/const_let_eq.rs:12:9: 12:14
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, const 1_u32) -> bb1; // scope 2 at ui/consts/const_let_eq.rs:12:9: 12:14
    }

    bb1: {
        _3 = move (_5.0: u32);           // scope 2 at ui/consts/const_let_eq.rs:12:5: 12:14
        _7 = _3;                         // scope 2 at ui/consts/const_let_eq.rs:15:18: 15:19
        _8 = CheckedAdd(_7, const 1_u32); // scope 2 at ui/consts/const_let_eq.rs:15:18: 15:23
        assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, const 1_u32) -> bb2; // scope 2 at ui/consts/const_let_eq.rs:15:18: 15:23
    }

    bb2: {
        _6 = move (_8.0: u32);           // scope 2 at ui/consts/const_let_eq.rs:15:18: 15:23
        _9 = _6;                         // scope 3 at ui/consts/const_let_eq.rs:18:22: 18:23
        _10 = CheckedAdd(_9, const 1_u32); // scope 3 at ui/consts/const_let_eq.rs:18:22: 18:27
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, const 1_u32) -> bb3; // scope 3 at ui/consts/const_let_eq.rs:18:22: 18:27
    }

    bb3: {
        _0 = move (_10.0: u32);          // scope 3 at ui/consts/const_let_eq.rs:18:22: 18:27
        _11 = _0;                        // scope 4 at ui/consts/const_let_eq.rs:19:9: 19:10
        _12 = CheckedAdd(_11, const 1_u32); // scope 4 at ui/consts/const_let_eq.rs:19:9: 19:14
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", move _11, const 1_u32) -> bb4; // scope 4 at ui/consts/const_let_eq.rs:19:9: 19:14
    }

    bb4: {
        _0 = move (_12.0: u32);          // scope 4 at ui/consts/const_let_eq.rs:19:5: 19:14
        _13 = [const 0_u32];             // scope 4 at ui/consts/const_let_eq.rs:27:29: 27:32
        _14 = const 0_usize;             // scope 5 at ui/consts/const_let_eq.rs:28:9: 28:10
        _13[_14] = const 1_u32;          // scope 5 at ui/consts/const_let_eq.rs:28:5: 28:15
        _15 = _0;                        // scope 5 at ui/consts/const_let_eq.rs:29:9: 29:10
        _17 = const 0_usize;             // scope 5 at ui/consts/const_let_eq.rs:29:17: 29:18
        _16 = _13[_17];                  // scope 5 at ui/consts/const_let_eq.rs:29:13: 29:19
        _18 = CheckedAdd(_15, _16);      // scope 5 at ui/consts/const_let_eq.rs:29:9: 29:19
        assert(!move (_18.1: bool), "attempt to compute `{} + {}`, which would overflow", move _15, move _16) -> bb5; // scope 5 at ui/consts/const_let_eq.rs:29:9: 29:19
    }

    bb5: {
        _0 = move (_18.0: u32);          // scope 5 at ui/consts/const_let_eq.rs:29:5: 29:19
        _19 = const Foo::<u32>(0_u32);   // scope 5 at ui/consts/const_let_eq.rs:33:29: 33:35
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:33:29: 33:35
                                         // + literal: Const { ty: Foo<u32>, val: Value(Scalar(0x00000000)) }
        _20 = const Bar::<u32> {{ x: 0_u32 }}; // scope 6 at ui/consts/const_let_eq.rs:34:29: 34:41
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:34:29: 34:41
                                         // + literal: Const { ty: Bar<u32>, val: Value(Scalar(0x00000000)) }
        (_19.0: u32) = const 1_u32;      // scope 7 at ui/consts/const_let_eq.rs:35:5: 35:14
        (_20.0: u32) = const 1_u32;      // scope 7 at ui/consts/const_let_eq.rs:36:5: 36:14
        _22 = _0;                        // scope 7 at ui/consts/const_let_eq.rs:37:9: 37:10
        _23 = const 1_u32;               // scope 7 at ui/consts/const_let_eq.rs:37:13: 37:18
        _24 = CheckedAdd(_22, _23);      // scope 7 at ui/consts/const_let_eq.rs:37:9: 37:18
        assert(!move (_24.1: bool), "attempt to compute `{} + {}`, which would overflow", move _22, move _23) -> bb6; // scope 7 at ui/consts/const_let_eq.rs:37:9: 37:18
    }

    bb6: {
        _21 = move (_24.0: u32);         // scope 7 at ui/consts/const_let_eq.rs:37:9: 37:18
        _25 = (_20.0: u32);              // scope 7 at ui/consts/const_let_eq.rs:37:21: 37:26
        _26 = CheckedAdd(_21, _25);      // scope 7 at ui/consts/const_let_eq.rs:37:9: 37:26
        assert(!move (_26.1: bool), "attempt to compute `{} + {}`, which would overflow", move _21, move _25) -> bb7; // scope 7 at ui/consts/const_let_eq.rs:37:9: 37:26
    }

    bb7: {
        _0 = move (_26.0: u32);          // scope 7 at ui/consts/const_let_eq.rs:37:5: 37:26
        _28 = const Foo::<u32>(0_u32);   // scope 7 at ui/consts/const_let_eq.rs:41:35: 41:41
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:41:35: 41:41
                                         // + literal: Const { ty: Foo<u32>, val: Value(Scalar(0x00000000)) }
        _27 = [move _28];                // scope 7 at ui/consts/const_let_eq.rs:41:34: 41:42
        _29 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:42:9: 42:10
        (_27[_29].0: u32) = const 1_u32; // scope 8 at ui/consts/const_let_eq.rs:42:5: 42:17
        _30 = _0;                        // scope 8 at ui/consts/const_let_eq.rs:43:9: 43:10
        _32 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:43:17: 43:18
        _31 = (_27[_32].0: u32);         // scope 8 at ui/consts/const_let_eq.rs:43:13: 43:21
        _33 = CheckedAdd(_30, _31);      // scope 8 at ui/consts/const_let_eq.rs:43:9: 43:21
        assert(!move (_33.1: bool), "attempt to compute `{} + {}`, which would overflow", move _30, move _31) -> bb8; // scope 8 at ui/consts/const_let_eq.rs:43:9: 43:21
    }

    bb8: {
        _0 = move (_33.0: u32);          // scope 8 at ui/consts/const_let_eq.rs:43:5: 43:21
        _35 = const Bar::<u32> {{ x: 0_u32 }}; // scope 8 at ui/consts/const_let_eq.rs:44:35: 44:47
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:44:35: 44:47
                                         // + literal: Const { ty: Bar<u32>, val: Value(Scalar(0x00000000)) }
        _34 = [move _35];                // scope 8 at ui/consts/const_let_eq.rs:44:34: 44:48
        _36 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:45:9: 45:10
        (_34[_36].0: u32) = const 1_u32; // scope 9 at ui/consts/const_let_eq.rs:45:5: 45:17
        _37 = _0;                        // scope 9 at ui/consts/const_let_eq.rs:46:9: 46:10
        _39 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:46:17: 46:18
        _38 = (_34[_39].0: u32);         // scope 9 at ui/consts/const_let_eq.rs:46:13: 46:21
        _40 = CheckedAdd(_37, _38);      // scope 9 at ui/consts/const_let_eq.rs:46:9: 46:21
        assert(!move (_40.1: bool), "attempt to compute `{} + {}`, which would overflow", move _37, move _38) -> bb9; // scope 9 at ui/consts/const_let_eq.rs:46:9: 46:21
    }

    bb9: {
        _0 = move (_40.0: u32);          // scope 9 at ui/consts/const_let_eq.rs:46:5: 46:21
        _42 = [const 0_u32];             // scope 9 at ui/consts/const_let_eq.rs:50:38: 50:41
        _41 = Foo::<[u32; 1]>(move _42); // scope 9 at ui/consts/const_let_eq.rs:50:34: 50:42
        _43 = const 0_usize;             // scope 10 at ui/consts/const_let_eq.rs:51:13: 51:14
        (_41.0: [u32; 1])[_43] = const 1_u32; // scope 10 at ui/consts/const_let_eq.rs:51:5: 51:19
        _44 = _0;                        // scope 10 at ui/consts/const_let_eq.rs:52:9: 52:10
        _46 = const 0_usize;             // scope 10 at ui/consts/const_let_eq.rs:52:21: 52:22
        _45 = (_41.0: [u32; 1])[_46];    // scope 10 at ui/consts/const_let_eq.rs:52:13: 52:23
        _47 = CheckedAdd(_44, _45);      // scope 10 at ui/consts/const_let_eq.rs:52:9: 52:23
        assert(!move (_47.1: bool), "attempt to compute `{} + {}`, which would overflow", move _44, move _45) -> bb10; // scope 10 at ui/consts/const_let_eq.rs:52:9: 52:23
    }

    bb10: {
        _0 = move (_47.0: u32);          // scope 10 at ui/consts/const_let_eq.rs:52:5: 52:23
        _49 = [const 0_u32];             // scope 10 at ui/consts/const_let_eq.rs:53:43: 53:46
        _48 = Bar::<[u32; 1]> { x: move _49 }; // scope 10 at ui/consts/const_let_eq.rs:53:34: 53:48
        _50 = const 0_usize;             // scope 11 at ui/consts/const_let_eq.rs:54:11: 54:12
        (_48.0: [u32; 1])[_50] = const 1_u32; // scope 11 at ui/consts/const_let_eq.rs:54:5: 54:17
        _51 = _0;                        // scope 11 at ui/consts/const_let_eq.rs:55:9: 55:10
        _53 = const 0_usize;             // scope 11 at ui/consts/const_let_eq.rs:55:19: 55:20
        _52 = (_48.0: [u32; 1])[_53];    // scope 11 at ui/consts/const_let_eq.rs:55:13: 55:21
        _54 = CheckedAdd(_51, _52);      // scope 11 at ui/consts/const_let_eq.rs:55:9: 55:21
        assert(!move (_54.1: bool), "attempt to compute `{} + {}`, which would overflow", move _51, move _52) -> bb11; // scope 11 at ui/consts/const_let_eq.rs:55:9: 55:21
    }

    bb11: {
        _0 = move (_54.0: u32);          // scope 11 at ui/consts/const_let_eq.rs:55:5: 55:21
        return;                          // scope 0 at ui/consts/const_let_eq.rs:59:2: 59:2
    }
}

// MIR FOR CTFE
fn basics(_1: (u32,)) -> u32 {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const_let_eq.rs:9:34: 9:37
    let _2: u32;                         // in scope 0 at ui/consts/const_let_eq.rs:9:18: 9:19
    let mut _4: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:12:9: 12:10
    let mut _5: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:12:9: 12:14
    let mut _7: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:15:18: 15:19
    let mut _8: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:15:18: 15:23
    let mut _10: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:18:22: 18:23
    let mut _11: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:18:22: 18:27
    let mut _12: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:19:9: 19:10
    let mut _13: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:19:9: 19:14
    let _14: i32;                        // in scope 0 at ui/consts/const_let_eq.rs:24:5: 24:6
    let _16: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:28:9: 28:10
    let mut _17: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:28:5: 28:11
    let mut _18: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:28:5: 28:11
    let mut _19: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:29:9: 29:10
    let mut _20: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:29:13: 29:19
    let _21: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:29:17: 29:18
    let mut _22: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:29:13: 29:19
    let mut _23: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:29:13: 29:19
    let mut _24: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:29:9: 29:19
    let mut _27: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:37:9: 37:18
    let mut _28: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:37:9: 37:10
    let mut _29: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:37:13: 37:18
    let mut _30: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:37:9: 37:18
    let mut _31: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:37:21: 37:26
    let mut _32: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:37:9: 37:26
    let mut _34: Foo<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:41:35: 41:41
    let _35: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:42:9: 42:10
    let mut _36: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:42:5: 42:11
    let mut _37: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:42:5: 42:11
    let mut _38: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:43:9: 43:10
    let mut _39: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:43:13: 43:21
    let _40: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:43:17: 43:18
    let mut _41: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:43:13: 43:19
    let mut _42: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:43:13: 43:19
    let mut _43: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:43:9: 43:21
    let mut _45: Bar<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:44:35: 44:47
    let _46: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:45:9: 45:10
    let mut _47: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:45:5: 45:11
    let mut _48: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:45:5: 45:11
    let mut _49: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:46:9: 46:10
    let mut _50: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:46:13: 46:21
    let _51: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:46:17: 46:18
    let mut _52: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:46:13: 46:19
    let mut _53: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:46:13: 46:19
    let mut _54: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:46:9: 46:21
    let mut _56: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:50:38: 50:41
    let _57: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:51:13: 51:14
    let mut _58: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:51:5: 51:15
    let mut _59: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:51:5: 51:15
    let mut _60: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:52:9: 52:10
    let mut _61: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:52:13: 52:23
    let _62: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:52:21: 52:22
    let mut _63: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:52:13: 52:23
    let mut _64: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:52:13: 52:23
    let mut _65: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:52:9: 52:23
    let mut _67: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:53:43: 53:46
    let _68: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:54:11: 54:12
    let mut _69: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:54:5: 54:13
    let mut _70: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:54:5: 54:13
    let mut _71: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:55:9: 55:10
    let mut _72: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:55:13: 55:21
    let _73: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:55:19: 55:20
    let mut _74: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:55:13: 55:21
    let mut _75: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:55:13: 55:21
    let mut _76: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:55:9: 55:21
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq.rs:9:18: 9:19
        let _3: u32;                     // in scope 1 at ui/consts/const_let_eq.rs:11:9: 11:10
        scope 2 {
            debug b => _3;               // in scope 2 at ui/consts/const_let_eq.rs:11:9: 11:10
            let _6: u32;                 // in scope 2 at ui/consts/const_let_eq.rs:15:9: 15:10
            scope 3 {
                debug c => _6;           // in scope 3 at ui/consts/const_let_eq.rs:15:9: 15:10
                let mut _9: u32;         // in scope 3 at ui/consts/const_let_eq.rs:18:9: 18:14
                scope 4 {
                    debug d => _9;       // in scope 4 at ui/consts/const_let_eq.rs:18:9: 18:14
                    let mut _15: [u32; 1]; // in scope 4 at ui/consts/const_let_eq.rs:27:9: 27:16
                    scope 5 {
                        debug arr => _15; // in scope 5 at ui/consts/const_let_eq.rs:27:9: 27:16
                        let mut _25: Foo<u32>; // in scope 5 at ui/consts/const_let_eq.rs:33:9: 33:16
                        scope 6 {
                            debug foo => _25; // in scope 6 at ui/consts/const_let_eq.rs:33:9: 33:16
                            let mut _26: Bar<u32>; // in scope 6 at ui/consts/const_let_eq.rs:34:9: 34:16
                            scope 7 {
                                debug bar => _26; // in scope 7 at ui/consts/const_let_eq.rs:34:9: 34:16
                                let mut _33: [Foo<u32>; 1]; // in scope 7 at ui/consts/const_let_eq.rs:41:9: 41:16
                                scope 8 {
                                    debug arr => _33; // in scope 8 at ui/consts/const_let_eq.rs:41:9: 41:16
                                    let mut _44: [Bar<u32>; 1]; // in scope 8 at ui/consts/const_let_eq.rs:44:9: 44:16
                                    scope 9 {
                                        debug arr => _44; // in scope 9 at ui/consts/const_let_eq.rs:44:9: 44:16
                                        let mut _55: Foo<[u32; 1]>; // in scope 9 at ui/consts/const_let_eq.rs:50:9: 50:16
                                        scope 10 {
                                            debug arr => _55; // in scope 10 at ui/consts/const_let_eq.rs:50:9: 50:16
                                            let mut _66: Bar<[u32; 1]>; // in scope 10 at ui/consts/const_let_eq.rs:53:9: 53:16
                                            scope 11 {
                                                debug arr => _66; // in scope 11 at ui/consts/const_let_eq.rs:53:9: 53:16
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const_let_eq.rs:9:18: 9:19
        _2 = (_1.0: u32);                // scope 0 at ui/consts/const_let_eq.rs:9:18: 9:19
        StorageLive(_3);                 // scope 1 at ui/consts/const_let_eq.rs:11:9: 11:10
        StorageLive(_4);                 // scope 2 at ui/consts/const_let_eq.rs:12:9: 12:10
        _4 = _2;                         // scope 2 at ui/consts/const_let_eq.rs:12:9: 12:10
        _5 = CheckedAdd(_4, const 1_u32); // scope 2 at ui/consts/const_let_eq.rs:12:9: 12:14
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, const 1_u32) -> bb1; // scope 2 at ui/consts/const_let_eq.rs:12:9: 12:14
    }

    bb1: {
        _3 = move (_5.0: u32);           // scope 2 at ui/consts/const_let_eq.rs:12:5: 12:14
        StorageDead(_4);                 // scope 2 at ui/consts/const_let_eq.rs:12:13: 12:14
        StorageLive(_6);                 // scope 2 at ui/consts/const_let_eq.rs:15:9: 15:10
        StorageLive(_7);                 // scope 2 at ui/consts/const_let_eq.rs:15:18: 15:19
        _7 = _3;                         // scope 2 at ui/consts/const_let_eq.rs:15:18: 15:19
        _8 = CheckedAdd(_7, const 1_u32); // scope 2 at ui/consts/const_let_eq.rs:15:18: 15:23
        assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, const 1_u32) -> bb2; // scope 2 at ui/consts/const_let_eq.rs:15:18: 15:23
    }

    bb2: {
        _6 = move (_8.0: u32);           // scope 2 at ui/consts/const_let_eq.rs:15:18: 15:23
        StorageDead(_7);                 // scope 2 at ui/consts/const_let_eq.rs:15:22: 15:23
        StorageLive(_9);                 // scope 3 at ui/consts/const_let_eq.rs:18:9: 18:14
        StorageLive(_10);                // scope 3 at ui/consts/const_let_eq.rs:18:22: 18:23
        _10 = _6;                        // scope 3 at ui/consts/const_let_eq.rs:18:22: 18:23
        _11 = CheckedAdd(_10, const 1_u32); // scope 3 at ui/consts/const_let_eq.rs:18:22: 18:27
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _10, const 1_u32) -> bb3; // scope 3 at ui/consts/const_let_eq.rs:18:22: 18:27
    }

    bb3: {
        _9 = move (_11.0: u32);          // scope 3 at ui/consts/const_let_eq.rs:18:22: 18:27
        StorageDead(_10);                // scope 3 at ui/consts/const_let_eq.rs:18:26: 18:27
        StorageLive(_12);                // scope 4 at ui/consts/const_let_eq.rs:19:9: 19:10
        _12 = _9;                        // scope 4 at ui/consts/const_let_eq.rs:19:9: 19:10
        _13 = CheckedAdd(_12, const 1_u32); // scope 4 at ui/consts/const_let_eq.rs:19:9: 19:14
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _12, const 1_u32) -> bb4; // scope 4 at ui/consts/const_let_eq.rs:19:9: 19:14
    }

    bb4: {
        _9 = move (_13.0: u32);          // scope 4 at ui/consts/const_let_eq.rs:19:5: 19:14
        StorageDead(_12);                // scope 4 at ui/consts/const_let_eq.rs:19:13: 19:14
        StorageLive(_14);                // scope 4 at ui/consts/const_let_eq.rs:24:5: 24:6
        _14 = const 1_i32;               // scope 4 at ui/consts/const_let_eq.rs:24:5: 24:6
        StorageDead(_14);                // scope 4 at ui/consts/const_let_eq.rs:24:6: 24:7
        StorageLive(_15);                // scope 4 at ui/consts/const_let_eq.rs:27:9: 27:16
        _15 = [const 0_u32];             // scope 4 at ui/consts/const_let_eq.rs:27:29: 27:32
        StorageLive(_16);                // scope 5 at ui/consts/const_let_eq.rs:28:9: 28:10
        _16 = const 0_usize;             // scope 5 at ui/consts/const_let_eq.rs:28:9: 28:10
        _17 = Len(_15);                  // scope 5 at ui/consts/const_let_eq.rs:28:5: 28:11
        _18 = Lt(_16, _17);              // scope 5 at ui/consts/const_let_eq.rs:28:5: 28:11
        assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, _16) -> bb5; // scope 5 at ui/consts/const_let_eq.rs:28:5: 28:11
    }

    bb5: {
        _15[_16] = const 1_u32;          // scope 5 at ui/consts/const_let_eq.rs:28:5: 28:15
        StorageDead(_16);                // scope 5 at ui/consts/const_let_eq.rs:28:15: 28:16
        StorageLive(_19);                // scope 5 at ui/consts/const_let_eq.rs:29:9: 29:10
        _19 = _9;                        // scope 5 at ui/consts/const_let_eq.rs:29:9: 29:10
        StorageLive(_20);                // scope 5 at ui/consts/const_let_eq.rs:29:13: 29:19
        StorageLive(_21);                // scope 5 at ui/consts/const_let_eq.rs:29:17: 29:18
        _21 = const 0_usize;             // scope 5 at ui/consts/const_let_eq.rs:29:17: 29:18
        _22 = Len(_15);                  // scope 5 at ui/consts/const_let_eq.rs:29:13: 29:19
        _23 = Lt(_21, _22);              // scope 5 at ui/consts/const_let_eq.rs:29:13: 29:19
        assert(move _23, "index out of bounds: the length is {} but the index is {}", move _22, _21) -> bb6; // scope 5 at ui/consts/const_let_eq.rs:29:13: 29:19
    }

    bb6: {
        _20 = _15[_21];                  // scope 5 at ui/consts/const_let_eq.rs:29:13: 29:19
        _24 = CheckedAdd(_19, _20);      // scope 5 at ui/consts/const_let_eq.rs:29:9: 29:19
        assert(!move (_24.1: bool), "attempt to compute `{} + {}`, which would overflow", move _19, move _20) -> bb7; // scope 5 at ui/consts/const_let_eq.rs:29:9: 29:19
    }

    bb7: {
        _9 = move (_24.0: u32);          // scope 5 at ui/consts/const_let_eq.rs:29:5: 29:19
        StorageDead(_20);                // scope 5 at ui/consts/const_let_eq.rs:29:18: 29:19
        StorageDead(_19);                // scope 5 at ui/consts/const_let_eq.rs:29:18: 29:19
        StorageDead(_21);                // scope 5 at ui/consts/const_let_eq.rs:29:19: 29:20
        StorageLive(_25);                // scope 5 at ui/consts/const_let_eq.rs:33:9: 33:16
        _25 = Foo::<u32>(const 0_u32);   // scope 5 at ui/consts/const_let_eq.rs:33:29: 33:35
        StorageLive(_26);                // scope 6 at ui/consts/const_let_eq.rs:34:9: 34:16
        _26 = Bar::<u32> { x: const 0_u32 }; // scope 6 at ui/consts/const_let_eq.rs:34:29: 34:41
        (_25.0: u32) = const 1_u32;      // scope 7 at ui/consts/const_let_eq.rs:35:5: 35:14
        (_26.0: u32) = const 1_u32;      // scope 7 at ui/consts/const_let_eq.rs:36:5: 36:14
        StorageLive(_27);                // scope 7 at ui/consts/const_let_eq.rs:37:9: 37:18
        StorageLive(_28);                // scope 7 at ui/consts/const_let_eq.rs:37:9: 37:10
        _28 = _9;                        // scope 7 at ui/consts/const_let_eq.rs:37:9: 37:10
        StorageLive(_29);                // scope 7 at ui/consts/const_let_eq.rs:37:13: 37:18
        _29 = (_25.0: u32);              // scope 7 at ui/consts/const_let_eq.rs:37:13: 37:18
        _30 = CheckedAdd(_28, _29);      // scope 7 at ui/consts/const_let_eq.rs:37:9: 37:18
        assert(!move (_30.1: bool), "attempt to compute `{} + {}`, which would overflow", move _28, move _29) -> bb8; // scope 7 at ui/consts/const_let_eq.rs:37:9: 37:18
    }

    bb8: {
        _27 = move (_30.0: u32);         // scope 7 at ui/consts/const_let_eq.rs:37:9: 37:18
        StorageDead(_29);                // scope 7 at ui/consts/const_let_eq.rs:37:17: 37:18
        StorageDead(_28);                // scope 7 at ui/consts/const_let_eq.rs:37:17: 37:18
        StorageLive(_31);                // scope 7 at ui/consts/const_let_eq.rs:37:21: 37:26
        _31 = (_26.0: u32);              // scope 7 at ui/consts/const_let_eq.rs:37:21: 37:26
        _32 = CheckedAdd(_27, _31);      // scope 7 at ui/consts/const_let_eq.rs:37:9: 37:26
        assert(!move (_32.1: bool), "attempt to compute `{} + {}`, which would overflow", move _27, move _31) -> bb9; // scope 7 at ui/consts/const_let_eq.rs:37:9: 37:26
    }

    bb9: {
        _9 = move (_32.0: u32);          // scope 7 at ui/consts/const_let_eq.rs:37:5: 37:26
        StorageDead(_31);                // scope 7 at ui/consts/const_let_eq.rs:37:25: 37:26
        StorageDead(_27);                // scope 7 at ui/consts/const_let_eq.rs:37:25: 37:26
        StorageLive(_33);                // scope 7 at ui/consts/const_let_eq.rs:41:9: 41:16
        StorageLive(_34);                // scope 7 at ui/consts/const_let_eq.rs:41:35: 41:41
        _34 = Foo::<u32>(const 0_u32);   // scope 7 at ui/consts/const_let_eq.rs:41:35: 41:41
        _33 = [move _34];                // scope 7 at ui/consts/const_let_eq.rs:41:34: 41:42
        StorageDead(_34);                // scope 7 at ui/consts/const_let_eq.rs:41:41: 41:42
        StorageLive(_35);                // scope 8 at ui/consts/const_let_eq.rs:42:9: 42:10
        _35 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:42:9: 42:10
        _36 = Len(_33);                  // scope 8 at ui/consts/const_let_eq.rs:42:5: 42:11
        _37 = Lt(_35, _36);              // scope 8 at ui/consts/const_let_eq.rs:42:5: 42:11
        assert(move _37, "index out of bounds: the length is {} but the index is {}", move _36, _35) -> bb10; // scope 8 at ui/consts/const_let_eq.rs:42:5: 42:11
    }

    bb10: {
        (_33[_35].0: u32) = const 1_u32; // scope 8 at ui/consts/const_let_eq.rs:42:5: 42:17
        StorageDead(_35);                // scope 8 at ui/consts/const_let_eq.rs:42:17: 42:18
        StorageLive(_38);                // scope 8 at ui/consts/const_let_eq.rs:43:9: 43:10
        _38 = _9;                        // scope 8 at ui/consts/const_let_eq.rs:43:9: 43:10
        StorageLive(_39);                // scope 8 at ui/consts/const_let_eq.rs:43:13: 43:21
        StorageLive(_40);                // scope 8 at ui/consts/const_let_eq.rs:43:17: 43:18
        _40 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:43:17: 43:18
        _41 = Len(_33);                  // scope 8 at ui/consts/const_let_eq.rs:43:13: 43:19
        _42 = Lt(_40, _41);              // scope 8 at ui/consts/const_let_eq.rs:43:13: 43:19
        assert(move _42, "index out of bounds: the length is {} but the index is {}", move _41, _40) -> bb11; // scope 8 at ui/consts/const_let_eq.rs:43:13: 43:19
    }

    bb11: {
        _39 = (_33[_40].0: u32);         // scope 8 at ui/consts/const_let_eq.rs:43:13: 43:21
        _43 = CheckedAdd(_38, _39);      // scope 8 at ui/consts/const_let_eq.rs:43:9: 43:21
        assert(!move (_43.1: bool), "attempt to compute `{} + {}`, which would overflow", move _38, move _39) -> bb12; // scope 8 at ui/consts/const_let_eq.rs:43:9: 43:21
    }

    bb12: {
        _9 = move (_43.0: u32);          // scope 8 at ui/consts/const_let_eq.rs:43:5: 43:21
        StorageDead(_39);                // scope 8 at ui/consts/const_let_eq.rs:43:20: 43:21
        StorageDead(_38);                // scope 8 at ui/consts/const_let_eq.rs:43:20: 43:21
        StorageDead(_40);                // scope 8 at ui/consts/const_let_eq.rs:43:21: 43:22
        StorageLive(_44);                // scope 8 at ui/consts/const_let_eq.rs:44:9: 44:16
        StorageLive(_45);                // scope 8 at ui/consts/const_let_eq.rs:44:35: 44:47
        _45 = Bar::<u32> { x: const 0_u32 }; // scope 8 at ui/consts/const_let_eq.rs:44:35: 44:47
        _44 = [move _45];                // scope 8 at ui/consts/const_let_eq.rs:44:34: 44:48
        StorageDead(_45);                // scope 8 at ui/consts/const_let_eq.rs:44:47: 44:48
        StorageLive(_46);                // scope 9 at ui/consts/const_let_eq.rs:45:9: 45:10
        _46 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:45:9: 45:10
        _47 = Len(_44);                  // scope 9 at ui/consts/const_let_eq.rs:45:5: 45:11
        _48 = Lt(_46, _47);              // scope 9 at ui/consts/const_let_eq.rs:45:5: 45:11
        assert(move _48, "index out of bounds: the length is {} but the index is {}", move _47, _46) -> bb13; // scope 9 at ui/consts/const_let_eq.rs:45:5: 45:11
    }

    bb13: {
        (_44[_46].0: u32) = const 1_u32; // scope 9 at ui/consts/const_let_eq.rs:45:5: 45:17
        StorageDead(_46);                // scope 9 at ui/consts/const_let_eq.rs:45:17: 45:18
        StorageLive(_49);                // scope 9 at ui/consts/const_let_eq.rs:46:9: 46:10
        _49 = _9;                        // scope 9 at ui/consts/const_let_eq.rs:46:9: 46:10
        StorageLive(_50);                // scope 9 at ui/consts/const_let_eq.rs:46:13: 46:21
        StorageLive(_51);                // scope 9 at ui/consts/const_let_eq.rs:46:17: 46:18
        _51 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:46:17: 46:18
        _52 = Len(_44);                  // scope 9 at ui/consts/const_let_eq.rs:46:13: 46:19
        _53 = Lt(_51, _52);              // scope 9 at ui/consts/const_let_eq.rs:46:13: 46:19
        assert(move _53, "index out of bounds: the length is {} but the index is {}", move _52, _51) -> bb14; // scope 9 at ui/consts/const_let_eq.rs:46:13: 46:19
    }

    bb14: {
        _50 = (_44[_51].0: u32);         // scope 9 at ui/consts/const_let_eq.rs:46:13: 46:21
        _54 = CheckedAdd(_49, _50);      // scope 9 at ui/consts/const_let_eq.rs:46:9: 46:21
        assert(!move (_54.1: bool), "attempt to compute `{} + {}`, which would overflow", move _49, move _50) -> bb15; // scope 9 at ui/consts/const_let_eq.rs:46:9: 46:21
    }

    bb15: {
        _9 = move (_54.0: u32);          // scope 9 at ui/consts/const_let_eq.rs:46:5: 46:21
        StorageDead(_50);                // scope 9 at ui/consts/const_let_eq.rs:46:20: 46:21
        StorageDead(_49);                // scope 9 at ui/consts/const_let_eq.rs:46:20: 46:21
        StorageDead(_51);                // scope 9 at ui/consts/const_let_eq.rs:46:21: 46:22
        StorageLive(_55);                // scope 9 at ui/consts/const_let_eq.rs:50:9: 50:16
        StorageLive(_56);                // scope 9 at ui/consts/const_let_eq.rs:50:38: 50:41
        _56 = [const 0_u32];             // scope 9 at ui/consts/const_let_eq.rs:50:38: 50:41
        _55 = Foo::<[u32; 1]>(move _56); // scope 9 at ui/consts/const_let_eq.rs:50:34: 50:42
        StorageDead(_56);                // scope 9 at ui/consts/const_let_eq.rs:50:41: 50:42
        StorageLive(_57);                // scope 10 at ui/consts/const_let_eq.rs:51:13: 51:14
        _57 = const 0_usize;             // scope 10 at ui/consts/const_let_eq.rs:51:13: 51:14
        _58 = Len((_55.0: [u32; 1]));    // scope 10 at ui/consts/const_let_eq.rs:51:5: 51:15
        _59 = Lt(_57, _58);              // scope 10 at ui/consts/const_let_eq.rs:51:5: 51:15
        assert(move _59, "index out of bounds: the length is {} but the index is {}", move _58, _57) -> bb16; // scope 10 at ui/consts/const_let_eq.rs:51:5: 51:15
    }

    bb16: {
        (_55.0: [u32; 1])[_57] = const 1_u32; // scope 10 at ui/consts/const_let_eq.rs:51:5: 51:19
        StorageDead(_57);                // scope 10 at ui/consts/const_let_eq.rs:51:19: 51:20
        StorageLive(_60);                // scope 10 at ui/consts/const_let_eq.rs:52:9: 52:10
        _60 = _9;                        // scope 10 at ui/consts/const_let_eq.rs:52:9: 52:10
        StorageLive(_61);                // scope 10 at ui/consts/const_let_eq.rs:52:13: 52:23
        StorageLive(_62);                // scope 10 at ui/consts/const_let_eq.rs:52:21: 52:22
        _62 = const 0_usize;             // scope 10 at ui/consts/const_let_eq.rs:52:21: 52:22
        _63 = Len((_55.0: [u32; 1]));    // scope 10 at ui/consts/const_let_eq.rs:52:13: 52:23
        _64 = Lt(_62, _63);              // scope 10 at ui/consts/const_let_eq.rs:52:13: 52:23
        assert(move _64, "index out of bounds: the length is {} but the index is {}", move _63, _62) -> bb17; // scope 10 at ui/consts/const_let_eq.rs:52:13: 52:23
    }

    bb17: {
        _61 = (_55.0: [u32; 1])[_62];    // scope 10 at ui/consts/const_let_eq.rs:52:13: 52:23
        _65 = CheckedAdd(_60, _61);      // scope 10 at ui/consts/const_let_eq.rs:52:9: 52:23
        assert(!move (_65.1: bool), "attempt to compute `{} + {}`, which would overflow", move _60, move _61) -> bb18; // scope 10 at ui/consts/const_let_eq.rs:52:9: 52:23
    }

    bb18: {
        _9 = move (_65.0: u32);          // scope 10 at ui/consts/const_let_eq.rs:52:5: 52:23
        StorageDead(_61);                // scope 10 at ui/consts/const_let_eq.rs:52:22: 52:23
        StorageDead(_60);                // scope 10 at ui/consts/const_let_eq.rs:52:22: 52:23
        StorageDead(_62);                // scope 10 at ui/consts/const_let_eq.rs:52:23: 52:24
        StorageLive(_66);                // scope 10 at ui/consts/const_let_eq.rs:53:9: 53:16
        StorageLive(_67);                // scope 10 at ui/consts/const_let_eq.rs:53:43: 53:46
        _67 = [const 0_u32];             // scope 10 at ui/consts/const_let_eq.rs:53:43: 53:46
        _66 = Bar::<[u32; 1]> { x: move _67 }; // scope 10 at ui/consts/const_let_eq.rs:53:34: 53:48
        StorageDead(_67);                // scope 10 at ui/consts/const_let_eq.rs:53:47: 53:48
        StorageLive(_68);                // scope 11 at ui/consts/const_let_eq.rs:54:11: 54:12
        _68 = const 0_usize;             // scope 11 at ui/consts/const_let_eq.rs:54:11: 54:12
        _69 = Len((_66.0: [u32; 1]));    // scope 11 at ui/consts/const_let_eq.rs:54:5: 54:13
        _70 = Lt(_68, _69);              // scope 11 at ui/consts/const_let_eq.rs:54:5: 54:13
        assert(move _70, "index out of bounds: the length is {} but the index is {}", move _69, _68) -> bb19; // scope 11 at ui/consts/const_let_eq.rs:54:5: 54:13
    }

    bb19: {
        (_66.0: [u32; 1])[_68] = const 1_u32; // scope 11 at ui/consts/const_let_eq.rs:54:5: 54:17
        StorageDead(_68);                // scope 11 at ui/consts/const_let_eq.rs:54:17: 54:18
        StorageLive(_71);                // scope 11 at ui/consts/const_let_eq.rs:55:9: 55:10
        _71 = _9;                        // scope 11 at ui/consts/const_let_eq.rs:55:9: 55:10
        StorageLive(_72);                // scope 11 at ui/consts/const_let_eq.rs:55:13: 55:21
        StorageLive(_73);                // scope 11 at ui/consts/const_let_eq.rs:55:19: 55:20
        _73 = const 0_usize;             // scope 11 at ui/consts/const_let_eq.rs:55:19: 55:20
        _74 = Len((_66.0: [u32; 1]));    // scope 11 at ui/consts/const_let_eq.rs:55:13: 55:21
        _75 = Lt(_73, _74);              // scope 11 at ui/consts/const_let_eq.rs:55:13: 55:21
        assert(move _75, "index out of bounds: the length is {} but the index is {}", move _74, _73) -> bb20; // scope 11 at ui/consts/const_let_eq.rs:55:13: 55:21
    }

    bb20: {
        _72 = (_66.0: [u32; 1])[_73];    // scope 11 at ui/consts/const_let_eq.rs:55:13: 55:21
        _76 = CheckedAdd(_71, _72);      // scope 11 at ui/consts/const_let_eq.rs:55:9: 55:21
        assert(!move (_76.1: bool), "attempt to compute `{} + {}`, which would overflow", move _71, move _72) -> bb21; // scope 11 at ui/consts/const_let_eq.rs:55:9: 55:21
    }

    bb21: {
        _9 = move (_76.0: u32);          // scope 11 at ui/consts/const_let_eq.rs:55:5: 55:21
        StorageDead(_72);                // scope 11 at ui/consts/const_let_eq.rs:55:20: 55:21
        StorageDead(_71);                // scope 11 at ui/consts/const_let_eq.rs:55:20: 55:21
        StorageDead(_73);                // scope 11 at ui/consts/const_let_eq.rs:55:21: 55:22
        _0 = _9;                         // scope 11 at ui/consts/const_let_eq.rs:58:5: 58:6
        StorageDead(_66);                // scope 10 at ui/consts/const_let_eq.rs:59:1: 59:2
        StorageDead(_55);                // scope 9 at ui/consts/const_let_eq.rs:59:1: 59:2
        StorageDead(_44);                // scope 8 at ui/consts/const_let_eq.rs:59:1: 59:2
        StorageDead(_33);                // scope 7 at ui/consts/const_let_eq.rs:59:1: 59:2
        StorageDead(_26);                // scope 6 at ui/consts/const_let_eq.rs:59:1: 59:2
        StorageDead(_25);                // scope 5 at ui/consts/const_let_eq.rs:59:1: 59:2
        StorageDead(_15);                // scope 4 at ui/consts/const_let_eq.rs:59:1: 59:2
        StorageDead(_9);                 // scope 3 at ui/consts/const_let_eq.rs:59:1: 59:2
        StorageDead(_6);                 // scope 2 at ui/consts/const_let_eq.rs:59:1: 59:2
        StorageDead(_3);                 // scope 1 at ui/consts/const_let_eq.rs:59:1: 59:2
        StorageDead(_2);                 // scope 0 at ui/consts/const_let_eq.rs:59:1: 59:2
        return;                          // scope 0 at ui/consts/const_let_eq.rs:59:2: 59:2
    }
}

basics::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:27:24: 27:25

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:27:24: 27:25
        return;                          // scope 0 at ui/consts/const_let_eq.rs:27:24: 27:25
    }
}

basics::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:41:29: 41:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:41:29: 41:30
        return;                          // scope 0 at ui/consts/const_let_eq.rs:41:29: 41:30
    }
}

basics::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:44:29: 44:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:44:29: 44:30
        return;                          // scope 0 at ui/consts/const_let_eq.rs:44:29: 44:30
    }
}

basics::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:50:28: 50:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:50:28: 50:29
        return;                          // scope 0 at ui/consts/const_let_eq.rs:50:28: 50:29
    }
}

basics::{constant#4}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:53:28: 53:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:53:28: 53:29
        return;                          // scope 0 at ui/consts/const_let_eq.rs:53:28: 53:29
    }
}

fn add_assign(_1: W) -> u32 {
    let _2: u32;                         // in scope 0 at ui/consts/const_let_eq.rs:61:23: 61:24
    let mut _3: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:63:22: 63:23
    let mut _4: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:63:22: 63:27
    let mut _5: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:64:5: 64:11
    let _7: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:69:9: 69:10
    let mut _8: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:69:5: 69:16
    let mut _9: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:70:10: 70:16
    let _10: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:70:14: 70:15
    let mut _11: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:70:5: 70:16
    let mut _14: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:77:5: 77:15
    let mut _15: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:78:10: 78:23
    let mut _16: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:78:10: 78:15
    let mut _17: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:78:18: 78:23
    let mut _18: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:78:10: 78:23
    let mut _19: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:78:5: 78:23
    let mut _21: Foo<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:82:35: 82:41
    let _22: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:83:9: 83:10
    let mut _23: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:83:5: 83:18
    let mut _24: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:84:10: 84:18
    let _25: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:84:14: 84:15
    let mut _26: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:84:5: 84:18
    let mut _28: Bar<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:85:35: 85:47
    let _29: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:86:9: 86:10
    let mut _30: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:86:5: 86:18
    let mut _31: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:87:10: 87:18
    let _32: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:87:14: 87:15
    let mut _33: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:87:5: 87:18
    let mut _35: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:91:38: 91:41
    let _36: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:92:13: 92:14
    let mut _37: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:92:5: 92:20
    let mut _38: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:93:10: 93:20
    let _39: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:93:18: 93:19
    let mut _40: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:93:5: 93:20
    let mut _42: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:94:43: 94:46
    let _43: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:95:11: 95:12
    let mut _44: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:95:5: 95:18
    let mut _45: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:96:10: 96:18
    let _46: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:96:16: 96:17
    let mut _47: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:96:5: 96:18
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq.rs:61:23: 61:24
        let mut _0: u32;                 // return place in scope 1 at ui/consts/const_let_eq.rs:63:9: 63:14
        scope 2 {
            debug d => _0;               // in scope 2 at ui/consts/const_let_eq.rs:63:9: 63:14
            let mut _6: [u32; 1];        // in scope 2 at ui/consts/const_let_eq.rs:68:9: 68:16
            scope 3 {
                debug arr => _6;         // in scope 3 at ui/consts/const_let_eq.rs:68:9: 68:16
                let mut _12: Foo<u32>;   // in scope 3 at ui/consts/const_let_eq.rs:74:9: 74:16
                scope 4 {
                    debug foo => _12;    // in scope 4 at ui/consts/const_let_eq.rs:74:9: 74:16
                    let mut _13: Bar<u32>; // in scope 4 at ui/consts/const_let_eq.rs:75:9: 75:16
                    scope 5 {
                        debug bar => _13; // in scope 5 at ui/consts/const_let_eq.rs:75:9: 75:16
                        let mut _20: [Foo<u32>; 1]; // in scope 5 at ui/consts/const_let_eq.rs:82:9: 82:16
                        scope 6 {
                            debug arr => _20; // in scope 6 at ui/consts/const_let_eq.rs:82:9: 82:16
                            let mut _27: [Bar<u32>; 1]; // in scope 6 at ui/consts/const_let_eq.rs:85:9: 85:16
                            scope 7 {
                                debug arr => _27; // in scope 7 at ui/consts/const_let_eq.rs:85:9: 85:16
                                let mut _34: Foo<[u32; 1]>; // in scope 7 at ui/consts/const_let_eq.rs:91:9: 91:16
                                scope 8 {
                                    debug arr => _34; // in scope 8 at ui/consts/const_let_eq.rs:91:9: 91:16
                                    let mut _41: Bar<[u32; 1]>; // in scope 8 at ui/consts/const_let_eq.rs:94:9: 94:16
                                    scope 9 {
                                        debug arr => _41; // in scope 9 at ui/consts/const_let_eq.rs:94:9: 94:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = (_1.0: u32);                // scope 0 at ui/consts/const_let_eq.rs:61:23: 61:24
        _3 = _2;                         // scope 1 at ui/consts/const_let_eq.rs:63:22: 63:23
        _4 = CheckedAdd(_3, const 1_u32); // scope 1 at ui/consts/const_let_eq.rs:63:22: 63:27
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, const 1_u32) -> bb1; // scope 1 at ui/consts/const_let_eq.rs:63:22: 63:27
    }

    bb1: {
        _0 = move (_4.0: u32);           // scope 1 at ui/consts/const_let_eq.rs:63:22: 63:27
        _5 = CheckedAdd(_0, const 1_u32); // scope 2 at ui/consts/const_let_eq.rs:64:5: 64:11
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", _0, const 1_u32) -> bb2; // scope 2 at ui/consts/const_let_eq.rs:64:5: 64:11
    }

    bb2: {
        _0 = move (_5.0: u32);           // scope 2 at ui/consts/const_let_eq.rs:64:5: 64:11
        _6 = [const 0_u32];              // scope 2 at ui/consts/const_let_eq.rs:68:29: 68:32
        _7 = const 0_usize;              // scope 3 at ui/consts/const_let_eq.rs:69:9: 69:10
        _8 = CheckedAdd(_6[_7], const 1_u32); // scope 3 at ui/consts/const_let_eq.rs:69:5: 69:16
        assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", _6[_7], const 1_u32) -> bb3; // scope 3 at ui/consts/const_let_eq.rs:69:5: 69:16
    }

    bb3: {
        _6[_7] = move (_8.0: u32);       // scope 3 at ui/consts/const_let_eq.rs:69:5: 69:16
        _10 = const 0_usize;             // scope 3 at ui/consts/const_let_eq.rs:70:14: 70:15
        _9 = _6[_10];                    // scope 3 at ui/consts/const_let_eq.rs:70:10: 70:16
        _11 = CheckedAdd(_0, _9);        // scope 3 at ui/consts/const_let_eq.rs:70:5: 70:16
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", _0, move _9) -> bb4; // scope 3 at ui/consts/const_let_eq.rs:70:5: 70:16
    }

    bb4: {
        _0 = move (_11.0: u32);          // scope 3 at ui/consts/const_let_eq.rs:70:5: 70:16
        _12 = const Foo::<u32>(0_u32);   // scope 3 at ui/consts/const_let_eq.rs:74:29: 74:35
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:74:29: 74:35
                                         // + literal: Const { ty: Foo<u32>, val: Value(Scalar(0x00000000)) }
        _13 = const Bar::<u32> {{ x: 0_u32 }}; // scope 4 at ui/consts/const_let_eq.rs:75:29: 75:41
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:75:29: 75:41
                                         // + literal: Const { ty: Bar<u32>, val: Value(Scalar(0x00000000)) }
        (_12.0: u32) = const 1_u32;      // scope 5 at ui/consts/const_let_eq.rs:76:5: 76:15
        _14 = CheckedAdd((_13.0: u32), const 1_u32); // scope 5 at ui/consts/const_let_eq.rs:77:5: 77:15
        assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", (_13.0: u32), const 1_u32) -> bb5; // scope 5 at ui/consts/const_let_eq.rs:77:5: 77:15
    }

    bb5: {
        (_13.0: u32) = move (_14.0: u32); // scope 5 at ui/consts/const_let_eq.rs:77:5: 77:15
        _16 = (_12.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:78:10: 78:15
        _17 = (_13.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:78:18: 78:23
        _18 = CheckedAdd(_16, _17);      // scope 5 at ui/consts/const_let_eq.rs:78:10: 78:23
        assert(!move (_18.1: bool), "attempt to compute `{} + {}`, which would overflow", move _16, move _17) -> bb6; // scope 5 at ui/consts/const_let_eq.rs:78:10: 78:23
    }

    bb6: {
        _15 = move (_18.0: u32);         // scope 5 at ui/consts/const_let_eq.rs:78:10: 78:23
        _19 = CheckedAdd(_0, _15);       // scope 5 at ui/consts/const_let_eq.rs:78:5: 78:23
        assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", _0, move _15) -> bb7; // scope 5 at ui/consts/const_let_eq.rs:78:5: 78:23
    }

    bb7: {
        _0 = move (_19.0: u32);          // scope 5 at ui/consts/const_let_eq.rs:78:5: 78:23
        _21 = const Foo::<u32>(0_u32);   // scope 5 at ui/consts/const_let_eq.rs:82:35: 82:41
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:82:35: 82:41
                                         // + literal: Const { ty: Foo<u32>, val: Value(Scalar(0x00000000)) }
        _20 = [move _21];                // scope 5 at ui/consts/const_let_eq.rs:82:34: 82:42
        _22 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:83:9: 83:10
        _23 = CheckedAdd((_20[_22].0: u32), const 1_u32); // scope 6 at ui/consts/const_let_eq.rs:83:5: 83:18
        assert(!move (_23.1: bool), "attempt to compute `{} + {}`, which would overflow", (_20[_22].0: u32), const 1_u32) -> bb8; // scope 6 at ui/consts/const_let_eq.rs:83:5: 83:18
    }

    bb8: {
        (_20[_22].0: u32) = move (_23.0: u32); // scope 6 at ui/consts/const_let_eq.rs:83:5: 83:18
        _25 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:84:14: 84:15
        _24 = (_20[_25].0: u32);         // scope 6 at ui/consts/const_let_eq.rs:84:10: 84:18
        _26 = CheckedAdd(_0, _24);       // scope 6 at ui/consts/const_let_eq.rs:84:5: 84:18
        assert(!move (_26.1: bool), "attempt to compute `{} + {}`, which would overflow", _0, move _24) -> bb9; // scope 6 at ui/consts/const_let_eq.rs:84:5: 84:18
    }

    bb9: {
        _0 = move (_26.0: u32);          // scope 6 at ui/consts/const_let_eq.rs:84:5: 84:18
        _28 = const Bar::<u32> {{ x: 0_u32 }}; // scope 6 at ui/consts/const_let_eq.rs:85:35: 85:47
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:85:35: 85:47
                                         // + literal: Const { ty: Bar<u32>, val: Value(Scalar(0x00000000)) }
        _27 = [move _28];                // scope 6 at ui/consts/const_let_eq.rs:85:34: 85:48
        _29 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:86:9: 86:10
        _30 = CheckedAdd((_27[_29].0: u32), const 1_u32); // scope 7 at ui/consts/const_let_eq.rs:86:5: 86:18
        assert(!move (_30.1: bool), "attempt to compute `{} + {}`, which would overflow", (_27[_29].0: u32), const 1_u32) -> bb10; // scope 7 at ui/consts/const_let_eq.rs:86:5: 86:18
    }

    bb10: {
        (_27[_29].0: u32) = move (_30.0: u32); // scope 7 at ui/consts/const_let_eq.rs:86:5: 86:18
        _32 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:87:14: 87:15
        _31 = (_27[_32].0: u32);         // scope 7 at ui/consts/const_let_eq.rs:87:10: 87:18
        _33 = CheckedAdd(_0, _31);       // scope 7 at ui/consts/const_let_eq.rs:87:5: 87:18
        assert(!move (_33.1: bool), "attempt to compute `{} + {}`, which would overflow", _0, move _31) -> bb11; // scope 7 at ui/consts/const_let_eq.rs:87:5: 87:18
    }

    bb11: {
        _0 = move (_33.0: u32);          // scope 7 at ui/consts/const_let_eq.rs:87:5: 87:18
        _35 = [const 0_u32];             // scope 7 at ui/consts/const_let_eq.rs:91:38: 91:41
        _34 = Foo::<[u32; 1]>(move _35); // scope 7 at ui/consts/const_let_eq.rs:91:34: 91:42
        _36 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:92:13: 92:14
        _37 = CheckedAdd((_34.0: [u32; 1])[_36], const 1_u32); // scope 8 at ui/consts/const_let_eq.rs:92:5: 92:20
        assert(!move (_37.1: bool), "attempt to compute `{} + {}`, which would overflow", (_34.0: [u32; 1])[_36], const 1_u32) -> bb12; // scope 8 at ui/consts/const_let_eq.rs:92:5: 92:20
    }

    bb12: {
        (_34.0: [u32; 1])[_36] = move (_37.0: u32); // scope 8 at ui/consts/const_let_eq.rs:92:5: 92:20
        _39 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:93:18: 93:19
        _38 = (_34.0: [u32; 1])[_39];    // scope 8 at ui/consts/const_let_eq.rs:93:10: 93:20
        _40 = CheckedAdd(_0, _38);       // scope 8 at ui/consts/const_let_eq.rs:93:5: 93:20
        assert(!move (_40.1: bool), "attempt to compute `{} + {}`, which would overflow", _0, move _38) -> bb13; // scope 8 at ui/consts/const_let_eq.rs:93:5: 93:20
    }

    bb13: {
        _0 = move (_40.0: u32);          // scope 8 at ui/consts/const_let_eq.rs:93:5: 93:20
        _42 = [const 0_u32];             // scope 8 at ui/consts/const_let_eq.rs:94:43: 94:46
        _41 = Bar::<[u32; 1]> { x: move _42 }; // scope 8 at ui/consts/const_let_eq.rs:94:34: 94:48
        _43 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:95:11: 95:12
        _44 = CheckedAdd((_41.0: [u32; 1])[_43], const 1_u32); // scope 9 at ui/consts/const_let_eq.rs:95:5: 95:18
        assert(!move (_44.1: bool), "attempt to compute `{} + {}`, which would overflow", (_41.0: [u32; 1])[_43], const 1_u32) -> bb14; // scope 9 at ui/consts/const_let_eq.rs:95:5: 95:18
    }

    bb14: {
        (_41.0: [u32; 1])[_43] = move (_44.0: u32); // scope 9 at ui/consts/const_let_eq.rs:95:5: 95:18
        _46 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:96:16: 96:17
        _45 = (_41.0: [u32; 1])[_46];    // scope 9 at ui/consts/const_let_eq.rs:96:10: 96:18
        _47 = CheckedAdd(_0, _45);       // scope 9 at ui/consts/const_let_eq.rs:96:5: 96:18
        assert(!move (_47.1: bool), "attempt to compute `{} + {}`, which would overflow", _0, move _45) -> bb15; // scope 9 at ui/consts/const_let_eq.rs:96:5: 96:18
    }

    bb15: {
        _0 = move (_47.0: u32);          // scope 9 at ui/consts/const_let_eq.rs:96:5: 96:18
        return;                          // scope 0 at ui/consts/const_let_eq.rs:100:2: 100:2
    }
}

// MIR FOR CTFE
fn add_assign(_1: W) -> u32 {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const_let_eq.rs:61:33: 61:36
    let _2: u32;                         // in scope 0 at ui/consts/const_let_eq.rs:61:23: 61:24
    let mut _4: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:63:22: 63:23
    let mut _5: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:63:22: 63:27
    let mut _6: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:64:5: 64:11
    let _8: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:69:9: 69:10
    let mut _9: usize;                   // in scope 0 at ui/consts/const_let_eq.rs:69:5: 69:11
    let mut _10: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:69:5: 69:11
    let mut _11: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:69:5: 69:16
    let mut _12: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:70:10: 70:16
    let _13: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:70:14: 70:15
    let mut _14: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:70:10: 70:16
    let mut _15: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:70:10: 70:16
    let mut _16: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:70:5: 70:16
    let mut _19: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:76:5: 76:15
    let mut _20: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:77:5: 77:15
    let mut _21: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:78:10: 78:23
    let mut _22: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:78:10: 78:15
    let mut _23: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:78:18: 78:23
    let mut _24: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:78:10: 78:23
    let mut _25: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:78:5: 78:23
    let mut _27: Foo<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:82:35: 82:41
    let _28: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:83:9: 83:10
    let mut _29: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:83:5: 83:11
    let mut _30: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:83:5: 83:11
    let mut _31: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:83:5: 83:18
    let mut _32: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:84:10: 84:18
    let _33: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:84:14: 84:15
    let mut _34: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:84:10: 84:16
    let mut _35: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:84:10: 84:16
    let mut _36: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:84:5: 84:18
    let mut _38: Bar<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:85:35: 85:47
    let _39: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:86:9: 86:10
    let mut _40: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:86:5: 86:11
    let mut _41: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:86:5: 86:11
    let mut _42: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:86:5: 86:18
    let mut _43: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:87:10: 87:18
    let _44: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:87:14: 87:15
    let mut _45: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:87:10: 87:16
    let mut _46: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:87:10: 87:16
    let mut _47: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:87:5: 87:18
    let mut _49: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:91:38: 91:41
    let _50: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:92:13: 92:14
    let mut _51: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:92:5: 92:15
    let mut _52: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:92:5: 92:15
    let mut _53: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:92:5: 92:20
    let mut _54: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:93:10: 93:20
    let _55: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:93:18: 93:19
    let mut _56: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:93:10: 93:20
    let mut _57: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:93:10: 93:20
    let mut _58: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:93:5: 93:20
    let mut _60: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:94:43: 94:46
    let _61: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:95:11: 95:12
    let mut _62: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:95:5: 95:13
    let mut _63: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:95:5: 95:13
    let mut _64: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:95:5: 95:18
    let mut _65: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:96:10: 96:18
    let _66: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:96:16: 96:17
    let mut _67: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:96:10: 96:18
    let mut _68: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:96:10: 96:18
    let mut _69: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:96:5: 96:18
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq.rs:61:23: 61:24
        let mut _3: u32;                 // in scope 1 at ui/consts/const_let_eq.rs:63:9: 63:14
        scope 2 {
            debug d => _3;               // in scope 2 at ui/consts/const_let_eq.rs:63:9: 63:14
            let mut _7: [u32; 1];        // in scope 2 at ui/consts/const_let_eq.rs:68:9: 68:16
            scope 3 {
                debug arr => _7;         // in scope 3 at ui/consts/const_let_eq.rs:68:9: 68:16
                let mut _17: Foo<u32>;   // in scope 3 at ui/consts/const_let_eq.rs:74:9: 74:16
                scope 4 {
                    debug foo => _17;    // in scope 4 at ui/consts/const_let_eq.rs:74:9: 74:16
                    let mut _18: Bar<u32>; // in scope 4 at ui/consts/const_let_eq.rs:75:9: 75:16
                    scope 5 {
                        debug bar => _18; // in scope 5 at ui/consts/const_let_eq.rs:75:9: 75:16
                        let mut _26: [Foo<u32>; 1]; // in scope 5 at ui/consts/const_let_eq.rs:82:9: 82:16
                        scope 6 {
                            debug arr => _26; // in scope 6 at ui/consts/const_let_eq.rs:82:9: 82:16
                            let mut _37: [Bar<u32>; 1]; // in scope 6 at ui/consts/const_let_eq.rs:85:9: 85:16
                            scope 7 {
                                debug arr => _37; // in scope 7 at ui/consts/const_let_eq.rs:85:9: 85:16
                                let mut _48: Foo<[u32; 1]>; // in scope 7 at ui/consts/const_let_eq.rs:91:9: 91:16
                                scope 8 {
                                    debug arr => _48; // in scope 8 at ui/consts/const_let_eq.rs:91:9: 91:16
                                    let mut _59: Bar<[u32; 1]>; // in scope 8 at ui/consts/const_let_eq.rs:94:9: 94:16
                                    scope 9 {
                                        debug arr => _59; // in scope 9 at ui/consts/const_let_eq.rs:94:9: 94:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const_let_eq.rs:61:23: 61:24
        _2 = (_1.0: u32);                // scope 0 at ui/consts/const_let_eq.rs:61:23: 61:24
        StorageLive(_3);                 // scope 1 at ui/consts/const_let_eq.rs:63:9: 63:14
        StorageLive(_4);                 // scope 1 at ui/consts/const_let_eq.rs:63:22: 63:23
        _4 = _2;                         // scope 1 at ui/consts/const_let_eq.rs:63:22: 63:23
        _5 = CheckedAdd(_4, const 1_u32); // scope 1 at ui/consts/const_let_eq.rs:63:22: 63:27
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, const 1_u32) -> bb1; // scope 1 at ui/consts/const_let_eq.rs:63:22: 63:27
    }

    bb1: {
        _3 = move (_5.0: u32);           // scope 1 at ui/consts/const_let_eq.rs:63:22: 63:27
        StorageDead(_4);                 // scope 1 at ui/consts/const_let_eq.rs:63:26: 63:27
        _6 = CheckedAdd(_3, const 1_u32); // scope 2 at ui/consts/const_let_eq.rs:64:5: 64:11
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, const 1_u32) -> bb2; // scope 2 at ui/consts/const_let_eq.rs:64:5: 64:11
    }

    bb2: {
        _3 = move (_6.0: u32);           // scope 2 at ui/consts/const_let_eq.rs:64:5: 64:11
        StorageLive(_7);                 // scope 2 at ui/consts/const_let_eq.rs:68:9: 68:16
        _7 = [const 0_u32];              // scope 2 at ui/consts/const_let_eq.rs:68:29: 68:32
        StorageLive(_8);                 // scope 3 at ui/consts/const_let_eq.rs:69:9: 69:10
        _8 = const 0_usize;              // scope 3 at ui/consts/const_let_eq.rs:69:9: 69:10
        _9 = Len(_7);                    // scope 3 at ui/consts/const_let_eq.rs:69:5: 69:11
        _10 = Lt(_8, _9);                // scope 3 at ui/consts/const_let_eq.rs:69:5: 69:11
        assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _8) -> bb3; // scope 3 at ui/consts/const_let_eq.rs:69:5: 69:11
    }

    bb3: {
        _11 = CheckedAdd(_7[_8], const 1_u32); // scope 3 at ui/consts/const_let_eq.rs:69:5: 69:16
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", _7[_8], const 1_u32) -> bb4; // scope 3 at ui/consts/const_let_eq.rs:69:5: 69:16
    }

    bb4: {
        _7[_8] = move (_11.0: u32);      // scope 3 at ui/consts/const_let_eq.rs:69:5: 69:16
        StorageDead(_8);                 // scope 3 at ui/consts/const_let_eq.rs:69:16: 69:17
        StorageLive(_12);                // scope 3 at ui/consts/const_let_eq.rs:70:10: 70:16
        StorageLive(_13);                // scope 3 at ui/consts/const_let_eq.rs:70:14: 70:15
        _13 = const 0_usize;             // scope 3 at ui/consts/const_let_eq.rs:70:14: 70:15
        _14 = Len(_7);                   // scope 3 at ui/consts/const_let_eq.rs:70:10: 70:16
        _15 = Lt(_13, _14);              // scope 3 at ui/consts/const_let_eq.rs:70:10: 70:16
        assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _13) -> bb5; // scope 3 at ui/consts/const_let_eq.rs:70:10: 70:16
    }

    bb5: {
        _12 = _7[_13];                   // scope 3 at ui/consts/const_let_eq.rs:70:10: 70:16
        _16 = CheckedAdd(_3, _12);       // scope 3 at ui/consts/const_let_eq.rs:70:5: 70:16
        assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, move _12) -> bb6; // scope 3 at ui/consts/const_let_eq.rs:70:5: 70:16
    }

    bb6: {
        _3 = move (_16.0: u32);          // scope 3 at ui/consts/const_let_eq.rs:70:5: 70:16
        StorageDead(_12);                // scope 3 at ui/consts/const_let_eq.rs:70:15: 70:16
        StorageDead(_13);                // scope 3 at ui/consts/const_let_eq.rs:70:16: 70:17
        StorageLive(_17);                // scope 3 at ui/consts/const_let_eq.rs:74:9: 74:16
        _17 = Foo::<u32>(const 0_u32);   // scope 3 at ui/consts/const_let_eq.rs:74:29: 74:35
        StorageLive(_18);                // scope 4 at ui/consts/const_let_eq.rs:75:9: 75:16
        _18 = Bar::<u32> { x: const 0_u32 }; // scope 4 at ui/consts/const_let_eq.rs:75:29: 75:41
        _19 = CheckedAdd((_17.0: u32), const 1_u32); // scope 5 at ui/consts/const_let_eq.rs:76:5: 76:15
        assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", (_17.0: u32), const 1_u32) -> bb7; // scope 5 at ui/consts/const_let_eq.rs:76:5: 76:15
    }

    bb7: {
        (_17.0: u32) = move (_19.0: u32); // scope 5 at ui/consts/const_let_eq.rs:76:5: 76:15
        _20 = CheckedAdd((_18.0: u32), const 1_u32); // scope 5 at ui/consts/const_let_eq.rs:77:5: 77:15
        assert(!move (_20.1: bool), "attempt to compute `{} + {}`, which would overflow", (_18.0: u32), const 1_u32) -> bb8; // scope 5 at ui/consts/const_let_eq.rs:77:5: 77:15
    }

    bb8: {
        (_18.0: u32) = move (_20.0: u32); // scope 5 at ui/consts/const_let_eq.rs:77:5: 77:15
        StorageLive(_21);                // scope 5 at ui/consts/const_let_eq.rs:78:10: 78:23
        StorageLive(_22);                // scope 5 at ui/consts/const_let_eq.rs:78:10: 78:15
        _22 = (_17.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:78:10: 78:15
        StorageLive(_23);                // scope 5 at ui/consts/const_let_eq.rs:78:18: 78:23
        _23 = (_18.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:78:18: 78:23
        _24 = CheckedAdd(_22, _23);      // scope 5 at ui/consts/const_let_eq.rs:78:10: 78:23
        assert(!move (_24.1: bool), "attempt to compute `{} + {}`, which would overflow", move _22, move _23) -> bb9; // scope 5 at ui/consts/const_let_eq.rs:78:10: 78:23
    }

    bb9: {
        _21 = move (_24.0: u32);         // scope 5 at ui/consts/const_let_eq.rs:78:10: 78:23
        StorageDead(_23);                // scope 5 at ui/consts/const_let_eq.rs:78:22: 78:23
        StorageDead(_22);                // scope 5 at ui/consts/const_let_eq.rs:78:22: 78:23
        _25 = CheckedAdd(_3, _21);       // scope 5 at ui/consts/const_let_eq.rs:78:5: 78:23
        assert(!move (_25.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, move _21) -> bb10; // scope 5 at ui/consts/const_let_eq.rs:78:5: 78:23
    }

    bb10: {
        _3 = move (_25.0: u32);          // scope 5 at ui/consts/const_let_eq.rs:78:5: 78:23
        StorageDead(_21);                // scope 5 at ui/consts/const_let_eq.rs:78:22: 78:23
        StorageLive(_26);                // scope 5 at ui/consts/const_let_eq.rs:82:9: 82:16
        StorageLive(_27);                // scope 5 at ui/consts/const_let_eq.rs:82:35: 82:41
        _27 = Foo::<u32>(const 0_u32);   // scope 5 at ui/consts/const_let_eq.rs:82:35: 82:41
        _26 = [move _27];                // scope 5 at ui/consts/const_let_eq.rs:82:34: 82:42
        StorageDead(_27);                // scope 5 at ui/consts/const_let_eq.rs:82:41: 82:42
        StorageLive(_28);                // scope 6 at ui/consts/const_let_eq.rs:83:9: 83:10
        _28 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:83:9: 83:10
        _29 = Len(_26);                  // scope 6 at ui/consts/const_let_eq.rs:83:5: 83:11
        _30 = Lt(_28, _29);              // scope 6 at ui/consts/const_let_eq.rs:83:5: 83:11
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> bb11; // scope 6 at ui/consts/const_let_eq.rs:83:5: 83:11
    }

    bb11: {
        _31 = CheckedAdd((_26[_28].0: u32), const 1_u32); // scope 6 at ui/consts/const_let_eq.rs:83:5: 83:18
        assert(!move (_31.1: bool), "attempt to compute `{} + {}`, which would overflow", (_26[_28].0: u32), const 1_u32) -> bb12; // scope 6 at ui/consts/const_let_eq.rs:83:5: 83:18
    }

    bb12: {
        (_26[_28].0: u32) = move (_31.0: u32); // scope 6 at ui/consts/const_let_eq.rs:83:5: 83:18
        StorageDead(_28);                // scope 6 at ui/consts/const_let_eq.rs:83:18: 83:19
        StorageLive(_32);                // scope 6 at ui/consts/const_let_eq.rs:84:10: 84:18
        StorageLive(_33);                // scope 6 at ui/consts/const_let_eq.rs:84:14: 84:15
        _33 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:84:14: 84:15
        _34 = Len(_26);                  // scope 6 at ui/consts/const_let_eq.rs:84:10: 84:16
        _35 = Lt(_33, _34);              // scope 6 at ui/consts/const_let_eq.rs:84:10: 84:16
        assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _33) -> bb13; // scope 6 at ui/consts/const_let_eq.rs:84:10: 84:16
    }

    bb13: {
        _32 = (_26[_33].0: u32);         // scope 6 at ui/consts/const_let_eq.rs:84:10: 84:18
        _36 = CheckedAdd(_3, _32);       // scope 6 at ui/consts/const_let_eq.rs:84:5: 84:18
        assert(!move (_36.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, move _32) -> bb14; // scope 6 at ui/consts/const_let_eq.rs:84:5: 84:18
    }

    bb14: {
        _3 = move (_36.0: u32);          // scope 6 at ui/consts/const_let_eq.rs:84:5: 84:18
        StorageDead(_32);                // scope 6 at ui/consts/const_let_eq.rs:84:17: 84:18
        StorageDead(_33);                // scope 6 at ui/consts/const_let_eq.rs:84:18: 84:19
        StorageLive(_37);                // scope 6 at ui/consts/const_let_eq.rs:85:9: 85:16
        StorageLive(_38);                // scope 6 at ui/consts/const_let_eq.rs:85:35: 85:47
        _38 = Bar::<u32> { x: const 0_u32 }; // scope 6 at ui/consts/const_let_eq.rs:85:35: 85:47
        _37 = [move _38];                // scope 6 at ui/consts/const_let_eq.rs:85:34: 85:48
        StorageDead(_38);                // scope 6 at ui/consts/const_let_eq.rs:85:47: 85:48
        StorageLive(_39);                // scope 7 at ui/consts/const_let_eq.rs:86:9: 86:10
        _39 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:86:9: 86:10
        _40 = Len(_37);                  // scope 7 at ui/consts/const_let_eq.rs:86:5: 86:11
        _41 = Lt(_39, _40);              // scope 7 at ui/consts/const_let_eq.rs:86:5: 86:11
        assert(move _41, "index out of bounds: the length is {} but the index is {}", move _40, _39) -> bb15; // scope 7 at ui/consts/const_let_eq.rs:86:5: 86:11
    }

    bb15: {
        _42 = CheckedAdd((_37[_39].0: u32), const 1_u32); // scope 7 at ui/consts/const_let_eq.rs:86:5: 86:18
        assert(!move (_42.1: bool), "attempt to compute `{} + {}`, which would overflow", (_37[_39].0: u32), const 1_u32) -> bb16; // scope 7 at ui/consts/const_let_eq.rs:86:5: 86:18
    }

    bb16: {
        (_37[_39].0: u32) = move (_42.0: u32); // scope 7 at ui/consts/const_let_eq.rs:86:5: 86:18
        StorageDead(_39);                // scope 7 at ui/consts/const_let_eq.rs:86:18: 86:19
        StorageLive(_43);                // scope 7 at ui/consts/const_let_eq.rs:87:10: 87:18
        StorageLive(_44);                // scope 7 at ui/consts/const_let_eq.rs:87:14: 87:15
        _44 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:87:14: 87:15
        _45 = Len(_37);                  // scope 7 at ui/consts/const_let_eq.rs:87:10: 87:16
        _46 = Lt(_44, _45);              // scope 7 at ui/consts/const_let_eq.rs:87:10: 87:16
        assert(move _46, "index out of bounds: the length is {} but the index is {}", move _45, _44) -> bb17; // scope 7 at ui/consts/const_let_eq.rs:87:10: 87:16
    }

    bb17: {
        _43 = (_37[_44].0: u32);         // scope 7 at ui/consts/const_let_eq.rs:87:10: 87:18
        _47 = CheckedAdd(_3, _43);       // scope 7 at ui/consts/const_let_eq.rs:87:5: 87:18
        assert(!move (_47.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, move _43) -> bb18; // scope 7 at ui/consts/const_let_eq.rs:87:5: 87:18
    }

    bb18: {
        _3 = move (_47.0: u32);          // scope 7 at ui/consts/const_let_eq.rs:87:5: 87:18
        StorageDead(_43);                // scope 7 at ui/consts/const_let_eq.rs:87:17: 87:18
        StorageDead(_44);                // scope 7 at ui/consts/const_let_eq.rs:87:18: 87:19
        StorageLive(_48);                // scope 7 at ui/consts/const_let_eq.rs:91:9: 91:16
        StorageLive(_49);                // scope 7 at ui/consts/const_let_eq.rs:91:38: 91:41
        _49 = [const 0_u32];             // scope 7 at ui/consts/const_let_eq.rs:91:38: 91:41
        _48 = Foo::<[u32; 1]>(move _49); // scope 7 at ui/consts/const_let_eq.rs:91:34: 91:42
        StorageDead(_49);                // scope 7 at ui/consts/const_let_eq.rs:91:41: 91:42
        StorageLive(_50);                // scope 8 at ui/consts/const_let_eq.rs:92:13: 92:14
        _50 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:92:13: 92:14
        _51 = Len((_48.0: [u32; 1]));    // scope 8 at ui/consts/const_let_eq.rs:92:5: 92:15
        _52 = Lt(_50, _51);              // scope 8 at ui/consts/const_let_eq.rs:92:5: 92:15
        assert(move _52, "index out of bounds: the length is {} but the index is {}", move _51, _50) -> bb19; // scope 8 at ui/consts/const_let_eq.rs:92:5: 92:15
    }

    bb19: {
        _53 = CheckedAdd((_48.0: [u32; 1])[_50], const 1_u32); // scope 8 at ui/consts/const_let_eq.rs:92:5: 92:20
        assert(!move (_53.1: bool), "attempt to compute `{} + {}`, which would overflow", (_48.0: [u32; 1])[_50], const 1_u32) -> bb20; // scope 8 at ui/consts/const_let_eq.rs:92:5: 92:20
    }

    bb20: {
        (_48.0: [u32; 1])[_50] = move (_53.0: u32); // scope 8 at ui/consts/const_let_eq.rs:92:5: 92:20
        StorageDead(_50);                // scope 8 at ui/consts/const_let_eq.rs:92:20: 92:21
        StorageLive(_54);                // scope 8 at ui/consts/const_let_eq.rs:93:10: 93:20
        StorageLive(_55);                // scope 8 at ui/consts/const_let_eq.rs:93:18: 93:19
        _55 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:93:18: 93:19
        _56 = Len((_48.0: [u32; 1]));    // scope 8 at ui/consts/const_let_eq.rs:93:10: 93:20
        _57 = Lt(_55, _56);              // scope 8 at ui/consts/const_let_eq.rs:93:10: 93:20
        assert(move _57, "index out of bounds: the length is {} but the index is {}", move _56, _55) -> bb21; // scope 8 at ui/consts/const_let_eq.rs:93:10: 93:20
    }

    bb21: {
        _54 = (_48.0: [u32; 1])[_55];    // scope 8 at ui/consts/const_let_eq.rs:93:10: 93:20
        _58 = CheckedAdd(_3, _54);       // scope 8 at ui/consts/const_let_eq.rs:93:5: 93:20
        assert(!move (_58.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, move _54) -> bb22; // scope 8 at ui/consts/const_let_eq.rs:93:5: 93:20
    }

    bb22: {
        _3 = move (_58.0: u32);          // scope 8 at ui/consts/const_let_eq.rs:93:5: 93:20
        StorageDead(_54);                // scope 8 at ui/consts/const_let_eq.rs:93:19: 93:20
        StorageDead(_55);                // scope 8 at ui/consts/const_let_eq.rs:93:20: 93:21
        StorageLive(_59);                // scope 8 at ui/consts/const_let_eq.rs:94:9: 94:16
        StorageLive(_60);                // scope 8 at ui/consts/const_let_eq.rs:94:43: 94:46
        _60 = [const 0_u32];             // scope 8 at ui/consts/const_let_eq.rs:94:43: 94:46
        _59 = Bar::<[u32; 1]> { x: move _60 }; // scope 8 at ui/consts/const_let_eq.rs:94:34: 94:48
        StorageDead(_60);                // scope 8 at ui/consts/const_let_eq.rs:94:47: 94:48
        StorageLive(_61);                // scope 9 at ui/consts/const_let_eq.rs:95:11: 95:12
        _61 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:95:11: 95:12
        _62 = Len((_59.0: [u32; 1]));    // scope 9 at ui/consts/const_let_eq.rs:95:5: 95:13
        _63 = Lt(_61, _62);              // scope 9 at ui/consts/const_let_eq.rs:95:5: 95:13
        assert(move _63, "index out of bounds: the length is {} but the index is {}", move _62, _61) -> bb23; // scope 9 at ui/consts/const_let_eq.rs:95:5: 95:13
    }

    bb23: {
        _64 = CheckedAdd((_59.0: [u32; 1])[_61], const 1_u32); // scope 9 at ui/consts/const_let_eq.rs:95:5: 95:18
        assert(!move (_64.1: bool), "attempt to compute `{} + {}`, which would overflow", (_59.0: [u32; 1])[_61], const 1_u32) -> bb24; // scope 9 at ui/consts/const_let_eq.rs:95:5: 95:18
    }

    bb24: {
        (_59.0: [u32; 1])[_61] = move (_64.0: u32); // scope 9 at ui/consts/const_let_eq.rs:95:5: 95:18
        StorageDead(_61);                // scope 9 at ui/consts/const_let_eq.rs:95:18: 95:19
        StorageLive(_65);                // scope 9 at ui/consts/const_let_eq.rs:96:10: 96:18
        StorageLive(_66);                // scope 9 at ui/consts/const_let_eq.rs:96:16: 96:17
        _66 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:96:16: 96:17
        _67 = Len((_59.0: [u32; 1]));    // scope 9 at ui/consts/const_let_eq.rs:96:10: 96:18
        _68 = Lt(_66, _67);              // scope 9 at ui/consts/const_let_eq.rs:96:10: 96:18
        assert(move _68, "index out of bounds: the length is {} but the index is {}", move _67, _66) -> bb25; // scope 9 at ui/consts/const_let_eq.rs:96:10: 96:18
    }

    bb25: {
        _65 = (_59.0: [u32; 1])[_66];    // scope 9 at ui/consts/const_let_eq.rs:96:10: 96:18
        _69 = CheckedAdd(_3, _65);       // scope 9 at ui/consts/const_let_eq.rs:96:5: 96:18
        assert(!move (_69.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, move _65) -> bb26; // scope 9 at ui/consts/const_let_eq.rs:96:5: 96:18
    }

    bb26: {
        _3 = move (_69.0: u32);          // scope 9 at ui/consts/const_let_eq.rs:96:5: 96:18
        StorageDead(_65);                // scope 9 at ui/consts/const_let_eq.rs:96:17: 96:18
        StorageDead(_66);                // scope 9 at ui/consts/const_let_eq.rs:96:18: 96:19
        _0 = _3;                         // scope 9 at ui/consts/const_let_eq.rs:99:5: 99:6
        StorageDead(_59);                // scope 8 at ui/consts/const_let_eq.rs:100:1: 100:2
        StorageDead(_48);                // scope 7 at ui/consts/const_let_eq.rs:100:1: 100:2
        StorageDead(_37);                // scope 6 at ui/consts/const_let_eq.rs:100:1: 100:2
        StorageDead(_26);                // scope 5 at ui/consts/const_let_eq.rs:100:1: 100:2
        StorageDead(_18);                // scope 4 at ui/consts/const_let_eq.rs:100:1: 100:2
        StorageDead(_17);                // scope 3 at ui/consts/const_let_eq.rs:100:1: 100:2
        StorageDead(_7);                 // scope 2 at ui/consts/const_let_eq.rs:100:1: 100:2
        StorageDead(_3);                 // scope 1 at ui/consts/const_let_eq.rs:100:1: 100:2
        StorageDead(_2);                 // scope 0 at ui/consts/const_let_eq.rs:100:1: 100:2
        return;                          // scope 0 at ui/consts/const_let_eq.rs:100:2: 100:2
    }
}

add_assign::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:68:24: 68:25

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:68:24: 68:25
        return;                          // scope 0 at ui/consts/const_let_eq.rs:68:24: 68:25
    }
}

add_assign::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:82:29: 82:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:82:29: 82:30
        return;                          // scope 0 at ui/consts/const_let_eq.rs:82:29: 82:30
    }
}

add_assign::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:85:29: 85:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:85:29: 85:30
        return;                          // scope 0 at ui/consts/const_let_eq.rs:85:29: 85:30
    }
}

add_assign::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:91:28: 91:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:91:28: 91:29
        return;                          // scope 0 at ui/consts/const_let_eq.rs:91:28: 91:29
    }
}

add_assign::{constant#4}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:94:28: 94:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:94:28: 94:29
        return;                          // scope 0 at ui/consts/const_let_eq.rs:94:28: 94:29
    }
}

fn mul_assign(_1: A) -> u32 {
    let _2: u32;                         // in scope 0 at ui/consts/const_let_eq.rs:102:25: 102:26
    let mut _3: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:104:22: 104:23
    let mut _4: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:104:22: 104:27
    let mut _5: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:105:5: 105:11
    let _7: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:110:9: 110:10
    let mut _8: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:110:5: 110:16
    let mut _9: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:111:10: 111:16
    let _10: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:111:14: 111:15
    let mut _11: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:111:5: 111:16
    let mut _14: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:118:5: 118:15
    let mut _15: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:119:10: 119:23
    let mut _16: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:119:10: 119:15
    let mut _17: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:119:18: 119:23
    let mut _18: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:119:10: 119:23
    let mut _19: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:119:5: 119:23
    let mut _21: Foo<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:123:35: 123:41
    let _22: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:124:9: 124:10
    let mut _23: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:124:5: 124:18
    let mut _24: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:125:10: 125:18
    let _25: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:125:14: 125:15
    let mut _26: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:125:5: 125:18
    let mut _28: Bar<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:126:35: 126:47
    let _29: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:127:9: 127:10
    let mut _30: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:127:5: 127:18
    let mut _31: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:128:10: 128:18
    let _32: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:128:14: 128:15
    let mut _33: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:128:5: 128:18
    let mut _35: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:132:38: 132:41
    let _36: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:133:13: 133:14
    let mut _37: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:133:5: 133:20
    let mut _38: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:134:10: 134:20
    let _39: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:134:18: 134:19
    let mut _40: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:134:5: 134:20
    let mut _42: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:135:43: 135:46
    let _43: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:136:11: 136:12
    let mut _44: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:136:5: 136:18
    let mut _45: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:137:10: 137:18
    let _46: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:137:16: 137:17
    let mut _47: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:137:5: 137:18
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq.rs:102:25: 102:26
        let mut _0: u32;                 // return place in scope 1 at ui/consts/const_let_eq.rs:104:9: 104:14
        scope 2 {
            debug d => _0;               // in scope 2 at ui/consts/const_let_eq.rs:104:9: 104:14
            let mut _6: [u32; 1];        // in scope 2 at ui/consts/const_let_eq.rs:109:9: 109:16
            scope 3 {
                debug arr => _6;         // in scope 3 at ui/consts/const_let_eq.rs:109:9: 109:16
                let mut _12: Foo<u32>;   // in scope 3 at ui/consts/const_let_eq.rs:115:9: 115:16
                scope 4 {
                    debug foo => _12;    // in scope 4 at ui/consts/const_let_eq.rs:115:9: 115:16
                    let mut _13: Bar<u32>; // in scope 4 at ui/consts/const_let_eq.rs:116:9: 116:16
                    scope 5 {
                        debug bar => _13; // in scope 5 at ui/consts/const_let_eq.rs:116:9: 116:16
                        let mut _20: [Foo<u32>; 1]; // in scope 5 at ui/consts/const_let_eq.rs:123:9: 123:16
                        scope 6 {
                            debug arr => _20; // in scope 6 at ui/consts/const_let_eq.rs:123:9: 123:16
                            let mut _27: [Bar<u32>; 1]; // in scope 6 at ui/consts/const_let_eq.rs:126:9: 126:16
                            scope 7 {
                                debug arr => _27; // in scope 7 at ui/consts/const_let_eq.rs:126:9: 126:16
                                let mut _34: Foo<[u32; 1]>; // in scope 7 at ui/consts/const_let_eq.rs:132:9: 132:16
                                scope 8 {
                                    debug arr => _34; // in scope 8 at ui/consts/const_let_eq.rs:132:9: 132:16
                                    let mut _41: Bar<[u32; 1]>; // in scope 8 at ui/consts/const_let_eq.rs:135:9: 135:16
                                    scope 9 {
                                        debug arr => _41; // in scope 9 at ui/consts/const_let_eq.rs:135:9: 135:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = (_1.0: u32);                // scope 0 at ui/consts/const_let_eq.rs:102:25: 102:26
        _3 = _2;                         // scope 1 at ui/consts/const_let_eq.rs:104:22: 104:23
        _4 = CheckedAdd(_3, const 1_u32); // scope 1 at ui/consts/const_let_eq.rs:104:22: 104:27
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, const 1_u32) -> bb1; // scope 1 at ui/consts/const_let_eq.rs:104:22: 104:27
    }

    bb1: {
        _0 = move (_4.0: u32);           // scope 1 at ui/consts/const_let_eq.rs:104:22: 104:27
        _5 = CheckedMul(_0, const 2_u32); // scope 2 at ui/consts/const_let_eq.rs:105:5: 105:11
        assert(!move (_5.1: bool), "attempt to compute `{} * {}`, which would overflow", _0, const 2_u32) -> bb2; // scope 2 at ui/consts/const_let_eq.rs:105:5: 105:11
    }

    bb2: {
        _0 = move (_5.0: u32);           // scope 2 at ui/consts/const_let_eq.rs:105:5: 105:11
        _6 = [const 1_u32];              // scope 2 at ui/consts/const_let_eq.rs:109:29: 109:32
        _7 = const 0_usize;              // scope 3 at ui/consts/const_let_eq.rs:110:9: 110:10
        _8 = CheckedMul(_6[_7], const 2_u32); // scope 3 at ui/consts/const_let_eq.rs:110:5: 110:16
        assert(!move (_8.1: bool), "attempt to compute `{} * {}`, which would overflow", _6[_7], const 2_u32) -> bb3; // scope 3 at ui/consts/const_let_eq.rs:110:5: 110:16
    }

    bb3: {
        _6[_7] = move (_8.0: u32);       // scope 3 at ui/consts/const_let_eq.rs:110:5: 110:16
        _10 = const 0_usize;             // scope 3 at ui/consts/const_let_eq.rs:111:14: 111:15
        _9 = _6[_10];                    // scope 3 at ui/consts/const_let_eq.rs:111:10: 111:16
        _11 = CheckedMul(_0, _9);        // scope 3 at ui/consts/const_let_eq.rs:111:5: 111:16
        assert(!move (_11.1: bool), "attempt to compute `{} * {}`, which would overflow", _0, move _9) -> bb4; // scope 3 at ui/consts/const_let_eq.rs:111:5: 111:16
    }

    bb4: {
        _0 = move (_11.0: u32);          // scope 3 at ui/consts/const_let_eq.rs:111:5: 111:16
        _12 = const Foo::<u32>(1_u32);   // scope 3 at ui/consts/const_let_eq.rs:115:29: 115:35
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:115:29: 115:35
                                         // + literal: Const { ty: Foo<u32>, val: Value(Scalar(0x00000001)) }
        _13 = const Bar::<u32> {{ x: 1_u32 }}; // scope 4 at ui/consts/const_let_eq.rs:116:29: 116:41
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:116:29: 116:41
                                         // + literal: Const { ty: Bar<u32>, val: Value(Scalar(0x00000001)) }
        (_12.0: u32) = const 2_u32;      // scope 5 at ui/consts/const_let_eq.rs:117:5: 117:15
        _14 = CheckedMul((_13.0: u32), const 2_u32); // scope 5 at ui/consts/const_let_eq.rs:118:5: 118:15
        assert(!move (_14.1: bool), "attempt to compute `{} * {}`, which would overflow", (_13.0: u32), const 2_u32) -> bb5; // scope 5 at ui/consts/const_let_eq.rs:118:5: 118:15
    }

    bb5: {
        (_13.0: u32) = move (_14.0: u32); // scope 5 at ui/consts/const_let_eq.rs:118:5: 118:15
        _16 = (_12.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:119:10: 119:15
        _17 = (_13.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:119:18: 119:23
        _18 = CheckedAdd(_16, _17);      // scope 5 at ui/consts/const_let_eq.rs:119:10: 119:23
        assert(!move (_18.1: bool), "attempt to compute `{} + {}`, which would overflow", move _16, move _17) -> bb6; // scope 5 at ui/consts/const_let_eq.rs:119:10: 119:23
    }

    bb6: {
        _15 = move (_18.0: u32);         // scope 5 at ui/consts/const_let_eq.rs:119:10: 119:23
        _19 = CheckedMul(_0, _15);       // scope 5 at ui/consts/const_let_eq.rs:119:5: 119:23
        assert(!move (_19.1: bool), "attempt to compute `{} * {}`, which would overflow", _0, move _15) -> bb7; // scope 5 at ui/consts/const_let_eq.rs:119:5: 119:23
    }

    bb7: {
        _0 = move (_19.0: u32);          // scope 5 at ui/consts/const_let_eq.rs:119:5: 119:23
        _21 = const Foo::<u32>(1_u32);   // scope 5 at ui/consts/const_let_eq.rs:123:35: 123:41
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:123:35: 123:41
                                         // + literal: Const { ty: Foo<u32>, val: Value(Scalar(0x00000001)) }
        _20 = [move _21];                // scope 5 at ui/consts/const_let_eq.rs:123:34: 123:42
        _22 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:124:9: 124:10
        _23 = CheckedMul((_20[_22].0: u32), const 2_u32); // scope 6 at ui/consts/const_let_eq.rs:124:5: 124:18
        assert(!move (_23.1: bool), "attempt to compute `{} * {}`, which would overflow", (_20[_22].0: u32), const 2_u32) -> bb8; // scope 6 at ui/consts/const_let_eq.rs:124:5: 124:18
    }

    bb8: {
        (_20[_22].0: u32) = move (_23.0: u32); // scope 6 at ui/consts/const_let_eq.rs:124:5: 124:18
        _25 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:125:14: 125:15
        _24 = (_20[_25].0: u32);         // scope 6 at ui/consts/const_let_eq.rs:125:10: 125:18
        _26 = CheckedMul(_0, _24);       // scope 6 at ui/consts/const_let_eq.rs:125:5: 125:18
        assert(!move (_26.1: bool), "attempt to compute `{} * {}`, which would overflow", _0, move _24) -> bb9; // scope 6 at ui/consts/const_let_eq.rs:125:5: 125:18
    }

    bb9: {
        _0 = move (_26.0: u32);          // scope 6 at ui/consts/const_let_eq.rs:125:5: 125:18
        _28 = const Bar::<u32> {{ x: 1_u32 }}; // scope 6 at ui/consts/const_let_eq.rs:126:35: 126:47
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:126:35: 126:47
                                         // + literal: Const { ty: Bar<u32>, val: Value(Scalar(0x00000001)) }
        _27 = [move _28];                // scope 6 at ui/consts/const_let_eq.rs:126:34: 126:48
        _29 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:127:9: 127:10
        _30 = CheckedMul((_27[_29].0: u32), const 2_u32); // scope 7 at ui/consts/const_let_eq.rs:127:5: 127:18
        assert(!move (_30.1: bool), "attempt to compute `{} * {}`, which would overflow", (_27[_29].0: u32), const 2_u32) -> bb10; // scope 7 at ui/consts/const_let_eq.rs:127:5: 127:18
    }

    bb10: {
        (_27[_29].0: u32) = move (_30.0: u32); // scope 7 at ui/consts/const_let_eq.rs:127:5: 127:18
        _32 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:128:14: 128:15
        _31 = (_27[_32].0: u32);         // scope 7 at ui/consts/const_let_eq.rs:128:10: 128:18
        _33 = CheckedMul(_0, _31);       // scope 7 at ui/consts/const_let_eq.rs:128:5: 128:18
        assert(!move (_33.1: bool), "attempt to compute `{} * {}`, which would overflow", _0, move _31) -> bb11; // scope 7 at ui/consts/const_let_eq.rs:128:5: 128:18
    }

    bb11: {
        _0 = move (_33.0: u32);          // scope 7 at ui/consts/const_let_eq.rs:128:5: 128:18
        _35 = [const 1_u32];             // scope 7 at ui/consts/const_let_eq.rs:132:38: 132:41
        _34 = Foo::<[u32; 1]>(move _35); // scope 7 at ui/consts/const_let_eq.rs:132:34: 132:42
        _36 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:133:13: 133:14
        _37 = CheckedMul((_34.0: [u32; 1])[_36], const 2_u32); // scope 8 at ui/consts/const_let_eq.rs:133:5: 133:20
        assert(!move (_37.1: bool), "attempt to compute `{} * {}`, which would overflow", (_34.0: [u32; 1])[_36], const 2_u32) -> bb12; // scope 8 at ui/consts/const_let_eq.rs:133:5: 133:20
    }

    bb12: {
        (_34.0: [u32; 1])[_36] = move (_37.0: u32); // scope 8 at ui/consts/const_let_eq.rs:133:5: 133:20
        _39 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:134:18: 134:19
        _38 = (_34.0: [u32; 1])[_39];    // scope 8 at ui/consts/const_let_eq.rs:134:10: 134:20
        _40 = CheckedMul(_0, _38);       // scope 8 at ui/consts/const_let_eq.rs:134:5: 134:20
        assert(!move (_40.1: bool), "attempt to compute `{} * {}`, which would overflow", _0, move _38) -> bb13; // scope 8 at ui/consts/const_let_eq.rs:134:5: 134:20
    }

    bb13: {
        _0 = move (_40.0: u32);          // scope 8 at ui/consts/const_let_eq.rs:134:5: 134:20
        _42 = [const 1_u32];             // scope 8 at ui/consts/const_let_eq.rs:135:43: 135:46
        _41 = Bar::<[u32; 1]> { x: move _42 }; // scope 8 at ui/consts/const_let_eq.rs:135:34: 135:48
        _43 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:136:11: 136:12
        _44 = CheckedMul((_41.0: [u32; 1])[_43], const 2_u32); // scope 9 at ui/consts/const_let_eq.rs:136:5: 136:18
        assert(!move (_44.1: bool), "attempt to compute `{} * {}`, which would overflow", (_41.0: [u32; 1])[_43], const 2_u32) -> bb14; // scope 9 at ui/consts/const_let_eq.rs:136:5: 136:18
    }

    bb14: {
        (_41.0: [u32; 1])[_43] = move (_44.0: u32); // scope 9 at ui/consts/const_let_eq.rs:136:5: 136:18
        _46 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:137:16: 137:17
        _45 = (_41.0: [u32; 1])[_46];    // scope 9 at ui/consts/const_let_eq.rs:137:10: 137:18
        _47 = CheckedMul(_0, _45);       // scope 9 at ui/consts/const_let_eq.rs:137:5: 137:18
        assert(!move (_47.1: bool), "attempt to compute `{} * {}`, which would overflow", _0, move _45) -> bb15; // scope 9 at ui/consts/const_let_eq.rs:137:5: 137:18
    }

    bb15: {
        _0 = move (_47.0: u32);          // scope 9 at ui/consts/const_let_eq.rs:137:5: 137:18
        return;                          // scope 0 at ui/consts/const_let_eq.rs:141:2: 141:2
    }
}

// MIR FOR CTFE
fn mul_assign(_1: A) -> u32 {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const_let_eq.rs:102:36: 102:39
    let _2: u32;                         // in scope 0 at ui/consts/const_let_eq.rs:102:25: 102:26
    let mut _4: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:104:22: 104:23
    let mut _5: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:104:22: 104:27
    let mut _6: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:105:5: 105:11
    let _8: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:110:9: 110:10
    let mut _9: usize;                   // in scope 0 at ui/consts/const_let_eq.rs:110:5: 110:11
    let mut _10: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:110:5: 110:11
    let mut _11: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:110:5: 110:16
    let mut _12: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:111:10: 111:16
    let _13: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:111:14: 111:15
    let mut _14: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:111:10: 111:16
    let mut _15: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:111:10: 111:16
    let mut _16: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:111:5: 111:16
    let mut _19: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:117:5: 117:15
    let mut _20: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:118:5: 118:15
    let mut _21: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:119:10: 119:23
    let mut _22: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:119:10: 119:15
    let mut _23: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:119:18: 119:23
    let mut _24: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:119:10: 119:23
    let mut _25: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:119:5: 119:23
    let mut _27: Foo<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:123:35: 123:41
    let _28: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:124:9: 124:10
    let mut _29: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:124:5: 124:11
    let mut _30: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:124:5: 124:11
    let mut _31: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:124:5: 124:18
    let mut _32: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:125:10: 125:18
    let _33: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:125:14: 125:15
    let mut _34: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:125:10: 125:16
    let mut _35: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:125:10: 125:16
    let mut _36: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:125:5: 125:18
    let mut _38: Bar<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:126:35: 126:47
    let _39: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:127:9: 127:10
    let mut _40: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:127:5: 127:11
    let mut _41: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:127:5: 127:11
    let mut _42: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:127:5: 127:18
    let mut _43: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:128:10: 128:18
    let _44: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:128:14: 128:15
    let mut _45: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:128:10: 128:16
    let mut _46: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:128:10: 128:16
    let mut _47: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:128:5: 128:18
    let mut _49: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:132:38: 132:41
    let _50: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:133:13: 133:14
    let mut _51: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:133:5: 133:15
    let mut _52: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:133:5: 133:15
    let mut _53: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:133:5: 133:20
    let mut _54: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:134:10: 134:20
    let _55: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:134:18: 134:19
    let mut _56: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:134:10: 134:20
    let mut _57: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:134:10: 134:20
    let mut _58: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:134:5: 134:20
    let mut _60: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:135:43: 135:46
    let _61: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:136:11: 136:12
    let mut _62: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:136:5: 136:13
    let mut _63: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:136:5: 136:13
    let mut _64: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:136:5: 136:18
    let mut _65: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:137:10: 137:18
    let _66: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:137:16: 137:17
    let mut _67: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:137:10: 137:18
    let mut _68: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:137:10: 137:18
    let mut _69: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:137:5: 137:18
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq.rs:102:25: 102:26
        let mut _3: u32;                 // in scope 1 at ui/consts/const_let_eq.rs:104:9: 104:14
        scope 2 {
            debug d => _3;               // in scope 2 at ui/consts/const_let_eq.rs:104:9: 104:14
            let mut _7: [u32; 1];        // in scope 2 at ui/consts/const_let_eq.rs:109:9: 109:16
            scope 3 {
                debug arr => _7;         // in scope 3 at ui/consts/const_let_eq.rs:109:9: 109:16
                let mut _17: Foo<u32>;   // in scope 3 at ui/consts/const_let_eq.rs:115:9: 115:16
                scope 4 {
                    debug foo => _17;    // in scope 4 at ui/consts/const_let_eq.rs:115:9: 115:16
                    let mut _18: Bar<u32>; // in scope 4 at ui/consts/const_let_eq.rs:116:9: 116:16
                    scope 5 {
                        debug bar => _18; // in scope 5 at ui/consts/const_let_eq.rs:116:9: 116:16
                        let mut _26: [Foo<u32>; 1]; // in scope 5 at ui/consts/const_let_eq.rs:123:9: 123:16
                        scope 6 {
                            debug arr => _26; // in scope 6 at ui/consts/const_let_eq.rs:123:9: 123:16
                            let mut _37: [Bar<u32>; 1]; // in scope 6 at ui/consts/const_let_eq.rs:126:9: 126:16
                            scope 7 {
                                debug arr => _37; // in scope 7 at ui/consts/const_let_eq.rs:126:9: 126:16
                                let mut _48: Foo<[u32; 1]>; // in scope 7 at ui/consts/const_let_eq.rs:132:9: 132:16
                                scope 8 {
                                    debug arr => _48; // in scope 8 at ui/consts/const_let_eq.rs:132:9: 132:16
                                    let mut _59: Bar<[u32; 1]>; // in scope 8 at ui/consts/const_let_eq.rs:135:9: 135:16
                                    scope 9 {
                                        debug arr => _59; // in scope 9 at ui/consts/const_let_eq.rs:135:9: 135:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const_let_eq.rs:102:25: 102:26
        _2 = (_1.0: u32);                // scope 0 at ui/consts/const_let_eq.rs:102:25: 102:26
        StorageLive(_3);                 // scope 1 at ui/consts/const_let_eq.rs:104:9: 104:14
        StorageLive(_4);                 // scope 1 at ui/consts/const_let_eq.rs:104:22: 104:23
        _4 = _2;                         // scope 1 at ui/consts/const_let_eq.rs:104:22: 104:23
        _5 = CheckedAdd(_4, const 1_u32); // scope 1 at ui/consts/const_let_eq.rs:104:22: 104:27
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, const 1_u32) -> bb1; // scope 1 at ui/consts/const_let_eq.rs:104:22: 104:27
    }

    bb1: {
        _3 = move (_5.0: u32);           // scope 1 at ui/consts/const_let_eq.rs:104:22: 104:27
        StorageDead(_4);                 // scope 1 at ui/consts/const_let_eq.rs:104:26: 104:27
        _6 = CheckedMul(_3, const 2_u32); // scope 2 at ui/consts/const_let_eq.rs:105:5: 105:11
        assert(!move (_6.1: bool), "attempt to compute `{} * {}`, which would overflow", _3, const 2_u32) -> bb2; // scope 2 at ui/consts/const_let_eq.rs:105:5: 105:11
    }

    bb2: {
        _3 = move (_6.0: u32);           // scope 2 at ui/consts/const_let_eq.rs:105:5: 105:11
        StorageLive(_7);                 // scope 2 at ui/consts/const_let_eq.rs:109:9: 109:16
        _7 = [const 1_u32];              // scope 2 at ui/consts/const_let_eq.rs:109:29: 109:32
        StorageLive(_8);                 // scope 3 at ui/consts/const_let_eq.rs:110:9: 110:10
        _8 = const 0_usize;              // scope 3 at ui/consts/const_let_eq.rs:110:9: 110:10
        _9 = Len(_7);                    // scope 3 at ui/consts/const_let_eq.rs:110:5: 110:11
        _10 = Lt(_8, _9);                // scope 3 at ui/consts/const_let_eq.rs:110:5: 110:11
        assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _8) -> bb3; // scope 3 at ui/consts/const_let_eq.rs:110:5: 110:11
    }

    bb3: {
        _11 = CheckedMul(_7[_8], const 2_u32); // scope 3 at ui/consts/const_let_eq.rs:110:5: 110:16
        assert(!move (_11.1: bool), "attempt to compute `{} * {}`, which would overflow", _7[_8], const 2_u32) -> bb4; // scope 3 at ui/consts/const_let_eq.rs:110:5: 110:16
    }

    bb4: {
        _7[_8] = move (_11.0: u32);      // scope 3 at ui/consts/const_let_eq.rs:110:5: 110:16
        StorageDead(_8);                 // scope 3 at ui/consts/const_let_eq.rs:110:16: 110:17
        StorageLive(_12);                // scope 3 at ui/consts/const_let_eq.rs:111:10: 111:16
        StorageLive(_13);                // scope 3 at ui/consts/const_let_eq.rs:111:14: 111:15
        _13 = const 0_usize;             // scope 3 at ui/consts/const_let_eq.rs:111:14: 111:15
        _14 = Len(_7);                   // scope 3 at ui/consts/const_let_eq.rs:111:10: 111:16
        _15 = Lt(_13, _14);              // scope 3 at ui/consts/const_let_eq.rs:111:10: 111:16
        assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _13) -> bb5; // scope 3 at ui/consts/const_let_eq.rs:111:10: 111:16
    }

    bb5: {
        _12 = _7[_13];                   // scope 3 at ui/consts/const_let_eq.rs:111:10: 111:16
        _16 = CheckedMul(_3, _12);       // scope 3 at ui/consts/const_let_eq.rs:111:5: 111:16
        assert(!move (_16.1: bool), "attempt to compute `{} * {}`, which would overflow", _3, move _12) -> bb6; // scope 3 at ui/consts/const_let_eq.rs:111:5: 111:16
    }

    bb6: {
        _3 = move (_16.0: u32);          // scope 3 at ui/consts/const_let_eq.rs:111:5: 111:16
        StorageDead(_12);                // scope 3 at ui/consts/const_let_eq.rs:111:15: 111:16
        StorageDead(_13);                // scope 3 at ui/consts/const_let_eq.rs:111:16: 111:17
        StorageLive(_17);                // scope 3 at ui/consts/const_let_eq.rs:115:9: 115:16
        _17 = Foo::<u32>(const 1_u32);   // scope 3 at ui/consts/const_let_eq.rs:115:29: 115:35
        StorageLive(_18);                // scope 4 at ui/consts/const_let_eq.rs:116:9: 116:16
        _18 = Bar::<u32> { x: const 1_u32 }; // scope 4 at ui/consts/const_let_eq.rs:116:29: 116:41
        _19 = CheckedMul((_17.0: u32), const 2_u32); // scope 5 at ui/consts/const_let_eq.rs:117:5: 117:15
        assert(!move (_19.1: bool), "attempt to compute `{} * {}`, which would overflow", (_17.0: u32), const 2_u32) -> bb7; // scope 5 at ui/consts/const_let_eq.rs:117:5: 117:15
    }

    bb7: {
        (_17.0: u32) = move (_19.0: u32); // scope 5 at ui/consts/const_let_eq.rs:117:5: 117:15
        _20 = CheckedMul((_18.0: u32), const 2_u32); // scope 5 at ui/consts/const_let_eq.rs:118:5: 118:15
        assert(!move (_20.1: bool), "attempt to compute `{} * {}`, which would overflow", (_18.0: u32), const 2_u32) -> bb8; // scope 5 at ui/consts/const_let_eq.rs:118:5: 118:15
    }

    bb8: {
        (_18.0: u32) = move (_20.0: u32); // scope 5 at ui/consts/const_let_eq.rs:118:5: 118:15
        StorageLive(_21);                // scope 5 at ui/consts/const_let_eq.rs:119:10: 119:23
        StorageLive(_22);                // scope 5 at ui/consts/const_let_eq.rs:119:10: 119:15
        _22 = (_17.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:119:10: 119:15
        StorageLive(_23);                // scope 5 at ui/consts/const_let_eq.rs:119:18: 119:23
        _23 = (_18.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:119:18: 119:23
        _24 = CheckedAdd(_22, _23);      // scope 5 at ui/consts/const_let_eq.rs:119:10: 119:23
        assert(!move (_24.1: bool), "attempt to compute `{} + {}`, which would overflow", move _22, move _23) -> bb9; // scope 5 at ui/consts/const_let_eq.rs:119:10: 119:23
    }

    bb9: {
        _21 = move (_24.0: u32);         // scope 5 at ui/consts/const_let_eq.rs:119:10: 119:23
        StorageDead(_23);                // scope 5 at ui/consts/const_let_eq.rs:119:22: 119:23
        StorageDead(_22);                // scope 5 at ui/consts/const_let_eq.rs:119:22: 119:23
        _25 = CheckedMul(_3, _21);       // scope 5 at ui/consts/const_let_eq.rs:119:5: 119:23
        assert(!move (_25.1: bool), "attempt to compute `{} * {}`, which would overflow", _3, move _21) -> bb10; // scope 5 at ui/consts/const_let_eq.rs:119:5: 119:23
    }

    bb10: {
        _3 = move (_25.0: u32);          // scope 5 at ui/consts/const_let_eq.rs:119:5: 119:23
        StorageDead(_21);                // scope 5 at ui/consts/const_let_eq.rs:119:22: 119:23
        StorageLive(_26);                // scope 5 at ui/consts/const_let_eq.rs:123:9: 123:16
        StorageLive(_27);                // scope 5 at ui/consts/const_let_eq.rs:123:35: 123:41
        _27 = Foo::<u32>(const 1_u32);   // scope 5 at ui/consts/const_let_eq.rs:123:35: 123:41
        _26 = [move _27];                // scope 5 at ui/consts/const_let_eq.rs:123:34: 123:42
        StorageDead(_27);                // scope 5 at ui/consts/const_let_eq.rs:123:41: 123:42
        StorageLive(_28);                // scope 6 at ui/consts/const_let_eq.rs:124:9: 124:10
        _28 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:124:9: 124:10
        _29 = Len(_26);                  // scope 6 at ui/consts/const_let_eq.rs:124:5: 124:11
        _30 = Lt(_28, _29);              // scope 6 at ui/consts/const_let_eq.rs:124:5: 124:11
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> bb11; // scope 6 at ui/consts/const_let_eq.rs:124:5: 124:11
    }

    bb11: {
        _31 = CheckedMul((_26[_28].0: u32), const 2_u32); // scope 6 at ui/consts/const_let_eq.rs:124:5: 124:18
        assert(!move (_31.1: bool), "attempt to compute `{} * {}`, which would overflow", (_26[_28].0: u32), const 2_u32) -> bb12; // scope 6 at ui/consts/const_let_eq.rs:124:5: 124:18
    }

    bb12: {
        (_26[_28].0: u32) = move (_31.0: u32); // scope 6 at ui/consts/const_let_eq.rs:124:5: 124:18
        StorageDead(_28);                // scope 6 at ui/consts/const_let_eq.rs:124:18: 124:19
        StorageLive(_32);                // scope 6 at ui/consts/const_let_eq.rs:125:10: 125:18
        StorageLive(_33);                // scope 6 at ui/consts/const_let_eq.rs:125:14: 125:15
        _33 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:125:14: 125:15
        _34 = Len(_26);                  // scope 6 at ui/consts/const_let_eq.rs:125:10: 125:16
        _35 = Lt(_33, _34);              // scope 6 at ui/consts/const_let_eq.rs:125:10: 125:16
        assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _33) -> bb13; // scope 6 at ui/consts/const_let_eq.rs:125:10: 125:16
    }

    bb13: {
        _32 = (_26[_33].0: u32);         // scope 6 at ui/consts/const_let_eq.rs:125:10: 125:18
        _36 = CheckedMul(_3, _32);       // scope 6 at ui/consts/const_let_eq.rs:125:5: 125:18
        assert(!move (_36.1: bool), "attempt to compute `{} * {}`, which would overflow", _3, move _32) -> bb14; // scope 6 at ui/consts/const_let_eq.rs:125:5: 125:18
    }

    bb14: {
        _3 = move (_36.0: u32);          // scope 6 at ui/consts/const_let_eq.rs:125:5: 125:18
        StorageDead(_32);                // scope 6 at ui/consts/const_let_eq.rs:125:17: 125:18
        StorageDead(_33);                // scope 6 at ui/consts/const_let_eq.rs:125:18: 125:19
        StorageLive(_37);                // scope 6 at ui/consts/const_let_eq.rs:126:9: 126:16
        StorageLive(_38);                // scope 6 at ui/consts/const_let_eq.rs:126:35: 126:47
        _38 = Bar::<u32> { x: const 1_u32 }; // scope 6 at ui/consts/const_let_eq.rs:126:35: 126:47
        _37 = [move _38];                // scope 6 at ui/consts/const_let_eq.rs:126:34: 126:48
        StorageDead(_38);                // scope 6 at ui/consts/const_let_eq.rs:126:47: 126:48
        StorageLive(_39);                // scope 7 at ui/consts/const_let_eq.rs:127:9: 127:10
        _39 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:127:9: 127:10
        _40 = Len(_37);                  // scope 7 at ui/consts/const_let_eq.rs:127:5: 127:11
        _41 = Lt(_39, _40);              // scope 7 at ui/consts/const_let_eq.rs:127:5: 127:11
        assert(move _41, "index out of bounds: the length is {} but the index is {}", move _40, _39) -> bb15; // scope 7 at ui/consts/const_let_eq.rs:127:5: 127:11
    }

    bb15: {
        _42 = CheckedMul((_37[_39].0: u32), const 2_u32); // scope 7 at ui/consts/const_let_eq.rs:127:5: 127:18
        assert(!move (_42.1: bool), "attempt to compute `{} * {}`, which would overflow", (_37[_39].0: u32), const 2_u32) -> bb16; // scope 7 at ui/consts/const_let_eq.rs:127:5: 127:18
    }

    bb16: {
        (_37[_39].0: u32) = move (_42.0: u32); // scope 7 at ui/consts/const_let_eq.rs:127:5: 127:18
        StorageDead(_39);                // scope 7 at ui/consts/const_let_eq.rs:127:18: 127:19
        StorageLive(_43);                // scope 7 at ui/consts/const_let_eq.rs:128:10: 128:18
        StorageLive(_44);                // scope 7 at ui/consts/const_let_eq.rs:128:14: 128:15
        _44 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:128:14: 128:15
        _45 = Len(_37);                  // scope 7 at ui/consts/const_let_eq.rs:128:10: 128:16
        _46 = Lt(_44, _45);              // scope 7 at ui/consts/const_let_eq.rs:128:10: 128:16
        assert(move _46, "index out of bounds: the length is {} but the index is {}", move _45, _44) -> bb17; // scope 7 at ui/consts/const_let_eq.rs:128:10: 128:16
    }

    bb17: {
        _43 = (_37[_44].0: u32);         // scope 7 at ui/consts/const_let_eq.rs:128:10: 128:18
        _47 = CheckedMul(_3, _43);       // scope 7 at ui/consts/const_let_eq.rs:128:5: 128:18
        assert(!move (_47.1: bool), "attempt to compute `{} * {}`, which would overflow", _3, move _43) -> bb18; // scope 7 at ui/consts/const_let_eq.rs:128:5: 128:18
    }

    bb18: {
        _3 = move (_47.0: u32);          // scope 7 at ui/consts/const_let_eq.rs:128:5: 128:18
        StorageDead(_43);                // scope 7 at ui/consts/const_let_eq.rs:128:17: 128:18
        StorageDead(_44);                // scope 7 at ui/consts/const_let_eq.rs:128:18: 128:19
        StorageLive(_48);                // scope 7 at ui/consts/const_let_eq.rs:132:9: 132:16
        StorageLive(_49);                // scope 7 at ui/consts/const_let_eq.rs:132:38: 132:41
        _49 = [const 1_u32];             // scope 7 at ui/consts/const_let_eq.rs:132:38: 132:41
        _48 = Foo::<[u32; 1]>(move _49); // scope 7 at ui/consts/const_let_eq.rs:132:34: 132:42
        StorageDead(_49);                // scope 7 at ui/consts/const_let_eq.rs:132:41: 132:42
        StorageLive(_50);                // scope 8 at ui/consts/const_let_eq.rs:133:13: 133:14
        _50 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:133:13: 133:14
        _51 = Len((_48.0: [u32; 1]));    // scope 8 at ui/consts/const_let_eq.rs:133:5: 133:15
        _52 = Lt(_50, _51);              // scope 8 at ui/consts/const_let_eq.rs:133:5: 133:15
        assert(move _52, "index out of bounds: the length is {} but the index is {}", move _51, _50) -> bb19; // scope 8 at ui/consts/const_let_eq.rs:133:5: 133:15
    }

    bb19: {
        _53 = CheckedMul((_48.0: [u32; 1])[_50], const 2_u32); // scope 8 at ui/consts/const_let_eq.rs:133:5: 133:20
        assert(!move (_53.1: bool), "attempt to compute `{} * {}`, which would overflow", (_48.0: [u32; 1])[_50], const 2_u32) -> bb20; // scope 8 at ui/consts/const_let_eq.rs:133:5: 133:20
    }

    bb20: {
        (_48.0: [u32; 1])[_50] = move (_53.0: u32); // scope 8 at ui/consts/const_let_eq.rs:133:5: 133:20
        StorageDead(_50);                // scope 8 at ui/consts/const_let_eq.rs:133:20: 133:21
        StorageLive(_54);                // scope 8 at ui/consts/const_let_eq.rs:134:10: 134:20
        StorageLive(_55);                // scope 8 at ui/consts/const_let_eq.rs:134:18: 134:19
        _55 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:134:18: 134:19
        _56 = Len((_48.0: [u32; 1]));    // scope 8 at ui/consts/const_let_eq.rs:134:10: 134:20
        _57 = Lt(_55, _56);              // scope 8 at ui/consts/const_let_eq.rs:134:10: 134:20
        assert(move _57, "index out of bounds: the length is {} but the index is {}", move _56, _55) -> bb21; // scope 8 at ui/consts/const_let_eq.rs:134:10: 134:20
    }

    bb21: {
        _54 = (_48.0: [u32; 1])[_55];    // scope 8 at ui/consts/const_let_eq.rs:134:10: 134:20
        _58 = CheckedMul(_3, _54);       // scope 8 at ui/consts/const_let_eq.rs:134:5: 134:20
        assert(!move (_58.1: bool), "attempt to compute `{} * {}`, which would overflow", _3, move _54) -> bb22; // scope 8 at ui/consts/const_let_eq.rs:134:5: 134:20
    }

    bb22: {
        _3 = move (_58.0: u32);          // scope 8 at ui/consts/const_let_eq.rs:134:5: 134:20
        StorageDead(_54);                // scope 8 at ui/consts/const_let_eq.rs:134:19: 134:20
        StorageDead(_55);                // scope 8 at ui/consts/const_let_eq.rs:134:20: 134:21
        StorageLive(_59);                // scope 8 at ui/consts/const_let_eq.rs:135:9: 135:16
        StorageLive(_60);                // scope 8 at ui/consts/const_let_eq.rs:135:43: 135:46
        _60 = [const 1_u32];             // scope 8 at ui/consts/const_let_eq.rs:135:43: 135:46
        _59 = Bar::<[u32; 1]> { x: move _60 }; // scope 8 at ui/consts/const_let_eq.rs:135:34: 135:48
        StorageDead(_60);                // scope 8 at ui/consts/const_let_eq.rs:135:47: 135:48
        StorageLive(_61);                // scope 9 at ui/consts/const_let_eq.rs:136:11: 136:12
        _61 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:136:11: 136:12
        _62 = Len((_59.0: [u32; 1]));    // scope 9 at ui/consts/const_let_eq.rs:136:5: 136:13
        _63 = Lt(_61, _62);              // scope 9 at ui/consts/const_let_eq.rs:136:5: 136:13
        assert(move _63, "index out of bounds: the length is {} but the index is {}", move _62, _61) -> bb23; // scope 9 at ui/consts/const_let_eq.rs:136:5: 136:13
    }

    bb23: {
        _64 = CheckedMul((_59.0: [u32; 1])[_61], const 2_u32); // scope 9 at ui/consts/const_let_eq.rs:136:5: 136:18
        assert(!move (_64.1: bool), "attempt to compute `{} * {}`, which would overflow", (_59.0: [u32; 1])[_61], const 2_u32) -> bb24; // scope 9 at ui/consts/const_let_eq.rs:136:5: 136:18
    }

    bb24: {
        (_59.0: [u32; 1])[_61] = move (_64.0: u32); // scope 9 at ui/consts/const_let_eq.rs:136:5: 136:18
        StorageDead(_61);                // scope 9 at ui/consts/const_let_eq.rs:136:18: 136:19
        StorageLive(_65);                // scope 9 at ui/consts/const_let_eq.rs:137:10: 137:18
        StorageLive(_66);                // scope 9 at ui/consts/const_let_eq.rs:137:16: 137:17
        _66 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:137:16: 137:17
        _67 = Len((_59.0: [u32; 1]));    // scope 9 at ui/consts/const_let_eq.rs:137:10: 137:18
        _68 = Lt(_66, _67);              // scope 9 at ui/consts/const_let_eq.rs:137:10: 137:18
        assert(move _68, "index out of bounds: the length is {} but the index is {}", move _67, _66) -> bb25; // scope 9 at ui/consts/const_let_eq.rs:137:10: 137:18
    }

    bb25: {
        _65 = (_59.0: [u32; 1])[_66];    // scope 9 at ui/consts/const_let_eq.rs:137:10: 137:18
        _69 = CheckedMul(_3, _65);       // scope 9 at ui/consts/const_let_eq.rs:137:5: 137:18
        assert(!move (_69.1: bool), "attempt to compute `{} * {}`, which would overflow", _3, move _65) -> bb26; // scope 9 at ui/consts/const_let_eq.rs:137:5: 137:18
    }

    bb26: {
        _3 = move (_69.0: u32);          // scope 9 at ui/consts/const_let_eq.rs:137:5: 137:18
        StorageDead(_65);                // scope 9 at ui/consts/const_let_eq.rs:137:17: 137:18
        StorageDead(_66);                // scope 9 at ui/consts/const_let_eq.rs:137:18: 137:19
        _0 = _3;                         // scope 9 at ui/consts/const_let_eq.rs:140:5: 140:6
        StorageDead(_59);                // scope 8 at ui/consts/const_let_eq.rs:141:1: 141:2
        StorageDead(_48);                // scope 7 at ui/consts/const_let_eq.rs:141:1: 141:2
        StorageDead(_37);                // scope 6 at ui/consts/const_let_eq.rs:141:1: 141:2
        StorageDead(_26);                // scope 5 at ui/consts/const_let_eq.rs:141:1: 141:2
        StorageDead(_18);                // scope 4 at ui/consts/const_let_eq.rs:141:1: 141:2
        StorageDead(_17);                // scope 3 at ui/consts/const_let_eq.rs:141:1: 141:2
        StorageDead(_7);                 // scope 2 at ui/consts/const_let_eq.rs:141:1: 141:2
        StorageDead(_3);                 // scope 1 at ui/consts/const_let_eq.rs:141:1: 141:2
        StorageDead(_2);                 // scope 0 at ui/consts/const_let_eq.rs:141:1: 141:2
        return;                          // scope 0 at ui/consts/const_let_eq.rs:141:2: 141:2
    }
}

mul_assign::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:109:24: 109:25

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:109:24: 109:25
        return;                          // scope 0 at ui/consts/const_let_eq.rs:109:24: 109:25
    }
}

mul_assign::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:123:29: 123:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:123:29: 123:30
        return;                          // scope 0 at ui/consts/const_let_eq.rs:123:29: 123:30
    }
}

mul_assign::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:126:29: 126:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:126:29: 126:30
        return;                          // scope 0 at ui/consts/const_let_eq.rs:126:29: 126:30
    }
}

mul_assign::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:132:28: 132:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:132:28: 132:29
        return;                          // scope 0 at ui/consts/const_let_eq.rs:132:28: 132:29
    }
}

mul_assign::{constant#4}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:135:28: 135:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:135:28: 135:29
        return;                          // scope 0 at ui/consts/const_let_eq.rs:135:28: 135:29
    }
}

fn div_assign(_1: [u32; 1]) -> u32 {
    debug a => _1;                       // in scope 0 at ui/consts/const_let_eq.rs:143:21: 143:22
    let _2: u32;                         // in scope 0 at ui/consts/const_let_eq.rs:144:9: 144:10
    let _3: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:144:15: 144:16
    let mut _4: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:146:29: 146:30
    let mut _5: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:146:22: 146:30
    let _7: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:152:9: 152:10
    let mut _8: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:153:10: 153:16
    let _9: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:153:14: 153:15
    let mut _10: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:153:5: 153:16
    let mut _13: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:161:10: 161:15
    let mut _14: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:161:5: 161:15
    let mut _15: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:162:10: 162:15
    let mut _16: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:162:5: 162:15
    let mut _18: Foo<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:166:35: 166:41
    let _19: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:167:9: 167:10
    let mut _20: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:168:10: 168:18
    let _21: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:168:14: 168:15
    let mut _22: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:168:5: 168:18
    let mut _24: Bar<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:169:35: 169:47
    let _25: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:170:9: 170:10
    let mut _26: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:171:10: 171:18
    let _27: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:171:14: 171:15
    let mut _28: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:171:5: 171:18
    let mut _30: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:175:38: 175:41
    let _31: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:176:13: 176:14
    let mut _32: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:177:10: 177:20
    let _33: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:177:18: 177:19
    let mut _34: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:177:5: 177:20
    let mut _36: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:178:43: 178:46
    let _37: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:179:11: 179:12
    let mut _38: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:180:10: 180:18
    let _39: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:180:16: 180:17
    let mut _40: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:180:5: 180:18
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq.rs:144:9: 144:10
        let mut _0: u32;                 // return place in scope 1 at ui/consts/const_let_eq.rs:146:9: 146:14
        scope 2 {
            debug d => _0;               // in scope 2 at ui/consts/const_let_eq.rs:146:9: 146:14
            let mut _6: [u32; 1];        // in scope 2 at ui/consts/const_let_eq.rs:151:9: 151:16
            scope 3 {
                debug arr => _6;         // in scope 3 at ui/consts/const_let_eq.rs:151:9: 151:16
                let mut _11: Foo<u32>;   // in scope 3 at ui/consts/const_let_eq.rs:157:9: 157:16
                scope 4 {
                    debug foo => _11;    // in scope 4 at ui/consts/const_let_eq.rs:157:9: 157:16
                    let mut _12: Bar<u32>; // in scope 4 at ui/consts/const_let_eq.rs:158:9: 158:16
                    scope 5 {
                        debug bar => _12; // in scope 5 at ui/consts/const_let_eq.rs:158:9: 158:16
                        let mut _17: [Foo<u32>; 1]; // in scope 5 at ui/consts/const_let_eq.rs:166:9: 166:16
                        scope 6 {
                            debug arr => _17; // in scope 6 at ui/consts/const_let_eq.rs:166:9: 166:16
                            let mut _23: [Bar<u32>; 1]; // in scope 6 at ui/consts/const_let_eq.rs:169:9: 169:16
                            scope 7 {
                                debug arr => _23; // in scope 7 at ui/consts/const_let_eq.rs:169:9: 169:16
                                let mut _29: Foo<[u32; 1]>; // in scope 7 at ui/consts/const_let_eq.rs:175:9: 175:16
                                scope 8 {
                                    debug arr => _29; // in scope 8 at ui/consts/const_let_eq.rs:175:9: 175:16
                                    let mut _35: Bar<[u32; 1]>; // in scope 8 at ui/consts/const_let_eq.rs:178:9: 178:16
                                    scope 9 {
                                        debug arr => _35; // in scope 9 at ui/consts/const_let_eq.rs:178:9: 178:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = const 0_usize;              // scope 0 at ui/consts/const_let_eq.rs:144:15: 144:16
        _2 = _1[_3];                     // scope 0 at ui/consts/const_let_eq.rs:144:13: 144:17
        _4 = _2;                         // scope 1 at ui/consts/const_let_eq.rs:146:29: 146:30
        _5 = CheckedMul(const 1024_u32, _4); // scope 1 at ui/consts/const_let_eq.rs:146:22: 146:30
        assert(!move (_5.1: bool), "attempt to compute `{} * {}`, which would overflow", const 1024_u32, move _4) -> bb1; // scope 1 at ui/consts/const_let_eq.rs:146:22: 146:30
    }

    bb1: {
        _0 = move (_5.0: u32);           // scope 1 at ui/consts/const_let_eq.rs:146:22: 146:30
        _0 = Div(_0, const 2_u32);       // scope 2 at ui/consts/const_let_eq.rs:147:5: 147:11
        _6 = [const 4_u32];              // scope 2 at ui/consts/const_let_eq.rs:151:29: 151:32
        _7 = const 0_usize;              // scope 3 at ui/consts/const_let_eq.rs:152:9: 152:10
        _6[_7] = Div(_6[_7], const 2_u32); // scope 3 at ui/consts/const_let_eq.rs:152:5: 152:16
        _9 = const 0_usize;              // scope 3 at ui/consts/const_let_eq.rs:153:14: 153:15
        _8 = _6[_9];                     // scope 3 at ui/consts/const_let_eq.rs:153:10: 153:16
        _10 = Eq(_8, const 0_u32);       // scope 3 at ui/consts/const_let_eq.rs:153:5: 153:16
        assert(!move _10, "attempt to divide `{}` by zero", _0) -> bb2; // scope 3 at ui/consts/const_let_eq.rs:153:5: 153:16
    }

    bb2: {
        _0 = Div(_0, move _8);           // scope 3 at ui/consts/const_let_eq.rs:153:5: 153:16
        _11 = const Foo::<u32>(4_u32);   // scope 3 at ui/consts/const_let_eq.rs:157:29: 157:35
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:157:29: 157:35
                                         // + literal: Const { ty: Foo<u32>, val: Value(Scalar(0x00000004)) }
        _12 = const Bar::<u32> {{ x: 4_u32 }}; // scope 4 at ui/consts/const_let_eq.rs:158:29: 158:41
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:158:29: 158:41
                                         // + literal: Const { ty: Bar<u32>, val: Value(Scalar(0x00000004)) }
        (_11.0: u32) = Div((_11.0: u32), const 2_u32); // scope 5 at ui/consts/const_let_eq.rs:159:5: 159:15
        (_12.0: u32) = Div((_12.0: u32), const 2_u32); // scope 5 at ui/consts/const_let_eq.rs:160:5: 160:15
        _13 = (_11.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:161:10: 161:15
        _14 = Eq(_13, const 0_u32);      // scope 5 at ui/consts/const_let_eq.rs:161:5: 161:15
        assert(!move _14, "attempt to divide `{}` by zero", _0) -> bb3; // scope 5 at ui/consts/const_let_eq.rs:161:5: 161:15
    }

    bb3: {
        _0 = Div(_0, move _13);          // scope 5 at ui/consts/const_let_eq.rs:161:5: 161:15
        _15 = (_12.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:162:10: 162:15
        _16 = Eq(_15, const 0_u32);      // scope 5 at ui/consts/const_let_eq.rs:162:5: 162:15
        assert(!move _16, "attempt to divide `{}` by zero", _0) -> bb4; // scope 5 at ui/consts/const_let_eq.rs:162:5: 162:15
    }

    bb4: {
        _0 = Div(_0, move _15);          // scope 5 at ui/consts/const_let_eq.rs:162:5: 162:15
        _18 = const Foo::<u32>(4_u32);   // scope 5 at ui/consts/const_let_eq.rs:166:35: 166:41
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:166:35: 166:41
                                         // + literal: Const { ty: Foo<u32>, val: Value(Scalar(0x00000004)) }
        _17 = [move _18];                // scope 5 at ui/consts/const_let_eq.rs:166:34: 166:42
        _19 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:167:9: 167:10
        (_17[_19].0: u32) = Div((_17[_19].0: u32), const 2_u32); // scope 6 at ui/consts/const_let_eq.rs:167:5: 167:18
        _21 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:168:14: 168:15
        _20 = (_17[_21].0: u32);         // scope 6 at ui/consts/const_let_eq.rs:168:10: 168:18
        _22 = Eq(_20, const 0_u32);      // scope 6 at ui/consts/const_let_eq.rs:168:5: 168:18
        assert(!move _22, "attempt to divide `{}` by zero", _0) -> bb5; // scope 6 at ui/consts/const_let_eq.rs:168:5: 168:18
    }

    bb5: {
        _0 = Div(_0, move _20);          // scope 6 at ui/consts/const_let_eq.rs:168:5: 168:18
        _24 = const Bar::<u32> {{ x: 4_u32 }}; // scope 6 at ui/consts/const_let_eq.rs:169:35: 169:47
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:169:35: 169:47
                                         // + literal: Const { ty: Bar<u32>, val: Value(Scalar(0x00000004)) }
        _23 = [move _24];                // scope 6 at ui/consts/const_let_eq.rs:169:34: 169:48
        _25 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:170:9: 170:10
        (_23[_25].0: u32) = Div((_23[_25].0: u32), const 2_u32); // scope 7 at ui/consts/const_let_eq.rs:170:5: 170:18
        _27 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:171:14: 171:15
        _26 = (_23[_27].0: u32);         // scope 7 at ui/consts/const_let_eq.rs:171:10: 171:18
        _28 = Eq(_26, const 0_u32);      // scope 7 at ui/consts/const_let_eq.rs:171:5: 171:18
        assert(!move _28, "attempt to divide `{}` by zero", _0) -> bb6; // scope 7 at ui/consts/const_let_eq.rs:171:5: 171:18
    }

    bb6: {
        _0 = Div(_0, move _26);          // scope 7 at ui/consts/const_let_eq.rs:171:5: 171:18
        _30 = [const 4_u32];             // scope 7 at ui/consts/const_let_eq.rs:175:38: 175:41
        _29 = Foo::<[u32; 1]>(move _30); // scope 7 at ui/consts/const_let_eq.rs:175:34: 175:42
        _31 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:176:13: 176:14
        (_29.0: [u32; 1])[_31] = Div((_29.0: [u32; 1])[_31], const 2_u32); // scope 8 at ui/consts/const_let_eq.rs:176:5: 176:20
        _33 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:177:18: 177:19
        _32 = (_29.0: [u32; 1])[_33];    // scope 8 at ui/consts/const_let_eq.rs:177:10: 177:20
        _34 = Eq(_32, const 0_u32);      // scope 8 at ui/consts/const_let_eq.rs:177:5: 177:20
        assert(!move _34, "attempt to divide `{}` by zero", _0) -> bb7; // scope 8 at ui/consts/const_let_eq.rs:177:5: 177:20
    }

    bb7: {
        _0 = Div(_0, move _32);          // scope 8 at ui/consts/const_let_eq.rs:177:5: 177:20
        _36 = [const 4_u32];             // scope 8 at ui/consts/const_let_eq.rs:178:43: 178:46
        _35 = Bar::<[u32; 1]> { x: move _36 }; // scope 8 at ui/consts/const_let_eq.rs:178:34: 178:48
        _37 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:179:11: 179:12
        (_35.0: [u32; 1])[_37] = Div((_35.0: [u32; 1])[_37], const 2_u32); // scope 9 at ui/consts/const_let_eq.rs:179:5: 179:18
        _39 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:180:16: 180:17
        _38 = (_35.0: [u32; 1])[_39];    // scope 9 at ui/consts/const_let_eq.rs:180:10: 180:18
        _40 = Eq(_38, const 0_u32);      // scope 9 at ui/consts/const_let_eq.rs:180:5: 180:18
        assert(!move _40, "attempt to divide `{}` by zero", _0) -> bb8; // scope 9 at ui/consts/const_let_eq.rs:180:5: 180:18
    }

    bb8: {
        _0 = Div(_0, move _38);          // scope 9 at ui/consts/const_let_eq.rs:180:5: 180:18
        return;                          // scope 0 at ui/consts/const_let_eq.rs:184:2: 184:2
    }
}

// MIR FOR CTFE
fn div_assign(_1: [u32; 1]) -> u32 {
    debug a => _1;                       // in scope 0 at ui/consts/const_let_eq.rs:143:21: 143:22
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const_let_eq.rs:143:37: 143:40
    let _2: u32;                         // in scope 0 at ui/consts/const_let_eq.rs:144:9: 144:10
    let _3: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:144:15: 144:16
    let mut _4: usize;                   // in scope 0 at ui/consts/const_let_eq.rs:144:13: 144:17
    let mut _5: bool;                    // in scope 0 at ui/consts/const_let_eq.rs:144:13: 144:17
    let mut _7: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:146:29: 146:30
    let mut _8: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:146:22: 146:30
    let mut _9: bool;                    // in scope 0 at ui/consts/const_let_eq.rs:147:5: 147:11
    let _11: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:152:9: 152:10
    let mut _12: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:152:5: 152:11
    let mut _13: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:152:5: 152:11
    let mut _14: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:152:5: 152:16
    let mut _15: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:153:10: 153:16
    let _16: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:153:14: 153:15
    let mut _17: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:153:10: 153:16
    let mut _18: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:153:10: 153:16
    let mut _19: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:153:5: 153:16
    let mut _22: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:159:5: 159:15
    let mut _23: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:160:5: 160:15
    let mut _24: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:161:10: 161:15
    let mut _25: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:161:5: 161:15
    let mut _26: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:162:10: 162:15
    let mut _27: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:162:5: 162:15
    let mut _29: Foo<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:166:35: 166:41
    let _30: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:167:9: 167:10
    let mut _31: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:167:5: 167:11
    let mut _32: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:167:5: 167:11
    let mut _33: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:167:5: 167:18
    let mut _34: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:168:10: 168:18
    let _35: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:168:14: 168:15
    let mut _36: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:168:10: 168:16
    let mut _37: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:168:10: 168:16
    let mut _38: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:168:5: 168:18
    let mut _40: Bar<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:169:35: 169:47
    let _41: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:170:9: 170:10
    let mut _42: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:170:5: 170:11
    let mut _43: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:170:5: 170:11
    let mut _44: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:170:5: 170:18
    let mut _45: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:171:10: 171:18
    let _46: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:171:14: 171:15
    let mut _47: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:171:10: 171:16
    let mut _48: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:171:10: 171:16
    let mut _49: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:171:5: 171:18
    let mut _51: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:175:38: 175:41
    let _52: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:176:13: 176:14
    let mut _53: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:176:5: 176:15
    let mut _54: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:176:5: 176:15
    let mut _55: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:176:5: 176:20
    let mut _56: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:177:10: 177:20
    let _57: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:177:18: 177:19
    let mut _58: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:177:10: 177:20
    let mut _59: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:177:10: 177:20
    let mut _60: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:177:5: 177:20
    let mut _62: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:178:43: 178:46
    let _63: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:179:11: 179:12
    let mut _64: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:179:5: 179:13
    let mut _65: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:179:5: 179:13
    let mut _66: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:179:5: 179:18
    let mut _67: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:180:10: 180:18
    let _68: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:180:16: 180:17
    let mut _69: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:180:10: 180:18
    let mut _70: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:180:10: 180:18
    let mut _71: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:180:5: 180:18
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq.rs:144:9: 144:10
        let mut _6: u32;                 // in scope 1 at ui/consts/const_let_eq.rs:146:9: 146:14
        scope 2 {
            debug d => _6;               // in scope 2 at ui/consts/const_let_eq.rs:146:9: 146:14
            let mut _10: [u32; 1];       // in scope 2 at ui/consts/const_let_eq.rs:151:9: 151:16
            scope 3 {
                debug arr => _10;        // in scope 3 at ui/consts/const_let_eq.rs:151:9: 151:16
                let mut _20: Foo<u32>;   // in scope 3 at ui/consts/const_let_eq.rs:157:9: 157:16
                scope 4 {
                    debug foo => _20;    // in scope 4 at ui/consts/const_let_eq.rs:157:9: 157:16
                    let mut _21: Bar<u32>; // in scope 4 at ui/consts/const_let_eq.rs:158:9: 158:16
                    scope 5 {
                        debug bar => _21; // in scope 5 at ui/consts/const_let_eq.rs:158:9: 158:16
                        let mut _28: [Foo<u32>; 1]; // in scope 5 at ui/consts/const_let_eq.rs:166:9: 166:16
                        scope 6 {
                            debug arr => _28; // in scope 6 at ui/consts/const_let_eq.rs:166:9: 166:16
                            let mut _39: [Bar<u32>; 1]; // in scope 6 at ui/consts/const_let_eq.rs:169:9: 169:16
                            scope 7 {
                                debug arr => _39; // in scope 7 at ui/consts/const_let_eq.rs:169:9: 169:16
                                let mut _50: Foo<[u32; 1]>; // in scope 7 at ui/consts/const_let_eq.rs:175:9: 175:16
                                scope 8 {
                                    debug arr => _50; // in scope 8 at ui/consts/const_let_eq.rs:175:9: 175:16
                                    let mut _61: Bar<[u32; 1]>; // in scope 8 at ui/consts/const_let_eq.rs:178:9: 178:16
                                    scope 9 {
                                        debug arr => _61; // in scope 9 at ui/consts/const_let_eq.rs:178:9: 178:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const_let_eq.rs:144:9: 144:10
        StorageLive(_3);                 // scope 0 at ui/consts/const_let_eq.rs:144:15: 144:16
        _3 = const 0_usize;              // scope 0 at ui/consts/const_let_eq.rs:144:15: 144:16
        _4 = Len(_1);                    // scope 0 at ui/consts/const_let_eq.rs:144:13: 144:17
        _5 = Lt(_3, _4);                 // scope 0 at ui/consts/const_let_eq.rs:144:13: 144:17
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> bb1; // scope 0 at ui/consts/const_let_eq.rs:144:13: 144:17
    }

    bb1: {
        _2 = _1[_3];                     // scope 0 at ui/consts/const_let_eq.rs:144:13: 144:17
        StorageDead(_3);                 // scope 0 at ui/consts/const_let_eq.rs:144:17: 144:18
        StorageLive(_6);                 // scope 1 at ui/consts/const_let_eq.rs:146:9: 146:14
        StorageLive(_7);                 // scope 1 at ui/consts/const_let_eq.rs:146:29: 146:30
        _7 = _2;                         // scope 1 at ui/consts/const_let_eq.rs:146:29: 146:30
        _8 = CheckedMul(const 1024_u32, _7); // scope 1 at ui/consts/const_let_eq.rs:146:22: 146:30
        assert(!move (_8.1: bool), "attempt to compute `{} * {}`, which would overflow", const 1024_u32, move _7) -> bb2; // scope 1 at ui/consts/const_let_eq.rs:146:22: 146:30
    }

    bb2: {
        _6 = move (_8.0: u32);           // scope 1 at ui/consts/const_let_eq.rs:146:22: 146:30
        StorageDead(_7);                 // scope 1 at ui/consts/const_let_eq.rs:146:29: 146:30
        _9 = Eq(const 2_u32, const 0_u32); // scope 2 at ui/consts/const_let_eq.rs:147:5: 147:11
        assert(!move _9, "attempt to divide `{}` by zero", _6) -> bb3; // scope 2 at ui/consts/const_let_eq.rs:147:5: 147:11
    }

    bb3: {
        _6 = Div(_6, const 2_u32);       // scope 2 at ui/consts/const_let_eq.rs:147:5: 147:11
        StorageLive(_10);                // scope 2 at ui/consts/const_let_eq.rs:151:9: 151:16
        _10 = [const 4_u32];             // scope 2 at ui/consts/const_let_eq.rs:151:29: 151:32
        StorageLive(_11);                // scope 3 at ui/consts/const_let_eq.rs:152:9: 152:10
        _11 = const 0_usize;             // scope 3 at ui/consts/const_let_eq.rs:152:9: 152:10
        _12 = Len(_10);                  // scope 3 at ui/consts/const_let_eq.rs:152:5: 152:11
        _13 = Lt(_11, _12);              // scope 3 at ui/consts/const_let_eq.rs:152:5: 152:11
        assert(move _13, "index out of bounds: the length is {} but the index is {}", move _12, _11) -> bb4; // scope 3 at ui/consts/const_let_eq.rs:152:5: 152:11
    }

    bb4: {
        _14 = Eq(const 2_u32, const 0_u32); // scope 3 at ui/consts/const_let_eq.rs:152:5: 152:16
        assert(!move _14, "attempt to divide `{}` by zero", _10[_11]) -> bb5; // scope 3 at ui/consts/const_let_eq.rs:152:5: 152:16
    }

    bb5: {
        _10[_11] = Div(_10[_11], const 2_u32); // scope 3 at ui/consts/const_let_eq.rs:152:5: 152:16
        StorageDead(_11);                // scope 3 at ui/consts/const_let_eq.rs:152:16: 152:17
        StorageLive(_15);                // scope 3 at ui/consts/const_let_eq.rs:153:10: 153:16
        StorageLive(_16);                // scope 3 at ui/consts/const_let_eq.rs:153:14: 153:15
        _16 = const 0_usize;             // scope 3 at ui/consts/const_let_eq.rs:153:14: 153:15
        _17 = Len(_10);                  // scope 3 at ui/consts/const_let_eq.rs:153:10: 153:16
        _18 = Lt(_16, _17);              // scope 3 at ui/consts/const_let_eq.rs:153:10: 153:16
        assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, _16) -> bb6; // scope 3 at ui/consts/const_let_eq.rs:153:10: 153:16
    }

    bb6: {
        _15 = _10[_16];                  // scope 3 at ui/consts/const_let_eq.rs:153:10: 153:16
        _19 = Eq(_15, const 0_u32);      // scope 3 at ui/consts/const_let_eq.rs:153:5: 153:16
        assert(!move _19, "attempt to divide `{}` by zero", _6) -> bb7; // scope 3 at ui/consts/const_let_eq.rs:153:5: 153:16
    }

    bb7: {
        _6 = Div(_6, move _15);          // scope 3 at ui/consts/const_let_eq.rs:153:5: 153:16
        StorageDead(_15);                // scope 3 at ui/consts/const_let_eq.rs:153:15: 153:16
        StorageDead(_16);                // scope 3 at ui/consts/const_let_eq.rs:153:16: 153:17
        StorageLive(_20);                // scope 3 at ui/consts/const_let_eq.rs:157:9: 157:16
        _20 = Foo::<u32>(const 4_u32);   // scope 3 at ui/consts/const_let_eq.rs:157:29: 157:35
        StorageLive(_21);                // scope 4 at ui/consts/const_let_eq.rs:158:9: 158:16
        _21 = Bar::<u32> { x: const 4_u32 }; // scope 4 at ui/consts/const_let_eq.rs:158:29: 158:41
        _22 = Eq(const 2_u32, const 0_u32); // scope 5 at ui/consts/const_let_eq.rs:159:5: 159:15
        assert(!move _22, "attempt to divide `{}` by zero", (_20.0: u32)) -> bb8; // scope 5 at ui/consts/const_let_eq.rs:159:5: 159:15
    }

    bb8: {
        (_20.0: u32) = Div((_20.0: u32), const 2_u32); // scope 5 at ui/consts/const_let_eq.rs:159:5: 159:15
        _23 = Eq(const 2_u32, const 0_u32); // scope 5 at ui/consts/const_let_eq.rs:160:5: 160:15
        assert(!move _23, "attempt to divide `{}` by zero", (_21.0: u32)) -> bb9; // scope 5 at ui/consts/const_let_eq.rs:160:5: 160:15
    }

    bb9: {
        (_21.0: u32) = Div((_21.0: u32), const 2_u32); // scope 5 at ui/consts/const_let_eq.rs:160:5: 160:15
        StorageLive(_24);                // scope 5 at ui/consts/const_let_eq.rs:161:10: 161:15
        _24 = (_20.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:161:10: 161:15
        _25 = Eq(_24, const 0_u32);      // scope 5 at ui/consts/const_let_eq.rs:161:5: 161:15
        assert(!move _25, "attempt to divide `{}` by zero", _6) -> bb10; // scope 5 at ui/consts/const_let_eq.rs:161:5: 161:15
    }

    bb10: {
        _6 = Div(_6, move _24);          // scope 5 at ui/consts/const_let_eq.rs:161:5: 161:15
        StorageDead(_24);                // scope 5 at ui/consts/const_let_eq.rs:161:14: 161:15
        StorageLive(_26);                // scope 5 at ui/consts/const_let_eq.rs:162:10: 162:15
        _26 = (_21.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:162:10: 162:15
        _27 = Eq(_26, const 0_u32);      // scope 5 at ui/consts/const_let_eq.rs:162:5: 162:15
        assert(!move _27, "attempt to divide `{}` by zero", _6) -> bb11; // scope 5 at ui/consts/const_let_eq.rs:162:5: 162:15
    }

    bb11: {
        _6 = Div(_6, move _26);          // scope 5 at ui/consts/const_let_eq.rs:162:5: 162:15
        StorageDead(_26);                // scope 5 at ui/consts/const_let_eq.rs:162:14: 162:15
        StorageLive(_28);                // scope 5 at ui/consts/const_let_eq.rs:166:9: 166:16
        StorageLive(_29);                // scope 5 at ui/consts/const_let_eq.rs:166:35: 166:41
        _29 = Foo::<u32>(const 4_u32);   // scope 5 at ui/consts/const_let_eq.rs:166:35: 166:41
        _28 = [move _29];                // scope 5 at ui/consts/const_let_eq.rs:166:34: 166:42
        StorageDead(_29);                // scope 5 at ui/consts/const_let_eq.rs:166:41: 166:42
        StorageLive(_30);                // scope 6 at ui/consts/const_let_eq.rs:167:9: 167:10
        _30 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:167:9: 167:10
        _31 = Len(_28);                  // scope 6 at ui/consts/const_let_eq.rs:167:5: 167:11
        _32 = Lt(_30, _31);              // scope 6 at ui/consts/const_let_eq.rs:167:5: 167:11
        assert(move _32, "index out of bounds: the length is {} but the index is {}", move _31, _30) -> bb12; // scope 6 at ui/consts/const_let_eq.rs:167:5: 167:11
    }

    bb12: {
        _33 = Eq(const 2_u32, const 0_u32); // scope 6 at ui/consts/const_let_eq.rs:167:5: 167:18
        assert(!move _33, "attempt to divide `{}` by zero", (_28[_30].0: u32)) -> bb13; // scope 6 at ui/consts/const_let_eq.rs:167:5: 167:18
    }

    bb13: {
        (_28[_30].0: u32) = Div((_28[_30].0: u32), const 2_u32); // scope 6 at ui/consts/const_let_eq.rs:167:5: 167:18
        StorageDead(_30);                // scope 6 at ui/consts/const_let_eq.rs:167:18: 167:19
        StorageLive(_34);                // scope 6 at ui/consts/const_let_eq.rs:168:10: 168:18
        StorageLive(_35);                // scope 6 at ui/consts/const_let_eq.rs:168:14: 168:15
        _35 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:168:14: 168:15
        _36 = Len(_28);                  // scope 6 at ui/consts/const_let_eq.rs:168:10: 168:16
        _37 = Lt(_35, _36);              // scope 6 at ui/consts/const_let_eq.rs:168:10: 168:16
        assert(move _37, "index out of bounds: the length is {} but the index is {}", move _36, _35) -> bb14; // scope 6 at ui/consts/const_let_eq.rs:168:10: 168:16
    }

    bb14: {
        _34 = (_28[_35].0: u32);         // scope 6 at ui/consts/const_let_eq.rs:168:10: 168:18
        _38 = Eq(_34, const 0_u32);      // scope 6 at ui/consts/const_let_eq.rs:168:5: 168:18
        assert(!move _38, "attempt to divide `{}` by zero", _6) -> bb15; // scope 6 at ui/consts/const_let_eq.rs:168:5: 168:18
    }

    bb15: {
        _6 = Div(_6, move _34);          // scope 6 at ui/consts/const_let_eq.rs:168:5: 168:18
        StorageDead(_34);                // scope 6 at ui/consts/const_let_eq.rs:168:17: 168:18
        StorageDead(_35);                // scope 6 at ui/consts/const_let_eq.rs:168:18: 168:19
        StorageLive(_39);                // scope 6 at ui/consts/const_let_eq.rs:169:9: 169:16
        StorageLive(_40);                // scope 6 at ui/consts/const_let_eq.rs:169:35: 169:47
        _40 = Bar::<u32> { x: const 4_u32 }; // scope 6 at ui/consts/const_let_eq.rs:169:35: 169:47
        _39 = [move _40];                // scope 6 at ui/consts/const_let_eq.rs:169:34: 169:48
        StorageDead(_40);                // scope 6 at ui/consts/const_let_eq.rs:169:47: 169:48
        StorageLive(_41);                // scope 7 at ui/consts/const_let_eq.rs:170:9: 170:10
        _41 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:170:9: 170:10
        _42 = Len(_39);                  // scope 7 at ui/consts/const_let_eq.rs:170:5: 170:11
        _43 = Lt(_41, _42);              // scope 7 at ui/consts/const_let_eq.rs:170:5: 170:11
        assert(move _43, "index out of bounds: the length is {} but the index is {}", move _42, _41) -> bb16; // scope 7 at ui/consts/const_let_eq.rs:170:5: 170:11
    }

    bb16: {
        _44 = Eq(const 2_u32, const 0_u32); // scope 7 at ui/consts/const_let_eq.rs:170:5: 170:18
        assert(!move _44, "attempt to divide `{}` by zero", (_39[_41].0: u32)) -> bb17; // scope 7 at ui/consts/const_let_eq.rs:170:5: 170:18
    }

    bb17: {
        (_39[_41].0: u32) = Div((_39[_41].0: u32), const 2_u32); // scope 7 at ui/consts/const_let_eq.rs:170:5: 170:18
        StorageDead(_41);                // scope 7 at ui/consts/const_let_eq.rs:170:18: 170:19
        StorageLive(_45);                // scope 7 at ui/consts/const_let_eq.rs:171:10: 171:18
        StorageLive(_46);                // scope 7 at ui/consts/const_let_eq.rs:171:14: 171:15
        _46 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:171:14: 171:15
        _47 = Len(_39);                  // scope 7 at ui/consts/const_let_eq.rs:171:10: 171:16
        _48 = Lt(_46, _47);              // scope 7 at ui/consts/const_let_eq.rs:171:10: 171:16
        assert(move _48, "index out of bounds: the length is {} but the index is {}", move _47, _46) -> bb18; // scope 7 at ui/consts/const_let_eq.rs:171:10: 171:16
    }

    bb18: {
        _45 = (_39[_46].0: u32);         // scope 7 at ui/consts/const_let_eq.rs:171:10: 171:18
        _49 = Eq(_45, const 0_u32);      // scope 7 at ui/consts/const_let_eq.rs:171:5: 171:18
        assert(!move _49, "attempt to divide `{}` by zero", _6) -> bb19; // scope 7 at ui/consts/const_let_eq.rs:171:5: 171:18
    }

    bb19: {
        _6 = Div(_6, move _45);          // scope 7 at ui/consts/const_let_eq.rs:171:5: 171:18
        StorageDead(_45);                // scope 7 at ui/consts/const_let_eq.rs:171:17: 171:18
        StorageDead(_46);                // scope 7 at ui/consts/const_let_eq.rs:171:18: 171:19
        StorageLive(_50);                // scope 7 at ui/consts/const_let_eq.rs:175:9: 175:16
        StorageLive(_51);                // scope 7 at ui/consts/const_let_eq.rs:175:38: 175:41
        _51 = [const 4_u32];             // scope 7 at ui/consts/const_let_eq.rs:175:38: 175:41
        _50 = Foo::<[u32; 1]>(move _51); // scope 7 at ui/consts/const_let_eq.rs:175:34: 175:42
        StorageDead(_51);                // scope 7 at ui/consts/const_let_eq.rs:175:41: 175:42
        StorageLive(_52);                // scope 8 at ui/consts/const_let_eq.rs:176:13: 176:14
        _52 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:176:13: 176:14
        _53 = Len((_50.0: [u32; 1]));    // scope 8 at ui/consts/const_let_eq.rs:176:5: 176:15
        _54 = Lt(_52, _53);              // scope 8 at ui/consts/const_let_eq.rs:176:5: 176:15
        assert(move _54, "index out of bounds: the length is {} but the index is {}", move _53, _52) -> bb20; // scope 8 at ui/consts/const_let_eq.rs:176:5: 176:15
    }

    bb20: {
        _55 = Eq(const 2_u32, const 0_u32); // scope 8 at ui/consts/const_let_eq.rs:176:5: 176:20
        assert(!move _55, "attempt to divide `{}` by zero", (_50.0: [u32; 1])[_52]) -> bb21; // scope 8 at ui/consts/const_let_eq.rs:176:5: 176:20
    }

    bb21: {
        (_50.0: [u32; 1])[_52] = Div((_50.0: [u32; 1])[_52], const 2_u32); // scope 8 at ui/consts/const_let_eq.rs:176:5: 176:20
        StorageDead(_52);                // scope 8 at ui/consts/const_let_eq.rs:176:20: 176:21
        StorageLive(_56);                // scope 8 at ui/consts/const_let_eq.rs:177:10: 177:20
        StorageLive(_57);                // scope 8 at ui/consts/const_let_eq.rs:177:18: 177:19
        _57 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:177:18: 177:19
        _58 = Len((_50.0: [u32; 1]));    // scope 8 at ui/consts/const_let_eq.rs:177:10: 177:20
        _59 = Lt(_57, _58);              // scope 8 at ui/consts/const_let_eq.rs:177:10: 177:20
        assert(move _59, "index out of bounds: the length is {} but the index is {}", move _58, _57) -> bb22; // scope 8 at ui/consts/const_let_eq.rs:177:10: 177:20
    }

    bb22: {
        _56 = (_50.0: [u32; 1])[_57];    // scope 8 at ui/consts/const_let_eq.rs:177:10: 177:20
        _60 = Eq(_56, const 0_u32);      // scope 8 at ui/consts/const_let_eq.rs:177:5: 177:20
        assert(!move _60, "attempt to divide `{}` by zero", _6) -> bb23; // scope 8 at ui/consts/const_let_eq.rs:177:5: 177:20
    }

    bb23: {
        _6 = Div(_6, move _56);          // scope 8 at ui/consts/const_let_eq.rs:177:5: 177:20
        StorageDead(_56);                // scope 8 at ui/consts/const_let_eq.rs:177:19: 177:20
        StorageDead(_57);                // scope 8 at ui/consts/const_let_eq.rs:177:20: 177:21
        StorageLive(_61);                // scope 8 at ui/consts/const_let_eq.rs:178:9: 178:16
        StorageLive(_62);                // scope 8 at ui/consts/const_let_eq.rs:178:43: 178:46
        _62 = [const 4_u32];             // scope 8 at ui/consts/const_let_eq.rs:178:43: 178:46
        _61 = Bar::<[u32; 1]> { x: move _62 }; // scope 8 at ui/consts/const_let_eq.rs:178:34: 178:48
        StorageDead(_62);                // scope 8 at ui/consts/const_let_eq.rs:178:47: 178:48
        StorageLive(_63);                // scope 9 at ui/consts/const_let_eq.rs:179:11: 179:12
        _63 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:179:11: 179:12
        _64 = Len((_61.0: [u32; 1]));    // scope 9 at ui/consts/const_let_eq.rs:179:5: 179:13
        _65 = Lt(_63, _64);              // scope 9 at ui/consts/const_let_eq.rs:179:5: 179:13
        assert(move _65, "index out of bounds: the length is {} but the index is {}", move _64, _63) -> bb24; // scope 9 at ui/consts/const_let_eq.rs:179:5: 179:13
    }

    bb24: {
        _66 = Eq(const 2_u32, const 0_u32); // scope 9 at ui/consts/const_let_eq.rs:179:5: 179:18
        assert(!move _66, "attempt to divide `{}` by zero", (_61.0: [u32; 1])[_63]) -> bb25; // scope 9 at ui/consts/const_let_eq.rs:179:5: 179:18
    }

    bb25: {
        (_61.0: [u32; 1])[_63] = Div((_61.0: [u32; 1])[_63], const 2_u32); // scope 9 at ui/consts/const_let_eq.rs:179:5: 179:18
        StorageDead(_63);                // scope 9 at ui/consts/const_let_eq.rs:179:18: 179:19
        StorageLive(_67);                // scope 9 at ui/consts/const_let_eq.rs:180:10: 180:18
        StorageLive(_68);                // scope 9 at ui/consts/const_let_eq.rs:180:16: 180:17
        _68 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:180:16: 180:17
        _69 = Len((_61.0: [u32; 1]));    // scope 9 at ui/consts/const_let_eq.rs:180:10: 180:18
        _70 = Lt(_68, _69);              // scope 9 at ui/consts/const_let_eq.rs:180:10: 180:18
        assert(move _70, "index out of bounds: the length is {} but the index is {}", move _69, _68) -> bb26; // scope 9 at ui/consts/const_let_eq.rs:180:10: 180:18
    }

    bb26: {
        _67 = (_61.0: [u32; 1])[_68];    // scope 9 at ui/consts/const_let_eq.rs:180:10: 180:18
        _71 = Eq(_67, const 0_u32);      // scope 9 at ui/consts/const_let_eq.rs:180:5: 180:18
        assert(!move _71, "attempt to divide `{}` by zero", _6) -> bb27; // scope 9 at ui/consts/const_let_eq.rs:180:5: 180:18
    }

    bb27: {
        _6 = Div(_6, move _67);          // scope 9 at ui/consts/const_let_eq.rs:180:5: 180:18
        StorageDead(_67);                // scope 9 at ui/consts/const_let_eq.rs:180:17: 180:18
        StorageDead(_68);                // scope 9 at ui/consts/const_let_eq.rs:180:18: 180:19
        _0 = _6;                         // scope 9 at ui/consts/const_let_eq.rs:183:5: 183:6
        StorageDead(_61);                // scope 8 at ui/consts/const_let_eq.rs:184:1: 184:2
        StorageDead(_50);                // scope 7 at ui/consts/const_let_eq.rs:184:1: 184:2
        StorageDead(_39);                // scope 6 at ui/consts/const_let_eq.rs:184:1: 184:2
        StorageDead(_28);                // scope 5 at ui/consts/const_let_eq.rs:184:1: 184:2
        StorageDead(_21);                // scope 4 at ui/consts/const_let_eq.rs:184:1: 184:2
        StorageDead(_20);                // scope 3 at ui/consts/const_let_eq.rs:184:1: 184:2
        StorageDead(_10);                // scope 2 at ui/consts/const_let_eq.rs:184:1: 184:2
        StorageDead(_6);                 // scope 1 at ui/consts/const_let_eq.rs:184:1: 184:2
        StorageDead(_2);                 // scope 0 at ui/consts/const_let_eq.rs:184:1: 184:2
        return;                          // scope 0 at ui/consts/const_let_eq.rs:184:2: 184:2
    }
}

div_assign::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:143:30: 143:31

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:143:30: 143:31
        return;                          // scope 0 at ui/consts/const_let_eq.rs:143:30: 143:31
    }
}

div_assign::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:151:24: 151:25

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:151:24: 151:25
        return;                          // scope 0 at ui/consts/const_let_eq.rs:151:24: 151:25
    }
}

div_assign::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:166:29: 166:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:166:29: 166:30
        return;                          // scope 0 at ui/consts/const_let_eq.rs:166:29: 166:30
    }
}

div_assign::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:169:29: 169:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:169:29: 169:30
        return;                          // scope 0 at ui/consts/const_let_eq.rs:169:29: 169:30
    }
}

div_assign::{constant#4}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:175:28: 175:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:175:28: 175:29
        return;                          // scope 0 at ui/consts/const_let_eq.rs:175:28: 175:29
    }
}

div_assign::{constant#5}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:178:28: 178:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:178:28: 178:29
        return;                          // scope 0 at ui/consts/const_let_eq.rs:178:28: 178:29
    }
}

fn rem_assign(_1: W) -> u32 {
    let _2: u32;                         // in scope 0 at ui/consts/const_let_eq.rs:186:23: 186:24
    let mut _3: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:190:5: 190:12
    let _5: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:194:9: 194:10
    let mut _6: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:195:10: 195:20
    let mut _7: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:195:14: 195:20
    let _8: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:195:18: 195:19
    let mut _9: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:195:10: 195:20
    let mut _10: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:195:5: 195:20
    let mut _11: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:196:5: 196:12
    let mut _14: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:203:10: 203:27
    let mut _15: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:203:10: 203:19
    let mut _16: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:203:14: 203:19
    let mut _17: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:203:10: 203:19
    let mut _18: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:203:22: 203:27
    let mut _19: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:203:10: 203:27
    let mut _20: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:203:5: 203:27
    let mut _21: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:204:5: 204:12
    let mut _23: Foo<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:207:35: 207:41
    let _24: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:208:9: 208:10
    let mut _25: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:209:10: 209:22
    let mut _26: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:209:14: 209:22
    let _27: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:209:18: 209:19
    let mut _28: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:209:10: 209:22
    let mut _29: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:209:5: 209:22
    let mut _30: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:210:5: 210:12
    let mut _32: Bar<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:211:35: 211:47
    let _33: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:212:9: 212:10
    let mut _34: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:213:10: 213:22
    let mut _35: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:213:14: 213:22
    let _36: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:213:18: 213:19
    let mut _37: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:213:10: 213:22
    let mut _38: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:213:5: 213:22
    let mut _39: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:214:5: 214:12
    let mut _41: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:217:38: 217:41
    let _42: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:218:13: 218:14
    let mut _43: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:219:10: 219:24
    let mut _44: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:219:14: 219:24
    let _45: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:219:22: 219:23
    let mut _46: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:219:10: 219:24
    let mut _47: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:219:5: 219:24
    let mut _49: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:220:43: 220:47
    let _50: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:221:11: 221:12
    let mut _51: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:222:10: 222:22
    let mut _52: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:222:14: 222:22
    let _53: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:222:20: 222:21
    let mut _54: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:222:10: 222:22
    let mut _55: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:222:5: 222:22
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq.rs:186:23: 186:24
        let mut _0: u32;                 // return place in scope 1 at ui/consts/const_let_eq.rs:188:9: 188:14
        scope 2 {
            debug d => _0;               // in scope 2 at ui/consts/const_let_eq.rs:188:9: 188:14
            let mut _4: [u32; 1];        // in scope 2 at ui/consts/const_let_eq.rs:193:9: 193:16
            scope 3 {
                debug arr => _4;         // in scope 3 at ui/consts/const_let_eq.rs:193:9: 193:16
                let mut _12: Foo<u32>;   // in scope 3 at ui/consts/const_let_eq.rs:199:9: 199:16
                scope 4 {
                    debug foo => _12;    // in scope 4 at ui/consts/const_let_eq.rs:199:9: 199:16
                    let mut _13: Bar<u32>; // in scope 4 at ui/consts/const_let_eq.rs:200:9: 200:16
                    scope 5 {
                        debug bar => _13; // in scope 5 at ui/consts/const_let_eq.rs:200:9: 200:16
                        let mut _22: [Foo<u32>; 1]; // in scope 5 at ui/consts/const_let_eq.rs:207:9: 207:16
                        scope 6 {
                            debug arr => _22; // in scope 6 at ui/consts/const_let_eq.rs:207:9: 207:16
                            let mut _31: [Bar<u32>; 1]; // in scope 6 at ui/consts/const_let_eq.rs:211:9: 211:16
                            scope 7 {
                                debug arr => _31; // in scope 7 at ui/consts/const_let_eq.rs:211:9: 211:16
                                let mut _40: Foo<[u32; 1]>; // in scope 7 at ui/consts/const_let_eq.rs:217:9: 217:16
                                scope 8 {
                                    debug arr => _40; // in scope 8 at ui/consts/const_let_eq.rs:217:9: 217:16
                                    let mut _48: Bar<[u32; 1]>; // in scope 8 at ui/consts/const_let_eq.rs:220:9: 220:16
                                    scope 9 {
                                        debug arr => _48; // in scope 9 at ui/consts/const_let_eq.rs:220:9: 220:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = (_1.0: u32);                // scope 0 at ui/consts/const_let_eq.rs:186:23: 186:24
        _0 = _2;                         // scope 1 at ui/consts/const_let_eq.rs:188:22: 188:23
        _0 = Rem(_0, const 10_u32);      // scope 2 at ui/consts/const_let_eq.rs:189:5: 189:12
        _3 = CheckedAdd(_0, const 10_u32); // scope 2 at ui/consts/const_let_eq.rs:190:5: 190:12
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", _0, const 10_u32) -> bb1; // scope 2 at ui/consts/const_let_eq.rs:190:5: 190:12
    }

    bb1: {
        _0 = move (_3.0: u32);           // scope 2 at ui/consts/const_let_eq.rs:190:5: 190:12
        _4 = [const 3_u32];              // scope 2 at ui/consts/const_let_eq.rs:193:29: 193:32
        _5 = const 0_usize;              // scope 3 at ui/consts/const_let_eq.rs:194:9: 194:10
        _4[_5] = Rem(_4[_5], const 2_u32); // scope 3 at ui/consts/const_let_eq.rs:194:5: 194:16
        _8 = const 0_usize;              // scope 3 at ui/consts/const_let_eq.rs:195:18: 195:19
        _7 = _4[_8];                     // scope 3 at ui/consts/const_let_eq.rs:195:14: 195:20
        _9 = CheckedAdd(const 9_u32, _7); // scope 3 at ui/consts/const_let_eq.rs:195:10: 195:20
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", const 9_u32, move _7) -> bb2; // scope 3 at ui/consts/const_let_eq.rs:195:10: 195:20
    }

    bb2: {
        _6 = move (_9.0: u32);           // scope 3 at ui/consts/const_let_eq.rs:195:10: 195:20
        _10 = Eq(_6, const 0_u32);       // scope 3 at ui/consts/const_let_eq.rs:195:5: 195:20
        assert(!move _10, "attempt to calculate the remainder of `{}` with a divisor of zero", _0) -> bb3; // scope 3 at ui/consts/const_let_eq.rs:195:5: 195:20
    }

    bb3: {
        _0 = Rem(_0, move _6);           // scope 3 at ui/consts/const_let_eq.rs:195:5: 195:20
        _11 = CheckedAdd(_0, const 10_u32); // scope 3 at ui/consts/const_let_eq.rs:196:5: 196:12
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", _0, const 10_u32) -> bb4; // scope 3 at ui/consts/const_let_eq.rs:196:5: 196:12
    }

    bb4: {
        _0 = move (_11.0: u32);          // scope 3 at ui/consts/const_let_eq.rs:196:5: 196:12
        _12 = const Foo::<u32>(5_u32);   // scope 3 at ui/consts/const_let_eq.rs:199:29: 199:35
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:199:29: 199:35
                                         // + literal: Const { ty: Foo<u32>, val: Value(Scalar(0x00000005)) }
        _13 = const Bar::<u32> {{ x: 7_u32 }}; // scope 4 at ui/consts/const_let_eq.rs:200:29: 200:41
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:200:29: 200:41
                                         // + literal: Const { ty: Bar<u32>, val: Value(Scalar(0x00000007)) }
        (_12.0: u32) = Rem((_12.0: u32), const 2_u32); // scope 5 at ui/consts/const_let_eq.rs:201:5: 201:15
        (_13.0: u32) = Rem((_13.0: u32), const 2_u32); // scope 5 at ui/consts/const_let_eq.rs:202:5: 202:15
        _16 = (_12.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:203:14: 203:19
        _17 = CheckedAdd(const 8_u32, _16); // scope 5 at ui/consts/const_let_eq.rs:203:10: 203:19
        assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", const 8_u32, move _16) -> bb5; // scope 5 at ui/consts/const_let_eq.rs:203:10: 203:19
    }

    bb5: {
        _15 = move (_17.0: u32);         // scope 5 at ui/consts/const_let_eq.rs:203:10: 203:19
        _18 = (_13.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:203:22: 203:27
        _19 = CheckedAdd(_15, _18);      // scope 5 at ui/consts/const_let_eq.rs:203:10: 203:27
        assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _15, move _18) -> bb6; // scope 5 at ui/consts/const_let_eq.rs:203:10: 203:27
    }

    bb6: {
        _14 = move (_19.0: u32);         // scope 5 at ui/consts/const_let_eq.rs:203:10: 203:27
        _20 = Eq(_14, const 0_u32);      // scope 5 at ui/consts/const_let_eq.rs:203:5: 203:27
        assert(!move _20, "attempt to calculate the remainder of `{}` with a divisor of zero", _0) -> bb7; // scope 5 at ui/consts/const_let_eq.rs:203:5: 203:27
    }

    bb7: {
        _0 = Rem(_0, move _14);          // scope 5 at ui/consts/const_let_eq.rs:203:5: 203:27
        _21 = CheckedAdd(_0, const 10_u32); // scope 5 at ui/consts/const_let_eq.rs:204:5: 204:12
        assert(!move (_21.1: bool), "attempt to compute `{} + {}`, which would overflow", _0, const 10_u32) -> bb8; // scope 5 at ui/consts/const_let_eq.rs:204:5: 204:12
    }

    bb8: {
        _0 = move (_21.0: u32);          // scope 5 at ui/consts/const_let_eq.rs:204:5: 204:12
        _23 = const Foo::<u32>(4_u32);   // scope 5 at ui/consts/const_let_eq.rs:207:35: 207:41
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:207:35: 207:41
                                         // + literal: Const { ty: Foo<u32>, val: Value(Scalar(0x00000004)) }
        _22 = [move _23];                // scope 5 at ui/consts/const_let_eq.rs:207:34: 207:42
        _24 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:208:9: 208:10
        (_22[_24].0: u32) = Rem((_22[_24].0: u32), const 3_u32); // scope 6 at ui/consts/const_let_eq.rs:208:5: 208:18
        _27 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:209:18: 209:19
        _26 = (_22[_27].0: u32);         // scope 6 at ui/consts/const_let_eq.rs:209:14: 209:22
        _28 = CheckedAdd(const 9_u32, _26); // scope 6 at ui/consts/const_let_eq.rs:209:10: 209:22
        assert(!move (_28.1: bool), "attempt to compute `{} + {}`, which would overflow", const 9_u32, move _26) -> bb9; // scope 6 at ui/consts/const_let_eq.rs:209:10: 209:22
    }

    bb9: {
        _25 = move (_28.0: u32);         // scope 6 at ui/consts/const_let_eq.rs:209:10: 209:22
        _29 = Eq(_25, const 0_u32);      // scope 6 at ui/consts/const_let_eq.rs:209:5: 209:22
        assert(!move _29, "attempt to calculate the remainder of `{}` with a divisor of zero", _0) -> bb10; // scope 6 at ui/consts/const_let_eq.rs:209:5: 209:22
    }

    bb10: {
        _0 = Rem(_0, move _25);          // scope 6 at ui/consts/const_let_eq.rs:209:5: 209:22
        _30 = CheckedAdd(_0, const 10_u32); // scope 6 at ui/consts/const_let_eq.rs:210:5: 210:12
        assert(!move (_30.1: bool), "attempt to compute `{} + {}`, which would overflow", _0, const 10_u32) -> bb11; // scope 6 at ui/consts/const_let_eq.rs:210:5: 210:12
    }

    bb11: {
        _0 = move (_30.0: u32);          // scope 6 at ui/consts/const_let_eq.rs:210:5: 210:12
        _32 = const Bar::<u32> {{ x: 7_u32 }}; // scope 6 at ui/consts/const_let_eq.rs:211:35: 211:47
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:211:35: 211:47
                                         // + literal: Const { ty: Bar<u32>, val: Value(Scalar(0x00000007)) }
        _31 = [move _32];                // scope 6 at ui/consts/const_let_eq.rs:211:34: 211:48
        _33 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:212:9: 212:10
        (_31[_33].0: u32) = Rem((_31[_33].0: u32), const 3_u32); // scope 7 at ui/consts/const_let_eq.rs:212:5: 212:18
        _36 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:213:18: 213:19
        _35 = (_31[_36].0: u32);         // scope 7 at ui/consts/const_let_eq.rs:213:14: 213:22
        _37 = CheckedAdd(const 9_u32, _35); // scope 7 at ui/consts/const_let_eq.rs:213:10: 213:22
        assert(!move (_37.1: bool), "attempt to compute `{} + {}`, which would overflow", const 9_u32, move _35) -> bb12; // scope 7 at ui/consts/const_let_eq.rs:213:10: 213:22
    }

    bb12: {
        _34 = move (_37.0: u32);         // scope 7 at ui/consts/const_let_eq.rs:213:10: 213:22
        _38 = Eq(_34, const 0_u32);      // scope 7 at ui/consts/const_let_eq.rs:213:5: 213:22
        assert(!move _38, "attempt to calculate the remainder of `{}` with a divisor of zero", _0) -> bb13; // scope 7 at ui/consts/const_let_eq.rs:213:5: 213:22
    }

    bb13: {
        _0 = Rem(_0, move _34);          // scope 7 at ui/consts/const_let_eq.rs:213:5: 213:22
        _39 = CheckedAdd(_0, const 10_u32); // scope 7 at ui/consts/const_let_eq.rs:214:5: 214:12
        assert(!move (_39.1: bool), "attempt to compute `{} + {}`, which would overflow", _0, const 10_u32) -> bb14; // scope 7 at ui/consts/const_let_eq.rs:214:5: 214:12
    }

    bb14: {
        _0 = move (_39.0: u32);          // scope 7 at ui/consts/const_let_eq.rs:214:5: 214:12
        _41 = [const 6_u32];             // scope 7 at ui/consts/const_let_eq.rs:217:38: 217:41
        _40 = Foo::<[u32; 1]>(move _41); // scope 7 at ui/consts/const_let_eq.rs:217:34: 217:42
        _42 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:218:13: 218:14
        (_40.0: [u32; 1])[_42] = Rem((_40.0: [u32; 1])[_42], const 5_u32); // scope 8 at ui/consts/const_let_eq.rs:218:5: 218:20
        _45 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:219:22: 219:23
        _44 = (_40.0: [u32; 1])[_45];    // scope 8 at ui/consts/const_let_eq.rs:219:14: 219:24
        _46 = CheckedAdd(const 9_u32, _44); // scope 8 at ui/consts/const_let_eq.rs:219:10: 219:24
        assert(!move (_46.1: bool), "attempt to compute `{} + {}`, which would overflow", const 9_u32, move _44) -> bb15; // scope 8 at ui/consts/const_let_eq.rs:219:10: 219:24
    }

    bb15: {
        _43 = move (_46.0: u32);         // scope 8 at ui/consts/const_let_eq.rs:219:10: 219:24
        _47 = Eq(_43, const 0_u32);      // scope 8 at ui/consts/const_let_eq.rs:219:5: 219:24
        assert(!move _47, "attempt to calculate the remainder of `{}` with a divisor of zero", _0) -> bb16; // scope 8 at ui/consts/const_let_eq.rs:219:5: 219:24
    }

    bb16: {
        _0 = Rem(_0, move _43);          // scope 8 at ui/consts/const_let_eq.rs:219:5: 219:24
        _49 = [const 11_u32];            // scope 8 at ui/consts/const_let_eq.rs:220:43: 220:47
        _48 = Bar::<[u32; 1]> { x: move _49 }; // scope 8 at ui/consts/const_let_eq.rs:220:34: 220:49
        _50 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:221:11: 221:12
        (_48.0: [u32; 1])[_50] = Rem((_48.0: [u32; 1])[_50], const 5_u32); // scope 9 at ui/consts/const_let_eq.rs:221:5: 221:18
        _53 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:222:20: 222:21
        _52 = (_48.0: [u32; 1])[_53];    // scope 9 at ui/consts/const_let_eq.rs:222:14: 222:22
        _54 = CheckedAdd(const 9_u32, _52); // scope 9 at ui/consts/const_let_eq.rs:222:10: 222:22
        assert(!move (_54.1: bool), "attempt to compute `{} + {}`, which would overflow", const 9_u32, move _52) -> bb17; // scope 9 at ui/consts/const_let_eq.rs:222:10: 222:22
    }

    bb17: {
        _51 = move (_54.0: u32);         // scope 9 at ui/consts/const_let_eq.rs:222:10: 222:22
        _55 = Eq(_51, const 0_u32);      // scope 9 at ui/consts/const_let_eq.rs:222:5: 222:22
        assert(!move _55, "attempt to calculate the remainder of `{}` with a divisor of zero", _0) -> bb18; // scope 9 at ui/consts/const_let_eq.rs:222:5: 222:22
    }

    bb18: {
        _0 = Rem(_0, move _51);          // scope 9 at ui/consts/const_let_eq.rs:222:5: 222:22
        return;                          // scope 0 at ui/consts/const_let_eq.rs:225:2: 225:2
    }
}

// MIR FOR CTFE
fn rem_assign(_1: W) -> u32 {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const_let_eq.rs:186:33: 186:36
    let _2: u32;                         // in scope 0 at ui/consts/const_let_eq.rs:186:23: 186:24
    let mut _4: bool;                    // in scope 0 at ui/consts/const_let_eq.rs:189:5: 189:12
    let mut _5: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:190:5: 190:12
    let _7: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:194:9: 194:10
    let mut _8: usize;                   // in scope 0 at ui/consts/const_let_eq.rs:194:5: 194:11
    let mut _9: bool;                    // in scope 0 at ui/consts/const_let_eq.rs:194:5: 194:11
    let mut _10: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:194:5: 194:16
    let mut _11: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:195:10: 195:20
    let mut _12: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:195:14: 195:20
    let _13: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:195:18: 195:19
    let mut _14: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:195:14: 195:20
    let mut _15: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:195:14: 195:20
    let mut _16: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:195:10: 195:20
    let mut _17: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:195:5: 195:20
    let mut _18: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:196:5: 196:12
    let mut _21: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:201:5: 201:15
    let mut _22: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:202:5: 202:15
    let mut _23: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:203:10: 203:27
    let mut _24: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:203:10: 203:19
    let mut _25: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:203:14: 203:19
    let mut _26: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:203:10: 203:19
    let mut _27: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:203:22: 203:27
    let mut _28: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:203:10: 203:27
    let mut _29: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:203:5: 203:27
    let mut _30: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:204:5: 204:12
    let mut _32: Foo<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:207:35: 207:41
    let _33: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:208:9: 208:10
    let mut _34: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:208:5: 208:11
    let mut _35: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:208:5: 208:11
    let mut _36: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:208:5: 208:18
    let mut _37: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:209:10: 209:22
    let mut _38: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:209:14: 209:22
    let _39: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:209:18: 209:19
    let mut _40: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:209:14: 209:20
    let mut _41: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:209:14: 209:20
    let mut _42: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:209:10: 209:22
    let mut _43: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:209:5: 209:22
    let mut _44: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:210:5: 210:12
    let mut _46: Bar<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:211:35: 211:47
    let _47: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:212:9: 212:10
    let mut _48: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:212:5: 212:11
    let mut _49: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:212:5: 212:11
    let mut _50: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:212:5: 212:18
    let mut _51: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:213:10: 213:22
    let mut _52: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:213:14: 213:22
    let _53: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:213:18: 213:19
    let mut _54: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:213:14: 213:20
    let mut _55: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:213:14: 213:20
    let mut _56: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:213:10: 213:22
    let mut _57: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:213:5: 213:22
    let mut _58: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:214:5: 214:12
    let mut _60: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:217:38: 217:41
    let _61: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:218:13: 218:14
    let mut _62: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:218:5: 218:15
    let mut _63: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:218:5: 218:15
    let mut _64: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:218:5: 218:20
    let mut _65: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:219:10: 219:24
    let mut _66: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:219:14: 219:24
    let _67: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:219:22: 219:23
    let mut _68: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:219:14: 219:24
    let mut _69: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:219:14: 219:24
    let mut _70: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:219:10: 219:24
    let mut _71: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:219:5: 219:24
    let mut _73: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:220:43: 220:47
    let _74: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:221:11: 221:12
    let mut _75: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:221:5: 221:13
    let mut _76: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:221:5: 221:13
    let mut _77: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:221:5: 221:18
    let mut _78: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:222:10: 222:22
    let mut _79: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:222:14: 222:22
    let _80: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:222:20: 222:21
    let mut _81: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:222:14: 222:22
    let mut _82: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:222:14: 222:22
    let mut _83: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:222:10: 222:22
    let mut _84: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:222:5: 222:22
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq.rs:186:23: 186:24
        let mut _3: u32;                 // in scope 1 at ui/consts/const_let_eq.rs:188:9: 188:14
        scope 2 {
            debug d => _3;               // in scope 2 at ui/consts/const_let_eq.rs:188:9: 188:14
            let mut _6: [u32; 1];        // in scope 2 at ui/consts/const_let_eq.rs:193:9: 193:16
            scope 3 {
                debug arr => _6;         // in scope 3 at ui/consts/const_let_eq.rs:193:9: 193:16
                let mut _19: Foo<u32>;   // in scope 3 at ui/consts/const_let_eq.rs:199:9: 199:16
                scope 4 {
                    debug foo => _19;    // in scope 4 at ui/consts/const_let_eq.rs:199:9: 199:16
                    let mut _20: Bar<u32>; // in scope 4 at ui/consts/const_let_eq.rs:200:9: 200:16
                    scope 5 {
                        debug bar => _20; // in scope 5 at ui/consts/const_let_eq.rs:200:9: 200:16
                        let mut _31: [Foo<u32>; 1]; // in scope 5 at ui/consts/const_let_eq.rs:207:9: 207:16
                        scope 6 {
                            debug arr => _31; // in scope 6 at ui/consts/const_let_eq.rs:207:9: 207:16
                            let mut _45: [Bar<u32>; 1]; // in scope 6 at ui/consts/const_let_eq.rs:211:9: 211:16
                            scope 7 {
                                debug arr => _45; // in scope 7 at ui/consts/const_let_eq.rs:211:9: 211:16
                                let mut _59: Foo<[u32; 1]>; // in scope 7 at ui/consts/const_let_eq.rs:217:9: 217:16
                                scope 8 {
                                    debug arr => _59; // in scope 8 at ui/consts/const_let_eq.rs:217:9: 217:16
                                    let mut _72: Bar<[u32; 1]>; // in scope 8 at ui/consts/const_let_eq.rs:220:9: 220:16
                                    scope 9 {
                                        debug arr => _72; // in scope 9 at ui/consts/const_let_eq.rs:220:9: 220:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const_let_eq.rs:186:23: 186:24
        _2 = (_1.0: u32);                // scope 0 at ui/consts/const_let_eq.rs:186:23: 186:24
        StorageLive(_3);                 // scope 1 at ui/consts/const_let_eq.rs:188:9: 188:14
        _3 = _2;                         // scope 1 at ui/consts/const_let_eq.rs:188:22: 188:23
        _4 = Eq(const 10_u32, const 0_u32); // scope 2 at ui/consts/const_let_eq.rs:189:5: 189:12
        assert(!move _4, "attempt to calculate the remainder of `{}` with a divisor of zero", _3) -> bb1; // scope 2 at ui/consts/const_let_eq.rs:189:5: 189:12
    }

    bb1: {
        _3 = Rem(_3, const 10_u32);      // scope 2 at ui/consts/const_let_eq.rs:189:5: 189:12
        _5 = CheckedAdd(_3, const 10_u32); // scope 2 at ui/consts/const_let_eq.rs:190:5: 190:12
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, const 10_u32) -> bb2; // scope 2 at ui/consts/const_let_eq.rs:190:5: 190:12
    }

    bb2: {
        _3 = move (_5.0: u32);           // scope 2 at ui/consts/const_let_eq.rs:190:5: 190:12
        StorageLive(_6);                 // scope 2 at ui/consts/const_let_eq.rs:193:9: 193:16
        _6 = [const 3_u32];              // scope 2 at ui/consts/const_let_eq.rs:193:29: 193:32
        StorageLive(_7);                 // scope 3 at ui/consts/const_let_eq.rs:194:9: 194:10
        _7 = const 0_usize;              // scope 3 at ui/consts/const_let_eq.rs:194:9: 194:10
        _8 = Len(_6);                    // scope 3 at ui/consts/const_let_eq.rs:194:5: 194:11
        _9 = Lt(_7, _8);                 // scope 3 at ui/consts/const_let_eq.rs:194:5: 194:11
        assert(move _9, "index out of bounds: the length is {} but the index is {}", move _8, _7) -> bb3; // scope 3 at ui/consts/const_let_eq.rs:194:5: 194:11
    }

    bb3: {
        _10 = Eq(const 2_u32, const 0_u32); // scope 3 at ui/consts/const_let_eq.rs:194:5: 194:16
        assert(!move _10, "attempt to calculate the remainder of `{}` with a divisor of zero", _6[_7]) -> bb4; // scope 3 at ui/consts/const_let_eq.rs:194:5: 194:16
    }

    bb4: {
        _6[_7] = Rem(_6[_7], const 2_u32); // scope 3 at ui/consts/const_let_eq.rs:194:5: 194:16
        StorageDead(_7);                 // scope 3 at ui/consts/const_let_eq.rs:194:16: 194:17
        StorageLive(_11);                // scope 3 at ui/consts/const_let_eq.rs:195:10: 195:20
        StorageLive(_12);                // scope 3 at ui/consts/const_let_eq.rs:195:14: 195:20
        StorageLive(_13);                // scope 3 at ui/consts/const_let_eq.rs:195:18: 195:19
        _13 = const 0_usize;             // scope 3 at ui/consts/const_let_eq.rs:195:18: 195:19
        _14 = Len(_6);                   // scope 3 at ui/consts/const_let_eq.rs:195:14: 195:20
        _15 = Lt(_13, _14);              // scope 3 at ui/consts/const_let_eq.rs:195:14: 195:20
        assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _13) -> bb5; // scope 3 at ui/consts/const_let_eq.rs:195:14: 195:20
    }

    bb5: {
        _12 = _6[_13];                   // scope 3 at ui/consts/const_let_eq.rs:195:14: 195:20
        _16 = CheckedAdd(const 9_u32, _12); // scope 3 at ui/consts/const_let_eq.rs:195:10: 195:20
        assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", const 9_u32, move _12) -> bb6; // scope 3 at ui/consts/const_let_eq.rs:195:10: 195:20
    }

    bb6: {
        _11 = move (_16.0: u32);         // scope 3 at ui/consts/const_let_eq.rs:195:10: 195:20
        StorageDead(_12);                // scope 3 at ui/consts/const_let_eq.rs:195:19: 195:20
        _17 = Eq(_11, const 0_u32);      // scope 3 at ui/consts/const_let_eq.rs:195:5: 195:20
        assert(!move _17, "attempt to calculate the remainder of `{}` with a divisor of zero", _3) -> bb7; // scope 3 at ui/consts/const_let_eq.rs:195:5: 195:20
    }

    bb7: {
        _3 = Rem(_3, move _11);          // scope 3 at ui/consts/const_let_eq.rs:195:5: 195:20
        StorageDead(_11);                // scope 3 at ui/consts/const_let_eq.rs:195:19: 195:20
        StorageDead(_13);                // scope 3 at ui/consts/const_let_eq.rs:195:20: 195:21
        _18 = CheckedAdd(_3, const 10_u32); // scope 3 at ui/consts/const_let_eq.rs:196:5: 196:12
        assert(!move (_18.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, const 10_u32) -> bb8; // scope 3 at ui/consts/const_let_eq.rs:196:5: 196:12
    }

    bb8: {
        _3 = move (_18.0: u32);          // scope 3 at ui/consts/const_let_eq.rs:196:5: 196:12
        StorageLive(_19);                // scope 3 at ui/consts/const_let_eq.rs:199:9: 199:16
        _19 = Foo::<u32>(const 5_u32);   // scope 3 at ui/consts/const_let_eq.rs:199:29: 199:35
        StorageLive(_20);                // scope 4 at ui/consts/const_let_eq.rs:200:9: 200:16
        _20 = Bar::<u32> { x: const 7_u32 }; // scope 4 at ui/consts/const_let_eq.rs:200:29: 200:41
        _21 = Eq(const 2_u32, const 0_u32); // scope 5 at ui/consts/const_let_eq.rs:201:5: 201:15
        assert(!move _21, "attempt to calculate the remainder of `{}` with a divisor of zero", (_19.0: u32)) -> bb9; // scope 5 at ui/consts/const_let_eq.rs:201:5: 201:15
    }

    bb9: {
        (_19.0: u32) = Rem((_19.0: u32), const 2_u32); // scope 5 at ui/consts/const_let_eq.rs:201:5: 201:15
        _22 = Eq(const 2_u32, const 0_u32); // scope 5 at ui/consts/const_let_eq.rs:202:5: 202:15
        assert(!move _22, "attempt to calculate the remainder of `{}` with a divisor of zero", (_20.0: u32)) -> bb10; // scope 5 at ui/consts/const_let_eq.rs:202:5: 202:15
    }

    bb10: {
        (_20.0: u32) = Rem((_20.0: u32), const 2_u32); // scope 5 at ui/consts/const_let_eq.rs:202:5: 202:15
        StorageLive(_23);                // scope 5 at ui/consts/const_let_eq.rs:203:10: 203:27
        StorageLive(_24);                // scope 5 at ui/consts/const_let_eq.rs:203:10: 203:19
        StorageLive(_25);                // scope 5 at ui/consts/const_let_eq.rs:203:14: 203:19
        _25 = (_19.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:203:14: 203:19
        _26 = CheckedAdd(const 8_u32, _25); // scope 5 at ui/consts/const_let_eq.rs:203:10: 203:19
        assert(!move (_26.1: bool), "attempt to compute `{} + {}`, which would overflow", const 8_u32, move _25) -> bb11; // scope 5 at ui/consts/const_let_eq.rs:203:10: 203:19
    }

    bb11: {
        _24 = move (_26.0: u32);         // scope 5 at ui/consts/const_let_eq.rs:203:10: 203:19
        StorageDead(_25);                // scope 5 at ui/consts/const_let_eq.rs:203:18: 203:19
        StorageLive(_27);                // scope 5 at ui/consts/const_let_eq.rs:203:22: 203:27
        _27 = (_20.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:203:22: 203:27
        _28 = CheckedAdd(_24, _27);      // scope 5 at ui/consts/const_let_eq.rs:203:10: 203:27
        assert(!move (_28.1: bool), "attempt to compute `{} + {}`, which would overflow", move _24, move _27) -> bb12; // scope 5 at ui/consts/const_let_eq.rs:203:10: 203:27
    }

    bb12: {
        _23 = move (_28.0: u32);         // scope 5 at ui/consts/const_let_eq.rs:203:10: 203:27
        StorageDead(_27);                // scope 5 at ui/consts/const_let_eq.rs:203:26: 203:27
        StorageDead(_24);                // scope 5 at ui/consts/const_let_eq.rs:203:26: 203:27
        _29 = Eq(_23, const 0_u32);      // scope 5 at ui/consts/const_let_eq.rs:203:5: 203:27
        assert(!move _29, "attempt to calculate the remainder of `{}` with a divisor of zero", _3) -> bb13; // scope 5 at ui/consts/const_let_eq.rs:203:5: 203:27
    }

    bb13: {
        _3 = Rem(_3, move _23);          // scope 5 at ui/consts/const_let_eq.rs:203:5: 203:27
        StorageDead(_23);                // scope 5 at ui/consts/const_let_eq.rs:203:26: 203:27
        _30 = CheckedAdd(_3, const 10_u32); // scope 5 at ui/consts/const_let_eq.rs:204:5: 204:12
        assert(!move (_30.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, const 10_u32) -> bb14; // scope 5 at ui/consts/const_let_eq.rs:204:5: 204:12
    }

    bb14: {
        _3 = move (_30.0: u32);          // scope 5 at ui/consts/const_let_eq.rs:204:5: 204:12
        StorageLive(_31);                // scope 5 at ui/consts/const_let_eq.rs:207:9: 207:16
        StorageLive(_32);                // scope 5 at ui/consts/const_let_eq.rs:207:35: 207:41
        _32 = Foo::<u32>(const 4_u32);   // scope 5 at ui/consts/const_let_eq.rs:207:35: 207:41
        _31 = [move _32];                // scope 5 at ui/consts/const_let_eq.rs:207:34: 207:42
        StorageDead(_32);                // scope 5 at ui/consts/const_let_eq.rs:207:41: 207:42
        StorageLive(_33);                // scope 6 at ui/consts/const_let_eq.rs:208:9: 208:10
        _33 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:208:9: 208:10
        _34 = Len(_31);                  // scope 6 at ui/consts/const_let_eq.rs:208:5: 208:11
        _35 = Lt(_33, _34);              // scope 6 at ui/consts/const_let_eq.rs:208:5: 208:11
        assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _33) -> bb15; // scope 6 at ui/consts/const_let_eq.rs:208:5: 208:11
    }

    bb15: {
        _36 = Eq(const 3_u32, const 0_u32); // scope 6 at ui/consts/const_let_eq.rs:208:5: 208:18
        assert(!move _36, "attempt to calculate the remainder of `{}` with a divisor of zero", (_31[_33].0: u32)) -> bb16; // scope 6 at ui/consts/const_let_eq.rs:208:5: 208:18
    }

    bb16: {
        (_31[_33].0: u32) = Rem((_31[_33].0: u32), const 3_u32); // scope 6 at ui/consts/const_let_eq.rs:208:5: 208:18
        StorageDead(_33);                // scope 6 at ui/consts/const_let_eq.rs:208:18: 208:19
        StorageLive(_37);                // scope 6 at ui/consts/const_let_eq.rs:209:10: 209:22
        StorageLive(_38);                // scope 6 at ui/consts/const_let_eq.rs:209:14: 209:22
        StorageLive(_39);                // scope 6 at ui/consts/const_let_eq.rs:209:18: 209:19
        _39 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:209:18: 209:19
        _40 = Len(_31);                  // scope 6 at ui/consts/const_let_eq.rs:209:14: 209:20
        _41 = Lt(_39, _40);              // scope 6 at ui/consts/const_let_eq.rs:209:14: 209:20
        assert(move _41, "index out of bounds: the length is {} but the index is {}", move _40, _39) -> bb17; // scope 6 at ui/consts/const_let_eq.rs:209:14: 209:20
    }

    bb17: {
        _38 = (_31[_39].0: u32);         // scope 6 at ui/consts/const_let_eq.rs:209:14: 209:22
        _42 = CheckedAdd(const 9_u32, _38); // scope 6 at ui/consts/const_let_eq.rs:209:10: 209:22
        assert(!move (_42.1: bool), "attempt to compute `{} + {}`, which would overflow", const 9_u32, move _38) -> bb18; // scope 6 at ui/consts/const_let_eq.rs:209:10: 209:22
    }

    bb18: {
        _37 = move (_42.0: u32);         // scope 6 at ui/consts/const_let_eq.rs:209:10: 209:22
        StorageDead(_38);                // scope 6 at ui/consts/const_let_eq.rs:209:21: 209:22
        _43 = Eq(_37, const 0_u32);      // scope 6 at ui/consts/const_let_eq.rs:209:5: 209:22
        assert(!move _43, "attempt to calculate the remainder of `{}` with a divisor of zero", _3) -> bb19; // scope 6 at ui/consts/const_let_eq.rs:209:5: 209:22
    }

    bb19: {
        _3 = Rem(_3, move _37);          // scope 6 at ui/consts/const_let_eq.rs:209:5: 209:22
        StorageDead(_37);                // scope 6 at ui/consts/const_let_eq.rs:209:21: 209:22
        StorageDead(_39);                // scope 6 at ui/consts/const_let_eq.rs:209:22: 209:23
        _44 = CheckedAdd(_3, const 10_u32); // scope 6 at ui/consts/const_let_eq.rs:210:5: 210:12
        assert(!move (_44.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, const 10_u32) -> bb20; // scope 6 at ui/consts/const_let_eq.rs:210:5: 210:12
    }

    bb20: {
        _3 = move (_44.0: u32);          // scope 6 at ui/consts/const_let_eq.rs:210:5: 210:12
        StorageLive(_45);                // scope 6 at ui/consts/const_let_eq.rs:211:9: 211:16
        StorageLive(_46);                // scope 6 at ui/consts/const_let_eq.rs:211:35: 211:47
        _46 = Bar::<u32> { x: const 7_u32 }; // scope 6 at ui/consts/const_let_eq.rs:211:35: 211:47
        _45 = [move _46];                // scope 6 at ui/consts/const_let_eq.rs:211:34: 211:48
        StorageDead(_46);                // scope 6 at ui/consts/const_let_eq.rs:211:47: 211:48
        StorageLive(_47);                // scope 7 at ui/consts/const_let_eq.rs:212:9: 212:10
        _47 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:212:9: 212:10
        _48 = Len(_45);                  // scope 7 at ui/consts/const_let_eq.rs:212:5: 212:11
        _49 = Lt(_47, _48);              // scope 7 at ui/consts/const_let_eq.rs:212:5: 212:11
        assert(move _49, "index out of bounds: the length is {} but the index is {}", move _48, _47) -> bb21; // scope 7 at ui/consts/const_let_eq.rs:212:5: 212:11
    }

    bb21: {
        _50 = Eq(const 3_u32, const 0_u32); // scope 7 at ui/consts/const_let_eq.rs:212:5: 212:18
        assert(!move _50, "attempt to calculate the remainder of `{}` with a divisor of zero", (_45[_47].0: u32)) -> bb22; // scope 7 at ui/consts/const_let_eq.rs:212:5: 212:18
    }

    bb22: {
        (_45[_47].0: u32) = Rem((_45[_47].0: u32), const 3_u32); // scope 7 at ui/consts/const_let_eq.rs:212:5: 212:18
        StorageDead(_47);                // scope 7 at ui/consts/const_let_eq.rs:212:18: 212:19
        StorageLive(_51);                // scope 7 at ui/consts/const_let_eq.rs:213:10: 213:22
        StorageLive(_52);                // scope 7 at ui/consts/const_let_eq.rs:213:14: 213:22
        StorageLive(_53);                // scope 7 at ui/consts/const_let_eq.rs:213:18: 213:19
        _53 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:213:18: 213:19
        _54 = Len(_45);                  // scope 7 at ui/consts/const_let_eq.rs:213:14: 213:20
        _55 = Lt(_53, _54);              // scope 7 at ui/consts/const_let_eq.rs:213:14: 213:20
        assert(move _55, "index out of bounds: the length is {} but the index is {}", move _54, _53) -> bb23; // scope 7 at ui/consts/const_let_eq.rs:213:14: 213:20
    }

    bb23: {
        _52 = (_45[_53].0: u32);         // scope 7 at ui/consts/const_let_eq.rs:213:14: 213:22
        _56 = CheckedAdd(const 9_u32, _52); // scope 7 at ui/consts/const_let_eq.rs:213:10: 213:22
        assert(!move (_56.1: bool), "attempt to compute `{} + {}`, which would overflow", const 9_u32, move _52) -> bb24; // scope 7 at ui/consts/const_let_eq.rs:213:10: 213:22
    }

    bb24: {
        _51 = move (_56.0: u32);         // scope 7 at ui/consts/const_let_eq.rs:213:10: 213:22
        StorageDead(_52);                // scope 7 at ui/consts/const_let_eq.rs:213:21: 213:22
        _57 = Eq(_51, const 0_u32);      // scope 7 at ui/consts/const_let_eq.rs:213:5: 213:22
        assert(!move _57, "attempt to calculate the remainder of `{}` with a divisor of zero", _3) -> bb25; // scope 7 at ui/consts/const_let_eq.rs:213:5: 213:22
    }

    bb25: {
        _3 = Rem(_3, move _51);          // scope 7 at ui/consts/const_let_eq.rs:213:5: 213:22
        StorageDead(_51);                // scope 7 at ui/consts/const_let_eq.rs:213:21: 213:22
        StorageDead(_53);                // scope 7 at ui/consts/const_let_eq.rs:213:22: 213:23
        _58 = CheckedAdd(_3, const 10_u32); // scope 7 at ui/consts/const_let_eq.rs:214:5: 214:12
        assert(!move (_58.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, const 10_u32) -> bb26; // scope 7 at ui/consts/const_let_eq.rs:214:5: 214:12
    }

    bb26: {
        _3 = move (_58.0: u32);          // scope 7 at ui/consts/const_let_eq.rs:214:5: 214:12
        StorageLive(_59);                // scope 7 at ui/consts/const_let_eq.rs:217:9: 217:16
        StorageLive(_60);                // scope 7 at ui/consts/const_let_eq.rs:217:38: 217:41
        _60 = [const 6_u32];             // scope 7 at ui/consts/const_let_eq.rs:217:38: 217:41
        _59 = Foo::<[u32; 1]>(move _60); // scope 7 at ui/consts/const_let_eq.rs:217:34: 217:42
        StorageDead(_60);                // scope 7 at ui/consts/const_let_eq.rs:217:41: 217:42
        StorageLive(_61);                // scope 8 at ui/consts/const_let_eq.rs:218:13: 218:14
        _61 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:218:13: 218:14
        _62 = Len((_59.0: [u32; 1]));    // scope 8 at ui/consts/const_let_eq.rs:218:5: 218:15
        _63 = Lt(_61, _62);              // scope 8 at ui/consts/const_let_eq.rs:218:5: 218:15
        assert(move _63, "index out of bounds: the length is {} but the index is {}", move _62, _61) -> bb27; // scope 8 at ui/consts/const_let_eq.rs:218:5: 218:15
    }

    bb27: {
        _64 = Eq(const 5_u32, const 0_u32); // scope 8 at ui/consts/const_let_eq.rs:218:5: 218:20
        assert(!move _64, "attempt to calculate the remainder of `{}` with a divisor of zero", (_59.0: [u32; 1])[_61]) -> bb28; // scope 8 at ui/consts/const_let_eq.rs:218:5: 218:20
    }

    bb28: {
        (_59.0: [u32; 1])[_61] = Rem((_59.0: [u32; 1])[_61], const 5_u32); // scope 8 at ui/consts/const_let_eq.rs:218:5: 218:20
        StorageDead(_61);                // scope 8 at ui/consts/const_let_eq.rs:218:20: 218:21
        StorageLive(_65);                // scope 8 at ui/consts/const_let_eq.rs:219:10: 219:24
        StorageLive(_66);                // scope 8 at ui/consts/const_let_eq.rs:219:14: 219:24
        StorageLive(_67);                // scope 8 at ui/consts/const_let_eq.rs:219:22: 219:23
        _67 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:219:22: 219:23
        _68 = Len((_59.0: [u32; 1]));    // scope 8 at ui/consts/const_let_eq.rs:219:14: 219:24
        _69 = Lt(_67, _68);              // scope 8 at ui/consts/const_let_eq.rs:219:14: 219:24
        assert(move _69, "index out of bounds: the length is {} but the index is {}", move _68, _67) -> bb29; // scope 8 at ui/consts/const_let_eq.rs:219:14: 219:24
    }

    bb29: {
        _66 = (_59.0: [u32; 1])[_67];    // scope 8 at ui/consts/const_let_eq.rs:219:14: 219:24
        _70 = CheckedAdd(const 9_u32, _66); // scope 8 at ui/consts/const_let_eq.rs:219:10: 219:24
        assert(!move (_70.1: bool), "attempt to compute `{} + {}`, which would overflow", const 9_u32, move _66) -> bb30; // scope 8 at ui/consts/const_let_eq.rs:219:10: 219:24
    }

    bb30: {
        _65 = move (_70.0: u32);         // scope 8 at ui/consts/const_let_eq.rs:219:10: 219:24
        StorageDead(_66);                // scope 8 at ui/consts/const_let_eq.rs:219:23: 219:24
        _71 = Eq(_65, const 0_u32);      // scope 8 at ui/consts/const_let_eq.rs:219:5: 219:24
        assert(!move _71, "attempt to calculate the remainder of `{}` with a divisor of zero", _3) -> bb31; // scope 8 at ui/consts/const_let_eq.rs:219:5: 219:24
    }

    bb31: {
        _3 = Rem(_3, move _65);          // scope 8 at ui/consts/const_let_eq.rs:219:5: 219:24
        StorageDead(_65);                // scope 8 at ui/consts/const_let_eq.rs:219:23: 219:24
        StorageDead(_67);                // scope 8 at ui/consts/const_let_eq.rs:219:24: 219:25
        StorageLive(_72);                // scope 8 at ui/consts/const_let_eq.rs:220:9: 220:16
        StorageLive(_73);                // scope 8 at ui/consts/const_let_eq.rs:220:43: 220:47
        _73 = [const 11_u32];            // scope 8 at ui/consts/const_let_eq.rs:220:43: 220:47
        _72 = Bar::<[u32; 1]> { x: move _73 }; // scope 8 at ui/consts/const_let_eq.rs:220:34: 220:49
        StorageDead(_73);                // scope 8 at ui/consts/const_let_eq.rs:220:48: 220:49
        StorageLive(_74);                // scope 9 at ui/consts/const_let_eq.rs:221:11: 221:12
        _74 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:221:11: 221:12
        _75 = Len((_72.0: [u32; 1]));    // scope 9 at ui/consts/const_let_eq.rs:221:5: 221:13
        _76 = Lt(_74, _75);              // scope 9 at ui/consts/const_let_eq.rs:221:5: 221:13
        assert(move _76, "index out of bounds: the length is {} but the index is {}", move _75, _74) -> bb32; // scope 9 at ui/consts/const_let_eq.rs:221:5: 221:13
    }

    bb32: {
        _77 = Eq(const 5_u32, const 0_u32); // scope 9 at ui/consts/const_let_eq.rs:221:5: 221:18
        assert(!move _77, "attempt to calculate the remainder of `{}` with a divisor of zero", (_72.0: [u32; 1])[_74]) -> bb33; // scope 9 at ui/consts/const_let_eq.rs:221:5: 221:18
    }

    bb33: {
        (_72.0: [u32; 1])[_74] = Rem((_72.0: [u32; 1])[_74], const 5_u32); // scope 9 at ui/consts/const_let_eq.rs:221:5: 221:18
        StorageDead(_74);                // scope 9 at ui/consts/const_let_eq.rs:221:18: 221:19
        StorageLive(_78);                // scope 9 at ui/consts/const_let_eq.rs:222:10: 222:22
        StorageLive(_79);                // scope 9 at ui/consts/const_let_eq.rs:222:14: 222:22
        StorageLive(_80);                // scope 9 at ui/consts/const_let_eq.rs:222:20: 222:21
        _80 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:222:20: 222:21
        _81 = Len((_72.0: [u32; 1]));    // scope 9 at ui/consts/const_let_eq.rs:222:14: 222:22
        _82 = Lt(_80, _81);              // scope 9 at ui/consts/const_let_eq.rs:222:14: 222:22
        assert(move _82, "index out of bounds: the length is {} but the index is {}", move _81, _80) -> bb34; // scope 9 at ui/consts/const_let_eq.rs:222:14: 222:22
    }

    bb34: {
        _79 = (_72.0: [u32; 1])[_80];    // scope 9 at ui/consts/const_let_eq.rs:222:14: 222:22
        _83 = CheckedAdd(const 9_u32, _79); // scope 9 at ui/consts/const_let_eq.rs:222:10: 222:22
        assert(!move (_83.1: bool), "attempt to compute `{} + {}`, which would overflow", const 9_u32, move _79) -> bb35; // scope 9 at ui/consts/const_let_eq.rs:222:10: 222:22
    }

    bb35: {
        _78 = move (_83.0: u32);         // scope 9 at ui/consts/const_let_eq.rs:222:10: 222:22
        StorageDead(_79);                // scope 9 at ui/consts/const_let_eq.rs:222:21: 222:22
        _84 = Eq(_78, const 0_u32);      // scope 9 at ui/consts/const_let_eq.rs:222:5: 222:22
        assert(!move _84, "attempt to calculate the remainder of `{}` with a divisor of zero", _3) -> bb36; // scope 9 at ui/consts/const_let_eq.rs:222:5: 222:22
    }

    bb36: {
        _3 = Rem(_3, move _78);          // scope 9 at ui/consts/const_let_eq.rs:222:5: 222:22
        StorageDead(_78);                // scope 9 at ui/consts/const_let_eq.rs:222:21: 222:22
        StorageDead(_80);                // scope 9 at ui/consts/const_let_eq.rs:222:22: 222:23
        _0 = _3;                         // scope 9 at ui/consts/const_let_eq.rs:224:5: 224:6
        StorageDead(_72);                // scope 8 at ui/consts/const_let_eq.rs:225:1: 225:2
        StorageDead(_59);                // scope 7 at ui/consts/const_let_eq.rs:225:1: 225:2
        StorageDead(_45);                // scope 6 at ui/consts/const_let_eq.rs:225:1: 225:2
        StorageDead(_31);                // scope 5 at ui/consts/const_let_eq.rs:225:1: 225:2
        StorageDead(_20);                // scope 4 at ui/consts/const_let_eq.rs:225:1: 225:2
        StorageDead(_19);                // scope 3 at ui/consts/const_let_eq.rs:225:1: 225:2
        StorageDead(_6);                 // scope 2 at ui/consts/const_let_eq.rs:225:1: 225:2
        StorageDead(_3);                 // scope 1 at ui/consts/const_let_eq.rs:225:1: 225:2
        StorageDead(_2);                 // scope 0 at ui/consts/const_let_eq.rs:225:1: 225:2
        return;                          // scope 0 at ui/consts/const_let_eq.rs:225:2: 225:2
    }
}

rem_assign::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:193:24: 193:25

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:193:24: 193:25
        return;                          // scope 0 at ui/consts/const_let_eq.rs:193:24: 193:25
    }
}

rem_assign::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:207:29: 207:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:207:29: 207:30
        return;                          // scope 0 at ui/consts/const_let_eq.rs:207:29: 207:30
    }
}

rem_assign::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:211:29: 211:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:211:29: 211:30
        return;                          // scope 0 at ui/consts/const_let_eq.rs:211:29: 211:30
    }
}

rem_assign::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:217:28: 217:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:217:28: 217:29
        return;                          // scope 0 at ui/consts/const_let_eq.rs:217:28: 217:29
    }
}

rem_assign::{constant#4}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:220:28: 220:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:220:28: 220:29
        return;                          // scope 0 at ui/consts/const_let_eq.rs:220:28: 220:29
    }
}

fn sub_assign(_1: W) -> u32 {
    let _2: u32;                         // in scope 0 at ui/consts/const_let_eq.rs:227:23: 227:24
    let mut _3: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:230:5: 230:11
    let _5: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:234:9: 234:10
    let mut _6: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:234:5: 234:16
    let mut _7: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:235:10: 235:16
    let _8: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:235:14: 235:15
    let mut _9: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:235:5: 235:16
    let mut _12: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:241:5: 241:15
    let mut _13: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:242:10: 242:23
    let mut _14: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:242:10: 242:15
    let mut _15: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:242:18: 242:23
    let mut _16: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:242:10: 242:23
    let mut _17: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:242:5: 242:23
    let mut _19: Foo<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:245:35: 245:41
    let _20: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:246:9: 246:10
    let mut _21: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:246:5: 246:18
    let mut _22: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:247:10: 247:18
    let _23: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:247:14: 247:15
    let mut _24: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:247:5: 247:18
    let mut _26: Bar<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:248:35: 248:47
    let _27: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:249:9: 249:10
    let mut _28: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:249:5: 249:18
    let mut _29: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:250:10: 250:18
    let _30: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:250:14: 250:15
    let mut _31: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:250:5: 250:18
    let mut _33: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:253:38: 253:41
    let _34: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:254:13: 254:14
    let mut _35: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:254:5: 254:20
    let mut _36: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:255:10: 255:20
    let _37: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:255:18: 255:19
    let mut _38: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:255:5: 255:20
    let mut _40: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:256:43: 256:46
    let _41: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:257:11: 257:12
    let mut _42: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:257:5: 257:18
    let mut _43: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:258:10: 258:18
    let _44: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:258:16: 258:17
    let mut _45: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:258:5: 258:18
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq.rs:227:23: 227:24
        let mut _0: u32;                 // return place in scope 1 at ui/consts/const_let_eq.rs:229:9: 229:14
        scope 2 {
            debug d => _0;               // in scope 2 at ui/consts/const_let_eq.rs:229:9: 229:14
            let mut _4: [u32; 1];        // in scope 2 at ui/consts/const_let_eq.rs:233:9: 233:16
            scope 3 {
                debug arr => _4;         // in scope 3 at ui/consts/const_let_eq.rs:233:9: 233:16
                let mut _10: Foo<u32>;   // in scope 3 at ui/consts/const_let_eq.rs:238:9: 238:16
                scope 4 {
                    debug foo => _10;    // in scope 4 at ui/consts/const_let_eq.rs:238:9: 238:16
                    let mut _11: Bar<u32>; // in scope 4 at ui/consts/const_let_eq.rs:239:9: 239:16
                    scope 5 {
                        debug bar => _11; // in scope 5 at ui/consts/const_let_eq.rs:239:9: 239:16
                        let mut _18: [Foo<u32>; 1]; // in scope 5 at ui/consts/const_let_eq.rs:245:9: 245:16
                        scope 6 {
                            debug arr => _18; // in scope 6 at ui/consts/const_let_eq.rs:245:9: 245:16
                            let mut _25: [Bar<u32>; 1]; // in scope 6 at ui/consts/const_let_eq.rs:248:9: 248:16
                            scope 7 {
                                debug arr => _25; // in scope 7 at ui/consts/const_let_eq.rs:248:9: 248:16
                                let mut _32: Foo<[u32; 1]>; // in scope 7 at ui/consts/const_let_eq.rs:253:9: 253:16
                                scope 8 {
                                    debug arr => _32; // in scope 8 at ui/consts/const_let_eq.rs:253:9: 253:16
                                    let mut _39: Bar<[u32; 1]>; // in scope 8 at ui/consts/const_let_eq.rs:256:9: 256:16
                                    scope 9 {
                                        debug arr => _39; // in scope 9 at ui/consts/const_let_eq.rs:256:9: 256:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = (_1.0: u32);                // scope 0 at ui/consts/const_let_eq.rs:227:23: 227:24
        _0 = _2;                         // scope 1 at ui/consts/const_let_eq.rs:229:22: 229:23
        _3 = CheckedSub(_0, const 1_u32); // scope 2 at ui/consts/const_let_eq.rs:230:5: 230:11
        assert(!move (_3.1: bool), "attempt to compute `{} - {}`, which would overflow", _0, const 1_u32) -> bb1; // scope 2 at ui/consts/const_let_eq.rs:230:5: 230:11
    }

    bb1: {
        _0 = move (_3.0: u32);           // scope 2 at ui/consts/const_let_eq.rs:230:5: 230:11
        _4 = [const 2_u32];              // scope 2 at ui/consts/const_let_eq.rs:233:29: 233:32
        _5 = const 0_usize;              // scope 3 at ui/consts/const_let_eq.rs:234:9: 234:10
        _6 = CheckedSub(_4[_5], const 1_u32); // scope 3 at ui/consts/const_let_eq.rs:234:5: 234:16
        assert(!move (_6.1: bool), "attempt to compute `{} - {}`, which would overflow", _4[_5], const 1_u32) -> bb2; // scope 3 at ui/consts/const_let_eq.rs:234:5: 234:16
    }

    bb2: {
        _4[_5] = move (_6.0: u32);       // scope 3 at ui/consts/const_let_eq.rs:234:5: 234:16
        _8 = const 0_usize;              // scope 3 at ui/consts/const_let_eq.rs:235:14: 235:15
        _7 = _4[_8];                     // scope 3 at ui/consts/const_let_eq.rs:235:10: 235:16
        _9 = CheckedSub(_0, _7);         // scope 3 at ui/consts/const_let_eq.rs:235:5: 235:16
        assert(!move (_9.1: bool), "attempt to compute `{} - {}`, which would overflow", _0, move _7) -> bb3; // scope 3 at ui/consts/const_let_eq.rs:235:5: 235:16
    }

    bb3: {
        _0 = move (_9.0: u32);           // scope 3 at ui/consts/const_let_eq.rs:235:5: 235:16
        _10 = const Foo::<u32>(2_u32);   // scope 3 at ui/consts/const_let_eq.rs:238:29: 238:35
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:238:29: 238:35
                                         // + literal: Const { ty: Foo<u32>, val: Value(Scalar(0x00000002)) }
        _11 = const Bar::<u32> {{ x: 2_u32 }}; // scope 4 at ui/consts/const_let_eq.rs:239:29: 239:41
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:239:29: 239:41
                                         // + literal: Const { ty: Bar<u32>, val: Value(Scalar(0x00000002)) }
        (_10.0: u32) = const 1_u32;      // scope 5 at ui/consts/const_let_eq.rs:240:5: 240:15
        _12 = CheckedSub((_11.0: u32), const 1_u32); // scope 5 at ui/consts/const_let_eq.rs:241:5: 241:15
        assert(!move (_12.1: bool), "attempt to compute `{} - {}`, which would overflow", (_11.0: u32), const 1_u32) -> bb4; // scope 5 at ui/consts/const_let_eq.rs:241:5: 241:15
    }

    bb4: {
        (_11.0: u32) = move (_12.0: u32); // scope 5 at ui/consts/const_let_eq.rs:241:5: 241:15
        _14 = (_10.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:242:10: 242:15
        _15 = (_11.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:242:18: 242:23
        _16 = CheckedAdd(_14, _15);      // scope 5 at ui/consts/const_let_eq.rs:242:10: 242:23
        assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", move _14, move _15) -> bb5; // scope 5 at ui/consts/const_let_eq.rs:242:10: 242:23
    }

    bb5: {
        _13 = move (_16.0: u32);         // scope 5 at ui/consts/const_let_eq.rs:242:10: 242:23
        _17 = CheckedSub(_0, _13);       // scope 5 at ui/consts/const_let_eq.rs:242:5: 242:23
        assert(!move (_17.1: bool), "attempt to compute `{} - {}`, which would overflow", _0, move _13) -> bb6; // scope 5 at ui/consts/const_let_eq.rs:242:5: 242:23
    }

    bb6: {
        _0 = move (_17.0: u32);          // scope 5 at ui/consts/const_let_eq.rs:242:5: 242:23
        _19 = const Foo::<u32>(2_u32);   // scope 5 at ui/consts/const_let_eq.rs:245:35: 245:41
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:245:35: 245:41
                                         // + literal: Const { ty: Foo<u32>, val: Value(Scalar(0x00000002)) }
        _18 = [move _19];                // scope 5 at ui/consts/const_let_eq.rs:245:34: 245:42
        _20 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:246:9: 246:10
        _21 = CheckedSub((_18[_20].0: u32), const 1_u32); // scope 6 at ui/consts/const_let_eq.rs:246:5: 246:18
        assert(!move (_21.1: bool), "attempt to compute `{} - {}`, which would overflow", (_18[_20].0: u32), const 1_u32) -> bb7; // scope 6 at ui/consts/const_let_eq.rs:246:5: 246:18
    }

    bb7: {
        (_18[_20].0: u32) = move (_21.0: u32); // scope 6 at ui/consts/const_let_eq.rs:246:5: 246:18
        _23 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:247:14: 247:15
        _22 = (_18[_23].0: u32);         // scope 6 at ui/consts/const_let_eq.rs:247:10: 247:18
        _24 = CheckedSub(_0, _22);       // scope 6 at ui/consts/const_let_eq.rs:247:5: 247:18
        assert(!move (_24.1: bool), "attempt to compute `{} - {}`, which would overflow", _0, move _22) -> bb8; // scope 6 at ui/consts/const_let_eq.rs:247:5: 247:18
    }

    bb8: {
        _0 = move (_24.0: u32);          // scope 6 at ui/consts/const_let_eq.rs:247:5: 247:18
        _26 = const Bar::<u32> {{ x: 2_u32 }}; // scope 6 at ui/consts/const_let_eq.rs:248:35: 248:47
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:248:35: 248:47
                                         // + literal: Const { ty: Bar<u32>, val: Value(Scalar(0x00000002)) }
        _25 = [move _26];                // scope 6 at ui/consts/const_let_eq.rs:248:34: 248:48
        _27 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:249:9: 249:10
        _28 = CheckedSub((_25[_27].0: u32), const 1_u32); // scope 7 at ui/consts/const_let_eq.rs:249:5: 249:18
        assert(!move (_28.1: bool), "attempt to compute `{} - {}`, which would overflow", (_25[_27].0: u32), const 1_u32) -> bb9; // scope 7 at ui/consts/const_let_eq.rs:249:5: 249:18
    }

    bb9: {
        (_25[_27].0: u32) = move (_28.0: u32); // scope 7 at ui/consts/const_let_eq.rs:249:5: 249:18
        _30 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:250:14: 250:15
        _29 = (_25[_30].0: u32);         // scope 7 at ui/consts/const_let_eq.rs:250:10: 250:18
        _31 = CheckedSub(_0, _29);       // scope 7 at ui/consts/const_let_eq.rs:250:5: 250:18
        assert(!move (_31.1: bool), "attempt to compute `{} - {}`, which would overflow", _0, move _29) -> bb10; // scope 7 at ui/consts/const_let_eq.rs:250:5: 250:18
    }

    bb10: {
        _0 = move (_31.0: u32);          // scope 7 at ui/consts/const_let_eq.rs:250:5: 250:18
        _33 = [const 2_u32];             // scope 7 at ui/consts/const_let_eq.rs:253:38: 253:41
        _32 = Foo::<[u32; 1]>(move _33); // scope 7 at ui/consts/const_let_eq.rs:253:34: 253:42
        _34 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:254:13: 254:14
        _35 = CheckedSub((_32.0: [u32; 1])[_34], const 1_u32); // scope 8 at ui/consts/const_let_eq.rs:254:5: 254:20
        assert(!move (_35.1: bool), "attempt to compute `{} - {}`, which would overflow", (_32.0: [u32; 1])[_34], const 1_u32) -> bb11; // scope 8 at ui/consts/const_let_eq.rs:254:5: 254:20
    }

    bb11: {
        (_32.0: [u32; 1])[_34] = move (_35.0: u32); // scope 8 at ui/consts/const_let_eq.rs:254:5: 254:20
        _37 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:255:18: 255:19
        _36 = (_32.0: [u32; 1])[_37];    // scope 8 at ui/consts/const_let_eq.rs:255:10: 255:20
        _38 = CheckedSub(_0, _36);       // scope 8 at ui/consts/const_let_eq.rs:255:5: 255:20
        assert(!move (_38.1: bool), "attempt to compute `{} - {}`, which would overflow", _0, move _36) -> bb12; // scope 8 at ui/consts/const_let_eq.rs:255:5: 255:20
    }

    bb12: {
        _0 = move (_38.0: u32);          // scope 8 at ui/consts/const_let_eq.rs:255:5: 255:20
        _40 = [const 2_u32];             // scope 8 at ui/consts/const_let_eq.rs:256:43: 256:46
        _39 = Bar::<[u32; 1]> { x: move _40 }; // scope 8 at ui/consts/const_let_eq.rs:256:34: 256:48
        _41 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:257:11: 257:12
        _42 = CheckedSub((_39.0: [u32; 1])[_41], const 1_u32); // scope 9 at ui/consts/const_let_eq.rs:257:5: 257:18
        assert(!move (_42.1: bool), "attempt to compute `{} - {}`, which would overflow", (_39.0: [u32; 1])[_41], const 1_u32) -> bb13; // scope 9 at ui/consts/const_let_eq.rs:257:5: 257:18
    }

    bb13: {
        (_39.0: [u32; 1])[_41] = move (_42.0: u32); // scope 9 at ui/consts/const_let_eq.rs:257:5: 257:18
        _44 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:258:16: 258:17
        _43 = (_39.0: [u32; 1])[_44];    // scope 9 at ui/consts/const_let_eq.rs:258:10: 258:18
        _45 = CheckedSub(_0, _43);       // scope 9 at ui/consts/const_let_eq.rs:258:5: 258:18
        assert(!move (_45.1: bool), "attempt to compute `{} - {}`, which would overflow", _0, move _43) -> bb14; // scope 9 at ui/consts/const_let_eq.rs:258:5: 258:18
    }

    bb14: {
        _0 = move (_45.0: u32);          // scope 9 at ui/consts/const_let_eq.rs:258:5: 258:18
        return;                          // scope 0 at ui/consts/const_let_eq.rs:261:2: 261:2
    }
}

// MIR FOR CTFE
fn sub_assign(_1: W) -> u32 {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const_let_eq.rs:227:33: 227:36
    let _2: u32;                         // in scope 0 at ui/consts/const_let_eq.rs:227:23: 227:24
    let mut _4: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:230:5: 230:11
    let _6: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:234:9: 234:10
    let mut _7: usize;                   // in scope 0 at ui/consts/const_let_eq.rs:234:5: 234:11
    let mut _8: bool;                    // in scope 0 at ui/consts/const_let_eq.rs:234:5: 234:11
    let mut _9: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:234:5: 234:16
    let mut _10: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:235:10: 235:16
    let _11: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:235:14: 235:15
    let mut _12: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:235:10: 235:16
    let mut _13: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:235:10: 235:16
    let mut _14: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:235:5: 235:16
    let mut _17: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:240:5: 240:15
    let mut _18: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:241:5: 241:15
    let mut _19: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:242:10: 242:23
    let mut _20: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:242:10: 242:15
    let mut _21: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:242:18: 242:23
    let mut _22: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:242:10: 242:23
    let mut _23: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:242:5: 242:23
    let mut _25: Foo<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:245:35: 245:41
    let _26: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:246:9: 246:10
    let mut _27: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:246:5: 246:11
    let mut _28: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:246:5: 246:11
    let mut _29: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:246:5: 246:18
    let mut _30: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:247:10: 247:18
    let _31: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:247:14: 247:15
    let mut _32: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:247:10: 247:16
    let mut _33: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:247:10: 247:16
    let mut _34: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:247:5: 247:18
    let mut _36: Bar<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:248:35: 248:47
    let _37: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:249:9: 249:10
    let mut _38: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:249:5: 249:11
    let mut _39: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:249:5: 249:11
    let mut _40: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:249:5: 249:18
    let mut _41: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:250:10: 250:18
    let _42: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:250:14: 250:15
    let mut _43: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:250:10: 250:16
    let mut _44: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:250:10: 250:16
    let mut _45: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:250:5: 250:18
    let mut _47: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:253:38: 253:41
    let _48: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:254:13: 254:14
    let mut _49: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:254:5: 254:15
    let mut _50: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:254:5: 254:15
    let mut _51: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:254:5: 254:20
    let mut _52: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:255:10: 255:20
    let _53: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:255:18: 255:19
    let mut _54: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:255:10: 255:20
    let mut _55: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:255:10: 255:20
    let mut _56: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:255:5: 255:20
    let mut _58: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:256:43: 256:46
    let _59: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:257:11: 257:12
    let mut _60: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:257:5: 257:13
    let mut _61: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:257:5: 257:13
    let mut _62: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:257:5: 257:18
    let mut _63: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:258:10: 258:18
    let _64: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:258:16: 258:17
    let mut _65: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:258:10: 258:18
    let mut _66: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:258:10: 258:18
    let mut _67: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:258:5: 258:18
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq.rs:227:23: 227:24
        let mut _3: u32;                 // in scope 1 at ui/consts/const_let_eq.rs:229:9: 229:14
        scope 2 {
            debug d => _3;               // in scope 2 at ui/consts/const_let_eq.rs:229:9: 229:14
            let mut _5: [u32; 1];        // in scope 2 at ui/consts/const_let_eq.rs:233:9: 233:16
            scope 3 {
                debug arr => _5;         // in scope 3 at ui/consts/const_let_eq.rs:233:9: 233:16
                let mut _15: Foo<u32>;   // in scope 3 at ui/consts/const_let_eq.rs:238:9: 238:16
                scope 4 {
                    debug foo => _15;    // in scope 4 at ui/consts/const_let_eq.rs:238:9: 238:16
                    let mut _16: Bar<u32>; // in scope 4 at ui/consts/const_let_eq.rs:239:9: 239:16
                    scope 5 {
                        debug bar => _16; // in scope 5 at ui/consts/const_let_eq.rs:239:9: 239:16
                        let mut _24: [Foo<u32>; 1]; // in scope 5 at ui/consts/const_let_eq.rs:245:9: 245:16
                        scope 6 {
                            debug arr => _24; // in scope 6 at ui/consts/const_let_eq.rs:245:9: 245:16
                            let mut _35: [Bar<u32>; 1]; // in scope 6 at ui/consts/const_let_eq.rs:248:9: 248:16
                            scope 7 {
                                debug arr => _35; // in scope 7 at ui/consts/const_let_eq.rs:248:9: 248:16
                                let mut _46: Foo<[u32; 1]>; // in scope 7 at ui/consts/const_let_eq.rs:253:9: 253:16
                                scope 8 {
                                    debug arr => _46; // in scope 8 at ui/consts/const_let_eq.rs:253:9: 253:16
                                    let mut _57: Bar<[u32; 1]>; // in scope 8 at ui/consts/const_let_eq.rs:256:9: 256:16
                                    scope 9 {
                                        debug arr => _57; // in scope 9 at ui/consts/const_let_eq.rs:256:9: 256:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const_let_eq.rs:227:23: 227:24
        _2 = (_1.0: u32);                // scope 0 at ui/consts/const_let_eq.rs:227:23: 227:24
        StorageLive(_3);                 // scope 1 at ui/consts/const_let_eq.rs:229:9: 229:14
        _3 = _2;                         // scope 1 at ui/consts/const_let_eq.rs:229:22: 229:23
        _4 = CheckedSub(_3, const 1_u32); // scope 2 at ui/consts/const_let_eq.rs:230:5: 230:11
        assert(!move (_4.1: bool), "attempt to compute `{} - {}`, which would overflow", _3, const 1_u32) -> bb1; // scope 2 at ui/consts/const_let_eq.rs:230:5: 230:11
    }

    bb1: {
        _3 = move (_4.0: u32);           // scope 2 at ui/consts/const_let_eq.rs:230:5: 230:11
        StorageLive(_5);                 // scope 2 at ui/consts/const_let_eq.rs:233:9: 233:16
        _5 = [const 2_u32];              // scope 2 at ui/consts/const_let_eq.rs:233:29: 233:32
        StorageLive(_6);                 // scope 3 at ui/consts/const_let_eq.rs:234:9: 234:10
        _6 = const 0_usize;              // scope 3 at ui/consts/const_let_eq.rs:234:9: 234:10
        _7 = Len(_5);                    // scope 3 at ui/consts/const_let_eq.rs:234:5: 234:11
        _8 = Lt(_6, _7);                 // scope 3 at ui/consts/const_let_eq.rs:234:5: 234:11
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> bb2; // scope 3 at ui/consts/const_let_eq.rs:234:5: 234:11
    }

    bb2: {
        _9 = CheckedSub(_5[_6], const 1_u32); // scope 3 at ui/consts/const_let_eq.rs:234:5: 234:16
        assert(!move (_9.1: bool), "attempt to compute `{} - {}`, which would overflow", _5[_6], const 1_u32) -> bb3; // scope 3 at ui/consts/const_let_eq.rs:234:5: 234:16
    }

    bb3: {
        _5[_6] = move (_9.0: u32);       // scope 3 at ui/consts/const_let_eq.rs:234:5: 234:16
        StorageDead(_6);                 // scope 3 at ui/consts/const_let_eq.rs:234:16: 234:17
        StorageLive(_10);                // scope 3 at ui/consts/const_let_eq.rs:235:10: 235:16
        StorageLive(_11);                // scope 3 at ui/consts/const_let_eq.rs:235:14: 235:15
        _11 = const 0_usize;             // scope 3 at ui/consts/const_let_eq.rs:235:14: 235:15
        _12 = Len(_5);                   // scope 3 at ui/consts/const_let_eq.rs:235:10: 235:16
        _13 = Lt(_11, _12);              // scope 3 at ui/consts/const_let_eq.rs:235:10: 235:16
        assert(move _13, "index out of bounds: the length is {} but the index is {}", move _12, _11) -> bb4; // scope 3 at ui/consts/const_let_eq.rs:235:10: 235:16
    }

    bb4: {
        _10 = _5[_11];                   // scope 3 at ui/consts/const_let_eq.rs:235:10: 235:16
        _14 = CheckedSub(_3, _10);       // scope 3 at ui/consts/const_let_eq.rs:235:5: 235:16
        assert(!move (_14.1: bool), "attempt to compute `{} - {}`, which would overflow", _3, move _10) -> bb5; // scope 3 at ui/consts/const_let_eq.rs:235:5: 235:16
    }

    bb5: {
        _3 = move (_14.0: u32);          // scope 3 at ui/consts/const_let_eq.rs:235:5: 235:16
        StorageDead(_10);                // scope 3 at ui/consts/const_let_eq.rs:235:15: 235:16
        StorageDead(_11);                // scope 3 at ui/consts/const_let_eq.rs:235:16: 235:17
        StorageLive(_15);                // scope 3 at ui/consts/const_let_eq.rs:238:9: 238:16
        _15 = Foo::<u32>(const 2_u32);   // scope 3 at ui/consts/const_let_eq.rs:238:29: 238:35
        StorageLive(_16);                // scope 4 at ui/consts/const_let_eq.rs:239:9: 239:16
        _16 = Bar::<u32> { x: const 2_u32 }; // scope 4 at ui/consts/const_let_eq.rs:239:29: 239:41
        _17 = CheckedSub((_15.0: u32), const 1_u32); // scope 5 at ui/consts/const_let_eq.rs:240:5: 240:15
        assert(!move (_17.1: bool), "attempt to compute `{} - {}`, which would overflow", (_15.0: u32), const 1_u32) -> bb6; // scope 5 at ui/consts/const_let_eq.rs:240:5: 240:15
    }

    bb6: {
        (_15.0: u32) = move (_17.0: u32); // scope 5 at ui/consts/const_let_eq.rs:240:5: 240:15
        _18 = CheckedSub((_16.0: u32), const 1_u32); // scope 5 at ui/consts/const_let_eq.rs:241:5: 241:15
        assert(!move (_18.1: bool), "attempt to compute `{} - {}`, which would overflow", (_16.0: u32), const 1_u32) -> bb7; // scope 5 at ui/consts/const_let_eq.rs:241:5: 241:15
    }

    bb7: {
        (_16.0: u32) = move (_18.0: u32); // scope 5 at ui/consts/const_let_eq.rs:241:5: 241:15
        StorageLive(_19);                // scope 5 at ui/consts/const_let_eq.rs:242:10: 242:23
        StorageLive(_20);                // scope 5 at ui/consts/const_let_eq.rs:242:10: 242:15
        _20 = (_15.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:242:10: 242:15
        StorageLive(_21);                // scope 5 at ui/consts/const_let_eq.rs:242:18: 242:23
        _21 = (_16.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:242:18: 242:23
        _22 = CheckedAdd(_20, _21);      // scope 5 at ui/consts/const_let_eq.rs:242:10: 242:23
        assert(!move (_22.1: bool), "attempt to compute `{} + {}`, which would overflow", move _20, move _21) -> bb8; // scope 5 at ui/consts/const_let_eq.rs:242:10: 242:23
    }

    bb8: {
        _19 = move (_22.0: u32);         // scope 5 at ui/consts/const_let_eq.rs:242:10: 242:23
        StorageDead(_21);                // scope 5 at ui/consts/const_let_eq.rs:242:22: 242:23
        StorageDead(_20);                // scope 5 at ui/consts/const_let_eq.rs:242:22: 242:23
        _23 = CheckedSub(_3, _19);       // scope 5 at ui/consts/const_let_eq.rs:242:5: 242:23
        assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", _3, move _19) -> bb9; // scope 5 at ui/consts/const_let_eq.rs:242:5: 242:23
    }

    bb9: {
        _3 = move (_23.0: u32);          // scope 5 at ui/consts/const_let_eq.rs:242:5: 242:23
        StorageDead(_19);                // scope 5 at ui/consts/const_let_eq.rs:242:22: 242:23
        StorageLive(_24);                // scope 5 at ui/consts/const_let_eq.rs:245:9: 245:16
        StorageLive(_25);                // scope 5 at ui/consts/const_let_eq.rs:245:35: 245:41
        _25 = Foo::<u32>(const 2_u32);   // scope 5 at ui/consts/const_let_eq.rs:245:35: 245:41
        _24 = [move _25];                // scope 5 at ui/consts/const_let_eq.rs:245:34: 245:42
        StorageDead(_25);                // scope 5 at ui/consts/const_let_eq.rs:245:41: 245:42
        StorageLive(_26);                // scope 6 at ui/consts/const_let_eq.rs:246:9: 246:10
        _26 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:246:9: 246:10
        _27 = Len(_24);                  // scope 6 at ui/consts/const_let_eq.rs:246:5: 246:11
        _28 = Lt(_26, _27);              // scope 6 at ui/consts/const_let_eq.rs:246:5: 246:11
        assert(move _28, "index out of bounds: the length is {} but the index is {}", move _27, _26) -> bb10; // scope 6 at ui/consts/const_let_eq.rs:246:5: 246:11
    }

    bb10: {
        _29 = CheckedSub((_24[_26].0: u32), const 1_u32); // scope 6 at ui/consts/const_let_eq.rs:246:5: 246:18
        assert(!move (_29.1: bool), "attempt to compute `{} - {}`, which would overflow", (_24[_26].0: u32), const 1_u32) -> bb11; // scope 6 at ui/consts/const_let_eq.rs:246:5: 246:18
    }

    bb11: {
        (_24[_26].0: u32) = move (_29.0: u32); // scope 6 at ui/consts/const_let_eq.rs:246:5: 246:18
        StorageDead(_26);                // scope 6 at ui/consts/const_let_eq.rs:246:18: 246:19
        StorageLive(_30);                // scope 6 at ui/consts/const_let_eq.rs:247:10: 247:18
        StorageLive(_31);                // scope 6 at ui/consts/const_let_eq.rs:247:14: 247:15
        _31 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:247:14: 247:15
        _32 = Len(_24);                  // scope 6 at ui/consts/const_let_eq.rs:247:10: 247:16
        _33 = Lt(_31, _32);              // scope 6 at ui/consts/const_let_eq.rs:247:10: 247:16
        assert(move _33, "index out of bounds: the length is {} but the index is {}", move _32, _31) -> bb12; // scope 6 at ui/consts/const_let_eq.rs:247:10: 247:16
    }

    bb12: {
        _30 = (_24[_31].0: u32);         // scope 6 at ui/consts/const_let_eq.rs:247:10: 247:18
        _34 = CheckedSub(_3, _30);       // scope 6 at ui/consts/const_let_eq.rs:247:5: 247:18
        assert(!move (_34.1: bool), "attempt to compute `{} - {}`, which would overflow", _3, move _30) -> bb13; // scope 6 at ui/consts/const_let_eq.rs:247:5: 247:18
    }

    bb13: {
        _3 = move (_34.0: u32);          // scope 6 at ui/consts/const_let_eq.rs:247:5: 247:18
        StorageDead(_30);                // scope 6 at ui/consts/const_let_eq.rs:247:17: 247:18
        StorageDead(_31);                // scope 6 at ui/consts/const_let_eq.rs:247:18: 247:19
        StorageLive(_35);                // scope 6 at ui/consts/const_let_eq.rs:248:9: 248:16
        StorageLive(_36);                // scope 6 at ui/consts/const_let_eq.rs:248:35: 248:47
        _36 = Bar::<u32> { x: const 2_u32 }; // scope 6 at ui/consts/const_let_eq.rs:248:35: 248:47
        _35 = [move _36];                // scope 6 at ui/consts/const_let_eq.rs:248:34: 248:48
        StorageDead(_36);                // scope 6 at ui/consts/const_let_eq.rs:248:47: 248:48
        StorageLive(_37);                // scope 7 at ui/consts/const_let_eq.rs:249:9: 249:10
        _37 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:249:9: 249:10
        _38 = Len(_35);                  // scope 7 at ui/consts/const_let_eq.rs:249:5: 249:11
        _39 = Lt(_37, _38);              // scope 7 at ui/consts/const_let_eq.rs:249:5: 249:11
        assert(move _39, "index out of bounds: the length is {} but the index is {}", move _38, _37) -> bb14; // scope 7 at ui/consts/const_let_eq.rs:249:5: 249:11
    }

    bb14: {
        _40 = CheckedSub((_35[_37].0: u32), const 1_u32); // scope 7 at ui/consts/const_let_eq.rs:249:5: 249:18
        assert(!move (_40.1: bool), "attempt to compute `{} - {}`, which would overflow", (_35[_37].0: u32), const 1_u32) -> bb15; // scope 7 at ui/consts/const_let_eq.rs:249:5: 249:18
    }

    bb15: {
        (_35[_37].0: u32) = move (_40.0: u32); // scope 7 at ui/consts/const_let_eq.rs:249:5: 249:18
        StorageDead(_37);                // scope 7 at ui/consts/const_let_eq.rs:249:18: 249:19
        StorageLive(_41);                // scope 7 at ui/consts/const_let_eq.rs:250:10: 250:18
        StorageLive(_42);                // scope 7 at ui/consts/const_let_eq.rs:250:14: 250:15
        _42 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:250:14: 250:15
        _43 = Len(_35);                  // scope 7 at ui/consts/const_let_eq.rs:250:10: 250:16
        _44 = Lt(_42, _43);              // scope 7 at ui/consts/const_let_eq.rs:250:10: 250:16
        assert(move _44, "index out of bounds: the length is {} but the index is {}", move _43, _42) -> bb16; // scope 7 at ui/consts/const_let_eq.rs:250:10: 250:16
    }

    bb16: {
        _41 = (_35[_42].0: u32);         // scope 7 at ui/consts/const_let_eq.rs:250:10: 250:18
        _45 = CheckedSub(_3, _41);       // scope 7 at ui/consts/const_let_eq.rs:250:5: 250:18
        assert(!move (_45.1: bool), "attempt to compute `{} - {}`, which would overflow", _3, move _41) -> bb17; // scope 7 at ui/consts/const_let_eq.rs:250:5: 250:18
    }

    bb17: {
        _3 = move (_45.0: u32);          // scope 7 at ui/consts/const_let_eq.rs:250:5: 250:18
        StorageDead(_41);                // scope 7 at ui/consts/const_let_eq.rs:250:17: 250:18
        StorageDead(_42);                // scope 7 at ui/consts/const_let_eq.rs:250:18: 250:19
        StorageLive(_46);                // scope 7 at ui/consts/const_let_eq.rs:253:9: 253:16
        StorageLive(_47);                // scope 7 at ui/consts/const_let_eq.rs:253:38: 253:41
        _47 = [const 2_u32];             // scope 7 at ui/consts/const_let_eq.rs:253:38: 253:41
        _46 = Foo::<[u32; 1]>(move _47); // scope 7 at ui/consts/const_let_eq.rs:253:34: 253:42
        StorageDead(_47);                // scope 7 at ui/consts/const_let_eq.rs:253:41: 253:42
        StorageLive(_48);                // scope 8 at ui/consts/const_let_eq.rs:254:13: 254:14
        _48 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:254:13: 254:14
        _49 = Len((_46.0: [u32; 1]));    // scope 8 at ui/consts/const_let_eq.rs:254:5: 254:15
        _50 = Lt(_48, _49);              // scope 8 at ui/consts/const_let_eq.rs:254:5: 254:15
        assert(move _50, "index out of bounds: the length is {} but the index is {}", move _49, _48) -> bb18; // scope 8 at ui/consts/const_let_eq.rs:254:5: 254:15
    }

    bb18: {
        _51 = CheckedSub((_46.0: [u32; 1])[_48], const 1_u32); // scope 8 at ui/consts/const_let_eq.rs:254:5: 254:20
        assert(!move (_51.1: bool), "attempt to compute `{} - {}`, which would overflow", (_46.0: [u32; 1])[_48], const 1_u32) -> bb19; // scope 8 at ui/consts/const_let_eq.rs:254:5: 254:20
    }

    bb19: {
        (_46.0: [u32; 1])[_48] = move (_51.0: u32); // scope 8 at ui/consts/const_let_eq.rs:254:5: 254:20
        StorageDead(_48);                // scope 8 at ui/consts/const_let_eq.rs:254:20: 254:21
        StorageLive(_52);                // scope 8 at ui/consts/const_let_eq.rs:255:10: 255:20
        StorageLive(_53);                // scope 8 at ui/consts/const_let_eq.rs:255:18: 255:19
        _53 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:255:18: 255:19
        _54 = Len((_46.0: [u32; 1]));    // scope 8 at ui/consts/const_let_eq.rs:255:10: 255:20
        _55 = Lt(_53, _54);              // scope 8 at ui/consts/const_let_eq.rs:255:10: 255:20
        assert(move _55, "index out of bounds: the length is {} but the index is {}", move _54, _53) -> bb20; // scope 8 at ui/consts/const_let_eq.rs:255:10: 255:20
    }

    bb20: {
        _52 = (_46.0: [u32; 1])[_53];    // scope 8 at ui/consts/const_let_eq.rs:255:10: 255:20
        _56 = CheckedSub(_3, _52);       // scope 8 at ui/consts/const_let_eq.rs:255:5: 255:20
        assert(!move (_56.1: bool), "attempt to compute `{} - {}`, which would overflow", _3, move _52) -> bb21; // scope 8 at ui/consts/const_let_eq.rs:255:5: 255:20
    }

    bb21: {
        _3 = move (_56.0: u32);          // scope 8 at ui/consts/const_let_eq.rs:255:5: 255:20
        StorageDead(_52);                // scope 8 at ui/consts/const_let_eq.rs:255:19: 255:20
        StorageDead(_53);                // scope 8 at ui/consts/const_let_eq.rs:255:20: 255:21
        StorageLive(_57);                // scope 8 at ui/consts/const_let_eq.rs:256:9: 256:16
        StorageLive(_58);                // scope 8 at ui/consts/const_let_eq.rs:256:43: 256:46
        _58 = [const 2_u32];             // scope 8 at ui/consts/const_let_eq.rs:256:43: 256:46
        _57 = Bar::<[u32; 1]> { x: move _58 }; // scope 8 at ui/consts/const_let_eq.rs:256:34: 256:48
        StorageDead(_58);                // scope 8 at ui/consts/const_let_eq.rs:256:47: 256:48
        StorageLive(_59);                // scope 9 at ui/consts/const_let_eq.rs:257:11: 257:12
        _59 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:257:11: 257:12
        _60 = Len((_57.0: [u32; 1]));    // scope 9 at ui/consts/const_let_eq.rs:257:5: 257:13
        _61 = Lt(_59, _60);              // scope 9 at ui/consts/const_let_eq.rs:257:5: 257:13
        assert(move _61, "index out of bounds: the length is {} but the index is {}", move _60, _59) -> bb22; // scope 9 at ui/consts/const_let_eq.rs:257:5: 257:13
    }

    bb22: {
        _62 = CheckedSub((_57.0: [u32; 1])[_59], const 1_u32); // scope 9 at ui/consts/const_let_eq.rs:257:5: 257:18
        assert(!move (_62.1: bool), "attempt to compute `{} - {}`, which would overflow", (_57.0: [u32; 1])[_59], const 1_u32) -> bb23; // scope 9 at ui/consts/const_let_eq.rs:257:5: 257:18
    }

    bb23: {
        (_57.0: [u32; 1])[_59] = move (_62.0: u32); // scope 9 at ui/consts/const_let_eq.rs:257:5: 257:18
        StorageDead(_59);                // scope 9 at ui/consts/const_let_eq.rs:257:18: 257:19
        StorageLive(_63);                // scope 9 at ui/consts/const_let_eq.rs:258:10: 258:18
        StorageLive(_64);                // scope 9 at ui/consts/const_let_eq.rs:258:16: 258:17
        _64 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:258:16: 258:17
        _65 = Len((_57.0: [u32; 1]));    // scope 9 at ui/consts/const_let_eq.rs:258:10: 258:18
        _66 = Lt(_64, _65);              // scope 9 at ui/consts/const_let_eq.rs:258:10: 258:18
        assert(move _66, "index out of bounds: the length is {} but the index is {}", move _65, _64) -> bb24; // scope 9 at ui/consts/const_let_eq.rs:258:10: 258:18
    }

    bb24: {
        _63 = (_57.0: [u32; 1])[_64];    // scope 9 at ui/consts/const_let_eq.rs:258:10: 258:18
        _67 = CheckedSub(_3, _63);       // scope 9 at ui/consts/const_let_eq.rs:258:5: 258:18
        assert(!move (_67.1: bool), "attempt to compute `{} - {}`, which would overflow", _3, move _63) -> bb25; // scope 9 at ui/consts/const_let_eq.rs:258:5: 258:18
    }

    bb25: {
        _3 = move (_67.0: u32);          // scope 9 at ui/consts/const_let_eq.rs:258:5: 258:18
        StorageDead(_63);                // scope 9 at ui/consts/const_let_eq.rs:258:17: 258:18
        StorageDead(_64);                // scope 9 at ui/consts/const_let_eq.rs:258:18: 258:19
        _0 = _3;                         // scope 9 at ui/consts/const_let_eq.rs:260:5: 260:6
        StorageDead(_57);                // scope 8 at ui/consts/const_let_eq.rs:261:1: 261:2
        StorageDead(_46);                // scope 7 at ui/consts/const_let_eq.rs:261:1: 261:2
        StorageDead(_35);                // scope 6 at ui/consts/const_let_eq.rs:261:1: 261:2
        StorageDead(_24);                // scope 5 at ui/consts/const_let_eq.rs:261:1: 261:2
        StorageDead(_16);                // scope 4 at ui/consts/const_let_eq.rs:261:1: 261:2
        StorageDead(_15);                // scope 3 at ui/consts/const_let_eq.rs:261:1: 261:2
        StorageDead(_5);                 // scope 2 at ui/consts/const_let_eq.rs:261:1: 261:2
        StorageDead(_3);                 // scope 1 at ui/consts/const_let_eq.rs:261:1: 261:2
        StorageDead(_2);                 // scope 0 at ui/consts/const_let_eq.rs:261:1: 261:2
        return;                          // scope 0 at ui/consts/const_let_eq.rs:261:2: 261:2
    }
}

sub_assign::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:233:24: 233:25

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:233:24: 233:25
        return;                          // scope 0 at ui/consts/const_let_eq.rs:233:24: 233:25
    }
}

sub_assign::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:245:29: 245:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:245:29: 245:30
        return;                          // scope 0 at ui/consts/const_let_eq.rs:245:29: 245:30
    }
}

sub_assign::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:248:29: 248:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:248:29: 248:30
        return;                          // scope 0 at ui/consts/const_let_eq.rs:248:29: 248:30
    }
}

sub_assign::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:253:28: 253:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:253:28: 253:29
        return;                          // scope 0 at ui/consts/const_let_eq.rs:253:28: 253:29
    }
}

sub_assign::{constant#4}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:256:28: 256:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:256:28: 256:29
        return;                          // scope 0 at ui/consts/const_let_eq.rs:256:28: 256:29
    }
}

fn shl_assign(_1: W) -> u32 {
    let _2: u32;                         // in scope 0 at ui/consts/const_let_eq.rs:263:23: 263:24
    let mut _3: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:266:5: 266:12
    let _5: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:270:9: 270:10
    let mut _6: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:270:5: 270:17
    let mut _7: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:271:11: 271:17
    let _8: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:271:15: 271:16
    let mut _9: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:271:5: 271:17
    let mut _12: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:277:5: 277:16
    let mut _13: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:278:11: 278:24
    let mut _14: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:278:11: 278:16
    let mut _15: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:278:19: 278:24
    let mut _16: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:278:11: 278:24
    let mut _17: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:278:5: 278:24
    let mut _19: Foo<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:281:35: 281:41
    let _20: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:282:9: 282:10
    let mut _21: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:282:5: 282:19
    let mut _22: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:283:11: 283:19
    let _23: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:283:15: 283:16
    let mut _24: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:283:5: 283:19
    let mut _26: Bar<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:284:35: 284:47
    let _27: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:285:9: 285:10
    let mut _28: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:285:5: 285:19
    let mut _29: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:286:11: 286:19
    let _30: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:286:15: 286:16
    let mut _31: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:286:5: 286:19
    let mut _33: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:289:38: 289:41
    let _34: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:290:13: 290:14
    let mut _35: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:290:5: 290:21
    let mut _36: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:291:11: 291:21
    let _37: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:291:19: 291:20
    let mut _38: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:291:5: 291:21
    let mut _40: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:292:43: 292:46
    let _41: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:293:11: 293:12
    let mut _42: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:293:5: 293:19
    let mut _43: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:294:11: 294:19
    let _44: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:294:17: 294:18
    let mut _45: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:294:5: 294:19
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq.rs:263:23: 263:24
        let mut _0: u32;                 // return place in scope 1 at ui/consts/const_let_eq.rs:265:9: 265:14
        scope 2 {
            debug d => _0;               // in scope 2 at ui/consts/const_let_eq.rs:265:9: 265:14
            let mut _4: [u32; 1];        // in scope 2 at ui/consts/const_let_eq.rs:269:9: 269:16
            scope 3 {
                debug arr => _4;         // in scope 3 at ui/consts/const_let_eq.rs:269:9: 269:16
                let mut _10: Foo<u32>;   // in scope 3 at ui/consts/const_let_eq.rs:274:9: 274:16
                scope 4 {
                    debug foo => _10;    // in scope 4 at ui/consts/const_let_eq.rs:274:9: 274:16
                    let mut _11: Bar<u32>; // in scope 4 at ui/consts/const_let_eq.rs:275:9: 275:16
                    scope 5 {
                        debug bar => _11; // in scope 5 at ui/consts/const_let_eq.rs:275:9: 275:16
                        let mut _18: [Foo<u32>; 1]; // in scope 5 at ui/consts/const_let_eq.rs:281:9: 281:16
                        scope 6 {
                            debug arr => _18; // in scope 6 at ui/consts/const_let_eq.rs:281:9: 281:16
                            let mut _25: [Bar<u32>; 1]; // in scope 6 at ui/consts/const_let_eq.rs:284:9: 284:16
                            scope 7 {
                                debug arr => _25; // in scope 7 at ui/consts/const_let_eq.rs:284:9: 284:16
                                let mut _32: Foo<[u32; 1]>; // in scope 7 at ui/consts/const_let_eq.rs:289:9: 289:16
                                scope 8 {
                                    debug arr => _32; // in scope 8 at ui/consts/const_let_eq.rs:289:9: 289:16
                                    let mut _39: Bar<[u32; 1]>; // in scope 8 at ui/consts/const_let_eq.rs:292:9: 292:16
                                    scope 9 {
                                        debug arr => _39; // in scope 9 at ui/consts/const_let_eq.rs:292:9: 292:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = (_1.0: u32);                // scope 0 at ui/consts/const_let_eq.rs:263:23: 263:24
        _0 = _2;                         // scope 1 at ui/consts/const_let_eq.rs:265:22: 265:23
        _3 = CheckedShl(_0, const 1_i32); // scope 2 at ui/consts/const_let_eq.rs:266:5: 266:12
        assert(!move (_3.1: bool), "attempt to shift left by `{}`, which would overflow", const 1_i32) -> bb1; // scope 2 at ui/consts/const_let_eq.rs:266:5: 266:12
    }

    bb1: {
        _0 = move (_3.0: u32);           // scope 2 at ui/consts/const_let_eq.rs:266:5: 266:12
        _4 = [const 1_u32];              // scope 2 at ui/consts/const_let_eq.rs:269:29: 269:32
        _5 = const 0_usize;              // scope 3 at ui/consts/const_let_eq.rs:270:9: 270:10
        _6 = CheckedShl(_4[_5], const 1_i32); // scope 3 at ui/consts/const_let_eq.rs:270:5: 270:17
        assert(!move (_6.1: bool), "attempt to shift left by `{}`, which would overflow", const 1_i32) -> bb2; // scope 3 at ui/consts/const_let_eq.rs:270:5: 270:17
    }

    bb2: {
        _4[_5] = move (_6.0: u32);       // scope 3 at ui/consts/const_let_eq.rs:270:5: 270:17
        _8 = const 0_usize;              // scope 3 at ui/consts/const_let_eq.rs:271:15: 271:16
        _7 = _4[_8];                     // scope 3 at ui/consts/const_let_eq.rs:271:11: 271:17
        _9 = CheckedShl(_0, _7);         // scope 3 at ui/consts/const_let_eq.rs:271:5: 271:17
        assert(!move (_9.1: bool), "attempt to shift left by `{}`, which would overflow", move _7) -> bb3; // scope 3 at ui/consts/const_let_eq.rs:271:5: 271:17
    }

    bb3: {
        _0 = move (_9.0: u32);           // scope 3 at ui/consts/const_let_eq.rs:271:5: 271:17
        _10 = const Foo::<u32>(1_u32);   // scope 3 at ui/consts/const_let_eq.rs:274:29: 274:35
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:274:29: 274:35
                                         // + literal: Const { ty: Foo<u32>, val: Value(Scalar(0x00000001)) }
        _11 = const Bar::<u32> {{ x: 1_u32 }}; // scope 4 at ui/consts/const_let_eq.rs:275:29: 275:41
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:275:29: 275:41
                                         // + literal: Const { ty: Bar<u32>, val: Value(Scalar(0x00000001)) }
        (_10.0: u32) = const 2_u32;      // scope 5 at ui/consts/const_let_eq.rs:276:5: 276:16
        _12 = CheckedShl((_11.0: u32), const 1_i32); // scope 5 at ui/consts/const_let_eq.rs:277:5: 277:16
        assert(!move (_12.1: bool), "attempt to shift left by `{}`, which would overflow", const 1_i32) -> bb4; // scope 5 at ui/consts/const_let_eq.rs:277:5: 277:16
    }

    bb4: {
        (_11.0: u32) = move (_12.0: u32); // scope 5 at ui/consts/const_let_eq.rs:277:5: 277:16
        _14 = (_10.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:278:11: 278:16
        _15 = (_11.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:278:19: 278:24
        _16 = CheckedAdd(_14, _15);      // scope 5 at ui/consts/const_let_eq.rs:278:11: 278:24
        assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", move _14, move _15) -> bb5; // scope 5 at ui/consts/const_let_eq.rs:278:11: 278:24
    }

    bb5: {
        _13 = move (_16.0: u32);         // scope 5 at ui/consts/const_let_eq.rs:278:11: 278:24
        _17 = CheckedShl(_0, _13);       // scope 5 at ui/consts/const_let_eq.rs:278:5: 278:24
        assert(!move (_17.1: bool), "attempt to shift left by `{}`, which would overflow", move _13) -> bb6; // scope 5 at ui/consts/const_let_eq.rs:278:5: 278:24
    }

    bb6: {
        _0 = move (_17.0: u32);          // scope 5 at ui/consts/const_let_eq.rs:278:5: 278:24
        _19 = const Foo::<u32>(1_u32);   // scope 5 at ui/consts/const_let_eq.rs:281:35: 281:41
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:281:35: 281:41
                                         // + literal: Const { ty: Foo<u32>, val: Value(Scalar(0x00000001)) }
        _18 = [move _19];                // scope 5 at ui/consts/const_let_eq.rs:281:34: 281:42
        _20 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:282:9: 282:10
        _21 = CheckedShl((_18[_20].0: u32), const 1_i32); // scope 6 at ui/consts/const_let_eq.rs:282:5: 282:19
        assert(!move (_21.1: bool), "attempt to shift left by `{}`, which would overflow", const 1_i32) -> bb7; // scope 6 at ui/consts/const_let_eq.rs:282:5: 282:19
    }

    bb7: {
        (_18[_20].0: u32) = move (_21.0: u32); // scope 6 at ui/consts/const_let_eq.rs:282:5: 282:19
        _23 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:283:15: 283:16
        _22 = (_18[_23].0: u32);         // scope 6 at ui/consts/const_let_eq.rs:283:11: 283:19
        _24 = CheckedShl(_0, _22);       // scope 6 at ui/consts/const_let_eq.rs:283:5: 283:19
        assert(!move (_24.1: bool), "attempt to shift left by `{}`, which would overflow", move _22) -> bb8; // scope 6 at ui/consts/const_let_eq.rs:283:5: 283:19
    }

    bb8: {
        _0 = move (_24.0: u32);          // scope 6 at ui/consts/const_let_eq.rs:283:5: 283:19
        _26 = const Bar::<u32> {{ x: 1_u32 }}; // scope 6 at ui/consts/const_let_eq.rs:284:35: 284:47
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:284:35: 284:47
                                         // + literal: Const { ty: Bar<u32>, val: Value(Scalar(0x00000001)) }
        _25 = [move _26];                // scope 6 at ui/consts/const_let_eq.rs:284:34: 284:48
        _27 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:285:9: 285:10
        _28 = CheckedShl((_25[_27].0: u32), const 1_i32); // scope 7 at ui/consts/const_let_eq.rs:285:5: 285:19
        assert(!move (_28.1: bool), "attempt to shift left by `{}`, which would overflow", const 1_i32) -> bb9; // scope 7 at ui/consts/const_let_eq.rs:285:5: 285:19
    }

    bb9: {
        (_25[_27].0: u32) = move (_28.0: u32); // scope 7 at ui/consts/const_let_eq.rs:285:5: 285:19
        _30 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:286:15: 286:16
        _29 = (_25[_30].0: u32);         // scope 7 at ui/consts/const_let_eq.rs:286:11: 286:19
        _31 = CheckedShl(_0, _29);       // scope 7 at ui/consts/const_let_eq.rs:286:5: 286:19
        assert(!move (_31.1: bool), "attempt to shift left by `{}`, which would overflow", move _29) -> bb10; // scope 7 at ui/consts/const_let_eq.rs:286:5: 286:19
    }

    bb10: {
        _0 = move (_31.0: u32);          // scope 7 at ui/consts/const_let_eq.rs:286:5: 286:19
        _33 = [const 1_u32];             // scope 7 at ui/consts/const_let_eq.rs:289:38: 289:41
        _32 = Foo::<[u32; 1]>(move _33); // scope 7 at ui/consts/const_let_eq.rs:289:34: 289:42
        _34 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:290:13: 290:14
        _35 = CheckedShl((_32.0: [u32; 1])[_34], const 1_i32); // scope 8 at ui/consts/const_let_eq.rs:290:5: 290:21
        assert(!move (_35.1: bool), "attempt to shift left by `{}`, which would overflow", const 1_i32) -> bb11; // scope 8 at ui/consts/const_let_eq.rs:290:5: 290:21
    }

    bb11: {
        (_32.0: [u32; 1])[_34] = move (_35.0: u32); // scope 8 at ui/consts/const_let_eq.rs:290:5: 290:21
        _37 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:291:19: 291:20
        _36 = (_32.0: [u32; 1])[_37];    // scope 8 at ui/consts/const_let_eq.rs:291:11: 291:21
        _38 = CheckedShl(_0, _36);       // scope 8 at ui/consts/const_let_eq.rs:291:5: 291:21
        assert(!move (_38.1: bool), "attempt to shift left by `{}`, which would overflow", move _36) -> bb12; // scope 8 at ui/consts/const_let_eq.rs:291:5: 291:21
    }

    bb12: {
        _0 = move (_38.0: u32);          // scope 8 at ui/consts/const_let_eq.rs:291:5: 291:21
        _40 = [const 1_u32];             // scope 8 at ui/consts/const_let_eq.rs:292:43: 292:46
        _39 = Bar::<[u32; 1]> { x: move _40 }; // scope 8 at ui/consts/const_let_eq.rs:292:34: 292:48
        _41 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:293:11: 293:12
        _42 = CheckedShl((_39.0: [u32; 1])[_41], const 1_i32); // scope 9 at ui/consts/const_let_eq.rs:293:5: 293:19
        assert(!move (_42.1: bool), "attempt to shift left by `{}`, which would overflow", const 1_i32) -> bb13; // scope 9 at ui/consts/const_let_eq.rs:293:5: 293:19
    }

    bb13: {
        (_39.0: [u32; 1])[_41] = move (_42.0: u32); // scope 9 at ui/consts/const_let_eq.rs:293:5: 293:19
        _44 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:294:17: 294:18
        _43 = (_39.0: [u32; 1])[_44];    // scope 9 at ui/consts/const_let_eq.rs:294:11: 294:19
        _45 = CheckedShl(_0, _43);       // scope 9 at ui/consts/const_let_eq.rs:294:5: 294:19
        assert(!move (_45.1: bool), "attempt to shift left by `{}`, which would overflow", move _43) -> bb14; // scope 9 at ui/consts/const_let_eq.rs:294:5: 294:19
    }

    bb14: {
        _0 = move (_45.0: u32);          // scope 9 at ui/consts/const_let_eq.rs:294:5: 294:19
        return;                          // scope 0 at ui/consts/const_let_eq.rs:297:2: 297:2
    }
}

// MIR FOR CTFE
fn shl_assign(_1: W) -> u32 {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const_let_eq.rs:263:33: 263:36
    let _2: u32;                         // in scope 0 at ui/consts/const_let_eq.rs:263:23: 263:24
    let mut _4: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:266:5: 266:12
    let _6: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:270:9: 270:10
    let mut _7: usize;                   // in scope 0 at ui/consts/const_let_eq.rs:270:5: 270:11
    let mut _8: bool;                    // in scope 0 at ui/consts/const_let_eq.rs:270:5: 270:11
    let mut _9: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:270:5: 270:17
    let mut _10: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:271:11: 271:17
    let _11: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:271:15: 271:16
    let mut _12: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:271:11: 271:17
    let mut _13: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:271:11: 271:17
    let mut _14: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:271:5: 271:17
    let mut _17: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:276:5: 276:16
    let mut _18: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:277:5: 277:16
    let mut _19: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:278:11: 278:24
    let mut _20: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:278:11: 278:16
    let mut _21: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:278:19: 278:24
    let mut _22: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:278:11: 278:24
    let mut _23: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:278:5: 278:24
    let mut _25: Foo<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:281:35: 281:41
    let _26: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:282:9: 282:10
    let mut _27: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:282:5: 282:11
    let mut _28: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:282:5: 282:11
    let mut _29: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:282:5: 282:19
    let mut _30: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:283:11: 283:19
    let _31: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:283:15: 283:16
    let mut _32: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:283:11: 283:17
    let mut _33: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:283:11: 283:17
    let mut _34: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:283:5: 283:19
    let mut _36: Bar<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:284:35: 284:47
    let _37: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:285:9: 285:10
    let mut _38: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:285:5: 285:11
    let mut _39: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:285:5: 285:11
    let mut _40: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:285:5: 285:19
    let mut _41: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:286:11: 286:19
    let _42: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:286:15: 286:16
    let mut _43: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:286:11: 286:17
    let mut _44: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:286:11: 286:17
    let mut _45: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:286:5: 286:19
    let mut _47: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:289:38: 289:41
    let _48: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:290:13: 290:14
    let mut _49: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:290:5: 290:15
    let mut _50: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:290:5: 290:15
    let mut _51: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:290:5: 290:21
    let mut _52: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:291:11: 291:21
    let _53: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:291:19: 291:20
    let mut _54: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:291:11: 291:21
    let mut _55: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:291:11: 291:21
    let mut _56: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:291:5: 291:21
    let mut _58: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:292:43: 292:46
    let _59: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:293:11: 293:12
    let mut _60: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:293:5: 293:13
    let mut _61: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:293:5: 293:13
    let mut _62: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:293:5: 293:19
    let mut _63: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:294:11: 294:19
    let _64: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:294:17: 294:18
    let mut _65: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:294:11: 294:19
    let mut _66: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:294:11: 294:19
    let mut _67: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:294:5: 294:19
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq.rs:263:23: 263:24
        let mut _3: u32;                 // in scope 1 at ui/consts/const_let_eq.rs:265:9: 265:14
        scope 2 {
            debug d => _3;               // in scope 2 at ui/consts/const_let_eq.rs:265:9: 265:14
            let mut _5: [u32; 1];        // in scope 2 at ui/consts/const_let_eq.rs:269:9: 269:16
            scope 3 {
                debug arr => _5;         // in scope 3 at ui/consts/const_let_eq.rs:269:9: 269:16
                let mut _15: Foo<u32>;   // in scope 3 at ui/consts/const_let_eq.rs:274:9: 274:16
                scope 4 {
                    debug foo => _15;    // in scope 4 at ui/consts/const_let_eq.rs:274:9: 274:16
                    let mut _16: Bar<u32>; // in scope 4 at ui/consts/const_let_eq.rs:275:9: 275:16
                    scope 5 {
                        debug bar => _16; // in scope 5 at ui/consts/const_let_eq.rs:275:9: 275:16
                        let mut _24: [Foo<u32>; 1]; // in scope 5 at ui/consts/const_let_eq.rs:281:9: 281:16
                        scope 6 {
                            debug arr => _24; // in scope 6 at ui/consts/const_let_eq.rs:281:9: 281:16
                            let mut _35: [Bar<u32>; 1]; // in scope 6 at ui/consts/const_let_eq.rs:284:9: 284:16
                            scope 7 {
                                debug arr => _35; // in scope 7 at ui/consts/const_let_eq.rs:284:9: 284:16
                                let mut _46: Foo<[u32; 1]>; // in scope 7 at ui/consts/const_let_eq.rs:289:9: 289:16
                                scope 8 {
                                    debug arr => _46; // in scope 8 at ui/consts/const_let_eq.rs:289:9: 289:16
                                    let mut _57: Bar<[u32; 1]>; // in scope 8 at ui/consts/const_let_eq.rs:292:9: 292:16
                                    scope 9 {
                                        debug arr => _57; // in scope 9 at ui/consts/const_let_eq.rs:292:9: 292:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const_let_eq.rs:263:23: 263:24
        _2 = (_1.0: u32);                // scope 0 at ui/consts/const_let_eq.rs:263:23: 263:24
        StorageLive(_3);                 // scope 1 at ui/consts/const_let_eq.rs:265:9: 265:14
        _3 = _2;                         // scope 1 at ui/consts/const_let_eq.rs:265:22: 265:23
        _4 = CheckedShl(_3, const 1_i32); // scope 2 at ui/consts/const_let_eq.rs:266:5: 266:12
        assert(!move (_4.1: bool), "attempt to shift left by `{}`, which would overflow", const 1_i32) -> bb1; // scope 2 at ui/consts/const_let_eq.rs:266:5: 266:12
    }

    bb1: {
        _3 = move (_4.0: u32);           // scope 2 at ui/consts/const_let_eq.rs:266:5: 266:12
        StorageLive(_5);                 // scope 2 at ui/consts/const_let_eq.rs:269:9: 269:16
        _5 = [const 1_u32];              // scope 2 at ui/consts/const_let_eq.rs:269:29: 269:32
        StorageLive(_6);                 // scope 3 at ui/consts/const_let_eq.rs:270:9: 270:10
        _6 = const 0_usize;              // scope 3 at ui/consts/const_let_eq.rs:270:9: 270:10
        _7 = Len(_5);                    // scope 3 at ui/consts/const_let_eq.rs:270:5: 270:11
        _8 = Lt(_6, _7);                 // scope 3 at ui/consts/const_let_eq.rs:270:5: 270:11
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> bb2; // scope 3 at ui/consts/const_let_eq.rs:270:5: 270:11
    }

    bb2: {
        _9 = CheckedShl(_5[_6], const 1_i32); // scope 3 at ui/consts/const_let_eq.rs:270:5: 270:17
        assert(!move (_9.1: bool), "attempt to shift left by `{}`, which would overflow", const 1_i32) -> bb3; // scope 3 at ui/consts/const_let_eq.rs:270:5: 270:17
    }

    bb3: {
        _5[_6] = move (_9.0: u32);       // scope 3 at ui/consts/const_let_eq.rs:270:5: 270:17
        StorageDead(_6);                 // scope 3 at ui/consts/const_let_eq.rs:270:17: 270:18
        StorageLive(_10);                // scope 3 at ui/consts/const_let_eq.rs:271:11: 271:17
        StorageLive(_11);                // scope 3 at ui/consts/const_let_eq.rs:271:15: 271:16
        _11 = const 0_usize;             // scope 3 at ui/consts/const_let_eq.rs:271:15: 271:16
        _12 = Len(_5);                   // scope 3 at ui/consts/const_let_eq.rs:271:11: 271:17
        _13 = Lt(_11, _12);              // scope 3 at ui/consts/const_let_eq.rs:271:11: 271:17
        assert(move _13, "index out of bounds: the length is {} but the index is {}", move _12, _11) -> bb4; // scope 3 at ui/consts/const_let_eq.rs:271:11: 271:17
    }

    bb4: {
        _10 = _5[_11];                   // scope 3 at ui/consts/const_let_eq.rs:271:11: 271:17
        _14 = CheckedShl(_3, _10);       // scope 3 at ui/consts/const_let_eq.rs:271:5: 271:17
        assert(!move (_14.1: bool), "attempt to shift left by `{}`, which would overflow", move _10) -> bb5; // scope 3 at ui/consts/const_let_eq.rs:271:5: 271:17
    }

    bb5: {
        _3 = move (_14.0: u32);          // scope 3 at ui/consts/const_let_eq.rs:271:5: 271:17
        StorageDead(_10);                // scope 3 at ui/consts/const_let_eq.rs:271:16: 271:17
        StorageDead(_11);                // scope 3 at ui/consts/const_let_eq.rs:271:17: 271:18
        StorageLive(_15);                // scope 3 at ui/consts/const_let_eq.rs:274:9: 274:16
        _15 = Foo::<u32>(const 1_u32);   // scope 3 at ui/consts/const_let_eq.rs:274:29: 274:35
        StorageLive(_16);                // scope 4 at ui/consts/const_let_eq.rs:275:9: 275:16
        _16 = Bar::<u32> { x: const 1_u32 }; // scope 4 at ui/consts/const_let_eq.rs:275:29: 275:41
        _17 = CheckedShl((_15.0: u32), const 1_i32); // scope 5 at ui/consts/const_let_eq.rs:276:5: 276:16
        assert(!move (_17.1: bool), "attempt to shift left by `{}`, which would overflow", const 1_i32) -> bb6; // scope 5 at ui/consts/const_let_eq.rs:276:5: 276:16
    }

    bb6: {
        (_15.0: u32) = move (_17.0: u32); // scope 5 at ui/consts/const_let_eq.rs:276:5: 276:16
        _18 = CheckedShl((_16.0: u32), const 1_i32); // scope 5 at ui/consts/const_let_eq.rs:277:5: 277:16
        assert(!move (_18.1: bool), "attempt to shift left by `{}`, which would overflow", const 1_i32) -> bb7; // scope 5 at ui/consts/const_let_eq.rs:277:5: 277:16
    }

    bb7: {
        (_16.0: u32) = move (_18.0: u32); // scope 5 at ui/consts/const_let_eq.rs:277:5: 277:16
        StorageLive(_19);                // scope 5 at ui/consts/const_let_eq.rs:278:11: 278:24
        StorageLive(_20);                // scope 5 at ui/consts/const_let_eq.rs:278:11: 278:16
        _20 = (_15.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:278:11: 278:16
        StorageLive(_21);                // scope 5 at ui/consts/const_let_eq.rs:278:19: 278:24
        _21 = (_16.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:278:19: 278:24
        _22 = CheckedAdd(_20, _21);      // scope 5 at ui/consts/const_let_eq.rs:278:11: 278:24
        assert(!move (_22.1: bool), "attempt to compute `{} + {}`, which would overflow", move _20, move _21) -> bb8; // scope 5 at ui/consts/const_let_eq.rs:278:11: 278:24
    }

    bb8: {
        _19 = move (_22.0: u32);         // scope 5 at ui/consts/const_let_eq.rs:278:11: 278:24
        StorageDead(_21);                // scope 5 at ui/consts/const_let_eq.rs:278:23: 278:24
        StorageDead(_20);                // scope 5 at ui/consts/const_let_eq.rs:278:23: 278:24
        _23 = CheckedShl(_3, _19);       // scope 5 at ui/consts/const_let_eq.rs:278:5: 278:24
        assert(!move (_23.1: bool), "attempt to shift left by `{}`, which would overflow", move _19) -> bb9; // scope 5 at ui/consts/const_let_eq.rs:278:5: 278:24
    }

    bb9: {
        _3 = move (_23.0: u32);          // scope 5 at ui/consts/const_let_eq.rs:278:5: 278:24
        StorageDead(_19);                // scope 5 at ui/consts/const_let_eq.rs:278:23: 278:24
        StorageLive(_24);                // scope 5 at ui/consts/const_let_eq.rs:281:9: 281:16
        StorageLive(_25);                // scope 5 at ui/consts/const_let_eq.rs:281:35: 281:41
        _25 = Foo::<u32>(const 1_u32);   // scope 5 at ui/consts/const_let_eq.rs:281:35: 281:41
        _24 = [move _25];                // scope 5 at ui/consts/const_let_eq.rs:281:34: 281:42
        StorageDead(_25);                // scope 5 at ui/consts/const_let_eq.rs:281:41: 281:42
        StorageLive(_26);                // scope 6 at ui/consts/const_let_eq.rs:282:9: 282:10
        _26 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:282:9: 282:10
        _27 = Len(_24);                  // scope 6 at ui/consts/const_let_eq.rs:282:5: 282:11
        _28 = Lt(_26, _27);              // scope 6 at ui/consts/const_let_eq.rs:282:5: 282:11
        assert(move _28, "index out of bounds: the length is {} but the index is {}", move _27, _26) -> bb10; // scope 6 at ui/consts/const_let_eq.rs:282:5: 282:11
    }

    bb10: {
        _29 = CheckedShl((_24[_26].0: u32), const 1_i32); // scope 6 at ui/consts/const_let_eq.rs:282:5: 282:19
        assert(!move (_29.1: bool), "attempt to shift left by `{}`, which would overflow", const 1_i32) -> bb11; // scope 6 at ui/consts/const_let_eq.rs:282:5: 282:19
    }

    bb11: {
        (_24[_26].0: u32) = move (_29.0: u32); // scope 6 at ui/consts/const_let_eq.rs:282:5: 282:19
        StorageDead(_26);                // scope 6 at ui/consts/const_let_eq.rs:282:19: 282:20
        StorageLive(_30);                // scope 6 at ui/consts/const_let_eq.rs:283:11: 283:19
        StorageLive(_31);                // scope 6 at ui/consts/const_let_eq.rs:283:15: 283:16
        _31 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:283:15: 283:16
        _32 = Len(_24);                  // scope 6 at ui/consts/const_let_eq.rs:283:11: 283:17
        _33 = Lt(_31, _32);              // scope 6 at ui/consts/const_let_eq.rs:283:11: 283:17
        assert(move _33, "index out of bounds: the length is {} but the index is {}", move _32, _31) -> bb12; // scope 6 at ui/consts/const_let_eq.rs:283:11: 283:17
    }

    bb12: {
        _30 = (_24[_31].0: u32);         // scope 6 at ui/consts/const_let_eq.rs:283:11: 283:19
        _34 = CheckedShl(_3, _30);       // scope 6 at ui/consts/const_let_eq.rs:283:5: 283:19
        assert(!move (_34.1: bool), "attempt to shift left by `{}`, which would overflow", move _30) -> bb13; // scope 6 at ui/consts/const_let_eq.rs:283:5: 283:19
    }

    bb13: {
        _3 = move (_34.0: u32);          // scope 6 at ui/consts/const_let_eq.rs:283:5: 283:19
        StorageDead(_30);                // scope 6 at ui/consts/const_let_eq.rs:283:18: 283:19
        StorageDead(_31);                // scope 6 at ui/consts/const_let_eq.rs:283:19: 283:20
        StorageLive(_35);                // scope 6 at ui/consts/const_let_eq.rs:284:9: 284:16
        StorageLive(_36);                // scope 6 at ui/consts/const_let_eq.rs:284:35: 284:47
        _36 = Bar::<u32> { x: const 1_u32 }; // scope 6 at ui/consts/const_let_eq.rs:284:35: 284:47
        _35 = [move _36];                // scope 6 at ui/consts/const_let_eq.rs:284:34: 284:48
        StorageDead(_36);                // scope 6 at ui/consts/const_let_eq.rs:284:47: 284:48
        StorageLive(_37);                // scope 7 at ui/consts/const_let_eq.rs:285:9: 285:10
        _37 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:285:9: 285:10
        _38 = Len(_35);                  // scope 7 at ui/consts/const_let_eq.rs:285:5: 285:11
        _39 = Lt(_37, _38);              // scope 7 at ui/consts/const_let_eq.rs:285:5: 285:11
        assert(move _39, "index out of bounds: the length is {} but the index is {}", move _38, _37) -> bb14; // scope 7 at ui/consts/const_let_eq.rs:285:5: 285:11
    }

    bb14: {
        _40 = CheckedShl((_35[_37].0: u32), const 1_i32); // scope 7 at ui/consts/const_let_eq.rs:285:5: 285:19
        assert(!move (_40.1: bool), "attempt to shift left by `{}`, which would overflow", const 1_i32) -> bb15; // scope 7 at ui/consts/const_let_eq.rs:285:5: 285:19
    }

    bb15: {
        (_35[_37].0: u32) = move (_40.0: u32); // scope 7 at ui/consts/const_let_eq.rs:285:5: 285:19
        StorageDead(_37);                // scope 7 at ui/consts/const_let_eq.rs:285:19: 285:20
        StorageLive(_41);                // scope 7 at ui/consts/const_let_eq.rs:286:11: 286:19
        StorageLive(_42);                // scope 7 at ui/consts/const_let_eq.rs:286:15: 286:16
        _42 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:286:15: 286:16
        _43 = Len(_35);                  // scope 7 at ui/consts/const_let_eq.rs:286:11: 286:17
        _44 = Lt(_42, _43);              // scope 7 at ui/consts/const_let_eq.rs:286:11: 286:17
        assert(move _44, "index out of bounds: the length is {} but the index is {}", move _43, _42) -> bb16; // scope 7 at ui/consts/const_let_eq.rs:286:11: 286:17
    }

    bb16: {
        _41 = (_35[_42].0: u32);         // scope 7 at ui/consts/const_let_eq.rs:286:11: 286:19
        _45 = CheckedShl(_3, _41);       // scope 7 at ui/consts/const_let_eq.rs:286:5: 286:19
        assert(!move (_45.1: bool), "attempt to shift left by `{}`, which would overflow", move _41) -> bb17; // scope 7 at ui/consts/const_let_eq.rs:286:5: 286:19
    }

    bb17: {
        _3 = move (_45.0: u32);          // scope 7 at ui/consts/const_let_eq.rs:286:5: 286:19
        StorageDead(_41);                // scope 7 at ui/consts/const_let_eq.rs:286:18: 286:19
        StorageDead(_42);                // scope 7 at ui/consts/const_let_eq.rs:286:19: 286:20
        StorageLive(_46);                // scope 7 at ui/consts/const_let_eq.rs:289:9: 289:16
        StorageLive(_47);                // scope 7 at ui/consts/const_let_eq.rs:289:38: 289:41
        _47 = [const 1_u32];             // scope 7 at ui/consts/const_let_eq.rs:289:38: 289:41
        _46 = Foo::<[u32; 1]>(move _47); // scope 7 at ui/consts/const_let_eq.rs:289:34: 289:42
        StorageDead(_47);                // scope 7 at ui/consts/const_let_eq.rs:289:41: 289:42
        StorageLive(_48);                // scope 8 at ui/consts/const_let_eq.rs:290:13: 290:14
        _48 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:290:13: 290:14
        _49 = Len((_46.0: [u32; 1]));    // scope 8 at ui/consts/const_let_eq.rs:290:5: 290:15
        _50 = Lt(_48, _49);              // scope 8 at ui/consts/const_let_eq.rs:290:5: 290:15
        assert(move _50, "index out of bounds: the length is {} but the index is {}", move _49, _48) -> bb18; // scope 8 at ui/consts/const_let_eq.rs:290:5: 290:15
    }

    bb18: {
        _51 = CheckedShl((_46.0: [u32; 1])[_48], const 1_i32); // scope 8 at ui/consts/const_let_eq.rs:290:5: 290:21
        assert(!move (_51.1: bool), "attempt to shift left by `{}`, which would overflow", const 1_i32) -> bb19; // scope 8 at ui/consts/const_let_eq.rs:290:5: 290:21
    }

    bb19: {
        (_46.0: [u32; 1])[_48] = move (_51.0: u32); // scope 8 at ui/consts/const_let_eq.rs:290:5: 290:21
        StorageDead(_48);                // scope 8 at ui/consts/const_let_eq.rs:290:21: 290:22
        StorageLive(_52);                // scope 8 at ui/consts/const_let_eq.rs:291:11: 291:21
        StorageLive(_53);                // scope 8 at ui/consts/const_let_eq.rs:291:19: 291:20
        _53 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:291:19: 291:20
        _54 = Len((_46.0: [u32; 1]));    // scope 8 at ui/consts/const_let_eq.rs:291:11: 291:21
        _55 = Lt(_53, _54);              // scope 8 at ui/consts/const_let_eq.rs:291:11: 291:21
        assert(move _55, "index out of bounds: the length is {} but the index is {}", move _54, _53) -> bb20; // scope 8 at ui/consts/const_let_eq.rs:291:11: 291:21
    }

    bb20: {
        _52 = (_46.0: [u32; 1])[_53];    // scope 8 at ui/consts/const_let_eq.rs:291:11: 291:21
        _56 = CheckedShl(_3, _52);       // scope 8 at ui/consts/const_let_eq.rs:291:5: 291:21
        assert(!move (_56.1: bool), "attempt to shift left by `{}`, which would overflow", move _52) -> bb21; // scope 8 at ui/consts/const_let_eq.rs:291:5: 291:21
    }

    bb21: {
        _3 = move (_56.0: u32);          // scope 8 at ui/consts/const_let_eq.rs:291:5: 291:21
        StorageDead(_52);                // scope 8 at ui/consts/const_let_eq.rs:291:20: 291:21
        StorageDead(_53);                // scope 8 at ui/consts/const_let_eq.rs:291:21: 291:22
        StorageLive(_57);                // scope 8 at ui/consts/const_let_eq.rs:292:9: 292:16
        StorageLive(_58);                // scope 8 at ui/consts/const_let_eq.rs:292:43: 292:46
        _58 = [const 1_u32];             // scope 8 at ui/consts/const_let_eq.rs:292:43: 292:46
        _57 = Bar::<[u32; 1]> { x: move _58 }; // scope 8 at ui/consts/const_let_eq.rs:292:34: 292:48
        StorageDead(_58);                // scope 8 at ui/consts/const_let_eq.rs:292:47: 292:48
        StorageLive(_59);                // scope 9 at ui/consts/const_let_eq.rs:293:11: 293:12
        _59 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:293:11: 293:12
        _60 = Len((_57.0: [u32; 1]));    // scope 9 at ui/consts/const_let_eq.rs:293:5: 293:13
        _61 = Lt(_59, _60);              // scope 9 at ui/consts/const_let_eq.rs:293:5: 293:13
        assert(move _61, "index out of bounds: the length is {} but the index is {}", move _60, _59) -> bb22; // scope 9 at ui/consts/const_let_eq.rs:293:5: 293:13
    }

    bb22: {
        _62 = CheckedShl((_57.0: [u32; 1])[_59], const 1_i32); // scope 9 at ui/consts/const_let_eq.rs:293:5: 293:19
        assert(!move (_62.1: bool), "attempt to shift left by `{}`, which would overflow", const 1_i32) -> bb23; // scope 9 at ui/consts/const_let_eq.rs:293:5: 293:19
    }

    bb23: {
        (_57.0: [u32; 1])[_59] = move (_62.0: u32); // scope 9 at ui/consts/const_let_eq.rs:293:5: 293:19
        StorageDead(_59);                // scope 9 at ui/consts/const_let_eq.rs:293:19: 293:20
        StorageLive(_63);                // scope 9 at ui/consts/const_let_eq.rs:294:11: 294:19
        StorageLive(_64);                // scope 9 at ui/consts/const_let_eq.rs:294:17: 294:18
        _64 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:294:17: 294:18
        _65 = Len((_57.0: [u32; 1]));    // scope 9 at ui/consts/const_let_eq.rs:294:11: 294:19
        _66 = Lt(_64, _65);              // scope 9 at ui/consts/const_let_eq.rs:294:11: 294:19
        assert(move _66, "index out of bounds: the length is {} but the index is {}", move _65, _64) -> bb24; // scope 9 at ui/consts/const_let_eq.rs:294:11: 294:19
    }

    bb24: {
        _63 = (_57.0: [u32; 1])[_64];    // scope 9 at ui/consts/const_let_eq.rs:294:11: 294:19
        _67 = CheckedShl(_3, _63);       // scope 9 at ui/consts/const_let_eq.rs:294:5: 294:19
        assert(!move (_67.1: bool), "attempt to shift left by `{}`, which would overflow", move _63) -> bb25; // scope 9 at ui/consts/const_let_eq.rs:294:5: 294:19
    }

    bb25: {
        _3 = move (_67.0: u32);          // scope 9 at ui/consts/const_let_eq.rs:294:5: 294:19
        StorageDead(_63);                // scope 9 at ui/consts/const_let_eq.rs:294:18: 294:19
        StorageDead(_64);                // scope 9 at ui/consts/const_let_eq.rs:294:19: 294:20
        _0 = _3;                         // scope 9 at ui/consts/const_let_eq.rs:296:5: 296:6
        StorageDead(_57);                // scope 8 at ui/consts/const_let_eq.rs:297:1: 297:2
        StorageDead(_46);                // scope 7 at ui/consts/const_let_eq.rs:297:1: 297:2
        StorageDead(_35);                // scope 6 at ui/consts/const_let_eq.rs:297:1: 297:2
        StorageDead(_24);                // scope 5 at ui/consts/const_let_eq.rs:297:1: 297:2
        StorageDead(_16);                // scope 4 at ui/consts/const_let_eq.rs:297:1: 297:2
        StorageDead(_15);                // scope 3 at ui/consts/const_let_eq.rs:297:1: 297:2
        StorageDead(_5);                 // scope 2 at ui/consts/const_let_eq.rs:297:1: 297:2
        StorageDead(_3);                 // scope 1 at ui/consts/const_let_eq.rs:297:1: 297:2
        StorageDead(_2);                 // scope 0 at ui/consts/const_let_eq.rs:297:1: 297:2
        return;                          // scope 0 at ui/consts/const_let_eq.rs:297:2: 297:2
    }
}

shl_assign::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:269:24: 269:25

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:269:24: 269:25
        return;                          // scope 0 at ui/consts/const_let_eq.rs:269:24: 269:25
    }
}

shl_assign::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:281:29: 281:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:281:29: 281:30
        return;                          // scope 0 at ui/consts/const_let_eq.rs:281:29: 281:30
    }
}

shl_assign::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:284:29: 284:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:284:29: 284:30
        return;                          // scope 0 at ui/consts/const_let_eq.rs:284:29: 284:30
    }
}

shl_assign::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:289:28: 289:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:289:28: 289:29
        return;                          // scope 0 at ui/consts/const_let_eq.rs:289:28: 289:29
    }
}

shl_assign::{constant#4}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:292:28: 292:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:292:28: 292:29
        return;                          // scope 0 at ui/consts/const_let_eq.rs:292:28: 292:29
    }
}

fn shr_assign(_1: W) -> u32 {
    let _2: u32;                         // in scope 0 at ui/consts/const_let_eq.rs:299:23: 299:24
    let mut _3: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:302:5: 302:12
    let _5: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:306:9: 306:10
    let mut _6: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:306:5: 306:17
    let mut _7: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:307:11: 307:17
    let _8: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:307:15: 307:16
    let mut _9: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:307:5: 307:17
    let mut _12: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:313:5: 313:16
    let mut _13: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:314:11: 314:24
    let mut _14: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:314:11: 314:16
    let mut _15: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:314:19: 314:24
    let mut _16: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:314:11: 314:24
    let mut _17: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:314:5: 314:24
    let mut _19: Foo<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:317:35: 317:41
    let _20: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:318:9: 318:10
    let mut _21: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:318:5: 318:19
    let mut _22: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:319:11: 319:19
    let _23: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:319:15: 319:16
    let mut _24: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:319:5: 319:19
    let mut _26: Bar<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:320:35: 320:47
    let _27: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:321:9: 321:10
    let mut _28: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:321:5: 321:19
    let mut _29: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:322:11: 322:19
    let _30: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:322:15: 322:16
    let mut _31: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:322:5: 322:19
    let mut _33: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:325:38: 325:41
    let _34: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:326:13: 326:14
    let mut _35: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:326:5: 326:21
    let mut _36: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:327:11: 327:21
    let _37: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:327:19: 327:20
    let mut _38: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:327:5: 327:21
    let mut _40: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:328:43: 328:46
    let _41: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:329:11: 329:12
    let mut _42: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:329:5: 329:19
    let mut _43: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:330:11: 330:19
    let _44: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:330:17: 330:18
    let mut _45: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:330:5: 330:19
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq.rs:299:23: 299:24
        let mut _0: u32;                 // return place in scope 1 at ui/consts/const_let_eq.rs:301:9: 301:14
        scope 2 {
            debug d => _0;               // in scope 2 at ui/consts/const_let_eq.rs:301:9: 301:14
            let mut _4: [u32; 1];        // in scope 2 at ui/consts/const_let_eq.rs:305:9: 305:16
            scope 3 {
                debug arr => _4;         // in scope 3 at ui/consts/const_let_eq.rs:305:9: 305:16
                let mut _10: Foo<u32>;   // in scope 3 at ui/consts/const_let_eq.rs:310:9: 310:16
                scope 4 {
                    debug foo => _10;    // in scope 4 at ui/consts/const_let_eq.rs:310:9: 310:16
                    let mut _11: Bar<u32>; // in scope 4 at ui/consts/const_let_eq.rs:311:9: 311:16
                    scope 5 {
                        debug bar => _11; // in scope 5 at ui/consts/const_let_eq.rs:311:9: 311:16
                        let mut _18: [Foo<u32>; 1]; // in scope 5 at ui/consts/const_let_eq.rs:317:9: 317:16
                        scope 6 {
                            debug arr => _18; // in scope 6 at ui/consts/const_let_eq.rs:317:9: 317:16
                            let mut _25: [Bar<u32>; 1]; // in scope 6 at ui/consts/const_let_eq.rs:320:9: 320:16
                            scope 7 {
                                debug arr => _25; // in scope 7 at ui/consts/const_let_eq.rs:320:9: 320:16
                                let mut _32: Foo<[u32; 1]>; // in scope 7 at ui/consts/const_let_eq.rs:325:9: 325:16
                                scope 8 {
                                    debug arr => _32; // in scope 8 at ui/consts/const_let_eq.rs:325:9: 325:16
                                    let mut _39: Bar<[u32; 1]>; // in scope 8 at ui/consts/const_let_eq.rs:328:9: 328:16
                                    scope 9 {
                                        debug arr => _39; // in scope 9 at ui/consts/const_let_eq.rs:328:9: 328:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = (_1.0: u32);                // scope 0 at ui/consts/const_let_eq.rs:299:23: 299:24
        _0 = _2;                         // scope 1 at ui/consts/const_let_eq.rs:301:22: 301:23
        _3 = CheckedShr(_0, const 1_i32); // scope 2 at ui/consts/const_let_eq.rs:302:5: 302:12
        assert(!move (_3.1: bool), "attempt to shift right by `{}`, which would overflow", const 1_i32) -> bb1; // scope 2 at ui/consts/const_let_eq.rs:302:5: 302:12
    }

    bb1: {
        _0 = move (_3.0: u32);           // scope 2 at ui/consts/const_let_eq.rs:302:5: 302:12
        _4 = [const 2_u32];              // scope 2 at ui/consts/const_let_eq.rs:305:29: 305:32
        _5 = const 0_usize;              // scope 3 at ui/consts/const_let_eq.rs:306:9: 306:10
        _6 = CheckedShr(_4[_5], const 1_i32); // scope 3 at ui/consts/const_let_eq.rs:306:5: 306:17
        assert(!move (_6.1: bool), "attempt to shift right by `{}`, which would overflow", const 1_i32) -> bb2; // scope 3 at ui/consts/const_let_eq.rs:306:5: 306:17
    }

    bb2: {
        _4[_5] = move (_6.0: u32);       // scope 3 at ui/consts/const_let_eq.rs:306:5: 306:17
        _8 = const 0_usize;              // scope 3 at ui/consts/const_let_eq.rs:307:15: 307:16
        _7 = _4[_8];                     // scope 3 at ui/consts/const_let_eq.rs:307:11: 307:17
        _9 = CheckedShr(_0, _7);         // scope 3 at ui/consts/const_let_eq.rs:307:5: 307:17
        assert(!move (_9.1: bool), "attempt to shift right by `{}`, which would overflow", move _7) -> bb3; // scope 3 at ui/consts/const_let_eq.rs:307:5: 307:17
    }

    bb3: {
        _0 = move (_9.0: u32);           // scope 3 at ui/consts/const_let_eq.rs:307:5: 307:17
        _10 = const Foo::<u32>(2_u32);   // scope 3 at ui/consts/const_let_eq.rs:310:29: 310:35
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:310:29: 310:35
                                         // + literal: Const { ty: Foo<u32>, val: Value(Scalar(0x00000002)) }
        _11 = const Bar::<u32> {{ x: 2_u32 }}; // scope 4 at ui/consts/const_let_eq.rs:311:29: 311:41
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:311:29: 311:41
                                         // + literal: Const { ty: Bar<u32>, val: Value(Scalar(0x00000002)) }
        (_10.0: u32) = const 1_u32;      // scope 5 at ui/consts/const_let_eq.rs:312:5: 312:16
        _12 = CheckedShr((_11.0: u32), const 1_i32); // scope 5 at ui/consts/const_let_eq.rs:313:5: 313:16
        assert(!move (_12.1: bool), "attempt to shift right by `{}`, which would overflow", const 1_i32) -> bb4; // scope 5 at ui/consts/const_let_eq.rs:313:5: 313:16
    }

    bb4: {
        (_11.0: u32) = move (_12.0: u32); // scope 5 at ui/consts/const_let_eq.rs:313:5: 313:16
        _14 = (_10.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:314:11: 314:16
        _15 = (_11.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:314:19: 314:24
        _16 = CheckedAdd(_14, _15);      // scope 5 at ui/consts/const_let_eq.rs:314:11: 314:24
        assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", move _14, move _15) -> bb5; // scope 5 at ui/consts/const_let_eq.rs:314:11: 314:24
    }

    bb5: {
        _13 = move (_16.0: u32);         // scope 5 at ui/consts/const_let_eq.rs:314:11: 314:24
        _17 = CheckedShr(_0, _13);       // scope 5 at ui/consts/const_let_eq.rs:314:5: 314:24
        assert(!move (_17.1: bool), "attempt to shift right by `{}`, which would overflow", move _13) -> bb6; // scope 5 at ui/consts/const_let_eq.rs:314:5: 314:24
    }

    bb6: {
        _0 = move (_17.0: u32);          // scope 5 at ui/consts/const_let_eq.rs:314:5: 314:24
        _19 = const Foo::<u32>(2_u32);   // scope 5 at ui/consts/const_let_eq.rs:317:35: 317:41
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:317:35: 317:41
                                         // + literal: Const { ty: Foo<u32>, val: Value(Scalar(0x00000002)) }
        _18 = [move _19];                // scope 5 at ui/consts/const_let_eq.rs:317:34: 317:42
        _20 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:318:9: 318:10
        _21 = CheckedShr((_18[_20].0: u32), const 1_i32); // scope 6 at ui/consts/const_let_eq.rs:318:5: 318:19
        assert(!move (_21.1: bool), "attempt to shift right by `{}`, which would overflow", const 1_i32) -> bb7; // scope 6 at ui/consts/const_let_eq.rs:318:5: 318:19
    }

    bb7: {
        (_18[_20].0: u32) = move (_21.0: u32); // scope 6 at ui/consts/const_let_eq.rs:318:5: 318:19
        _23 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:319:15: 319:16
        _22 = (_18[_23].0: u32);         // scope 6 at ui/consts/const_let_eq.rs:319:11: 319:19
        _24 = CheckedShr(_0, _22);       // scope 6 at ui/consts/const_let_eq.rs:319:5: 319:19
        assert(!move (_24.1: bool), "attempt to shift right by `{}`, which would overflow", move _22) -> bb8; // scope 6 at ui/consts/const_let_eq.rs:319:5: 319:19
    }

    bb8: {
        _0 = move (_24.0: u32);          // scope 6 at ui/consts/const_let_eq.rs:319:5: 319:19
        _26 = const Bar::<u32> {{ x: 2_u32 }}; // scope 6 at ui/consts/const_let_eq.rs:320:35: 320:47
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:320:35: 320:47
                                         // + literal: Const { ty: Bar<u32>, val: Value(Scalar(0x00000002)) }
        _25 = [move _26];                // scope 6 at ui/consts/const_let_eq.rs:320:34: 320:48
        _27 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:321:9: 321:10
        _28 = CheckedShr((_25[_27].0: u32), const 1_i32); // scope 7 at ui/consts/const_let_eq.rs:321:5: 321:19
        assert(!move (_28.1: bool), "attempt to shift right by `{}`, which would overflow", const 1_i32) -> bb9; // scope 7 at ui/consts/const_let_eq.rs:321:5: 321:19
    }

    bb9: {
        (_25[_27].0: u32) = move (_28.0: u32); // scope 7 at ui/consts/const_let_eq.rs:321:5: 321:19
        _30 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:322:15: 322:16
        _29 = (_25[_30].0: u32);         // scope 7 at ui/consts/const_let_eq.rs:322:11: 322:19
        _31 = CheckedShr(_0, _29);       // scope 7 at ui/consts/const_let_eq.rs:322:5: 322:19
        assert(!move (_31.1: bool), "attempt to shift right by `{}`, which would overflow", move _29) -> bb10; // scope 7 at ui/consts/const_let_eq.rs:322:5: 322:19
    }

    bb10: {
        _0 = move (_31.0: u32);          // scope 7 at ui/consts/const_let_eq.rs:322:5: 322:19
        _33 = [const 2_u32];             // scope 7 at ui/consts/const_let_eq.rs:325:38: 325:41
        _32 = Foo::<[u32; 1]>(move _33); // scope 7 at ui/consts/const_let_eq.rs:325:34: 325:42
        _34 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:326:13: 326:14
        _35 = CheckedShr((_32.0: [u32; 1])[_34], const 1_i32); // scope 8 at ui/consts/const_let_eq.rs:326:5: 326:21
        assert(!move (_35.1: bool), "attempt to shift right by `{}`, which would overflow", const 1_i32) -> bb11; // scope 8 at ui/consts/const_let_eq.rs:326:5: 326:21
    }

    bb11: {
        (_32.0: [u32; 1])[_34] = move (_35.0: u32); // scope 8 at ui/consts/const_let_eq.rs:326:5: 326:21
        _37 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:327:19: 327:20
        _36 = (_32.0: [u32; 1])[_37];    // scope 8 at ui/consts/const_let_eq.rs:327:11: 327:21
        _38 = CheckedShr(_0, _36);       // scope 8 at ui/consts/const_let_eq.rs:327:5: 327:21
        assert(!move (_38.1: bool), "attempt to shift right by `{}`, which would overflow", move _36) -> bb12; // scope 8 at ui/consts/const_let_eq.rs:327:5: 327:21
    }

    bb12: {
        _0 = move (_38.0: u32);          // scope 8 at ui/consts/const_let_eq.rs:327:5: 327:21
        _40 = [const 2_u32];             // scope 8 at ui/consts/const_let_eq.rs:328:43: 328:46
        _39 = Bar::<[u32; 1]> { x: move _40 }; // scope 8 at ui/consts/const_let_eq.rs:328:34: 328:48
        _41 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:329:11: 329:12
        _42 = CheckedShr((_39.0: [u32; 1])[_41], const 1_i32); // scope 9 at ui/consts/const_let_eq.rs:329:5: 329:19
        assert(!move (_42.1: bool), "attempt to shift right by `{}`, which would overflow", const 1_i32) -> bb13; // scope 9 at ui/consts/const_let_eq.rs:329:5: 329:19
    }

    bb13: {
        (_39.0: [u32; 1])[_41] = move (_42.0: u32); // scope 9 at ui/consts/const_let_eq.rs:329:5: 329:19
        _44 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:330:17: 330:18
        _43 = (_39.0: [u32; 1])[_44];    // scope 9 at ui/consts/const_let_eq.rs:330:11: 330:19
        _45 = CheckedShr(_0, _43);       // scope 9 at ui/consts/const_let_eq.rs:330:5: 330:19
        assert(!move (_45.1: bool), "attempt to shift right by `{}`, which would overflow", move _43) -> bb14; // scope 9 at ui/consts/const_let_eq.rs:330:5: 330:19
    }

    bb14: {
        _0 = move (_45.0: u32);          // scope 9 at ui/consts/const_let_eq.rs:330:5: 330:19
        return;                          // scope 0 at ui/consts/const_let_eq.rs:333:2: 333:2
    }
}

// MIR FOR CTFE
fn shr_assign(_1: W) -> u32 {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const_let_eq.rs:299:33: 299:36
    let _2: u32;                         // in scope 0 at ui/consts/const_let_eq.rs:299:23: 299:24
    let mut _4: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:302:5: 302:12
    let _6: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:306:9: 306:10
    let mut _7: usize;                   // in scope 0 at ui/consts/const_let_eq.rs:306:5: 306:11
    let mut _8: bool;                    // in scope 0 at ui/consts/const_let_eq.rs:306:5: 306:11
    let mut _9: (u32, bool);             // in scope 0 at ui/consts/const_let_eq.rs:306:5: 306:17
    let mut _10: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:307:11: 307:17
    let _11: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:307:15: 307:16
    let mut _12: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:307:11: 307:17
    let mut _13: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:307:11: 307:17
    let mut _14: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:307:5: 307:17
    let mut _17: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:312:5: 312:16
    let mut _18: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:313:5: 313:16
    let mut _19: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:314:11: 314:24
    let mut _20: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:314:11: 314:16
    let mut _21: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:314:19: 314:24
    let mut _22: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:314:11: 314:24
    let mut _23: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:314:5: 314:24
    let mut _25: Foo<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:317:35: 317:41
    let _26: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:318:9: 318:10
    let mut _27: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:318:5: 318:11
    let mut _28: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:318:5: 318:11
    let mut _29: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:318:5: 318:19
    let mut _30: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:319:11: 319:19
    let _31: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:319:15: 319:16
    let mut _32: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:319:11: 319:17
    let mut _33: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:319:11: 319:17
    let mut _34: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:319:5: 319:19
    let mut _36: Bar<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:320:35: 320:47
    let _37: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:321:9: 321:10
    let mut _38: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:321:5: 321:11
    let mut _39: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:321:5: 321:11
    let mut _40: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:321:5: 321:19
    let mut _41: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:322:11: 322:19
    let _42: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:322:15: 322:16
    let mut _43: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:322:11: 322:17
    let mut _44: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:322:11: 322:17
    let mut _45: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:322:5: 322:19
    let mut _47: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:325:38: 325:41
    let _48: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:326:13: 326:14
    let mut _49: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:326:5: 326:15
    let mut _50: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:326:5: 326:15
    let mut _51: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:326:5: 326:21
    let mut _52: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:327:11: 327:21
    let _53: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:327:19: 327:20
    let mut _54: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:327:11: 327:21
    let mut _55: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:327:11: 327:21
    let mut _56: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:327:5: 327:21
    let mut _58: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:328:43: 328:46
    let _59: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:329:11: 329:12
    let mut _60: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:329:5: 329:13
    let mut _61: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:329:5: 329:13
    let mut _62: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:329:5: 329:19
    let mut _63: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:330:11: 330:19
    let _64: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:330:17: 330:18
    let mut _65: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:330:11: 330:19
    let mut _66: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:330:11: 330:19
    let mut _67: (u32, bool);            // in scope 0 at ui/consts/const_let_eq.rs:330:5: 330:19
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq.rs:299:23: 299:24
        let mut _3: u32;                 // in scope 1 at ui/consts/const_let_eq.rs:301:9: 301:14
        scope 2 {
            debug d => _3;               // in scope 2 at ui/consts/const_let_eq.rs:301:9: 301:14
            let mut _5: [u32; 1];        // in scope 2 at ui/consts/const_let_eq.rs:305:9: 305:16
            scope 3 {
                debug arr => _5;         // in scope 3 at ui/consts/const_let_eq.rs:305:9: 305:16
                let mut _15: Foo<u32>;   // in scope 3 at ui/consts/const_let_eq.rs:310:9: 310:16
                scope 4 {
                    debug foo => _15;    // in scope 4 at ui/consts/const_let_eq.rs:310:9: 310:16
                    let mut _16: Bar<u32>; // in scope 4 at ui/consts/const_let_eq.rs:311:9: 311:16
                    scope 5 {
                        debug bar => _16; // in scope 5 at ui/consts/const_let_eq.rs:311:9: 311:16
                        let mut _24: [Foo<u32>; 1]; // in scope 5 at ui/consts/const_let_eq.rs:317:9: 317:16
                        scope 6 {
                            debug arr => _24; // in scope 6 at ui/consts/const_let_eq.rs:317:9: 317:16
                            let mut _35: [Bar<u32>; 1]; // in scope 6 at ui/consts/const_let_eq.rs:320:9: 320:16
                            scope 7 {
                                debug arr => _35; // in scope 7 at ui/consts/const_let_eq.rs:320:9: 320:16
                                let mut _46: Foo<[u32; 1]>; // in scope 7 at ui/consts/const_let_eq.rs:325:9: 325:16
                                scope 8 {
                                    debug arr => _46; // in scope 8 at ui/consts/const_let_eq.rs:325:9: 325:16
                                    let mut _57: Bar<[u32; 1]>; // in scope 8 at ui/consts/const_let_eq.rs:328:9: 328:16
                                    scope 9 {
                                        debug arr => _57; // in scope 9 at ui/consts/const_let_eq.rs:328:9: 328:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const_let_eq.rs:299:23: 299:24
        _2 = (_1.0: u32);                // scope 0 at ui/consts/const_let_eq.rs:299:23: 299:24
        StorageLive(_3);                 // scope 1 at ui/consts/const_let_eq.rs:301:9: 301:14
        _3 = _2;                         // scope 1 at ui/consts/const_let_eq.rs:301:22: 301:23
        _4 = CheckedShr(_3, const 1_i32); // scope 2 at ui/consts/const_let_eq.rs:302:5: 302:12
        assert(!move (_4.1: bool), "attempt to shift right by `{}`, which would overflow", const 1_i32) -> bb1; // scope 2 at ui/consts/const_let_eq.rs:302:5: 302:12
    }

    bb1: {
        _3 = move (_4.0: u32);           // scope 2 at ui/consts/const_let_eq.rs:302:5: 302:12
        StorageLive(_5);                 // scope 2 at ui/consts/const_let_eq.rs:305:9: 305:16
        _5 = [const 2_u32];              // scope 2 at ui/consts/const_let_eq.rs:305:29: 305:32
        StorageLive(_6);                 // scope 3 at ui/consts/const_let_eq.rs:306:9: 306:10
        _6 = const 0_usize;              // scope 3 at ui/consts/const_let_eq.rs:306:9: 306:10
        _7 = Len(_5);                    // scope 3 at ui/consts/const_let_eq.rs:306:5: 306:11
        _8 = Lt(_6, _7);                 // scope 3 at ui/consts/const_let_eq.rs:306:5: 306:11
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> bb2; // scope 3 at ui/consts/const_let_eq.rs:306:5: 306:11
    }

    bb2: {
        _9 = CheckedShr(_5[_6], const 1_i32); // scope 3 at ui/consts/const_let_eq.rs:306:5: 306:17
        assert(!move (_9.1: bool), "attempt to shift right by `{}`, which would overflow", const 1_i32) -> bb3; // scope 3 at ui/consts/const_let_eq.rs:306:5: 306:17
    }

    bb3: {
        _5[_6] = move (_9.0: u32);       // scope 3 at ui/consts/const_let_eq.rs:306:5: 306:17
        StorageDead(_6);                 // scope 3 at ui/consts/const_let_eq.rs:306:17: 306:18
        StorageLive(_10);                // scope 3 at ui/consts/const_let_eq.rs:307:11: 307:17
        StorageLive(_11);                // scope 3 at ui/consts/const_let_eq.rs:307:15: 307:16
        _11 = const 0_usize;             // scope 3 at ui/consts/const_let_eq.rs:307:15: 307:16
        _12 = Len(_5);                   // scope 3 at ui/consts/const_let_eq.rs:307:11: 307:17
        _13 = Lt(_11, _12);              // scope 3 at ui/consts/const_let_eq.rs:307:11: 307:17
        assert(move _13, "index out of bounds: the length is {} but the index is {}", move _12, _11) -> bb4; // scope 3 at ui/consts/const_let_eq.rs:307:11: 307:17
    }

    bb4: {
        _10 = _5[_11];                   // scope 3 at ui/consts/const_let_eq.rs:307:11: 307:17
        _14 = CheckedShr(_3, _10);       // scope 3 at ui/consts/const_let_eq.rs:307:5: 307:17
        assert(!move (_14.1: bool), "attempt to shift right by `{}`, which would overflow", move _10) -> bb5; // scope 3 at ui/consts/const_let_eq.rs:307:5: 307:17
    }

    bb5: {
        _3 = move (_14.0: u32);          // scope 3 at ui/consts/const_let_eq.rs:307:5: 307:17
        StorageDead(_10);                // scope 3 at ui/consts/const_let_eq.rs:307:16: 307:17
        StorageDead(_11);                // scope 3 at ui/consts/const_let_eq.rs:307:17: 307:18
        StorageLive(_15);                // scope 3 at ui/consts/const_let_eq.rs:310:9: 310:16
        _15 = Foo::<u32>(const 2_u32);   // scope 3 at ui/consts/const_let_eq.rs:310:29: 310:35
        StorageLive(_16);                // scope 4 at ui/consts/const_let_eq.rs:311:9: 311:16
        _16 = Bar::<u32> { x: const 2_u32 }; // scope 4 at ui/consts/const_let_eq.rs:311:29: 311:41
        _17 = CheckedShr((_15.0: u32), const 1_i32); // scope 5 at ui/consts/const_let_eq.rs:312:5: 312:16
        assert(!move (_17.1: bool), "attempt to shift right by `{}`, which would overflow", const 1_i32) -> bb6; // scope 5 at ui/consts/const_let_eq.rs:312:5: 312:16
    }

    bb6: {
        (_15.0: u32) = move (_17.0: u32); // scope 5 at ui/consts/const_let_eq.rs:312:5: 312:16
        _18 = CheckedShr((_16.0: u32), const 1_i32); // scope 5 at ui/consts/const_let_eq.rs:313:5: 313:16
        assert(!move (_18.1: bool), "attempt to shift right by `{}`, which would overflow", const 1_i32) -> bb7; // scope 5 at ui/consts/const_let_eq.rs:313:5: 313:16
    }

    bb7: {
        (_16.0: u32) = move (_18.0: u32); // scope 5 at ui/consts/const_let_eq.rs:313:5: 313:16
        StorageLive(_19);                // scope 5 at ui/consts/const_let_eq.rs:314:11: 314:24
        StorageLive(_20);                // scope 5 at ui/consts/const_let_eq.rs:314:11: 314:16
        _20 = (_15.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:314:11: 314:16
        StorageLive(_21);                // scope 5 at ui/consts/const_let_eq.rs:314:19: 314:24
        _21 = (_16.0: u32);              // scope 5 at ui/consts/const_let_eq.rs:314:19: 314:24
        _22 = CheckedAdd(_20, _21);      // scope 5 at ui/consts/const_let_eq.rs:314:11: 314:24
        assert(!move (_22.1: bool), "attempt to compute `{} + {}`, which would overflow", move _20, move _21) -> bb8; // scope 5 at ui/consts/const_let_eq.rs:314:11: 314:24
    }

    bb8: {
        _19 = move (_22.0: u32);         // scope 5 at ui/consts/const_let_eq.rs:314:11: 314:24
        StorageDead(_21);                // scope 5 at ui/consts/const_let_eq.rs:314:23: 314:24
        StorageDead(_20);                // scope 5 at ui/consts/const_let_eq.rs:314:23: 314:24
        _23 = CheckedShr(_3, _19);       // scope 5 at ui/consts/const_let_eq.rs:314:5: 314:24
        assert(!move (_23.1: bool), "attempt to shift right by `{}`, which would overflow", move _19) -> bb9; // scope 5 at ui/consts/const_let_eq.rs:314:5: 314:24
    }

    bb9: {
        _3 = move (_23.0: u32);          // scope 5 at ui/consts/const_let_eq.rs:314:5: 314:24
        StorageDead(_19);                // scope 5 at ui/consts/const_let_eq.rs:314:23: 314:24
        StorageLive(_24);                // scope 5 at ui/consts/const_let_eq.rs:317:9: 317:16
        StorageLive(_25);                // scope 5 at ui/consts/const_let_eq.rs:317:35: 317:41
        _25 = Foo::<u32>(const 2_u32);   // scope 5 at ui/consts/const_let_eq.rs:317:35: 317:41
        _24 = [move _25];                // scope 5 at ui/consts/const_let_eq.rs:317:34: 317:42
        StorageDead(_25);                // scope 5 at ui/consts/const_let_eq.rs:317:41: 317:42
        StorageLive(_26);                // scope 6 at ui/consts/const_let_eq.rs:318:9: 318:10
        _26 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:318:9: 318:10
        _27 = Len(_24);                  // scope 6 at ui/consts/const_let_eq.rs:318:5: 318:11
        _28 = Lt(_26, _27);              // scope 6 at ui/consts/const_let_eq.rs:318:5: 318:11
        assert(move _28, "index out of bounds: the length is {} but the index is {}", move _27, _26) -> bb10; // scope 6 at ui/consts/const_let_eq.rs:318:5: 318:11
    }

    bb10: {
        _29 = CheckedShr((_24[_26].0: u32), const 1_i32); // scope 6 at ui/consts/const_let_eq.rs:318:5: 318:19
        assert(!move (_29.1: bool), "attempt to shift right by `{}`, which would overflow", const 1_i32) -> bb11; // scope 6 at ui/consts/const_let_eq.rs:318:5: 318:19
    }

    bb11: {
        (_24[_26].0: u32) = move (_29.0: u32); // scope 6 at ui/consts/const_let_eq.rs:318:5: 318:19
        StorageDead(_26);                // scope 6 at ui/consts/const_let_eq.rs:318:19: 318:20
        StorageLive(_30);                // scope 6 at ui/consts/const_let_eq.rs:319:11: 319:19
        StorageLive(_31);                // scope 6 at ui/consts/const_let_eq.rs:319:15: 319:16
        _31 = const 0_usize;             // scope 6 at ui/consts/const_let_eq.rs:319:15: 319:16
        _32 = Len(_24);                  // scope 6 at ui/consts/const_let_eq.rs:319:11: 319:17
        _33 = Lt(_31, _32);              // scope 6 at ui/consts/const_let_eq.rs:319:11: 319:17
        assert(move _33, "index out of bounds: the length is {} but the index is {}", move _32, _31) -> bb12; // scope 6 at ui/consts/const_let_eq.rs:319:11: 319:17
    }

    bb12: {
        _30 = (_24[_31].0: u32);         // scope 6 at ui/consts/const_let_eq.rs:319:11: 319:19
        _34 = CheckedShr(_3, _30);       // scope 6 at ui/consts/const_let_eq.rs:319:5: 319:19
        assert(!move (_34.1: bool), "attempt to shift right by `{}`, which would overflow", move _30) -> bb13; // scope 6 at ui/consts/const_let_eq.rs:319:5: 319:19
    }

    bb13: {
        _3 = move (_34.0: u32);          // scope 6 at ui/consts/const_let_eq.rs:319:5: 319:19
        StorageDead(_30);                // scope 6 at ui/consts/const_let_eq.rs:319:18: 319:19
        StorageDead(_31);                // scope 6 at ui/consts/const_let_eq.rs:319:19: 319:20
        StorageLive(_35);                // scope 6 at ui/consts/const_let_eq.rs:320:9: 320:16
        StorageLive(_36);                // scope 6 at ui/consts/const_let_eq.rs:320:35: 320:47
        _36 = Bar::<u32> { x: const 2_u32 }; // scope 6 at ui/consts/const_let_eq.rs:320:35: 320:47
        _35 = [move _36];                // scope 6 at ui/consts/const_let_eq.rs:320:34: 320:48
        StorageDead(_36);                // scope 6 at ui/consts/const_let_eq.rs:320:47: 320:48
        StorageLive(_37);                // scope 7 at ui/consts/const_let_eq.rs:321:9: 321:10
        _37 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:321:9: 321:10
        _38 = Len(_35);                  // scope 7 at ui/consts/const_let_eq.rs:321:5: 321:11
        _39 = Lt(_37, _38);              // scope 7 at ui/consts/const_let_eq.rs:321:5: 321:11
        assert(move _39, "index out of bounds: the length is {} but the index is {}", move _38, _37) -> bb14; // scope 7 at ui/consts/const_let_eq.rs:321:5: 321:11
    }

    bb14: {
        _40 = CheckedShr((_35[_37].0: u32), const 1_i32); // scope 7 at ui/consts/const_let_eq.rs:321:5: 321:19
        assert(!move (_40.1: bool), "attempt to shift right by `{}`, which would overflow", const 1_i32) -> bb15; // scope 7 at ui/consts/const_let_eq.rs:321:5: 321:19
    }

    bb15: {
        (_35[_37].0: u32) = move (_40.0: u32); // scope 7 at ui/consts/const_let_eq.rs:321:5: 321:19
        StorageDead(_37);                // scope 7 at ui/consts/const_let_eq.rs:321:19: 321:20
        StorageLive(_41);                // scope 7 at ui/consts/const_let_eq.rs:322:11: 322:19
        StorageLive(_42);                // scope 7 at ui/consts/const_let_eq.rs:322:15: 322:16
        _42 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:322:15: 322:16
        _43 = Len(_35);                  // scope 7 at ui/consts/const_let_eq.rs:322:11: 322:17
        _44 = Lt(_42, _43);              // scope 7 at ui/consts/const_let_eq.rs:322:11: 322:17
        assert(move _44, "index out of bounds: the length is {} but the index is {}", move _43, _42) -> bb16; // scope 7 at ui/consts/const_let_eq.rs:322:11: 322:17
    }

    bb16: {
        _41 = (_35[_42].0: u32);         // scope 7 at ui/consts/const_let_eq.rs:322:11: 322:19
        _45 = CheckedShr(_3, _41);       // scope 7 at ui/consts/const_let_eq.rs:322:5: 322:19
        assert(!move (_45.1: bool), "attempt to shift right by `{}`, which would overflow", move _41) -> bb17; // scope 7 at ui/consts/const_let_eq.rs:322:5: 322:19
    }

    bb17: {
        _3 = move (_45.0: u32);          // scope 7 at ui/consts/const_let_eq.rs:322:5: 322:19
        StorageDead(_41);                // scope 7 at ui/consts/const_let_eq.rs:322:18: 322:19
        StorageDead(_42);                // scope 7 at ui/consts/const_let_eq.rs:322:19: 322:20
        StorageLive(_46);                // scope 7 at ui/consts/const_let_eq.rs:325:9: 325:16
        StorageLive(_47);                // scope 7 at ui/consts/const_let_eq.rs:325:38: 325:41
        _47 = [const 2_u32];             // scope 7 at ui/consts/const_let_eq.rs:325:38: 325:41
        _46 = Foo::<[u32; 1]>(move _47); // scope 7 at ui/consts/const_let_eq.rs:325:34: 325:42
        StorageDead(_47);                // scope 7 at ui/consts/const_let_eq.rs:325:41: 325:42
        StorageLive(_48);                // scope 8 at ui/consts/const_let_eq.rs:326:13: 326:14
        _48 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:326:13: 326:14
        _49 = Len((_46.0: [u32; 1]));    // scope 8 at ui/consts/const_let_eq.rs:326:5: 326:15
        _50 = Lt(_48, _49);              // scope 8 at ui/consts/const_let_eq.rs:326:5: 326:15
        assert(move _50, "index out of bounds: the length is {} but the index is {}", move _49, _48) -> bb18; // scope 8 at ui/consts/const_let_eq.rs:326:5: 326:15
    }

    bb18: {
        _51 = CheckedShr((_46.0: [u32; 1])[_48], const 1_i32); // scope 8 at ui/consts/const_let_eq.rs:326:5: 326:21
        assert(!move (_51.1: bool), "attempt to shift right by `{}`, which would overflow", const 1_i32) -> bb19; // scope 8 at ui/consts/const_let_eq.rs:326:5: 326:21
    }

    bb19: {
        (_46.0: [u32; 1])[_48] = move (_51.0: u32); // scope 8 at ui/consts/const_let_eq.rs:326:5: 326:21
        StorageDead(_48);                // scope 8 at ui/consts/const_let_eq.rs:326:21: 326:22
        StorageLive(_52);                // scope 8 at ui/consts/const_let_eq.rs:327:11: 327:21
        StorageLive(_53);                // scope 8 at ui/consts/const_let_eq.rs:327:19: 327:20
        _53 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:327:19: 327:20
        _54 = Len((_46.0: [u32; 1]));    // scope 8 at ui/consts/const_let_eq.rs:327:11: 327:21
        _55 = Lt(_53, _54);              // scope 8 at ui/consts/const_let_eq.rs:327:11: 327:21
        assert(move _55, "index out of bounds: the length is {} but the index is {}", move _54, _53) -> bb20; // scope 8 at ui/consts/const_let_eq.rs:327:11: 327:21
    }

    bb20: {
        _52 = (_46.0: [u32; 1])[_53];    // scope 8 at ui/consts/const_let_eq.rs:327:11: 327:21
        _56 = CheckedShr(_3, _52);       // scope 8 at ui/consts/const_let_eq.rs:327:5: 327:21
        assert(!move (_56.1: bool), "attempt to shift right by `{}`, which would overflow", move _52) -> bb21; // scope 8 at ui/consts/const_let_eq.rs:327:5: 327:21
    }

    bb21: {
        _3 = move (_56.0: u32);          // scope 8 at ui/consts/const_let_eq.rs:327:5: 327:21
        StorageDead(_52);                // scope 8 at ui/consts/const_let_eq.rs:327:20: 327:21
        StorageDead(_53);                // scope 8 at ui/consts/const_let_eq.rs:327:21: 327:22
        StorageLive(_57);                // scope 8 at ui/consts/const_let_eq.rs:328:9: 328:16
        StorageLive(_58);                // scope 8 at ui/consts/const_let_eq.rs:328:43: 328:46
        _58 = [const 2_u32];             // scope 8 at ui/consts/const_let_eq.rs:328:43: 328:46
        _57 = Bar::<[u32; 1]> { x: move _58 }; // scope 8 at ui/consts/const_let_eq.rs:328:34: 328:48
        StorageDead(_58);                // scope 8 at ui/consts/const_let_eq.rs:328:47: 328:48
        StorageLive(_59);                // scope 9 at ui/consts/const_let_eq.rs:329:11: 329:12
        _59 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:329:11: 329:12
        _60 = Len((_57.0: [u32; 1]));    // scope 9 at ui/consts/const_let_eq.rs:329:5: 329:13
        _61 = Lt(_59, _60);              // scope 9 at ui/consts/const_let_eq.rs:329:5: 329:13
        assert(move _61, "index out of bounds: the length is {} but the index is {}", move _60, _59) -> bb22; // scope 9 at ui/consts/const_let_eq.rs:329:5: 329:13
    }

    bb22: {
        _62 = CheckedShr((_57.0: [u32; 1])[_59], const 1_i32); // scope 9 at ui/consts/const_let_eq.rs:329:5: 329:19
        assert(!move (_62.1: bool), "attempt to shift right by `{}`, which would overflow", const 1_i32) -> bb23; // scope 9 at ui/consts/const_let_eq.rs:329:5: 329:19
    }

    bb23: {
        (_57.0: [u32; 1])[_59] = move (_62.0: u32); // scope 9 at ui/consts/const_let_eq.rs:329:5: 329:19
        StorageDead(_59);                // scope 9 at ui/consts/const_let_eq.rs:329:19: 329:20
        StorageLive(_63);                // scope 9 at ui/consts/const_let_eq.rs:330:11: 330:19
        StorageLive(_64);                // scope 9 at ui/consts/const_let_eq.rs:330:17: 330:18
        _64 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:330:17: 330:18
        _65 = Len((_57.0: [u32; 1]));    // scope 9 at ui/consts/const_let_eq.rs:330:11: 330:19
        _66 = Lt(_64, _65);              // scope 9 at ui/consts/const_let_eq.rs:330:11: 330:19
        assert(move _66, "index out of bounds: the length is {} but the index is {}", move _65, _64) -> bb24; // scope 9 at ui/consts/const_let_eq.rs:330:11: 330:19
    }

    bb24: {
        _63 = (_57.0: [u32; 1])[_64];    // scope 9 at ui/consts/const_let_eq.rs:330:11: 330:19
        _67 = CheckedShr(_3, _63);       // scope 9 at ui/consts/const_let_eq.rs:330:5: 330:19
        assert(!move (_67.1: bool), "attempt to shift right by `{}`, which would overflow", move _63) -> bb25; // scope 9 at ui/consts/const_let_eq.rs:330:5: 330:19
    }

    bb25: {
        _3 = move (_67.0: u32);          // scope 9 at ui/consts/const_let_eq.rs:330:5: 330:19
        StorageDead(_63);                // scope 9 at ui/consts/const_let_eq.rs:330:18: 330:19
        StorageDead(_64);                // scope 9 at ui/consts/const_let_eq.rs:330:19: 330:20
        _0 = _3;                         // scope 9 at ui/consts/const_let_eq.rs:332:5: 332:6
        StorageDead(_57);                // scope 8 at ui/consts/const_let_eq.rs:333:1: 333:2
        StorageDead(_46);                // scope 7 at ui/consts/const_let_eq.rs:333:1: 333:2
        StorageDead(_35);                // scope 6 at ui/consts/const_let_eq.rs:333:1: 333:2
        StorageDead(_24);                // scope 5 at ui/consts/const_let_eq.rs:333:1: 333:2
        StorageDead(_16);                // scope 4 at ui/consts/const_let_eq.rs:333:1: 333:2
        StorageDead(_15);                // scope 3 at ui/consts/const_let_eq.rs:333:1: 333:2
        StorageDead(_5);                 // scope 2 at ui/consts/const_let_eq.rs:333:1: 333:2
        StorageDead(_3);                 // scope 1 at ui/consts/const_let_eq.rs:333:1: 333:2
        StorageDead(_2);                 // scope 0 at ui/consts/const_let_eq.rs:333:1: 333:2
        return;                          // scope 0 at ui/consts/const_let_eq.rs:333:2: 333:2
    }
}

shr_assign::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:305:24: 305:25

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:305:24: 305:25
        return;                          // scope 0 at ui/consts/const_let_eq.rs:305:24: 305:25
    }
}

shr_assign::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:317:29: 317:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:317:29: 317:30
        return;                          // scope 0 at ui/consts/const_let_eq.rs:317:29: 317:30
    }
}

shr_assign::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:320:29: 320:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:320:29: 320:30
        return;                          // scope 0 at ui/consts/const_let_eq.rs:320:29: 320:30
    }
}

shr_assign::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:325:28: 325:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:325:28: 325:29
        return;                          // scope 0 at ui/consts/const_let_eq.rs:325:28: 325:29
    }
}

shr_assign::{constant#4}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:328:28: 328:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:328:28: 328:29
        return;                          // scope 0 at ui/consts/const_let_eq.rs:328:28: 328:29
    }
}

fn bit_and_assign(_1: W) -> u32 {
    let _2: u32;                         // in scope 0 at ui/consts/const_let_eq.rs:335:27: 335:28
    let mut _5: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:343:30: 343:31
    let _6: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:344:9: 344:10
    let mut _7: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:345:10: 345:16
    let _8: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:345:14: 345:15
    let mut _10: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:348:33: 348:34
    let mut _12: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:349:38: 349:39
    let mut _13: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:352:10: 352:23
    let mut _14: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:352:10: 352:15
    let mut _15: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:352:18: 352:23
    let mut _17: Foo<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:355:35: 355:41
    let mut _18: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:355:39: 355:40
    let _19: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:356:9: 356:10
    let mut _20: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:357:10: 357:18
    let _21: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:357:14: 357:15
    let mut _23: Bar<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:358:35: 358:47
    let mut _24: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:358:44: 358:45
    let _25: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:359:9: 359:10
    let mut _26: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:360:10: 360:18
    let _27: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:360:14: 360:15
    let mut _29: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:363:38: 363:41
    let mut _30: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:363:39: 363:40
    let _31: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:364:13: 364:14
    let mut _32: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:365:10: 365:20
    let _33: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:365:18: 365:19
    let mut _35: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:366:43: 366:46
    let mut _36: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:366:44: 366:45
    let _37: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:367:11: 367:12
    let mut _38: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:368:10: 368:18
    let _39: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:368:16: 368:17
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq.rs:335:27: 335:28
        let _3: u32;                     // in scope 1 at ui/consts/const_let_eq.rs:336:9: 336:10
        scope 2 {
            debug f => _3;               // in scope 2 at ui/consts/const_let_eq.rs:336:9: 336:10
            let mut _0: u32;             // return place in scope 2 at ui/consts/const_let_eq.rs:339:9: 339:14
            scope 3 {
                debug d => _0;           // in scope 3 at ui/consts/const_let_eq.rs:339:9: 339:14
                let mut _4: [u32; 1];    // in scope 3 at ui/consts/const_let_eq.rs:343:9: 343:16
                scope 4 {
                    debug arr => _4;     // in scope 4 at ui/consts/const_let_eq.rs:343:9: 343:16
                    let mut _9: Foo<u32>; // in scope 4 at ui/consts/const_let_eq.rs:348:9: 348:16
                    scope 5 {
                        debug foo => _9; // in scope 5 at ui/consts/const_let_eq.rs:348:9: 348:16
                        let mut _11: Bar<u32>; // in scope 5 at ui/consts/const_let_eq.rs:349:9: 349:16
                        scope 6 {
                            debug bar => _11; // in scope 6 at ui/consts/const_let_eq.rs:349:9: 349:16
                            let mut _16: [Foo<u32>; 1]; // in scope 6 at ui/consts/const_let_eq.rs:355:9: 355:16
                            scope 7 {
                                debug arr => _16; // in scope 7 at ui/consts/const_let_eq.rs:355:9: 355:16
                                let mut _22: [Bar<u32>; 1]; // in scope 7 at ui/consts/const_let_eq.rs:358:9: 358:16
                                scope 8 {
                                    debug arr => _22; // in scope 8 at ui/consts/const_let_eq.rs:358:9: 358:16
                                    let mut _28: Foo<[u32; 1]>; // in scope 8 at ui/consts/const_let_eq.rs:363:9: 363:16
                                    scope 9 {
                                        debug arr => _28; // in scope 9 at ui/consts/const_let_eq.rs:363:9: 363:16
                                        let mut _34: Bar<[u32; 1]>; // in scope 9 at ui/consts/const_let_eq.rs:366:9: 366:16
                                        scope 10 {
                                            debug arr => _34; // in scope 10 at ui/consts/const_let_eq.rs:366:9: 366:16
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = (_1.0: u32);                // scope 0 at ui/consts/const_let_eq.rs:335:27: 335:28
        _3 = const 65535_u32;            // scope 1 at ui/consts/const_let_eq.rs:336:13: 336:34
        _0 = _2;                         // scope 2 at ui/consts/const_let_eq.rs:339:22: 339:23
        _0 = BitAnd(_0, const 65534_u32); // scope 3 at ui/consts/const_let_eq.rs:340:5: 340:31
        _5 = const 65535_u32;            // scope 3 at ui/consts/const_let_eq.rs:343:30: 343:31
        _4 = [move _5];                  // scope 3 at ui/consts/const_let_eq.rs:343:29: 343:32
        _6 = const 0_usize;              // scope 4 at ui/consts/const_let_eq.rs:344:9: 344:10
        _4[_6] = BitAnd(_4[_6], const 65533_u32); // scope 4 at ui/consts/const_let_eq.rs:344:5: 344:36
        _8 = const 0_usize;              // scope 4 at ui/consts/const_let_eq.rs:345:14: 345:15
        _7 = _4[_8];                     // scope 4 at ui/consts/const_let_eq.rs:345:10: 345:16
        _0 = BitAnd(_0, move _7);        // scope 4 at ui/consts/const_let_eq.rs:345:5: 345:16
        _10 = _3;                        // scope 4 at ui/consts/const_let_eq.rs:348:33: 348:34
        _9 = Foo::<u32>(move _10);       // scope 4 at ui/consts/const_let_eq.rs:348:29: 348:35
        _12 = _3;                        // scope 5 at ui/consts/const_let_eq.rs:349:38: 349:39
        _11 = Bar::<u32> { x: move _12 }; // scope 5 at ui/consts/const_let_eq.rs:349:29: 349:41
        (_9.0: u32) = BitAnd((_9.0: u32), const 65527_u32); // scope 6 at ui/consts/const_let_eq.rs:350:5: 350:35
        (_11.0: u32) = BitAnd((_11.0: u32), const 65503_u32); // scope 6 at ui/consts/const_let_eq.rs:351:5: 351:35
        _14 = (_9.0: u32);               // scope 6 at ui/consts/const_let_eq.rs:352:10: 352:15
        _15 = (_11.0: u32);              // scope 6 at ui/consts/const_let_eq.rs:352:18: 352:23
        _13 = BitAnd(move _14, move _15); // scope 6 at ui/consts/const_let_eq.rs:352:10: 352:23
        _0 = BitAnd(_0, move _13);       // scope 6 at ui/consts/const_let_eq.rs:352:5: 352:23
        _18 = _3;                        // scope 6 at ui/consts/const_let_eq.rs:355:39: 355:40
        _17 = Foo::<u32>(move _18);      // scope 6 at ui/consts/const_let_eq.rs:355:35: 355:41
        _16 = [move _17];                // scope 6 at ui/consts/const_let_eq.rs:355:34: 355:42
        _19 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:356:9: 356:10
        (_16[_19].0: u32) = BitAnd((_16[_19].0: u32), const 65279_u32); // scope 7 at ui/consts/const_let_eq.rs:356:5: 356:38
        _21 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:357:14: 357:15
        _20 = (_16[_21].0: u32);         // scope 7 at ui/consts/const_let_eq.rs:357:10: 357:18
        _0 = BitAnd(_0, move _20);       // scope 7 at ui/consts/const_let_eq.rs:357:5: 357:18
        _24 = _3;                        // scope 7 at ui/consts/const_let_eq.rs:358:44: 358:45
        _23 = Bar::<u32> { x: move _24 }; // scope 7 at ui/consts/const_let_eq.rs:358:35: 358:47
        _22 = [move _23];                // scope 7 at ui/consts/const_let_eq.rs:358:34: 358:48
        _25 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:359:9: 359:10
        (_22[_25].0: u32) = BitAnd((_22[_25].0: u32), const 65023_u32); // scope 8 at ui/consts/const_let_eq.rs:359:5: 359:38
        _27 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:360:14: 360:15
        _26 = (_22[_27].0: u32);         // scope 8 at ui/consts/const_let_eq.rs:360:10: 360:18
        _0 = BitAnd(_0, move _26);       // scope 8 at ui/consts/const_let_eq.rs:360:5: 360:18
        _30 = _3;                        // scope 8 at ui/consts/const_let_eq.rs:363:39: 363:40
        _29 = [move _30];                // scope 8 at ui/consts/const_let_eq.rs:363:38: 363:41
        _28 = Foo::<[u32; 1]>(move _29); // scope 8 at ui/consts/const_let_eq.rs:363:34: 363:42
        _31 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:364:13: 364:14
        (_28.0: [u32; 1])[_31] = BitAnd((_28.0: [u32; 1])[_31], const 49151_u32); // scope 9 at ui/consts/const_let_eq.rs:364:5: 364:40
        _33 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:365:18: 365:19
        _32 = (_28.0: [u32; 1])[_33];    // scope 9 at ui/consts/const_let_eq.rs:365:10: 365:20
        _0 = BitAnd(_0, move _32);       // scope 9 at ui/consts/const_let_eq.rs:365:5: 365:20
        _36 = _3;                        // scope 9 at ui/consts/const_let_eq.rs:366:44: 366:45
        _35 = [move _36];                // scope 9 at ui/consts/const_let_eq.rs:366:43: 366:46
        _34 = Bar::<[u32; 1]> { x: move _35 }; // scope 9 at ui/consts/const_let_eq.rs:366:34: 366:48
        _37 = const 0_usize;             // scope 10 at ui/consts/const_let_eq.rs:367:11: 367:12
        (_34.0: [u32; 1])[_37] = BitAnd((_34.0: [u32; 1])[_37], const 32767_u32); // scope 10 at ui/consts/const_let_eq.rs:367:5: 367:38
        _39 = const 0_usize;             // scope 10 at ui/consts/const_let_eq.rs:368:16: 368:17
        _38 = (_34.0: [u32; 1])[_39];    // scope 10 at ui/consts/const_let_eq.rs:368:10: 368:18
        _0 = BitAnd(_0, move _38);       // scope 10 at ui/consts/const_let_eq.rs:368:5: 368:18
        return;                          // scope 0 at ui/consts/const_let_eq.rs:371:2: 371:2
    }
}

// MIR FOR CTFE
fn bit_and_assign(_1: W) -> u32 {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const_let_eq.rs:335:37: 335:40
    let _2: u32;                         // in scope 0 at ui/consts/const_let_eq.rs:335:27: 335:28
    let mut _6: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:343:30: 343:31
    let _7: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:344:9: 344:10
    let mut _8: usize;                   // in scope 0 at ui/consts/const_let_eq.rs:344:5: 344:11
    let mut _9: bool;                    // in scope 0 at ui/consts/const_let_eq.rs:344:5: 344:11
    let mut _10: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:345:10: 345:16
    let _11: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:345:14: 345:15
    let mut _12: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:345:10: 345:16
    let mut _13: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:345:10: 345:16
    let mut _15: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:348:33: 348:34
    let mut _17: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:349:38: 349:39
    let mut _18: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:352:10: 352:23
    let mut _19: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:352:10: 352:15
    let mut _20: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:352:18: 352:23
    let mut _22: Foo<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:355:35: 355:41
    let mut _23: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:355:39: 355:40
    let _24: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:356:9: 356:10
    let mut _25: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:356:5: 356:11
    let mut _26: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:356:5: 356:11
    let mut _27: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:357:10: 357:18
    let _28: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:357:14: 357:15
    let mut _29: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:357:10: 357:16
    let mut _30: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:357:10: 357:16
    let mut _32: Bar<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:358:35: 358:47
    let mut _33: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:358:44: 358:45
    let _34: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:359:9: 359:10
    let mut _35: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:359:5: 359:11
    let mut _36: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:359:5: 359:11
    let mut _37: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:360:10: 360:18
    let _38: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:360:14: 360:15
    let mut _39: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:360:10: 360:16
    let mut _40: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:360:10: 360:16
    let mut _42: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:363:38: 363:41
    let mut _43: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:363:39: 363:40
    let _44: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:364:13: 364:14
    let mut _45: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:364:5: 364:15
    let mut _46: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:364:5: 364:15
    let mut _47: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:365:10: 365:20
    let _48: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:365:18: 365:19
    let mut _49: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:365:10: 365:20
    let mut _50: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:365:10: 365:20
    let mut _52: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:366:43: 366:46
    let mut _53: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:366:44: 366:45
    let _54: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:367:11: 367:12
    let mut _55: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:367:5: 367:13
    let mut _56: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:367:5: 367:13
    let mut _57: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:368:10: 368:18
    let _58: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:368:16: 368:17
    let mut _59: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:368:10: 368:18
    let mut _60: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:368:10: 368:18
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq.rs:335:27: 335:28
        let _3: u32;                     // in scope 1 at ui/consts/const_let_eq.rs:336:9: 336:10
        scope 2 {
            debug f => _3;               // in scope 2 at ui/consts/const_let_eq.rs:336:9: 336:10
            let mut _4: u32;             // in scope 2 at ui/consts/const_let_eq.rs:339:9: 339:14
            scope 3 {
                debug d => _4;           // in scope 3 at ui/consts/const_let_eq.rs:339:9: 339:14
                let mut _5: [u32; 1];    // in scope 3 at ui/consts/const_let_eq.rs:343:9: 343:16
                scope 4 {
                    debug arr => _5;     // in scope 4 at ui/consts/const_let_eq.rs:343:9: 343:16
                    let mut _14: Foo<u32>; // in scope 4 at ui/consts/const_let_eq.rs:348:9: 348:16
                    scope 5 {
                        debug foo => _14; // in scope 5 at ui/consts/const_let_eq.rs:348:9: 348:16
                        let mut _16: Bar<u32>; // in scope 5 at ui/consts/const_let_eq.rs:349:9: 349:16
                        scope 6 {
                            debug bar => _16; // in scope 6 at ui/consts/const_let_eq.rs:349:9: 349:16
                            let mut _21: [Foo<u32>; 1]; // in scope 6 at ui/consts/const_let_eq.rs:355:9: 355:16
                            scope 7 {
                                debug arr => _21; // in scope 7 at ui/consts/const_let_eq.rs:355:9: 355:16
                                let mut _31: [Bar<u32>; 1]; // in scope 7 at ui/consts/const_let_eq.rs:358:9: 358:16
                                scope 8 {
                                    debug arr => _31; // in scope 8 at ui/consts/const_let_eq.rs:358:9: 358:16
                                    let mut _41: Foo<[u32; 1]>; // in scope 8 at ui/consts/const_let_eq.rs:363:9: 363:16
                                    scope 9 {
                                        debug arr => _41; // in scope 9 at ui/consts/const_let_eq.rs:363:9: 363:16
                                        let mut _51: Bar<[u32; 1]>; // in scope 9 at ui/consts/const_let_eq.rs:366:9: 366:16
                                        scope 10 {
                                            debug arr => _51; // in scope 10 at ui/consts/const_let_eq.rs:366:9: 366:16
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const_let_eq.rs:335:27: 335:28
        _2 = (_1.0: u32);                // scope 0 at ui/consts/const_let_eq.rs:335:27: 335:28
        StorageLive(_3);                 // scope 1 at ui/consts/const_let_eq.rs:336:9: 336:10
        _3 = const 65535_u32;            // scope 1 at ui/consts/const_let_eq.rs:336:13: 336:34
        StorageLive(_4);                 // scope 2 at ui/consts/const_let_eq.rs:339:9: 339:14
        _4 = _2;                         // scope 2 at ui/consts/const_let_eq.rs:339:22: 339:23
        _4 = BitAnd(_4, const 65534_u32); // scope 3 at ui/consts/const_let_eq.rs:340:5: 340:31
        StorageLive(_5);                 // scope 3 at ui/consts/const_let_eq.rs:343:9: 343:16
        StorageLive(_6);                 // scope 3 at ui/consts/const_let_eq.rs:343:30: 343:31
        _6 = _3;                         // scope 3 at ui/consts/const_let_eq.rs:343:30: 343:31
        _5 = [move _6];                  // scope 3 at ui/consts/const_let_eq.rs:343:29: 343:32
        StorageDead(_6);                 // scope 3 at ui/consts/const_let_eq.rs:343:31: 343:32
        StorageLive(_7);                 // scope 4 at ui/consts/const_let_eq.rs:344:9: 344:10
        _7 = const 0_usize;              // scope 4 at ui/consts/const_let_eq.rs:344:9: 344:10
        _8 = Len(_5);                    // scope 4 at ui/consts/const_let_eq.rs:344:5: 344:11
        _9 = Lt(_7, _8);                 // scope 4 at ui/consts/const_let_eq.rs:344:5: 344:11
        assert(move _9, "index out of bounds: the length is {} but the index is {}", move _8, _7) -> bb1; // scope 4 at ui/consts/const_let_eq.rs:344:5: 344:11
    }

    bb1: {
        _5[_7] = BitAnd(_5[_7], const 65533_u32); // scope 4 at ui/consts/const_let_eq.rs:344:5: 344:36
        StorageDead(_7);                 // scope 4 at ui/consts/const_let_eq.rs:344:36: 344:37
        StorageLive(_10);                // scope 4 at ui/consts/const_let_eq.rs:345:10: 345:16
        StorageLive(_11);                // scope 4 at ui/consts/const_let_eq.rs:345:14: 345:15
        _11 = const 0_usize;             // scope 4 at ui/consts/const_let_eq.rs:345:14: 345:15
        _12 = Len(_5);                   // scope 4 at ui/consts/const_let_eq.rs:345:10: 345:16
        _13 = Lt(_11, _12);              // scope 4 at ui/consts/const_let_eq.rs:345:10: 345:16
        assert(move _13, "index out of bounds: the length is {} but the index is {}", move _12, _11) -> bb2; // scope 4 at ui/consts/const_let_eq.rs:345:10: 345:16
    }

    bb2: {
        _10 = _5[_11];                   // scope 4 at ui/consts/const_let_eq.rs:345:10: 345:16
        _4 = BitAnd(_4, move _10);       // scope 4 at ui/consts/const_let_eq.rs:345:5: 345:16
        StorageDead(_10);                // scope 4 at ui/consts/const_let_eq.rs:345:15: 345:16
        StorageDead(_11);                // scope 4 at ui/consts/const_let_eq.rs:345:16: 345:17
        StorageLive(_14);                // scope 4 at ui/consts/const_let_eq.rs:348:9: 348:16
        StorageLive(_15);                // scope 4 at ui/consts/const_let_eq.rs:348:33: 348:34
        _15 = _3;                        // scope 4 at ui/consts/const_let_eq.rs:348:33: 348:34
        _14 = Foo::<u32>(move _15);      // scope 4 at ui/consts/const_let_eq.rs:348:29: 348:35
        StorageDead(_15);                // scope 4 at ui/consts/const_let_eq.rs:348:34: 348:35
        StorageLive(_16);                // scope 5 at ui/consts/const_let_eq.rs:349:9: 349:16
        StorageLive(_17);                // scope 5 at ui/consts/const_let_eq.rs:349:38: 349:39
        _17 = _3;                        // scope 5 at ui/consts/const_let_eq.rs:349:38: 349:39
        _16 = Bar::<u32> { x: move _17 }; // scope 5 at ui/consts/const_let_eq.rs:349:29: 349:41
        StorageDead(_17);                // scope 5 at ui/consts/const_let_eq.rs:349:40: 349:41
        (_14.0: u32) = BitAnd((_14.0: u32), const 65527_u32); // scope 6 at ui/consts/const_let_eq.rs:350:5: 350:35
        (_16.0: u32) = BitAnd((_16.0: u32), const 65503_u32); // scope 6 at ui/consts/const_let_eq.rs:351:5: 351:35
        StorageLive(_18);                // scope 6 at ui/consts/const_let_eq.rs:352:10: 352:23
        StorageLive(_19);                // scope 6 at ui/consts/const_let_eq.rs:352:10: 352:15
        _19 = (_14.0: u32);              // scope 6 at ui/consts/const_let_eq.rs:352:10: 352:15
        StorageLive(_20);                // scope 6 at ui/consts/const_let_eq.rs:352:18: 352:23
        _20 = (_16.0: u32);              // scope 6 at ui/consts/const_let_eq.rs:352:18: 352:23
        _18 = BitAnd(move _19, move _20); // scope 6 at ui/consts/const_let_eq.rs:352:10: 352:23
        StorageDead(_20);                // scope 6 at ui/consts/const_let_eq.rs:352:22: 352:23
        StorageDead(_19);                // scope 6 at ui/consts/const_let_eq.rs:352:22: 352:23
        _4 = BitAnd(_4, move _18);       // scope 6 at ui/consts/const_let_eq.rs:352:5: 352:23
        StorageDead(_18);                // scope 6 at ui/consts/const_let_eq.rs:352:22: 352:23
        StorageLive(_21);                // scope 6 at ui/consts/const_let_eq.rs:355:9: 355:16
        StorageLive(_22);                // scope 6 at ui/consts/const_let_eq.rs:355:35: 355:41
        StorageLive(_23);                // scope 6 at ui/consts/const_let_eq.rs:355:39: 355:40
        _23 = _3;                        // scope 6 at ui/consts/const_let_eq.rs:355:39: 355:40
        _22 = Foo::<u32>(move _23);      // scope 6 at ui/consts/const_let_eq.rs:355:35: 355:41
        StorageDead(_23);                // scope 6 at ui/consts/const_let_eq.rs:355:40: 355:41
        _21 = [move _22];                // scope 6 at ui/consts/const_let_eq.rs:355:34: 355:42
        StorageDead(_22);                // scope 6 at ui/consts/const_let_eq.rs:355:41: 355:42
        StorageLive(_24);                // scope 7 at ui/consts/const_let_eq.rs:356:9: 356:10
        _24 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:356:9: 356:10
        _25 = Len(_21);                  // scope 7 at ui/consts/const_let_eq.rs:356:5: 356:11
        _26 = Lt(_24, _25);              // scope 7 at ui/consts/const_let_eq.rs:356:5: 356:11
        assert(move _26, "index out of bounds: the length is {} but the index is {}", move _25, _24) -> bb3; // scope 7 at ui/consts/const_let_eq.rs:356:5: 356:11
    }

    bb3: {
        (_21[_24].0: u32) = BitAnd((_21[_24].0: u32), const 65279_u32); // scope 7 at ui/consts/const_let_eq.rs:356:5: 356:38
        StorageDead(_24);                // scope 7 at ui/consts/const_let_eq.rs:356:38: 356:39
        StorageLive(_27);                // scope 7 at ui/consts/const_let_eq.rs:357:10: 357:18
        StorageLive(_28);                // scope 7 at ui/consts/const_let_eq.rs:357:14: 357:15
        _28 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:357:14: 357:15
        _29 = Len(_21);                  // scope 7 at ui/consts/const_let_eq.rs:357:10: 357:16
        _30 = Lt(_28, _29);              // scope 7 at ui/consts/const_let_eq.rs:357:10: 357:16
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> bb4; // scope 7 at ui/consts/const_let_eq.rs:357:10: 357:16
    }

    bb4: {
        _27 = (_21[_28].0: u32);         // scope 7 at ui/consts/const_let_eq.rs:357:10: 357:18
        _4 = BitAnd(_4, move _27);       // scope 7 at ui/consts/const_let_eq.rs:357:5: 357:18
        StorageDead(_27);                // scope 7 at ui/consts/const_let_eq.rs:357:17: 357:18
        StorageDead(_28);                // scope 7 at ui/consts/const_let_eq.rs:357:18: 357:19
        StorageLive(_31);                // scope 7 at ui/consts/const_let_eq.rs:358:9: 358:16
        StorageLive(_32);                // scope 7 at ui/consts/const_let_eq.rs:358:35: 358:47
        StorageLive(_33);                // scope 7 at ui/consts/const_let_eq.rs:358:44: 358:45
        _33 = _3;                        // scope 7 at ui/consts/const_let_eq.rs:358:44: 358:45
        _32 = Bar::<u32> { x: move _33 }; // scope 7 at ui/consts/const_let_eq.rs:358:35: 358:47
        StorageDead(_33);                // scope 7 at ui/consts/const_let_eq.rs:358:46: 358:47
        _31 = [move _32];                // scope 7 at ui/consts/const_let_eq.rs:358:34: 358:48
        StorageDead(_32);                // scope 7 at ui/consts/const_let_eq.rs:358:47: 358:48
        StorageLive(_34);                // scope 8 at ui/consts/const_let_eq.rs:359:9: 359:10
        _34 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:359:9: 359:10
        _35 = Len(_31);                  // scope 8 at ui/consts/const_let_eq.rs:359:5: 359:11
        _36 = Lt(_34, _35);              // scope 8 at ui/consts/const_let_eq.rs:359:5: 359:11
        assert(move _36, "index out of bounds: the length is {} but the index is {}", move _35, _34) -> bb5; // scope 8 at ui/consts/const_let_eq.rs:359:5: 359:11
    }

    bb5: {
        (_31[_34].0: u32) = BitAnd((_31[_34].0: u32), const 65023_u32); // scope 8 at ui/consts/const_let_eq.rs:359:5: 359:38
        StorageDead(_34);                // scope 8 at ui/consts/const_let_eq.rs:359:38: 359:39
        StorageLive(_37);                // scope 8 at ui/consts/const_let_eq.rs:360:10: 360:18
        StorageLive(_38);                // scope 8 at ui/consts/const_let_eq.rs:360:14: 360:15
        _38 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:360:14: 360:15
        _39 = Len(_31);                  // scope 8 at ui/consts/const_let_eq.rs:360:10: 360:16
        _40 = Lt(_38, _39);              // scope 8 at ui/consts/const_let_eq.rs:360:10: 360:16
        assert(move _40, "index out of bounds: the length is {} but the index is {}", move _39, _38) -> bb6; // scope 8 at ui/consts/const_let_eq.rs:360:10: 360:16
    }

    bb6: {
        _37 = (_31[_38].0: u32);         // scope 8 at ui/consts/const_let_eq.rs:360:10: 360:18
        _4 = BitAnd(_4, move _37);       // scope 8 at ui/consts/const_let_eq.rs:360:5: 360:18
        StorageDead(_37);                // scope 8 at ui/consts/const_let_eq.rs:360:17: 360:18
        StorageDead(_38);                // scope 8 at ui/consts/const_let_eq.rs:360:18: 360:19
        StorageLive(_41);                // scope 8 at ui/consts/const_let_eq.rs:363:9: 363:16
        StorageLive(_42);                // scope 8 at ui/consts/const_let_eq.rs:363:38: 363:41
        StorageLive(_43);                // scope 8 at ui/consts/const_let_eq.rs:363:39: 363:40
        _43 = _3;                        // scope 8 at ui/consts/const_let_eq.rs:363:39: 363:40
        _42 = [move _43];                // scope 8 at ui/consts/const_let_eq.rs:363:38: 363:41
        StorageDead(_43);                // scope 8 at ui/consts/const_let_eq.rs:363:40: 363:41
        _41 = Foo::<[u32; 1]>(move _42); // scope 8 at ui/consts/const_let_eq.rs:363:34: 363:42
        StorageDead(_42);                // scope 8 at ui/consts/const_let_eq.rs:363:41: 363:42
        StorageLive(_44);                // scope 9 at ui/consts/const_let_eq.rs:364:13: 364:14
        _44 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:364:13: 364:14
        _45 = Len((_41.0: [u32; 1]));    // scope 9 at ui/consts/const_let_eq.rs:364:5: 364:15
        _46 = Lt(_44, _45);              // scope 9 at ui/consts/const_let_eq.rs:364:5: 364:15
        assert(move _46, "index out of bounds: the length is {} but the index is {}", move _45, _44) -> bb7; // scope 9 at ui/consts/const_let_eq.rs:364:5: 364:15
    }

    bb7: {
        (_41.0: [u32; 1])[_44] = BitAnd((_41.0: [u32; 1])[_44], const 49151_u32); // scope 9 at ui/consts/const_let_eq.rs:364:5: 364:40
        StorageDead(_44);                // scope 9 at ui/consts/const_let_eq.rs:364:40: 364:41
        StorageLive(_47);                // scope 9 at ui/consts/const_let_eq.rs:365:10: 365:20
        StorageLive(_48);                // scope 9 at ui/consts/const_let_eq.rs:365:18: 365:19
        _48 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:365:18: 365:19
        _49 = Len((_41.0: [u32; 1]));    // scope 9 at ui/consts/const_let_eq.rs:365:10: 365:20
        _50 = Lt(_48, _49);              // scope 9 at ui/consts/const_let_eq.rs:365:10: 365:20
        assert(move _50, "index out of bounds: the length is {} but the index is {}", move _49, _48) -> bb8; // scope 9 at ui/consts/const_let_eq.rs:365:10: 365:20
    }

    bb8: {
        _47 = (_41.0: [u32; 1])[_48];    // scope 9 at ui/consts/const_let_eq.rs:365:10: 365:20
        _4 = BitAnd(_4, move _47);       // scope 9 at ui/consts/const_let_eq.rs:365:5: 365:20
        StorageDead(_47);                // scope 9 at ui/consts/const_let_eq.rs:365:19: 365:20
        StorageDead(_48);                // scope 9 at ui/consts/const_let_eq.rs:365:20: 365:21
        StorageLive(_51);                // scope 9 at ui/consts/const_let_eq.rs:366:9: 366:16
        StorageLive(_52);                // scope 9 at ui/consts/const_let_eq.rs:366:43: 366:46
        StorageLive(_53);                // scope 9 at ui/consts/const_let_eq.rs:366:44: 366:45
        _53 = _3;                        // scope 9 at ui/consts/const_let_eq.rs:366:44: 366:45
        _52 = [move _53];                // scope 9 at ui/consts/const_let_eq.rs:366:43: 366:46
        StorageDead(_53);                // scope 9 at ui/consts/const_let_eq.rs:366:45: 366:46
        _51 = Bar::<[u32; 1]> { x: move _52 }; // scope 9 at ui/consts/const_let_eq.rs:366:34: 366:48
        StorageDead(_52);                // scope 9 at ui/consts/const_let_eq.rs:366:47: 366:48
        StorageLive(_54);                // scope 10 at ui/consts/const_let_eq.rs:367:11: 367:12
        _54 = const 0_usize;             // scope 10 at ui/consts/const_let_eq.rs:367:11: 367:12
        _55 = Len((_51.0: [u32; 1]));    // scope 10 at ui/consts/const_let_eq.rs:367:5: 367:13
        _56 = Lt(_54, _55);              // scope 10 at ui/consts/const_let_eq.rs:367:5: 367:13
        assert(move _56, "index out of bounds: the length is {} but the index is {}", move _55, _54) -> bb9; // scope 10 at ui/consts/const_let_eq.rs:367:5: 367:13
    }

    bb9: {
        (_51.0: [u32; 1])[_54] = BitAnd((_51.0: [u32; 1])[_54], const 32767_u32); // scope 10 at ui/consts/const_let_eq.rs:367:5: 367:38
        StorageDead(_54);                // scope 10 at ui/consts/const_let_eq.rs:367:38: 367:39
        StorageLive(_57);                // scope 10 at ui/consts/const_let_eq.rs:368:10: 368:18
        StorageLive(_58);                // scope 10 at ui/consts/const_let_eq.rs:368:16: 368:17
        _58 = const 0_usize;             // scope 10 at ui/consts/const_let_eq.rs:368:16: 368:17
        _59 = Len((_51.0: [u32; 1]));    // scope 10 at ui/consts/const_let_eq.rs:368:10: 368:18
        _60 = Lt(_58, _59);              // scope 10 at ui/consts/const_let_eq.rs:368:10: 368:18
        assert(move _60, "index out of bounds: the length is {} but the index is {}", move _59, _58) -> bb10; // scope 10 at ui/consts/const_let_eq.rs:368:10: 368:18
    }

    bb10: {
        _57 = (_51.0: [u32; 1])[_58];    // scope 10 at ui/consts/const_let_eq.rs:368:10: 368:18
        _4 = BitAnd(_4, move _57);       // scope 10 at ui/consts/const_let_eq.rs:368:5: 368:18
        StorageDead(_57);                // scope 10 at ui/consts/const_let_eq.rs:368:17: 368:18
        StorageDead(_58);                // scope 10 at ui/consts/const_let_eq.rs:368:18: 368:19
        _0 = _4;                         // scope 10 at ui/consts/const_let_eq.rs:370:5: 370:6
        StorageDead(_51);                // scope 9 at ui/consts/const_let_eq.rs:371:1: 371:2
        StorageDead(_41);                // scope 8 at ui/consts/const_let_eq.rs:371:1: 371:2
        StorageDead(_31);                // scope 7 at ui/consts/const_let_eq.rs:371:1: 371:2
        StorageDead(_21);                // scope 6 at ui/consts/const_let_eq.rs:371:1: 371:2
        StorageDead(_16);                // scope 5 at ui/consts/const_let_eq.rs:371:1: 371:2
        StorageDead(_14);                // scope 4 at ui/consts/const_let_eq.rs:371:1: 371:2
        StorageDead(_5);                 // scope 3 at ui/consts/const_let_eq.rs:371:1: 371:2
        StorageDead(_4);                 // scope 2 at ui/consts/const_let_eq.rs:371:1: 371:2
        StorageDead(_3);                 // scope 1 at ui/consts/const_let_eq.rs:371:1: 371:2
        StorageDead(_2);                 // scope 0 at ui/consts/const_let_eq.rs:371:1: 371:2
        return;                          // scope 0 at ui/consts/const_let_eq.rs:371:2: 371:2
    }
}

bit_and_assign::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:343:24: 343:25

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:343:24: 343:25
        return;                          // scope 0 at ui/consts/const_let_eq.rs:343:24: 343:25
    }
}

bit_and_assign::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:355:29: 355:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:355:29: 355:30
        return;                          // scope 0 at ui/consts/const_let_eq.rs:355:29: 355:30
    }
}

bit_and_assign::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:358:29: 358:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:358:29: 358:30
        return;                          // scope 0 at ui/consts/const_let_eq.rs:358:29: 358:30
    }
}

bit_and_assign::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:363:28: 363:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:363:28: 363:29
        return;                          // scope 0 at ui/consts/const_let_eq.rs:363:28: 363:29
    }
}

bit_and_assign::{constant#4}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:366:28: 366:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:366:28: 366:29
        return;                          // scope 0 at ui/consts/const_let_eq.rs:366:28: 366:29
    }
}

fn bit_or_assign(_1: W) -> u32 {
    let _2: u32;                         // in scope 0 at ui/consts/const_let_eq.rs:373:26: 373:27
    let mut _5: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:381:30: 381:31
    let _6: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:382:9: 382:10
    let mut _7: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:383:10: 383:16
    let _8: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:383:14: 383:15
    let mut _10: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:386:33: 386:34
    let mut _12: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:387:38: 387:39
    let mut _13: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:390:10: 390:23
    let mut _14: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:390:10: 390:15
    let mut _15: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:390:18: 390:23
    let mut _17: Foo<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:393:35: 393:41
    let mut _18: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:393:39: 393:40
    let _19: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:394:9: 394:10
    let mut _20: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:395:10: 395:18
    let _21: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:395:14: 395:15
    let mut _23: Bar<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:396:35: 396:47
    let mut _24: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:396:44: 396:45
    let _25: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:397:9: 397:10
    let mut _26: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:398:10: 398:18
    let _27: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:398:14: 398:15
    let mut _29: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:401:38: 401:41
    let mut _30: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:401:39: 401:40
    let _31: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:402:13: 402:14
    let mut _32: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:403:10: 403:20
    let _33: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:403:18: 403:19
    let mut _35: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:404:43: 404:46
    let mut _36: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:404:44: 404:45
    let _37: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:405:11: 405:12
    let mut _38: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:406:10: 406:18
    let _39: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:406:16: 406:17
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq.rs:373:26: 373:27
        let _3: u32;                     // in scope 1 at ui/consts/const_let_eq.rs:374:9: 374:10
        scope 2 {
            debug f => _3;               // in scope 2 at ui/consts/const_let_eq.rs:374:9: 374:10
            let mut _0: u32;             // return place in scope 2 at ui/consts/const_let_eq.rs:377:9: 377:14
            scope 3 {
                debug d => _0;           // in scope 3 at ui/consts/const_let_eq.rs:377:9: 377:14
                let mut _4: [u32; 1];    // in scope 3 at ui/consts/const_let_eq.rs:381:9: 381:16
                scope 4 {
                    debug arr => _4;     // in scope 4 at ui/consts/const_let_eq.rs:381:9: 381:16
                    let mut _9: Foo<u32>; // in scope 4 at ui/consts/const_let_eq.rs:386:9: 386:16
                    scope 5 {
                        debug foo => _9; // in scope 5 at ui/consts/const_let_eq.rs:386:9: 386:16
                        let mut _11: Bar<u32>; // in scope 5 at ui/consts/const_let_eq.rs:387:9: 387:16
                        scope 6 {
                            debug bar => _11; // in scope 6 at ui/consts/const_let_eq.rs:387:9: 387:16
                            let mut _16: [Foo<u32>; 1]; // in scope 6 at ui/consts/const_let_eq.rs:393:9: 393:16
                            scope 7 {
                                debug arr => _16; // in scope 7 at ui/consts/const_let_eq.rs:393:9: 393:16
                                let mut _22: [Bar<u32>; 1]; // in scope 7 at ui/consts/const_let_eq.rs:396:9: 396:16
                                scope 8 {
                                    debug arr => _22; // in scope 8 at ui/consts/const_let_eq.rs:396:9: 396:16
                                    let mut _28: Foo<[u32; 1]>; // in scope 8 at ui/consts/const_let_eq.rs:401:9: 401:16
                                    scope 9 {
                                        debug arr => _28; // in scope 9 at ui/consts/const_let_eq.rs:401:9: 401:16
                                        let mut _34: Bar<[u32; 1]>; // in scope 9 at ui/consts/const_let_eq.rs:404:9: 404:16
                                        scope 10 {
                                            debug arr => _34; // in scope 10 at ui/consts/const_let_eq.rs:404:9: 404:16
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = (_1.0: u32);                // scope 0 at ui/consts/const_let_eq.rs:373:26: 373:27
        _3 = const 0_u32;                // scope 1 at ui/consts/const_let_eq.rs:374:13: 374:34
        _0 = _2;                         // scope 2 at ui/consts/const_let_eq.rs:377:22: 377:23
        _0 = BitOr(_0, const 1_u32);     // scope 3 at ui/consts/const_let_eq.rs:378:5: 378:31
        _5 = const 0_u32;                // scope 3 at ui/consts/const_let_eq.rs:381:30: 381:31
        _4 = [move _5];                  // scope 3 at ui/consts/const_let_eq.rs:381:29: 381:32
        _6 = const 0_usize;              // scope 4 at ui/consts/const_let_eq.rs:382:9: 382:10
        _4[_6] = BitOr(_4[_6], const 9_u32); // scope 4 at ui/consts/const_let_eq.rs:382:5: 382:36
        _8 = const 0_usize;              // scope 4 at ui/consts/const_let_eq.rs:383:14: 383:15
        _7 = _4[_8];                     // scope 4 at ui/consts/const_let_eq.rs:383:10: 383:16
        _0 = BitOr(_0, move _7);         // scope 4 at ui/consts/const_let_eq.rs:383:5: 383:16
        _10 = _3;                        // scope 4 at ui/consts/const_let_eq.rs:386:33: 386:34
        _9 = Foo::<u32>(move _10);       // scope 4 at ui/consts/const_let_eq.rs:386:29: 386:35
        _12 = _3;                        // scope 5 at ui/consts/const_let_eq.rs:387:38: 387:39
        _11 = Bar::<u32> { x: move _12 }; // scope 5 at ui/consts/const_let_eq.rs:387:29: 387:41
        (_9.0: u32) = BitOr((_9.0: u32), const 16_u32); // scope 6 at ui/consts/const_let_eq.rs:388:5: 388:35
        (_11.0: u32) = BitOr((_11.0: u32), const 64_u32); // scope 6 at ui/consts/const_let_eq.rs:389:5: 389:35
        _14 = (_9.0: u32);               // scope 6 at ui/consts/const_let_eq.rs:390:10: 390:15
        _15 = (_11.0: u32);              // scope 6 at ui/consts/const_let_eq.rs:390:18: 390:23
        _13 = BitOr(move _14, move _15); // scope 6 at ui/consts/const_let_eq.rs:390:10: 390:23
        _0 = BitOr(_0, move _13);        // scope 6 at ui/consts/const_let_eq.rs:390:5: 390:23
        _18 = _3;                        // scope 6 at ui/consts/const_let_eq.rs:393:39: 393:40
        _17 = Foo::<u32>(move _18);      // scope 6 at ui/consts/const_let_eq.rs:393:35: 393:41
        _16 = [move _17];                // scope 6 at ui/consts/const_let_eq.rs:393:34: 393:42
        _19 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:394:9: 394:10
        (_16[_19].0: u32) = BitOr((_16[_19].0: u32), const 256_u32); // scope 7 at ui/consts/const_let_eq.rs:394:5: 394:38
        _21 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:395:14: 395:15
        _20 = (_16[_21].0: u32);         // scope 7 at ui/consts/const_let_eq.rs:395:10: 395:18
        _0 = BitOr(_0, move _20);        // scope 7 at ui/consts/const_let_eq.rs:395:5: 395:18
        _24 = _3;                        // scope 7 at ui/consts/const_let_eq.rs:396:44: 396:45
        _23 = Bar::<u32> { x: move _24 }; // scope 7 at ui/consts/const_let_eq.rs:396:35: 396:47
        _22 = [move _23];                // scope 7 at ui/consts/const_let_eq.rs:396:34: 396:48
        _25 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:397:9: 397:10
        (_22[_25].0: u32) = BitOr((_22[_25].0: u32), const 512_u32); // scope 8 at ui/consts/const_let_eq.rs:397:5: 397:38
        _27 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:398:14: 398:15
        _26 = (_22[_27].0: u32);         // scope 8 at ui/consts/const_let_eq.rs:398:10: 398:18
        _0 = BitOr(_0, move _26);        // scope 8 at ui/consts/const_let_eq.rs:398:5: 398:18
        _30 = _3;                        // scope 8 at ui/consts/const_let_eq.rs:401:39: 401:40
        _29 = [move _30];                // scope 8 at ui/consts/const_let_eq.rs:401:38: 401:41
        _28 = Foo::<[u32; 1]>(move _29); // scope 8 at ui/consts/const_let_eq.rs:401:34: 401:42
        _31 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:402:13: 402:14
        (_28.0: [u32; 1])[_31] = BitOr((_28.0: [u32; 1])[_31], const 32768_u32); // scope 9 at ui/consts/const_let_eq.rs:402:5: 402:40
        _33 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:403:18: 403:19
        _32 = (_28.0: [u32; 1])[_33];    // scope 9 at ui/consts/const_let_eq.rs:403:10: 403:20
        _0 = BitOr(_0, move _32);        // scope 9 at ui/consts/const_let_eq.rs:403:5: 403:20
        _36 = _3;                        // scope 9 at ui/consts/const_let_eq.rs:404:44: 404:45
        _35 = [move _36];                // scope 9 at ui/consts/const_let_eq.rs:404:43: 404:46
        _34 = Bar::<[u32; 1]> { x: move _35 }; // scope 9 at ui/consts/const_let_eq.rs:404:34: 404:48
        _37 = const 0_usize;             // scope 10 at ui/consts/const_let_eq.rs:405:11: 405:12
        (_34.0: [u32; 1])[_37] = BitOr((_34.0: [u32; 1])[_37], const 49152_u32); // scope 10 at ui/consts/const_let_eq.rs:405:5: 405:38
        _39 = const 0_usize;             // scope 10 at ui/consts/const_let_eq.rs:406:16: 406:17
        _38 = (_34.0: [u32; 1])[_39];    // scope 10 at ui/consts/const_let_eq.rs:406:10: 406:18
        _0 = BitOr(_0, move _38);        // scope 10 at ui/consts/const_let_eq.rs:406:5: 406:18
        return;                          // scope 0 at ui/consts/const_let_eq.rs:409:2: 409:2
    }
}

// MIR FOR CTFE
fn bit_or_assign(_1: W) -> u32 {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const_let_eq.rs:373:36: 373:39
    let _2: u32;                         // in scope 0 at ui/consts/const_let_eq.rs:373:26: 373:27
    let mut _6: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:381:30: 381:31
    let _7: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:382:9: 382:10
    let mut _8: usize;                   // in scope 0 at ui/consts/const_let_eq.rs:382:5: 382:11
    let mut _9: bool;                    // in scope 0 at ui/consts/const_let_eq.rs:382:5: 382:11
    let mut _10: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:383:10: 383:16
    let _11: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:383:14: 383:15
    let mut _12: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:383:10: 383:16
    let mut _13: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:383:10: 383:16
    let mut _15: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:386:33: 386:34
    let mut _17: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:387:38: 387:39
    let mut _18: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:390:10: 390:23
    let mut _19: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:390:10: 390:15
    let mut _20: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:390:18: 390:23
    let mut _22: Foo<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:393:35: 393:41
    let mut _23: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:393:39: 393:40
    let _24: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:394:9: 394:10
    let mut _25: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:394:5: 394:11
    let mut _26: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:394:5: 394:11
    let mut _27: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:395:10: 395:18
    let _28: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:395:14: 395:15
    let mut _29: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:395:10: 395:16
    let mut _30: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:395:10: 395:16
    let mut _32: Bar<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:396:35: 396:47
    let mut _33: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:396:44: 396:45
    let _34: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:397:9: 397:10
    let mut _35: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:397:5: 397:11
    let mut _36: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:397:5: 397:11
    let mut _37: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:398:10: 398:18
    let _38: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:398:14: 398:15
    let mut _39: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:398:10: 398:16
    let mut _40: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:398:10: 398:16
    let mut _42: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:401:38: 401:41
    let mut _43: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:401:39: 401:40
    let _44: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:402:13: 402:14
    let mut _45: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:402:5: 402:15
    let mut _46: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:402:5: 402:15
    let mut _47: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:403:10: 403:20
    let _48: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:403:18: 403:19
    let mut _49: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:403:10: 403:20
    let mut _50: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:403:10: 403:20
    let mut _52: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:404:43: 404:46
    let mut _53: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:404:44: 404:45
    let _54: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:405:11: 405:12
    let mut _55: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:405:5: 405:13
    let mut _56: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:405:5: 405:13
    let mut _57: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:406:10: 406:18
    let _58: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:406:16: 406:17
    let mut _59: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:406:10: 406:18
    let mut _60: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:406:10: 406:18
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq.rs:373:26: 373:27
        let _3: u32;                     // in scope 1 at ui/consts/const_let_eq.rs:374:9: 374:10
        scope 2 {
            debug f => _3;               // in scope 2 at ui/consts/const_let_eq.rs:374:9: 374:10
            let mut _4: u32;             // in scope 2 at ui/consts/const_let_eq.rs:377:9: 377:14
            scope 3 {
                debug d => _4;           // in scope 3 at ui/consts/const_let_eq.rs:377:9: 377:14
                let mut _5: [u32; 1];    // in scope 3 at ui/consts/const_let_eq.rs:381:9: 381:16
                scope 4 {
                    debug arr => _5;     // in scope 4 at ui/consts/const_let_eq.rs:381:9: 381:16
                    let mut _14: Foo<u32>; // in scope 4 at ui/consts/const_let_eq.rs:386:9: 386:16
                    scope 5 {
                        debug foo => _14; // in scope 5 at ui/consts/const_let_eq.rs:386:9: 386:16
                        let mut _16: Bar<u32>; // in scope 5 at ui/consts/const_let_eq.rs:387:9: 387:16
                        scope 6 {
                            debug bar => _16; // in scope 6 at ui/consts/const_let_eq.rs:387:9: 387:16
                            let mut _21: [Foo<u32>; 1]; // in scope 6 at ui/consts/const_let_eq.rs:393:9: 393:16
                            scope 7 {
                                debug arr => _21; // in scope 7 at ui/consts/const_let_eq.rs:393:9: 393:16
                                let mut _31: [Bar<u32>; 1]; // in scope 7 at ui/consts/const_let_eq.rs:396:9: 396:16
                                scope 8 {
                                    debug arr => _31; // in scope 8 at ui/consts/const_let_eq.rs:396:9: 396:16
                                    let mut _41: Foo<[u32; 1]>; // in scope 8 at ui/consts/const_let_eq.rs:401:9: 401:16
                                    scope 9 {
                                        debug arr => _41; // in scope 9 at ui/consts/const_let_eq.rs:401:9: 401:16
                                        let mut _51: Bar<[u32; 1]>; // in scope 9 at ui/consts/const_let_eq.rs:404:9: 404:16
                                        scope 10 {
                                            debug arr => _51; // in scope 10 at ui/consts/const_let_eq.rs:404:9: 404:16
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const_let_eq.rs:373:26: 373:27
        _2 = (_1.0: u32);                // scope 0 at ui/consts/const_let_eq.rs:373:26: 373:27
        StorageLive(_3);                 // scope 1 at ui/consts/const_let_eq.rs:374:9: 374:10
        _3 = const 0_u32;                // scope 1 at ui/consts/const_let_eq.rs:374:13: 374:34
        StorageLive(_4);                 // scope 2 at ui/consts/const_let_eq.rs:377:9: 377:14
        _4 = _2;                         // scope 2 at ui/consts/const_let_eq.rs:377:22: 377:23
        _4 = BitOr(_4, const 1_u32);     // scope 3 at ui/consts/const_let_eq.rs:378:5: 378:31
        StorageLive(_5);                 // scope 3 at ui/consts/const_let_eq.rs:381:9: 381:16
        StorageLive(_6);                 // scope 3 at ui/consts/const_let_eq.rs:381:30: 381:31
        _6 = _3;                         // scope 3 at ui/consts/const_let_eq.rs:381:30: 381:31
        _5 = [move _6];                  // scope 3 at ui/consts/const_let_eq.rs:381:29: 381:32
        StorageDead(_6);                 // scope 3 at ui/consts/const_let_eq.rs:381:31: 381:32
        StorageLive(_7);                 // scope 4 at ui/consts/const_let_eq.rs:382:9: 382:10
        _7 = const 0_usize;              // scope 4 at ui/consts/const_let_eq.rs:382:9: 382:10
        _8 = Len(_5);                    // scope 4 at ui/consts/const_let_eq.rs:382:5: 382:11
        _9 = Lt(_7, _8);                 // scope 4 at ui/consts/const_let_eq.rs:382:5: 382:11
        assert(move _9, "index out of bounds: the length is {} but the index is {}", move _8, _7) -> bb1; // scope 4 at ui/consts/const_let_eq.rs:382:5: 382:11
    }

    bb1: {
        _5[_7] = BitOr(_5[_7], const 9_u32); // scope 4 at ui/consts/const_let_eq.rs:382:5: 382:36
        StorageDead(_7);                 // scope 4 at ui/consts/const_let_eq.rs:382:36: 382:37
        StorageLive(_10);                // scope 4 at ui/consts/const_let_eq.rs:383:10: 383:16
        StorageLive(_11);                // scope 4 at ui/consts/const_let_eq.rs:383:14: 383:15
        _11 = const 0_usize;             // scope 4 at ui/consts/const_let_eq.rs:383:14: 383:15
        _12 = Len(_5);                   // scope 4 at ui/consts/const_let_eq.rs:383:10: 383:16
        _13 = Lt(_11, _12);              // scope 4 at ui/consts/const_let_eq.rs:383:10: 383:16
        assert(move _13, "index out of bounds: the length is {} but the index is {}", move _12, _11) -> bb2; // scope 4 at ui/consts/const_let_eq.rs:383:10: 383:16
    }

    bb2: {
        _10 = _5[_11];                   // scope 4 at ui/consts/const_let_eq.rs:383:10: 383:16
        _4 = BitOr(_4, move _10);        // scope 4 at ui/consts/const_let_eq.rs:383:5: 383:16
        StorageDead(_10);                // scope 4 at ui/consts/const_let_eq.rs:383:15: 383:16
        StorageDead(_11);                // scope 4 at ui/consts/const_let_eq.rs:383:16: 383:17
        StorageLive(_14);                // scope 4 at ui/consts/const_let_eq.rs:386:9: 386:16
        StorageLive(_15);                // scope 4 at ui/consts/const_let_eq.rs:386:33: 386:34
        _15 = _3;                        // scope 4 at ui/consts/const_let_eq.rs:386:33: 386:34
        _14 = Foo::<u32>(move _15);      // scope 4 at ui/consts/const_let_eq.rs:386:29: 386:35
        StorageDead(_15);                // scope 4 at ui/consts/const_let_eq.rs:386:34: 386:35
        StorageLive(_16);                // scope 5 at ui/consts/const_let_eq.rs:387:9: 387:16
        StorageLive(_17);                // scope 5 at ui/consts/const_let_eq.rs:387:38: 387:39
        _17 = _3;                        // scope 5 at ui/consts/const_let_eq.rs:387:38: 387:39
        _16 = Bar::<u32> { x: move _17 }; // scope 5 at ui/consts/const_let_eq.rs:387:29: 387:41
        StorageDead(_17);                // scope 5 at ui/consts/const_let_eq.rs:387:40: 387:41
        (_14.0: u32) = BitOr((_14.0: u32), const 16_u32); // scope 6 at ui/consts/const_let_eq.rs:388:5: 388:35
        (_16.0: u32) = BitOr((_16.0: u32), const 64_u32); // scope 6 at ui/consts/const_let_eq.rs:389:5: 389:35
        StorageLive(_18);                // scope 6 at ui/consts/const_let_eq.rs:390:10: 390:23
        StorageLive(_19);                // scope 6 at ui/consts/const_let_eq.rs:390:10: 390:15
        _19 = (_14.0: u32);              // scope 6 at ui/consts/const_let_eq.rs:390:10: 390:15
        StorageLive(_20);                // scope 6 at ui/consts/const_let_eq.rs:390:18: 390:23
        _20 = (_16.0: u32);              // scope 6 at ui/consts/const_let_eq.rs:390:18: 390:23
        _18 = BitOr(move _19, move _20); // scope 6 at ui/consts/const_let_eq.rs:390:10: 390:23
        StorageDead(_20);                // scope 6 at ui/consts/const_let_eq.rs:390:22: 390:23
        StorageDead(_19);                // scope 6 at ui/consts/const_let_eq.rs:390:22: 390:23
        _4 = BitOr(_4, move _18);        // scope 6 at ui/consts/const_let_eq.rs:390:5: 390:23
        StorageDead(_18);                // scope 6 at ui/consts/const_let_eq.rs:390:22: 390:23
        StorageLive(_21);                // scope 6 at ui/consts/const_let_eq.rs:393:9: 393:16
        StorageLive(_22);                // scope 6 at ui/consts/const_let_eq.rs:393:35: 393:41
        StorageLive(_23);                // scope 6 at ui/consts/const_let_eq.rs:393:39: 393:40
        _23 = _3;                        // scope 6 at ui/consts/const_let_eq.rs:393:39: 393:40
        _22 = Foo::<u32>(move _23);      // scope 6 at ui/consts/const_let_eq.rs:393:35: 393:41
        StorageDead(_23);                // scope 6 at ui/consts/const_let_eq.rs:393:40: 393:41
        _21 = [move _22];                // scope 6 at ui/consts/const_let_eq.rs:393:34: 393:42
        StorageDead(_22);                // scope 6 at ui/consts/const_let_eq.rs:393:41: 393:42
        StorageLive(_24);                // scope 7 at ui/consts/const_let_eq.rs:394:9: 394:10
        _24 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:394:9: 394:10
        _25 = Len(_21);                  // scope 7 at ui/consts/const_let_eq.rs:394:5: 394:11
        _26 = Lt(_24, _25);              // scope 7 at ui/consts/const_let_eq.rs:394:5: 394:11
        assert(move _26, "index out of bounds: the length is {} but the index is {}", move _25, _24) -> bb3; // scope 7 at ui/consts/const_let_eq.rs:394:5: 394:11
    }

    bb3: {
        (_21[_24].0: u32) = BitOr((_21[_24].0: u32), const 256_u32); // scope 7 at ui/consts/const_let_eq.rs:394:5: 394:38
        StorageDead(_24);                // scope 7 at ui/consts/const_let_eq.rs:394:38: 394:39
        StorageLive(_27);                // scope 7 at ui/consts/const_let_eq.rs:395:10: 395:18
        StorageLive(_28);                // scope 7 at ui/consts/const_let_eq.rs:395:14: 395:15
        _28 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:395:14: 395:15
        _29 = Len(_21);                  // scope 7 at ui/consts/const_let_eq.rs:395:10: 395:16
        _30 = Lt(_28, _29);              // scope 7 at ui/consts/const_let_eq.rs:395:10: 395:16
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> bb4; // scope 7 at ui/consts/const_let_eq.rs:395:10: 395:16
    }

    bb4: {
        _27 = (_21[_28].0: u32);         // scope 7 at ui/consts/const_let_eq.rs:395:10: 395:18
        _4 = BitOr(_4, move _27);        // scope 7 at ui/consts/const_let_eq.rs:395:5: 395:18
        StorageDead(_27);                // scope 7 at ui/consts/const_let_eq.rs:395:17: 395:18
        StorageDead(_28);                // scope 7 at ui/consts/const_let_eq.rs:395:18: 395:19
        StorageLive(_31);                // scope 7 at ui/consts/const_let_eq.rs:396:9: 396:16
        StorageLive(_32);                // scope 7 at ui/consts/const_let_eq.rs:396:35: 396:47
        StorageLive(_33);                // scope 7 at ui/consts/const_let_eq.rs:396:44: 396:45
        _33 = _3;                        // scope 7 at ui/consts/const_let_eq.rs:396:44: 396:45
        _32 = Bar::<u32> { x: move _33 }; // scope 7 at ui/consts/const_let_eq.rs:396:35: 396:47
        StorageDead(_33);                // scope 7 at ui/consts/const_let_eq.rs:396:46: 396:47
        _31 = [move _32];                // scope 7 at ui/consts/const_let_eq.rs:396:34: 396:48
        StorageDead(_32);                // scope 7 at ui/consts/const_let_eq.rs:396:47: 396:48
        StorageLive(_34);                // scope 8 at ui/consts/const_let_eq.rs:397:9: 397:10
        _34 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:397:9: 397:10
        _35 = Len(_31);                  // scope 8 at ui/consts/const_let_eq.rs:397:5: 397:11
        _36 = Lt(_34, _35);              // scope 8 at ui/consts/const_let_eq.rs:397:5: 397:11
        assert(move _36, "index out of bounds: the length is {} but the index is {}", move _35, _34) -> bb5; // scope 8 at ui/consts/const_let_eq.rs:397:5: 397:11
    }

    bb5: {
        (_31[_34].0: u32) = BitOr((_31[_34].0: u32), const 512_u32); // scope 8 at ui/consts/const_let_eq.rs:397:5: 397:38
        StorageDead(_34);                // scope 8 at ui/consts/const_let_eq.rs:397:38: 397:39
        StorageLive(_37);                // scope 8 at ui/consts/const_let_eq.rs:398:10: 398:18
        StorageLive(_38);                // scope 8 at ui/consts/const_let_eq.rs:398:14: 398:15
        _38 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:398:14: 398:15
        _39 = Len(_31);                  // scope 8 at ui/consts/const_let_eq.rs:398:10: 398:16
        _40 = Lt(_38, _39);              // scope 8 at ui/consts/const_let_eq.rs:398:10: 398:16
        assert(move _40, "index out of bounds: the length is {} but the index is {}", move _39, _38) -> bb6; // scope 8 at ui/consts/const_let_eq.rs:398:10: 398:16
    }

    bb6: {
        _37 = (_31[_38].0: u32);         // scope 8 at ui/consts/const_let_eq.rs:398:10: 398:18
        _4 = BitOr(_4, move _37);        // scope 8 at ui/consts/const_let_eq.rs:398:5: 398:18
        StorageDead(_37);                // scope 8 at ui/consts/const_let_eq.rs:398:17: 398:18
        StorageDead(_38);                // scope 8 at ui/consts/const_let_eq.rs:398:18: 398:19
        StorageLive(_41);                // scope 8 at ui/consts/const_let_eq.rs:401:9: 401:16
        StorageLive(_42);                // scope 8 at ui/consts/const_let_eq.rs:401:38: 401:41
        StorageLive(_43);                // scope 8 at ui/consts/const_let_eq.rs:401:39: 401:40
        _43 = _3;                        // scope 8 at ui/consts/const_let_eq.rs:401:39: 401:40
        _42 = [move _43];                // scope 8 at ui/consts/const_let_eq.rs:401:38: 401:41
        StorageDead(_43);                // scope 8 at ui/consts/const_let_eq.rs:401:40: 401:41
        _41 = Foo::<[u32; 1]>(move _42); // scope 8 at ui/consts/const_let_eq.rs:401:34: 401:42
        StorageDead(_42);                // scope 8 at ui/consts/const_let_eq.rs:401:41: 401:42
        StorageLive(_44);                // scope 9 at ui/consts/const_let_eq.rs:402:13: 402:14
        _44 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:402:13: 402:14
        _45 = Len((_41.0: [u32; 1]));    // scope 9 at ui/consts/const_let_eq.rs:402:5: 402:15
        _46 = Lt(_44, _45);              // scope 9 at ui/consts/const_let_eq.rs:402:5: 402:15
        assert(move _46, "index out of bounds: the length is {} but the index is {}", move _45, _44) -> bb7; // scope 9 at ui/consts/const_let_eq.rs:402:5: 402:15
    }

    bb7: {
        (_41.0: [u32; 1])[_44] = BitOr((_41.0: [u32; 1])[_44], const 32768_u32); // scope 9 at ui/consts/const_let_eq.rs:402:5: 402:40
        StorageDead(_44);                // scope 9 at ui/consts/const_let_eq.rs:402:40: 402:41
        StorageLive(_47);                // scope 9 at ui/consts/const_let_eq.rs:403:10: 403:20
        StorageLive(_48);                // scope 9 at ui/consts/const_let_eq.rs:403:18: 403:19
        _48 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:403:18: 403:19
        _49 = Len((_41.0: [u32; 1]));    // scope 9 at ui/consts/const_let_eq.rs:403:10: 403:20
        _50 = Lt(_48, _49);              // scope 9 at ui/consts/const_let_eq.rs:403:10: 403:20
        assert(move _50, "index out of bounds: the length is {} but the index is {}", move _49, _48) -> bb8; // scope 9 at ui/consts/const_let_eq.rs:403:10: 403:20
    }

    bb8: {
        _47 = (_41.0: [u32; 1])[_48];    // scope 9 at ui/consts/const_let_eq.rs:403:10: 403:20
        _4 = BitOr(_4, move _47);        // scope 9 at ui/consts/const_let_eq.rs:403:5: 403:20
        StorageDead(_47);                // scope 9 at ui/consts/const_let_eq.rs:403:19: 403:20
        StorageDead(_48);                // scope 9 at ui/consts/const_let_eq.rs:403:20: 403:21
        StorageLive(_51);                // scope 9 at ui/consts/const_let_eq.rs:404:9: 404:16
        StorageLive(_52);                // scope 9 at ui/consts/const_let_eq.rs:404:43: 404:46
        StorageLive(_53);                // scope 9 at ui/consts/const_let_eq.rs:404:44: 404:45
        _53 = _3;                        // scope 9 at ui/consts/const_let_eq.rs:404:44: 404:45
        _52 = [move _53];                // scope 9 at ui/consts/const_let_eq.rs:404:43: 404:46
        StorageDead(_53);                // scope 9 at ui/consts/const_let_eq.rs:404:45: 404:46
        _51 = Bar::<[u32; 1]> { x: move _52 }; // scope 9 at ui/consts/const_let_eq.rs:404:34: 404:48
        StorageDead(_52);                // scope 9 at ui/consts/const_let_eq.rs:404:47: 404:48
        StorageLive(_54);                // scope 10 at ui/consts/const_let_eq.rs:405:11: 405:12
        _54 = const 0_usize;             // scope 10 at ui/consts/const_let_eq.rs:405:11: 405:12
        _55 = Len((_51.0: [u32; 1]));    // scope 10 at ui/consts/const_let_eq.rs:405:5: 405:13
        _56 = Lt(_54, _55);              // scope 10 at ui/consts/const_let_eq.rs:405:5: 405:13
        assert(move _56, "index out of bounds: the length is {} but the index is {}", move _55, _54) -> bb9; // scope 10 at ui/consts/const_let_eq.rs:405:5: 405:13
    }

    bb9: {
        (_51.0: [u32; 1])[_54] = BitOr((_51.0: [u32; 1])[_54], const 49152_u32); // scope 10 at ui/consts/const_let_eq.rs:405:5: 405:38
        StorageDead(_54);                // scope 10 at ui/consts/const_let_eq.rs:405:38: 405:39
        StorageLive(_57);                // scope 10 at ui/consts/const_let_eq.rs:406:10: 406:18
        StorageLive(_58);                // scope 10 at ui/consts/const_let_eq.rs:406:16: 406:17
        _58 = const 0_usize;             // scope 10 at ui/consts/const_let_eq.rs:406:16: 406:17
        _59 = Len((_51.0: [u32; 1]));    // scope 10 at ui/consts/const_let_eq.rs:406:10: 406:18
        _60 = Lt(_58, _59);              // scope 10 at ui/consts/const_let_eq.rs:406:10: 406:18
        assert(move _60, "index out of bounds: the length is {} but the index is {}", move _59, _58) -> bb10; // scope 10 at ui/consts/const_let_eq.rs:406:10: 406:18
    }

    bb10: {
        _57 = (_51.0: [u32; 1])[_58];    // scope 10 at ui/consts/const_let_eq.rs:406:10: 406:18
        _4 = BitOr(_4, move _57);        // scope 10 at ui/consts/const_let_eq.rs:406:5: 406:18
        StorageDead(_57);                // scope 10 at ui/consts/const_let_eq.rs:406:17: 406:18
        StorageDead(_58);                // scope 10 at ui/consts/const_let_eq.rs:406:18: 406:19
        _0 = _4;                         // scope 10 at ui/consts/const_let_eq.rs:408:5: 408:6
        StorageDead(_51);                // scope 9 at ui/consts/const_let_eq.rs:409:1: 409:2
        StorageDead(_41);                // scope 8 at ui/consts/const_let_eq.rs:409:1: 409:2
        StorageDead(_31);                // scope 7 at ui/consts/const_let_eq.rs:409:1: 409:2
        StorageDead(_21);                // scope 6 at ui/consts/const_let_eq.rs:409:1: 409:2
        StorageDead(_16);                // scope 5 at ui/consts/const_let_eq.rs:409:1: 409:2
        StorageDead(_14);                // scope 4 at ui/consts/const_let_eq.rs:409:1: 409:2
        StorageDead(_5);                 // scope 3 at ui/consts/const_let_eq.rs:409:1: 409:2
        StorageDead(_4);                 // scope 2 at ui/consts/const_let_eq.rs:409:1: 409:2
        StorageDead(_3);                 // scope 1 at ui/consts/const_let_eq.rs:409:1: 409:2
        StorageDead(_2);                 // scope 0 at ui/consts/const_let_eq.rs:409:1: 409:2
        return;                          // scope 0 at ui/consts/const_let_eq.rs:409:2: 409:2
    }
}

bit_or_assign::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:381:24: 381:25

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:381:24: 381:25
        return;                          // scope 0 at ui/consts/const_let_eq.rs:381:24: 381:25
    }
}

bit_or_assign::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:393:29: 393:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:393:29: 393:30
        return;                          // scope 0 at ui/consts/const_let_eq.rs:393:29: 393:30
    }
}

bit_or_assign::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:396:29: 396:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:396:29: 396:30
        return;                          // scope 0 at ui/consts/const_let_eq.rs:396:29: 396:30
    }
}

bit_or_assign::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:401:28: 401:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:401:28: 401:29
        return;                          // scope 0 at ui/consts/const_let_eq.rs:401:28: 401:29
    }
}

bit_or_assign::{constant#4}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:404:28: 404:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:404:28: 404:29
        return;                          // scope 0 at ui/consts/const_let_eq.rs:404:28: 404:29
    }
}

fn bit_xor_assign(_1: W) -> u32 {
    let _2: u32;                         // in scope 0 at ui/consts/const_let_eq.rs:411:27: 411:28
    let mut _5: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:419:30: 419:31
    let _6: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:420:9: 420:10
    let mut _7: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:421:10: 421:16
    let _8: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:421:14: 421:15
    let mut _10: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:424:33: 424:34
    let mut _12: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:425:38: 425:39
    let mut _13: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:428:10: 428:23
    let mut _14: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:428:10: 428:15
    let mut _15: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:428:18: 428:23
    let mut _17: Foo<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:431:35: 431:41
    let mut _18: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:431:39: 431:40
    let _19: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:432:9: 432:10
    let mut _20: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:433:10: 433:18
    let _21: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:433:14: 433:15
    let mut _23: Bar<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:434:35: 434:47
    let mut _24: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:434:44: 434:45
    let _25: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:435:9: 435:10
    let mut _26: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:436:10: 436:18
    let _27: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:436:14: 436:15
    let mut _29: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:439:38: 439:41
    let mut _30: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:439:39: 439:40
    let _31: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:440:13: 440:14
    let mut _32: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:441:10: 441:20
    let _33: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:441:18: 441:19
    let mut _35: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:442:43: 442:46
    let mut _36: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:442:44: 442:45
    let _37: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:443:11: 443:12
    let mut _38: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:444:10: 444:18
    let _39: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:444:16: 444:17
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq.rs:411:27: 411:28
        let _3: u32;                     // in scope 1 at ui/consts/const_let_eq.rs:412:9: 412:10
        scope 2 {
            debug f => _3;               // in scope 2 at ui/consts/const_let_eq.rs:412:9: 412:10
            let mut _0: u32;             // return place in scope 2 at ui/consts/const_let_eq.rs:415:9: 415:14
            scope 3 {
                debug d => _0;           // in scope 3 at ui/consts/const_let_eq.rs:415:9: 415:14
                let mut _4: [u32; 1];    // in scope 3 at ui/consts/const_let_eq.rs:419:9: 419:16
                scope 4 {
                    debug arr => _4;     // in scope 4 at ui/consts/const_let_eq.rs:419:9: 419:16
                    let mut _9: Foo<u32>; // in scope 4 at ui/consts/const_let_eq.rs:424:9: 424:16
                    scope 5 {
                        debug foo => _9; // in scope 5 at ui/consts/const_let_eq.rs:424:9: 424:16
                        let mut _11: Bar<u32>; // in scope 5 at ui/consts/const_let_eq.rs:425:9: 425:16
                        scope 6 {
                            debug bar => _11; // in scope 6 at ui/consts/const_let_eq.rs:425:9: 425:16
                            let mut _16: [Foo<u32>; 1]; // in scope 6 at ui/consts/const_let_eq.rs:431:9: 431:16
                            scope 7 {
                                debug arr => _16; // in scope 7 at ui/consts/const_let_eq.rs:431:9: 431:16
                                let mut _22: [Bar<u32>; 1]; // in scope 7 at ui/consts/const_let_eq.rs:434:9: 434:16
                                scope 8 {
                                    debug arr => _22; // in scope 8 at ui/consts/const_let_eq.rs:434:9: 434:16
                                    let mut _28: Foo<[u32; 1]>; // in scope 8 at ui/consts/const_let_eq.rs:439:9: 439:16
                                    scope 9 {
                                        debug arr => _28; // in scope 9 at ui/consts/const_let_eq.rs:439:9: 439:16
                                        let mut _34: Bar<[u32; 1]>; // in scope 9 at ui/consts/const_let_eq.rs:442:9: 442:16
                                        scope 10 {
                                            debug arr => _34; // in scope 10 at ui/consts/const_let_eq.rs:442:9: 442:16
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = (_1.0: u32);                // scope 0 at ui/consts/const_let_eq.rs:411:27: 411:28
        _3 = const 0_u32;                // scope 1 at ui/consts/const_let_eq.rs:412:13: 412:34
        _0 = _2;                         // scope 2 at ui/consts/const_let_eq.rs:415:22: 415:23
        _0 = BitXor(_0, const 1_u32);    // scope 3 at ui/consts/const_let_eq.rs:416:5: 416:31
        _5 = const 0_u32;                // scope 3 at ui/consts/const_let_eq.rs:419:30: 419:31
        _4 = [move _5];                  // scope 3 at ui/consts/const_let_eq.rs:419:29: 419:32
        _6 = const 0_usize;              // scope 4 at ui/consts/const_let_eq.rs:420:9: 420:10
        _4[_6] = BitXor(_4[_6], const 2_u32); // scope 4 at ui/consts/const_let_eq.rs:420:5: 420:36
        _8 = const 0_usize;              // scope 4 at ui/consts/const_let_eq.rs:421:14: 421:15
        _7 = _4[_8];                     // scope 4 at ui/consts/const_let_eq.rs:421:10: 421:16
        _0 = BitXor(_0, move _7);        // scope 4 at ui/consts/const_let_eq.rs:421:5: 421:16
        _10 = _3;                        // scope 4 at ui/consts/const_let_eq.rs:424:33: 424:34
        _9 = Foo::<u32>(move _10);       // scope 4 at ui/consts/const_let_eq.rs:424:29: 424:35
        _12 = _3;                        // scope 5 at ui/consts/const_let_eq.rs:425:38: 425:39
        _11 = Bar::<u32> { x: move _12 }; // scope 5 at ui/consts/const_let_eq.rs:425:29: 425:41
        (_9.0: u32) = BitXor((_9.0: u32), const 16_u32); // scope 6 at ui/consts/const_let_eq.rs:426:5: 426:35
        (_11.0: u32) = BitXor((_11.0: u32), const 128_u32); // scope 6 at ui/consts/const_let_eq.rs:427:5: 427:35
        _14 = (_9.0: u32);               // scope 6 at ui/consts/const_let_eq.rs:428:10: 428:15
        _15 = (_11.0: u32);              // scope 6 at ui/consts/const_let_eq.rs:428:18: 428:23
        _13 = BitXor(move _14, move _15); // scope 6 at ui/consts/const_let_eq.rs:428:10: 428:23
        _0 = BitXor(_0, move _13);       // scope 6 at ui/consts/const_let_eq.rs:428:5: 428:23
        _18 = _3;                        // scope 6 at ui/consts/const_let_eq.rs:431:39: 431:40
        _17 = Foo::<u32>(move _18);      // scope 6 at ui/consts/const_let_eq.rs:431:35: 431:41
        _16 = [move _17];                // scope 6 at ui/consts/const_let_eq.rs:431:34: 431:42
        _19 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:432:9: 432:10
        (_16[_19].0: u32) = BitXor((_16[_19].0: u32), const 256_u32); // scope 7 at ui/consts/const_let_eq.rs:432:5: 432:38
        _21 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:433:14: 433:15
        _20 = (_16[_21].0: u32);         // scope 7 at ui/consts/const_let_eq.rs:433:10: 433:18
        _0 = BitXor(_0, move _20);       // scope 7 at ui/consts/const_let_eq.rs:433:5: 433:18
        _24 = _3;                        // scope 7 at ui/consts/const_let_eq.rs:434:44: 434:45
        _23 = Bar::<u32> { x: move _24 }; // scope 7 at ui/consts/const_let_eq.rs:434:35: 434:47
        _22 = [move _23];                // scope 7 at ui/consts/const_let_eq.rs:434:34: 434:48
        _25 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:435:9: 435:10
        (_22[_25].0: u32) = BitXor((_22[_25].0: u32), const 512_u32); // scope 8 at ui/consts/const_let_eq.rs:435:5: 435:38
        _27 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:436:14: 436:15
        _26 = (_22[_27].0: u32);         // scope 8 at ui/consts/const_let_eq.rs:436:10: 436:18
        _0 = BitXor(_0, move _26);       // scope 8 at ui/consts/const_let_eq.rs:436:5: 436:18
        _30 = _3;                        // scope 8 at ui/consts/const_let_eq.rs:439:39: 439:40
        _29 = [move _30];                // scope 8 at ui/consts/const_let_eq.rs:439:38: 439:41
        _28 = Foo::<[u32; 1]>(move _29); // scope 8 at ui/consts/const_let_eq.rs:439:34: 439:42
        _31 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:440:13: 440:14
        (_28.0: [u32; 1])[_31] = BitXor((_28.0: [u32; 1])[_31], const 16384_u32); // scope 9 at ui/consts/const_let_eq.rs:440:5: 440:40
        _33 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:441:18: 441:19
        _32 = (_28.0: [u32; 1])[_33];    // scope 9 at ui/consts/const_let_eq.rs:441:10: 441:20
        _0 = BitXor(_0, move _32);       // scope 9 at ui/consts/const_let_eq.rs:441:5: 441:20
        _36 = _3;                        // scope 9 at ui/consts/const_let_eq.rs:442:44: 442:45
        _35 = [move _36];                // scope 9 at ui/consts/const_let_eq.rs:442:43: 442:46
        _34 = Bar::<[u32; 1]> { x: move _35 }; // scope 9 at ui/consts/const_let_eq.rs:442:34: 442:48
        _37 = const 0_usize;             // scope 10 at ui/consts/const_let_eq.rs:443:11: 443:12
        (_34.0: [u32; 1])[_37] = BitXor((_34.0: [u32; 1])[_37], const 32768_u32); // scope 10 at ui/consts/const_let_eq.rs:443:5: 443:38
        _39 = const 0_usize;             // scope 10 at ui/consts/const_let_eq.rs:444:16: 444:17
        _38 = (_34.0: [u32; 1])[_39];    // scope 10 at ui/consts/const_let_eq.rs:444:10: 444:18
        _0 = BitXor(_0, move _38);       // scope 10 at ui/consts/const_let_eq.rs:444:5: 444:18
        return;                          // scope 0 at ui/consts/const_let_eq.rs:447:2: 447:2
    }
}

// MIR FOR CTFE
fn bit_xor_assign(_1: W) -> u32 {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const_let_eq.rs:411:37: 411:40
    let _2: u32;                         // in scope 0 at ui/consts/const_let_eq.rs:411:27: 411:28
    let mut _6: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:419:30: 419:31
    let _7: usize;                       // in scope 0 at ui/consts/const_let_eq.rs:420:9: 420:10
    let mut _8: usize;                   // in scope 0 at ui/consts/const_let_eq.rs:420:5: 420:11
    let mut _9: bool;                    // in scope 0 at ui/consts/const_let_eq.rs:420:5: 420:11
    let mut _10: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:421:10: 421:16
    let _11: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:421:14: 421:15
    let mut _12: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:421:10: 421:16
    let mut _13: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:421:10: 421:16
    let mut _15: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:424:33: 424:34
    let mut _17: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:425:38: 425:39
    let mut _18: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:428:10: 428:23
    let mut _19: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:428:10: 428:15
    let mut _20: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:428:18: 428:23
    let mut _22: Foo<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:431:35: 431:41
    let mut _23: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:431:39: 431:40
    let _24: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:432:9: 432:10
    let mut _25: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:432:5: 432:11
    let mut _26: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:432:5: 432:11
    let mut _27: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:433:10: 433:18
    let _28: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:433:14: 433:15
    let mut _29: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:433:10: 433:16
    let mut _30: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:433:10: 433:16
    let mut _32: Bar<u32>;               // in scope 0 at ui/consts/const_let_eq.rs:434:35: 434:47
    let mut _33: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:434:44: 434:45
    let _34: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:435:9: 435:10
    let mut _35: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:435:5: 435:11
    let mut _36: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:435:5: 435:11
    let mut _37: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:436:10: 436:18
    let _38: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:436:14: 436:15
    let mut _39: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:436:10: 436:16
    let mut _40: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:436:10: 436:16
    let mut _42: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:439:38: 439:41
    let mut _43: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:439:39: 439:40
    let _44: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:440:13: 440:14
    let mut _45: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:440:5: 440:15
    let mut _46: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:440:5: 440:15
    let mut _47: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:441:10: 441:20
    let _48: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:441:18: 441:19
    let mut _49: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:441:10: 441:20
    let mut _50: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:441:10: 441:20
    let mut _52: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:442:43: 442:46
    let mut _53: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:442:44: 442:45
    let _54: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:443:11: 443:12
    let mut _55: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:443:5: 443:13
    let mut _56: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:443:5: 443:13
    let mut _57: u32;                    // in scope 0 at ui/consts/const_let_eq.rs:444:10: 444:18
    let _58: usize;                      // in scope 0 at ui/consts/const_let_eq.rs:444:16: 444:17
    let mut _59: usize;                  // in scope 0 at ui/consts/const_let_eq.rs:444:10: 444:18
    let mut _60: bool;                   // in scope 0 at ui/consts/const_let_eq.rs:444:10: 444:18
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq.rs:411:27: 411:28
        let _3: u32;                     // in scope 1 at ui/consts/const_let_eq.rs:412:9: 412:10
        scope 2 {
            debug f => _3;               // in scope 2 at ui/consts/const_let_eq.rs:412:9: 412:10
            let mut _4: u32;             // in scope 2 at ui/consts/const_let_eq.rs:415:9: 415:14
            scope 3 {
                debug d => _4;           // in scope 3 at ui/consts/const_let_eq.rs:415:9: 415:14
                let mut _5: [u32; 1];    // in scope 3 at ui/consts/const_let_eq.rs:419:9: 419:16
                scope 4 {
                    debug arr => _5;     // in scope 4 at ui/consts/const_let_eq.rs:419:9: 419:16
                    let mut _14: Foo<u32>; // in scope 4 at ui/consts/const_let_eq.rs:424:9: 424:16
                    scope 5 {
                        debug foo => _14; // in scope 5 at ui/consts/const_let_eq.rs:424:9: 424:16
                        let mut _16: Bar<u32>; // in scope 5 at ui/consts/const_let_eq.rs:425:9: 425:16
                        scope 6 {
                            debug bar => _16; // in scope 6 at ui/consts/const_let_eq.rs:425:9: 425:16
                            let mut _21: [Foo<u32>; 1]; // in scope 6 at ui/consts/const_let_eq.rs:431:9: 431:16
                            scope 7 {
                                debug arr => _21; // in scope 7 at ui/consts/const_let_eq.rs:431:9: 431:16
                                let mut _31: [Bar<u32>; 1]; // in scope 7 at ui/consts/const_let_eq.rs:434:9: 434:16
                                scope 8 {
                                    debug arr => _31; // in scope 8 at ui/consts/const_let_eq.rs:434:9: 434:16
                                    let mut _41: Foo<[u32; 1]>; // in scope 8 at ui/consts/const_let_eq.rs:439:9: 439:16
                                    scope 9 {
                                        debug arr => _41; // in scope 9 at ui/consts/const_let_eq.rs:439:9: 439:16
                                        let mut _51: Bar<[u32; 1]>; // in scope 9 at ui/consts/const_let_eq.rs:442:9: 442:16
                                        scope 10 {
                                            debug arr => _51; // in scope 10 at ui/consts/const_let_eq.rs:442:9: 442:16
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const_let_eq.rs:411:27: 411:28
        _2 = (_1.0: u32);                // scope 0 at ui/consts/const_let_eq.rs:411:27: 411:28
        StorageLive(_3);                 // scope 1 at ui/consts/const_let_eq.rs:412:9: 412:10
        _3 = const 0_u32;                // scope 1 at ui/consts/const_let_eq.rs:412:13: 412:34
        StorageLive(_4);                 // scope 2 at ui/consts/const_let_eq.rs:415:9: 415:14
        _4 = _2;                         // scope 2 at ui/consts/const_let_eq.rs:415:22: 415:23
        _4 = BitXor(_4, const 1_u32);    // scope 3 at ui/consts/const_let_eq.rs:416:5: 416:31
        StorageLive(_5);                 // scope 3 at ui/consts/const_let_eq.rs:419:9: 419:16
        StorageLive(_6);                 // scope 3 at ui/consts/const_let_eq.rs:419:30: 419:31
        _6 = _3;                         // scope 3 at ui/consts/const_let_eq.rs:419:30: 419:31
        _5 = [move _6];                  // scope 3 at ui/consts/const_let_eq.rs:419:29: 419:32
        StorageDead(_6);                 // scope 3 at ui/consts/const_let_eq.rs:419:31: 419:32
        StorageLive(_7);                 // scope 4 at ui/consts/const_let_eq.rs:420:9: 420:10
        _7 = const 0_usize;              // scope 4 at ui/consts/const_let_eq.rs:420:9: 420:10
        _8 = Len(_5);                    // scope 4 at ui/consts/const_let_eq.rs:420:5: 420:11
        _9 = Lt(_7, _8);                 // scope 4 at ui/consts/const_let_eq.rs:420:5: 420:11
        assert(move _9, "index out of bounds: the length is {} but the index is {}", move _8, _7) -> bb1; // scope 4 at ui/consts/const_let_eq.rs:420:5: 420:11
    }

    bb1: {
        _5[_7] = BitXor(_5[_7], const 2_u32); // scope 4 at ui/consts/const_let_eq.rs:420:5: 420:36
        StorageDead(_7);                 // scope 4 at ui/consts/const_let_eq.rs:420:36: 420:37
        StorageLive(_10);                // scope 4 at ui/consts/const_let_eq.rs:421:10: 421:16
        StorageLive(_11);                // scope 4 at ui/consts/const_let_eq.rs:421:14: 421:15
        _11 = const 0_usize;             // scope 4 at ui/consts/const_let_eq.rs:421:14: 421:15
        _12 = Len(_5);                   // scope 4 at ui/consts/const_let_eq.rs:421:10: 421:16
        _13 = Lt(_11, _12);              // scope 4 at ui/consts/const_let_eq.rs:421:10: 421:16
        assert(move _13, "index out of bounds: the length is {} but the index is {}", move _12, _11) -> bb2; // scope 4 at ui/consts/const_let_eq.rs:421:10: 421:16
    }

    bb2: {
        _10 = _5[_11];                   // scope 4 at ui/consts/const_let_eq.rs:421:10: 421:16
        _4 = BitXor(_4, move _10);       // scope 4 at ui/consts/const_let_eq.rs:421:5: 421:16
        StorageDead(_10);                // scope 4 at ui/consts/const_let_eq.rs:421:15: 421:16
        StorageDead(_11);                // scope 4 at ui/consts/const_let_eq.rs:421:16: 421:17
        StorageLive(_14);                // scope 4 at ui/consts/const_let_eq.rs:424:9: 424:16
        StorageLive(_15);                // scope 4 at ui/consts/const_let_eq.rs:424:33: 424:34
        _15 = _3;                        // scope 4 at ui/consts/const_let_eq.rs:424:33: 424:34
        _14 = Foo::<u32>(move _15);      // scope 4 at ui/consts/const_let_eq.rs:424:29: 424:35
        StorageDead(_15);                // scope 4 at ui/consts/const_let_eq.rs:424:34: 424:35
        StorageLive(_16);                // scope 5 at ui/consts/const_let_eq.rs:425:9: 425:16
        StorageLive(_17);                // scope 5 at ui/consts/const_let_eq.rs:425:38: 425:39
        _17 = _3;                        // scope 5 at ui/consts/const_let_eq.rs:425:38: 425:39
        _16 = Bar::<u32> { x: move _17 }; // scope 5 at ui/consts/const_let_eq.rs:425:29: 425:41
        StorageDead(_17);                // scope 5 at ui/consts/const_let_eq.rs:425:40: 425:41
        (_14.0: u32) = BitXor((_14.0: u32), const 16_u32); // scope 6 at ui/consts/const_let_eq.rs:426:5: 426:35
        (_16.0: u32) = BitXor((_16.0: u32), const 128_u32); // scope 6 at ui/consts/const_let_eq.rs:427:5: 427:35
        StorageLive(_18);                // scope 6 at ui/consts/const_let_eq.rs:428:10: 428:23
        StorageLive(_19);                // scope 6 at ui/consts/const_let_eq.rs:428:10: 428:15
        _19 = (_14.0: u32);              // scope 6 at ui/consts/const_let_eq.rs:428:10: 428:15
        StorageLive(_20);                // scope 6 at ui/consts/const_let_eq.rs:428:18: 428:23
        _20 = (_16.0: u32);              // scope 6 at ui/consts/const_let_eq.rs:428:18: 428:23
        _18 = BitXor(move _19, move _20); // scope 6 at ui/consts/const_let_eq.rs:428:10: 428:23
        StorageDead(_20);                // scope 6 at ui/consts/const_let_eq.rs:428:22: 428:23
        StorageDead(_19);                // scope 6 at ui/consts/const_let_eq.rs:428:22: 428:23
        _4 = BitXor(_4, move _18);       // scope 6 at ui/consts/const_let_eq.rs:428:5: 428:23
        StorageDead(_18);                // scope 6 at ui/consts/const_let_eq.rs:428:22: 428:23
        StorageLive(_21);                // scope 6 at ui/consts/const_let_eq.rs:431:9: 431:16
        StorageLive(_22);                // scope 6 at ui/consts/const_let_eq.rs:431:35: 431:41
        StorageLive(_23);                // scope 6 at ui/consts/const_let_eq.rs:431:39: 431:40
        _23 = _3;                        // scope 6 at ui/consts/const_let_eq.rs:431:39: 431:40
        _22 = Foo::<u32>(move _23);      // scope 6 at ui/consts/const_let_eq.rs:431:35: 431:41
        StorageDead(_23);                // scope 6 at ui/consts/const_let_eq.rs:431:40: 431:41
        _21 = [move _22];                // scope 6 at ui/consts/const_let_eq.rs:431:34: 431:42
        StorageDead(_22);                // scope 6 at ui/consts/const_let_eq.rs:431:41: 431:42
        StorageLive(_24);                // scope 7 at ui/consts/const_let_eq.rs:432:9: 432:10
        _24 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:432:9: 432:10
        _25 = Len(_21);                  // scope 7 at ui/consts/const_let_eq.rs:432:5: 432:11
        _26 = Lt(_24, _25);              // scope 7 at ui/consts/const_let_eq.rs:432:5: 432:11
        assert(move _26, "index out of bounds: the length is {} but the index is {}", move _25, _24) -> bb3; // scope 7 at ui/consts/const_let_eq.rs:432:5: 432:11
    }

    bb3: {
        (_21[_24].0: u32) = BitXor((_21[_24].0: u32), const 256_u32); // scope 7 at ui/consts/const_let_eq.rs:432:5: 432:38
        StorageDead(_24);                // scope 7 at ui/consts/const_let_eq.rs:432:38: 432:39
        StorageLive(_27);                // scope 7 at ui/consts/const_let_eq.rs:433:10: 433:18
        StorageLive(_28);                // scope 7 at ui/consts/const_let_eq.rs:433:14: 433:15
        _28 = const 0_usize;             // scope 7 at ui/consts/const_let_eq.rs:433:14: 433:15
        _29 = Len(_21);                  // scope 7 at ui/consts/const_let_eq.rs:433:10: 433:16
        _30 = Lt(_28, _29);              // scope 7 at ui/consts/const_let_eq.rs:433:10: 433:16
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> bb4; // scope 7 at ui/consts/const_let_eq.rs:433:10: 433:16
    }

    bb4: {
        _27 = (_21[_28].0: u32);         // scope 7 at ui/consts/const_let_eq.rs:433:10: 433:18
        _4 = BitXor(_4, move _27);       // scope 7 at ui/consts/const_let_eq.rs:433:5: 433:18
        StorageDead(_27);                // scope 7 at ui/consts/const_let_eq.rs:433:17: 433:18
        StorageDead(_28);                // scope 7 at ui/consts/const_let_eq.rs:433:18: 433:19
        StorageLive(_31);                // scope 7 at ui/consts/const_let_eq.rs:434:9: 434:16
        StorageLive(_32);                // scope 7 at ui/consts/const_let_eq.rs:434:35: 434:47
        StorageLive(_33);                // scope 7 at ui/consts/const_let_eq.rs:434:44: 434:45
        _33 = _3;                        // scope 7 at ui/consts/const_let_eq.rs:434:44: 434:45
        _32 = Bar::<u32> { x: move _33 }; // scope 7 at ui/consts/const_let_eq.rs:434:35: 434:47
        StorageDead(_33);                // scope 7 at ui/consts/const_let_eq.rs:434:46: 434:47
        _31 = [move _32];                // scope 7 at ui/consts/const_let_eq.rs:434:34: 434:48
        StorageDead(_32);                // scope 7 at ui/consts/const_let_eq.rs:434:47: 434:48
        StorageLive(_34);                // scope 8 at ui/consts/const_let_eq.rs:435:9: 435:10
        _34 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:435:9: 435:10
        _35 = Len(_31);                  // scope 8 at ui/consts/const_let_eq.rs:435:5: 435:11
        _36 = Lt(_34, _35);              // scope 8 at ui/consts/const_let_eq.rs:435:5: 435:11
        assert(move _36, "index out of bounds: the length is {} but the index is {}", move _35, _34) -> bb5; // scope 8 at ui/consts/const_let_eq.rs:435:5: 435:11
    }

    bb5: {
        (_31[_34].0: u32) = BitXor((_31[_34].0: u32), const 512_u32); // scope 8 at ui/consts/const_let_eq.rs:435:5: 435:38
        StorageDead(_34);                // scope 8 at ui/consts/const_let_eq.rs:435:38: 435:39
        StorageLive(_37);                // scope 8 at ui/consts/const_let_eq.rs:436:10: 436:18
        StorageLive(_38);                // scope 8 at ui/consts/const_let_eq.rs:436:14: 436:15
        _38 = const 0_usize;             // scope 8 at ui/consts/const_let_eq.rs:436:14: 436:15
        _39 = Len(_31);                  // scope 8 at ui/consts/const_let_eq.rs:436:10: 436:16
        _40 = Lt(_38, _39);              // scope 8 at ui/consts/const_let_eq.rs:436:10: 436:16
        assert(move _40, "index out of bounds: the length is {} but the index is {}", move _39, _38) -> bb6; // scope 8 at ui/consts/const_let_eq.rs:436:10: 436:16
    }

    bb6: {
        _37 = (_31[_38].0: u32);         // scope 8 at ui/consts/const_let_eq.rs:436:10: 436:18
        _4 = BitXor(_4, move _37);       // scope 8 at ui/consts/const_let_eq.rs:436:5: 436:18
        StorageDead(_37);                // scope 8 at ui/consts/const_let_eq.rs:436:17: 436:18
        StorageDead(_38);                // scope 8 at ui/consts/const_let_eq.rs:436:18: 436:19
        StorageLive(_41);                // scope 8 at ui/consts/const_let_eq.rs:439:9: 439:16
        StorageLive(_42);                // scope 8 at ui/consts/const_let_eq.rs:439:38: 439:41
        StorageLive(_43);                // scope 8 at ui/consts/const_let_eq.rs:439:39: 439:40
        _43 = _3;                        // scope 8 at ui/consts/const_let_eq.rs:439:39: 439:40
        _42 = [move _43];                // scope 8 at ui/consts/const_let_eq.rs:439:38: 439:41
        StorageDead(_43);                // scope 8 at ui/consts/const_let_eq.rs:439:40: 439:41
        _41 = Foo::<[u32; 1]>(move _42); // scope 8 at ui/consts/const_let_eq.rs:439:34: 439:42
        StorageDead(_42);                // scope 8 at ui/consts/const_let_eq.rs:439:41: 439:42
        StorageLive(_44);                // scope 9 at ui/consts/const_let_eq.rs:440:13: 440:14
        _44 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:440:13: 440:14
        _45 = Len((_41.0: [u32; 1]));    // scope 9 at ui/consts/const_let_eq.rs:440:5: 440:15
        _46 = Lt(_44, _45);              // scope 9 at ui/consts/const_let_eq.rs:440:5: 440:15
        assert(move _46, "index out of bounds: the length is {} but the index is {}", move _45, _44) -> bb7; // scope 9 at ui/consts/const_let_eq.rs:440:5: 440:15
    }

    bb7: {
        (_41.0: [u32; 1])[_44] = BitXor((_41.0: [u32; 1])[_44], const 16384_u32); // scope 9 at ui/consts/const_let_eq.rs:440:5: 440:40
        StorageDead(_44);                // scope 9 at ui/consts/const_let_eq.rs:440:40: 440:41
        StorageLive(_47);                // scope 9 at ui/consts/const_let_eq.rs:441:10: 441:20
        StorageLive(_48);                // scope 9 at ui/consts/const_let_eq.rs:441:18: 441:19
        _48 = const 0_usize;             // scope 9 at ui/consts/const_let_eq.rs:441:18: 441:19
        _49 = Len((_41.0: [u32; 1]));    // scope 9 at ui/consts/const_let_eq.rs:441:10: 441:20
        _50 = Lt(_48, _49);              // scope 9 at ui/consts/const_let_eq.rs:441:10: 441:20
        assert(move _50, "index out of bounds: the length is {} but the index is {}", move _49, _48) -> bb8; // scope 9 at ui/consts/const_let_eq.rs:441:10: 441:20
    }

    bb8: {
        _47 = (_41.0: [u32; 1])[_48];    // scope 9 at ui/consts/const_let_eq.rs:441:10: 441:20
        _4 = BitXor(_4, move _47);       // scope 9 at ui/consts/const_let_eq.rs:441:5: 441:20
        StorageDead(_47);                // scope 9 at ui/consts/const_let_eq.rs:441:19: 441:20
        StorageDead(_48);                // scope 9 at ui/consts/const_let_eq.rs:441:20: 441:21
        StorageLive(_51);                // scope 9 at ui/consts/const_let_eq.rs:442:9: 442:16
        StorageLive(_52);                // scope 9 at ui/consts/const_let_eq.rs:442:43: 442:46
        StorageLive(_53);                // scope 9 at ui/consts/const_let_eq.rs:442:44: 442:45
        _53 = _3;                        // scope 9 at ui/consts/const_let_eq.rs:442:44: 442:45
        _52 = [move _53];                // scope 9 at ui/consts/const_let_eq.rs:442:43: 442:46
        StorageDead(_53);                // scope 9 at ui/consts/const_let_eq.rs:442:45: 442:46
        _51 = Bar::<[u32; 1]> { x: move _52 }; // scope 9 at ui/consts/const_let_eq.rs:442:34: 442:48
        StorageDead(_52);                // scope 9 at ui/consts/const_let_eq.rs:442:47: 442:48
        StorageLive(_54);                // scope 10 at ui/consts/const_let_eq.rs:443:11: 443:12
        _54 = const 0_usize;             // scope 10 at ui/consts/const_let_eq.rs:443:11: 443:12
        _55 = Len((_51.0: [u32; 1]));    // scope 10 at ui/consts/const_let_eq.rs:443:5: 443:13
        _56 = Lt(_54, _55);              // scope 10 at ui/consts/const_let_eq.rs:443:5: 443:13
        assert(move _56, "index out of bounds: the length is {} but the index is {}", move _55, _54) -> bb9; // scope 10 at ui/consts/const_let_eq.rs:443:5: 443:13
    }

    bb9: {
        (_51.0: [u32; 1])[_54] = BitXor((_51.0: [u32; 1])[_54], const 32768_u32); // scope 10 at ui/consts/const_let_eq.rs:443:5: 443:38
        StorageDead(_54);                // scope 10 at ui/consts/const_let_eq.rs:443:38: 443:39
        StorageLive(_57);                // scope 10 at ui/consts/const_let_eq.rs:444:10: 444:18
        StorageLive(_58);                // scope 10 at ui/consts/const_let_eq.rs:444:16: 444:17
        _58 = const 0_usize;             // scope 10 at ui/consts/const_let_eq.rs:444:16: 444:17
        _59 = Len((_51.0: [u32; 1]));    // scope 10 at ui/consts/const_let_eq.rs:444:10: 444:18
        _60 = Lt(_58, _59);              // scope 10 at ui/consts/const_let_eq.rs:444:10: 444:18
        assert(move _60, "index out of bounds: the length is {} but the index is {}", move _59, _58) -> bb10; // scope 10 at ui/consts/const_let_eq.rs:444:10: 444:18
    }

    bb10: {
        _57 = (_51.0: [u32; 1])[_58];    // scope 10 at ui/consts/const_let_eq.rs:444:10: 444:18
        _4 = BitXor(_4, move _57);       // scope 10 at ui/consts/const_let_eq.rs:444:5: 444:18
        StorageDead(_57);                // scope 10 at ui/consts/const_let_eq.rs:444:17: 444:18
        StorageDead(_58);                // scope 10 at ui/consts/const_let_eq.rs:444:18: 444:19
        _0 = _4;                         // scope 10 at ui/consts/const_let_eq.rs:446:5: 446:6
        StorageDead(_51);                // scope 9 at ui/consts/const_let_eq.rs:447:1: 447:2
        StorageDead(_41);                // scope 8 at ui/consts/const_let_eq.rs:447:1: 447:2
        StorageDead(_31);                // scope 7 at ui/consts/const_let_eq.rs:447:1: 447:2
        StorageDead(_21);                // scope 6 at ui/consts/const_let_eq.rs:447:1: 447:2
        StorageDead(_16);                // scope 5 at ui/consts/const_let_eq.rs:447:1: 447:2
        StorageDead(_14);                // scope 4 at ui/consts/const_let_eq.rs:447:1: 447:2
        StorageDead(_5);                 // scope 3 at ui/consts/const_let_eq.rs:447:1: 447:2
        StorageDead(_4);                 // scope 2 at ui/consts/const_let_eq.rs:447:1: 447:2
        StorageDead(_3);                 // scope 1 at ui/consts/const_let_eq.rs:447:1: 447:2
        StorageDead(_2);                 // scope 0 at ui/consts/const_let_eq.rs:447:1: 447:2
        return;                          // scope 0 at ui/consts/const_let_eq.rs:447:2: 447:2
    }
}

bit_xor_assign::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:419:24: 419:25

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:419:24: 419:25
        return;                          // scope 0 at ui/consts/const_let_eq.rs:419:24: 419:25
    }
}

bit_xor_assign::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:431:29: 431:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:431:29: 431:30
        return;                          // scope 0 at ui/consts/const_let_eq.rs:431:29: 431:30
    }
}

bit_xor_assign::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:434:29: 434:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:434:29: 434:30
        return;                          // scope 0 at ui/consts/const_let_eq.rs:434:29: 434:30
    }
}

bit_xor_assign::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:439:28: 439:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:439:28: 439:29
        return;                          // scope 0 at ui/consts/const_let_eq.rs:439:28: 439:29
    }
}

bit_xor_assign::{constant#4}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq.rs:442:28: 442:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq.rs:442:28: 442:29
        return;                          // scope 0 at ui/consts/const_let_eq.rs:442:28: 442:29
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_let_eq.rs:457:11: 457:11
    let mut _1: (&u32, &u32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: &u32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _5: &u32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: (&u32, &u32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _9: u32;                         // in scope 0 at ui/consts/const_let_eq.rs:458:19: 458:31
    let mut _10: (u32,);                 // in scope 0 at ui/consts/const_let_eq.rs:458:26: 458:30
    let mut _11: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _12: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _13: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _26: (&u32, &u32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _27: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _28: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _29: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _30: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _32: (&u32, &u32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _33: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _34: u32;                        // in scope 0 at ui/consts/const_let_eq.rs:459:16: 459:32
    let mut _35: W;                      // in scope 0 at ui/consts/const_let_eq.rs:459:27: 459:31
    let mut _36: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _37: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _38: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _39: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _40: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _41: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _42: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _44: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _45: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _46: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _47: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _48: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _49: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _51: (&u32, &u32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _52: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _53: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _54: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _55: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _57: (&u32, &u32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _58: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _59: u32;                        // in scope 0 at ui/consts/const_let_eq.rs:460:16: 460:38
    let mut _60: A;                      // in scope 0 at ui/consts/const_let_eq.rs:460:27: 460:37
    let mut _61: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _62: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _63: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _64: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _65: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _66: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _67: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _69: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _70: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _71: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _72: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _73: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _74: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _76: (&u32, &u32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _77: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _78: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _79: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _80: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _82: (&u32, &u32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _83: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _84: u32;                        // in scope 0 at ui/consts/const_let_eq.rs:461:16: 461:31
    let mut _85: [u32; 1];               // in scope 0 at ui/consts/const_let_eq.rs:461:27: 461:30
    let mut _86: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _87: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _88: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _89: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _90: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _91: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _92: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _94: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _95: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _96: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _97: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _98: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _99: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _100: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _101: (&u32, &u32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _102: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _103: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _104: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _105: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _107: (&u32, &u32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _108: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _109: u32;                       // in scope 0 at ui/consts/const_let_eq.rs:462:16: 462:32
    let mut _110: W;                     // in scope 0 at ui/consts/const_let_eq.rs:462:27: 462:31
    let mut _111: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _112: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _113: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _114: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _115: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _116: u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _117: u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _119: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _120: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _121: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _122: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _123: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _124: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _125: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _126: (&u32, &u32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _127: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _128: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _129: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _130: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _132: (&u32, &u32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _133: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _134: u32;                       // in scope 0 at ui/consts/const_let_eq.rs:463:16: 463:32
    let mut _135: W;                     // in scope 0 at ui/consts/const_let_eq.rs:463:27: 463:31
    let mut _136: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _137: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _138: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _139: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _140: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _141: u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _142: u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _144: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _145: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _146: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _147: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _148: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _149: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _150: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _151: (&u32, &u32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _152: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _153: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _154: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _155: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _157: (&u32, &u32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _158: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _159: u32;                       // in scope 0 at ui/consts/const_let_eq.rs:464:16: 464:32
    let mut _160: W;                     // in scope 0 at ui/consts/const_let_eq.rs:464:27: 464:31
    let mut _161: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _162: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _163: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _164: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _165: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _166: u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _167: u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _169: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _170: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _171: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _172: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _173: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _174: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _175: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _176: (&u32, &u32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _177: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _178: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _179: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _180: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _182: (&u32, &u32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _183: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _184: u32;                       // in scope 0 at ui/consts/const_let_eq.rs:465:16: 465:34
    let mut _185: W;                     // in scope 0 at ui/consts/const_let_eq.rs:465:27: 465:33
    let mut _186: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _187: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _188: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _189: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _190: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _191: u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _192: u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _194: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _195: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _196: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _197: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _198: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _199: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _200: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _201: (&u32, &u32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _202: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _203: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _204: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _205: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _207: (&u32, &u32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _208: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _209: u32;                       // in scope 0 at ui/consts/const_let_eq.rs:466:16: 466:61
    let mut _210: W;                     // in scope 0 at ui/consts/const_let_eq.rs:466:31: 466:60
    let mut _211: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _212: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _213: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _214: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _215: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _216: u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _217: u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _219: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _220: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _221: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _222: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _223: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _224: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _225: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _226: (&u32, &u32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _227: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _228: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _229: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _230: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _232: (&u32, &u32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _233: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _234: u32;                       // in scope 0 at ui/consts/const_let_eq.rs:467:15: 467:54
    let mut _235: W;                     // in scope 0 at ui/consts/const_let_eq.rs:467:29: 467:53
    let mut _236: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _237: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _238: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _239: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _240: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _241: u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _242: u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _244: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _245: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _246: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _247: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _248: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _249: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _250: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _251: (&u32, &u32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _252: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _253: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _254: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _255: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _257: (&u32, &u32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _258: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _259: u32;                       // in scope 0 at ui/consts/const_let_eq.rs:468:16: 468:56
    let mut _260: W;                     // in scope 0 at ui/consts/const_let_eq.rs:468:31: 468:55
    let mut _261: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _262: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _263: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _264: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _265: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _266: u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _267: u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _269: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _270: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _271: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _272: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _273: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _274: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _275: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _276: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _277: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _278: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _279: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _280: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _281: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _282: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _283: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _284: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _285: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _286: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _287: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _288: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _289: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _290: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _291: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _292: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _293: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _294: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _295: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _296: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _297: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _298: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _299: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _300: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _301: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _302: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _303: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _304: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _305: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _306: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _307: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _308: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _4;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _5;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _6: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _6;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _12;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _13;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _18: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _18;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _29;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _30;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _31: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _31;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug left_val => _37;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _38;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _43: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 8 {
            debug kind => _43;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 9 {
        debug left_val => _54;           // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _55;          // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _56: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 10 {
            debug kind => _56;           // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 11 {
        debug left_val => _62;           // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _63;          // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _68: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 12 {
            debug kind => _68;           // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 13 {
        debug left_val => _79;           // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _80;          // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _81: core::panicking::AssertKind; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 14 {
            debug kind => _81;           // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 15 {
        debug left_val => _87;           // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _88;          // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _93: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 16 {
            debug kind => _93;           // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 17 {
        debug left_val => _104;          // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _105;         // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _106: core::panicking::AssertKind; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 18 {
            debug kind => _106;          // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 19 {
        debug left_val => _112;          // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _113;         // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _118: core::panicking::AssertKind; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 20 {
            debug kind => _118;          // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 21 {
        debug left_val => _129;          // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _130;         // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _131: core::panicking::AssertKind; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 22 {
            debug kind => _131;          // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 23 {
        debug left_val => _137;          // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _138;         // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _143: core::panicking::AssertKind; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 24 {
            debug kind => _143;          // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 25 {
        debug left_val => _154;          // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _155;         // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _156: core::panicking::AssertKind; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 26 {
            debug kind => _156;          // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 27 {
        debug left_val => _162;          // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _163;         // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _168: core::panicking::AssertKind; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 28 {
            debug kind => _168;          // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 29 {
        debug left_val => _179;          // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _180;         // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _181: core::panicking::AssertKind; // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 30 {
            debug kind => _181;          // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 31 {
        debug left_val => _187;          // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _188;         // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _193: core::panicking::AssertKind; // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 32 {
            debug kind => _193;          // in scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 33 {
        debug left_val => _204;          // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _205;         // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _206: core::panicking::AssertKind; // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 34 {
            debug kind => _206;          // in scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 35 {
        debug left_val => _212;          // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _213;         // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _218: core::panicking::AssertKind; // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 36 {
            debug kind => _218;          // in scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 37 {
        debug left_val => _229;          // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _230;         // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _231: core::panicking::AssertKind; // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 38 {
            debug kind => _231;          // in scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 39 {
        debug left_val => _237;          // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _238;         // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _243: core::panicking::AssertKind; // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 40 {
            debug kind => _243;          // in scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 41 {
        debug left_val => _254;          // in scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _255;         // in scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _256: core::panicking::AssertKind; // in scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 42 {
            debug kind => _256;          // in scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 43 {
        debug left_val => _262;          // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _263;         // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _268: core::panicking::AssertKind; // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 44 {
            debug kind => _268;          // in scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _308 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[32])) }
        _2 = _308;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _307 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[31])) }
        _3 = _307;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _4 = (_1.0: &u32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _5 = (_1.1: &u32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = const (2_u32,);            // scope 0 at ui/consts/const_let_eq.rs:458:26: 458:30
        _9 = basics(move _10) -> bb1;    // scope 0 at ui/consts/const_let_eq.rs:458:19: 458:31
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:458:19: 458:25
                                         // + literal: Const { ty: fn((u32,)) -> u32 {basics}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _306 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[30])) }
        _11 = _306;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _11);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_7.0: &u32);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_7.1: &u32);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = (*_12);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = const 13_u32;              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = Eq(move _16, move _17);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _14 = Not(move _15);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _18 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<u32, u32>(move _20, move _21, move _23, move _25); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb3: {
        _305 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[29])) }
        _27 = _305;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _304 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[28])) }
        _28 = _304;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _26 = (move _27, move _28);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _29 = (_26.0: &u32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _30 = (_26.1: &u32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _35 = const W(1_u32);            // scope 0 at ui/consts/const_let_eq.rs:459:27: 459:31
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:459:27: 459:31
                                         // + literal: Const { ty: W, val: Value(Scalar(0x00000001)) }
        _34 = add_assign(move _35) -> bb4; // scope 0 at ui/consts/const_let_eq.rs:459:16: 459:32
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:459:16: 459:26
                                         // + literal: Const { ty: fn(W) -> u32 {add_assign}, val: Value(<ZST>) }
    }

    bb4: {
        _33 = &_34;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _303 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[27])) }
        _36 = _303;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _32 = (move _33, move _36);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _37 = (_32.0: &u32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _38 = (_32.1: &u32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _41 = (*_37);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _42 = const 10_u32;              // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _40 = Eq(move _41, move _42);    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _39 = Not(move _40);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _39) -> [0: bb6, otherwise: bb5]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _43 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _45 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _47 = _37;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _46 = _47;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _49 = _38;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _48 = _49;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _50 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _44 = core::panicking::assert_failed::<u32, u32>(move _45, move _46, move _48, move _50); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb6: {
        _302 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[26])) }
        _52 = _302;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _301 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[25])) }
        _53 = _301;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _51 = (move _52, move _53);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _54 = (_51.0: &u32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _55 = (_51.1: &u32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _60 = const A {{ a: 0_u32 }};    // scope 0 at ui/consts/const_let_eq.rs:460:27: 460:37
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:460:27: 460:37
                                         // + literal: Const { ty: A, val: Value(Scalar(0x00000000)) }
        _59 = mul_assign(move _60) -> bb7; // scope 0 at ui/consts/const_let_eq.rs:460:16: 460:38
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:460:16: 460:26
                                         // + literal: Const { ty: fn(A) -> u32 {mul_assign}, val: Value(<ZST>) }
    }

    bb7: {
        _58 = &_59;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _300 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[24])) }
        _61 = _300;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _57 = (move _58, move _61);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _62 = (_57.0: &u32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _63 = (_57.1: &u32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _66 = (*_62);                    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _67 = const 256_u32;             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _65 = Eq(move _66, move _67);    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _64 = Not(move _65);             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _64) -> [0: bb9, otherwise: bb8]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _68 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _70 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _72 = _62;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _71 = _72;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _74 = _63;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _73 = _74;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _75 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _69 = core::panicking::assert_failed::<u32, u32>(move _70, move _71, move _73, move _75); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb9: {
        _299 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[23])) }
        _77 = _299;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _298 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[22])) }
        _78 = _298;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _76 = (move _77, move _78);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _79 = (_76.0: &u32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _80 = (_76.1: &u32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _85 = [const 1_u32];             // scope 0 at ui/consts/const_let_eq.rs:461:27: 461:30
        _84 = div_assign(move _85) -> bb10; // scope 0 at ui/consts/const_let_eq.rs:461:16: 461:31
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:461:16: 461:26
                                         // + literal: Const { ty: fn([u32; 1]) -> u32 {div_assign}, val: Value(<ZST>) }
    }

    bb10: {
        _83 = &_84;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _297 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[21])) }
        _86 = _297;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _82 = (move _83, move _86);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _87 = (_82.0: &u32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _88 = (_82.1: &u32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _91 = (*_87);                    // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _92 = const 4_u32;               // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _90 = Eq(move _91, move _92);    // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _89 = Not(move _90);             // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _89) -> [0: bb12, otherwise: bb11]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _93 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _95 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _97 = _87;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _96 = _97;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _99 = _88;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _98 = _99;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _100 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _94 = core::panicking::assert_failed::<u32, u32>(move _95, move _96, move _98, move _100); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb12: {
        _296 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[20])) }
        _102 = _296;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _295 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[19])) }
        _103 = _295;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _101 = (move _102, move _103);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _104 = (_101.0: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _105 = (_101.1: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _110 = const W(5_u32);           // scope 0 at ui/consts/const_let_eq.rs:462:27: 462:31
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:462:27: 462:31
                                         // + literal: Const { ty: W, val: Value(Scalar(0x00000005)) }
        _109 = rem_assign(move _110) -> bb13; // scope 0 at ui/consts/const_let_eq.rs:462:16: 462:32
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:462:16: 462:26
                                         // + literal: Const { ty: fn(W) -> u32 {rem_assign}, val: Value(<ZST>) }
    }

    bb13: {
        _108 = &_109;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _294 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[18])) }
        _111 = _294;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _107 = (move _108, move _111);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _112 = (_107.0: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _113 = (_107.1: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _116 = (*_112);                  // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _117 = const 5_u32;              // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _115 = Eq(move _116, move _117); // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _114 = Not(move _115);           // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _114) -> [0: bb15, otherwise: bb14]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb14: {
        _118 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _120 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _122 = _112;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _121 = _122;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _124 = _113;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _123 = _124;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _125 = Option::<Arguments<'_>>::None; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _119 = core::panicking::assert_failed::<u32, u32>(move _120, move _121, move _123, move _125); // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb15: {
        _293 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[17])) }
        _127 = _293;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _292 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[16])) }
        _128 = _292;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _126 = (move _127, move _128);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _129 = (_126.0: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _130 = (_126.1: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _135 = const W(8_u32);           // scope 0 at ui/consts/const_let_eq.rs:463:27: 463:31
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:463:27: 463:31
                                         // + literal: Const { ty: W, val: Value(Scalar(0x00000008)) }
        _134 = sub_assign(move _135) -> bb16; // scope 0 at ui/consts/const_let_eq.rs:463:16: 463:32
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:463:16: 463:26
                                         // + literal: Const { ty: fn(W) -> u32 {sub_assign}, val: Value(<ZST>) }
    }

    bb16: {
        _133 = &_134;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _291 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[15])) }
        _136 = _291;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _132 = (move _133, move _136);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _137 = (_132.0: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _138 = (_132.1: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _141 = (*_137);                  // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _142 = const 0_u32;              // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _140 = Eq(move _141, move _142); // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _139 = Not(move _140);           // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _139) -> [0: bb18, otherwise: bb17]; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb17: {
        _143 = const core::panicking::AssertKind::Eq; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _145 = const core::panicking::AssertKind::Eq; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _147 = _137;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _146 = _147;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _149 = _138;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _148 = _149;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _150 = Option::<Arguments<'_>>::None; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _144 = core::panicking::assert_failed::<u32, u32>(move _145, move _146, move _148, move _150); // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb18: {
        _290 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[14])) }
        _152 = _290;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _289 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[13])) }
        _153 = _289;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _151 = (move _152, move _153);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _154 = (_151.0: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _155 = (_151.1: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _160 = const W(1_u32);           // scope 0 at ui/consts/const_let_eq.rs:464:27: 464:31
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:464:27: 464:31
                                         // + literal: Const { ty: W, val: Value(Scalar(0x00000001)) }
        _159 = shl_assign(move _160) -> bb19; // scope 0 at ui/consts/const_let_eq.rs:464:16: 464:32
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:464:16: 464:26
                                         // + literal: Const { ty: fn(W) -> u32 {shl_assign}, val: Value(<ZST>) }
    }

    bb19: {
        _158 = &_159;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _288 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[12])) }
        _161 = _288;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _157 = (move _158, move _161);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _162 = (_157.0: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _163 = (_157.1: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _166 = (*_162);                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _167 = const 32768_u32;          // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _165 = Eq(move _166, move _167); // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _164 = Not(move _165);           // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _164) -> [0: bb21, otherwise: bb20]; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb20: {
        _168 = const core::panicking::AssertKind::Eq; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _170 = const core::panicking::AssertKind::Eq; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _172 = _162;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _171 = _172;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _174 = _163;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _173 = _174;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _175 = Option::<Arguments<'_>>::None; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _169 = core::panicking::assert_failed::<u32, u32>(move _170, move _171, move _173, move _175); // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb21: {
        _287 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[11])) }
        _177 = _287;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _286 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[10])) }
        _178 = _286;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _176 = (move _177, move _178);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _179 = (_176.0: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _180 = (_176.1: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _185 = const W(256_u32);         // scope 0 at ui/consts/const_let_eq.rs:465:27: 465:33
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:465:27: 465:33
                                         // + literal: Const { ty: W, val: Value(Scalar(0x00000100)) }
        _184 = shr_assign(move _185) -> bb22; // scope 0 at ui/consts/const_let_eq.rs:465:16: 465:34
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:465:16: 465:26
                                         // + literal: Const { ty: fn(W) -> u32 {shr_assign}, val: Value(<ZST>) }
    }

    bb22: {
        _183 = &_184;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _285 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[9])) }
        _186 = _285;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _182 = (move _183, move _186);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _187 = (_182.0: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _188 = (_182.1: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _191 = (*_187);                  // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _192 = const 1_u32;              // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _190 = Eq(move _191, move _192); // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _189 = Not(move _190);           // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _189) -> [0: bb24, otherwise: bb23]; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb23: {
        _193 = const core::panicking::AssertKind::Eq; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _195 = const core::panicking::AssertKind::Eq; // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _197 = _187;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _196 = _197;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _199 = _188;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _198 = _199;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _200 = Option::<Arguments<'_>>::None; // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _194 = core::panicking::assert_failed::<u32, u32>(move _195, move _196, move _198, move _200); // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb24: {
        _284 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[8])) }
        _202 = _284;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _283 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[7])) }
        _203 = _283;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _201 = (move _202, move _203);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _204 = (_201.0: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _205 = (_201.1: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _210 = const W(786431_u32);      // scope 0 at ui/consts/const_let_eq.rs:466:31: 466:60
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:466:31: 466:60
                                         // + literal: Const { ty: W, val: Value(Scalar(0x000bffff)) }
        _209 = bit_and_assign(move _210) -> bb25; // scope 0 at ui/consts/const_let_eq.rs:466:16: 466:61
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:466:16: 466:30
                                         // + literal: Const { ty: fn(W) -> u32 {bit_and_assign}, val: Value(<ZST>) }
    }

    bb25: {
        _208 = &_209;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _282 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[6])) }
        _211 = _282;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _207 = (move _208, move _211);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _212 = (_207.0: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _213 = (_207.1: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _216 = (*_212);                  // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _217 = const 15572_u32;          // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _215 = Eq(move _216, move _217); // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _214 = Not(move _215);           // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _214) -> [0: bb27, otherwise: bb26]; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb26: {
        _218 = const core::panicking::AssertKind::Eq; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _220 = const core::panicking::AssertKind::Eq; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _222 = _212;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _221 = _222;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _224 = _213;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _223 = _224;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _225 = Option::<Arguments<'_>>::None; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _219 = core::panicking::assert_failed::<u32, u32>(move _220, move _221, move _223, move _225); // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb27: {
        _281 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[5])) }
        _227 = _281;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _280 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[4])) }
        _228 = _280;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _226 = (move _227, move _228);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _229 = (_226.0: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _230 = (_226.1: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _235 = const W(45056_u32);       // scope 0 at ui/consts/const_let_eq.rs:467:29: 467:53
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:467:29: 467:53
                                         // + literal: Const { ty: W, val: Value(Scalar(0x0000b000)) }
        _234 = bit_or_assign(move _235) -> bb28; // scope 0 at ui/consts/const_let_eq.rs:467:15: 467:54
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:467:15: 467:28
                                         // + literal: Const { ty: fn(W) -> u32 {bit_or_assign}, val: Value(<ZST>) }
    }

    bb28: {
        _233 = &_234;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _279 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[3])) }
        _236 = _279;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _232 = (move _233, move _236);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _237 = (_232.0: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _238 = (_232.1: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _241 = (*_237);                  // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _242 = const 62297_u32;          // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _240 = Eq(move _241, move _242); // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _239 = Not(move _240);           // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _239) -> [0: bb30, otherwise: bb29]; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb29: {
        _243 = const core::panicking::AssertKind::Eq; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _245 = const core::panicking::AssertKind::Eq; // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _247 = _237;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _246 = _247;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _249 = _238;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _248 = _249;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _250 = Option::<Arguments<'_>>::None; // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _244 = core::panicking::assert_failed::<u32, u32>(move _245, move _246, move _248, move _250); // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb30: {
        _278 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[2])) }
        _252 = _278;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _277 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[1])) }
        _253 = _277;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _251 = (move _252, move _253);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _254 = (_251.0: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _255 = (_251.1: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _260 = const W(0_u32);           // scope 0 at ui/consts/const_let_eq.rs:468:31: 468:55
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:468:31: 468:55
                                         // + literal: Const { ty: W, val: Value(Scalar(0x00000000)) }
        _259 = bit_xor_assign(move _260) -> bb31; // scope 0 at ui/consts/const_let_eq.rs:468:16: 468:56
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:468:16: 468:30
                                         // + literal: Const { ty: fn(W) -> u32 {bit_xor_assign}, val: Value(<ZST>) }
    }

    bb31: {
        _258 = &_259;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _276 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[0])) }
        _261 = _276;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _257 = (move _258, move _261);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _262 = (_257.0: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _263 = (_257.1: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _266 = (*_262);                  // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _267 = const 50067_u32;          // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _265 = Eq(move _266, move _267); // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _264 = Not(move _265);           // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _264) -> [0: bb33, otherwise: bb32]; // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb32: {
        _268 = const core::panicking::AssertKind::Eq; // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _270 = const core::panicking::AssertKind::Eq; // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _272 = _262;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _271 = _272;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _274 = _263;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _273 = _274;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _275 = Option::<Arguments<'_>>::None; // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _269 = core::panicking::assert_failed::<u32, u32>(move _270, move _271, move _273, move _275); // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb33: {
        return;                          // scope 0 at ui/consts/const_let_eq.rs:469:2: 469:2
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:468:58: 468:79

    bb0: {
        _1 = const 50067_u32;            // scope 0 at ui/consts/const_let_eq.rs:468:58: 468:79
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:468:58: 468:79

    bb0: {
        _1 = const 50067_u32;            // scope 0 at ui/consts/const_let_eq.rs:468:58: 468:79
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:452:20: 452:22

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_let_eq.rs:452:20: 452:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[3] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:467:56: 467:77

    bb0: {
        _1 = const 62297_u32;            // scope 0 at ui/consts/const_let_eq.rs:467:56: 467:77
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:467:56: 467:77

    bb0: {
        _1 = const 62297_u32;            // scope 0 at ui/consts/const_let_eq.rs:467:56: 467:77
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:452:20: 452:22

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_let_eq.rs:452:20: 452:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[6] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:466:63: 466:84

    bb0: {
        _1 = const 15572_u32;            // scope 0 at ui/consts/const_let_eq.rs:466:63: 466:84
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[7] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:466:63: 466:84

    bb0: {
        _1 = const 15572_u32;            // scope 0 at ui/consts/const_let_eq.rs:466:63: 466:84
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[8] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:452:20: 452:22

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_let_eq.rs:452:20: 452:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[9] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:465:36: 465:37

    bb0: {
        _1 = const 1_u32;                // scope 0 at ui/consts/const_let_eq.rs:465:36: 465:37
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[10] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:465:36: 465:37

    bb0: {
        _1 = const 1_u32;                // scope 0 at ui/consts/const_let_eq.rs:465:36: 465:37
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[11] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:452:20: 452:22

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_let_eq.rs:452:20: 452:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[12] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:464:34: 464:55

    bb0: {
        _1 = const 32768_u32;            // scope 0 at ui/consts/const_let_eq.rs:464:34: 464:55
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[13] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:464:34: 464:55

    bb0: {
        _1 = const 32768_u32;            // scope 0 at ui/consts/const_let_eq.rs:464:34: 464:55
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[14] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:452:20: 452:22

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_let_eq.rs:452:20: 452:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[15] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:463:34: 463:35

    bb0: {
        _1 = const 0_u32;                // scope 0 at ui/consts/const_let_eq.rs:463:34: 463:35
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[16] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:463:34: 463:35

    bb0: {
        _1 = const 0_u32;                // scope 0 at ui/consts/const_let_eq.rs:463:34: 463:35
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[17] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:452:20: 452:22

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_let_eq.rs:452:20: 452:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[18] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:462:34: 462:35

    bb0: {
        _1 = const 5_u32;                // scope 0 at ui/consts/const_let_eq.rs:462:34: 462:35
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[19] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:462:34: 462:35

    bb0: {
        _1 = const 5_u32;                // scope 0 at ui/consts/const_let_eq.rs:462:34: 462:35
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[20] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:452:20: 452:22

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_let_eq.rs:452:20: 452:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[21] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:461:33: 461:34

    bb0: {
        _1 = const 4_u32;                // scope 0 at ui/consts/const_let_eq.rs:461:33: 461:34
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[22] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:461:33: 461:34

    bb0: {
        _1 = const 4_u32;                // scope 0 at ui/consts/const_let_eq.rs:461:33: 461:34
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[23] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:452:20: 452:22

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_let_eq.rs:452:20: 452:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[24] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:460:40: 460:43

    bb0: {
        _1 = const 256_u32;              // scope 0 at ui/consts/const_let_eq.rs:460:40: 460:43
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[25] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:460:40: 460:43

    bb0: {
        _1 = const 256_u32;              // scope 0 at ui/consts/const_let_eq.rs:460:40: 460:43
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[26] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:452:20: 452:22

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_let_eq.rs:452:20: 452:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[27] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:459:34: 459:36

    bb0: {
        _1 = const 10_u32;               // scope 0 at ui/consts/const_let_eq.rs:459:34: 459:36
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[28] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:459:34: 459:36

    bb0: {
        _1 = const 10_u32;               // scope 0 at ui/consts/const_let_eq.rs:459:34: 459:36
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[29] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:452:20: 452:22

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_let_eq.rs:452:20: 452:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[30] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:458:33: 458:35

    bb0: {
        _1 = const 13_u32;               // scope 0 at ui/consts/const_let_eq.rs:458:33: 458:35
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[31] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:458:33: 458:35

    bb0: {
        _1 = const 13_u32;               // scope 0 at ui/consts/const_let_eq.rs:458:33: 458:35
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[32] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: u32;                     // in scope 0 at ui/consts/const_let_eq.rs:452:20: 452:22

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_let_eq.rs:452:20: 452:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

const BASICS: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const_let_eq.rs:451:19: 451:22
    let mut _1: (u32,);                  // in scope 0 at ui/consts/const_let_eq.rs:458:26: 458:30

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_let_eq.rs:458:26: 458:30
        _1 = (const 2_u32,);             // scope 0 at ui/consts/const_let_eq.rs:458:26: 458:30
        ConstEvalCounter;                // scope 0 at ui/consts/const_let_eq.rs:458:19: 458:31
        _0 = basics(move _1) -> bb1;     // scope 0 at ui/consts/const_let_eq.rs:458:19: 458:31
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:458:19: 458:25
                                         // + literal: Const { ty: fn((u32,)) -> u32 {basics}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/consts/const_let_eq.rs:458:30: 458:31
        return;                          // scope 0 at ui/consts/const_let_eq.rs:451:9: 451:28
    }
}

const ADD: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const_let_eq.rs:451:19: 451:22
    let mut _1: W;                       // in scope 0 at ui/consts/const_let_eq.rs:459:27: 459:31

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_let_eq.rs:459:27: 459:31
        _1 = W(const 1_u32);             // scope 0 at ui/consts/const_let_eq.rs:459:27: 459:31
        ConstEvalCounter;                // scope 0 at ui/consts/const_let_eq.rs:459:16: 459:32
        _0 = add_assign(move _1) -> bb1; // scope 0 at ui/consts/const_let_eq.rs:459:16: 459:32
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:459:16: 459:26
                                         // + literal: Const { ty: fn(W) -> u32 {add_assign}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/consts/const_let_eq.rs:459:31: 459:32
        return;                          // scope 0 at ui/consts/const_let_eq.rs:451:9: 451:28
    }
}

const MUL: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const_let_eq.rs:451:19: 451:22
    let mut _1: A;                       // in scope 0 at ui/consts/const_let_eq.rs:460:27: 460:37

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_let_eq.rs:460:27: 460:37
        _1 = A { a: const 0_u32 };       // scope 0 at ui/consts/const_let_eq.rs:460:27: 460:37
        ConstEvalCounter;                // scope 0 at ui/consts/const_let_eq.rs:460:16: 460:38
        _0 = mul_assign(move _1) -> bb1; // scope 0 at ui/consts/const_let_eq.rs:460:16: 460:38
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:460:16: 460:26
                                         // + literal: Const { ty: fn(A) -> u32 {mul_assign}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/consts/const_let_eq.rs:460:37: 460:38
        return;                          // scope 0 at ui/consts/const_let_eq.rs:451:9: 451:28
    }
}

const DIV: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const_let_eq.rs:451:19: 451:22
    let mut _1: [u32; 1];                // in scope 0 at ui/consts/const_let_eq.rs:461:27: 461:30

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_let_eq.rs:461:27: 461:30
        _1 = [const 1_u32];              // scope 0 at ui/consts/const_let_eq.rs:461:27: 461:30
        ConstEvalCounter;                // scope 0 at ui/consts/const_let_eq.rs:461:16: 461:31
        _0 = div_assign(move _1) -> bb1; // scope 0 at ui/consts/const_let_eq.rs:461:16: 461:31
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:461:16: 461:26
                                         // + literal: Const { ty: fn([u32; 1]) -> u32 {div_assign}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/consts/const_let_eq.rs:461:30: 461:31
        return;                          // scope 0 at ui/consts/const_let_eq.rs:451:9: 451:28
    }
}

const REM: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const_let_eq.rs:451:19: 451:22
    let mut _1: W;                       // in scope 0 at ui/consts/const_let_eq.rs:462:27: 462:31

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_let_eq.rs:462:27: 462:31
        _1 = W(const 5_u32);             // scope 0 at ui/consts/const_let_eq.rs:462:27: 462:31
        ConstEvalCounter;                // scope 0 at ui/consts/const_let_eq.rs:462:16: 462:32
        _0 = rem_assign(move _1) -> bb1; // scope 0 at ui/consts/const_let_eq.rs:462:16: 462:32
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:462:16: 462:26
                                         // + literal: Const { ty: fn(W) -> u32 {rem_assign}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/consts/const_let_eq.rs:462:31: 462:32
        return;                          // scope 0 at ui/consts/const_let_eq.rs:451:9: 451:28
    }
}

const SUB: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const_let_eq.rs:451:19: 451:22
    let mut _1: W;                       // in scope 0 at ui/consts/const_let_eq.rs:463:27: 463:31

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_let_eq.rs:463:27: 463:31
        _1 = W(const 8_u32);             // scope 0 at ui/consts/const_let_eq.rs:463:27: 463:31
        ConstEvalCounter;                // scope 0 at ui/consts/const_let_eq.rs:463:16: 463:32
        _0 = sub_assign(move _1) -> bb1; // scope 0 at ui/consts/const_let_eq.rs:463:16: 463:32
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:463:16: 463:26
                                         // + literal: Const { ty: fn(W) -> u32 {sub_assign}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/consts/const_let_eq.rs:463:31: 463:32
        return;                          // scope 0 at ui/consts/const_let_eq.rs:451:9: 451:28
    }
}

const SHL: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const_let_eq.rs:451:19: 451:22
    let mut _1: W;                       // in scope 0 at ui/consts/const_let_eq.rs:464:27: 464:31

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_let_eq.rs:464:27: 464:31
        _1 = W(const 1_u32);             // scope 0 at ui/consts/const_let_eq.rs:464:27: 464:31
        ConstEvalCounter;                // scope 0 at ui/consts/const_let_eq.rs:464:16: 464:32
        _0 = shl_assign(move _1) -> bb1; // scope 0 at ui/consts/const_let_eq.rs:464:16: 464:32
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:464:16: 464:26
                                         // + literal: Const { ty: fn(W) -> u32 {shl_assign}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/consts/const_let_eq.rs:464:31: 464:32
        return;                          // scope 0 at ui/consts/const_let_eq.rs:451:9: 451:28
    }
}

const SHR: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const_let_eq.rs:451:19: 451:22
    let mut _1: W;                       // in scope 0 at ui/consts/const_let_eq.rs:465:27: 465:33

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_let_eq.rs:465:27: 465:33
        _1 = W(const 256_u32);           // scope 0 at ui/consts/const_let_eq.rs:465:27: 465:33
        ConstEvalCounter;                // scope 0 at ui/consts/const_let_eq.rs:465:16: 465:34
        _0 = shr_assign(move _1) -> bb1; // scope 0 at ui/consts/const_let_eq.rs:465:16: 465:34
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:465:16: 465:26
                                         // + literal: Const { ty: fn(W) -> u32 {shr_assign}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/consts/const_let_eq.rs:465:33: 465:34
        return;                          // scope 0 at ui/consts/const_let_eq.rs:451:9: 451:28
    }
}

const AND: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const_let_eq.rs:451:19: 451:22
    let mut _1: W;                       // in scope 0 at ui/consts/const_let_eq.rs:466:31: 466:60

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_let_eq.rs:466:31: 466:60
        _1 = W(const 786431_u32);        // scope 0 at ui/consts/const_let_eq.rs:466:31: 466:60
        ConstEvalCounter;                // scope 0 at ui/consts/const_let_eq.rs:466:16: 466:61
        _0 = bit_and_assign(move _1) -> bb1; // scope 0 at ui/consts/const_let_eq.rs:466:16: 466:61
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:466:16: 466:30
                                         // + literal: Const { ty: fn(W) -> u32 {bit_and_assign}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/consts/const_let_eq.rs:466:60: 466:61
        return;                          // scope 0 at ui/consts/const_let_eq.rs:451:9: 451:28
    }
}

const OR: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const_let_eq.rs:451:19: 451:22
    let mut _1: W;                       // in scope 0 at ui/consts/const_let_eq.rs:467:29: 467:53

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_let_eq.rs:467:29: 467:53
        _1 = W(const 45056_u32);         // scope 0 at ui/consts/const_let_eq.rs:467:29: 467:53
        ConstEvalCounter;                // scope 0 at ui/consts/const_let_eq.rs:467:15: 467:54
        _0 = bit_or_assign(move _1) -> bb1; // scope 0 at ui/consts/const_let_eq.rs:467:15: 467:54
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:467:15: 467:28
                                         // + literal: Const { ty: fn(W) -> u32 {bit_or_assign}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/consts/const_let_eq.rs:467:53: 467:54
        return;                          // scope 0 at ui/consts/const_let_eq.rs:451:9: 451:28
    }
}

const XOR: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const_let_eq.rs:451:19: 451:22
    let mut _1: W;                       // in scope 0 at ui/consts/const_let_eq.rs:468:31: 468:55

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_let_eq.rs:468:31: 468:55
        _1 = W(const 0_u32);             // scope 0 at ui/consts/const_let_eq.rs:468:31: 468:55
        ConstEvalCounter;                // scope 0 at ui/consts/const_let_eq.rs:468:16: 468:56
        _0 = bit_xor_assign(move _1) -> bb1; // scope 0 at ui/consts/const_let_eq.rs:468:16: 468:56
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq.rs:468:16: 468:30
                                         // + literal: Const { ty: fn(W) -> u32 {bit_xor_assign}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/consts/const_let_eq.rs:468:55: 468:56
        return;                          // scope 0 at ui/consts/const_let_eq.rs:451:9: 451:28
    }
}

fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;                  // return place in scope 0 at ui/consts/const_let_eq.rs:3:1: 3:14

    bb0: {
        _0 = Foo::<T>(move _1);          // scope 0 at ui/consts/const_let_eq.rs:3:1: 3:14
        return;                          // scope 0 at ui/consts/const_let_eq.rs:3:1: 3:14
    }
}

// MIR FOR CTFE
fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;                  // return place in scope 0 at ui/consts/const_let_eq.rs:3:1: 3:14

    bb0: {
        _0 = Foo::<T>(move _1);          // scope 0 at ui/consts/const_let_eq.rs:3:1: 3:14
        return;                          // scope 0 at ui/consts/const_let_eq.rs:3:1: 3:14
    }
}

fn W(_1: u32) -> W {
    let mut _0: W;                       // return place in scope 0 at ui/consts/const_let_eq.rs:5:1: 5:9

    bb0: {
        _0 = W(move _1);                 // scope 0 at ui/consts/const_let_eq.rs:5:1: 5:9
        return;                          // scope 0 at ui/consts/const_let_eq.rs:5:1: 5:9
    }
}

// MIR FOR CTFE
fn W(_1: u32) -> W {
    let mut _0: W;                       // return place in scope 0 at ui/consts/const_let_eq.rs:5:1: 5:9

    bb0: {
        _0 = W(move _1);                 // scope 0 at ui/consts/const_let_eq.rs:5:1: 5:9
        return;                          // scope 0 at ui/consts/const_let_eq.rs:5:1: 5:9
    }
}
