// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut FOO: Foo = {
    let mut _0: Foo;
    let mut _1: *mut i32;
    let mut _2: *mut [i32];
    let mut _3: *mut [i32; 1];
    let mut _4: &mut [i32; 1];
    let mut _5: [i32; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = [const 42_i32];
        _4 = &mut _5;
        _3 = &raw mut (*_4);
        _2 = move _3 as *mut [i32] (Pointer(Unsize));
        StorageDead(_3);
        _1 = move _2 as *mut i32 (PtrToPtr);
        StorageDead(_2);
        _0 = Foo { field: move _1 };
        StorageDead(_4);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let mut _4: *mut Foo;
    let mut _5: *mut Foo;
    let _6: &i32;
    let _7: &i32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: i32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: &i32;
    let mut _16: *mut i32;
    let mut _17: *mut i32;
    scope 1 {
        let mut _18: *const ();
        let mut _19: usize;
        let mut _20: usize;
        let mut _21: usize;
        let mut _22: usize;
        let mut _23: bool;
        let mut _24: *const ();
        let mut _25: usize;
        let mut _26: usize;
        let mut _27: usize;
        let mut _28: usize;
        let mut _29: bool;
        let mut _30: *const ();
        let mut _31: usize;
        let mut _32: usize;
        let mut _33: usize;
        let mut _34: usize;
        let mut _35: bool;
        let mut _36: *const ();
        let mut _37: usize;
        let mut _38: usize;
        let mut _39: usize;
        let mut _40: usize;
        let mut _41: bool;
    }
    scope 2 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 3 {
            debug kind => _12;
        }
    }

    bb0: {
        _4 = const {alloc1: *mut Foo};
        _36 = _4 as *const () (PtrToPtr);
        _37 = _36 as usize (Transmute);
        _38 = AlignOf(Foo);
        _39 = Sub(_38, const 1_usize);
        _40 = BitAnd(_37, _39);
        _41 = Eq(_40, const 0_usize);
        assert(_41, "misaligned pointer dereference: address must be a multiple of {} but is {}", _38, _37) -> [success: bb6, unwind unreachable];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i32, i32>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb2: {
        return;
    }

    bb3: {
        _3 = (*_17);
        _2 = &_3;
        _15 = const _;
        _1 = (move _2, _15);
        _6 = (_1.0: &i32);
        _7 = (_1.1: &i32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb4: {
        _17 = deref_copy ((*_5).0: *mut i32);
        _18 = _17 as *const () (PtrToPtr);
        _19 = _18 as usize (Transmute);
        _20 = AlignOf(i32);
        _21 = Sub(_20, const 1_usize);
        _22 = BitAnd(_19, _21);
        _23 = Eq(_22, const 0_usize);
        assert(_23, "misaligned pointer dereference: address must be a multiple of {} but is {}", _20, _19) -> [success: bb3, unwind unreachable];
    }

    bb5: {
        (*_16) = const 69_i32;
        _5 = const {alloc1: *mut Foo};
        _24 = _5 as *const () (PtrToPtr);
        _25 = _24 as usize (Transmute);
        _26 = AlignOf(Foo);
        _27 = Sub(_26, const 1_usize);
        _28 = BitAnd(_25, _27);
        _29 = Eq(_28, const 0_usize);
        assert(_29, "misaligned pointer dereference: address must be a multiple of {} but is {}", _26, _25) -> [success: bb4, unwind unreachable];
    }

    bb6: {
        _16 = deref_copy ((*_4).0: *mut i32);
        _30 = _16 as *const () (PtrToPtr);
        _31 = _30 as usize (Transmute);
        _32 = AlignOf(i32);
        _33 = Sub(_32, const 1_usize);
        _34 = BitAnd(_31, _33);
        _35 = Eq(_34, const 0_usize);
        assert(_35, "misaligned pointer dereference: address must be a multiple of {} but is {}", _32, _31) -> [success: bb5, unwind unreachable];
    }
}

alloc1 (static: FOO, size: 8, align: 8) {
    ╾───────alloc4────────╼                         │ ╾──────╼
}

alloc4 (size: 4, align: 4) {
    2a 00 00 00                                     │ *...
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 69_i32;
        _0 = &_1;
        return;
    }
}
