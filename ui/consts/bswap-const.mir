// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const SWAPPED_U8: u8 = {
    let mut _0: u8;

    bb0: {
        ConstEvalCounter;
        _0 = bswap::<u8>(const 18_u8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const SWAPPED_U16: u16 = {
    let mut _0: u16;

    bb0: {
        ConstEvalCounter;
        _0 = bswap::<u16>(const 4660_u16) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const SWAPPED_I32: i32 = {
    let mut _0: i32;

    bb0: {
        ConstEvalCounter;
        _0 = bswap::<i32>(const 305419896_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u8, &u8);
    let _2: &u8;
    let _3: &u8;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: u8;
    let mut _7: u8;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&u16, &u16);
    let _12: &u16;
    let _13: &u16;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: u16;
    let mut _17: u16;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&i32, &i32);
    let _22: &i32;
    let _23: &i32;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: i32;
    let mut _27: i32;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: &i32;
    let mut _32: &i32;
    let mut _33: &u16;
    let mut _34: &u16;
    let mut _35: &u8;
    let mut _36: &u8;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _12;
        debug right_val => _13;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 6 {
            debug kind => _28;
        }
    }

    bb0: {
        _36 = const _;
        _35 = const _;
        _1 = (_36, _35);
        _2 = (_1.0: &u8);
        _3 = (_1.1: &u8);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<u8, u8>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        _34 = const _;
        _33 = const _;
        _11 = (_34, _33);
        _12 = (_11.0: &u16);
        _13 = (_11.1: &u16);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<u16, u16>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb4: {
        _32 = const _;
        _31 = const _;
        _21 = (_32, _31);
        _22 = (_21.0: &i32);
        _23 = (_21.1: &i32);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<i32, i32>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2018915346_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 13330_u16;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 18_u8;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}
