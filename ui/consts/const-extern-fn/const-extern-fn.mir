// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo1(_1: u8) -> u8 {
    debug val => _1;                     // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:4:26: 4:29
    let mut _0: u8;                      // return place in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:4:38: 4:40
    let mut _2: u8;                      // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:5:5: 5:8
    let mut _3: (u8, bool);              // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:5:5: 5:12

    bb0: {
        _2 = _1;                         // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:5:5: 5:8
        _3 = CheckedAdd(_2, const 1_u8); // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:5:5: 5:12
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, const 1_u8) -> bb1; // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:5:5: 5:12
    }

    bb1: {
        _0 = move (_3.0: u8);            // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:5:5: 5:12
        return;                          // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:6:2: 6:2
    }
}

// MIR FOR CTFE
fn foo1(_1: u8) -> u8 {
    debug val => _1;                     // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:4:26: 4:29
    let mut _0: u8;                      // return place in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:4:38: 4:40
    let mut _2: u8;                      // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:5:5: 5:8
    let mut _3: (u8, bool);              // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:5:5: 5:12

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:5:5: 5:8
        _2 = _1;                         // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:5:5: 5:8
        _3 = CheckedAdd(_2, const 1_u8); // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:5:5: 5:12
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, const 1_u8) -> bb1; // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:5:5: 5:12
    }

    bb1: {
        _0 = move (_3.0: u8);            // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:5:5: 5:12
        StorageDead(_2);                 // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:5:11: 5:12
        return;                          // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:6:2: 6:2
    }
}

fn foo2(_1: u8) -> u8 {
    debug val => _1;                     // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:8:26: 8:29
    let mut _0: u8;                      // return place in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:8:38: 8:40
    let mut _2: u8;                      // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:9:5: 9:8
    let mut _3: (u8, bool);              // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:9:5: 9:12

    bb0: {
        _2 = _1;                         // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:9:5: 9:8
        _3 = CheckedAdd(_2, const 1_u8); // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:9:5: 9:12
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, const 1_u8) -> bb1; // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:9:5: 9:12
    }

    bb1: {
        _0 = move (_3.0: u8);            // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:9:5: 9:12
        return;                          // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:10:2: 10:2
    }
}

// MIR FOR CTFE
fn foo2(_1: u8) -> u8 {
    debug val => _1;                     // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:8:26: 8:29
    let mut _0: u8;                      // return place in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:8:38: 8:40
    let mut _2: u8;                      // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:9:5: 9:8
    let mut _3: (u8, bool);              // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:9:5: 9:12

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:9:5: 9:8
        _2 = _1;                         // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:9:5: 9:8
        _3 = CheckedAdd(_2, const 1_u8); // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:9:5: 9:12
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, const 1_u8) -> bb1; // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:9:5: 9:12
    }

    bb1: {
        _0 = move (_3.0: u8);            // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:9:5: 9:12
        StorageDead(_2);                 // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:9:11: 9:12
        return;                          // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:10:2: 10:2
    }
}

fn bar1(_1: bool) -> bool {
    debug val => _1;                     // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:12:33: 12:36
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:12:47: 12:51
    let mut _2: bool;                    // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:13:6: 13:9

    bb0: {
        _2 = _1;                         // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:13:6: 13:9
        _0 = Not(move _2);               // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:13:5: 13:9
        return;                          // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:14:2: 14:2
    }
}

// MIR FOR CTFE
fn bar1(_1: bool) -> bool {
    debug val => _1;                     // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:12:33: 12:36
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:12:47: 12:51
    let mut _2: bool;                    // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:13:6: 13:9

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:13:6: 13:9
        _2 = _1;                         // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:13:6: 13:9
        _0 = Not(move _2);               // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:13:5: 13:9
        StorageDead(_2);                 // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:13:8: 13:9
        return;                          // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:14:2: 14:2
    }
}

fn bar2(_1: bool) -> bool {
    debug val => _1;                     // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:16:33: 16:36
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:16:47: 16:51
    let mut _2: bool;                    // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:17:6: 17:9

    bb0: {
        _2 = _1;                         // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:17:6: 17:9
        _0 = Not(move _2);               // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:17:5: 17:9
        return;                          // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:18:2: 18:2
    }
}

// MIR FOR CTFE
fn bar2(_1: bool) -> bool {
    debug val => _1;                     // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:16:33: 16:36
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:16:47: 16:51
    let mut _2: bool;                    // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:17:6: 17:9

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:17:6: 17:9
        _2 = _1;                         // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:17:6: 17:9
        _0 = Not(move _2);               // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:17:5: 17:9
        StorageDead(_2);                 // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:17:8: 17:9
        return;                          // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:18:2: 18:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:21:11: 21:11
    let _1: [u8; 26];                    // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:22:9: 22:10
    let mut _3: (&[u8; 26], &[u8; 26]);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &[u8; 26];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _5: &[u8; 26];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: &[u8; 26];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: &[u8; 26];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &[u8; 26];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &[u8; 26];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &[u8; 26];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &[u8; 26];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: bool;                   // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:28:5: 28:22
    let mut _23: bool;                   // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:28:13: 28:21
    let mut _24: !;                      // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:28:5: 28:22
    let mut _25: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _26: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _27: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _33: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _35: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _36: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _37: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _38: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _39: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _40: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/consts/const-extern-fn/const-extern-fn.rs:22:9: 22:10
        let _2: [u8; 26];                // in scope 1 at ui/consts/const-extern-fn/const-extern-fn.rs:23:9: 23:10
        scope 2 {
            debug b => _2;               // in scope 2 at ui/consts/const-extern-fn/const-extern-fn.rs:23:9: 23:10
            let _6: &[u8; 26];           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _7: &[u8; 26];           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _20: bool;               // in scope 2 at ui/consts/const-extern-fn/const-extern-fn.rs:26:9: 26:17
            scope 3 {
                debug left_val => _6;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _7;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _12: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _12;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug bar1_res => _20;   // in scope 5 at ui/consts/const-extern-fn/const-extern-fn.rs:26:9: 26:17
                let _21: bool;           // in scope 5 at ui/consts/const-extern-fn/const-extern-fn.rs:27:9: 27:17
                scope 7 {
                    debug bar2_res => _21; // in scope 7 at ui/consts/const-extern-fn/const-extern-fn.rs:27:9: 27:17
                    let _28: &bool;      // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _29: &bool;      // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _42: extern "C" fn(u8) -> u8; // in scope 7 at ui/consts/const-extern-fn/const-extern-fn.rs:31:9: 31:19
                    scope 9 {
                        debug left_val => _28; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _29; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _34: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 10 {
                            debug kind => _34; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 11 {
                        debug _foo1_cast => _42; // in scope 11 at ui/consts/const-extern-fn/const-extern-fn.rs:31:9: 31:19
                        let _43: extern "C" fn(u8) -> u8; // in scope 11 at ui/consts/const-extern-fn/const-extern-fn.rs:32:9: 32:19
                        scope 12 {
                            debug _foo2_cast => _43; // in scope 12 at ui/consts/const-extern-fn/const-extern-fn.rs:32:9: 32:19
                            let _44: unsafe extern "C" fn(bool) -> bool; // in scope 12 at ui/consts/const-extern-fn/const-extern-fn.rs:33:9: 33:19
                            scope 13 {
                                debug _bar1_cast => _44; // in scope 13 at ui/consts/const-extern-fn/const-extern-fn.rs:33:9: 33:19
                                let _45: unsafe extern "C" fn(bool) -> bool; // in scope 13 at ui/consts/const-extern-fn/const-extern-fn.rs:34:9: 34:19
                                scope 14 {
                                    debug _bar2_cast => _45; // in scope 14 at ui/consts/const-extern-fn/const-extern-fn.rs:34:9: 34:19
                                }
                            }
                        }
                    }
                }
                scope 8 {
                }
            }
            scope 6 {
            }
        }
    }

    bb0: {
        _1 = [const 0_u8; 26];           // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:22:38: 22:45
        _2 = [const 0_u8; 26];           // scope 1 at ui/consts/const-extern-fn/const-extern-fn.rs:23:38: 23:45
        _4 = &_1;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _5 = &_2;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _5);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_3.0: &[u8; 26]);          // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_3.1: &[u8; 26]);          // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = _6;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = _7;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = <[u8; 26] as PartialEq>::eq(move _10, move _11) -> bb1; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [u8; 26], &'b [u8; 26]) -> bool {<[u8; 26] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = Not(move _9);               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _12 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<[u8; 26], [u8; 26]>(move _14, move _15, move _17, move _19); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [u8; 26], &'b [u8; 26], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[u8; 26], [u8; 26]>}, val: Value(<ZST>) }
    }

    bb3: {
        _20 = bar1(const false) -> bb4;  // scope 6 at ui/consts/const-extern-fn/const-extern-fn.rs:26:29: 26:40
                                         // mir::Constant
                                         // + span: ui/consts/const-extern-fn/const-extern-fn.rs:26:29: 26:33
                                         // + literal: Const { ty: unsafe extern "C" fn(bool) -> bool {bar1}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = bar2(const false) -> bb5;  // scope 8 at ui/consts/const-extern-fn/const-extern-fn.rs:27:29: 27:40
                                         // mir::Constant
                                         // + span: ui/consts/const-extern-fn/const-extern-fn.rs:27:29: 27:33
                                         // + literal: Const { ty: unsafe extern "C" fn(bool) -> bool {bar2}, val: Value(<ZST>) }
    }

    bb5: {
        _23 = _20;                       // scope 7 at ui/consts/const-extern-fn/const-extern-fn.rs:28:13: 28:21
        _22 = Not(move _23);             // scope 7 at ui/consts/const-extern-fn/const-extern-fn.rs:28:5: 28:22
        switchInt(move _22) -> [0: bb7, otherwise: bb6]; // scope 7 at ui/consts/const-extern-fn/const-extern-fn.rs:28:5: 28:22
    }

    bb6: {
        _24 = core::panicking::panic(const "assertion failed: bar1_res"); // scope 7 at ui/consts/const-extern-fn/const-extern-fn.rs:28:5: 28:22
                                         // mir::Constant
                                         // + span: ui/consts/const-extern-fn/const-extern-fn.rs:28:5: 28:22
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _26 = &_20;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _27 = &_21;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _25 = (move _26, move _27);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _28 = (_25.0: &bool);            // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _29 = (_25.1: &bool);            // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _32 = (*_28);                    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _33 = (*_29);                    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _31 = Eq(move _32, move _33);    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _30 = Not(move _31);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _30) -> [0: bb9, otherwise: bb8]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _34 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _36 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _38 = _28;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _38;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _40 = _29;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = _40;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _41 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _35 = core::panicking::assert_failed::<bool, bool>(move _36, move _37, move _39, move _41); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb9: {
        _42 = foo1 as extern "C" fn(u8) -> u8 (Pointer(ReifyFnPointer)); // scope 7 at ui/consts/const-extern-fn/const-extern-fn.rs:31:47: 31:51
                                         // mir::Constant
                                         // + span: ui/consts/const-extern-fn/const-extern-fn.rs:31:47: 31:51
                                         // + literal: Const { ty: extern "C" fn(u8) -> u8 {foo1}, val: Value(<ZST>) }
        _43 = foo2 as extern "C" fn(u8) -> u8 (Pointer(ReifyFnPointer)); // scope 11 at ui/consts/const-extern-fn/const-extern-fn.rs:32:47: 32:51
                                         // mir::Constant
                                         // + span: ui/consts/const-extern-fn/const-extern-fn.rs:32:47: 32:51
                                         // + literal: Const { ty: extern "C" fn(u8) -> u8 {foo2}, val: Value(<ZST>) }
        _44 = bar1 as unsafe extern "C" fn(bool) -> bool (Pointer(ReifyFnPointer)); // scope 12 at ui/consts/const-extern-fn/const-extern-fn.rs:33:58: 33:62
                                         // mir::Constant
                                         // + span: ui/consts/const-extern-fn/const-extern-fn.rs:33:58: 33:62
                                         // + literal: Const { ty: unsafe extern "C" fn(bool) -> bool {bar1}, val: Value(<ZST>) }
        _45 = bar2 as unsafe extern "C" fn(bool) -> bool (Pointer(ReifyFnPointer)); // scope 13 at ui/consts/const-extern-fn/const-extern-fn.rs:34:58: 34:62
                                         // mir::Constant
                                         // + span: ui/consts/const-extern-fn/const-extern-fn.rs:34:58: 34:62
                                         // + literal: Const { ty: unsafe extern "C" fn(bool) -> bool {bar2}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:35:2: 35:2
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:22:42: 22:44

    bb0: {
        _0 = const 26_usize;             // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:22:42: 22:44
        return;                          // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:22:42: 22:44
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:22:17: 22:34
    let mut _1: u8;                      // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:22:17: 22:25

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:22:17: 22:25
        ConstEvalCounter;                // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:22:17: 22:25
        _1 = foo1(const 25_u8) -> bb1;   // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:22:17: 22:25
                                         // mir::Constant
                                         // + span: ui/consts/const-extern-fn/const-extern-fn.rs:22:17: 22:21
                                         // + literal: Const { ty: extern "C" fn(u8) -> u8 {foo1}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = move _1 as usize (IntToInt); // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:22:17: 22:34
        StorageDead(_1);                 // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:22:33: 22:34
        return;                          // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:22:17: 22:34
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:23:42: 23:44

    bb0: {
        _0 = const 26_usize;             // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:23:42: 23:44
        return;                          // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:23:42: 23:44
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:23:17: 23:34
    let mut _1: u8;                      // in scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:23:17: 23:25

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:23:17: 23:25
        ConstEvalCounter;                // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:23:17: 23:25
        _1 = foo2(const 25_u8) -> bb1;   // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:23:17: 23:25
                                         // mir::Constant
                                         // + span: ui/consts/const-extern-fn/const-extern-fn.rs:23:17: 23:21
                                         // + literal: Const { ty: extern "C" fn(u8) -> u8 {foo2}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = move _1 as usize (IntToInt); // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:23:17: 23:34
        StorageDead(_1);                 // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:23:33: 23:34
        return;                          // scope 0 at ui/consts/const-extern-fn/const-extern-fn.rs:23:17: 23:34
    }
}
