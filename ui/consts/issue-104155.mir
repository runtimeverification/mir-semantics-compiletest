// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const _: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-104155.rs:2:10: 2:12

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/issue-104155.rs:2:15: 2:53
        _0 = std::mem::forget::<fn() -> Box<u32> {<Box<u32> as Default>::default}>(<Box<u32> as Default>::default) -> bb1; // scope 0 at ui/consts/issue-104155.rs:2:15: 2:53
                                         // mir::Constant
                                         // + span: ui/consts/issue-104155.rs:2:15: 2:32
                                         // + literal: Const { ty: fn(fn() -> Box<u32> {<Box<u32> as Default>::default}) {std::mem::forget::<fn() -> Box<u32> {<Box<u32> as Default>::default}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/consts/issue-104155.rs:2:33: 2:52
                                         // + literal: Const { ty: fn() -> Box<u32> {<Box<u32> as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/issue-104155.rs:2:1: 2:54
    }
}

const _: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-104155.rs:3:10: 3:12
    let mut _1: [closure@ui/consts/issue-104155.rs:3:33: 3:35]; // in scope 0 at ui/consts/issue-104155.rs:3:33: 3:57

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/issue-104155.rs:3:33: 3:57
        _1 = [closure@ui/consts/issue-104155.rs:3:33: 3:35]; // scope 0 at ui/consts/issue-104155.rs:3:33: 3:57
                                         // closure
                                         // + def_id: DefId(0:5 ~ issue_104155[9c0b]::_#1::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::boxed::Box<u32>,
                                         //     (),
                                         // ]
        ConstEvalCounter;                // scope 0 at ui/consts/issue-104155.rs:3:15: 3:58
        _0 = std::mem::forget::<[closure@ui/consts/issue-104155.rs:3:33: 3:35]>(move _1) -> bb1; // scope 0 at ui/consts/issue-104155.rs:3:15: 3:58
                                         // mir::Constant
                                         // + span: ui/consts/issue-104155.rs:3:15: 3:32
                                         // + literal: Const { ty: fn([closure@ui/consts/issue-104155.rs:3:33: 3:35]) {std::mem::forget::<[closure@ui/consts/issue-104155.rs:3:33: 3:35]>}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/consts/issue-104155.rs:3:57: 3:58
        return;                          // scope 0 at ui/consts/issue-104155.rs:3:1: 3:59
    }
}

fn _::{closure#0}(_1: &[closure@ui/consts/issue-104155.rs:3:33: 3:35]) -> Box<u32> {
    let mut _0: std::boxed::Box<u32>;    // return place in scope 0 at ui/consts/issue-104155.rs:3:36: 3:36

    bb0: {
        _0 = <Box<u32> as Default>::default() -> bb1; // scope 0 at ui/consts/issue-104155.rs:3:36: 3:57
                                         // mir::Constant
                                         // + span: ui/consts/issue-104155.rs:3:36: 3:55
                                         // + literal: Const { ty: fn() -> Box<u32> {<Box<u32> as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/issue-104155.rs:3:57: 3:57
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-104155.rs:5:11: 5:11

    bb0: {
        return;                          // scope 0 at ui/consts/issue-104155.rs:5:13: 5:13
    }
}
