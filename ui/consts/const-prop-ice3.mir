// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-prop-ice3.rs:5:11: 5:11
    let _1: *const i32;                  // in scope 0 at ui/consts/const-prop-ice3.rs:6:9: 6:11
    let mut _2: *const [i32];            // in scope 0 at ui/consts/const-prop-ice3.rs:6:14: 6:58
    let _3: &[i32];                      // in scope 0 at ui/consts/const-prop-ice3.rs:6:14: 6:42
    let _4: &A<[i32]>;                   // in scope 0 at ui/consts/const-prop-ice3.rs:6:15: 6:40
    let mut _5: &A<[i32; 2]>;            // in scope 0 at ui/consts/const-prop-ice3.rs:6:16: 6:26
    let _6: &A<[i32; 2]>;                // in scope 0 at ui/consts/const-prop-ice3.rs:6:16: 6:26
    let mut _7: &A<[i32; 2]>;            // in scope 0 at ui/consts/const-prop-ice3.rs:6:16: 6:26
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/consts/const-prop-ice3.rs:6:9: 6:11
    }

    bb0: {
        _7 = const _;                    // scope 0 at ui/consts/const-prop-ice3.rs:6:16: 6:26
                                         // mir::Constant
                                         // + span: ui/consts/const-prop-ice3.rs:6:16: 6:26
                                         // + literal: Const { ty: &A<[i32; 2]>, val: Unevaluated(main, [], Some(promoted[0])) }
        _6 = _7;                         // scope 0 at ui/consts/const-prop-ice3.rs:6:16: 6:26
        _5 = _6;                         // scope 0 at ui/consts/const-prop-ice3.rs:6:16: 6:26
        _4 = move _5 as &A<[i32]> (Pointer(Unsize)); // scope 0 at ui/consts/const-prop-ice3.rs:6:16: 6:26
        _3 = &((*_4).0: [i32]);          // scope 0 at ui/consts/const-prop-ice3.rs:6:14: 6:42
        _2 = &raw const (*_3);           // scope 0 at ui/consts/const-prop-ice3.rs:6:14: 6:42
        _1 = move _2 as *const i32 (PtrToPtr); // scope 0 at ui/consts/const-prop-ice3.rs:6:14: 6:72
        return;                          // scope 0 at ui/consts/const-prop-ice3.rs:7:2: 7:2
    }
}

promoted[0] in main: &A<[i32; 2]> = {
    let mut _0: &A<[i32; 2]>;            // return place in scope 0 at ui/consts/const-prop-ice3.rs:6:16: 6:26
    let mut _1: A<[i32; 2]>;             // in scope 0 at ui/consts/const-prop-ice3.rs:6:17: 6:26
    let mut _2: [i32; 2];                // in scope 0 at ui/consts/const-prop-ice3.rs:6:19: 6:25

    bb0: {
        _2 = [const 2_i32, const 3_i32]; // scope 0 at ui/consts/const-prop-ice3.rs:6:19: 6:25
        _1 = A::<[i32; 2]>(move _2);     // scope 0 at ui/consts/const-prop-ice3.rs:6:17: 6:26
        _0 = &_1;                        // scope 0 at ui/consts/const-prop-ice3.rs:6:16: 6:26
        return;                          // scope 0 at ui/consts/const-prop-ice3.rs:6:16: 6:26
    }
}

fn A(_1: T) -> A<T> {
    let mut _0: A<T>;                    // return place in scope 0 at ui/consts/const-prop-ice3.rs:3:1: 3:20

    bb0: {
        _0 = A::<T>(move _1);            // scope 0 at ui/consts/const-prop-ice3.rs:3:1: 3:20
        return;                          // scope 0 at ui/consts/const-prop-ice3.rs:3:1: 3:20
    }
}

// MIR FOR CTFE
fn A(_1: T) -> A<T> {
    let mut _0: A<T>;                    // return place in scope 0 at ui/consts/const-prop-ice3.rs:3:1: 3:20

    bb0: {
        _0 = A::<T>(move _1);            // scope 0 at ui/consts/const-prop-ice3.rs:3:1: 3:20
        return;                          // scope 0 at ui/consts/const-prop-ice3.rs:3:1: 3:20
    }
}
