// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/array-to-slice-cast.rs:3:11: 3:11

    bb0: {
        return;                          // scope 0 at ui/consts/array-to-slice-cast.rs:3:13: 3:13
    }
}

fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/array-to-slice-cast.rs:5:16: 5:16
    let _1: [i32; 5];                    // in scope 0 at ui/consts/array-to-slice-cast.rs:6:9: 6:10
    let mut _3: &[i32; 5];               // in scope 0 at ui/consts/array-to-slice-cast.rs:7:19: 7:21
    let _4: &[i32; 5];                   // in scope 0 at ui/consts/array-to-slice-cast.rs:7:19: 7:21
    let mut _6: [u8; 3];                 // in scope 0 at ui/consts/array-to-slice-cast.rs:11:37: 11:46
    let mut _8: &foo::Foo<[u8; 3]>;      // in scope 0 at ui/consts/array-to-slice-cast.rs:12:25: 12:27
    let _9: &foo::Foo<[u8; 3]>;          // in scope 0 at ui/consts/array-to-slice-cast.rs:12:25: 12:27
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/array-to-slice-cast.rs:6:9: 6:10
        let _2: &[i32];                  // in scope 1 at ui/consts/array-to-slice-cast.rs:7:9: 7:10
        scope 2 {
            debug y => _2;               // in scope 2 at ui/consts/array-to-slice-cast.rs:7:9: 7:10
            let _5: foo::Foo<[u8; 3]>;   // in scope 2 at ui/consts/array-to-slice-cast.rs:11:9: 11:10
            scope 3 {
                debug x => _5;           // in scope 3 at ui/consts/array-to-slice-cast.rs:11:9: 11:10
                let _7: &foo::Foo<[u8]>; // in scope 3 at ui/consts/array-to-slice-cast.rs:12:9: 12:10
                scope 4 {
                    debug y => _7;       // in scope 4 at ui/consts/array-to-slice-cast.rs:12:9: 12:10
                }
            }
        }
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32]; // scope 0 at ui/consts/array-to-slice-cast.rs:6:13: 6:28
        _4 = &_1;                        // scope 1 at ui/consts/array-to-slice-cast.rs:7:19: 7:21
        _3 = _4;                         // scope 1 at ui/consts/array-to-slice-cast.rs:7:19: 7:21
        _2 = move _3 as &[i32] (Pointer(Unsize)); // scope 1 at ui/consts/array-to-slice-cast.rs:7:19: 7:21
        _6 = [const 1_u8, const 2_u8, const 3_u8]; // scope 2 at ui/consts/array-to-slice-cast.rs:11:37: 11:46
        _5 = Foo::<[u8; 3]>(const true, move _6); // scope 2 at ui/consts/array-to-slice-cast.rs:11:27: 11:47
        _9 = &_5;                        // scope 3 at ui/consts/array-to-slice-cast.rs:12:25: 12:27
        _8 = _9;                         // scope 3 at ui/consts/array-to-slice-cast.rs:12:25: 12:27
        _7 = move _8 as &foo::Foo<[u8]> (Pointer(Unsize)); // scope 3 at ui/consts/array-to-slice-cast.rs:12:25: 12:27
        return;                          // scope 0 at ui/consts/array-to-slice-cast.rs:13:2: 13:2
    }
}

// MIR FOR CTFE
fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/array-to-slice-cast.rs:5:16: 5:16
    let _1: [i32; 5];                    // in scope 0 at ui/consts/array-to-slice-cast.rs:6:9: 6:10
    let mut _3: &[i32; 5];               // in scope 0 at ui/consts/array-to-slice-cast.rs:7:19: 7:21
    let _4: &[i32; 5];                   // in scope 0 at ui/consts/array-to-slice-cast.rs:7:19: 7:21
    let mut _6: [u8; 3];                 // in scope 0 at ui/consts/array-to-slice-cast.rs:11:37: 11:46
    let mut _8: &foo::Foo<[u8; 3]>;      // in scope 0 at ui/consts/array-to-slice-cast.rs:12:25: 12:27
    let _9: &foo::Foo<[u8; 3]>;          // in scope 0 at ui/consts/array-to-slice-cast.rs:12:25: 12:27
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/array-to-slice-cast.rs:6:9: 6:10
        let _2: &[i32];                  // in scope 1 at ui/consts/array-to-slice-cast.rs:7:9: 7:10
        scope 2 {
            debug y => _2;               // in scope 2 at ui/consts/array-to-slice-cast.rs:7:9: 7:10
            let _5: foo::Foo<[u8; 3]>;   // in scope 2 at ui/consts/array-to-slice-cast.rs:11:9: 11:10
            scope 3 {
                debug x => _5;           // in scope 3 at ui/consts/array-to-slice-cast.rs:11:9: 11:10
                let _7: &foo::Foo<[u8]>; // in scope 3 at ui/consts/array-to-slice-cast.rs:12:9: 12:10
                scope 4 {
                    debug y => _7;       // in scope 4 at ui/consts/array-to-slice-cast.rs:12:9: 12:10
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/array-to-slice-cast.rs:6:9: 6:10
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32]; // scope 0 at ui/consts/array-to-slice-cast.rs:6:13: 6:28
        StorageLive(_2);                 // scope 1 at ui/consts/array-to-slice-cast.rs:7:9: 7:10
        StorageLive(_3);                 // scope 1 at ui/consts/array-to-slice-cast.rs:7:19: 7:21
        StorageLive(_4);                 // scope 1 at ui/consts/array-to-slice-cast.rs:7:19: 7:21
        _4 = &_1;                        // scope 1 at ui/consts/array-to-slice-cast.rs:7:19: 7:21
        _3 = &(*_4);                     // scope 1 at ui/consts/array-to-slice-cast.rs:7:19: 7:21
        _2 = move _3 as &[i32] (Pointer(Unsize)); // scope 1 at ui/consts/array-to-slice-cast.rs:7:19: 7:21
        StorageDead(_3);                 // scope 1 at ui/consts/array-to-slice-cast.rs:7:20: 7:21
        StorageDead(_4);                 // scope 1 at ui/consts/array-to-slice-cast.rs:7:21: 7:22
        StorageLive(_5);                 // scope 2 at ui/consts/array-to-slice-cast.rs:11:9: 11:10
        StorageLive(_6);                 // scope 2 at ui/consts/array-to-slice-cast.rs:11:37: 11:46
        _6 = [const 1_u8, const 2_u8, const 3_u8]; // scope 2 at ui/consts/array-to-slice-cast.rs:11:37: 11:46
        _5 = Foo::<[u8; 3]>(const true, move _6); // scope 2 at ui/consts/array-to-slice-cast.rs:11:27: 11:47
        StorageDead(_6);                 // scope 2 at ui/consts/array-to-slice-cast.rs:11:46: 11:47
        StorageLive(_7);                 // scope 3 at ui/consts/array-to-slice-cast.rs:12:9: 12:10
        StorageLive(_8);                 // scope 3 at ui/consts/array-to-slice-cast.rs:12:25: 12:27
        StorageLive(_9);                 // scope 3 at ui/consts/array-to-slice-cast.rs:12:25: 12:27
        _9 = &_5;                        // scope 3 at ui/consts/array-to-slice-cast.rs:12:25: 12:27
        _8 = &(*_9);                     // scope 3 at ui/consts/array-to-slice-cast.rs:12:25: 12:27
        _7 = move _8 as &foo::Foo<[u8]> (Pointer(Unsize)); // scope 3 at ui/consts/array-to-slice-cast.rs:12:25: 12:27
        StorageDead(_8);                 // scope 3 at ui/consts/array-to-slice-cast.rs:12:26: 12:27
        StorageDead(_9);                 // scope 3 at ui/consts/array-to-slice-cast.rs:12:27: 12:28
        _0 = const ();                   // scope 0 at ui/consts/array-to-slice-cast.rs:5:16: 13:2
        StorageDead(_7);                 // scope 3 at ui/consts/array-to-slice-cast.rs:13:1: 13:2
        StorageDead(_5);                 // scope 2 at ui/consts/array-to-slice-cast.rs:13:1: 13:2
        StorageDead(_2);                 // scope 1 at ui/consts/array-to-slice-cast.rs:13:1: 13:2
        StorageDead(_1);                 // scope 0 at ui/consts/array-to-slice-cast.rs:13:1: 13:2
        return;                          // scope 0 at ui/consts/array-to-slice-cast.rs:13:2: 13:2
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/array-to-slice-cast.rs:11:21: 11:22

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/consts/array-to-slice-cast.rs:11:21: 11:22
        return;                          // scope 0 at ui/consts/array-to-slice-cast.rs:11:21: 11:22
    }
}

fn Foo(_1: bool, _2: T) -> Foo<T> {
    let mut _0: foo::Foo<T>;             // return place in scope 0 at ui/consts/array-to-slice-cast.rs:9:5: 9:26

    bb0: {
        _0 = Foo::<T>(move _1, move _2); // scope 0 at ui/consts/array-to-slice-cast.rs:9:5: 9:26
        return;                          // scope 0 at ui/consts/array-to-slice-cast.rs:9:5: 9:26
    }
}

// MIR FOR CTFE
fn Foo(_1: bool, _2: T) -> Foo<T> {
    let mut _0: foo::Foo<T>;             // return place in scope 0 at ui/consts/array-to-slice-cast.rs:9:5: 9:26

    bb0: {
        _0 = Foo::<T>(move _1, move _2); // scope 0 at ui/consts/array-to-slice-cast.rs:9:5: 9:26
        return;                          // scope 0 at ui/consts/array-to-slice-cast.rs:9:5: 9:26
    }
}
