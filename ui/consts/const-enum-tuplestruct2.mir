// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static C: S = {
    let mut _0: S;                       // return place in scope 0 at ui/consts/const-enum-tuplestruct2.rs:6:11: 6:12
    let mut _1: E;                       // in scope 0 at ui/consts/const-enum-tuplestruct2.rs:6:17: 6:22

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-enum-tuplestruct2.rs:6:17: 6:22
        _1 = E::V0;                      // scope 0 at ui/consts/const-enum-tuplestruct2.rs:6:17: 6:22
        _0 = S(move _1, const 24589_u16, const 2989_u16); // scope 0 at ui/consts/const-enum-tuplestruct2.rs:6:15: 6:38
        StorageDead(_1);                 // scope 0 at ui/consts/const-enum-tuplestruct2.rs:6:37: 6:38
        return;                          // scope 0 at ui/consts/const-enum-tuplestruct2.rs:6:1: 6:39
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-enum-tuplestruct2.rs:8:15: 8:15
    let _1: u16;                         // in scope 0 at ui/consts/const-enum-tuplestruct2.rs:9:14: 9:15
    let mut _2: &S;                      // in scope 0 at ui/consts/const-enum-tuplestruct2.rs:9:22: 9:23
    let mut _3: bool;                    // in scope 0 at ui/consts/const-enum-tuplestruct2.rs:10:5: 10:24
    let mut _4: bool;                    // in scope 0 at ui/consts/const-enum-tuplestruct2.rs:10:13: 10:23
    let mut _5: u16;                     // in scope 0 at ui/consts/const-enum-tuplestruct2.rs:10:13: 10:14
    let mut _6: !;                       // in scope 0 at ui/consts/const-enum-tuplestruct2.rs:10:5: 10:24
    let mut _7: (&u16, &u16);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &u16;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _9: &u16;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: u16;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: u16;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &u16;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &u16;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &u16;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &u16;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug n => _1;                   // in scope 1 at ui/consts/const-enum-tuplestruct2.rs:9:14: 9:15
        let _10: &u16;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _11: &u16;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _24: &u16;               // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _10;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _11;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _16: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _16;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _2 = const {alloc1: &S};         // scope 0 at ui/consts/const-enum-tuplestruct2.rs:9:22: 9:23
                                         // mir::Constant
                                         // + span: ui/consts/const-enum-tuplestruct2.rs:9:22: 9:23
                                         // + literal: Const { ty: &S, val: Value(Scalar(alloc1)) }
        _1 = ((*_2).1: u16);             // scope 0 at ui/consts/const-enum-tuplestruct2.rs:9:14: 9:15
        _5 = _1;                         // scope 1 at ui/consts/const-enum-tuplestruct2.rs:10:13: 10:14
        _4 = Ne(move _5, const 2989_u16); // scope 1 at ui/consts/const-enum-tuplestruct2.rs:10:13: 10:23
        _3 = Not(move _4);               // scope 1 at ui/consts/const-enum-tuplestruct2.rs:10:5: 10:24
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/consts/const-enum-tuplestruct2.rs:10:5: 10:24
    }

    bb1: {
        _6 = core::panicking::panic(const "assertion failed: n != 0xBAD"); // scope 1 at ui/consts/const-enum-tuplestruct2.rs:10:5: 10:24
                                         // mir::Constant
                                         // + span: ui/consts/const-enum-tuplestruct2.rs:10:5: 10:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _8 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _24 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u16, val: Unevaluated(main, [], Some(promoted[0])) }
        _9 = _24;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _9);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_7.0: &u16);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_7.1: &u16);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = const 24589_u16;           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb4, otherwise: bb3]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<u16, u16>(move _18, move _19, move _21, move _23); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u16, &'b u16, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u16, u16>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/consts/const-enum-tuplestruct2.rs:12:2: 12:2
    }
}

alloc1 (static: C, size: 8, align: 2) {
    00 00 __ __ 0d 60 ad 0b                         │ ..░░.`..
}

promoted[0] in main: &u16 = {
    let mut _0: &u16;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u16;                     // in scope 0 at ui/consts/const-enum-tuplestruct2.rs:11:19: 11:25

    bb0: {
        _1 = const 24589_u16;            // scope 0 at ui/consts/const-enum-tuplestruct2.rs:11:19: 11:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn E::V16(_1: u16) -> E {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const-enum-tuplestruct2.rs:4:14: 4:17

    bb0: {
        _0 = E::V16(move _1);            // scope 0 at ui/consts/const-enum-tuplestruct2.rs:4:14: 4:17
        return;                          // scope 0 at ui/consts/const-enum-tuplestruct2.rs:4:14: 4:17
    }
}

// MIR FOR CTFE
fn E::V16(_1: u16) -> E {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const-enum-tuplestruct2.rs:4:14: 4:17

    bb0: {
        _0 = E::V16(move _1);            // scope 0 at ui/consts/const-enum-tuplestruct2.rs:4:14: 4:17
        return;                          // scope 0 at ui/consts/const-enum-tuplestruct2.rs:4:14: 4:17
    }
}

fn S(_1: E, _2: u16, _3: u16) -> S {
    let mut _0: S;                       // return place in scope 0 at ui/consts/const-enum-tuplestruct2.rs:5:1: 5:9

    bb0: {
        _0 = S(move _1, move _2, move _3); // scope 0 at ui/consts/const-enum-tuplestruct2.rs:5:1: 5:9
        return;                          // scope 0 at ui/consts/const-enum-tuplestruct2.rs:5:1: 5:9
    }
}

// MIR FOR CTFE
fn S(_1: E, _2: u16, _3: u16) -> S {
    let mut _0: S;                       // return place in scope 0 at ui/consts/const-enum-tuplestruct2.rs:5:1: 5:9

    bb0: {
        _0 = S(move _1, move _2, move _3); // scope 0 at ui/consts/const-enum-tuplestruct2.rs:5:1: 5:9
        return;                          // scope 0 at ui/consts/const-enum-tuplestruct2.rs:5:1: 5:9
    }
}
