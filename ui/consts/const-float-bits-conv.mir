// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn nop(_1: T) -> T {
    debug x => _1;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:9:17: 9:18
    let mut _0: T;                       // return place in scope 0 at ui/consts/const-float-bits-conv.rs:9:26: 9:27

    bb0: {
        _0 = move _1;                    // scope 0 at ui/consts/const-float-bits-conv.rs:9:30: 9:31
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:9:33: 9:33
    }
}

// MIR FOR CTFE
fn nop(_1: T) -> T {
    debug x => _1;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:9:17: 9:18
    let mut _0: T;                       // return place in scope 0 at ui/consts/const-float-bits-conv.rs:9:26: 9:27

    bb0: {
        _0 = move _1;                    // scope 0 at ui/consts/const-float-bits-conv.rs:9:30: 9:31
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:9:33: 9:33
    }
}

fn f32() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:26:10: 26:10
    let mut _1: (&u32, &u32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: u32;                         // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _4: u32;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:27:19: 27:35
    let mut _5: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _6: u32;                         // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _7: &u32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _8: &u32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _21: (&u32, &u32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _22: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _23: u32;                        // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _24: u32;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:28:19: 28:57
    let mut _25: [u8; 4];                // in scope 0 at ui/consts/const-float-bits-conv.rs:28:38: 28:56
    let mut _26: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _27: u32;                        // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _28: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _29: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _32: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _33: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _35: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _36: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _37: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _38: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _39: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _40: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _42: (&u32, &u32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _43: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _44: u32;                        // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _45: u32;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:29:19: 29:38
    let mut _46: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _47: u32;                        // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _48: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _49: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _50: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _51: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _52: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _53: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _55: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _56: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _57: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _58: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _59: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _60: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _62: (&u32, &u32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _63: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _64: u32;                        // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _65: u32;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:30:19: 30:60
    let mut _66: [u8; 4];                // in scope 0 at ui/consts/const-float-bits-conv.rs:30:38: 30:59
    let mut _67: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _68: u32;                        // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _69: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _70: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _71: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _72: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _73: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _74: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _76: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _77: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _78: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _79: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _80: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _81: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _82: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _83: (&u32, &u32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _84: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _85: u32;                        // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _86: u32;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:31:19: 31:38
    let mut _87: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _88: u32;                        // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _89: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _90: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _91: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _92: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _93: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _94: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _96: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _97: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _98: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _99: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _100: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _101: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _102: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _103: (&u32, &u32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _104: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _105: u32;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _106: u32;                   // in scope 0 at ui/consts/const-float-bits-conv.rs:32:19: 32:60
    let mut _107: [u8; 4];               // in scope 0 at ui/consts/const-float-bits-conv.rs:32:38: 32:59
    let mut _108: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _109: u32;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _110: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _111: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _112: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _113: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _114: u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _115: u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _117: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _118: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _119: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _120: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _121: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _122: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _123: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _124: (&u32, &u32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _125: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _126: u32;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _127: u32;                   // in scope 0 at ui/consts/const-float-bits-conv.rs:33:19: 33:40
    let mut _128: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _129: u32;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _130: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _131: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _132: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _133: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _134: u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _135: u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _137: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _138: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _139: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _140: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _141: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _142: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _143: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _144: (&f32, &f32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _145: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _146: f32;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _147: f32;                   // in scope 0 at ui/consts/const-float-bits-conv.rs:34:19: 34:45
    let mut _148: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _149: f32;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _150: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _151: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _152: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _153: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _154: f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _155: f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _157: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _158: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _159: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _160: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _161: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _162: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _163: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _164: (&f32, &f32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _165: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _166: f32;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _167: f32;                   // in scope 0 at ui/consts/const-float-bits-conv.rs:35:19: 35:66
    let mut _168: [u8; 4];               // in scope 0 at ui/consts/const-float-bits-conv.rs:35:38: 35:65
    let mut _169: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _170: f32;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _171: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _172: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _173: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _174: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _175: f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _176: f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _178: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _179: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _180: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _181: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _182: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _183: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _184: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _185: (&f32, &f32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _186: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _187: f32;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _188: f32;                   // in scope 0 at ui/consts/const-float-bits-conv.rs:36:19: 36:45
    let mut _189: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _190: f32;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _191: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _192: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _193: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _194: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _195: f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _196: f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _198: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _199: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _200: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _201: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _202: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _203: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _204: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _205: (&f32, &f32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _206: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _207: f32;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _208: f32;                   // in scope 0 at ui/consts/const-float-bits-conv.rs:37:19: 37:66
    let mut _209: [u8; 4];               // in scope 0 at ui/consts/const-float-bits-conv.rs:37:38: 37:65
    let mut _210: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _211: f32;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _212: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _213: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _214: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _215: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _216: f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _217: f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _219: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _220: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _221: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _222: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _223: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _224: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _225: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _226: (&f32, &f32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _227: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _228: f32;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _229: f32;                   // in scope 0 at ui/consts/const-float-bits-conv.rs:38:19: 38:45
    let mut _230: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _231: f32;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _232: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _233: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _234: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _235: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _236: f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _237: f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _239: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _240: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _241: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _242: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _243: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _244: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _245: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _246: (&f32, &f32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _247: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _248: f32;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _249: f32;                   // in scope 0 at ui/consts/const-float-bits-conv.rs:39:19: 39:66
    let mut _250: [u8; 4];               // in scope 0 at ui/consts/const-float-bits-conv.rs:39:38: 39:65
    let mut _251: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _252: f32;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _253: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _254: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _255: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _256: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _257: f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _258: f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _260: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _261: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _262: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _263: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _264: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _265: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _266: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _267: (&f32, &f32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _268: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _269: f32;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _270: f32;                   // in scope 0 at ui/consts/const-float-bits-conv.rs:40:19: 40:45
    let mut _271: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _272: f32;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _273: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _274: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _275: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _276: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _277: f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _278: f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _280: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _281: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _282: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _283: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _284: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _285: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _286: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug left_val => _7;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _8;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _13: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _13;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _28;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _29;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _34: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _34;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _48;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _49;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _54: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _54;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug left_val => _69;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _70;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _75: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 8 {
            debug kind => _75;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 9 {
        debug left_val => _89;           // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _90;          // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _95: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 10 {
            debug kind => _95;           // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 11 {
        debug left_val => _110;          // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _111;         // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _116: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 12 {
            debug kind => _116;          // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 13 {
        debug left_val => _130;          // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _131;         // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _136: core::panicking::AssertKind; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 14 {
            debug kind => _136;          // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 15 {
        debug left_val => _150;          // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _151;         // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _156: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 16 {
            debug kind => _156;          // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 17 {
        debug left_val => _171;          // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _172;         // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _177: core::panicking::AssertKind; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 18 {
            debug kind => _177;          // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 19 {
        debug left_val => _191;          // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _192;         // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _197: core::panicking::AssertKind; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 20 {
            debug kind => _197;          // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 21 {
        debug left_val => _212;          // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _213;         // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _218: core::panicking::AssertKind; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 22 {
            debug kind => _218;          // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 23 {
        debug left_val => _232;          // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _233;         // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _238: core::panicking::AssertKind; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 24 {
            debug kind => _238;          // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 25 {
        debug left_val => _253;          // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _254;         // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _259: core::panicking::AssertKind; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 26 {
            debug kind => _259;          // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 27 {
        debug left_val => _273;          // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _274;         // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _279: core::panicking::AssertKind; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 28 {
            debug kind => _279;          // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _4 = core::f32::<impl f32>::to_bits(const 1f32) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:27:19: 27:35
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:27:26: 27:33
                                         // + literal: Const { ty: fn(f32) -> u32 {core::f32::<impl f32>::to_bits}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = nop::<u32>(move _4) -> bb2; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(u32) -> u32 {nop::<u32>}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _6 = nop::<u32>(const 1065353216_u32) -> bb3; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(u32) -> u32 {nop::<u32>}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = &_6;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_1.0: &u32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_1.1: &u32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = (*_8);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb5, otherwise: bb4]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _13 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<u32, u32>(move _15, move _16, move _18, move _20); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb5: {
        _25 = core::f32::<impl f32>::to_be_bytes(const 1f32) -> bb6; // scope 0 at ui/consts/const-float-bits-conv.rs:28:38: 28:56
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:28:43: 28:54
                                         // + literal: Const { ty: fn(f32) -> [u8; 4] {core::f32::<impl f32>::to_be_bytes}, val: Value(<ZST>) }
    }

    bb6: {
        _24 = core::num::<impl u32>::from_be_bytes(move _25) -> bb7; // scope 0 at ui/consts/const-float-bits-conv.rs:28:19: 28:57
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:28:19: 28:37
                                         // + literal: Const { ty: fn([u8; core::::num::{impl#9}::from_be_bytes::{constant#0}]) -> u32 {core::num::<impl u32>::from_be_bytes}, val: Value(<ZST>) }
    }

    bb7: {
        _23 = nop::<u32>(move _24) -> bb8; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(u32) -> u32 {nop::<u32>}, val: Value(<ZST>) }
    }

    bb8: {
        _22 = &_23;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _27 = nop::<u32>(const 1065353216_u32) -> bb9; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(u32) -> u32 {nop::<u32>}, val: Value(<ZST>) }
    }

    bb9: {
        _26 = &_27;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _21 = (move _22, move _26);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _28 = (_21.0: &u32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _29 = (_21.1: &u32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _32 = (*_28);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _33 = (*_29);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _31 = Eq(move _32, move _33);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _30 = Not(move _31);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _30) -> [0: bb11, otherwise: bb10]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _34 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _36 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _38 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _38;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _40 = _29;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = _40;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _41 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _35 = core::panicking::assert_failed::<u32, u32>(move _36, move _37, move _39, move _41); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb11: {
        _45 = core::f32::<impl f32>::to_bits(const 12.5f32) -> bb12; // scope 0 at ui/consts/const-float-bits-conv.rs:29:19: 29:38
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:29:29: 29:36
                                         // + literal: Const { ty: fn(f32) -> u32 {core::f32::<impl f32>::to_bits}, val: Value(<ZST>) }
    }

    bb12: {
        _44 = nop::<u32>(move _45) -> bb13; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(u32) -> u32 {nop::<u32>}, val: Value(<ZST>) }
    }

    bb13: {
        _43 = &_44;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _47 = nop::<u32>(const 1095237632_u32) -> bb14; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(u32) -> u32 {nop::<u32>}, val: Value(<ZST>) }
    }

    bb14: {
        _46 = &_47;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _42 = (move _43, move _46);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _48 = (_42.0: &u32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _49 = (_42.1: &u32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _52 = (*_48);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _53 = (*_49);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _51 = Eq(move _52, move _53);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _50 = Not(move _51);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _50) -> [0: bb16, otherwise: bb15]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _54 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _56 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = _48;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _58;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _60 = _49;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _59 = _60;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _55 = core::panicking::assert_failed::<u32, u32>(move _56, move _57, move _59, move _61); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb16: {
        _66 = core::f32::<impl f32>::to_le_bytes(const 12.5f32) -> bb17; // scope 0 at ui/consts/const-float-bits-conv.rs:30:38: 30:59
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:30:46: 30:57
                                         // + literal: Const { ty: fn(f32) -> [u8; 4] {core::f32::<impl f32>::to_le_bytes}, val: Value(<ZST>) }
    }

    bb17: {
        _65 = core::num::<impl u32>::from_le_bytes(move _66) -> bb18; // scope 0 at ui/consts/const-float-bits-conv.rs:30:19: 30:60
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:30:19: 30:37
                                         // + literal: Const { ty: fn([u8; core::::num::{impl#9}::from_le_bytes::{constant#0}]) -> u32 {core::num::<impl u32>::from_le_bytes}, val: Value(<ZST>) }
    }

    bb18: {
        _64 = nop::<u32>(move _65) -> bb19; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(u32) -> u32 {nop::<u32>}, val: Value(<ZST>) }
    }

    bb19: {
        _63 = &_64;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _68 = nop::<u32>(const 1095237632_u32) -> bb20; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(u32) -> u32 {nop::<u32>}, val: Value(<ZST>) }
    }

    bb20: {
        _67 = &_68;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _62 = (move _63, move _67);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _69 = (_62.0: &u32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _70 = (_62.1: &u32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _73 = (*_69);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _74 = (*_70);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _72 = Eq(move _73, move _74);    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _71 = Not(move _72);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _71) -> [0: bb22, otherwise: bb21]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb21: {
        _75 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _77 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _79 = _69;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _78 = _79;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _81 = _70;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _80 = _81;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _82 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _76 = core::panicking::assert_failed::<u32, u32>(move _77, move _78, move _80, move _82); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb22: {
        _86 = core::f32::<impl f32>::to_bits(const 1337f32) -> bb23; // scope 0 at ui/consts/const-float-bits-conv.rs:31:19: 31:38
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:31:29: 31:36
                                         // + literal: Const { ty: fn(f32) -> u32 {core::f32::<impl f32>::to_bits}, val: Value(<ZST>) }
    }

    bb23: {
        _85 = nop::<u32>(move _86) -> bb24; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(u32) -> u32 {nop::<u32>}, val: Value(<ZST>) }
    }

    bb24: {
        _84 = &_85;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _88 = nop::<u32>(const 1151803392_u32) -> bb25; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(u32) -> u32 {nop::<u32>}, val: Value(<ZST>) }
    }

    bb25: {
        _87 = &_88;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _83 = (move _84, move _87);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _89 = (_83.0: &u32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _90 = (_83.1: &u32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _93 = (*_89);                    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _94 = (*_90);                    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _92 = Eq(move _93, move _94);    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _91 = Not(move _92);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _91) -> [0: bb27, otherwise: bb26]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb26: {
        _95 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _97 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _99 = _89;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _98 = _99;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _101 = _90;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _100 = _101;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _102 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _96 = core::panicking::assert_failed::<u32, u32>(move _97, move _98, move _100, move _102); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb27: {
        _107 = core::f32::<impl f32>::to_ne_bytes(const 1337f32) -> bb28; // scope 0 at ui/consts/const-float-bits-conv.rs:32:38: 32:59
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:32:46: 32:57
                                         // + literal: Const { ty: fn(f32) -> [u8; 4] {core::f32::<impl f32>::to_ne_bytes}, val: Value(<ZST>) }
    }

    bb28: {
        _106 = core::num::<impl u32>::from_ne_bytes(move _107) -> bb29; // scope 0 at ui/consts/const-float-bits-conv.rs:32:19: 32:60
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:32:19: 32:37
                                         // + literal: Const { ty: fn([u8; core::::num::{impl#9}::from_ne_bytes::{constant#0}]) -> u32 {core::num::<impl u32>::from_ne_bytes}, val: Value(<ZST>) }
    }

    bb29: {
        _105 = nop::<u32>(move _106) -> bb30; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(u32) -> u32 {nop::<u32>}, val: Value(<ZST>) }
    }

    bb30: {
        _104 = &_105;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _109 = nop::<u32>(const 1151803392_u32) -> bb31; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(u32) -> u32 {nop::<u32>}, val: Value(<ZST>) }
    }

    bb31: {
        _108 = &_109;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _103 = (move _104, move _108);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _110 = (_103.0: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _111 = (_103.1: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _114 = (*_110);                  // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _115 = (*_111);                  // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _113 = Eq(move _114, move _115); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _112 = Not(move _113);           // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _112) -> [0: bb33, otherwise: bb32]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb32: {
        _116 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _118 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _120 = _110;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _119 = _120;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _122 = _111;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _121 = _122;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _123 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _117 = core::panicking::assert_failed::<u32, u32>(move _118, move _119, move _121, move _123); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb33: {
        _127 = core::f32::<impl f32>::to_bits(const -14.25f32) -> bb34; // scope 0 at ui/consts/const-float-bits-conv.rs:33:19: 33:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:33:31: 33:38
                                         // + literal: Const { ty: fn(f32) -> u32 {core::f32::<impl f32>::to_bits}, val: Value(<ZST>) }
    }

    bb34: {
        _126 = nop::<u32>(move _127) -> bb35; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(u32) -> u32 {nop::<u32>}, val: Value(<ZST>) }
    }

    bb35: {
        _125 = &_126;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _129 = nop::<u32>(const 3244556288_u32) -> bb36; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(u32) -> u32 {nop::<u32>}, val: Value(<ZST>) }
    }

    bb36: {
        _128 = &_129;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _124 = (move _125, move _128);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _130 = (_124.0: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _131 = (_124.1: &u32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _134 = (*_130);                  // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _135 = (*_131);                  // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _133 = Eq(move _134, move _135); // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _132 = Not(move _133);           // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _132) -> [0: bb38, otherwise: bb37]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb37: {
        _136 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _138 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _140 = _130;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _139 = _140;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _142 = _131;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _141 = _142;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _143 = Option::<Arguments<'_>>::None; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _137 = core::panicking::assert_failed::<u32, u32>(move _138, move _139, move _141, move _143); // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb38: {
        _147 = core::f32::<impl f32>::from_bits(const 1065353216_u32) -> bb39; // scope 0 at ui/consts/const-float-bits-conv.rs:34:19: 34:45
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:34:19: 34:33
                                         // + literal: Const { ty: fn(u32) -> f32 {core::f32::<impl f32>::from_bits}, val: Value(<ZST>) }
    }

    bb39: {
        _146 = nop::<f32>(move _147) -> bb40; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(f32) -> f32 {nop::<f32>}, val: Value(<ZST>) }
    }

    bb40: {
        _145 = &_146;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _149 = nop::<f32>(const 1f32) -> bb41; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(f32) -> f32 {nop::<f32>}, val: Value(<ZST>) }
    }

    bb41: {
        _148 = &_149;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _144 = (move _145, move _148);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _150 = (_144.0: &f32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _151 = (_144.1: &f32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _154 = (*_150);                  // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _155 = (*_151);                  // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _153 = Eq(move _154, move _155); // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _152 = Not(move _153);           // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _152) -> [0: bb43, otherwise: bb42]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb42: {
        _156 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _158 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _160 = _150;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _159 = _160;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _162 = _151;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _161 = _162;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _163 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _157 = core::panicking::assert_failed::<f32, f32>(move _158, move _159, move _161, move _163); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a f32, &'b f32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<f32, f32>}, val: Value(<ZST>) }
    }

    bb43: {
        _168 = core::num::<impl u32>::to_be_bytes(const 1065353216_u32) -> bb44; // scope 0 at ui/consts/const-float-bits-conv.rs:35:38: 35:65
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:35:52: 35:63
                                         // + literal: Const { ty: fn(u32) -> [u8; core::::num::{impl#9}::to_be_bytes::{constant#0}] {core::num::<impl u32>::to_be_bytes}, val: Value(<ZST>) }
    }

    bb44: {
        _167 = core::f32::<impl f32>::from_be_bytes(move _168) -> bb45; // scope 0 at ui/consts/const-float-bits-conv.rs:35:19: 35:66
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:35:19: 35:37
                                         // + literal: Const { ty: fn([u8; 4]) -> f32 {core::f32::<impl f32>::from_be_bytes}, val: Value(<ZST>) }
    }

    bb45: {
        _166 = nop::<f32>(move _167) -> bb46; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(f32) -> f32 {nop::<f32>}, val: Value(<ZST>) }
    }

    bb46: {
        _165 = &_166;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _170 = nop::<f32>(const 1f32) -> bb47; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(f32) -> f32 {nop::<f32>}, val: Value(<ZST>) }
    }

    bb47: {
        _169 = &_170;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _164 = (move _165, move _169);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _171 = (_164.0: &f32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _172 = (_164.1: &f32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _175 = (*_171);                  // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _176 = (*_172);                  // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _174 = Eq(move _175, move _176); // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _173 = Not(move _174);           // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _173) -> [0: bb49, otherwise: bb48]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb48: {
        _177 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _179 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _181 = _171;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _180 = _181;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _183 = _172;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _182 = _183;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _184 = Option::<Arguments<'_>>::None; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _178 = core::panicking::assert_failed::<f32, f32>(move _179, move _180, move _182, move _184); // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a f32, &'b f32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<f32, f32>}, val: Value(<ZST>) }
    }

    bb49: {
        _188 = core::f32::<impl f32>::from_bits(const 1095237632_u32) -> bb50; // scope 0 at ui/consts/const-float-bits-conv.rs:36:19: 36:45
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:36:19: 36:33
                                         // + literal: Const { ty: fn(u32) -> f32 {core::f32::<impl f32>::from_bits}, val: Value(<ZST>) }
    }

    bb50: {
        _187 = nop::<f32>(move _188) -> bb51; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(f32) -> f32 {nop::<f32>}, val: Value(<ZST>) }
    }

    bb51: {
        _186 = &_187;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _190 = nop::<f32>(const 12.5f32) -> bb52; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(f32) -> f32 {nop::<f32>}, val: Value(<ZST>) }
    }

    bb52: {
        _189 = &_190;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _185 = (move _186, move _189);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _191 = (_185.0: &f32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _192 = (_185.1: &f32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _195 = (*_191);                  // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _196 = (*_192);                  // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _194 = Eq(move _195, move _196); // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _193 = Not(move _194);           // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _193) -> [0: bb54, otherwise: bb53]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb53: {
        _197 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _199 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _201 = _191;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _200 = _201;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _203 = _192;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _202 = _203;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _204 = Option::<Arguments<'_>>::None; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _198 = core::panicking::assert_failed::<f32, f32>(move _199, move _200, move _202, move _204); // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a f32, &'b f32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<f32, f32>}, val: Value(<ZST>) }
    }

    bb54: {
        _209 = core::num::<impl u32>::to_le_bytes(const 1095237632_u32) -> bb55; // scope 0 at ui/consts/const-float-bits-conv.rs:37:38: 37:65
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:37:52: 37:63
                                         // + literal: Const { ty: fn(u32) -> [u8; core::::num::{impl#9}::to_le_bytes::{constant#0}] {core::num::<impl u32>::to_le_bytes}, val: Value(<ZST>) }
    }

    bb55: {
        _208 = core::f32::<impl f32>::from_le_bytes(move _209) -> bb56; // scope 0 at ui/consts/const-float-bits-conv.rs:37:19: 37:66
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:37:19: 37:37
                                         // + literal: Const { ty: fn([u8; 4]) -> f32 {core::f32::<impl f32>::from_le_bytes}, val: Value(<ZST>) }
    }

    bb56: {
        _207 = nop::<f32>(move _208) -> bb57; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(f32) -> f32 {nop::<f32>}, val: Value(<ZST>) }
    }

    bb57: {
        _206 = &_207;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _211 = nop::<f32>(const 12.5f32) -> bb58; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(f32) -> f32 {nop::<f32>}, val: Value(<ZST>) }
    }

    bb58: {
        _210 = &_211;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _205 = (move _206, move _210);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _212 = (_205.0: &f32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _213 = (_205.1: &f32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _216 = (*_212);                  // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _217 = (*_213);                  // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _215 = Eq(move _216, move _217); // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _214 = Not(move _215);           // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _214) -> [0: bb60, otherwise: bb59]; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb59: {
        _218 = const core::panicking::AssertKind::Eq; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _220 = const core::panicking::AssertKind::Eq; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _222 = _212;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _221 = _222;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _224 = _213;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _223 = _224;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _225 = Option::<Arguments<'_>>::None; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _219 = core::panicking::assert_failed::<f32, f32>(move _220, move _221, move _223, move _225); // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a f32, &'b f32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<f32, f32>}, val: Value(<ZST>) }
    }

    bb60: {
        _229 = core::f32::<impl f32>::from_bits(const 1151803392_u32) -> bb61; // scope 0 at ui/consts/const-float-bits-conv.rs:38:19: 38:45
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:38:19: 38:33
                                         // + literal: Const { ty: fn(u32) -> f32 {core::f32::<impl f32>::from_bits}, val: Value(<ZST>) }
    }

    bb61: {
        _228 = nop::<f32>(move _229) -> bb62; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(f32) -> f32 {nop::<f32>}, val: Value(<ZST>) }
    }

    bb62: {
        _227 = &_228;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _231 = nop::<f32>(const 1337f32) -> bb63; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(f32) -> f32 {nop::<f32>}, val: Value(<ZST>) }
    }

    bb63: {
        _230 = &_231;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _226 = (move _227, move _230);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _232 = (_226.0: &f32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _233 = (_226.1: &f32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _236 = (*_232);                  // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _237 = (*_233);                  // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _235 = Eq(move _236, move _237); // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _234 = Not(move _235);           // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _234) -> [0: bb65, otherwise: bb64]; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb64: {
        _238 = const core::panicking::AssertKind::Eq; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _240 = const core::panicking::AssertKind::Eq; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _242 = _232;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _241 = _242;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _244 = _233;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _243 = _244;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _245 = Option::<Arguments<'_>>::None; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _239 = core::panicking::assert_failed::<f32, f32>(move _240, move _241, move _243, move _245); // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a f32, &'b f32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<f32, f32>}, val: Value(<ZST>) }
    }

    bb65: {
        _250 = core::num::<impl u32>::to_ne_bytes(const 1151803392_u32) -> bb66; // scope 0 at ui/consts/const-float-bits-conv.rs:39:38: 39:65
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:39:52: 39:63
                                         // + literal: Const { ty: fn(u32) -> [u8; core::::num::{impl#9}::to_ne_bytes::{constant#0}] {core::num::<impl u32>::to_ne_bytes}, val: Value(<ZST>) }
    }

    bb66: {
        _249 = core::f32::<impl f32>::from_ne_bytes(move _250) -> bb67; // scope 0 at ui/consts/const-float-bits-conv.rs:39:19: 39:66
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:39:19: 39:37
                                         // + literal: Const { ty: fn([u8; 4]) -> f32 {core::f32::<impl f32>::from_ne_bytes}, val: Value(<ZST>) }
    }

    bb67: {
        _248 = nop::<f32>(move _249) -> bb68; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(f32) -> f32 {nop::<f32>}, val: Value(<ZST>) }
    }

    bb68: {
        _247 = &_248;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _252 = nop::<f32>(const 1337f32) -> bb69; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(f32) -> f32 {nop::<f32>}, val: Value(<ZST>) }
    }

    bb69: {
        _251 = &_252;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _246 = (move _247, move _251);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _253 = (_246.0: &f32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _254 = (_246.1: &f32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _257 = (*_253);                  // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _258 = (*_254);                  // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _256 = Eq(move _257, move _258); // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _255 = Not(move _256);           // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _255) -> [0: bb71, otherwise: bb70]; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb70: {
        _259 = const core::panicking::AssertKind::Eq; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _261 = const core::panicking::AssertKind::Eq; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _263 = _253;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _262 = _263;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _265 = _254;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _264 = _265;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _266 = Option::<Arguments<'_>>::None; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _260 = core::panicking::assert_failed::<f32, f32>(move _261, move _262, move _264, move _266); // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a f32, &'b f32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<f32, f32>}, val: Value(<ZST>) }
    }

    bb71: {
        _270 = core::f32::<impl f32>::from_bits(const 3244556288_u32) -> bb72; // scope 0 at ui/consts/const-float-bits-conv.rs:40:19: 40:45
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:40:19: 40:33
                                         // + literal: Const { ty: fn(u32) -> f32 {core::f32::<impl f32>::from_bits}, val: Value(<ZST>) }
    }

    bb72: {
        _269 = nop::<f32>(move _270) -> bb73; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(f32) -> f32 {nop::<f32>}, val: Value(<ZST>) }
    }

    bb73: {
        _268 = &_269;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _272 = nop::<f32>(const -14.25f32) -> bb74; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(f32) -> f32 {nop::<f32>}, val: Value(<ZST>) }
    }

    bb74: {
        _271 = &_272;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _267 = (move _268, move _271);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _273 = (_267.0: &f32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _274 = (_267.1: &f32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _277 = (*_273);                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _278 = (*_274);                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _276 = Eq(move _277, move _278); // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _275 = Not(move _276);           // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _275) -> [0: bb76, otherwise: bb75]; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb75: {
        _279 = const core::panicking::AssertKind::Eq; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _281 = const core::panicking::AssertKind::Eq; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _283 = _273;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _282 = _283;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _285 = _274;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _284 = _285;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _286 = Option::<Arguments<'_>>::None; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _280 = core::panicking::assert_failed::<f32, f32>(move _281, move _282, move _284, move _286); // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a f32, &'b f32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<f32, f32>}, val: Value(<ZST>) }
    }

    bb76: {
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:41:2: 41:2
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: u32;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:27:19: 27:35
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:27:19: 27:35
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:27:19: 27:35
        _3 = core::f32::<impl f32>::to_bits(const 1f32) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:27:19: 27:35
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:27:26: 27:33
                                         // + literal: Const { ty: fn(f32) -> u32 {core::f32::<impl f32>::to_bits}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const 1065353216_u32); // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _4 = core::panicking::panic(const "assertion failed: (1f32).to_bits() == 0x3f800000"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: u32;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:28:19: 28:57
    let mut _4: [u8; 4];                 // in scope 0 at ui/consts/const-float-bits-conv.rs:28:38: 28:56
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:28:19: 28:57
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:28:38: 28:56
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:28:38: 28:56
        _4 = core::f32::<impl f32>::to_be_bytes(const 1f32) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:28:38: 28:56
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:28:43: 28:54
                                         // + literal: Const { ty: fn(f32) -> [u8; 4] {core::f32::<impl f32>::to_be_bytes}, val: Value(<ZST>) }
    }

    bb1: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:28:19: 28:57
        _3 = core::num::<impl u32>::from_be_bytes(move _4) -> bb2; // scope 0 at ui/consts/const-float-bits-conv.rs:28:19: 28:57
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:28:19: 28:37
                                         // + literal: Const { ty: fn([u8; core::::num::{impl#9}::from_be_bytes::{constant#0}]) -> u32 {core::num::<impl u32>::from_be_bytes}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:28:56: 28:57
        _2 = Eq(move _3, const 1065353216_u32); // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb4, otherwise: bb3]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb3: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _5 = core::panicking::panic(const "assertion failed: u32::from_be_bytes(1f32.to_be_bytes()) == 0x3f800000"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: u32;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:29:19: 29:38
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:29:19: 29:38
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:29:19: 29:38
        _3 = core::f32::<impl f32>::to_bits(const 12.5f32) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:29:19: 29:38
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:29:29: 29:36
                                         // + literal: Const { ty: fn(f32) -> u32 {core::f32::<impl f32>::to_bits}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const 1095237632_u32); // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _4 = core::panicking::panic(const "assertion failed: (12.5f32).to_bits() == 0x41480000"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: u32;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:30:19: 30:60
    let mut _4: [u8; 4];                 // in scope 0 at ui/consts/const-float-bits-conv.rs:30:38: 30:59
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:30:19: 30:60
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:30:38: 30:59
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:30:38: 30:59
        _4 = core::f32::<impl f32>::to_le_bytes(const 12.5f32) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:30:38: 30:59
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:30:46: 30:57
                                         // + literal: Const { ty: fn(f32) -> [u8; 4] {core::f32::<impl f32>::to_le_bytes}, val: Value(<ZST>) }
    }

    bb1: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:30:19: 30:60
        _3 = core::num::<impl u32>::from_le_bytes(move _4) -> bb2; // scope 0 at ui/consts/const-float-bits-conv.rs:30:19: 30:60
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:30:19: 30:37
                                         // + literal: Const { ty: fn([u8; core::::num::{impl#9}::from_le_bytes::{constant#0}]) -> u32 {core::num::<impl u32>::from_le_bytes}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:30:59: 30:60
        _2 = Eq(move _3, const 1095237632_u32); // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb4, otherwise: bb3]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb3: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _5 = core::panicking::panic(const "assertion failed: u32::from_le_bytes(12.5f32.to_le_bytes()) == 0x41480000"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: u32;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:31:19: 31:38
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:31:19: 31:38
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:31:19: 31:38
        _3 = core::f32::<impl f32>::to_bits(const 1337f32) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:31:19: 31:38
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:31:29: 31:36
                                         // + literal: Const { ty: fn(f32) -> u32 {core::f32::<impl f32>::to_bits}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const 1151803392_u32); // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _4 = core::panicking::panic(const "assertion failed: (1337f32).to_bits() == 0x44a72000"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: u32;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:32:19: 32:60
    let mut _4: [u8; 4];                 // in scope 0 at ui/consts/const-float-bits-conv.rs:32:38: 32:59
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:32:19: 32:60
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:32:38: 32:59
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:32:38: 32:59
        _4 = core::f32::<impl f32>::to_ne_bytes(const 1337f32) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:32:38: 32:59
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:32:46: 32:57
                                         // + literal: Const { ty: fn(f32) -> [u8; 4] {core::f32::<impl f32>::to_ne_bytes}, val: Value(<ZST>) }
    }

    bb1: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:32:19: 32:60
        _3 = core::num::<impl u32>::from_ne_bytes(move _4) -> bb2; // scope 0 at ui/consts/const-float-bits-conv.rs:32:19: 32:60
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:32:19: 32:37
                                         // + literal: Const { ty: fn([u8; core::::num::{impl#9}::from_ne_bytes::{constant#0}]) -> u32 {core::num::<impl u32>::from_ne_bytes}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:32:59: 32:60
        _2 = Eq(move _3, const 1151803392_u32); // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb4, otherwise: bb3]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb3: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _5 = core::panicking::panic(const "assertion failed: u32::from_ne_bytes(1337f32.to_ne_bytes()) == 0x44a72000"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: u32;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:33:19: 33:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:33:19: 33:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:33:19: 33:40
        _3 = core::f32::<impl f32>::to_bits(const -14.25f32) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:33:19: 33:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:33:31: 33:38
                                         // + literal: Const { ty: fn(f32) -> u32 {core::f32::<impl f32>::to_bits}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const 3244556288_u32); // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _4 = core::panicking::panic(const "assertion failed: (-14.25f32).to_bits() == 0xc1640000"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: f32;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:34:19: 34:45
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:34:19: 34:45
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:34:19: 34:45
        _3 = core::f32::<impl f32>::from_bits(const 1065353216_u32) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:34:19: 34:45
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:34:19: 34:33
                                         // + literal: Const { ty: fn(u32) -> f32 {core::f32::<impl f32>::from_bits}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const 1f32);    // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _4 = core::panicking::panic(const "assertion failed: f32::from_bits(0x3f800000) == 1.0"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: f32;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:35:19: 35:66
    let mut _4: [u8; 4];                 // in scope 0 at ui/consts/const-float-bits-conv.rs:35:38: 35:65
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:35:19: 35:66
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:35:38: 35:65
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:35:38: 35:65
        _4 = core::num::<impl u32>::to_be_bytes(const 1065353216_u32) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:35:38: 35:65
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:35:52: 35:63
                                         // + literal: Const { ty: fn(u32) -> [u8; core::::num::{impl#9}::to_be_bytes::{constant#0}] {core::num::<impl u32>::to_be_bytes}, val: Value(<ZST>) }
    }

    bb1: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:35:19: 35:66
        _3 = core::f32::<impl f32>::from_be_bytes(move _4) -> bb2; // scope 0 at ui/consts/const-float-bits-conv.rs:35:19: 35:66
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:35:19: 35:37
                                         // + literal: Const { ty: fn([u8; 4]) -> f32 {core::f32::<impl f32>::from_be_bytes}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:35:65: 35:66
        _2 = Eq(move _3, const 1f32);    // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb4, otherwise: bb3]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb3: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _5 = core::panicking::panic(const "assertion failed: f32::from_be_bytes(0x3f800000u32.to_be_bytes()) == 1.0"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: f32;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:36:19: 36:45
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:36:19: 36:45
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:36:19: 36:45
        _3 = core::f32::<impl f32>::from_bits(const 1095237632_u32) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:36:19: 36:45
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:36:19: 36:33
                                         // + literal: Const { ty: fn(u32) -> f32 {core::f32::<impl f32>::from_bits}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const 12.5f32); // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _4 = core::panicking::panic(const "assertion failed: f32::from_bits(0x41480000) == 12.5"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: f32;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:37:19: 37:66
    let mut _4: [u8; 4];                 // in scope 0 at ui/consts/const-float-bits-conv.rs:37:38: 37:65
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:37:19: 37:66
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:37:38: 37:65
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:37:38: 37:65
        _4 = core::num::<impl u32>::to_le_bytes(const 1095237632_u32) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:37:38: 37:65
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:37:52: 37:63
                                         // + literal: Const { ty: fn(u32) -> [u8; core::::num::{impl#9}::to_le_bytes::{constant#0}] {core::num::<impl u32>::to_le_bytes}, val: Value(<ZST>) }
    }

    bb1: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:37:19: 37:66
        _3 = core::f32::<impl f32>::from_le_bytes(move _4) -> bb2; // scope 0 at ui/consts/const-float-bits-conv.rs:37:19: 37:66
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:37:19: 37:37
                                         // + literal: Const { ty: fn([u8; 4]) -> f32 {core::f32::<impl f32>::from_le_bytes}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:37:65: 37:66
        _2 = Eq(move _3, const 12.5f32); // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb4, otherwise: bb3]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb3: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _5 = core::panicking::panic(const "assertion failed: f32::from_le_bytes(0x41480000u32.to_le_bytes()) == 12.5"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: f32;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:38:19: 38:45
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:38:19: 38:45
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:38:19: 38:45
        _3 = core::f32::<impl f32>::from_bits(const 1151803392_u32) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:38:19: 38:45
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:38:19: 38:33
                                         // + literal: Const { ty: fn(u32) -> f32 {core::f32::<impl f32>::from_bits}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const 1337f32); // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _4 = core::panicking::panic(const "assertion failed: f32::from_bits(0x44a72000) == 1337.0"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: f32;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:39:19: 39:66
    let mut _4: [u8; 4];                 // in scope 0 at ui/consts/const-float-bits-conv.rs:39:38: 39:65
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:39:19: 39:66
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:39:38: 39:65
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:39:38: 39:65
        _4 = core::num::<impl u32>::to_ne_bytes(const 1151803392_u32) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:39:38: 39:65
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:39:52: 39:63
                                         // + literal: Const { ty: fn(u32) -> [u8; core::::num::{impl#9}::to_ne_bytes::{constant#0}] {core::num::<impl u32>::to_ne_bytes}, val: Value(<ZST>) }
    }

    bb1: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:39:19: 39:66
        _3 = core::f32::<impl f32>::from_ne_bytes(move _4) -> bb2; // scope 0 at ui/consts/const-float-bits-conv.rs:39:19: 39:66
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:39:19: 39:37
                                         // + literal: Const { ty: fn([u8; 4]) -> f32 {core::f32::<impl f32>::from_ne_bytes}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:39:65: 39:66
        _2 = Eq(move _3, const 1337f32); // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb4, otherwise: bb3]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb3: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _5 = core::panicking::panic(const "assertion failed: f32::from_ne_bytes(0x44a72000u32.to_ne_bytes()) == 1337.0"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: f32;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:40:19: 40:45
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:40:19: 40:45
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:40:19: 40:45
        _3 = core::f32::<impl f32>::from_bits(const 3244556288_u32) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:40:19: 40:45
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:40:19: 40:33
                                         // + literal: Const { ty: fn(u32) -> f32 {core::f32::<impl f32>::from_bits}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const -14.25f32); // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _4 = core::panicking::panic(const "assertion failed: f32::from_bits(0xc1640000) == -14.25"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

fn f64() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:43:10: 43:10
    let mut _1: (&u64, &u64);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &u64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: u64;                         // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _4: u64;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:44:19: 44:35
    let mut _5: &u64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _6: u64;                         // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _7: &u64;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _8: &u64;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: u64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: u64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _21: (&u64, &u64);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _22: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _23: u64;                        // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _24: u64;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:45:19: 45:57
    let mut _25: [u8; 8];                // in scope 0 at ui/consts/const-float-bits-conv.rs:45:38: 45:56
    let mut _26: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _27: u64;                        // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _28: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _29: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _32: u64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _33: u64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _35: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _36: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _37: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _38: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _39: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _40: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _42: (&u64, &u64);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _43: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _44: u64;                        // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _45: u64;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:46:19: 46:38
    let mut _46: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _47: u64;                        // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _48: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _49: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _50: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _51: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _52: u64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _53: u64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _55: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _56: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _57: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _58: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _59: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _60: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _62: (&u64, &u64);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _63: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _64: u64;                        // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _65: u64;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:47:19: 47:60
    let mut _66: [u8; 8];                // in scope 0 at ui/consts/const-float-bits-conv.rs:47:38: 47:59
    let mut _67: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _68: u64;                        // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _69: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _70: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _71: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _72: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _73: u64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _74: u64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _76: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _77: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _78: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _79: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _80: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _81: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _82: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _83: (&u64, &u64);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _84: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _85: u64;                        // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _86: u64;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:48:19: 48:38
    let mut _87: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _88: u64;                        // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _89: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _90: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _91: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _92: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _93: u64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _94: u64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _96: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _97: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _98: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _99: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _100: &u64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _101: &u64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _102: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _103: (&u64, &u64);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _104: &u64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _105: u64;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _106: u64;                   // in scope 0 at ui/consts/const-float-bits-conv.rs:49:19: 49:60
    let mut _107: [u8; 8];               // in scope 0 at ui/consts/const-float-bits-conv.rs:49:38: 49:59
    let mut _108: &u64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _109: u64;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _110: &u64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _111: &u64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _112: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _113: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _114: u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _115: u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _117: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _118: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _119: &u64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _120: &u64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _121: &u64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _122: &u64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _123: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _124: (&u64, &u64);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _125: &u64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _126: u64;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _127: u64;                   // in scope 0 at ui/consts/const-float-bits-conv.rs:50:19: 50:40
    let mut _128: &u64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _129: u64;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _130: &u64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _131: &u64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _132: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _133: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _134: u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _135: u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _137: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _138: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _139: &u64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _140: &u64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _141: &u64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _142: &u64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _143: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _144: (&f64, &f64);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _145: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _146: f64;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _147: f64;                   // in scope 0 at ui/consts/const-float-bits-conv.rs:51:19: 51:53
    let mut _148: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _149: f64;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _150: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _151: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _152: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _153: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _154: f64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _155: f64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _157: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _158: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _159: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _160: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _161: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _162: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _163: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _164: (&f64, &f64);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _165: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _166: f64;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _167: f64;                   // in scope 0 at ui/consts/const-float-bits-conv.rs:52:19: 52:74
    let mut _168: [u8; 8];               // in scope 0 at ui/consts/const-float-bits-conv.rs:52:38: 52:73
    let mut _169: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _170: f64;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _171: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _172: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _173: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _174: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _175: f64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _176: f64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _178: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _179: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _180: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _181: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _182: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _183: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _184: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _185: (&f64, &f64);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _186: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _187: f64;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _188: f64;                   // in scope 0 at ui/consts/const-float-bits-conv.rs:53:19: 53:53
    let mut _189: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _190: f64;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _191: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _192: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _193: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _194: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _195: f64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _196: f64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _198: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _199: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _200: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _201: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _202: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _203: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _204: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _205: (&f64, &f64);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _206: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _207: f64;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _208: f64;                   // in scope 0 at ui/consts/const-float-bits-conv.rs:54:19: 54:74
    let mut _209: [u8; 8];               // in scope 0 at ui/consts/const-float-bits-conv.rs:54:38: 54:73
    let mut _210: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _211: f64;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _212: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _213: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _214: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _215: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _216: f64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _217: f64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _219: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _220: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _221: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _222: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _223: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _224: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _225: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _226: (&f64, &f64);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _227: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _228: f64;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _229: f64;                   // in scope 0 at ui/consts/const-float-bits-conv.rs:55:19: 55:53
    let mut _230: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _231: f64;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _232: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _233: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _234: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _235: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _236: f64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _237: f64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _239: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _240: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _241: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _242: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _243: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _244: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _245: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _246: (&f64, &f64);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _247: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _248: f64;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _249: f64;                   // in scope 0 at ui/consts/const-float-bits-conv.rs:56:19: 56:74
    let mut _250: [u8; 8];               // in scope 0 at ui/consts/const-float-bits-conv.rs:56:38: 56:73
    let mut _251: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _252: f64;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _253: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _254: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _255: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _256: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _257: f64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _258: f64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _260: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _261: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _262: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _263: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _264: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _265: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _266: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _267: (&f64, &f64);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _268: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _269: f64;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
    let mut _270: f64;                   // in scope 0 at ui/consts/const-float-bits-conv.rs:57:19: 57:53
    let mut _271: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _272: f64;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
    let _273: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _274: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _275: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _276: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _277: f64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _278: f64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _280: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _281: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _282: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _283: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _284: &f64;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _285: &f64;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _286: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug left_val => _7;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _8;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _13: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _13;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _28;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _29;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _34: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _34;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _48;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _49;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _54: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _54;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug left_val => _69;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _70;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _75: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 8 {
            debug kind => _75;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 9 {
        debug left_val => _89;           // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _90;          // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _95: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 10 {
            debug kind => _95;           // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 11 {
        debug left_val => _110;          // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _111;         // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _116: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 12 {
            debug kind => _116;          // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 13 {
        debug left_val => _130;          // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _131;         // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _136: core::panicking::AssertKind; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 14 {
            debug kind => _136;          // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 15 {
        debug left_val => _150;          // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _151;         // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _156: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 16 {
            debug kind => _156;          // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 17 {
        debug left_val => _171;          // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _172;         // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _177: core::panicking::AssertKind; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 18 {
            debug kind => _177;          // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 19 {
        debug left_val => _191;          // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _192;         // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _197: core::panicking::AssertKind; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 20 {
            debug kind => _197;          // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 21 {
        debug left_val => _212;          // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _213;         // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _218: core::panicking::AssertKind; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 22 {
            debug kind => _218;          // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 23 {
        debug left_val => _232;          // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _233;         // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _238: core::panicking::AssertKind; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 24 {
            debug kind => _238;          // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 25 {
        debug left_val => _253;          // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _254;         // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _259: core::panicking::AssertKind; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 26 {
            debug kind => _259;          // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 27 {
        debug left_val => _273;          // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _274;         // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _279: core::panicking::AssertKind; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 28 {
            debug kind => _279;          // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _4 = core::f64::<impl f64>::to_bits(const 1f64) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:44:19: 44:35
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:44:26: 44:33
                                         // + literal: Const { ty: fn(f64) -> u64 {core::f64::<impl f64>::to_bits}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = nop::<u64>(move _4) -> bb2; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(u64) -> u64 {nop::<u64>}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _6 = nop::<u64>(const 4607182418800017408_u64) -> bb3; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(u64) -> u64 {nop::<u64>}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = &_6;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_1.0: &u64);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_1.1: &u64);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = (*_8);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb5, otherwise: bb4]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _13 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<u64, u64>(move _15, move _16, move _18, move _20); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u64, &'b u64, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u64, u64>}, val: Value(<ZST>) }
    }

    bb5: {
        _25 = core::f64::<impl f64>::to_be_bytes(const 1f64) -> bb6; // scope 0 at ui/consts/const-float-bits-conv.rs:45:38: 45:56
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:45:43: 45:54
                                         // + literal: Const { ty: fn(f64) -> [u8; 8] {core::f64::<impl f64>::to_be_bytes}, val: Value(<ZST>) }
    }

    bb6: {
        _24 = core::num::<impl u64>::from_be_bytes(move _25) -> bb7; // scope 0 at ui/consts/const-float-bits-conv.rs:45:19: 45:57
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:45:19: 45:37
                                         // + literal: Const { ty: fn([u8; core::::num::{impl#10}::from_be_bytes::{constant#0}]) -> u64 {core::num::<impl u64>::from_be_bytes}, val: Value(<ZST>) }
    }

    bb7: {
        _23 = nop::<u64>(move _24) -> bb8; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(u64) -> u64 {nop::<u64>}, val: Value(<ZST>) }
    }

    bb8: {
        _22 = &_23;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _27 = nop::<u64>(const 4607182418800017408_u64) -> bb9; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(u64) -> u64 {nop::<u64>}, val: Value(<ZST>) }
    }

    bb9: {
        _26 = &_27;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _21 = (move _22, move _26);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _28 = (_21.0: &u64);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _29 = (_21.1: &u64);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _32 = (*_28);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _33 = (*_29);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _31 = Eq(move _32, move _33);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _30 = Not(move _31);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _30) -> [0: bb11, otherwise: bb10]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _34 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _36 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _38 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _38;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _40 = _29;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = _40;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _41 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _35 = core::panicking::assert_failed::<u64, u64>(move _36, move _37, move _39, move _41); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u64, &'b u64, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u64, u64>}, val: Value(<ZST>) }
    }

    bb11: {
        _45 = core::f64::<impl f64>::to_bits(const 12.5f64) -> bb12; // scope 0 at ui/consts/const-float-bits-conv.rs:46:19: 46:38
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:46:29: 46:36
                                         // + literal: Const { ty: fn(f64) -> u64 {core::f64::<impl f64>::to_bits}, val: Value(<ZST>) }
    }

    bb12: {
        _44 = nop::<u64>(move _45) -> bb13; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(u64) -> u64 {nop::<u64>}, val: Value(<ZST>) }
    }

    bb13: {
        _43 = &_44;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _47 = nop::<u64>(const 4623226492472524800_u64) -> bb14; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(u64) -> u64 {nop::<u64>}, val: Value(<ZST>) }
    }

    bb14: {
        _46 = &_47;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _42 = (move _43, move _46);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _48 = (_42.0: &u64);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _49 = (_42.1: &u64);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _52 = (*_48);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _53 = (*_49);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _51 = Eq(move _52, move _53);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _50 = Not(move _51);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _50) -> [0: bb16, otherwise: bb15]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _54 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _56 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = _48;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _58;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _60 = _49;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _59 = _60;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _55 = core::panicking::assert_failed::<u64, u64>(move _56, move _57, move _59, move _61); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u64, &'b u64, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u64, u64>}, val: Value(<ZST>) }
    }

    bb16: {
        _66 = core::f64::<impl f64>::to_le_bytes(const 12.5f64) -> bb17; // scope 0 at ui/consts/const-float-bits-conv.rs:47:38: 47:59
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:47:46: 47:57
                                         // + literal: Const { ty: fn(f64) -> [u8; 8] {core::f64::<impl f64>::to_le_bytes}, val: Value(<ZST>) }
    }

    bb17: {
        _65 = core::num::<impl u64>::from_le_bytes(move _66) -> bb18; // scope 0 at ui/consts/const-float-bits-conv.rs:47:19: 47:60
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:47:19: 47:37
                                         // + literal: Const { ty: fn([u8; core::::num::{impl#10}::from_le_bytes::{constant#0}]) -> u64 {core::num::<impl u64>::from_le_bytes}, val: Value(<ZST>) }
    }

    bb18: {
        _64 = nop::<u64>(move _65) -> bb19; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(u64) -> u64 {nop::<u64>}, val: Value(<ZST>) }
    }

    bb19: {
        _63 = &_64;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _68 = nop::<u64>(const 4623226492472524800_u64) -> bb20; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(u64) -> u64 {nop::<u64>}, val: Value(<ZST>) }
    }

    bb20: {
        _67 = &_68;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _62 = (move _63, move _67);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _69 = (_62.0: &u64);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _70 = (_62.1: &u64);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _73 = (*_69);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _74 = (*_70);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _72 = Eq(move _73, move _74);    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _71 = Not(move _72);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _71) -> [0: bb22, otherwise: bb21]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb21: {
        _75 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _77 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _79 = _69;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _78 = _79;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _81 = _70;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _80 = _81;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _82 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _76 = core::panicking::assert_failed::<u64, u64>(move _77, move _78, move _80, move _82); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u64, &'b u64, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u64, u64>}, val: Value(<ZST>) }
    }

    bb22: {
        _86 = core::f64::<impl f64>::to_bits(const 1337f64) -> bb23; // scope 0 at ui/consts/const-float-bits-conv.rs:48:19: 48:38
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:48:29: 48:36
                                         // + literal: Const { ty: fn(f64) -> u64 {core::f64::<impl f64>::to_bits}, val: Value(<ZST>) }
    }

    bb23: {
        _85 = nop::<u64>(move _86) -> bb24; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(u64) -> u64 {nop::<u64>}, val: Value(<ZST>) }
    }

    bb24: {
        _84 = &_85;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _88 = nop::<u64>(const 4653595003631697920_u64) -> bb25; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(u64) -> u64 {nop::<u64>}, val: Value(<ZST>) }
    }

    bb25: {
        _87 = &_88;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _83 = (move _84, move _87);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _89 = (_83.0: &u64);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _90 = (_83.1: &u64);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _93 = (*_89);                    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _94 = (*_90);                    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _92 = Eq(move _93, move _94);    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _91 = Not(move _92);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _91) -> [0: bb27, otherwise: bb26]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb26: {
        _95 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _97 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _99 = _89;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _98 = _99;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _101 = _90;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _100 = _101;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _102 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _96 = core::panicking::assert_failed::<u64, u64>(move _97, move _98, move _100, move _102); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u64, &'b u64, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u64, u64>}, val: Value(<ZST>) }
    }

    bb27: {
        _107 = core::f64::<impl f64>::to_ne_bytes(const 1337f64) -> bb28; // scope 0 at ui/consts/const-float-bits-conv.rs:49:38: 49:59
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:49:46: 49:57
                                         // + literal: Const { ty: fn(f64) -> [u8; 8] {core::f64::<impl f64>::to_ne_bytes}, val: Value(<ZST>) }
    }

    bb28: {
        _106 = core::num::<impl u64>::from_ne_bytes(move _107) -> bb29; // scope 0 at ui/consts/const-float-bits-conv.rs:49:19: 49:60
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:49:19: 49:37
                                         // + literal: Const { ty: fn([u8; core::::num::{impl#10}::from_ne_bytes::{constant#0}]) -> u64 {core::num::<impl u64>::from_ne_bytes}, val: Value(<ZST>) }
    }

    bb29: {
        _105 = nop::<u64>(move _106) -> bb30; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(u64) -> u64 {nop::<u64>}, val: Value(<ZST>) }
    }

    bb30: {
        _104 = &_105;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _109 = nop::<u64>(const 4653595003631697920_u64) -> bb31; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(u64) -> u64 {nop::<u64>}, val: Value(<ZST>) }
    }

    bb31: {
        _108 = &_109;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _103 = (move _104, move _108);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _110 = (_103.0: &u64);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _111 = (_103.1: &u64);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _114 = (*_110);                  // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _115 = (*_111);                  // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _113 = Eq(move _114, move _115); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _112 = Not(move _113);           // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _112) -> [0: bb33, otherwise: bb32]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb32: {
        _116 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _118 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _120 = _110;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _119 = _120;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _122 = _111;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _121 = _122;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _123 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _117 = core::panicking::assert_failed::<u64, u64>(move _118, move _119, move _121, move _123); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u64, &'b u64, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u64, u64>}, val: Value(<ZST>) }
    }

    bb33: {
        _127 = core::f64::<impl f64>::to_bits(const -14.25f64) -> bb34; // scope 0 at ui/consts/const-float-bits-conv.rs:50:19: 50:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:50:31: 50:38
                                         // + literal: Const { ty: fn(f64) -> u64 {core::f64::<impl f64>::to_bits}, val: Value(<ZST>) }
    }

    bb34: {
        _126 = nop::<u64>(move _127) -> bb35; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(u64) -> u64 {nop::<u64>}, val: Value(<ZST>) }
    }

    bb35: {
        _125 = &_126;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _129 = nop::<u64>(const 13847583691745787904_u64) -> bb36; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(u64) -> u64 {nop::<u64>}, val: Value(<ZST>) }
    }

    bb36: {
        _128 = &_129;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _124 = (move _125, move _128);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _130 = (_124.0: &u64);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _131 = (_124.1: &u64);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _134 = (*_130);                  // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _135 = (*_131);                  // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _133 = Eq(move _134, move _135); // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _132 = Not(move _133);           // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _132) -> [0: bb38, otherwise: bb37]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb37: {
        _136 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _138 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _140 = _130;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _139 = _140;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _142 = _131;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _141 = _142;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _143 = Option::<Arguments<'_>>::None; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _137 = core::panicking::assert_failed::<u64, u64>(move _138, move _139, move _141, move _143); // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u64, &'b u64, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u64, u64>}, val: Value(<ZST>) }
    }

    bb38: {
        _147 = core::f64::<impl f64>::from_bits(const 4607182418800017408_u64) -> bb39; // scope 0 at ui/consts/const-float-bits-conv.rs:51:19: 51:53
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:51:19: 51:33
                                         // + literal: Const { ty: fn(u64) -> f64 {core::f64::<impl f64>::from_bits}, val: Value(<ZST>) }
    }

    bb39: {
        _146 = nop::<f64>(move _147) -> bb40; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(f64) -> f64 {nop::<f64>}, val: Value(<ZST>) }
    }

    bb40: {
        _145 = &_146;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _149 = nop::<f64>(const 1f64) -> bb41; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(f64) -> f64 {nop::<f64>}, val: Value(<ZST>) }
    }

    bb41: {
        _148 = &_149;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _144 = (move _145, move _148);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _150 = (_144.0: &f64);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _151 = (_144.1: &f64);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _154 = (*_150);                  // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _155 = (*_151);                  // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _153 = Eq(move _154, move _155); // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _152 = Not(move _153);           // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _152) -> [0: bb43, otherwise: bb42]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb42: {
        _156 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _158 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _160 = _150;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _159 = _160;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _162 = _151;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _161 = _162;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _163 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _157 = core::panicking::assert_failed::<f64, f64>(move _158, move _159, move _161, move _163); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a f64, &'b f64, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<f64, f64>}, val: Value(<ZST>) }
    }

    bb43: {
        _168 = core::num::<impl u64>::to_be_bytes(const 4607182418800017408_u64) -> bb44; // scope 0 at ui/consts/const-float-bits-conv.rs:52:38: 52:73
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:52:60: 52:71
                                         // + literal: Const { ty: fn(u64) -> [u8; core::::num::{impl#10}::to_be_bytes::{constant#0}] {core::num::<impl u64>::to_be_bytes}, val: Value(<ZST>) }
    }

    bb44: {
        _167 = core::f64::<impl f64>::from_be_bytes(move _168) -> bb45; // scope 0 at ui/consts/const-float-bits-conv.rs:52:19: 52:74
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:52:19: 52:37
                                         // + literal: Const { ty: fn([u8; 8]) -> f64 {core::f64::<impl f64>::from_be_bytes}, val: Value(<ZST>) }
    }

    bb45: {
        _166 = nop::<f64>(move _167) -> bb46; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(f64) -> f64 {nop::<f64>}, val: Value(<ZST>) }
    }

    bb46: {
        _165 = &_166;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _170 = nop::<f64>(const 1f64) -> bb47; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(f64) -> f64 {nop::<f64>}, val: Value(<ZST>) }
    }

    bb47: {
        _169 = &_170;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _164 = (move _165, move _169);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _171 = (_164.0: &f64);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _172 = (_164.1: &f64);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _175 = (*_171);                  // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _176 = (*_172);                  // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _174 = Eq(move _175, move _176); // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _173 = Not(move _174);           // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _173) -> [0: bb49, otherwise: bb48]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb48: {
        _177 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _179 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _181 = _171;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _180 = _181;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _183 = _172;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _182 = _183;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _184 = Option::<Arguments<'_>>::None; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _178 = core::panicking::assert_failed::<f64, f64>(move _179, move _180, move _182, move _184); // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a f64, &'b f64, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<f64, f64>}, val: Value(<ZST>) }
    }

    bb49: {
        _188 = core::f64::<impl f64>::from_bits(const 4623226492472524800_u64) -> bb50; // scope 0 at ui/consts/const-float-bits-conv.rs:53:19: 53:53
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:53:19: 53:33
                                         // + literal: Const { ty: fn(u64) -> f64 {core::f64::<impl f64>::from_bits}, val: Value(<ZST>) }
    }

    bb50: {
        _187 = nop::<f64>(move _188) -> bb51; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(f64) -> f64 {nop::<f64>}, val: Value(<ZST>) }
    }

    bb51: {
        _186 = &_187;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _190 = nop::<f64>(const 12.5f64) -> bb52; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(f64) -> f64 {nop::<f64>}, val: Value(<ZST>) }
    }

    bb52: {
        _189 = &_190;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _185 = (move _186, move _189);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _191 = (_185.0: &f64);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _192 = (_185.1: &f64);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _195 = (*_191);                  // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _196 = (*_192);                  // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _194 = Eq(move _195, move _196); // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _193 = Not(move _194);           // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _193) -> [0: bb54, otherwise: bb53]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb53: {
        _197 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _199 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _201 = _191;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _200 = _201;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _203 = _192;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _202 = _203;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _204 = Option::<Arguments<'_>>::None; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _198 = core::panicking::assert_failed::<f64, f64>(move _199, move _200, move _202, move _204); // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a f64, &'b f64, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<f64, f64>}, val: Value(<ZST>) }
    }

    bb54: {
        _209 = core::num::<impl u64>::to_le_bytes(const 4623226492472524800_u64) -> bb55; // scope 0 at ui/consts/const-float-bits-conv.rs:54:38: 54:73
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:54:60: 54:71
                                         // + literal: Const { ty: fn(u64) -> [u8; core::::num::{impl#10}::to_le_bytes::{constant#0}] {core::num::<impl u64>::to_le_bytes}, val: Value(<ZST>) }
    }

    bb55: {
        _208 = core::f64::<impl f64>::from_le_bytes(move _209) -> bb56; // scope 0 at ui/consts/const-float-bits-conv.rs:54:19: 54:74
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:54:19: 54:37
                                         // + literal: Const { ty: fn([u8; 8]) -> f64 {core::f64::<impl f64>::from_le_bytes}, val: Value(<ZST>) }
    }

    bb56: {
        _207 = nop::<f64>(move _208) -> bb57; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(f64) -> f64 {nop::<f64>}, val: Value(<ZST>) }
    }

    bb57: {
        _206 = &_207;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _211 = nop::<f64>(const 12.5f64) -> bb58; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(f64) -> f64 {nop::<f64>}, val: Value(<ZST>) }
    }

    bb58: {
        _210 = &_211;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _205 = (move _206, move _210);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _212 = (_205.0: &f64);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _213 = (_205.1: &f64);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _216 = (*_212);                  // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _217 = (*_213);                  // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _215 = Eq(move _216, move _217); // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _214 = Not(move _215);           // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _214) -> [0: bb60, otherwise: bb59]; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb59: {
        _218 = const core::panicking::AssertKind::Eq; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _220 = const core::panicking::AssertKind::Eq; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _222 = _212;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _221 = _222;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _224 = _213;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _223 = _224;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _225 = Option::<Arguments<'_>>::None; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _219 = core::panicking::assert_failed::<f64, f64>(move _220, move _221, move _223, move _225); // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a f64, &'b f64, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<f64, f64>}, val: Value(<ZST>) }
    }

    bb60: {
        _229 = core::f64::<impl f64>::from_bits(const 4653595003631697920_u64) -> bb61; // scope 0 at ui/consts/const-float-bits-conv.rs:55:19: 55:53
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:55:19: 55:33
                                         // + literal: Const { ty: fn(u64) -> f64 {core::f64::<impl f64>::from_bits}, val: Value(<ZST>) }
    }

    bb61: {
        _228 = nop::<f64>(move _229) -> bb62; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(f64) -> f64 {nop::<f64>}, val: Value(<ZST>) }
    }

    bb62: {
        _227 = &_228;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _231 = nop::<f64>(const 1337f64) -> bb63; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(f64) -> f64 {nop::<f64>}, val: Value(<ZST>) }
    }

    bb63: {
        _230 = &_231;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _226 = (move _227, move _230);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _232 = (_226.0: &f64);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _233 = (_226.1: &f64);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _236 = (*_232);                  // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _237 = (*_233);                  // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _235 = Eq(move _236, move _237); // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _234 = Not(move _235);           // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _234) -> [0: bb65, otherwise: bb64]; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb64: {
        _238 = const core::panicking::AssertKind::Eq; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _240 = const core::panicking::AssertKind::Eq; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _242 = _232;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _241 = _242;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _244 = _233;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _243 = _244;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _245 = Option::<Arguments<'_>>::None; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _239 = core::panicking::assert_failed::<f64, f64>(move _240, move _241, move _243, move _245); // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a f64, &'b f64, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<f64, f64>}, val: Value(<ZST>) }
    }

    bb65: {
        _250 = core::num::<impl u64>::to_ne_bytes(const 4653595003631697920_u64) -> bb66; // scope 0 at ui/consts/const-float-bits-conv.rs:56:38: 56:73
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:56:60: 56:71
                                         // + literal: Const { ty: fn(u64) -> [u8; core::::num::{impl#10}::to_ne_bytes::{constant#0}] {core::num::<impl u64>::to_ne_bytes}, val: Value(<ZST>) }
    }

    bb66: {
        _249 = core::f64::<impl f64>::from_ne_bytes(move _250) -> bb67; // scope 0 at ui/consts/const-float-bits-conv.rs:56:19: 56:74
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:56:19: 56:37
                                         // + literal: Const { ty: fn([u8; 8]) -> f64 {core::f64::<impl f64>::from_ne_bytes}, val: Value(<ZST>) }
    }

    bb67: {
        _248 = nop::<f64>(move _249) -> bb68; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(f64) -> f64 {nop::<f64>}, val: Value(<ZST>) }
    }

    bb68: {
        _247 = &_248;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _252 = nop::<f64>(const 1337f64) -> bb69; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(f64) -> f64 {nop::<f64>}, val: Value(<ZST>) }
    }

    bb69: {
        _251 = &_252;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _246 = (move _247, move _251);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _253 = (_246.0: &f64);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _254 = (_246.1: &f64);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _257 = (*_253);                  // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _258 = (*_254);                  // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _256 = Eq(move _257, move _258); // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _255 = Not(move _256);           // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _255) -> [0: bb71, otherwise: bb70]; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb70: {
        _259 = const core::panicking::AssertKind::Eq; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _261 = const core::panicking::AssertKind::Eq; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _263 = _253;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _262 = _263;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _265 = _254;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _264 = _265;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _266 = Option::<Arguments<'_>>::None; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _260 = core::panicking::assert_failed::<f64, f64>(move _261, move _262, move _264, move _266); // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a f64, &'b f64, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<f64, f64>}, val: Value(<ZST>) }
    }

    bb71: {
        _270 = core::f64::<impl f64>::from_bits(const 13847583691745787904_u64) -> bb72; // scope 0 at ui/consts/const-float-bits-conv.rs:57:19: 57:53
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:57:19: 57:33
                                         // + literal: Const { ty: fn(u64) -> f64 {core::f64::<impl f64>::from_bits}, val: Value(<ZST>) }
    }

    bb72: {
        _269 = nop::<f64>(move _270) -> bb73; // scope 0 at ui/consts/const-float-bits-conv.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:24: 21:27
                                         // + literal: Const { ty: fn(f64) -> f64 {nop::<f64>}, val: Value(<ZST>) }
    }

    bb73: {
        _268 = &_269;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _272 = nop::<f64>(const -14.25f64) -> bb74; // scope 0 at ui/consts/const-float-bits-conv.rs:21:33: 21:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:21:33: 21:36
                                         // + literal: Const { ty: fn(f64) -> f64 {nop::<f64>}, val: Value(<ZST>) }
    }

    bb74: {
        _271 = &_272;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _267 = (move _268, move _271);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _273 = (_267.0: &f64);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _274 = (_267.1: &f64);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _277 = (*_273);                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _278 = (*_274);                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _276 = Eq(move _277, move _278); // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _275 = Not(move _276);           // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _275) -> [0: bb76, otherwise: bb75]; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb75: {
        _279 = const core::panicking::AssertKind::Eq; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _281 = const core::panicking::AssertKind::Eq; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _283 = _273;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _282 = _283;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _285 = _274;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _284 = _285;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _286 = Option::<Arguments<'_>>::None; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _280 = core::panicking::assert_failed::<f64, f64>(move _281, move _282, move _284, move _286); // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a f64, &'b f64, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<f64, f64>}, val: Value(<ZST>) }
    }

    bb76: {
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:58:2: 58:2
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: u64;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:44:19: 44:35
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:44:19: 44:35
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:44:19: 44:35
        _3 = core::f64::<impl f64>::to_bits(const 1f64) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:44:19: 44:35
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:44:26: 44:33
                                         // + literal: Const { ty: fn(f64) -> u64 {core::f64::<impl f64>::to_bits}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const 4607182418800017408_u64); // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _4 = core::panicking::panic(const "assertion failed: (1f64).to_bits() == 0x3ff0000000000000"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: u64;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:45:19: 45:57
    let mut _4: [u8; 8];                 // in scope 0 at ui/consts/const-float-bits-conv.rs:45:38: 45:56
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:45:19: 45:57
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:45:38: 45:56
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:45:38: 45:56
        _4 = core::f64::<impl f64>::to_be_bytes(const 1f64) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:45:38: 45:56
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:45:43: 45:54
                                         // + literal: Const { ty: fn(f64) -> [u8; 8] {core::f64::<impl f64>::to_be_bytes}, val: Value(<ZST>) }
    }

    bb1: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:45:19: 45:57
        _3 = core::num::<impl u64>::from_be_bytes(move _4) -> bb2; // scope 0 at ui/consts/const-float-bits-conv.rs:45:19: 45:57
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:45:19: 45:37
                                         // + literal: Const { ty: fn([u8; core::::num::{impl#10}::from_be_bytes::{constant#0}]) -> u64 {core::num::<impl u64>::from_be_bytes}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:45:56: 45:57
        _2 = Eq(move _3, const 4607182418800017408_u64); // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb4, otherwise: bb3]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb3: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _5 = core::panicking::panic(const "assertion failed: u64::from_be_bytes(1f64.to_be_bytes()) == 0x3ff0000000000000"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: u64;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:46:19: 46:38
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:46:19: 46:38
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:46:19: 46:38
        _3 = core::f64::<impl f64>::to_bits(const 12.5f64) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:46:19: 46:38
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:46:29: 46:36
                                         // + literal: Const { ty: fn(f64) -> u64 {core::f64::<impl f64>::to_bits}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const 4623226492472524800_u64); // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _4 = core::panicking::panic(const "assertion failed: (12.5f64).to_bits() == 0x4029000000000000"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: u64;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:47:19: 47:60
    let mut _4: [u8; 8];                 // in scope 0 at ui/consts/const-float-bits-conv.rs:47:38: 47:59
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:47:19: 47:60
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:47:38: 47:59
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:47:38: 47:59
        _4 = core::f64::<impl f64>::to_le_bytes(const 12.5f64) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:47:38: 47:59
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:47:46: 47:57
                                         // + literal: Const { ty: fn(f64) -> [u8; 8] {core::f64::<impl f64>::to_le_bytes}, val: Value(<ZST>) }
    }

    bb1: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:47:19: 47:60
        _3 = core::num::<impl u64>::from_le_bytes(move _4) -> bb2; // scope 0 at ui/consts/const-float-bits-conv.rs:47:19: 47:60
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:47:19: 47:37
                                         // + literal: Const { ty: fn([u8; core::::num::{impl#10}::from_le_bytes::{constant#0}]) -> u64 {core::num::<impl u64>::from_le_bytes}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:47:59: 47:60
        _2 = Eq(move _3, const 4623226492472524800_u64); // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb4, otherwise: bb3]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb3: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _5 = core::panicking::panic(const "assertion failed: u64::from_le_bytes(12.5f64.to_le_bytes()) == 0x4029000000000000"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: u64;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:48:19: 48:38
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:48:19: 48:38
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:48:19: 48:38
        _3 = core::f64::<impl f64>::to_bits(const 1337f64) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:48:19: 48:38
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:48:29: 48:36
                                         // + literal: Const { ty: fn(f64) -> u64 {core::f64::<impl f64>::to_bits}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const 4653595003631697920_u64); // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _4 = core::panicking::panic(const "assertion failed: (1337f64).to_bits() == 0x4094e40000000000"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: u64;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:49:19: 49:60
    let mut _4: [u8; 8];                 // in scope 0 at ui/consts/const-float-bits-conv.rs:49:38: 49:59
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:49:19: 49:60
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:49:38: 49:59
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:49:38: 49:59
        _4 = core::f64::<impl f64>::to_ne_bytes(const 1337f64) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:49:38: 49:59
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:49:46: 49:57
                                         // + literal: Const { ty: fn(f64) -> [u8; 8] {core::f64::<impl f64>::to_ne_bytes}, val: Value(<ZST>) }
    }

    bb1: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:49:19: 49:60
        _3 = core::num::<impl u64>::from_ne_bytes(move _4) -> bb2; // scope 0 at ui/consts/const-float-bits-conv.rs:49:19: 49:60
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:49:19: 49:37
                                         // + literal: Const { ty: fn([u8; core::::num::{impl#10}::from_ne_bytes::{constant#0}]) -> u64 {core::num::<impl u64>::from_ne_bytes}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:49:59: 49:60
        _2 = Eq(move _3, const 4653595003631697920_u64); // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb4, otherwise: bb3]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb3: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _5 = core::panicking::panic(const "assertion failed: u64::from_ne_bytes(1337f64.to_ne_bytes()) == 0x4094e40000000000"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: u64;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:50:19: 50:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:50:19: 50:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:50:19: 50:40
        _3 = core::f64::<impl f64>::to_bits(const -14.25f64) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:50:19: 50:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:50:31: 50:38
                                         // + literal: Const { ty: fn(f64) -> u64 {core::f64::<impl f64>::to_bits}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const 13847583691745787904_u64); // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _4 = core::panicking::panic(const "assertion failed: (-14.25f64).to_bits() == 0xc02c800000000000"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: f64;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:51:19: 51:53
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:51:19: 51:53
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:51:19: 51:53
        _3 = core::f64::<impl f64>::from_bits(const 4607182418800017408_u64) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:51:19: 51:53
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:51:19: 51:33
                                         // + literal: Const { ty: fn(u64) -> f64 {core::f64::<impl f64>::from_bits}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const 1f64);    // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _4 = core::panicking::panic(const "assertion failed: f64::from_bits(0x3ff0000000000000) == 1.0"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: f64;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:52:19: 52:74
    let mut _4: [u8; 8];                 // in scope 0 at ui/consts/const-float-bits-conv.rs:52:38: 52:73
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:52:19: 52:74
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:52:38: 52:73
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:52:38: 52:73
        _4 = core::num::<impl u64>::to_be_bytes(const 4607182418800017408_u64) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:52:38: 52:73
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:52:60: 52:71
                                         // + literal: Const { ty: fn(u64) -> [u8; core::::num::{impl#10}::to_be_bytes::{constant#0}] {core::num::<impl u64>::to_be_bytes}, val: Value(<ZST>) }
    }

    bb1: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:52:19: 52:74
        _3 = core::f64::<impl f64>::from_be_bytes(move _4) -> bb2; // scope 0 at ui/consts/const-float-bits-conv.rs:52:19: 52:74
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:52:19: 52:37
                                         // + literal: Const { ty: fn([u8; 8]) -> f64 {core::f64::<impl f64>::from_be_bytes}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:52:73: 52:74
        _2 = Eq(move _3, const 1f64);    // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb4, otherwise: bb3]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb3: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _5 = core::panicking::panic(const "assertion failed: f64::from_be_bytes(0x3ff0000000000000u64.to_be_bytes()) == 1.0"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: f64;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:53:19: 53:53
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:53:19: 53:53
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:53:19: 53:53
        _3 = core::f64::<impl f64>::from_bits(const 4623226492472524800_u64) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:53:19: 53:53
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:53:19: 53:33
                                         // + literal: Const { ty: fn(u64) -> f64 {core::f64::<impl f64>::from_bits}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const 12.5f64); // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _4 = core::panicking::panic(const "assertion failed: f64::from_bits(0x4029000000000000) == 12.5"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: f64;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:54:19: 54:74
    let mut _4: [u8; 8];                 // in scope 0 at ui/consts/const-float-bits-conv.rs:54:38: 54:73
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:54:19: 54:74
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:54:38: 54:73
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:54:38: 54:73
        _4 = core::num::<impl u64>::to_le_bytes(const 4623226492472524800_u64) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:54:38: 54:73
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:54:60: 54:71
                                         // + literal: Const { ty: fn(u64) -> [u8; core::::num::{impl#10}::to_le_bytes::{constant#0}] {core::num::<impl u64>::to_le_bytes}, val: Value(<ZST>) }
    }

    bb1: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:54:19: 54:74
        _3 = core::f64::<impl f64>::from_le_bytes(move _4) -> bb2; // scope 0 at ui/consts/const-float-bits-conv.rs:54:19: 54:74
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:54:19: 54:37
                                         // + literal: Const { ty: fn([u8; 8]) -> f64 {core::f64::<impl f64>::from_le_bytes}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:54:73: 54:74
        _2 = Eq(move _3, const 12.5f64); // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb4, otherwise: bb3]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb3: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _5 = core::panicking::panic(const "assertion failed: f64::from_le_bytes(0x4029000000000000u64.to_le_bytes()) == 12.5"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: f64;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:55:19: 55:53
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:55:19: 55:53
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:55:19: 55:53
        _3 = core::f64::<impl f64>::from_bits(const 4653595003631697920_u64) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:55:19: 55:53
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:55:19: 55:33
                                         // + literal: Const { ty: fn(u64) -> f64 {core::f64::<impl f64>::from_bits}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const 1337f64); // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _4 = core::panicking::panic(const "assertion failed: f64::from_bits(0x4094e40000000000) == 1337.0"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: f64;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:56:19: 56:74
    let mut _4: [u8; 8];                 // in scope 0 at ui/consts/const-float-bits-conv.rs:56:38: 56:73
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:56:19: 56:74
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:56:38: 56:73
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:56:38: 56:73
        _4 = core::num::<impl u64>::to_ne_bytes(const 4653595003631697920_u64) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:56:38: 56:73
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:56:60: 56:71
                                         // + literal: Const { ty: fn(u64) -> [u8; core::::num::{impl#10}::to_ne_bytes::{constant#0}] {core::num::<impl u64>::to_ne_bytes}, val: Value(<ZST>) }
    }

    bb1: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:56:19: 56:74
        _3 = core::f64::<impl f64>::from_ne_bytes(move _4) -> bb2; // scope 0 at ui/consts/const-float-bits-conv.rs:56:19: 56:74
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:56:19: 56:37
                                         // + literal: Const { ty: fn([u8; 8]) -> f64 {core::f64::<impl f64>::from_ne_bytes}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:56:73: 56:74
        _2 = Eq(move _3, const 1337f64); // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb4, otherwise: bb3]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb3: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _5 = core::panicking::panic(const "assertion failed: f64::from_ne_bytes(0x4094e40000000000u64.to_ne_bytes()) == 1337.0"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:20:22: 20:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
    let mut _3: f64;                     // in scope 0 at ui/consts/const-float-bits-conv.rs:57:19: 57:53
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:57:19: 57:53
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:57:19: 57:53
        _3 = core::f64::<impl f64>::from_bits(const 13847583691745787904_u64) -> bb1; // scope 0 at ui/consts/const-float-bits-conv.rs:57:19: 57:53
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:57:19: 57:33
                                         // + literal: Const { ty: fn(u64) -> f64 {core::f64::<impl f64>::from_bits}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const -14.25f64); // scope 0 at ui/consts/const-float-bits-conv.rs:20:35: 20:37
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:36: 20:37
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
        _4 = core::panicking::panic(const "assertion failed: f64::from_bits(0xc02c800000000000) == -14.25"); // scope 0 at ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:20:27: 20:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-bits-conv.rs:20:44: 20:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-bits-conv.rs:20:43: 20:44
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:20:13: 20:45
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-bits-conv.rs:60:11: 60:11
    let _1: ();                          // in scope 0 at ui/consts/const-float-bits-conv.rs:61:5: 61:10
    let _2: ();                          // in scope 0 at ui/consts/const-float-bits-conv.rs:62:5: 62:10

    bb0: {
        _1 = f32() -> bb1;               // scope 0 at ui/consts/const-float-bits-conv.rs:61:5: 61:10
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:61:5: 61:8
                                         // + literal: Const { ty: fn() {f32}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = f64() -> bb2;               // scope 0 at ui/consts/const-float-bits-conv.rs:62:5: 62:10
                                         // mir::Constant
                                         // + span: ui/consts/const-float-bits-conv.rs:62:5: 62:8
                                         // + literal: Const { ty: fn() {f64}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/consts/const-float-bits-conv.rs:63:2: 63:2
    }
}
