// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> *const i8 {
    let mut _0: *const i8;               // return place in scope 0 at ui/consts/issue-33537.rs:3:19: 3:28
    let mut _1: *const [u8; 3];          // in scope 0 at ui/consts/issue-33537.rs:4:5: 4:23
    let mut _2: *const [u8; 3];          // in scope 0 at ui/consts/issue-33537.rs:4:5: 4:23
    let _3: &[u8; 3];                    // in scope 0 at ui/consts/issue-33537.rs:4:5: 4:11

    bb0: {
        _3 = const b"foo";               // scope 0 at ui/consts/issue-33537.rs:4:5: 4:11
                                         // mir::Constant
                                         // + span: ui/consts/issue-33537.rs:4:5: 4:11
                                         // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc1)) }
        _2 = &raw const (*_3);           // scope 0 at ui/consts/issue-33537.rs:4:5: 4:11
        _1 = _2;                         // scope 0 at ui/consts/issue-33537.rs:4:5: 4:23
        _0 = move _1 as *const i8 (PtrToPtr); // scope 0 at ui/consts/issue-33537.rs:4:5: 4:36
        return;                          // scope 0 at ui/consts/issue-33537.rs:5:2: 5:2
    }
}

alloc1 (size: 3, align: 1) {
    66 6f 6f                                        │ foo
}

// MIR FOR CTFE
fn foo() -> *const i8 {
    let mut _0: *const i8;               // return place in scope 0 at ui/consts/issue-33537.rs:3:19: 3:28
    let mut _1: *const [u8; 3];          // in scope 0 at ui/consts/issue-33537.rs:4:5: 4:23
    let mut _2: *const [u8; 3];          // in scope 0 at ui/consts/issue-33537.rs:4:5: 4:23
    let _3: &[u8; 3];                    // in scope 0 at ui/consts/issue-33537.rs:4:5: 4:11

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/issue-33537.rs:4:5: 4:23
        StorageLive(_2);                 // scope 0 at ui/consts/issue-33537.rs:4:5: 4:23
        StorageLive(_3);                 // scope 0 at ui/consts/issue-33537.rs:4:5: 4:11
        _3 = const b"foo";               // scope 0 at ui/consts/issue-33537.rs:4:5: 4:11
                                         // mir::Constant
                                         // + span: ui/consts/issue-33537.rs:4:5: 4:11
                                         // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc1)) }
        _2 = &raw const (*_3);           // scope 0 at ui/consts/issue-33537.rs:4:5: 4:11
        _1 = _2;                         // scope 0 at ui/consts/issue-33537.rs:4:5: 4:23
        _0 = move _1 as *const i8 (PtrToPtr); // scope 0 at ui/consts/issue-33537.rs:4:5: 4:36
        StorageDead(_1);                 // scope 0 at ui/consts/issue-33537.rs:4:35: 4:36
        StorageDead(_3);                 // scope 0 at ui/consts/issue-33537.rs:5:1: 5:2
        StorageDead(_2);                 // scope 0 at ui/consts/issue-33537.rs:5:1: 5:2
        return;                          // scope 0 at ui/consts/issue-33537.rs:5:2: 5:2
    }
}

alloc1 (size: 3, align: 1) {
    66 6f 6f                                        │ foo
}

fn bar() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/issue-33537.rs:7:19: 7:22

    bb0: {
        _0 = const 2_i32;                // scope 0 at ui/consts/issue-33537.rs:8:5: 8:20
        return;                          // scope 0 at ui/consts/issue-33537.rs:9:2: 9:2
    }
}

promoted[0] in bar: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/consts/issue-33537.rs:8:6: 8:20
    let mut _1: i32;                     // in scope 0 at ui/consts/issue-33537.rs:8:7: 8:20
    let mut _2: (i32, i32, i32);         // in scope 0 at ui/consts/issue-33537.rs:8:8: 8:17

    bb0: {
        _2 = (const 1_i32, const 2_i32, const 3_i32); // scope 0 at ui/consts/issue-33537.rs:8:8: 8:17
        _1 = (_2.1: i32);                // scope 0 at ui/consts/issue-33537.rs:8:8: 8:19
        _0 = &_1;                        // scope 0 at ui/consts/issue-33537.rs:8:6: 8:20
        return;                          // scope 0 at ui/consts/issue-33537.rs:8:6: 8:20
    }
}

// MIR FOR CTFE
fn bar() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/issue-33537.rs:7:19: 7:22
    let mut _1: &i32;                    // in scope 0 at ui/consts/issue-33537.rs:8:6: 8:20
    let _2: i32;                         // in scope 0 at ui/consts/issue-33537.rs:8:7: 8:20
    let mut _3: (i32, i32, i32);         // in scope 0 at ui/consts/issue-33537.rs:8:8: 8:17
    let mut _4: &i32;                    // in scope 0 at ui/consts/issue-33537.rs:8:6: 8:20

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/issue-33537.rs:8:6: 8:20
        _4 = const _;                    // scope 0 at ui/consts/issue-33537.rs:8:6: 8:20
                                         // mir::Constant
                                         // + span: ui/consts/issue-33537.rs:8:6: 8:20
                                         // + literal: Const { ty: &i32, val: Unevaluated(bar, [], Some(promoted[0])) }
        _1 = &(*_4);                     // scope 0 at ui/consts/issue-33537.rs:8:6: 8:20
        _0 = (*_1);                      // scope 0 at ui/consts/issue-33537.rs:8:5: 8:20
        StorageDead(_1);                 // scope 0 at ui/consts/issue-33537.rs:9:1: 9:2
        return;                          // scope 0 at ui/consts/issue-33537.rs:9:2: 9:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-33537.rs:11:11: 11:11
    let mut _1: (&*const i8, &*const i8); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &*const i8;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: *const i8;                   // in scope 0 at ui/consts/issue-33537.rs:12:16: 12:21
    let mut _4: &*const i8;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: &*const i8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &*const i8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: *const i8;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: *const i8;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &*const i8;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &*const i8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &*const i8;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &*const i8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _20: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _21: i32;                        // in scope 0 at ui/consts/issue-33537.rs:13:16: 13:21
    let mut _22: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _23: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _24: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _26: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _27: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _28: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _30: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _31: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _32: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _33: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _34: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _35: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _37: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _38: &*const i8;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _23;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _24;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _29: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _29;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = foo() -> bb1;               // scope 0 at ui/consts/issue-33537.rs:12:16: 12:21
                                         // mir::Constant
                                         // + span: ui/consts/issue-33537.rs:12:16: 12:19
                                         // + literal: Const { ty: fn() -> *const i8 {foo}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _38 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &*const i8, val: Unevaluated(main, [], Some(promoted[1])) }
        _4 = _38;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_1.0: &*const i8);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_1.1: &*const i8);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = (*_5);                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = (*_6);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = Eq(move _9, move _10);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _7 = Not(move _8);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _11 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<*const i8, *const i8>(move _13, move _14, move _16, move _18); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a *const i8, &'b *const i8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<*const i8, *const i8>}, val: Value(<ZST>) }
    }

    bb3: {
        _21 = bar() -> bb4;              // scope 0 at ui/consts/issue-33537.rs:13:16: 13:21
                                         // mir::Constant
                                         // + span: ui/consts/issue-33537.rs:13:16: 13:19
                                         // + literal: Const { ty: fn() -> i32 {bar}, val: Value(<ZST>) }
    }

    bb4: {
        _20 = &_21;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _37 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _22 = _37;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _19 = (move _20, move _22);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _23 = (_19.0: &i32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _24 = (_19.1: &i32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _27 = (*_23);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _28 = const 2_i32;               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _26 = Eq(move _27, move _28);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _25 = Not(move _26);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _25) -> [0: bb6, otherwise: bb5]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _29 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _31 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _32 = _33;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _35 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _34 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _30 = core::panicking::assert_failed::<i32, i32>(move _31, move _32, move _34, move _36); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/consts/issue-33537.rs:14:2: 14:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/consts/issue-33537.rs:13:23: 13:24

    bb0: {
        _1 = const 2_i32;                // scope 0 at ui/consts/issue-33537.rs:13:23: 13:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &*const i8 = {
    let mut _0: &*const i8;              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: *const i8;               // in scope 0 at ui/consts/issue-33537.rs:12:23: 12:54
    let mut _2: *const [u8; 3];          // in scope 0 at ui/consts/issue-33537.rs:12:23: 12:41
    let mut _3: *const [u8; 3];          // in scope 0 at ui/consts/issue-33537.rs:12:23: 12:41
    let mut _4: &[u8; 3];                // in scope 0 at ui/consts/issue-33537.rs:12:23: 12:29

    bb0: {
        _4 = const b"foo";               // scope 0 at ui/consts/issue-33537.rs:12:23: 12:29
                                         // mir::Constant
                                         // + span: ui/consts/issue-33537.rs:12:23: 12:29
                                         // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc2)) }
        _3 = &raw const (*_4);           // scope 0 at ui/consts/issue-33537.rs:12:23: 12:29
        _2 = _3;                         // scope 0 at ui/consts/issue-33537.rs:12:23: 12:41
        _1 = move _2 as *const i8 (PtrToPtr); // scope 0 at ui/consts/issue-33537.rs:12:23: 12:54
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

alloc2 (size: 3, align: 1) {
    66 6f 6f                                        │ foo
}
