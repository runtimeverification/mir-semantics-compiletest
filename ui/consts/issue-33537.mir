// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> *const i8 {
    let mut _0: *const i8;
    let mut _1: *const [u8; 3];
    let _2: &[u8; 3];

    bb0: {
        _2 = const b"foo";
        _1 = &raw const (*_2);
        _0 = _1 as *const i8 (PtrToPtr);
        return;
    }
}

alloc1 (size: 3, align: 1) {
    66 6f 6f                                        │ foo
}

// MIR FOR CTFE
fn foo() -> *const i8 {
    let mut _0: *const i8;
    let mut _1: *const [u8; 3];
    let mut _2: *const [u8; 3];
    let _3: &[u8; 3];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const b"foo";
        _2 = &raw const (*_3);
        _1 = _2;
        _0 = move _1 as *const i8 (PtrToPtr);
        StorageDead(_1);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

alloc1 (size: 3, align: 1) {
    66 6f 6f                                        │ foo
}

fn bar() -> i32 {
    let mut _0: i32;
    let mut _1: &i32;

    bb0: {
        _1 = const _;
        _0 = (*_1);
        return;
    }
}

promoted[0] in bar: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;
    let mut _2: (i32, i32, i32);

    bb0: {
        _2 = (const 1_i32, const 2_i32, const 3_i32);
        _1 = (_2.1: i32);
        _0 = &_1;
        return;
    }
}

// MIR FOR CTFE
fn bar() -> i32 {
    let mut _0: i32;
    let mut _1: &i32;
    let _2: i32;
    let mut _3: (i32, i32, i32);
    let mut _4: &i32;

    bb0: {
        StorageLive(_1);
        _4 = const _;
        _1 = &(*_4);
        _0 = (*_1);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&*const i8, &*const i8);
    let mut _2: &*const i8;
    let _3: *const i8;
    let _4: &*const i8;
    let _5: &*const i8;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: *const i8;
    let mut _9: *const i8;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&i32, &i32);
    let mut _14: &i32;
    let _15: i32;
    let _16: &i32;
    let _17: &i32;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: i32;
    let mut _21: i32;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: &i32;
    let mut _26: &*const i8;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _16;
        debug right_val => _17;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }

    bb0: {
        _3 = foo() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _26 = const _;
        _1 = (move _2, _26);
        _4 = (_1.0: &*const i8);
        _5 = (_1.1: &*const i8);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<*const i8, *const i8>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb3: {
        _15 = bar() -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = &_15;
        _25 = const _;
        _13 = (move _14, _25);
        _16 = (_13.0: &i32);
        _17 = (_13.1: &i32);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<i32, i32>(move _22, _16, _17, move _24) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &*const i8 = {
    let mut _0: &*const i8;
    let mut _1: *const i8;
    let mut _2: *const [u8; 3];
    let mut _3: *const [u8; 3];
    let mut _4: &[u8; 3];

    bb0: {
        _4 = const b"foo";
        _3 = &raw const (*_4);
        _2 = _3;
        _1 = move _2 as *const i8 (PtrToPtr);
        _0 = &_1;
        return;
    }
}

alloc2 (size: 3, align: 1) {
    66 6f 6f                                        │ foo
}
