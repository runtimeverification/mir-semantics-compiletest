// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Nums::NegOne::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const -1_isize;
        return;
    }
}

fn <impl at ui/consts/cast-discriminant-zst-enum.rs:5:16: 5:21>::clone(_1: &Nums) -> Nums {
    debug self => _1;
    let mut _0: Nums;

    bb0: {
        return;
    }
}

const NEG_ONE_I8: i8 = {
    let mut _0: i8;
    let mut _1: isize;
    let mut _2: (isize, bool);

    bb0: {
        StorageLive(_1);
        _2 = CheckedAdd(const _, const 0_isize);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _1 = move (_2.0: isize);
        _0 = move _1 as i8 (IntToInt);
        StorageDead(_1);
        return;
    }
}

const NEG_ONE_I16: i16 = {
    let mut _0: i16;
    let mut _1: isize;
    let mut _2: (isize, bool);

    bb0: {
        StorageLive(_1);
        _2 = CheckedAdd(const _, const 0_isize);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _1 = move (_2.0: isize);
        _0 = move _1 as i16 (IntToInt);
        StorageDead(_1);
        return;
    }
}

const NEG_ONE_I32: i32 = {
    let mut _0: i32;
    let mut _1: isize;
    let mut _2: (isize, bool);

    bb0: {
        StorageLive(_1);
        _2 = CheckedAdd(const _, const 0_isize);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _1 = move (_2.0: isize);
        _0 = move _1 as i32 (IntToInt);
        StorageDead(_1);
        return;
    }
}

const NEG_ONE_I64: i64 = {
    let mut _0: i64;
    let mut _1: isize;
    let mut _2: (isize, bool);

    bb0: {
        StorageLive(_1);
        _2 = CheckedAdd(const _, const 0_isize);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _1 = move (_2.0: isize);
        _0 = move _1 as i64 (IntToInt);
        StorageDead(_1);
        return;
    }
}

const NEG_ONE_I128: i128 = {
    let mut _0: i128;
    let mut _1: isize;
    let mut _2: (isize, bool);

    bb0: {
        StorageLive(_1);
        _2 = CheckedAdd(const _, const 0_isize);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _1 = move (_2.0: isize);
        _0 = move _1 as i128 (IntToInt);
        StorageDead(_1);
        return;
    }
}

fn test_as_arg(_1: Nums) -> () {
    debug n => const Nums::NegOne;
    let mut _0: ();
    let mut _2: (&i8, &i8);
    let mut _3: &i8;
    let _4: i8;
    let _5: Nums;
    let mut _6: isize;
    let _7: &i8;
    let _8: &i8;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i8;
    let mut _12: i8;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&i16, &i16);
    let mut _17: &i16;
    let _18: i16;
    let _19: Nums;
    let mut _20: isize;
    let _21: &i16;
    let _22: &i16;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: i16;
    let mut _26: i16;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: (&i32, &i32);
    let mut _31: &i32;
    let _32: i32;
    let _33: Nums;
    let mut _34: isize;
    let _35: &i32;
    let _36: &i32;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: i32;
    let mut _40: i32;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _44: (&i64, &i64);
    let mut _45: &i64;
    let _46: i64;
    let _47: Nums;
    let mut _48: isize;
    let _49: &i64;
    let _50: &i64;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: i64;
    let mut _54: i64;
    let _56: !;
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _58: (&i128, &i128);
    let mut _59: &i128;
    let _60: i128;
    let _61: Nums;
    let mut _62: isize;
    let _63: &i128;
    let _64: &i128;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: i128;
    let mut _68: i128;
    let _70: !;
    let mut _71: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _72: &i128;
    let mut _73: &i64;
    let mut _74: &i32;
    let mut _75: &i16;
    let mut _76: &i8;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _13: core::panicking::AssertKind;
        scope 2 {
            debug kind => _13;
        }
    }
    scope 3 {
        debug left_val => _21;
        debug right_val => _22;
        let _27: core::panicking::AssertKind;
        scope 4 {
            debug kind => _27;
        }
    }
    scope 5 {
        debug left_val => _35;
        debug right_val => _36;
        let _41: core::panicking::AssertKind;
        scope 6 {
            debug kind => _41;
        }
    }
    scope 7 {
        debug left_val => _49;
        debug right_val => _50;
        let _55: core::panicking::AssertKind;
        scope 8 {
            debug kind => _55;
        }
    }
    scope 9 {
        debug left_val => _63;
        debug right_val => _64;
        let _69: core::panicking::AssertKind;
        scope 10 {
            debug kind => _69;
        }
    }

    bb0: {
        _76 = const _;
        _6 = discriminant(_5);
        _4 = move _6 as i8 (IntToInt);
        _3 = &_4;
        _2 = (_76, move _3);
        _7 = (_2.0: &i8);
        _8 = (_2.1: &i8);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<i8, i8>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb2: {
        _75 = const _;
        _20 = discriminant(_19);
        _18 = move _20 as i16 (IntToInt);
        _17 = &_18;
        _16 = (_75, move _17);
        _21 = (_16.0: &i16);
        _22 = (_16.1: &i16);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<i16, i16>(move _27, _21, _22, move _29) -> unwind continue;
    }

    bb4: {
        _74 = const _;
        _34 = discriminant(_33);
        _32 = move _34 as i32 (IntToInt);
        _31 = &_32;
        _30 = (_74, move _31);
        _35 = (_30.0: &i32);
        _36 = (_30.1: &i32);
        _39 = (*_35);
        _40 = (*_36);
        _38 = Eq(move _39, move _40);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<i32, i32>(move _41, _35, _36, move _43) -> unwind continue;
    }

    bb6: {
        _73 = const _;
        _48 = discriminant(_47);
        _46 = move _48 as i64 (IntToInt);
        _45 = &_46;
        _44 = (_73, move _45);
        _49 = (_44.0: &i64);
        _50 = (_44.1: &i64);
        _53 = (*_49);
        _54 = (*_50);
        _52 = Eq(move _53, move _54);
        _51 = Not(move _52);
        switchInt(move _51) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _55 = core::panicking::AssertKind::Eq;
        _57 = Option::<Arguments<'_>>::None;
        _56 = core::panicking::assert_failed::<i64, i64>(move _55, _49, _50, move _57) -> unwind continue;
    }

    bb8: {
        _72 = const _;
        _62 = discriminant(_61);
        _60 = move _62 as i128 (IntToInt);
        _59 = &_60;
        _58 = (_72, move _59);
        _63 = (_58.0: &i128);
        _64 = (_58.1: &i128);
        _67 = (*_63);
        _68 = (*_64);
        _66 = Eq(move _67, move _68);
        _65 = Not(move _66);
        switchInt(move _65) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _69 = core::panicking::AssertKind::Eq;
        _71 = Option::<Arguments<'_>>::None;
        _70 = core::panicking::assert_failed::<i128, i128>(move _69, _63, _64, move _71) -> unwind continue;
    }

    bb10: {
        return;
    }
}

promoted[0] in test_as_arg: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const -1_i128;
        _0 = &_1;
        return;
    }
}

promoted[1] in test_as_arg: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const -1_i64;
        _0 = &_1;
        return;
    }
}

promoted[2] in test_as_arg: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const -1_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in test_as_arg: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const -1_i16;
        _0 = &_1;
        return;
    }
}

promoted[4] in test_as_arg: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const -1_i8;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i8, &i8);
    let mut _2: &i8;
    let _3: i8;
    let _4: Nums;
    let mut _5: isize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i8;
    let mut _11: i8;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&i16, &i16);
    let mut _16: &i16;
    let _17: i16;
    let _18: Nums;
    let mut _19: isize;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: i16;
    let mut _25: i16;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&i32, &i32);
    let mut _30: &i32;
    let _31: i32;
    let _32: Nums;
    let mut _33: isize;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: i32;
    let mut _39: i32;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&i64, &i64);
    let mut _44: &i64;
    let _45: i64;
    let _46: Nums;
    let mut _47: isize;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: i64;
    let mut _53: i64;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: (&i128, &i128);
    let mut _58: &i128;
    let _59: i128;
    let _60: Nums;
    let mut _61: isize;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: i128;
    let mut _67: i128;
    let _69: !;
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _71: (&i8, &i8);
    let mut _72: &i8;
    let _73: i8;
    let _74: Nums;
    let mut _75: isize;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: i8;
    let mut _81: i8;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: (&i16, &i16);
    let mut _86: &i16;
    let _87: i16;
    let _88: Nums;
    let mut _89: isize;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: i16;
    let mut _95: i16;
    let _97: !;
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _99: (&i32, &i32);
    let mut _100: &i32;
    let _101: i32;
    let _102: Nums;
    let mut _103: isize;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: i32;
    let mut _109: i32;
    let _111: !;
    let mut _112: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _113: (&i64, &i64);
    let mut _114: &i64;
    let _115: i64;
    let _116: Nums;
    let mut _117: isize;
    let mut _120: bool;
    let mut _121: bool;
    let mut _122: i64;
    let mut _123: i64;
    let _125: !;
    let mut _126: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _127: (&i128, &i128);
    let mut _128: &i128;
    let _129: i128;
    let _130: Nums;
    let mut _131: isize;
    let mut _134: bool;
    let mut _135: bool;
    let mut _136: i128;
    let mut _137: i128;
    let _139: !;
    let mut _140: std::option::Option<std::fmt::Arguments<'_>>;
    let _141: ();
    let mut _142: (&i8, &i8);
    let mut _145: bool;
    let mut _146: bool;
    let mut _147: i8;
    let mut _148: i8;
    let _150: !;
    let mut _151: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _152: (&i16, &i16);
    let mut _155: bool;
    let mut _156: bool;
    let mut _157: i16;
    let mut _158: i16;
    let _160: !;
    let mut _161: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _162: (&i32, &i32);
    let mut _165: bool;
    let mut _166: bool;
    let mut _167: i32;
    let mut _168: i32;
    let _170: !;
    let mut _171: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _172: (&i64, &i64);
    let mut _175: bool;
    let mut _176: bool;
    let mut _177: i64;
    let mut _178: i64;
    let _180: !;
    let mut _181: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _182: (&i128, &i128);
    let mut _185: bool;
    let mut _186: bool;
    let mut _187: i128;
    let mut _188: i128;
    let _190: !;
    let mut _191: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug kind => const Nums::NegOne;
        let _6: &i8;
        let _7: &i8;
        let _20: &i16;
        let _21: &i16;
        let _34: &i32;
        let _35: &i32;
        let _48: &i64;
        let _49: &i64;
        let _62: &i128;
        let _63: &i128;
        let _76: &i8;
        let _77: &i8;
        let _90: &i16;
        let _91: &i16;
        let _104: &i32;
        let _105: &i32;
        let _118: &i64;
        let _119: &i64;
        let _132: &i128;
        let _133: &i128;
        let _143: &i8;
        let _144: &i8;
        let _153: &i16;
        let _154: &i16;
        let _163: &i32;
        let _164: &i32;
        let _173: &i64;
        let _174: &i64;
        let _183: &i128;
        let _184: &i128;
        let mut _192: &i128;
        let mut _193: &i128;
        let mut _194: &i64;
        let mut _195: &i64;
        let mut _196: &i32;
        let mut _197: &i32;
        let mut _198: &i16;
        let mut _199: &i16;
        let mut _200: &i8;
        let mut _201: &i8;
        let mut _202: &i128;
        let mut _203: &i64;
        let mut _204: &i32;
        let mut _205: &i16;
        let mut _206: &i8;
        let mut _207: &i128;
        let mut _208: &i64;
        let mut _209: &i32;
        let mut _210: &i16;
        let mut _211: &i8;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug left_val => _20;
            debug right_val => _21;
            let _26: core::panicking::AssertKind;
            scope 5 {
                debug kind => _26;
            }
        }
        scope 6 {
            debug left_val => _34;
            debug right_val => _35;
            let _40: core::panicking::AssertKind;
            scope 7 {
                debug kind => _40;
            }
        }
        scope 8 {
            debug left_val => _48;
            debug right_val => _49;
            let _54: core::panicking::AssertKind;
            scope 9 {
                debug kind => _54;
            }
        }
        scope 10 {
            debug left_val => _62;
            debug right_val => _63;
            let _68: core::panicking::AssertKind;
            scope 11 {
                debug kind => _68;
            }
        }
        scope 12 {
            debug left_val => _76;
            debug right_val => _77;
            let _82: core::panicking::AssertKind;
            scope 13 {
                debug kind => _82;
            }
        }
        scope 14 {
            debug left_val => _90;
            debug right_val => _91;
            let _96: core::panicking::AssertKind;
            scope 15 {
                debug kind => _96;
            }
        }
        scope 16 {
            debug left_val => _104;
            debug right_val => _105;
            let _110: core::panicking::AssertKind;
            scope 17 {
                debug kind => _110;
            }
        }
        scope 18 {
            debug left_val => _118;
            debug right_val => _119;
            let _124: core::panicking::AssertKind;
            scope 19 {
                debug kind => _124;
            }
        }
        scope 20 {
            debug left_val => _132;
            debug right_val => _133;
            let _138: core::panicking::AssertKind;
            scope 21 {
                debug kind => _138;
            }
        }
        scope 22 {
            debug left_val => _143;
            debug right_val => _144;
            let _149: core::panicking::AssertKind;
            scope 23 {
                debug kind => _149;
            }
        }
        scope 24 {
            debug left_val => _153;
            debug right_val => _154;
            let _159: core::panicking::AssertKind;
            scope 25 {
                debug kind => _159;
            }
        }
        scope 26 {
            debug left_val => _163;
            debug right_val => _164;
            let _169: core::panicking::AssertKind;
            scope 27 {
                debug kind => _169;
            }
        }
        scope 28 {
            debug left_val => _173;
            debug right_val => _174;
            let _179: core::panicking::AssertKind;
            scope 29 {
                debug kind => _179;
            }
        }
        scope 30 {
            debug left_val => _183;
            debug right_val => _184;
            let _189: core::panicking::AssertKind;
            scope 31 {
                debug kind => _189;
            }
        }
    }

    bb0: {
        _211 = const _;
        _5 = discriminant(_4);
        _3 = move _5 as i8 (IntToInt);
        _2 = &_3;
        _1 = (_211, move _2);
        _6 = (_1.0: &i8);
        _7 = (_1.1: &i8);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i8, i8>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb2: {
        _210 = const _;
        _19 = discriminant(_18);
        _17 = move _19 as i16 (IntToInt);
        _16 = &_17;
        _15 = (_210, move _16);
        _20 = (_15.0: &i16);
        _21 = (_15.1: &i16);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<i16, i16>(move _26, _20, _21, move _28) -> unwind continue;
    }

    bb4: {
        _209 = const _;
        _33 = discriminant(_32);
        _31 = move _33 as i32 (IntToInt);
        _30 = &_31;
        _29 = (_209, move _30);
        _34 = (_29.0: &i32);
        _35 = (_29.1: &i32);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<i32, i32>(move _40, _34, _35, move _42) -> unwind continue;
    }

    bb6: {
        _208 = const _;
        _47 = discriminant(_46);
        _45 = move _47 as i64 (IntToInt);
        _44 = &_45;
        _43 = (_208, move _44);
        _48 = (_43.0: &i64);
        _49 = (_43.1: &i64);
        _52 = (*_48);
        _53 = (*_49);
        _51 = Eq(move _52, move _53);
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<i64, i64>(move _54, _48, _49, move _56) -> unwind continue;
    }

    bb8: {
        _207 = const _;
        _61 = discriminant(_60);
        _59 = move _61 as i128 (IntToInt);
        _58 = &_59;
        _57 = (_207, move _58);
        _62 = (_57.0: &i128);
        _63 = (_57.1: &i128);
        _66 = (*_62);
        _67 = (*_63);
        _65 = Eq(move _66, move _67);
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _68 = core::panicking::AssertKind::Eq;
        _70 = Option::<Arguments<'_>>::None;
        _69 = core::panicking::assert_failed::<i128, i128>(move _68, _62, _63, move _70) -> unwind continue;
    }

    bb10: {
        _206 = const _;
        _74 = std::hint::black_box::<Nums>(const Nums::NegOne) -> [return: bb11, unwind continue];
    }

    bb11: {
        _75 = discriminant(_74);
        _73 = move _75 as i8 (IntToInt);
        _72 = &_73;
        _71 = (_206, move _72);
        _76 = (_71.0: &i8);
        _77 = (_71.1: &i8);
        _80 = (*_76);
        _81 = (*_77);
        _79 = Eq(move _80, move _81);
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<i8, i8>(move _82, _76, _77, move _84) -> unwind continue;
    }

    bb13: {
        _205 = const _;
        _88 = std::hint::black_box::<Nums>(const Nums::NegOne) -> [return: bb14, unwind continue];
    }

    bb14: {
        _89 = discriminant(_88);
        _87 = move _89 as i16 (IntToInt);
        _86 = &_87;
        _85 = (_205, move _86);
        _90 = (_85.0: &i16);
        _91 = (_85.1: &i16);
        _94 = (*_90);
        _95 = (*_91);
        _93 = Eq(move _94, move _95);
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _96 = core::panicking::AssertKind::Eq;
        _98 = Option::<Arguments<'_>>::None;
        _97 = core::panicking::assert_failed::<i16, i16>(move _96, _90, _91, move _98) -> unwind continue;
    }

    bb16: {
        _204 = const _;
        _102 = std::hint::black_box::<Nums>(const Nums::NegOne) -> [return: bb17, unwind continue];
    }

    bb17: {
        _103 = discriminant(_102);
        _101 = move _103 as i32 (IntToInt);
        _100 = &_101;
        _99 = (_204, move _100);
        _104 = (_99.0: &i32);
        _105 = (_99.1: &i32);
        _108 = (*_104);
        _109 = (*_105);
        _107 = Eq(move _108, move _109);
        _106 = Not(move _107);
        switchInt(move _106) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _110 = core::panicking::AssertKind::Eq;
        _112 = Option::<Arguments<'_>>::None;
        _111 = core::panicking::assert_failed::<i32, i32>(move _110, _104, _105, move _112) -> unwind continue;
    }

    bb19: {
        _203 = const _;
        _116 = std::hint::black_box::<Nums>(const Nums::NegOne) -> [return: bb20, unwind continue];
    }

    bb20: {
        _117 = discriminant(_116);
        _115 = move _117 as i64 (IntToInt);
        _114 = &_115;
        _113 = (_203, move _114);
        _118 = (_113.0: &i64);
        _119 = (_113.1: &i64);
        _122 = (*_118);
        _123 = (*_119);
        _121 = Eq(move _122, move _123);
        _120 = Not(move _121);
        switchInt(move _120) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _124 = core::panicking::AssertKind::Eq;
        _126 = Option::<Arguments<'_>>::None;
        _125 = core::panicking::assert_failed::<i64, i64>(move _124, _118, _119, move _126) -> unwind continue;
    }

    bb22: {
        _202 = const _;
        _130 = std::hint::black_box::<Nums>(const Nums::NegOne) -> [return: bb23, unwind continue];
    }

    bb23: {
        _131 = discriminant(_130);
        _129 = move _131 as i128 (IntToInt);
        _128 = &_129;
        _127 = (_202, move _128);
        _132 = (_127.0: &i128);
        _133 = (_127.1: &i128);
        _136 = (*_132);
        _137 = (*_133);
        _135 = Eq(move _136, move _137);
        _134 = Not(move _135);
        switchInt(move _134) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _138 = core::panicking::AssertKind::Eq;
        _140 = Option::<Arguments<'_>>::None;
        _139 = core::panicking::assert_failed::<i128, i128>(move _138, _132, _133, move _140) -> unwind continue;
    }

    bb25: {
        _141 = test_as_arg(const Nums::NegOne) -> [return: bb26, unwind continue];
    }

    bb26: {
        _201 = const _;
        _200 = const _;
        _142 = (_201, _200);
        _143 = (_142.0: &i8);
        _144 = (_142.1: &i8);
        _147 = (*_143);
        _148 = (*_144);
        _146 = Eq(move _147, move _148);
        _145 = Not(move _146);
        switchInt(move _145) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _149 = core::panicking::AssertKind::Eq;
        _151 = Option::<Arguments<'_>>::None;
        _150 = core::panicking::assert_failed::<i8, i8>(move _149, _143, _144, move _151) -> unwind continue;
    }

    bb28: {
        _199 = const _;
        _198 = const _;
        _152 = (_199, _198);
        _153 = (_152.0: &i16);
        _154 = (_152.1: &i16);
        _157 = (*_153);
        _158 = (*_154);
        _156 = Eq(move _157, move _158);
        _155 = Not(move _156);
        switchInt(move _155) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _159 = core::panicking::AssertKind::Eq;
        _161 = Option::<Arguments<'_>>::None;
        _160 = core::panicking::assert_failed::<i16, i16>(move _159, _153, _154, move _161) -> unwind continue;
    }

    bb30: {
        _197 = const _;
        _196 = const _;
        _162 = (_197, _196);
        _163 = (_162.0: &i32);
        _164 = (_162.1: &i32);
        _167 = (*_163);
        _168 = (*_164);
        _166 = Eq(move _167, move _168);
        _165 = Not(move _166);
        switchInt(move _165) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _169 = core::panicking::AssertKind::Eq;
        _171 = Option::<Arguments<'_>>::None;
        _170 = core::panicking::assert_failed::<i32, i32>(move _169, _163, _164, move _171) -> unwind continue;
    }

    bb32: {
        _195 = const _;
        _194 = const _;
        _172 = (_195, _194);
        _173 = (_172.0: &i64);
        _174 = (_172.1: &i64);
        _177 = (*_173);
        _178 = (*_174);
        _176 = Eq(move _177, move _178);
        _175 = Not(move _176);
        switchInt(move _175) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _179 = core::panicking::AssertKind::Eq;
        _181 = Option::<Arguments<'_>>::None;
        _180 = core::panicking::assert_failed::<i64, i64>(move _179, _173, _174, move _181) -> unwind continue;
    }

    bb34: {
        _193 = const _;
        _192 = const _;
        _182 = (_193, _192);
        _183 = (_182.0: &i128);
        _184 = (_182.1: &i128);
        _187 = (*_183);
        _188 = (*_184);
        _186 = Eq(move _187, move _188);
        _185 = Not(move _186);
        switchInt(move _185) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _189 = core::panicking::AssertKind::Eq;
        _191 = Option::<Arguments<'_>>::None;
        _190 = core::panicking::assert_failed::<i128, i128>(move _189, _183, _184, move _191) -> unwind continue;
    }

    bb36: {
        return;
    }
}

promoted[0] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const -1_i128;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const -1_i64;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const -1_i32;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const -1_i16;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const -1_i8;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const -1_i128;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const -1_i64;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const -1_i32;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const -1_i16;
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const -1_i8;
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &i128 = {
    let mut _0: &i128;
    let mut _1: i128;

    bb0: {
        _1 = const -1_i128;
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const -1_i64;
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const -1_i32;
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const -1_i16;
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const -1_i8;
        _0 = &_1;
        return;
    }
}
