// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_let_irrefutable.rs:3:11: 3:11

    bb0: {
        return;                          // scope 0 at ui/consts/const_let_irrefutable.rs:3:13: 3:13
    }
}

fn tup(_1: (i32, i32)) -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/const_let_irrefutable.rs:5:37: 5:40
    let _2: i32;                         // in scope 0 at ui/consts/const_let_irrefutable.rs:5:15: 5:16
    let _3: i32;                         // in scope 0 at ui/consts/const_let_irrefutable.rs:5:18: 5:19
    let mut _4: i32;                     // in scope 0 at ui/consts/const_let_irrefutable.rs:6:5: 6:6
    let mut _5: i32;                     // in scope 0 at ui/consts/const_let_irrefutable.rs:6:9: 6:10
    let mut _6: (i32, bool);             // in scope 0 at ui/consts/const_let_irrefutable.rs:6:5: 6:10
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_irrefutable.rs:5:15: 5:16
        debug b => _3;                   // in scope 1 at ui/consts/const_let_irrefutable.rs:5:18: 5:19
    }

    bb0: {
        _2 = (_1.0: i32);                // scope 0 at ui/consts/const_let_irrefutable.rs:5:15: 5:16
        _3 = (_1.1: i32);                // scope 0 at ui/consts/const_let_irrefutable.rs:5:18: 5:19
        _4 = _2;                         // scope 1 at ui/consts/const_let_irrefutable.rs:6:5: 6:6
        _5 = _3;                         // scope 1 at ui/consts/const_let_irrefutable.rs:6:9: 6:10
        _6 = CheckedAdd(_4, _5);         // scope 1 at ui/consts/const_let_irrefutable.rs:6:5: 6:10
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> bb1; // scope 1 at ui/consts/const_let_irrefutable.rs:6:5: 6:10
    }

    bb1: {
        _0 = move (_6.0: i32);           // scope 1 at ui/consts/const_let_irrefutable.rs:6:5: 6:10
        return;                          // scope 0 at ui/consts/const_let_irrefutable.rs:7:2: 7:2
    }
}

// MIR FOR CTFE
fn tup(_1: (i32, i32)) -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/const_let_irrefutable.rs:5:37: 5:40
    let _2: i32;                         // in scope 0 at ui/consts/const_let_irrefutable.rs:5:15: 5:16
    let _3: i32;                         // in scope 0 at ui/consts/const_let_irrefutable.rs:5:18: 5:19
    let mut _4: i32;                     // in scope 0 at ui/consts/const_let_irrefutable.rs:6:5: 6:6
    let mut _5: i32;                     // in scope 0 at ui/consts/const_let_irrefutable.rs:6:9: 6:10
    let mut _6: (i32, bool);             // in scope 0 at ui/consts/const_let_irrefutable.rs:6:5: 6:10
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_irrefutable.rs:5:15: 5:16
        debug b => _3;                   // in scope 1 at ui/consts/const_let_irrefutable.rs:5:18: 5:19
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const_let_irrefutable.rs:5:15: 5:16
        _2 = (_1.0: i32);                // scope 0 at ui/consts/const_let_irrefutable.rs:5:15: 5:16
        StorageLive(_3);                 // scope 0 at ui/consts/const_let_irrefutable.rs:5:18: 5:19
        _3 = (_1.1: i32);                // scope 0 at ui/consts/const_let_irrefutable.rs:5:18: 5:19
        StorageLive(_4);                 // scope 1 at ui/consts/const_let_irrefutable.rs:6:5: 6:6
        _4 = _2;                         // scope 1 at ui/consts/const_let_irrefutable.rs:6:5: 6:6
        StorageLive(_5);                 // scope 1 at ui/consts/const_let_irrefutable.rs:6:9: 6:10
        _5 = _3;                         // scope 1 at ui/consts/const_let_irrefutable.rs:6:9: 6:10
        _6 = CheckedAdd(_4, _5);         // scope 1 at ui/consts/const_let_irrefutable.rs:6:5: 6:10
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> bb1; // scope 1 at ui/consts/const_let_irrefutable.rs:6:5: 6:10
    }

    bb1: {
        _0 = move (_6.0: i32);           // scope 1 at ui/consts/const_let_irrefutable.rs:6:5: 6:10
        StorageDead(_5);                 // scope 1 at ui/consts/const_let_irrefutable.rs:6:9: 6:10
        StorageDead(_4);                 // scope 1 at ui/consts/const_let_irrefutable.rs:6:9: 6:10
        StorageDead(_3);                 // scope 0 at ui/consts/const_let_irrefutable.rs:7:1: 7:2
        StorageDead(_2);                 // scope 0 at ui/consts/const_let_irrefutable.rs:7:1: 7:2
        return;                          // scope 0 at ui/consts/const_let_irrefutable.rs:7:2: 7:2
    }
}

fn array(_1: [i32; 2]) -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/const_let_irrefutable.rs:9:37: 9:40
    let _2: i32;                         // in scope 0 at ui/consts/const_let_irrefutable.rs:9:17: 9:18
    let _3: i32;                         // in scope 0 at ui/consts/const_let_irrefutable.rs:9:20: 9:21
    let mut _4: i32;                     // in scope 0 at ui/consts/const_let_irrefutable.rs:10:5: 10:6
    let mut _5: i32;                     // in scope 0 at ui/consts/const_let_irrefutable.rs:10:9: 10:10
    let mut _6: (i32, bool);             // in scope 0 at ui/consts/const_let_irrefutable.rs:10:5: 10:10
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_irrefutable.rs:9:17: 9:18
        debug b => _3;                   // in scope 1 at ui/consts/const_let_irrefutable.rs:9:20: 9:21
    }

    bb0: {
        _2 = _1[0 of 2];                 // scope 0 at ui/consts/const_let_irrefutable.rs:9:17: 9:18
        _3 = _1[1 of 2];                 // scope 0 at ui/consts/const_let_irrefutable.rs:9:20: 9:21
        _4 = _2;                         // scope 1 at ui/consts/const_let_irrefutable.rs:10:5: 10:6
        _5 = _3;                         // scope 1 at ui/consts/const_let_irrefutable.rs:10:9: 10:10
        _6 = CheckedAdd(_4, _5);         // scope 1 at ui/consts/const_let_irrefutable.rs:10:5: 10:10
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> bb1; // scope 1 at ui/consts/const_let_irrefutable.rs:10:5: 10:10
    }

    bb1: {
        _0 = move (_6.0: i32);           // scope 1 at ui/consts/const_let_irrefutable.rs:10:5: 10:10
        return;                          // scope 0 at ui/consts/const_let_irrefutable.rs:11:2: 11:2
    }
}

// MIR FOR CTFE
fn array(_1: [i32; 2]) -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/const_let_irrefutable.rs:9:37: 9:40
    let _2: i32;                         // in scope 0 at ui/consts/const_let_irrefutable.rs:9:17: 9:18
    let _3: i32;                         // in scope 0 at ui/consts/const_let_irrefutable.rs:9:20: 9:21
    let mut _4: i32;                     // in scope 0 at ui/consts/const_let_irrefutable.rs:10:5: 10:6
    let mut _5: i32;                     // in scope 0 at ui/consts/const_let_irrefutable.rs:10:9: 10:10
    let mut _6: (i32, bool);             // in scope 0 at ui/consts/const_let_irrefutable.rs:10:5: 10:10
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_irrefutable.rs:9:17: 9:18
        debug b => _3;                   // in scope 1 at ui/consts/const_let_irrefutable.rs:9:20: 9:21
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const_let_irrefutable.rs:9:17: 9:18
        _2 = _1[0 of 2];                 // scope 0 at ui/consts/const_let_irrefutable.rs:9:17: 9:18
        StorageLive(_3);                 // scope 0 at ui/consts/const_let_irrefutable.rs:9:20: 9:21
        _3 = _1[1 of 2];                 // scope 0 at ui/consts/const_let_irrefutable.rs:9:20: 9:21
        StorageLive(_4);                 // scope 1 at ui/consts/const_let_irrefutable.rs:10:5: 10:6
        _4 = _2;                         // scope 1 at ui/consts/const_let_irrefutable.rs:10:5: 10:6
        StorageLive(_5);                 // scope 1 at ui/consts/const_let_irrefutable.rs:10:9: 10:10
        _5 = _3;                         // scope 1 at ui/consts/const_let_irrefutable.rs:10:9: 10:10
        _6 = CheckedAdd(_4, _5);         // scope 1 at ui/consts/const_let_irrefutable.rs:10:5: 10:10
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> bb1; // scope 1 at ui/consts/const_let_irrefutable.rs:10:5: 10:10
    }

    bb1: {
        _0 = move (_6.0: i32);           // scope 1 at ui/consts/const_let_irrefutable.rs:10:5: 10:10
        StorageDead(_5);                 // scope 1 at ui/consts/const_let_irrefutable.rs:10:9: 10:10
        StorageDead(_4);                 // scope 1 at ui/consts/const_let_irrefutable.rs:10:9: 10:10
        StorageDead(_3);                 // scope 0 at ui/consts/const_let_irrefutable.rs:11:1: 11:2
        StorageDead(_2);                 // scope 0 at ui/consts/const_let_irrefutable.rs:11:1: 11:2
        return;                          // scope 0 at ui/consts/const_let_irrefutable.rs:11:2: 11:2
    }
}

array::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_irrefutable.rs:9:30: 9:31

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/consts/const_let_irrefutable.rs:9:30: 9:31
        return;                          // scope 0 at ui/consts/const_let_irrefutable.rs:9:30: 9:31
    }
}
