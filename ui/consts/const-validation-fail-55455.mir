// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const C: This<Option<&i32>> = {
    let mut _0: This<std::option::Option<&i32>>; // return place in scope 0 at ui/consts/const-validation-fail-55455.rs:6:10: 6:28
    let mut _1: std::option::Option<&i32>; // in scope 0 at ui/consts/const-validation-fail-55455.rs:6:36: 6:44
    let mut _2: &i32;                    // in scope 0 at ui/consts/const-validation-fail-55455.rs:6:41: 6:43
    let _3: &i32;                        // in scope 0 at ui/consts/const-validation-fail-55455.rs:6:41: 6:43
    let _4: i32;                         // in scope 0 at ui/consts/const-validation-fail-55455.rs:6:42: 6:43
    let mut _5: &i32;                    // in scope 0 at ui/consts/const-validation-fail-55455.rs:6:41: 6:43

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-validation-fail-55455.rs:6:36: 6:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-validation-fail-55455.rs:6:41: 6:43
        StorageLive(_3);                 // scope 0 at ui/consts/const-validation-fail-55455.rs:6:41: 6:43
        _5 = const _;                    // scope 0 at ui/consts/const-validation-fail-55455.rs:6:41: 6:43
                                         // mir::Constant
                                         // + span: ui/consts/const-validation-fail-55455.rs:6:41: 6:43
                                         // + literal: Const { ty: &i32, val: Unevaluated(C, [], Some(promoted[0])) }
        _3 = &(*_5);                     // scope 0 at ui/consts/const-validation-fail-55455.rs:6:41: 6:43
        _2 = &(*_3);                     // scope 0 at ui/consts/const-validation-fail-55455.rs:6:41: 6:43
        _1 = Option::<&i32>::Some(move _2); // scope 0 at ui/consts/const-validation-fail-55455.rs:6:36: 6:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-validation-fail-55455.rs:6:43: 6:44
        _0 = This::<Option<&i32>>(move _1); // scope 0 at ui/consts/const-validation-fail-55455.rs:6:31: 6:45
        StorageDead(_3);                 // scope 0 at ui/consts/const-validation-fail-55455.rs:6:44: 6:45
        StorageDead(_1);                 // scope 0 at ui/consts/const-validation-fail-55455.rs:6:44: 6:45
        return;                          // scope 0 at ui/consts/const-validation-fail-55455.rs:6:1: 6:46
    }
}

promoted[0] in C: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/consts/const-validation-fail-55455.rs:6:41: 6:43
    let mut _1: i32;                     // in scope 0 at ui/consts/const-validation-fail-55455.rs:6:42: 6:43

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/consts/const-validation-fail-55455.rs:6:42: 6:43
        _0 = &_1;                        // scope 0 at ui/consts/const-validation-fail-55455.rs:6:41: 6:43
        return;                          // scope 0 at ui/consts/const-validation-fail-55455.rs:6:41: 6:43
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-validation-fail-55455.rs:8:11: 8:11

    bb0: {
        return;                          // scope 0 at ui/consts/const-validation-fail-55455.rs:9:2: 9:2
    }
}

fn This(_1: T) -> This<T> {
    let mut _0: This<T>;                 // return place in scope 0 at ui/consts/const-validation-fail-55455.rs:4:1: 4:15

    bb0: {
        _0 = This::<T>(move _1);         // scope 0 at ui/consts/const-validation-fail-55455.rs:4:1: 4:15
        return;                          // scope 0 at ui/consts/const-validation-fail-55455.rs:4:1: 4:15
    }
}

// MIR FOR CTFE
fn This(_1: T) -> This<T> {
    let mut _0: This<T>;                 // return place in scope 0 at ui/consts/const-validation-fail-55455.rs:4:1: 4:15

    bb0: {
        _0 = This::<T>(move _1);         // scope 0 at ui/consts/const-validation-fail-55455.rs:4:1: 4:15
        return;                          // scope 0 at ui/consts/const-validation-fail-55455.rs:4:1: 4:15
    }
}
