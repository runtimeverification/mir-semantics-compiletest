// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const C: This<Option<&i32>> = {
    let mut _0: This<std::option::Option<&i32>>;
    let mut _1: std::option::Option<&i32>;
    let mut _2: &i32;
    let _3: &i32;
    let _4: i32;
    let mut _5: &i32;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _5 = const _;
        _3 = &(*_5);
        _2 = &(*_3);
        _1 = Option::<&i32>::Some(move _2);
        StorageDead(_2);
        _0 = This::<Option<&i32>>(move _1);
        StorageDead(_3);
        StorageDead(_1);
        return;
    }
}

promoted[0] in C: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn This(_1: T) -> This<T> {
    let mut _0: This<T>;

    bb0: {
        _0 = This::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn This(_1: T) -> This<T> {
    let mut _0: This<T>;

    bb0: {
        _0 = This::<T>(move _1);
        return;
    }
}
