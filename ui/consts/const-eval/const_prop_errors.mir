// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const-eval/const_prop_errors.rs:7:1: 7:18>::foo(_1: T) -> u32 {
    debug self => _1;                    // in scope 0 at ui/consts/const-eval/const_prop_errors.rs:8:12: 8:16
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const-eval/const_prop_errors.rs:8:21: 8:24
    let mut _2: fn();                    // in scope 0 at ui/consts/const-eval/const_prop_errors.rs:10:9: 10:17

    bb0: {
        _2 = bar::<T> as fn() (Pointer(ReifyFnPointer)); // scope 0 at ui/consts/const-eval/const_prop_errors.rs:10:9: 10:17
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/const_prop_errors.rs:10:9: 10:17
                                         // + literal: Const { ty: fn() {bar::<T>}, val: Value(<ZST>) }
        _0 = move _2 as u32 (PointerExposeAddress); // scope 0 at ui/consts/const-eval/const_prop_errors.rs:10:9: 10:24
        drop(_1) -> bb1;                 // scope 0 at ui/consts/const-eval/const_prop_errors.rs:11:5: 11:6
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-eval/const_prop_errors.rs:11:6: 11:6
    }
}

fn bar() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/const_prop_errors.rs:9:21: 9:21

    bb0: {
        goto -> bb1;                     // scope 0 at ui/consts/const-eval/const_prop_errors.rs:9:23: 9:30
    }

    bb1: {
        goto -> bb1;                     // scope 0 at ui/consts/const-eval/const_prop_errors.rs:9:23: 9:30
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/const_prop_errors.rs:14:11: 14:11

    bb0: {
        return;                          // scope 0 at ui/consts/const-eval/const_prop_errors.rs:14:13: 14:13
    }
}
