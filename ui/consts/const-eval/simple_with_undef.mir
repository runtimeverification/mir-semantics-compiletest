// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const PARSE_BOOL: Option<&str> = {
    let mut _0: std::option::Option<&str>; // return place in scope 0 at ui/consts/const-eval/simple_with_undef.rs:3:19: 3:39

    bb0: {
        _0 = Option::<&str>::None;       // scope 0 at ui/consts/const-eval/simple_with_undef.rs:3:42: 3:46
        return;                          // scope 0 at ui/consts/const-eval/simple_with_undef.rs:3:1: 3:47
    }
}

static FOO: (Option<&str>, u32) = {
    let mut _0: (std::option::Option<&str>, u32); // return place in scope 0 at ui/consts/const-eval/simple_with_undef.rs:4:13: 4:32

    bb0: {
        _0 = (const _, const 42_u32);    // scope 0 at ui/consts/const-eval/simple_with_undef.rs:4:35: 4:51
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/simple_with_undef.rs:4:36: 4:46
                                         // + literal: Const { ty: Option<&str>, val: Unevaluated(PARSE_BOOL, [], None) }
        return;                          // scope 0 at ui/consts/const-eval/simple_with_undef.rs:4:1: 4:52
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/simple_with_undef.rs:6:11: 6:11

    bb0: {
        return;                          // scope 0 at ui/consts/const-eval/simple_with_undef.rs:6:13: 6:13
    }
}
