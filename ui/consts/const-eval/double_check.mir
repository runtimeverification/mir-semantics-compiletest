// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::A::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/consts/const-eval/double_check.rs:4:9: 4:10

    bb0: {
        _0 = const 5_isize;              // scope 0 at ui/consts/const-eval/double_check.rs:4:9: 4:10
        return;                          // scope 0 at ui/consts/const-eval/double_check.rs:4:9: 4:10
    }
}

Foo::B::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/consts/const-eval/double_check.rs:5:9: 5:11

    bb0: {
        _0 = const 42_isize;             // scope 0 at ui/consts/const-eval/double_check.rs:5:9: 5:11
        return;                          // scope 0 at ui/consts/const-eval/double_check.rs:5:9: 5:11
    }
}

Bar::C::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/consts/const-eval/double_check.rs:8:9: 8:11

    bb0: {
        _0 = const 42_isize;             // scope 0 at ui/consts/const-eval/double_check.rs:8:9: 8:11
        return;                          // scope 0 at ui/consts/const-eval/double_check.rs:8:9: 8:11
    }
}

Bar::D::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/consts/const-eval/double_check.rs:9:9: 9:11

    bb0: {
        _0 = const 99_isize;             // scope 0 at ui/consts/const-eval/double_check.rs:9:9: 9:11
        return;                          // scope 0 at ui/consts/const-eval/double_check.rs:9:9: 9:11
    }
}

static BAR: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/consts/const-eval/double_check.rs:17:13: 17:15

    bb0: {
        _0 = const 42_u8;                // scope 0 at ui/consts/const-eval/double_check.rs:17:18: 17:20
        return;                          // scope 0 at ui/consts/const-eval/double_check.rs:17:1: 17:21
    }
}

static FOO: (&Foo, &Bar) = {
    let mut _0: (&Foo, &Bar);            // return place in scope 0 at ui/consts/const-eval/double_check.rs:18:13: 18:25
    let mut _1: &Foo;                    // in scope 0 at ui/consts/const-eval/double_check.rs:19:5: 19:27
    let mut _2: Union;                   // in scope 0 at ui/consts/const-eval/double_check.rs:19:5: 19:23
    let mut _3: &u8;                     // in scope 0 at ui/consts/const-eval/double_check.rs:19:17: 19:21
    let _4: &u8;                         // in scope 0 at ui/consts/const-eval/double_check.rs:19:17: 19:21
    let _5: &u8;                         // in scope 0 at ui/consts/const-eval/double_check.rs:19:18: 19:21
    let mut _6: &Bar;                    // in scope 0 at ui/consts/const-eval/double_check.rs:20:5: 20:27
    let mut _7: Union;                   // in scope 0 at ui/consts/const-eval/double_check.rs:20:5: 20:23
    let mut _8: &u8;                     // in scope 0 at ui/consts/const-eval/double_check.rs:20:17: 20:21
    let _9: &u8;                         // in scope 0 at ui/consts/const-eval/double_check.rs:20:17: 20:21
    let _10: &u8;                        // in scope 0 at ui/consts/const-eval/double_check.rs:20:18: 20:21
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/const-eval/double_check.rs:19:5: 19:27
        StorageLive(_2);                 // scope 1 at ui/consts/const-eval/double_check.rs:19:5: 19:23
        StorageLive(_3);                 // scope 1 at ui/consts/const-eval/double_check.rs:19:17: 19:21
        StorageLive(_4);                 // scope 1 at ui/consts/const-eval/double_check.rs:19:17: 19:21
        StorageLive(_5);                 // scope 1 at ui/consts/const-eval/double_check.rs:19:18: 19:21
        _5 = const {alloc5: &u8};        // scope 1 at ui/consts/const-eval/double_check.rs:19:18: 19:21
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/double_check.rs:19:18: 19:21
                                         // + literal: Const { ty: &u8, val: Value(Scalar(alloc5)) }
        _4 = &(*_5);                     // scope 1 at ui/consts/const-eval/double_check.rs:19:17: 19:21
        _3 = &(*_4);                     // scope 1 at ui/consts/const-eval/double_check.rs:19:17: 19:21
        _2 = Union { foo: move _3 };     // scope 1 at ui/consts/const-eval/double_check.rs:19:5: 19:23
        StorageDead(_3);                 // scope 1 at ui/consts/const-eval/double_check.rs:19:22: 19:23
        _1 = (_2.0: &Foo);               // scope 1 at ui/consts/const-eval/double_check.rs:19:5: 19:27
        StorageLive(_6);                 // scope 1 at ui/consts/const-eval/double_check.rs:20:5: 20:27
        StorageLive(_7);                 // scope 1 at ui/consts/const-eval/double_check.rs:20:5: 20:23
        StorageLive(_8);                 // scope 1 at ui/consts/const-eval/double_check.rs:20:17: 20:21
        StorageLive(_9);                 // scope 1 at ui/consts/const-eval/double_check.rs:20:17: 20:21
        StorageLive(_10);                // scope 1 at ui/consts/const-eval/double_check.rs:20:18: 20:21
        _10 = const {alloc5: &u8};       // scope 1 at ui/consts/const-eval/double_check.rs:20:18: 20:21
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/double_check.rs:20:18: 20:21
                                         // + literal: Const { ty: &u8, val: Value(Scalar(alloc5)) }
        _9 = &(*_10);                    // scope 1 at ui/consts/const-eval/double_check.rs:20:17: 20:21
        _8 = &(*_9);                     // scope 1 at ui/consts/const-eval/double_check.rs:20:17: 20:21
        _7 = Union { foo: move _8 };     // scope 1 at ui/consts/const-eval/double_check.rs:20:5: 20:23
        StorageDead(_8);                 // scope 1 at ui/consts/const-eval/double_check.rs:20:22: 20:23
        _6 = (_7.1: &Bar);               // scope 1 at ui/consts/const-eval/double_check.rs:20:5: 20:27
        _0 = (move _1, move _6);         // scope 1 at ui/consts/const-eval/double_check.rs:18:36: 21:2
        StorageDead(_6);                 // scope 1 at ui/consts/const-eval/double_check.rs:21:1: 21:2
        StorageDead(_1);                 // scope 1 at ui/consts/const-eval/double_check.rs:21:1: 21:2
        StorageDead(_10);                // scope 0 at ui/consts/const-eval/double_check.rs:21:2: 21:3
        StorageDead(_9);                 // scope 0 at ui/consts/const-eval/double_check.rs:21:2: 21:3
        StorageDead(_7);                 // scope 0 at ui/consts/const-eval/double_check.rs:21:2: 21:3
        StorageDead(_5);                 // scope 0 at ui/consts/const-eval/double_check.rs:21:2: 21:3
        StorageDead(_4);                 // scope 0 at ui/consts/const-eval/double_check.rs:21:2: 21:3
        StorageDead(_2);                 // scope 0 at ui/consts/const-eval/double_check.rs:21:2: 21:3
        return;                          // scope 0 at ui/consts/const-eval/double_check.rs:18:1: 21:4
    }
}

alloc5 (static: BAR, size: 1, align: 1) {
    2a                                              â”‚ *
}

static FOO2: (&Foo, &Bar) = {
    let mut _0: (&Foo, &Bar);            // return place in scope 0 at ui/consts/const-eval/double_check.rs:23:14: 23:26
    let mut _1: &Foo;                    // in scope 0 at ui/consts/const-eval/double_check.rs:23:38: 23:63
    let mut _2: &u8;                     // in scope 0 at ui/consts/const-eval/double_check.rs:23:58: 23:62
    let _3: &u8;                         // in scope 0 at ui/consts/const-eval/double_check.rs:23:59: 23:62
    let mut _4: &Bar;                    // in scope 0 at ui/consts/const-eval/double_check.rs:23:65: 23:90
    let mut _5: &u8;                     // in scope 0 at ui/consts/const-eval/double_check.rs:23:85: 23:89
    let _6: &u8;                         // in scope 0 at ui/consts/const-eval/double_check.rs:23:86: 23:89
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/const-eval/double_check.rs:23:38: 23:63
        StorageLive(_2);                 // scope 1 at ui/consts/const-eval/double_check.rs:23:58: 23:62
        StorageLive(_3);                 // scope 1 at ui/consts/const-eval/double_check.rs:23:59: 23:62
        _3 = const {alloc5: &u8};        // scope 1 at ui/consts/const-eval/double_check.rs:23:59: 23:62
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/double_check.rs:23:59: 23:62
                                         // + literal: Const { ty: &u8, val: Value(Scalar(alloc5)) }
        _2 = &(*_3);                     // scope 1 at ui/consts/const-eval/double_check.rs:23:58: 23:62
        ConstEvalCounter;                // scope 1 at ui/consts/const-eval/double_check.rs:23:38: 23:63
        _1 = transmute::<&u8, &Foo>(move _2) -> bb1; // scope 1 at ui/consts/const-eval/double_check.rs:23:38: 23:63
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/double_check.rs:23:38: 23:57
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&u8) -> &Foo {transmute::<&u8, &Foo>}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 1 at ui/consts/const-eval/double_check.rs:23:62: 23:63
        StorageLive(_4);                 // scope 1 at ui/consts/const-eval/double_check.rs:23:65: 23:90
        StorageLive(_5);                 // scope 1 at ui/consts/const-eval/double_check.rs:23:85: 23:89
        StorageLive(_6);                 // scope 1 at ui/consts/const-eval/double_check.rs:23:86: 23:89
        _6 = const {alloc5: &u8};        // scope 1 at ui/consts/const-eval/double_check.rs:23:86: 23:89
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/double_check.rs:23:86: 23:89
                                         // + literal: Const { ty: &u8, val: Value(Scalar(alloc5)) }
        _5 = &(*_6);                     // scope 1 at ui/consts/const-eval/double_check.rs:23:85: 23:89
        ConstEvalCounter;                // scope 1 at ui/consts/const-eval/double_check.rs:23:65: 23:90
        _4 = transmute::<&u8, &Bar>(move _5) -> bb2; // scope 1 at ui/consts/const-eval/double_check.rs:23:65: 23:90
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/double_check.rs:23:65: 23:84
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&u8) -> &Bar {transmute::<&u8, &Bar>}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_5);                 // scope 1 at ui/consts/const-eval/double_check.rs:23:89: 23:90
        _0 = (move _1, move _4);         // scope 1 at ui/consts/const-eval/double_check.rs:23:37: 23:91
        StorageDead(_4);                 // scope 1 at ui/consts/const-eval/double_check.rs:23:90: 23:91
        StorageDead(_1);                 // scope 1 at ui/consts/const-eval/double_check.rs:23:90: 23:91
        StorageDead(_6);                 // scope 0 at ui/consts/const-eval/double_check.rs:23:91: 23:92
        StorageDead(_3);                 // scope 0 at ui/consts/const-eval/double_check.rs:23:91: 23:92
        return;                          // scope 0 at ui/consts/const-eval/double_check.rs:23:1: 23:93
    }
}

alloc5 (static: BAR, size: 1, align: 1) {
    2a                                              â”‚ *
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/double_check.rs:25:11: 25:11

    bb0: {
        return;                          // scope 0 at ui/consts/const-eval/double_check.rs:25:13: 25:13
    }
}
