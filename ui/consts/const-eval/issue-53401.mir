// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const STATIC_TRAIT: &dyn Test = {
    let mut _0: &dyn Test;               // return place in scope 0 at ui/consts/const-eval/issue-53401.rs:3:25: 3:34
    let mut _1: &();                     // in scope 0 at ui/consts/const-eval/issue-53401.rs:3:37: 3:40
    let _2: &();                         // in scope 0 at ui/consts/const-eval/issue-53401.rs:3:37: 3:40
    let _3: ();                          // in scope 0 at ui/consts/const-eval/issue-53401.rs:3:38: 3:40
    let mut _4: &();                     // in scope 0 at ui/consts/const-eval/issue-53401.rs:3:37: 3:40

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-eval/issue-53401.rs:3:37: 3:40
        StorageLive(_2);                 // scope 0 at ui/consts/const-eval/issue-53401.rs:3:37: 3:40
        _4 = const _;                    // scope 0 at ui/consts/const-eval/issue-53401.rs:3:37: 3:40
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/issue-53401.rs:3:37: 3:40
                                         // + literal: Const { ty: &(), val: Unevaluated(STATIC_TRAIT, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at ui/consts/const-eval/issue-53401.rs:3:37: 3:40
        _1 = &(*_2);                     // scope 0 at ui/consts/const-eval/issue-53401.rs:3:37: 3:40
        _0 = move _1 as &dyn Test (Pointer(Unsize)); // scope 0 at ui/consts/const-eval/issue-53401.rs:3:37: 3:40
        StorageDead(_2);                 // scope 0 at ui/consts/const-eval/issue-53401.rs:3:39: 3:40
        StorageDead(_1);                 // scope 0 at ui/consts/const-eval/issue-53401.rs:3:39: 3:40
        return;                          // scope 0 at ui/consts/const-eval/issue-53401.rs:3:1: 3:41
    }
}

promoted[0] in STATIC_TRAIT: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/consts/const-eval/issue-53401.rs:3:37: 3:40
    let mut _1: ();                      // in scope 0 at ui/consts/const-eval/issue-53401.rs:3:38: 3:40

    bb0: {
        _1 = ();                         // scope 0 at ui/consts/const-eval/issue-53401.rs:3:38: 3:40
        _0 = &_1;                        // scope 0 at ui/consts/const-eval/issue-53401.rs:3:37: 3:40
        return;                          // scope 0 at ui/consts/const-eval/issue-53401.rs:3:37: 3:40
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/issue-53401.rs:5:11: 5:11

    bb0: {
        return;                          // scope 0 at ui/consts/const-eval/issue-53401.rs:5:13: 5:13
    }
}

fn Test::test() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/issue-53401.rs:8:15: 8:15

    bb0: {
        return;                          // scope 0 at ui/consts/const-eval/issue-53401.rs:8:35: 8:35
    }
}
