// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::A::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/consts/const-eval/double_check2.rs:8:9: 8:10

    bb0: {
        _0 = const 5_isize;              // scope 0 at ui/consts/const-eval/double_check2.rs:8:9: 8:10
        return;                          // scope 0 at ui/consts/const-eval/double_check2.rs:8:9: 8:10
    }
}

Foo::B::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/consts/const-eval/double_check2.rs:9:9: 9:11

    bb0: {
        _0 = const 42_isize;             // scope 0 at ui/consts/const-eval/double_check2.rs:9:9: 9:11
        return;                          // scope 0 at ui/consts/const-eval/double_check2.rs:9:9: 9:11
    }
}

Bar::C::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/consts/const-eval/double_check2.rs:12:9: 12:11

    bb0: {
        _0 = const 42_isize;             // scope 0 at ui/consts/const-eval/double_check2.rs:12:9: 12:11
        return;                          // scope 0 at ui/consts/const-eval/double_check2.rs:12:9: 12:11
    }
}

Bar::D::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/consts/const-eval/double_check2.rs:13:9: 13:11

    bb0: {
        _0 = const 99_isize;             // scope 0 at ui/consts/const-eval/double_check2.rs:13:9: 13:11
        return;                          // scope 0 at ui/consts/const-eval/double_check2.rs:13:9: 13:11
    }
}

static BAR: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/consts/const-eval/double_check2.rs:21:13: 21:15

    bb0: {
        _0 = const 5_u8;                 // scope 0 at ui/consts/const-eval/double_check2.rs:21:18: 21:19
        return;                          // scope 0 at ui/consts/const-eval/double_check2.rs:21:1: 21:20
    }
}

static FOO: (&Foo, &Bar) = {
    let mut _0: (&Foo, &Bar);            // return place in scope 0 at ui/consts/const-eval/double_check2.rs:22:13: 22:25
    let mut _1: &Foo;                    // in scope 0 at ui/consts/const-eval/double_check2.rs:25:9: 25:31
    let mut _2: Union;                   // in scope 0 at ui/consts/const-eval/double_check2.rs:25:9: 25:27
    let mut _3: &u8;                     // in scope 0 at ui/consts/const-eval/double_check2.rs:25:21: 25:25
    let _4: &u8;                         // in scope 0 at ui/consts/const-eval/double_check2.rs:25:21: 25:25
    let _5: &u8;                         // in scope 0 at ui/consts/const-eval/double_check2.rs:25:22: 25:25
    let mut _6: &Bar;                    // in scope 0 at ui/consts/const-eval/double_check2.rs:26:9: 26:31
    let mut _7: Union;                   // in scope 0 at ui/consts/const-eval/double_check2.rs:26:9: 26:27
    let mut _8: &u8;                     // in scope 0 at ui/consts/const-eval/double_check2.rs:26:21: 26:25
    let _9: &u8;                         // in scope 0 at ui/consts/const-eval/double_check2.rs:26:21: 26:25
    let _10: &u8;                        // in scope 0 at ui/consts/const-eval/double_check2.rs:26:22: 26:25
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/const-eval/double_check2.rs:25:9: 25:31
        StorageLive(_2);                 // scope 1 at ui/consts/const-eval/double_check2.rs:25:9: 25:27
        StorageLive(_3);                 // scope 1 at ui/consts/const-eval/double_check2.rs:25:21: 25:25
        StorageLive(_4);                 // scope 1 at ui/consts/const-eval/double_check2.rs:25:21: 25:25
        StorageLive(_5);                 // scope 1 at ui/consts/const-eval/double_check2.rs:25:22: 25:25
        _5 = const {alloc5: &u8};        // scope 1 at ui/consts/const-eval/double_check2.rs:25:22: 25:25
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/double_check2.rs:25:22: 25:25
                                         // + literal: Const { ty: &u8, val: Value(Scalar(alloc5)) }
        _4 = &(*_5);                     // scope 1 at ui/consts/const-eval/double_check2.rs:25:21: 25:25
        _3 = &(*_4);                     // scope 1 at ui/consts/const-eval/double_check2.rs:25:21: 25:25
        _2 = Union { foo: move _3 };     // scope 1 at ui/consts/const-eval/double_check2.rs:25:9: 25:27
        StorageDead(_3);                 // scope 1 at ui/consts/const-eval/double_check2.rs:25:26: 25:27
        _1 = (_2.0: &Foo);               // scope 1 at ui/consts/const-eval/double_check2.rs:25:9: 25:31
        StorageLive(_6);                 // scope 1 at ui/consts/const-eval/double_check2.rs:26:9: 26:31
        StorageLive(_7);                 // scope 1 at ui/consts/const-eval/double_check2.rs:26:9: 26:27
        StorageLive(_8);                 // scope 1 at ui/consts/const-eval/double_check2.rs:26:21: 26:25
        StorageLive(_9);                 // scope 1 at ui/consts/const-eval/double_check2.rs:26:21: 26:25
        StorageLive(_10);                // scope 1 at ui/consts/const-eval/double_check2.rs:26:22: 26:25
        _10 = const {alloc5: &u8};       // scope 1 at ui/consts/const-eval/double_check2.rs:26:22: 26:25
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/double_check2.rs:26:22: 26:25
                                         // + literal: Const { ty: &u8, val: Value(Scalar(alloc5)) }
        _9 = &(*_10);                    // scope 1 at ui/consts/const-eval/double_check2.rs:26:21: 26:25
        _8 = &(*_9);                     // scope 1 at ui/consts/const-eval/double_check2.rs:26:21: 26:25
        _7 = Union { foo: move _8 };     // scope 1 at ui/consts/const-eval/double_check2.rs:26:9: 26:27
        StorageDead(_8);                 // scope 1 at ui/consts/const-eval/double_check2.rs:26:26: 26:27
        _6 = (_7.1: &Bar);               // scope 1 at ui/consts/const-eval/double_check2.rs:26:9: 26:31
        _0 = (move _1, move _6);         // scope 1 at ui/consts/const-eval/double_check2.rs:23:5: 27:6
        StorageDead(_6);                 // scope 1 at ui/consts/const-eval/double_check2.rs:27:5: 27:6
        StorageDead(_1);                 // scope 1 at ui/consts/const-eval/double_check2.rs:27:5: 27:6
        StorageDead(_10);                // scope 0 at ui/consts/const-eval/double_check2.rs:28:1: 28:2
        StorageDead(_9);                 // scope 0 at ui/consts/const-eval/double_check2.rs:28:1: 28:2
        StorageDead(_7);                 // scope 0 at ui/consts/const-eval/double_check2.rs:28:1: 28:2
        StorageDead(_5);                 // scope 0 at ui/consts/const-eval/double_check2.rs:28:1: 28:2
        StorageDead(_4);                 // scope 0 at ui/consts/const-eval/double_check2.rs:28:1: 28:2
        StorageDead(_2);                 // scope 0 at ui/consts/const-eval/double_check2.rs:28:1: 28:2
        return;                          // scope 0 at ui/consts/const-eval/double_check2.rs:22:1: 28:3
    }
}

alloc5 (static: BAR, size: 1, align: 1) {
    05                                              â”‚ .
}

static FOO2: (&Foo, &Bar) = {
    let mut _0: (&Foo, &Bar);            // return place in scope 0 at ui/consts/const-eval/double_check2.rs:29:14: 29:26
    let mut _1: &Foo;                    // in scope 0 at ui/consts/const-eval/double_check2.rs:29:39: 29:64
    let mut _2: &u8;                     // in scope 0 at ui/consts/const-eval/double_check2.rs:29:59: 29:63
    let _3: &u8;                         // in scope 0 at ui/consts/const-eval/double_check2.rs:29:60: 29:63
    let mut _4: &Bar;                    // in scope 0 at ui/consts/const-eval/double_check2.rs:29:66: 29:91
    let mut _5: &u8;                     // in scope 0 at ui/consts/const-eval/double_check2.rs:29:86: 29:90
    let _6: &u8;                         // in scope 0 at ui/consts/const-eval/double_check2.rs:29:87: 29:90
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/const-eval/double_check2.rs:29:39: 29:64
        StorageLive(_2);                 // scope 1 at ui/consts/const-eval/double_check2.rs:29:59: 29:63
        StorageLive(_3);                 // scope 1 at ui/consts/const-eval/double_check2.rs:29:60: 29:63
        _3 = const {alloc5: &u8};        // scope 1 at ui/consts/const-eval/double_check2.rs:29:60: 29:63
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/double_check2.rs:29:60: 29:63
                                         // + literal: Const { ty: &u8, val: Value(Scalar(alloc5)) }
        _2 = &(*_3);                     // scope 1 at ui/consts/const-eval/double_check2.rs:29:59: 29:63
        ConstEvalCounter;                // scope 1 at ui/consts/const-eval/double_check2.rs:29:39: 29:64
        _1 = transmute::<&u8, &Foo>(move _2) -> bb1; // scope 1 at ui/consts/const-eval/double_check2.rs:29:39: 29:64
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/double_check2.rs:29:39: 29:58
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&u8) -> &Foo {transmute::<&u8, &Foo>}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 1 at ui/consts/const-eval/double_check2.rs:29:63: 29:64
        StorageLive(_4);                 // scope 1 at ui/consts/const-eval/double_check2.rs:29:66: 29:91
        StorageLive(_5);                 // scope 1 at ui/consts/const-eval/double_check2.rs:29:86: 29:90
        StorageLive(_6);                 // scope 1 at ui/consts/const-eval/double_check2.rs:29:87: 29:90
        _6 = const {alloc5: &u8};        // scope 1 at ui/consts/const-eval/double_check2.rs:29:87: 29:90
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/double_check2.rs:29:87: 29:90
                                         // + literal: Const { ty: &u8, val: Value(Scalar(alloc5)) }
        _5 = &(*_6);                     // scope 1 at ui/consts/const-eval/double_check2.rs:29:86: 29:90
        ConstEvalCounter;                // scope 1 at ui/consts/const-eval/double_check2.rs:29:66: 29:91
        _4 = transmute::<&u8, &Bar>(move _5) -> bb2; // scope 1 at ui/consts/const-eval/double_check2.rs:29:66: 29:91
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/double_check2.rs:29:66: 29:85
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&u8) -> &Bar {transmute::<&u8, &Bar>}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_5);                 // scope 1 at ui/consts/const-eval/double_check2.rs:29:90: 29:91
        _0 = (move _1, move _4);         // scope 1 at ui/consts/const-eval/double_check2.rs:29:38: 29:92
        StorageDead(_4);                 // scope 1 at ui/consts/const-eval/double_check2.rs:29:91: 29:92
        StorageDead(_1);                 // scope 1 at ui/consts/const-eval/double_check2.rs:29:91: 29:92
        StorageDead(_6);                 // scope 0 at ui/consts/const-eval/double_check2.rs:29:93: 29:94
        StorageDead(_3);                 // scope 0 at ui/consts/const-eval/double_check2.rs:29:93: 29:94
        return;                          // scope 0 at ui/consts/const-eval/double_check2.rs:29:1: 29:95
    }
}

alloc5 (static: BAR, size: 1, align: 1) {
    05                                              â”‚ .
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/double_check2.rs:32:11: 32:11

    bb0: {
        return;                          // scope 0 at ui/consts/const-eval/double_check2.rs:32:13: 32:13
    }
}
