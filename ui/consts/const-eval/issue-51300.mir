// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const-eval/issue-51300.rs:4:10: 4:19>::eq(_1: &Stat, _2: &Stat) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/const-eval/issue-51300.rs:4:10: 4:19
    debug other => _2;                   // in scope 0 at ui/consts/const-eval/issue-51300.rs:4:10: 4:19
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-eval/issue-51300.rs:4:10: 4:19
    let mut _3: bool;                    // in scope 0 at ui/consts/const-eval/issue-51300.rs:6:5: 6:15
    let mut _4: u8;                      // in scope 0 at ui/consts/const-eval/issue-51300.rs:6:5: 6:15
    let mut _5: u8;                      // in scope 0 at ui/consts/const-eval/issue-51300.rs:6:5: 6:15
    let mut _6: bool;                    // in scope 0 at ui/consts/const-eval/issue-51300.rs:7:5: 7:21
    let mut _7: usize;                   // in scope 0 at ui/consts/const-eval/issue-51300.rs:7:5: 7:21
    let mut _8: usize;                   // in scope 0 at ui/consts/const-eval/issue-51300.rs:7:5: 7:21

    bb0: {
        _4 = ((*_1).0: u8);              // scope 0 at ui/consts/const-eval/issue-51300.rs:6:5: 6:15
        _5 = ((*_2).0: u8);              // scope 0 at ui/consts/const-eval/issue-51300.rs:6:5: 6:15
        _3 = Eq(move _4, move _5);       // scope 0 at ui/consts/const-eval/issue-51300.rs:6:5: 6:15
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/consts/const-eval/issue-51300.rs:7:5: 7:21
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/consts/const-eval/issue-51300.rs:7:5: 7:21
        goto -> bb3;                     // scope 0 at ui/consts/const-eval/issue-51300.rs:7:5: 7:21
    }

    bb2: {
        _7 = ((*_1).1: usize);           // scope 0 at ui/consts/const-eval/issue-51300.rs:7:5: 7:21
        _8 = ((*_2).1: usize);           // scope 0 at ui/consts/const-eval/issue-51300.rs:7:5: 7:21
        _6 = Eq(move _7, move _8);       // scope 0 at ui/consts/const-eval/issue-51300.rs:7:5: 7:21
        _0 = move _6;                    // scope 0 at ui/consts/const-eval/issue-51300.rs:7:5: 7:21
        goto -> bb3;                     // scope 0 at ui/consts/const-eval/issue-51300.rs:7:5: 7:21
    }

    bb3: {
        return;                          // scope 0 at ui/consts/const-eval/issue-51300.rs:4:19: 4:19
    }
}

fn <impl at ui/consts/const-eval/issue-51300.rs:4:21: 4:23>::assert_receiver_is_total_eq(_1: &Stat) -> () {
    debug self => _1;                    // in scope 0 at ui/consts/const-eval/issue-51300.rs:4:21: 4:23
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/issue-51300.rs:4:21: 4:23
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;                          // scope 0 at ui/consts/const-eval/issue-51300.rs:4:23: 4:23
    }
}

fn <impl at ui/consts/const-eval/issue-51300.rs:4:25: 4:30>::clone(_1: &Stat) -> Stat {
    debug self => _1;                    // in scope 0 at ui/consts/const-eval/issue-51300.rs:4:25: 4:30
    let mut _0: Stat;                    // return place in scope 0 at ui/consts/const-eval/issue-51300.rs:4:25: 4:30
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);                      // scope 2 at ui/consts/const-eval/issue-51300.rs:4:25: 4:30
        return;                          // scope 0 at ui/consts/const-eval/issue-51300.rs:4:30: 4:30
    }
}

const <impl at ui/consts/const-eval/issue-51300.rs:10:1: 10:10>::STUDENT_HAPPINESS: Stat = {
    let mut _0: Stat;                    // return place in scope 0 at ui/consts/const-eval/issue-51300.rs:11:34: 11:38

    bb0: {
        _0 = Stat { id: const 0_u8, index: const 0_usize }; // scope 0 at ui/consts/const-eval/issue-51300.rs:11:41: 14:6
        return;                          // scope 0 at ui/consts/const-eval/issue-51300.rs:11:5: 14:7
    }
}

const <impl at ui/consts/const-eval/issue-51300.rs:10:1: 10:10>::STUDENT_HUNGER: Stat = {
    let mut _0: Stat;                    // return place in scope 0 at ui/consts/const-eval/issue-51300.rs:15:31: 15:35
    let mut _1: usize;                   // in scope 0 at ui/consts/const-eval/issue-51300.rs:17:16: 17:49
    let mut _2: usize;                   // in scope 0 at ui/consts/const-eval/issue-51300.rs:17:16: 17:45
    let mut _3: Stat;                    // in scope 0 at ui/consts/const-eval/issue-51300.rs:17:16: 17:39
    let mut _4: (usize, bool);           // in scope 0 at ui/consts/const-eval/issue-51300.rs:17:16: 17:49

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-eval/issue-51300.rs:17:16: 17:49
        StorageLive(_2);                 // scope 0 at ui/consts/const-eval/issue-51300.rs:17:16: 17:45
        StorageLive(_3);                 // scope 0 at ui/consts/const-eval/issue-51300.rs:17:16: 17:39
        _3 = const _;                    // scope 0 at ui/consts/const-eval/issue-51300.rs:17:16: 17:39
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/issue-51300.rs:17:16: 17:39
                                         // + literal: Const { ty: Stat, val: Unevaluated(Stat::STUDENT_HAPPINESS, [], None) }
        _2 = const 0_usize;              // scope 0 at ui/consts/const-eval/issue-51300.rs:17:16: 17:45
        _4 = const (1_usize, false);     // scope 0 at ui/consts/const-eval/issue-51300.rs:17:16: 17:49
        assert(!const false, "attempt to compute `{} + {}`, which would overflow", move _2, const 1_usize) -> bb1; // scope 0 at ui/consts/const-eval/issue-51300.rs:17:16: 17:49
    }

    bb1: {
        _1 = const 1_usize;              // scope 0 at ui/consts/const-eval/issue-51300.rs:17:16: 17:49
        StorageDead(_2);                 // scope 0 at ui/consts/const-eval/issue-51300.rs:17:48: 17:49
        _0 = Stat { id: const 0_u8, index: move _1 }; // scope 0 at ui/consts/const-eval/issue-51300.rs:15:38: 18:6
        StorageDead(_3);                 // scope 0 at ui/consts/const-eval/issue-51300.rs:18:5: 18:6
        StorageDead(_1);                 // scope 0 at ui/consts/const-eval/issue-51300.rs:18:5: 18:6
        return;                          // scope 0 at ui/consts/const-eval/issue-51300.rs:15:5: 18:7
    }
}

fn from_index(_1: u8, _2: usize) -> Option<Stat> {
    debug id => _1;                      // in scope 0 at ui/consts/const-eval/issue-51300.rs:22:19: 22:21
    debug index => _2;                   // in scope 0 at ui/consts/const-eval/issue-51300.rs:22:27: 22:32
    let mut _0: std::option::Option<Stat>; // return place in scope 0 at ui/consts/const-eval/issue-51300.rs:22:44: 22:56
    let _3: Stat;                        // in scope 0 at ui/consts/const-eval/issue-51300.rs:23:9: 23:13
    let mut _4: u8;                      // in scope 0 at ui/consts/const-eval/issue-51300.rs:23:21: 23:23
    let mut _5: usize;                   // in scope 0 at ui/consts/const-eval/issue-51300.rs:23:25: 23:30
    scope 1 {
        debug stat => _3;                // in scope 1 at ui/consts/const-eval/issue-51300.rs:23:9: 23:13
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/consts/const-eval/issue-51300.rs:23:21: 23:23
        _5 = _2;                         // scope 0 at ui/consts/const-eval/issue-51300.rs:23:25: 23:30
        _3 = Stat { id: move _4, index: move _5 }; // scope 0 at ui/consts/const-eval/issue-51300.rs:23:16: 23:31
        switchInt((_3.0: u8)) -> [0: bb1, otherwise: bb2]; // scope 1 at ui/consts/const-eval/issue-51300.rs:24:5: 24:15
    }

    bb1: {
        switchInt((_3.1: usize)) -> [0: bb3, 1: bb4, otherwise: bb2]; // scope 1 at ui/consts/const-eval/issue-51300.rs:24:5: 24:15
    }

    bb2: {
        _0 = Option::<Stat>::None;       // scope 1 at ui/consts/const-eval/issue-51300.rs:27:14: 27:18
        goto -> bb5;                     // scope 1 at ui/consts/const-eval/issue-51300.rs:27:14: 27:18
    }

    bb3: {
        _0 = Option::<Stat>::Some(const _); // scope 1 at ui/consts/const-eval/issue-51300.rs:25:36: 25:65
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/issue-51300.rs:25:41: 25:64
                                         // + literal: Const { ty: Stat, val: Unevaluated(Stat::STUDENT_HAPPINESS, [], None) }
        goto -> bb5;                     // scope 1 at ui/consts/const-eval/issue-51300.rs:25:36: 25:65
    }

    bb4: {
        _0 = Option::<Stat>::Some(const _); // scope 1 at ui/consts/const-eval/issue-51300.rs:26:33: 26:59
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/issue-51300.rs:26:38: 26:58
                                         // + literal: Const { ty: Stat, val: Unevaluated(Stat::STUDENT_HUNGER, [], None) }
        goto -> bb5;                     // scope 1 at ui/consts/const-eval/issue-51300.rs:26:33: 26:59
    }

    bb5: {
        return;                          // scope 0 at ui/consts/const-eval/issue-51300.rs:29:2: 29:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/issue-51300.rs:31:11: 31:11

    bb0: {
        return;                          // scope 0 at ui/consts/const-eval/issue-51300.rs:31:14: 31:14
    }
}
