// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn g(_1: &S) -> &u32 {
    debug ss => _1;                      // in scope 0 at ui/consts/const-eval/issue-47971.rs:5:12: 5:14
    let mut _0: &u32;                    // return place in scope 0 at ui/consts/const-eval/issue-47971.rs:5:30: 5:35

    bb0: {
        _0 = &((*_1).1: u32);            // scope 0 at ui/consts/const-eval/issue-47971.rs:5:30: 5:35
        return;                          // scope 0 at ui/consts/const-eval/issue-47971.rs:5:37: 5:37
    }
}

// MIR FOR CTFE
fn g(_1: &S) -> &u32 {
    debug ss => _1;                      // in scope 0 at ui/consts/const-eval/issue-47971.rs:5:12: 5:14
    let mut _0: &u32;                    // return place in scope 0 at ui/consts/const-eval/issue-47971.rs:5:23: 5:27
    let _2: &u32;                        // in scope 0 at ui/consts/const-eval/issue-47971.rs:5:30: 5:35

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const-eval/issue-47971.rs:5:30: 5:35
        _2 = &((*_1).1: u32);            // scope 0 at ui/consts/const-eval/issue-47971.rs:5:30: 5:35
        _0 = &(*_2);                     // scope 0 at ui/consts/const-eval/issue-47971.rs:5:30: 5:35
        StorageDead(_2);                 // scope 0 at ui/consts/const-eval/issue-47971.rs:5:36: 5:37
        return;                          // scope 0 at ui/consts/const-eval/issue-47971.rs:5:37: 5:37
    }
}

static T: S = {
    let mut _0: S;                       // return place in scope 0 at ui/consts/const-eval/issue-47971.rs:7:11: 7:12
    let mut _1: &u32;                    // in scope 0 at ui/consts/const-eval/issue-47971.rs:7:17: 7:22
    let _2: &u32;                        // in scope 0 at ui/consts/const-eval/issue-47971.rs:7:17: 7:22
    let mut _3: &S;                      // in scope 0 at ui/consts/const-eval/issue-47971.rs:7:19: 7:21
    let _4: &S;                          // in scope 0 at ui/consts/const-eval/issue-47971.rs:7:19: 7:21
    let _5: &S;                          // in scope 0 at ui/consts/const-eval/issue-47971.rs:7:20: 7:21

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-eval/issue-47971.rs:7:17: 7:22
        StorageLive(_2);                 // scope 0 at ui/consts/const-eval/issue-47971.rs:7:17: 7:22
        StorageLive(_3);                 // scope 0 at ui/consts/const-eval/issue-47971.rs:7:19: 7:21
        StorageLive(_4);                 // scope 0 at ui/consts/const-eval/issue-47971.rs:7:19: 7:21
        StorageLive(_5);                 // scope 0 at ui/consts/const-eval/issue-47971.rs:7:20: 7:21
        _5 = const {alloc1: &S};         // scope 0 at ui/consts/const-eval/issue-47971.rs:7:20: 7:21
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/issue-47971.rs:7:20: 7:21
                                         // + literal: Const { ty: &S, val: Value(Scalar(alloc1)) }
        _4 = &(*_5);                     // scope 0 at ui/consts/const-eval/issue-47971.rs:7:19: 7:21
        _3 = &(*_4);                     // scope 0 at ui/consts/const-eval/issue-47971.rs:7:19: 7:21
        ConstEvalCounter;                // scope 0 at ui/consts/const-eval/issue-47971.rs:7:17: 7:22
        _2 = g(move _3) -> bb1;          // scope 0 at ui/consts/const-eval/issue-47971.rs:7:17: 7:22
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/issue-47971.rs:7:17: 7:18
                                         // + literal: Const { ty: for<'a> fn(&'a S) -> &'a u32 {g}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = &(*_2);                     // scope 0 at ui/consts/const-eval/issue-47971.rs:7:17: 7:22
        StorageDead(_3);                 // scope 0 at ui/consts/const-eval/issue-47971.rs:7:21: 7:22
        _0 = S(move _1, const 0_u32);    // scope 0 at ui/consts/const-eval/issue-47971.rs:7:15: 7:26
        StorageDead(_5);                 // scope 0 at ui/consts/const-eval/issue-47971.rs:7:25: 7:26
        StorageDead(_4);                 // scope 0 at ui/consts/const-eval/issue-47971.rs:7:25: 7:26
        StorageDead(_2);                 // scope 0 at ui/consts/const-eval/issue-47971.rs:7:25: 7:26
        StorageDead(_1);                 // scope 0 at ui/consts/const-eval/issue-47971.rs:7:25: 7:26
        return;                          // scope 0 at ui/consts/const-eval/issue-47971.rs:7:1: 7:27
    }
}

alloc1 (static: T, size: 16, align: 8) {
    ╾─────alloc1+0x8──────╼ 00 00 00 00 __ __ __ __ │ ╾──────╼....░░░░
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/issue-47971.rs:9:12: 9:12

    bb0: {
        return;                          // scope 0 at ui/consts/const-eval/issue-47971.rs:9:15: 9:15
    }
}

fn S(_1: &u32, _2: u32) -> S {
    let mut _0: S;                       // return place in scope 0 at ui/consts/const-eval/issue-47971.rs:3:1: 3:9

    bb0: {
        _0 = S(move _1, move _2);        // scope 0 at ui/consts/const-eval/issue-47971.rs:3:1: 3:9
        return;                          // scope 0 at ui/consts/const-eval/issue-47971.rs:3:1: 3:9
    }
}

// MIR FOR CTFE
fn S(_1: &u32, _2: u32) -> S {
    let mut _0: S;                       // return place in scope 0 at ui/consts/const-eval/issue-47971.rs:3:1: 3:9

    bb0: {
        _0 = S(move _1, move _2);        // scope 0 at ui/consts/const-eval/issue-47971.rs:3:1: 3:9
        return;                          // scope 0 at ui/consts/const-eval/issue-47971.rs:3:1: 3:9
    }
}
