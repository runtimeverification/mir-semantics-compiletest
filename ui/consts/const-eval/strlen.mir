// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const S: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "foo";
        return;
    }
}

const B: &[u8] = {
    let mut _0: &[u8];
    let _1: &[u8];
    let mut _2: &str;
    let _3: &str;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const _;
        _2 = &(*_3);
        ConstEvalCounter;
        _1 = core::str::<impl str>::as_bytes(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &(*_1);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const C: usize = {
    let mut _0: usize;
    let mut _1: &[u8];
    let _2: &[u8];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const _;
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = core::slice::<impl [u8]>::len(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const D: bool = {
    let mut _0: bool;
    let mut _1: &[u8];
    let _2: &[u8];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const _;
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = core::slice::<impl [u8]>::is_empty(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const E: bool = {
    let mut _0: bool;
    let mut _1: &str;
    let _2: &str;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const _;
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = core::str::<impl str>::is_empty(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const F: usize = {
    let mut _0: usize;
    let mut _1: &str;
    let _2: &str;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const _;
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = core::str::<impl str>::len(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn foo() -> [u8; 3] {
    let mut _0: [u8; 3];
    let mut _1: [u8; 3];
    let mut _2: std::iter::Enumerate<std::slice::Iter<'_, u8>>;
    let mut _3: std::iter::Enumerate<std::slice::Iter<'_, u8>>;
    let mut _4: std::slice::Iter<'_, u8>;
    let mut _5: &[u8];
    let _6: &[u8];
    let _7: &str;
    let mut _9: std::option::Option<(usize, &u8)>;
    let mut _10: &mut std::iter::Enumerate<std::slice::Iter<'_, u8>>;
    let mut _11: isize;
    let mut _14: usize;
    let mut _15: bool;
    let mut _16: &u8;
    scope 1 {
        debug buf => _1;
        let mut _8: std::iter::Enumerate<std::slice::Iter<'_, u8>>;
        scope 2 {
            debug iter => _8;
            let _12: usize;
            let _13: u8;
            scope 3 {
                debug i => _12;
                debug c => _13;
            }
        }
    }

    bb0: {
        _1 = [const 0_u8; 3];
        _7 = const _;
        _6 = core::str::<impl str>::as_bytes(_7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = _6;
        _4 = core::slice::<impl [u8]>::iter(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = <std::slice::Iter<'_, u8> as Iterator>::enumerate(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _2 = <Enumerate<std::slice::Iter<'_, u8>> as IntoIterator>::into_iter(move _3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = move _2;
        goto -> bb5;
    }

    bb5: {
        _10 = &mut _8;
        _9 = <Enumerate<std::slice::Iter<'_, u8>> as Iterator>::next(_10) -> [return: bb6, unwind continue];
    }

    bb6: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        _16 = deref_copy (((_9 as Some).0: (usize, &u8)).1: &u8);
        _13 = (*_16);
        _12 = (((_9 as Some).0: (usize, &u8)).0: usize);
        _14 = const 3_usize;
        _15 = Lt(_12, _14);
        assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _12) -> [success: bb10, unwind continue];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _0 = _1;
        return;
    }

    bb10: {
        _1[_12] = _13;
        goto -> bb5;
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: &str;
    let _2: &str;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const _;
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = core::str::<impl str>::len(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

foo::{constant#1}: usize = {
    let mut _0: usize;
    let mut _1: &str;
    let _2: &str;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const _;
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = core::str::<impl str>::len(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&&[u8], &&[u8; 3]);
    let mut _2: &&[u8];
    let _3: &[u8];
    let _4: &[u8];
    let mut _5: &[u8; 3];
    let _6: [u8; 3];
    let _7: &&[u8];
    let _8: &&[u8; 3];
    let mut _9: bool;
    let mut _10: bool;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&usize, &usize);
    let mut _15: &usize;
    let _16: usize;
    let mut _17: &[u8];
    let mut _18: &[u8; 3];
    let _19: [u8; 3];
    let mut _20: &usize;
    let _21: usize;
    let _22: &str;
    let _23: &usize;
    let _24: &usize;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: usize;
    let mut _28: usize;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: (&usize, &usize);
    let mut _33: &usize;
    let _34: usize;
    let _35: &str;
    let _36: &usize;
    let _37: &usize;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: usize;
    let mut _41: usize;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&&[u8], &[u8; 3]);
    let mut _46: &[u8; 3];
    let _47: [u8; 3];
    let _48: &&[u8];
    let _49: &[u8; 3];
    let mut _50: bool;
    let mut _51: bool;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _55: (&&[u8], &&[u8; 3]);
    let _56: &&[u8];
    let _57: &&[u8; 3];
    let mut _58: bool;
    let mut _59: bool;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: (&usize, &usize);
    let _64: &usize;
    let _65: &usize;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: usize;
    let mut _69: usize;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&usize, &usize);
    let _74: &usize;
    let _75: &usize;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: usize;
    let mut _79: usize;
    let _81: !;
    let mut _82: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: !;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: !;
    let mut _89: bool;
    let mut _90: !;
    let mut _91: &usize;
    let mut _92: &usize;
    let mut _93: &usize;
    let mut _94: &usize;
    let mut _95: &&[u8; 3];
    let mut _96: &&[u8];
    let mut _97: &&[u8];
    let mut _98: &usize;
    let mut _99: &&[u8; 3];
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _23;
        debug right_val => _24;
        let _29: core::panicking::AssertKind;
        scope 4 {
            debug kind => _29;
        }
    }
    scope 5 {
        debug left_val => _36;
        debug right_val => _37;
        let _42: core::panicking::AssertKind;
        scope 6 {
            debug kind => _42;
        }
    }
    scope 7 {
        debug left_val => _48;
        debug right_val => _49;
        let _52: core::panicking::AssertKind;
        scope 8 {
            debug kind => _52;
        }
    }
    scope 9 {
        debug left_val => _56;
        debug right_val => _57;
        let _60: core::panicking::AssertKind;
        scope 10 {
            debug kind => _60;
        }
    }
    scope 11 {
        debug left_val => _64;
        debug right_val => _65;
        let _70: core::panicking::AssertKind;
        scope 12 {
            debug kind => _70;
        }
    }
    scope 13 {
        debug left_val => _74;
        debug right_val => _75;
        let _80: core::panicking::AssertKind;
        scope 14 {
            debug kind => _80;
        }
    }

    bb0: {
        _6 = foo() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _4 = <[u8; 3] as Index<RangeFull>>::index(move _5, const RangeFull) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = _4;
        _2 = &_3;
        _99 = const _;
        _1 = (move _2, _99);
        _7 = (_1.0: &&[u8]);
        _8 = (_1.1: &&[u8; 3]);
        _10 = <&[u8] as PartialEq<&[u8; 3]>>::eq(_7, _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<&[u8], &[u8; 3]>(move _11, _7, _8, move _13) -> unwind continue;
    }

    bb5: {
        _19 = foo() -> [return: bb6, unwind continue];
    }

    bb6: {
        _18 = &_19;
        _17 = move _18 as &[u8] (Pointer(Unsize));
        _16 = Len((*_17));
        _15 = &_16;
        _22 = const _;
        _21 = core::str::<impl str>::len(_22) -> [return: bb7, unwind continue];
    }

    bb7: {
        _20 = &_21;
        _14 = (move _15, move _20);
        _23 = (_14.0: &usize);
        _24 = (_14.1: &usize);
        _27 = (*_23);
        _28 = (*_24);
        _26 = Eq(move _27, move _28);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<usize, usize>(move _29, _23, _24, move _31) -> unwind continue;
    }

    bb9: {
        _98 = const _;
        _35 = const _;
        _34 = core::str::<impl str>::len(_35) -> [return: bb10, unwind continue];
    }

    bb10: {
        _33 = &_34;
        _32 = (_98, move _33);
        _36 = (_32.0: &usize);
        _37 = (_32.1: &usize);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<usize, usize>(move _42, _36, _37, move _44) -> unwind continue;
    }

    bb12: {
        _97 = const _;
        _47 = foo() -> [return: bb13, unwind continue];
    }

    bb13: {
        _46 = &_47;
        _45 = (_97, move _46);
        _48 = (_45.0: &&[u8]);
        _49 = (_45.1: &[u8; 3]);
        _51 = <&[u8] as PartialEq<[u8; 3]>>::eq(_48, _49) -> [return: bb14, unwind continue];
    }

    bb14: {
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<&[u8], [u8; 3]>(move _52, _48, _49, move _54) -> unwind continue;
    }

    bb16: {
        _96 = const _;
        _95 = const _;
        _55 = (_96, _95);
        _56 = (_55.0: &&[u8]);
        _57 = (_55.1: &&[u8; 3]);
        _59 = <&[u8] as PartialEq<&[u8; 3]>>::eq(_56, _57) -> [return: bb17, unwind continue];
    }

    bb17: {
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<&[u8], &[u8; 3]>(move _60, _56, _57, move _62) -> unwind continue;
    }

    bb19: {
        _94 = const _;
        _93 = const _;
        _63 = (_94, _93);
        _64 = (_63.0: &usize);
        _65 = (_63.1: &usize);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<usize, usize>(move _70, _64, _65, move _72) -> unwind continue;
    }

    bb21: {
        _92 = const _;
        _91 = const _;
        _73 = (_92, _91);
        _74 = (_73.0: &usize);
        _75 = (_73.1: &usize);
        _78 = (*_74);
        _79 = (*_75);
        _77 = Eq(move _78, move _79);
        _76 = Not(move _77);
        switchInt(move _76) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _80 = core::panicking::AssertKind::Eq;
        _82 = Option::<Arguments<'_>>::None;
        _81 = core::panicking::assert_failed::<usize, usize>(move _80, _74, _75, move _82) -> unwind continue;
    }

    bb23: {
        _84 = Not(const _);
        _83 = Not(move _84);
        switchInt(move _83) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _85 = core::panicking::panic(const "assertion failed: !D") -> unwind continue;
    }

    bb25: {
        _87 = Not(const _);
        _86 = Not(move _87);
        switchInt(move _86) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _88 = core::panicking::panic(const "assertion failed: !E") -> unwind continue;
    }

    bb27: {
        _89 = Not(const _);
        switchInt(move _89) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _90 = core::panicking::panic(const "assertion failed: EMPTY") -> unwind continue;
    }

    bb29: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &&[u8; 3] = {
    let mut _0: &&[u8; 3];
    let mut _1: &[u8; 3];

    bb0: {
        _1 = const b"foo";
        _0 = &_1;
        return;
    }
}

alloc10 (size: 3, align: 1) {
    66 6f 6f                                        │ foo
}

promoted[5] in main: &&[u8] = {
    let mut _0: &&[u8];
    let mut _1: &[u8];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &&[u8] = {
    let mut _0: &&[u8];
    let mut _1: &[u8];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &&[u8; 3] = {
    let mut _0: &&[u8; 3];
    let mut _1: &[u8; 3];

    bb0: {
        _1 = const b"foo";
        _0 = &_1;
        return;
    }
}

alloc9 (size: 3, align: 1) {
    66 6f 6f                                        │ foo
}

const LEN: usize = {
    let mut _0: usize;
    let mut _1: &str;
    let _2: &str;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const _;
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = core::str::<impl str>::len(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const EMPTY: bool = {
    let mut _0: bool;
    let mut _1: &str;
    let _2: &str;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const "";
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = core::str::<impl str>::is_empty(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
