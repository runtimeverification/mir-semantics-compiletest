// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const S: &str = {
    let mut _0: &str;                    // return place in scope 0 at ui/consts/const-eval/strlen.rs:3:10: 3:14

    bb0: {
        _0 = const "foo";                // scope 0 at ui/consts/const-eval/strlen.rs:3:17: 3:22
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:3:17: 3:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at ui/consts/const-eval/strlen.rs:3:1: 3:23
    }
}

const B: &[u8] = {
    let mut _0: &[u8];                   // return place in scope 0 at ui/consts/const-eval/strlen.rs:4:14: 4:19
    let _1: &[u8];                       // in scope 0 at ui/consts/const-eval/strlen.rs:4:22: 4:34
    let mut _2: &str;                    // in scope 0 at ui/consts/const-eval/strlen.rs:4:22: 4:34
    let _3: &str;                        // in scope 0 at ui/consts/const-eval/strlen.rs:4:22: 4:23

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-eval/strlen.rs:4:22: 4:34
        StorageLive(_2);                 // scope 0 at ui/consts/const-eval/strlen.rs:4:22: 4:34
        StorageLive(_3);                 // scope 0 at ui/consts/const-eval/strlen.rs:4:22: 4:23
        _3 = const _;                    // scope 0 at ui/consts/const-eval/strlen.rs:4:22: 4:23
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:4:22: 4:23
                                         // + literal: Const { ty: &str, val: Unevaluated(S, [], None) }
        _2 = &(*_3);                     // scope 0 at ui/consts/const-eval/strlen.rs:4:22: 4:34
        ConstEvalCounter;                // scope 0 at ui/consts/const-eval/strlen.rs:4:22: 4:34
        _1 = core::str::<impl str>::as_bytes(move _2) -> bb1; // scope 0 at ui/consts/const-eval/strlen.rs:4:22: 4:34
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:4:24: 4:32
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &(*_1);                     // scope 0 at ui/consts/const-eval/strlen.rs:4:22: 4:34
        StorageDead(_3);                 // scope 0 at ui/consts/const-eval/strlen.rs:4:33: 4:34
        StorageDead(_2);                 // scope 0 at ui/consts/const-eval/strlen.rs:4:33: 4:34
        StorageDead(_1);                 // scope 0 at ui/consts/const-eval/strlen.rs:4:33: 4:34
        return;                          // scope 0 at ui/consts/const-eval/strlen.rs:4:1: 4:35
    }
}

const C: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-eval/strlen.rs:5:14: 5:19
    let mut _1: &[u8];                   // in scope 0 at ui/consts/const-eval/strlen.rs:5:22: 5:29
    let _2: &[u8];                       // in scope 0 at ui/consts/const-eval/strlen.rs:5:22: 5:23

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-eval/strlen.rs:5:22: 5:29
        StorageLive(_2);                 // scope 0 at ui/consts/const-eval/strlen.rs:5:22: 5:23
        _2 = const _;                    // scope 0 at ui/consts/const-eval/strlen.rs:5:22: 5:23
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:5:22: 5:23
                                         // + literal: Const { ty: &[u8], val: Unevaluated(B, [], None) }
        _1 = &(*_2);                     // scope 0 at ui/consts/const-eval/strlen.rs:5:22: 5:29
        ConstEvalCounter;                // scope 0 at ui/consts/const-eval/strlen.rs:5:22: 5:29
        _0 = core::slice::<impl [u8]>::len(move _1) -> bb1; // scope 0 at ui/consts/const-eval/strlen.rs:5:22: 5:29
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:5:24: 5:27
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> usize {core::slice::<impl [u8]>::len}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/const-eval/strlen.rs:5:28: 5:29
        StorageDead(_1);                 // scope 0 at ui/consts/const-eval/strlen.rs:5:28: 5:29
        return;                          // scope 0 at ui/consts/const-eval/strlen.rs:5:1: 5:30
    }
}

const D: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-eval/strlen.rs:6:14: 6:18
    let mut _1: &[u8];                   // in scope 0 at ui/consts/const-eval/strlen.rs:6:21: 6:33
    let _2: &[u8];                       // in scope 0 at ui/consts/const-eval/strlen.rs:6:21: 6:22

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-eval/strlen.rs:6:21: 6:33
        StorageLive(_2);                 // scope 0 at ui/consts/const-eval/strlen.rs:6:21: 6:22
        _2 = const _;                    // scope 0 at ui/consts/const-eval/strlen.rs:6:21: 6:22
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:6:21: 6:22
                                         // + literal: Const { ty: &[u8], val: Unevaluated(B, [], None) }
        _1 = &(*_2);                     // scope 0 at ui/consts/const-eval/strlen.rs:6:21: 6:33
        ConstEvalCounter;                // scope 0 at ui/consts/const-eval/strlen.rs:6:21: 6:33
        _0 = core::slice::<impl [u8]>::is_empty(move _1) -> bb1; // scope 0 at ui/consts/const-eval/strlen.rs:6:21: 6:33
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:6:23: 6:31
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> bool {core::slice::<impl [u8]>::is_empty}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/const-eval/strlen.rs:6:32: 6:33
        StorageDead(_1);                 // scope 0 at ui/consts/const-eval/strlen.rs:6:32: 6:33
        return;                          // scope 0 at ui/consts/const-eval/strlen.rs:6:1: 6:34
    }
}

const E: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-eval/strlen.rs:7:14: 7:18
    let mut _1: &str;                    // in scope 0 at ui/consts/const-eval/strlen.rs:7:21: 7:33
    let _2: &str;                        // in scope 0 at ui/consts/const-eval/strlen.rs:7:21: 7:22

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-eval/strlen.rs:7:21: 7:33
        StorageLive(_2);                 // scope 0 at ui/consts/const-eval/strlen.rs:7:21: 7:22
        _2 = const _;                    // scope 0 at ui/consts/const-eval/strlen.rs:7:21: 7:22
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:7:21: 7:22
                                         // + literal: Const { ty: &str, val: Unevaluated(S, [], None) }
        _1 = &(*_2);                     // scope 0 at ui/consts/const-eval/strlen.rs:7:21: 7:33
        ConstEvalCounter;                // scope 0 at ui/consts/const-eval/strlen.rs:7:21: 7:33
        _0 = core::str::<impl str>::is_empty(move _1) -> bb1; // scope 0 at ui/consts/const-eval/strlen.rs:7:21: 7:33
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:7:23: 7:31
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> bool {core::str::<impl str>::is_empty}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/const-eval/strlen.rs:7:32: 7:33
        StorageDead(_1);                 // scope 0 at ui/consts/const-eval/strlen.rs:7:32: 7:33
        return;                          // scope 0 at ui/consts/const-eval/strlen.rs:7:1: 7:34
    }
}

const F: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-eval/strlen.rs:8:14: 8:19
    let mut _1: &str;                    // in scope 0 at ui/consts/const-eval/strlen.rs:8:22: 8:29
    let _2: &str;                        // in scope 0 at ui/consts/const-eval/strlen.rs:8:22: 8:23

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-eval/strlen.rs:8:22: 8:29
        StorageLive(_2);                 // scope 0 at ui/consts/const-eval/strlen.rs:8:22: 8:23
        _2 = const _;                    // scope 0 at ui/consts/const-eval/strlen.rs:8:22: 8:23
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:8:22: 8:23
                                         // + literal: Const { ty: &str, val: Unevaluated(S, [], None) }
        _1 = &(*_2);                     // scope 0 at ui/consts/const-eval/strlen.rs:8:22: 8:29
        ConstEvalCounter;                // scope 0 at ui/consts/const-eval/strlen.rs:8:22: 8:29
        _0 = core::str::<impl str>::len(move _1) -> bb1; // scope 0 at ui/consts/const-eval/strlen.rs:8:22: 8:29
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:8:24: 8:27
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> usize {core::str::<impl str>::len}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/const-eval/strlen.rs:8:28: 8:29
        StorageDead(_1);                 // scope 0 at ui/consts/const-eval/strlen.rs:8:28: 8:29
        return;                          // scope 0 at ui/consts/const-eval/strlen.rs:8:1: 8:30
    }
}

fn foo() -> [u8; 3] {
    let mut _0: [u8; 3];                 // return place in scope 0 at ui/consts/const-eval/strlen.rs:11:9: 11:16
    let mut _1: std::iter::Enumerate<std::slice::Iter<'_, u8>>; // in scope 0 at ui/consts/const-eval/strlen.rs:12:20: 12:51
    let mut _2: std::iter::Enumerate<std::slice::Iter<'_, u8>>; // in scope 0 at ui/consts/const-eval/strlen.rs:12:20: 12:51
    let mut _3: std::slice::Iter<'_, u8>; // in scope 0 at ui/consts/const-eval/strlen.rs:12:20: 12:39
    let mut _4: &[u8];                   // in scope 0 at ui/consts/const-eval/strlen.rs:12:20: 12:39
    let _5: &[u8];                       // in scope 0 at ui/consts/const-eval/strlen.rs:12:20: 12:32
    let mut _6: &str;                    // in scope 0 at ui/consts/const-eval/strlen.rs:12:20: 12:32
    let _7: &str;                        // in scope 0 at ui/consts/const-eval/strlen.rs:12:20: 12:21
    let mut _9: std::option::Option<(usize, &u8)>; // in scope 0 at ui/consts/const-eval/strlen.rs:12:20: 12:51
    let mut _10: &mut std::iter::Enumerate<std::slice::Iter<'_, u8>>; // in scope 0 at ui/consts/const-eval/strlen.rs:12:20: 12:51
    let mut _11: &mut std::iter::Enumerate<std::slice::Iter<'_, u8>>; // in scope 0 at ui/consts/const-eval/strlen.rs:12:20: 12:51
    let mut _12: isize;                  // in scope 0 at ui/consts/const-eval/strlen.rs:12:5: 14:6
    let mut _15: u8;                     // in scope 0 at ui/consts/const-eval/strlen.rs:13:18: 13:19
    let _16: usize;                      // in scope 0 at ui/consts/const-eval/strlen.rs:13:13: 13:14
    let mut _17: usize;                  // in scope 0 at ui/consts/const-eval/strlen.rs:13:9: 13:15
    let mut _18: bool;                   // in scope 0 at ui/consts/const-eval/strlen.rs:13:9: 13:15
    let mut _19: &u8;                    // in scope 0 at ui/consts/const-eval/strlen.rs:12:20: 12:51
    scope 1 {
        debug buf => _0;                 // in scope 1 at ui/consts/const-eval/strlen.rs:11:9: 11:16
        let mut _8: std::iter::Enumerate<std::slice::Iter<'_, u8>>; // in scope 1 at ui/consts/const-eval/strlen.rs:12:20: 12:51
        scope 2 {
            debug iter => _8;            // in scope 2 at ui/consts/const-eval/strlen.rs:12:20: 12:51
            let _13: usize;              // in scope 2 at ui/consts/const-eval/strlen.rs:12:10: 12:11
            let _14: u8;                 // in scope 2 at ui/consts/const-eval/strlen.rs:12:14: 12:15
            scope 3 {
                debug i => _13;          // in scope 3 at ui/consts/const-eval/strlen.rs:12:10: 12:11
                debug c => _14;          // in scope 3 at ui/consts/const-eval/strlen.rs:12:14: 12:15
            }
        }
    }

    bb0: {
        _0 = [const 0_u8; 3];            // scope 0 at ui/consts/const-eval/strlen.rs:11:19: 11:31
        _7 = const _;                    // scope 1 at ui/consts/const-eval/strlen.rs:12:20: 12:21
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:12:20: 12:21
                                         // + literal: Const { ty: &str, val: Unevaluated(S, [], None) }
        _6 = _7;                         // scope 1 at ui/consts/const-eval/strlen.rs:12:20: 12:32
        _5 = core::str::<impl str>::as_bytes(move _6) -> bb1; // scope 1 at ui/consts/const-eval/strlen.rs:12:20: 12:32
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:12:22: 12:30
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 1 at ui/consts/const-eval/strlen.rs:12:20: 12:39
        _3 = core::slice::<impl [u8]>::iter(move _4) -> bb2; // scope 1 at ui/consts/const-eval/strlen.rs:12:20: 12:39
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:12:33: 12:37
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> std::slice::Iter<'a, u8> {core::slice::<impl [u8]>::iter}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = <std::slice::Iter<'_, u8> as Iterator>::enumerate(move _3) -> bb3; // scope 1 at ui/consts/const-eval/strlen.rs:12:20: 12:51
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:12:40: 12:49
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, u8>) -> Enumerate<std::slice::Iter<'_, u8>> {<std::slice::Iter<'_, u8> as Iterator>::enumerate}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = <Enumerate<std::slice::Iter<'_, u8>> as IntoIterator>::into_iter(move _2) -> bb4; // scope 1 at ui/consts/const-eval/strlen.rs:12:20: 12:51
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:12:20: 12:51
                                         // + literal: Const { ty: fn(Enumerate<std::slice::Iter<'_, u8>>) -> <Enumerate<std::slice::Iter<'_, u8>> as IntoIterator>::IntoIter {<Enumerate<std::slice::Iter<'_, u8>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = move _1;                    // scope 1 at ui/consts/const-eval/strlen.rs:12:20: 12:51
        goto -> bb5;                     // scope 2 at ui/consts/const-eval/strlen.rs:12:5: 14:6
    }

    bb5: {
        _11 = &mut _8;                   // scope 2 at ui/consts/const-eval/strlen.rs:12:20: 12:51
        _10 = &mut (*_11);               // scope 2 at ui/consts/const-eval/strlen.rs:12:20: 12:51
        _9 = <Enumerate<std::slice::Iter<'_, u8>> as Iterator>::next(move _10) -> bb6; // scope 2 at ui/consts/const-eval/strlen.rs:12:20: 12:51
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:12:20: 12:51
                                         // + literal: Const { ty: for<'a> fn(&'a mut Enumerate<std::slice::Iter<'_, u8>>) -> Option<<Enumerate<std::slice::Iter<'_, u8>> as Iterator>::Item> {<Enumerate<std::slice::Iter<'_, u8>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = discriminant(_9);          // scope 2 at ui/consts/const-eval/strlen.rs:12:20: 12:51
        switchInt(move _12) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 2 at ui/consts/const-eval/strlen.rs:12:20: 12:51
    }

    bb7: {
        _19 = deref_copy (((_9 as Some).0: (usize, &u8)).1: &u8); // scope 2 at ui/consts/const-eval/strlen.rs:12:14: 12:15
        _14 = (*_19);                    // scope 2 at ui/consts/const-eval/strlen.rs:12:14: 12:15
        _13 = (((_9 as Some).0: (usize, &u8)).0: usize); // scope 2 at ui/consts/const-eval/strlen.rs:12:10: 12:11
        _15 = _14;                       // scope 3 at ui/consts/const-eval/strlen.rs:13:18: 13:19
        _16 = _13;                       // scope 3 at ui/consts/const-eval/strlen.rs:13:13: 13:14
        _17 = const 3_usize;             // scope 3 at ui/consts/const-eval/strlen.rs:13:9: 13:15
        _18 = Lt(_16, _17);              // scope 3 at ui/consts/const-eval/strlen.rs:13:9: 13:15
        assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, _16) -> bb10; // scope 3 at ui/consts/const-eval/strlen.rs:13:9: 13:15
    }

    bb8: {
        unreachable;                     // scope 2 at ui/consts/const-eval/strlen.rs:12:20: 12:51
    }

    bb9: {
        return;                          // scope 0 at ui/consts/const-eval/strlen.rs:16:2: 16:2
    }

    bb10: {
        _0[_16] = move _15;              // scope 3 at ui/consts/const-eval/strlen.rs:13:9: 13:19
        goto -> bb5;                     // scope 2 at ui/consts/const-eval/strlen.rs:12:5: 14:6
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-eval/strlen.rs:10:22: 10:29
    let mut _1: &str;                    // in scope 0 at ui/consts/const-eval/strlen.rs:10:22: 10:29
    let _2: &str;                        // in scope 0 at ui/consts/const-eval/strlen.rs:10:22: 10:23

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-eval/strlen.rs:10:22: 10:29
        StorageLive(_2);                 // scope 0 at ui/consts/const-eval/strlen.rs:10:22: 10:23
        _2 = const _;                    // scope 0 at ui/consts/const-eval/strlen.rs:10:22: 10:23
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:10:22: 10:23
                                         // + literal: Const { ty: &str, val: Unevaluated(S, [], None) }
        _1 = &(*_2);                     // scope 0 at ui/consts/const-eval/strlen.rs:10:22: 10:29
        ConstEvalCounter;                // scope 0 at ui/consts/const-eval/strlen.rs:10:22: 10:29
        _0 = core::str::<impl str>::len(move _1) -> bb1; // scope 0 at ui/consts/const-eval/strlen.rs:10:22: 10:29
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:10:24: 10:27
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> usize {core::str::<impl str>::len}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/const-eval/strlen.rs:10:28: 10:29
        StorageDead(_1);                 // scope 0 at ui/consts/const-eval/strlen.rs:10:28: 10:29
        return;                          // scope 0 at ui/consts/const-eval/strlen.rs:10:22: 10:29
    }
}

foo::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-eval/strlen.rs:11:23: 11:30
    let mut _1: &str;                    // in scope 0 at ui/consts/const-eval/strlen.rs:11:23: 11:30
    let _2: &str;                        // in scope 0 at ui/consts/const-eval/strlen.rs:11:23: 11:24

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-eval/strlen.rs:11:23: 11:30
        StorageLive(_2);                 // scope 0 at ui/consts/const-eval/strlen.rs:11:23: 11:24
        _2 = const _;                    // scope 0 at ui/consts/const-eval/strlen.rs:11:23: 11:24
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:11:23: 11:24
                                         // + literal: Const { ty: &str, val: Unevaluated(S, [], None) }
        _1 = &(*_2);                     // scope 0 at ui/consts/const-eval/strlen.rs:11:23: 11:30
        ConstEvalCounter;                // scope 0 at ui/consts/const-eval/strlen.rs:11:23: 11:30
        _0 = core::str::<impl str>::len(move _1) -> bb1; // scope 0 at ui/consts/const-eval/strlen.rs:11:23: 11:30
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:11:25: 11:28
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> usize {core::str::<impl str>::len}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/const-eval/strlen.rs:11:29: 11:30
        StorageDead(_1);                 // scope 0 at ui/consts/const-eval/strlen.rs:11:29: 11:30
        return;                          // scope 0 at ui/consts/const-eval/strlen.rs:11:23: 11:30
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/strlen.rs:18:11: 18:11
    let mut _1: (&&[u8], &&[u8; 3]);     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &&[u8];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: &[u8];                       // in scope 0 at ui/consts/const-eval/strlen.rs:19:16: 19:26
    let _4: &[u8];                       // in scope 0 at ui/consts/const-eval/strlen.rs:19:17: 19:26
    let mut _5: &[u8; 3];                // in scope 0 at ui/consts/const-eval/strlen.rs:19:17: 19:22
    let _6: [u8; 3];                     // in scope 0 at ui/consts/const-eval/strlen.rs:19:17: 19:22
    let mut _7: std::ops::RangeFull;     // in scope 0 at ui/consts/const-eval/strlen.rs:19:23: 19:25
    let mut _8: &&[u8; 3];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _9: &&[u8];                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _10: &&[u8; 3];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: &&[u8];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: &&[u8; 3];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &&[u8];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &&[u8];                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &&[u8; 3];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &&[u8; 3];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _23: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _24: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _25: usize;                      // in scope 0 at ui/consts/const-eval/strlen.rs:20:16: 20:27
    let mut _26: &[u8];                  // in scope 0 at ui/consts/const-eval/strlen.rs:20:16: 20:27
    let mut _27: &[u8; 3];               // in scope 0 at ui/consts/const-eval/strlen.rs:20:16: 20:27
    let _28: [u8; 3];                    // in scope 0 at ui/consts/const-eval/strlen.rs:20:16: 20:21
    let mut _29: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _30: usize;                      // in scope 0 at ui/consts/const-eval/strlen.rs:20:29: 20:36
    let mut _31: &str;                   // in scope 0 at ui/consts/const-eval/strlen.rs:20:29: 20:36
    let _32: &str;                       // in scope 0 at ui/consts/const-eval/strlen.rs:20:29: 20:30
    let _33: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _34: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _35: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _36: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _37: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _38: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _40: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _41: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _42: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _43: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _44: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _45: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _47: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _48: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _49: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _50: usize;                      // in scope 0 at ui/consts/const-eval/strlen.rs:22:21: 22:28
    let mut _51: &str;                   // in scope 0 at ui/consts/const-eval/strlen.rs:22:21: 22:28
    let _52: &str;                       // in scope 0 at ui/consts/const-eval/strlen.rs:22:21: 22:22
    let _53: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _54: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _55: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _56: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _57: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _58: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _60: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _61: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _62: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _63: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _64: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _65: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _67: (&&[u8], &[u8; 3]);     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _68: &&[u8];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _69: &[u8; 3];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _70: [u8; 3];                    // in scope 0 at ui/consts/const-eval/strlen.rs:23:19: 23:24
    let _71: &&[u8];                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _72: &[u8; 3];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _73: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _74: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _75: &&[u8];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _76: &[u8; 3];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _78: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _79: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _80: &&[u8];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _81: &&[u8];                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _82: &[u8; 3];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _83: &[u8; 3];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _85: (&&[u8], &&[u8; 3]);    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _86: &&[u8];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _87: &&[u8; 3];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _88: &&[u8];                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _89: &&[u8; 3];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _90: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _91: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _92: &&[u8];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _93: &&[u8; 3];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _95: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _96: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _97: &&[u8];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _98: &&[u8];                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _99: &&[u8; 3];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _100: &&[u8; 3];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _101: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _102: (&usize, &usize);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _103: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _104: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _105: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _106: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _108: (&usize, &usize);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _109: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _110: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _111: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _112: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _114: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _115: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _116: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _117: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _118: &&[u8; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _119: &&[u8];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _120: &&[u8];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _121: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _122: &&[u8; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _9;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _10;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _15: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _15;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _33;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _34;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _39: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _39;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _53;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _54;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _59: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _59;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug left_val => _71;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _72;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _77: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 8 {
            debug kind => _77;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 9 {
        debug left_val => _88;           // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _89;          // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _94: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 10 {
            debug kind => _94;           // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 11 {
        debug left_val => _105;          // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _106;         // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _107: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 12 {
            debug kind => _107;          // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 13 {
        debug left_val => _111;          // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _112;         // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _113: core::panicking::AssertKind; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 14 {
            debug kind => _113;          // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _6 = foo() -> bb1;               // scope 0 at ui/consts/const-eval/strlen.rs:19:17: 19:22
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:19:17: 19:20
                                         // + literal: Const { ty: fn() -> [u8; S.len()] {foo}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_6;                        // scope 0 at ui/consts/const-eval/strlen.rs:19:17: 19:22
        _4 = <[u8; 3] as Index<RangeFull>>::index(move _5, move _7) -> bb2; // scope 0 at ui/consts/const-eval/strlen.rs:19:17: 19:26
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:19:17: 19:26
                                         // + literal: Const { ty: for<'a> fn(&'a [u8; 3], RangeFull) -> &'a <[u8; 3] as Index<RangeFull>>::Output {<[u8; 3] as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = _4;                         // scope 0 at ui/consts/const-eval/strlen.rs:19:16: 19:26
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _122 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u8; 3], val: Unevaluated(main, [], Some(promoted[8])) }
        _8 = _122;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _8);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_1.0: &&[u8]);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_1.1: &&[u8; 3]);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = _9;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = _10;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = <&[u8] as PartialEq<&[u8; 3]>>::eq(move _13, move _14) -> bb3; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[u8], &'b &[u8; 3]) -> bool {<&[u8] as PartialEq<&[u8; 3]>>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = Not(move _12);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb5, otherwise: bb4]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _15 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<&[u8], &[u8; 3]>(move _17, move _18, move _20, move _22); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[u8], &'b &[u8; 3], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[u8], &[u8; 3]>}, val: Value(<ZST>) }
    }

    bb5: {
        _28 = foo() -> bb6;              // scope 0 at ui/consts/const-eval/strlen.rs:20:16: 20:21
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:20:16: 20:19
                                         // + literal: Const { ty: fn() -> [u8; S.len()] {foo}, val: Value(<ZST>) }
    }

    bb6: {
        _27 = &_28;                      // scope 0 at ui/consts/const-eval/strlen.rs:20:16: 20:27
        _26 = move _27 as &[u8] (Pointer(Unsize)); // scope 0 at ui/consts/const-eval/strlen.rs:20:16: 20:27
        _25 = Len((*_26));               // scope 0 at ui/consts/const-eval/strlen.rs:20:16: 20:27
        _24 = &_25;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _32 = const _;                   // scope 0 at ui/consts/const-eval/strlen.rs:20:29: 20:30
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:20:29: 20:30
                                         // + literal: Const { ty: &str, val: Unevaluated(S, [], None) }
        _31 = _32;                       // scope 0 at ui/consts/const-eval/strlen.rs:20:29: 20:36
        _30 = core::str::<impl str>::len(move _31) -> bb7; // scope 0 at ui/consts/const-eval/strlen.rs:20:29: 20:36
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:20:31: 20:34
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> usize {core::str::<impl str>::len}, val: Value(<ZST>) }
    }

    bb7: {
        _29 = &_30;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _23 = (move _24, move _29);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _33 = (_23.0: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _34 = (_23.1: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _37 = (*_33);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _38 = (*_34);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _36 = Eq(move _37, move _38);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _35 = Not(move _36);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _35) -> [0: bb9, otherwise: bb8]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _39 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _41 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _43 = _33;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _42 = _43;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _45 = _34;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _44 = _45;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _46 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _40 = core::panicking::assert_failed::<usize, usize>(move _41, move _42, move _44, move _46); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb9: {
        _121 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[7])) }
        _48 = _121;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _52 = const _;                   // scope 0 at ui/consts/const-eval/strlen.rs:22:21: 22:22
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:22:21: 22:22
                                         // + literal: Const { ty: &str, val: Unevaluated(S, [], None) }
        _51 = _52;                       // scope 0 at ui/consts/const-eval/strlen.rs:22:21: 22:28
        _50 = core::str::<impl str>::len(move _51) -> bb10; // scope 0 at ui/consts/const-eval/strlen.rs:22:21: 22:28
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:22:23: 22:26
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> usize {core::str::<impl str>::len}, val: Value(<ZST>) }
    }

    bb10: {
        _49 = &_50;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _47 = (move _48, move _49);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _53 = (_47.0: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _54 = (_47.1: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _57 = const 3_usize;             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _58 = (*_54);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _56 = Eq(move _57, move _58);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _55 = Not(move _56);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _55) -> [0: bb12, otherwise: bb11]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _59 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _61 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _63 = _53;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _62 = _63;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _65 = _54;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _64 = _65;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _66 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _60 = core::panicking::assert_failed::<usize, usize>(move _61, move _62, move _64, move _66); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb12: {
        _120 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&[u8], val: Unevaluated(main, [], Some(promoted[6])) }
        _68 = _120;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _70 = foo() -> bb13;             // scope 0 at ui/consts/const-eval/strlen.rs:23:19: 23:24
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:23:19: 23:22
                                         // + literal: Const { ty: fn() -> [u8; S.len()] {foo}, val: Value(<ZST>) }
    }

    bb13: {
        _69 = &_70;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _67 = (move _68, move _69);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _71 = (_67.0: &&[u8]);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _72 = (_67.1: &[u8; 3]);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _75 = _71;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _76 = _72;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _74 = <&[u8] as PartialEq<[u8; 3]>>::eq(move _75, move _76) -> bb14; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[u8], &'b [u8; 3]) -> bool {<&[u8] as PartialEq<[u8; 3]>>::eq}, val: Value(<ZST>) }
    }

    bb14: {
        _73 = Not(move _74);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _73) -> [0: bb16, otherwise: bb15]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _77 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _79 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _81 = _71;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _80 = _81;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _83 = _72;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _82 = _83;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _84 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _78 = core::panicking::assert_failed::<&[u8], [u8; 3]>(move _79, move _80, move _82, move _84); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[u8], &'b [u8; 3], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[u8], [u8; 3]>}, val: Value(<ZST>) }
    }

    bb16: {
        _119 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&[u8], val: Unevaluated(main, [], Some(promoted[5])) }
        _86 = _119;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _118 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u8; 3], val: Unevaluated(main, [], Some(promoted[4])) }
        _87 = _118;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _85 = (move _86, move _87);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _88 = (_85.0: &&[u8]);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _89 = (_85.1: &&[u8; 3]);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _92 = _88;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _93 = _89;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _91 = <&[u8] as PartialEq<&[u8; 3]>>::eq(move _92, move _93) -> bb17; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[u8], &'b &[u8; 3]) -> bool {<&[u8] as PartialEq<&[u8; 3]>>::eq}, val: Value(<ZST>) }
    }

    bb17: {
        _90 = Not(move _91);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _90) -> [0: bb19, otherwise: bb18]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb18: {
        _94 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _96 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _98 = _88;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _97 = _98;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _100 = _89;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _99 = _100;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _101 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _95 = core::panicking::assert_failed::<&[u8], &[u8; 3]>(move _96, move _97, move _99, move _101); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[u8], &'b &[u8; 3], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[u8], &[u8; 3]>}, val: Value(<ZST>) }
    }

    bb19: {
        _117 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[3])) }
        _103 = _117;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _116 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[2])) }
        _104 = _116;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _102 = (move _103, move _104);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _105 = (_102.0: &usize);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _106 = (_102.1: &usize);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _115 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[1])) }
        _109 = _115;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _114 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _110 = _114;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _108 = (move _109, move _110);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _111 = (_108.0: &usize);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _112 = (_108.1: &usize);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        return;                          // scope 0 at ui/consts/const-eval/strlen.rs:31:2: 31:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/consts/const-eval/strlen.rs:26:19: 26:20

    bb0: {
        _1 = const 3_usize;              // scope 0 at ui/consts/const-eval/strlen.rs:26:19: 26:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/consts/const-eval/strlen.rs:26:16: 26:17

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-eval/strlen.rs:26:16: 26:17
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/consts/const-eval/strlen.rs:25:19: 25:20

    bb0: {
        _1 = const 3_usize;              // scope 0 at ui/consts/const-eval/strlen.rs:25:19: 25:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/consts/const-eval/strlen.rs:25:16: 25:17

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-eval/strlen.rs:25:16: 25:17
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[4] in main: &&[u8; 3] = {
    let mut _0: &&[u8; 3];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u8; 3];                // in scope 0 at ui/consts/const-eval/strlen.rs:24:19: 24:25

    bb0: {
        _1 = const b"foo";               // scope 0 at ui/consts/const-eval/strlen.rs:24:19: 24:25
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:24:19: 24:25
                                         // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc10)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

alloc10 (size: 3, align: 1) {
    66 6f 6f                                        │ foo
}

promoted[5] in main: &&[u8] = {
    let mut _0: &&[u8];                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &[u8];                   // in scope 0 at ui/consts/const-eval/strlen.rs:24:16: 24:17

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-eval/strlen.rs:24:16: 24:17
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:24:16: 24:17
                                         // + literal: Const { ty: &[u8], val: Unevaluated(B, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[6] in main: &&[u8] = {
    let mut _0: &&[u8];                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &[u8];                   // in scope 0 at ui/consts/const-eval/strlen.rs:23:16: 23:17

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-eval/strlen.rs:23:16: 23:17
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:23:16: 23:17
                                         // + literal: Const { ty: &[u8], val: Unevaluated(B, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[7] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/consts/const-eval/strlen.rs:22:16: 22:19

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-eval/strlen.rs:22:16: 22:19
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[8] in main: &&[u8; 3] = {
    let mut _0: &&[u8; 3];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u8; 3];                // in scope 0 at ui/consts/const-eval/strlen.rs:19:28: 19:34

    bb0: {
        _1 = const b"foo";               // scope 0 at ui/consts/const-eval/strlen.rs:19:28: 19:34
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:19:28: 19:34
                                         // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc9)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

alloc9 (size: 3, align: 1) {
    66 6f 6f                                        │ foo
}

const LEN: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-eval/strlen.rs:21:16: 21:21
    let mut _1: &str;                    // in scope 0 at ui/consts/const-eval/strlen.rs:21:24: 21:31
    let _2: &str;                        // in scope 0 at ui/consts/const-eval/strlen.rs:21:24: 21:25

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-eval/strlen.rs:21:24: 21:31
        StorageLive(_2);                 // scope 0 at ui/consts/const-eval/strlen.rs:21:24: 21:25
        _2 = const _;                    // scope 0 at ui/consts/const-eval/strlen.rs:21:24: 21:25
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:21:24: 21:25
                                         // + literal: Const { ty: &str, val: Unevaluated(S, [], None) }
        _1 = &(*_2);                     // scope 0 at ui/consts/const-eval/strlen.rs:21:24: 21:31
        ConstEvalCounter;                // scope 0 at ui/consts/const-eval/strlen.rs:21:24: 21:31
        _0 = core::str::<impl str>::len(move _1) -> bb1; // scope 0 at ui/consts/const-eval/strlen.rs:21:24: 21:31
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:21:26: 21:29
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> usize {core::str::<impl str>::len}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/const-eval/strlen.rs:21:30: 21:31
        StorageDead(_1);                 // scope 0 at ui/consts/const-eval/strlen.rs:21:30: 21:31
        return;                          // scope 0 at ui/consts/const-eval/strlen.rs:21:5: 21:32
    }
}

const EMPTY: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-eval/strlen.rs:29:18: 29:22
    let mut _1: &str;                    // in scope 0 at ui/consts/const-eval/strlen.rs:29:25: 29:38
    let _2: &str;                        // in scope 0 at ui/consts/const-eval/strlen.rs:29:25: 29:27

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-eval/strlen.rs:29:25: 29:38
        StorageLive(_2);                 // scope 0 at ui/consts/const-eval/strlen.rs:29:25: 29:27
        _2 = const "";                   // scope 0 at ui/consts/const-eval/strlen.rs:29:25: 29:27
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:29:25: 29:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1 = &(*_2);                     // scope 0 at ui/consts/const-eval/strlen.rs:29:25: 29:38
        ConstEvalCounter;                // scope 0 at ui/consts/const-eval/strlen.rs:29:25: 29:38
        _0 = core::str::<impl str>::is_empty(move _1) -> bb1; // scope 0 at ui/consts/const-eval/strlen.rs:29:25: 29:38
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/strlen.rs:29:28: 29:36
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> bool {core::str::<impl str>::is_empty}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/const-eval/strlen.rs:29:37: 29:38
        StorageDead(_1);                 // scope 0 at ui/consts/const-eval/strlen.rs:29:37: 29:38
        return;                          // scope 0 at ui/consts/const-eval/strlen.rs:29:5: 29:39
    }
}
