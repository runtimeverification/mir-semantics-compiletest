// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const-eval/ice-packed.rs:5:16: 5:21>::clone(_1: &Num) -> Num {
    debug self => _1;                    // in scope 0 at ui/consts/const-eval/ice-packed.rs:5:16: 5:21
    let mut _0: Num;                     // return place in scope 0 at ui/consts/const-eval/ice-packed.rs:5:16: 5:21
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/consts/const-eval/ice-packed.rs:5:16: 5:21
        return;                          // scope 0 at ui/consts/const-eval/ice-packed.rs:5:21: 5:21
    }
}

fn <impl at ui/consts/const-eval/ice-packed.rs:5:23: 5:32>::eq(_1: &Num, _2: &Num) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/const-eval/ice-packed.rs:5:23: 5:32
    debug other => _2;                   // in scope 0 at ui/consts/const-eval/ice-packed.rs:5:23: 5:32
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-eval/ice-packed.rs:5:23: 5:32
    let mut _3: u64;                     // in scope 0 at ui/consts/const-eval/ice-packed.rs:7:16: 7:19
    let mut _4: u64;                     // in scope 0 at ui/consts/const-eval/ice-packed.rs:7:16: 7:19

    bb0: {
        _3 = ((*_1).0: u64);             // scope 0 at ui/consts/const-eval/ice-packed.rs:7:16: 7:19
        _4 = ((*_2).0: u64);             // scope 0 at ui/consts/const-eval/ice-packed.rs:7:16: 7:19
        _0 = Eq(move _3, move _4);       // scope 0 at ui/consts/const-eval/ice-packed.rs:7:16: 7:19
        return;                          // scope 0 at ui/consts/const-eval/ice-packed.rs:5:32: 5:32
    }
}

fn <impl at ui/consts/const-eval/ice-packed.rs:5:34: 5:36>::assert_receiver_is_total_eq(_1: &Num) -> () {
    debug self => _1;                    // in scope 0 at ui/consts/const-eval/ice-packed.rs:5:34: 5:36
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/ice-packed.rs:5:34: 5:36
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/consts/const-eval/ice-packed.rs:5:36: 5:36
    }
}

const <impl at ui/consts/const-eval/ice-packed.rs:9:1: 9:9>::ZERO: Num = {
    let mut _0: Num;                     // return place in scope 0 at ui/consts/const-eval/ice-packed.rs:10:21: 10:25

    bb0: {
        _0 = Num(const 0_u64);           // scope 0 at ui/consts/const-eval/ice-packed.rs:10:28: 10:34
        return;                          // scope 0 at ui/consts/const-eval/ice-packed.rs:10:5: 10:35
    }
}

fn decrement(_1: Num) -> Num {
    debug a => _1;                       // in scope 0 at ui/consts/const-eval/ice-packed.rs:13:18: 13:19
    let mut _0: Num;                     // return place in scope 0 at ui/consts/const-eval/ice-packed.rs:13:29: 13:32
    let _2: Num;                         // in scope 0 at ui/consts/const-eval/ice-packed.rs:16:9: 16:10
    let mut _3: u64;                     // in scope 0 at ui/consts/const-eval/ice-packed.rs:16:18: 16:25
    let mut _4: u64;                     // in scope 0 at ui/consts/const-eval/ice-packed.rs:16:18: 16:21
    let mut _5: (u64, bool);             // in scope 0 at ui/consts/const-eval/ice-packed.rs:16:18: 16:25
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const-eval/ice-packed.rs:16:9: 16:10
    }

    bb0: {
        switchInt((_1.0: u64)) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/consts/const-eval/ice-packed.rs:14:5: 14:12
    }

    bb1: {
        _2 = _1;                         // scope 0 at ui/consts/const-eval/ice-packed.rs:16:9: 16:10
        _4 = (_2.0: u64);                // scope 1 at ui/consts/const-eval/ice-packed.rs:16:18: 16:21
        _5 = CheckedSub(_4, const 1_u64); // scope 1 at ui/consts/const-eval/ice-packed.rs:16:18: 16:25
        assert(!move (_5.1: bool), "attempt to compute `{} - {}`, which would overflow", move _4, const 1_u64) -> bb3; // scope 1 at ui/consts/const-eval/ice-packed.rs:16:18: 16:25
    }

    bb2: {
        _0 = const _;                    // scope 0 at ui/consts/const-eval/ice-packed.rs:15:22: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/ice-packed.rs:15:22: 15:31
                                         // + literal: Const { ty: Num, val: Unevaluated(Num::ZERO, [], None) }
        goto -> bb4;                     // scope 0 at ui/consts/const-eval/ice-packed.rs:15:22: 15:31
    }

    bb3: {
        _3 = move (_5.0: u64);           // scope 1 at ui/consts/const-eval/ice-packed.rs:16:18: 16:25
        _0 = Num(move _3);               // scope 1 at ui/consts/const-eval/ice-packed.rs:16:14: 16:26
        goto -> bb4;                     // scope 0 at ui/consts/const-eval/ice-packed.rs:16:25: 16:26
    }

    bb4: {
        return;                          // scope 0 at ui/consts/const-eval/ice-packed.rs:18:2: 18:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/ice-packed.rs:20:11: 20:11

    bb0: {
        return;                          // scope 0 at ui/consts/const-eval/ice-packed.rs:21:2: 21:2
    }
}

fn Num(_1: u64) -> Num {
    let mut _0: Num;                     // return place in scope 0 at ui/consts/const-eval/ice-packed.rs:7:1: 7:15

    bb0: {
        _0 = Num(move _1);               // scope 0 at ui/consts/const-eval/ice-packed.rs:7:1: 7:15
        return;                          // scope 0 at ui/consts/const-eval/ice-packed.rs:7:1: 7:15
    }
}

// MIR FOR CTFE
fn Num(_1: u64) -> Num {
    let mut _0: Num;                     // return place in scope 0 at ui/consts/const-eval/ice-packed.rs:7:1: 7:15

    bb0: {
        _0 = Num(move _1);               // scope 0 at ui/consts/const-eval/ice-packed.rs:7:1: 7:15
        return;                          // scope 0 at ui/consts/const-eval/ice-packed.rs:7:1: 7:15
    }
}
