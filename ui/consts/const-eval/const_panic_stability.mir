// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/const_panic_stability.rs:11:16: 11:16
    let mut _1: !;                       // in scope 0 at ui/consts/const-eval/const_panic_stability.rs:12:5: 12:19

    bb0: {
        _1 = core::panicking::panic(const "assertion failed: false"); // scope 0 at ui/consts/const-eval/const_panic_stability.rs:12:5: 12:19
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/const_panic_stability.rs:12:5: 12:19
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

// MIR FOR CTFE
fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/const_panic_stability.rs:11:16: 11:16
    let mut _1: !;                       // in scope 0 at ui/consts/const-eval/const_panic_stability.rs:11:16: 17:2
    let _2: ();                          // in scope 0 at ui/consts/const-eval/const_panic_stability.rs:12:5: 12:19
    let mut _3: bool;                    // in scope 0 at ui/consts/const-eval/const_panic_stability.rs:12:5: 12:19
    let mut _4: !;                       // in scope 0 at ui/consts/const-eval/const_panic_stability.rs:12:5: 12:19
    let _5: ();                          // in scope 0 at ui/consts/const-eval/const_panic_stability.rs:13:5: 13:26
    let mut _6: bool;                    // in scope 0 at ui/consts/const-eval/const_panic_stability.rs:13:5: 13:26
    let mut _7: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let _8: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _9: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _10: &str;                   // in scope 0 at ui/consts/const-eval/const_panic_stability.rs:14:12: 14:21

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const-eval/const_panic_stability.rs:12:5: 12:19
        StorageLive(_3);                 // scope 0 at ui/consts/const-eval/const_panic_stability.rs:12:5: 12:19
        _3 = Not(const false);           // scope 0 at ui/consts/const-eval/const_panic_stability.rs:12:5: 12:19
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/consts/const-eval/const_panic_stability.rs:12:5: 12:19
    }

    bb1: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-eval/const_panic_stability.rs:12:5: 12:19
        ConstEvalCounter;                // scope 0 at ui/consts/const-eval/const_panic_stability.rs:12:5: 12:19
        _4 = core::panicking::panic(const "assertion failed: false"); // scope 0 at ui/consts/const-eval/const_panic_stability.rs:12:5: 12:19
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/const_panic_stability.rs:12:5: 12:19
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _2 = const ();                   // scope 0 at ui/consts/const-eval/const_panic_stability.rs:12:19: 12:19
        StorageDead(_3);                 // scope 0 at ui/consts/const-eval/const_panic_stability.rs:12:18: 12:19
        StorageDead(_2);                 // scope 0 at ui/consts/const-eval/const_panic_stability.rs:12:18: 12:19
        StorageLive(_5);                 // scope 0 at ui/consts/const-eval/const_panic_stability.rs:13:5: 13:26
        StorageLive(_6);                 // scope 0 at ui/consts/const-eval/const_panic_stability.rs:13:5: 13:26
        _6 = Not(const false);           // scope 0 at ui/consts/const-eval/const_panic_stability.rs:13:5: 13:26
        switchInt(move _6) -> [0: bb4, otherwise: bb3]; // scope 0 at ui/consts/const-eval/const_panic_stability.rs:13:5: 13:26
    }

    bb3: {
        StorageLive(_7);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
        ConstEvalCounter;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
        _7 = begin_panic::<&str>(const "foo"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/const_panic_stability.rs:13:20: 13:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _5 = const ();                   // scope 0 at ui/consts/const-eval/const_panic_stability.rs:13:26: 13:26
        StorageDead(_6);                 // scope 0 at ui/consts/const-eval/const_panic_stability.rs:13:25: 13:26
        StorageDead(_5);                 // scope 0 at ui/consts/const-eval/const_panic_stability.rs:13:25: 13:26
        StorageLive(_8);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:21:27: 23:6
        StorageLive(_9);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
        StorageLive(_10);                // scope 0 at ui/consts/const-eval/const_panic_stability.rs:14:12: 14:21
        _10 = const "foo";               // scope 0 at ui/consts/const-eval/const_panic_stability.rs:14:14: 14:19
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/const_panic_stability.rs:14:14: 14:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        ConstEvalCounter;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
        _9 = begin_panic::<&str>(move _10); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
    }
}
