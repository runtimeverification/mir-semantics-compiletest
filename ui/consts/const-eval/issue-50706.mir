// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const-eval/issue-50706.rs:5:10: 5:19>::eq(_1: &StatVariant, _2: &StatVariant) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/const-eval/issue-50706.rs:5:10: 5:19
    debug other => _2;                   // in scope 0 at ui/consts/const-eval/issue-50706.rs:5:10: 5:19
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-eval/issue-50706.rs:5:10: 5:19
    let mut _3: bool;                    // in scope 0 at ui/consts/const-eval/issue-50706.rs:7:5: 7:15
    let mut _4: u8;                      // in scope 0 at ui/consts/const-eval/issue-50706.rs:7:5: 7:15
    let mut _5: u8;                      // in scope 0 at ui/consts/const-eval/issue-50706.rs:7:5: 7:15
    let mut _6: bool;                    // in scope 0 at ui/consts/const-eval/issue-50706.rs:8:5: 8:14
    let mut _7: &();                     // in scope 0 at ui/consts/const-eval/issue-50706.rs:8:5: 8:14
    let mut _8: &();                     // in scope 0 at ui/consts/const-eval/issue-50706.rs:8:5: 8:14

    bb0: {
        _4 = ((*_1).0: u8);              // scope 0 at ui/consts/const-eval/issue-50706.rs:7:5: 7:15
        _5 = ((*_2).0: u8);              // scope 0 at ui/consts/const-eval/issue-50706.rs:7:5: 7:15
        _3 = Eq(move _4, move _5);       // scope 0 at ui/consts/const-eval/issue-50706.rs:7:5: 7:15
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/consts/const-eval/issue-50706.rs:8:5: 8:14
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/consts/const-eval/issue-50706.rs:8:5: 8:14
        goto -> bb3;                     // scope 0 at ui/consts/const-eval/issue-50706.rs:8:5: 8:14
    }

    bb2: {
        _7 = &((*_1).1: ());             // scope 0 at ui/consts/const-eval/issue-50706.rs:8:5: 8:14
        _8 = &((*_2).1: ());             // scope 0 at ui/consts/const-eval/issue-50706.rs:8:5: 8:14
        _6 = <() as PartialEq>::eq(move _7, move _8) -> bb4; // scope 0 at ui/consts/const-eval/issue-50706.rs:8:5: 8:14
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/issue-50706.rs:8:5: 8:14
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (), &'b ()) -> bool {<() as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/consts/const-eval/issue-50706.rs:5:19: 5:19
    }

    bb4: {
        _0 = move _6;                    // scope 0 at ui/consts/const-eval/issue-50706.rs:8:5: 8:14
        goto -> bb3;                     // scope 0 at ui/consts/const-eval/issue-50706.rs:8:5: 8:14
    }
}

fn <impl at ui/consts/const-eval/issue-50706.rs:5:21: 5:23>::assert_receiver_is_total_eq(_1: &StatVariant) -> () {
    debug self => _1;                    // in scope 0 at ui/consts/const-eval/issue-50706.rs:5:21: 5:23
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/issue-50706.rs:5:21: 5:23
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;                          // scope 0 at ui/consts/const-eval/issue-50706.rs:5:23: 5:23
    }
}

fn <impl at ui/consts/const-eval/issue-50706.rs:11:10: 11:19>::eq(_1: &Stat, _2: &Stat) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/const-eval/issue-50706.rs:11:10: 11:19
    debug other => _2;                   // in scope 0 at ui/consts/const-eval/issue-50706.rs:11:10: 11:19
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-eval/issue-50706.rs:11:10: 11:19
    let mut _3: bool;                    // in scope 0 at ui/consts/const-eval/issue-50706.rs:14:5: 14:21
    let mut _4: bool;                    // in scope 0 at ui/consts/const-eval/issue-50706.rs:13:5: 13:29
    let mut _5: &StatVariant;            // in scope 0 at ui/consts/const-eval/issue-50706.rs:13:5: 13:29
    let mut _6: &StatVariant;            // in scope 0 at ui/consts/const-eval/issue-50706.rs:13:5: 13:29
    let mut _7: bool;                    // in scope 0 at ui/consts/const-eval/issue-50706.rs:14:5: 14:21
    let mut _8: usize;                   // in scope 0 at ui/consts/const-eval/issue-50706.rs:14:5: 14:21
    let mut _9: usize;                   // in scope 0 at ui/consts/const-eval/issue-50706.rs:14:5: 14:21
    let mut _10: bool;                   // in scope 0 at ui/consts/const-eval/issue-50706.rs:15:5: 15:14
    let mut _11: &();                    // in scope 0 at ui/consts/const-eval/issue-50706.rs:15:5: 15:14
    let mut _12: &();                    // in scope 0 at ui/consts/const-eval/issue-50706.rs:15:5: 15:14

    bb0: {
        _5 = &((*_1).0: StatVariant);    // scope 0 at ui/consts/const-eval/issue-50706.rs:13:5: 13:29
        _6 = &((*_2).0: StatVariant);    // scope 0 at ui/consts/const-eval/issue-50706.rs:13:5: 13:29
        _4 = <StatVariant as PartialEq>::eq(move _5, move _6) -> bb7; // scope 0 at ui/consts/const-eval/issue-50706.rs:13:5: 13:29
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/issue-50706.rs:13:5: 13:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a StatVariant, &'b StatVariant) -> bool {<StatVariant as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/consts/const-eval/issue-50706.rs:15:5: 15:14
        goto -> bb3;                     // scope 0 at ui/consts/const-eval/issue-50706.rs:15:5: 15:14
    }

    bb2: {
        _11 = &((*_1).2: ());            // scope 0 at ui/consts/const-eval/issue-50706.rs:15:5: 15:14
        _12 = &((*_2).2: ());            // scope 0 at ui/consts/const-eval/issue-50706.rs:15:5: 15:14
        _10 = <() as PartialEq>::eq(move _11, move _12) -> bb8; // scope 0 at ui/consts/const-eval/issue-50706.rs:15:5: 15:14
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/issue-50706.rs:15:5: 15:14
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (), &'b ()) -> bool {<() as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/consts/const-eval/issue-50706.rs:11:19: 11:19
    }

    bb4: {
        _3 = const false;                // scope 0 at ui/consts/const-eval/issue-50706.rs:14:5: 14:21
        goto -> bb6;                     // scope 0 at ui/consts/const-eval/issue-50706.rs:14:5: 14:21
    }

    bb5: {
        _8 = ((*_1).1: usize);           // scope 0 at ui/consts/const-eval/issue-50706.rs:14:5: 14:21
        _9 = ((*_2).1: usize);           // scope 0 at ui/consts/const-eval/issue-50706.rs:14:5: 14:21
        _7 = Eq(move _8, move _9);       // scope 0 at ui/consts/const-eval/issue-50706.rs:14:5: 14:21
        _3 = move _7;                    // scope 0 at ui/consts/const-eval/issue-50706.rs:14:5: 14:21
        goto -> bb6;                     // scope 0 at ui/consts/const-eval/issue-50706.rs:14:5: 14:21
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/consts/const-eval/issue-50706.rs:15:5: 15:14
    }

    bb7: {
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/consts/const-eval/issue-50706.rs:14:5: 14:21
    }

    bb8: {
        _0 = move _10;                   // scope 0 at ui/consts/const-eval/issue-50706.rs:15:5: 15:14
        goto -> bb3;                     // scope 0 at ui/consts/const-eval/issue-50706.rs:15:5: 15:14
    }
}

fn <impl at ui/consts/const-eval/issue-50706.rs:11:21: 11:23>::assert_receiver_is_total_eq(_1: &Stat) -> () {
    debug self => _1;                    // in scope 0 at ui/consts/const-eval/issue-50706.rs:11:21: 11:23
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/issue-50706.rs:11:21: 11:23
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        return;                          // scope 0 at ui/consts/const-eval/issue-50706.rs:11:23: 11:23
    }
}

const <impl at ui/consts/const-eval/issue-50706.rs:18:1: 18:11>::TEST: StatVariant = {
    let mut _0: StatVariant;             // return place in scope 0 at ui/consts/const-eval/issue-50706.rs:19:21: 19:32
    let mut _1: ();                      // in scope 0 at ui/consts/const-eval/issue-50706.rs:19:61: 19:63

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-eval/issue-50706.rs:19:61: 19:63
        _1 = ();                         // scope 0 at ui/consts/const-eval/issue-50706.rs:19:61: 19:63
        _0 = const StatVariant {{ id: 0_u8, _priv: () }}; // scope 0 at ui/consts/const-eval/issue-50706.rs:19:35: 19:65
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/issue-50706.rs:19:35: 19:65
                                         // + literal: Const { ty: StatVariant, val: Value(Scalar(0x00)) }
        StorageDead(_1);                 // scope 0 at ui/consts/const-eval/issue-50706.rs:19:64: 19:65
        return;                          // scope 0 at ui/consts/const-eval/issue-50706.rs:19:5: 19:66
    }
}

const <impl at ui/consts/const-eval/issue-50706.rs:18:1: 18:11>::A: Stat = {
    let mut _0: Stat;                    // return place in scope 0 at ui/consts/const-eval/issue-50706.rs:21:18: 21:22
    let mut _1: ();                      // in scope 0 at ui/consts/const-eval/issue-50706.rs:24:17: 24:19

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-eval/issue-50706.rs:24:17: 24:19
        _1 = ();                         // scope 0 at ui/consts/const-eval/issue-50706.rs:24:17: 24:19
        _0 = Stat { variant: const _, index: const 0_usize, _priv: move _1 }; // scope 0 at ui/consts/const-eval/issue-50706.rs:21:25: 24:21
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/issue-50706.rs:22:19: 22:29
                                         // + literal: Const { ty: StatVariant, val: Unevaluated(Stats::TEST, [], None) }
        StorageDead(_1);                 // scope 0 at ui/consts/const-eval/issue-50706.rs:24:20: 24:21
        return;                          // scope 0 at ui/consts/const-eval/issue-50706.rs:21:5: 24:22
    }
}

fn <impl at ui/consts/const-eval/issue-50706.rs:27:1: 27:10>::from_index(_1: StatVariant, _2: usize) -> Option<Stat> {
    debug variant => _1;                 // in scope 0 at ui/consts/const-eval/issue-50706.rs:28:23: 28:30
    debug index => _2;                   // in scope 0 at ui/consts/const-eval/issue-50706.rs:28:45: 28:50
    let mut _0: std::option::Option<Stat>; // return place in scope 0 at ui/consts/const-eval/issue-50706.rs:28:62: 28:74
    let _3: Stat;                        // in scope 0 at ui/consts/const-eval/issue-50706.rs:29:13: 29:17
    let mut _4: StatVariant;             // in scope 0 at ui/consts/const-eval/issue-50706.rs:29:25: 29:32
    let mut _5: usize;                   // in scope 0 at ui/consts/const-eval/issue-50706.rs:29:34: 29:39
    let mut _6: ();                      // in scope 0 at ui/consts/const-eval/issue-50706.rs:29:48: 29:50
    scope 1 {
        debug stat => _3;                // in scope 1 at ui/consts/const-eval/issue-50706.rs:29:13: 29:17
    }

    bb0: {
        _4 = move _1;                    // scope 0 at ui/consts/const-eval/issue-50706.rs:29:25: 29:32
        _5 = _2;                         // scope 0 at ui/consts/const-eval/issue-50706.rs:29:34: 29:39
        _3 = Stat { variant: move _4, index: move _5, _priv: move _6 }; // scope 0 at ui/consts/const-eval/issue-50706.rs:29:20: 29:52
        switchInt(((_3.0: StatVariant).0: u8)) -> [0: bb1, otherwise: bb2]; // scope 1 at ui/consts/const-eval/issue-50706.rs:30:9: 30:19
    }

    bb1: {
        switchInt((_3.1: usize)) -> [0: bb3, otherwise: bb2]; // scope 1 at ui/consts/const-eval/issue-50706.rs:30:9: 30:19
    }

    bb2: {
        _0 = Option::<Stat>::None;       // scope 1 at ui/consts/const-eval/issue-50706.rs:32:18: 32:22
        goto -> bb4;                     // scope 1 at ui/consts/const-eval/issue-50706.rs:32:18: 32:22
    }

    bb3: {
        _0 = Option::<Stat>::Some(const _); // scope 1 at ui/consts/const-eval/issue-50706.rs:31:25: 31:39
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/issue-50706.rs:31:30: 31:38
                                         // + literal: Const { ty: Stat, val: Unevaluated(Stats::A, [], None) }
        goto -> bb4;                     // scope 1 at ui/consts/const-eval/issue-50706.rs:31:25: 31:39
    }

    bb4: {
        return;                          // scope 0 at ui/consts/const-eval/issue-50706.rs:34:6: 34:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/issue-50706.rs:37:11: 37:11

    bb0: {
        return;                          // scope 0 at ui/consts/const-eval/issue-50706.rs:37:13: 37:13
    }
}
