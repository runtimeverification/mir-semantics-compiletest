// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn bar() -> Option<Empty> {
    let mut _0: std::option::Option<Empty>; // return place in scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:16:13: 16:26

    bb0: {
        return;                          // scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:18:2: 18:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:20:11: 20:11
    let mut _1: std::option::Option<Empty>; // in scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:21:22: 21:27
    let mut _3: std::option::Option<Empty>; // in scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:25:22: 25:27
    scope 1 {
        debug x => _2;                   // in scope 1 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:21:17: 21:18
        let _2: Empty;                   // in scope 1 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:21:17: 21:18
    }
    scope 2 {
        debug x => _4;                   // in scope 2 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:25:17: 25:18
        let _4: Empty;                   // in scope 2 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:25:17: 25:18
    }

    bb0: {
        _1 = bar() -> bb1;               // scope 1 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:21:22: 21:27
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:21:22: 21:25
                                         // + literal: Const { ty: fn() -> Option<Empty> {bar}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = bar() -> bb2;               // scope 2 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:25:22: 25:27
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:25:22: 25:25
                                         // + literal: Const { ty: fn() -> Option<Empty> {bar}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:28:2: 28:2
    }
}

fn Test1::A(_1: u8) -> Test1 {
    let mut _0: Test1;                   // return place in scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:7:5: 7:6

    bb0: {
        _0 = Test1::A(move _1);          // scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:7:5: 7:6
        return;                          // scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:7:5: 7:6
    }
}

// MIR FOR CTFE
fn Test1::A(_1: u8) -> Test1 {
    let mut _0: Test1;                   // return place in scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:7:5: 7:6

    bb0: {
        _0 = Test1::A(move _1);          // scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:7:5: 7:6
        return;                          // scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:7:5: 7:6
    }
}

fn Test1::B(_1: Empty) -> Test1 {
    let mut _0: Test1;                   // return place in scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:8:5: 8:6

    bb0: {
        _0 = Test1::B(move _1);          // scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:8:5: 8:6
        return;                          // scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:8:5: 8:6
    }
}

// MIR FOR CTFE
fn Test1::B(_1: Empty) -> Test1 {
    let mut _0: Test1;                   // return place in scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:8:5: 8:6

    bb0: {
        _0 = Test1::B(move _1);          // scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:8:5: 8:6
        return;                          // scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:8:5: 8:6
    }
}

fn Test2::A(_1: u8) -> Test2 {
    let mut _0: Test2;                   // return place in scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:11:5: 11:6

    bb0: {
        _0 = Test2::A(move _1);          // scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:11:5: 11:6
        return;                          // scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:11:5: 11:6
    }
}

// MIR FOR CTFE
fn Test2::A(_1: u8) -> Test2 {
    let mut _0: Test2;                   // return place in scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:11:5: 11:6

    bb0: {
        _0 = Test2::A(move _1);          // scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:11:5: 11:6
        return;                          // scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:11:5: 11:6
    }
}

fn Test2::B(_1: Empty) -> Test2 {
    let mut _0: Test2;                   // return place in scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:12:5: 12:6

    bb0: {
        _0 = Test2::B(move _1);          // scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:12:5: 12:6
        return;                          // scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:12:5: 12:6
    }
}

// MIR FOR CTFE
fn Test2::B(_1: Empty) -> Test2 {
    let mut _0: Test2;                   // return place in scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:12:5: 12:6

    bb0: {
        _0 = Test2::B(move _1);          // scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:12:5: 12:6
        return;                          // scope 0 at ui/consts/const-eval/write-to-uninhabited-enum-variant.rs:12:5: 12:6
    }
}
