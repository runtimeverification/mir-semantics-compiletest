// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn init(_1: &mut [u8; 1024]) -> () {
    debug buf => _1;
    let mut _0: ();
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;

    bb0: {
        _2 = const 33_usize;
        _3 = const 1024_usize;
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        (*_1)[_2] = const 3_u8;
        _5 = const 444_usize;
        _6 = const 1024_usize;
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> [success: bb2, unwind continue];
    }

    bb2: {
        (*_1)[_5] = const 4_u8;
        return;
    }
}

// MIR FOR CTFE
fn init(_1: &mut [u8; 1024]) -> () {
    debug buf => _1;
    let mut _0: ();
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;

    bb0: {
        StorageLive(_2);
        _2 = const 33_usize;
        _3 = Len((*_1));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        (*_1)[_2] = const 3_u8;
        StorageDead(_2);
        StorageLive(_5);
        _5 = const 444_usize;
        _6 = Len((*_1));
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> [success: bb2, unwind continue];
    }

    bb2: {
        (*_1)[_5] = const 4_u8;
        StorageDead(_5);
        _0 = const ();
        return;
    }
}

init::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1024_usize;
        return;
    }
}

fn nrvo() -> [u8; 1024] {
    let mut _0: [u8; 1024];
    let mut _1: [u8; 1024];
    let _2: ();
    let mut _3: &mut [u8; 1024];
    scope 1 {
        debug buf => _1;
    }

    bb0: {
        _1 = [const 0_u8; 1024];
        _3 = &mut _1;
        _2 = init(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = _1;
        return;
    }
}

// MIR FOR CTFE
fn nrvo() -> [u8; 1024] {
    let mut _0: [u8; 1024];
    let mut _1: [u8; 1024];
    let _2: ();
    let mut _3: &mut [u8; 1024];
    let mut _4: &mut [u8; 1024];
    scope 1 {
        debug buf => _1;
    }

    bb0: {
        StorageLive(_1);
        _1 = [const 0_u8; 1024];
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &mut _1;
        _3 = &mut (*_4);
        ConstEvalCounter;
        _2 = init(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageDead(_4);
        StorageDead(_2);
        _0 = _1;
        StorageDead(_1);
        return;
    }
}

nrvo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1024_usize;
        return;
    }
}

nrvo::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1024_usize;
        return;
    }
}

const BUF: [u8; 1024] = {
    let mut _0: [u8; 1024];

    bb0: {
        ConstEvalCounter;
        _0 = nrvo() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

BUF::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1024_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u8, &u8);
    let mut _2: &u8;
    let _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let _6: &u8;
    let _7: &u8;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u8;
    let mut _11: u8;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&u8, &u8);
    let mut _16: &u8;
    let _17: usize;
    let mut _18: usize;
    let mut _19: bool;
    let _20: &u8;
    let _21: &u8;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: u8;
    let mut _25: u8;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&u8, &u8);
    let mut _30: &u8;
    let _31: usize;
    let mut _32: usize;
    let mut _33: bool;
    let _34: &u8;
    let _35: &u8;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: u8;
    let mut _39: u8;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: &u8;
    let mut _44: &[u8; 1024];
    let mut _45: &u8;
    let mut _46: &[u8; 1024];
    let mut _47: &u8;
    let mut _48: &[u8; 1024];
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }
    scope 5 {
        debug left_val => _34;
        debug right_val => _35;
        let _40: core::panicking::AssertKind;
        scope 6 {
            debug kind => _40;
        }
    }

    bb0: {
        _3 = const 33_usize;
        _4 = const 1024_usize;
        _5 = Lt(_3, _4);
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> [success: bb1, unwind continue];
    }

    bb1: {
        _48 = const _;
        _2 = &(*_48)[_3];
        _47 = const _;
        _1 = (move _2, _47);
        _6 = (_1.0: &u8);
        _7 = (_1.1: &u8);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<u8, u8>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        _17 = const 19_usize;
        _18 = const 1024_usize;
        _19 = Lt(_17, _18);
        assert(move _19, "index out of bounds: the length is {} but the index is {}", move _18, _17) -> [success: bb4, unwind continue];
    }

    bb4: {
        _46 = const _;
        _16 = &(*_46)[_17];
        _45 = const _;
        _15 = (move _16, _45);
        _20 = (_15.0: &u8);
        _21 = (_15.1: &u8);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<u8, u8>(move _26, _20, _21, move _28) -> unwind continue;
    }

    bb6: {
        _31 = const 444_usize;
        _32 = const 1024_usize;
        _33 = Lt(_31, _32);
        assert(move _33, "index out of bounds: the length is {} but the index is {}", move _32, _31) -> [success: bb7, unwind continue];
    }

    bb7: {
        _44 = const _;
        _30 = &(*_44)[_31];
        _43 = const _;
        _29 = (move _30, _43);
        _34 = (_29.0: &u8);
        _35 = (_29.1: &u8);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<u8, u8>(move _40, _34, _35, move _42) -> unwind continue;
    }

    bb9: {
        return;
    }
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 4_u8;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[u8; 1024] = {
    let mut _0: &[u8; 1024];
    let mut _1: [u8; 1024];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[u8; 1024] = {
    let mut _0: &[u8; 1024];
    let mut _1: [u8; 1024];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 3_u8;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[u8; 1024] = {
    let mut _0: &[u8; 1024];
    let mut _1: [u8; 1024];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}
