// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/duration_conversion.rs:5:11: 5:11

    bb0: {
        return;                          // scope 0 at ui/consts/const-eval/duration_conversion.rs:16:2: 16:2
    }
}

const _ONE_SECOND: Duration = {
    let mut _0: std::time::Duration;     // return place in scope 0 at ui/consts/const-eval/duration_conversion.rs:6:24: 6:32

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-eval/duration_conversion.rs:6:35: 6:70
        _0 = Duration::from_nanos(const 1000000000_u64) -> bb1; // scope 0 at ui/consts/const-eval/duration_conversion.rs:6:35: 6:70
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/duration_conversion.rs:6:35: 6:55
                                         // + literal: Const { ty: fn(u64) -> Duration {Duration::from_nanos}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-eval/duration_conversion.rs:6:5: 6:71
    }
}

const _ONE_MILLISECOND: Duration = {
    let mut _0: std::time::Duration;     // return place in scope 0 at ui/consts/const-eval/duration_conversion.rs:7:29: 7:37

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-eval/duration_conversion.rs:7:40: 7:71
        _0 = Duration::from_nanos(const 1000000_u64) -> bb1; // scope 0 at ui/consts/const-eval/duration_conversion.rs:7:40: 7:71
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/duration_conversion.rs:7:40: 7:60
                                         // + literal: Const { ty: fn(u64) -> Duration {Duration::from_nanos}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-eval/duration_conversion.rs:7:5: 7:72
    }
}

const _ONE_MICROSECOND: Duration = {
    let mut _0: std::time::Duration;     // return place in scope 0 at ui/consts/const-eval/duration_conversion.rs:8:29: 8:37

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-eval/duration_conversion.rs:8:40: 8:67
        _0 = Duration::from_nanos(const 1000_u64) -> bb1; // scope 0 at ui/consts/const-eval/duration_conversion.rs:8:40: 8:67
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/duration_conversion.rs:8:40: 8:60
                                         // + literal: Const { ty: fn(u64) -> Duration {Duration::from_nanos}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-eval/duration_conversion.rs:8:5: 8:68
    }
}

const _ONE_NANOSECOND: Duration = {
    let mut _0: std::time::Duration;     // return place in scope 0 at ui/consts/const-eval/duration_conversion.rs:9:28: 9:36

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-eval/duration_conversion.rs:9:39: 9:62
        _0 = Duration::from_nanos(const 1_u64) -> bb1; // scope 0 at ui/consts/const-eval/duration_conversion.rs:9:39: 9:62
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/duration_conversion.rs:9:39: 9:59
                                         // + literal: Const { ty: fn(u64) -> Duration {Duration::from_nanos}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-eval/duration_conversion.rs:9:5: 9:63
    }
}

const _ONE: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-eval/duration_conversion.rs:10:17: 10:22
    let mut _1: u64;                     // in scope 0 at ui/consts/const-eval/duration_conversion.rs:10:25: 10:46
    let mut _2: &std::time::Duration;    // in scope 0 at ui/consts/const-eval/duration_conversion.rs:10:25: 10:46
    let _3: std::time::Duration;         // in scope 0 at ui/consts/const-eval/duration_conversion.rs:10:25: 10:36
    let mut _4: &std::time::Duration;    // in scope 0 at ui/consts/const-eval/duration_conversion.rs:10:25: 10:46

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-eval/duration_conversion.rs:10:25: 10:46
        StorageLive(_2);                 // scope 0 at ui/consts/const-eval/duration_conversion.rs:10:25: 10:46
        _4 = const _;                    // scope 0 at ui/consts/const-eval/duration_conversion.rs:10:25: 10:46
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/duration_conversion.rs:10:25: 10:46
                                         // + literal: Const { ty: &Duration, val: Unevaluated(_ONE, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at ui/consts/const-eval/duration_conversion.rs:10:25: 10:46
        ConstEvalCounter;                // scope 0 at ui/consts/const-eval/duration_conversion.rs:10:25: 10:46
        _1 = Duration::as_secs(move _2) -> bb1; // scope 0 at ui/consts/const-eval/duration_conversion.rs:10:25: 10:46
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/duration_conversion.rs:10:37: 10:44
                                         // + literal: Const { ty: for<'a> fn(&'a Duration) -> u64 {Duration::as_secs}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/const-eval/duration_conversion.rs:10:45: 10:46
        _0 = move _1 as usize (IntToInt); // scope 0 at ui/consts/const-eval/duration_conversion.rs:10:25: 10:55
        StorageDead(_1);                 // scope 0 at ui/consts/const-eval/duration_conversion.rs:10:54: 10:55
        return;                          // scope 0 at ui/consts/const-eval/duration_conversion.rs:10:5: 10:56
    }
}

promoted[0] in _ONE: &Duration = {
    let mut _0: &std::time::Duration;    // return place in scope 0 at ui/consts/const-eval/duration_conversion.rs:10:25: 10:46
    let mut _1: std::time::Duration;     // in scope 0 at ui/consts/const-eval/duration_conversion.rs:10:25: 10:36

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-eval/duration_conversion.rs:10:25: 10:36
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/duration_conversion.rs:10:25: 10:36
                                         // + literal: Const { ty: Duration, val: Unevaluated(_ONE_SECOND, [], None) }
        _0 = &_1;                        // scope 0 at ui/consts/const-eval/duration_conversion.rs:10:25: 10:46
        return;                          // scope 0 at ui/consts/const-eval/duration_conversion.rs:10:25: 10:46
    }
}

const _TWO: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-eval/duration_conversion.rs:11:17: 11:22
    let mut _1: u32;                     // in scope 0 at ui/consts/const-eval/duration_conversion.rs:11:25: 11:57
    let mut _2: &std::time::Duration;    // in scope 0 at ui/consts/const-eval/duration_conversion.rs:11:25: 11:57
    let _3: std::time::Duration;         // in scope 0 at ui/consts/const-eval/duration_conversion.rs:11:25: 11:41
    let mut _4: &std::time::Duration;    // in scope 0 at ui/consts/const-eval/duration_conversion.rs:11:25: 11:57

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-eval/duration_conversion.rs:11:25: 11:57
        StorageLive(_2);                 // scope 0 at ui/consts/const-eval/duration_conversion.rs:11:25: 11:57
        _4 = const _;                    // scope 0 at ui/consts/const-eval/duration_conversion.rs:11:25: 11:57
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/duration_conversion.rs:11:25: 11:57
                                         // + literal: Const { ty: &Duration, val: Unevaluated(_TWO, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at ui/consts/const-eval/duration_conversion.rs:11:25: 11:57
        ConstEvalCounter;                // scope 0 at ui/consts/const-eval/duration_conversion.rs:11:25: 11:57
        _1 = Duration::subsec_millis(move _2) -> bb1; // scope 0 at ui/consts/const-eval/duration_conversion.rs:11:25: 11:57
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/duration_conversion.rs:11:42: 11:55
                                         // + literal: Const { ty: for<'a> fn(&'a Duration) -> u32 {Duration::subsec_millis}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/const-eval/duration_conversion.rs:11:56: 11:57
        _0 = move _1 as usize (IntToInt); // scope 0 at ui/consts/const-eval/duration_conversion.rs:11:25: 11:66
        StorageDead(_1);                 // scope 0 at ui/consts/const-eval/duration_conversion.rs:11:65: 11:66
        return;                          // scope 0 at ui/consts/const-eval/duration_conversion.rs:11:5: 11:67
    }
}

promoted[0] in _TWO: &Duration = {
    let mut _0: &std::time::Duration;    // return place in scope 0 at ui/consts/const-eval/duration_conversion.rs:11:25: 11:57
    let mut _1: std::time::Duration;     // in scope 0 at ui/consts/const-eval/duration_conversion.rs:11:25: 11:41

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-eval/duration_conversion.rs:11:25: 11:41
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/duration_conversion.rs:11:25: 11:41
                                         // + literal: Const { ty: Duration, val: Unevaluated(_ONE_MILLISECOND, [], None) }
        _0 = &_1;                        // scope 0 at ui/consts/const-eval/duration_conversion.rs:11:25: 11:57
        return;                          // scope 0 at ui/consts/const-eval/duration_conversion.rs:11:25: 11:57
    }
}

const _THREE: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-eval/duration_conversion.rs:12:19: 12:24
    let mut _1: u32;                     // in scope 0 at ui/consts/const-eval/duration_conversion.rs:12:27: 12:59
    let mut _2: &std::time::Duration;    // in scope 0 at ui/consts/const-eval/duration_conversion.rs:12:27: 12:59
    let _3: std::time::Duration;         // in scope 0 at ui/consts/const-eval/duration_conversion.rs:12:27: 12:43
    let mut _4: &std::time::Duration;    // in scope 0 at ui/consts/const-eval/duration_conversion.rs:12:27: 12:59

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-eval/duration_conversion.rs:12:27: 12:59
        StorageLive(_2);                 // scope 0 at ui/consts/const-eval/duration_conversion.rs:12:27: 12:59
        _4 = const _;                    // scope 0 at ui/consts/const-eval/duration_conversion.rs:12:27: 12:59
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/duration_conversion.rs:12:27: 12:59
                                         // + literal: Const { ty: &Duration, val: Unevaluated(_THREE, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at ui/consts/const-eval/duration_conversion.rs:12:27: 12:59
        ConstEvalCounter;                // scope 0 at ui/consts/const-eval/duration_conversion.rs:12:27: 12:59
        _1 = Duration::subsec_micros(move _2) -> bb1; // scope 0 at ui/consts/const-eval/duration_conversion.rs:12:27: 12:59
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/duration_conversion.rs:12:44: 12:57
                                         // + literal: Const { ty: for<'a> fn(&'a Duration) -> u32 {Duration::subsec_micros}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/const-eval/duration_conversion.rs:12:58: 12:59
        _0 = move _1 as usize (IntToInt); // scope 0 at ui/consts/const-eval/duration_conversion.rs:12:27: 12:68
        StorageDead(_1);                 // scope 0 at ui/consts/const-eval/duration_conversion.rs:12:67: 12:68
        return;                          // scope 0 at ui/consts/const-eval/duration_conversion.rs:12:5: 12:69
    }
}

promoted[0] in _THREE: &Duration = {
    let mut _0: &std::time::Duration;    // return place in scope 0 at ui/consts/const-eval/duration_conversion.rs:12:27: 12:59
    let mut _1: std::time::Duration;     // in scope 0 at ui/consts/const-eval/duration_conversion.rs:12:27: 12:43

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-eval/duration_conversion.rs:12:27: 12:43
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/duration_conversion.rs:12:27: 12:43
                                         // + literal: Const { ty: Duration, val: Unevaluated(_ONE_MICROSECOND, [], None) }
        _0 = &_1;                        // scope 0 at ui/consts/const-eval/duration_conversion.rs:12:27: 12:59
        return;                          // scope 0 at ui/consts/const-eval/duration_conversion.rs:12:27: 12:59
    }
}

const _FOUR: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-eval/duration_conversion.rs:13:18: 13:23
    let mut _1: u32;                     // in scope 0 at ui/consts/const-eval/duration_conversion.rs:13:26: 13:56
    let mut _2: &std::time::Duration;    // in scope 0 at ui/consts/const-eval/duration_conversion.rs:13:26: 13:56
    let _3: std::time::Duration;         // in scope 0 at ui/consts/const-eval/duration_conversion.rs:13:26: 13:41
    let mut _4: &std::time::Duration;    // in scope 0 at ui/consts/const-eval/duration_conversion.rs:13:26: 13:56

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-eval/duration_conversion.rs:13:26: 13:56
        StorageLive(_2);                 // scope 0 at ui/consts/const-eval/duration_conversion.rs:13:26: 13:56
        _4 = const _;                    // scope 0 at ui/consts/const-eval/duration_conversion.rs:13:26: 13:56
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/duration_conversion.rs:13:26: 13:56
                                         // + literal: Const { ty: &Duration, val: Unevaluated(_FOUR, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at ui/consts/const-eval/duration_conversion.rs:13:26: 13:56
        ConstEvalCounter;                // scope 0 at ui/consts/const-eval/duration_conversion.rs:13:26: 13:56
        _1 = Duration::subsec_nanos(move _2) -> bb1; // scope 0 at ui/consts/const-eval/duration_conversion.rs:13:26: 13:56
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/duration_conversion.rs:13:42: 13:54
                                         // + literal: Const { ty: for<'a> fn(&'a Duration) -> u32 {Duration::subsec_nanos}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/const-eval/duration_conversion.rs:13:55: 13:56
        _0 = move _1 as usize (IntToInt); // scope 0 at ui/consts/const-eval/duration_conversion.rs:13:26: 13:65
        StorageDead(_1);                 // scope 0 at ui/consts/const-eval/duration_conversion.rs:13:64: 13:65
        return;                          // scope 0 at ui/consts/const-eval/duration_conversion.rs:13:5: 13:66
    }
}

promoted[0] in _FOUR: &Duration = {
    let mut _0: &std::time::Duration;    // return place in scope 0 at ui/consts/const-eval/duration_conversion.rs:13:26: 13:56
    let mut _1: std::time::Duration;     // in scope 0 at ui/consts/const-eval/duration_conversion.rs:13:26: 13:41

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-eval/duration_conversion.rs:13:26: 13:41
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/duration_conversion.rs:13:26: 13:41
                                         // + literal: Const { ty: Duration, val: Unevaluated(_ONE_NANOSECOND, [], None) }
        _0 = &_1;                        // scope 0 at ui/consts/const-eval/duration_conversion.rs:13:26: 13:56
        return;                          // scope 0 at ui/consts/const-eval/duration_conversion.rs:13:26: 13:56
    }
}

const _0: [[u8; 1]; 1] = {
    let mut _0: [[u8; 1]; 1];            // return place in scope 0 at ui/consts/const-eval/duration_conversion.rs:14:15: 14:33
    let mut _1: [u8; 1];                 // in scope 0 at ui/consts/const-eval/duration_conversion.rs:14:37: 14:46

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-eval/duration_conversion.rs:14:37: 14:46
        _1 = [const 1_u8; 1];            // scope 0 at ui/consts/const-eval/duration_conversion.rs:14:37: 14:46
        _0 = [move _1; 1];               // scope 0 at ui/consts/const-eval/duration_conversion.rs:14:36: 14:53
        StorageDead(_1);                 // scope 0 at ui/consts/const-eval/duration_conversion.rs:14:52: 14:53
        return;                          // scope 0 at ui/consts/const-eval/duration_conversion.rs:14:5: 14:54
    }
}

_0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-eval/duration_conversion.rs:14:21: 14:25

    bb0: {
        _0 = const _;                    // scope 0 at ui/consts/const-eval/duration_conversion.rs:14:21: 14:25
        return;                          // scope 0 at ui/consts/const-eval/duration_conversion.rs:14:21: 14:25
    }
}

_0::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-eval/duration_conversion.rs:14:28: 14:32

    bb0: {
        _0 = const _;                    // scope 0 at ui/consts/const-eval/duration_conversion.rs:14:28: 14:32
        return;                          // scope 0 at ui/consts/const-eval/duration_conversion.rs:14:28: 14:32
    }
}

_0::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-eval/duration_conversion.rs:14:41: 14:45

    bb0: {
        _0 = const _;                    // scope 0 at ui/consts/const-eval/duration_conversion.rs:14:41: 14:45
        return;                          // scope 0 at ui/consts/const-eval/duration_conversion.rs:14:41: 14:45
    }
}

_0::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-eval/duration_conversion.rs:14:48: 14:52

    bb0: {
        _0 = const _;                    // scope 0 at ui/consts/const-eval/duration_conversion.rs:14:48: 14:52
        return;                          // scope 0 at ui/consts/const-eval/duration_conversion.rs:14:48: 14:52
    }
}

const _1: [[u8; 1]; 1] = {
    let mut _0: [[u8; 1]; 1];            // return place in scope 0 at ui/consts/const-eval/duration_conversion.rs:15:15: 15:36
    let mut _1: [u8; 1];                 // in scope 0 at ui/consts/const-eval/duration_conversion.rs:15:40: 15:51

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-eval/duration_conversion.rs:15:40: 15:51
        _1 = [const 3_u8; 1];            // scope 0 at ui/consts/const-eval/duration_conversion.rs:15:40: 15:51
        _0 = [move _1; 1];               // scope 0 at ui/consts/const-eval/duration_conversion.rs:15:39: 15:59
        StorageDead(_1);                 // scope 0 at ui/consts/const-eval/duration_conversion.rs:15:58: 15:59
        return;                          // scope 0 at ui/consts/const-eval/duration_conversion.rs:15:5: 15:60
    }
}

_1::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-eval/duration_conversion.rs:15:21: 15:27

    bb0: {
        _0 = const _;                    // scope 0 at ui/consts/const-eval/duration_conversion.rs:15:21: 15:27
        return;                          // scope 0 at ui/consts/const-eval/duration_conversion.rs:15:21: 15:27
    }
}

_1::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-eval/duration_conversion.rs:15:30: 15:35

    bb0: {
        _0 = const _;                    // scope 0 at ui/consts/const-eval/duration_conversion.rs:15:30: 15:35
        return;                          // scope 0 at ui/consts/const-eval/duration_conversion.rs:15:30: 15:35
    }
}

_1::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-eval/duration_conversion.rs:15:44: 15:50

    bb0: {
        _0 = const _;                    // scope 0 at ui/consts/const-eval/duration_conversion.rs:15:44: 15:50
        return;                          // scope 0 at ui/consts/const-eval/duration_conversion.rs:15:44: 15:50
    }
}

_1::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-eval/duration_conversion.rs:15:53: 15:58

    bb0: {
        _0 = const _;                    // scope 0 at ui/consts/const-eval/duration_conversion.rs:15:53: 15:58
        return;                          // scope 0 at ui/consts/const-eval/duration_conversion.rs:15:53: 15:58
    }
}
