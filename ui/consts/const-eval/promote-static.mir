// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static NONE: Option<String> = {
    let mut _0: std::option::Option<std::string::String>;

    bb0: {
        _0 = Option::<String>::None;
        return;
    }
}

static NONE_REF_REF: &&Option<String> = {
    let mut _0: &&std::option::Option<std::string::String>;
    let _1: &&std::option::Option<std::string::String>;
    let _2: &std::option::Option<std::string::String>;
    let _3: &std::option::Option<std::string::String>;
    let mut _4: &&std::option::Option<std::string::String>;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_1);
        _4 = const _;
        _1 = &(*_4);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in NONE_REF_REF: &&Option<String> = {
    let mut _0: &&std::option::Option<std::string::String>;
    let mut _1: &std::option::Option<std::string::String>;
    let mut _2: &std::option::Option<std::string::String>;

    bb0: {
        _2 = const {alloc1: &Option<String>};
        _1 = &(*_2);
        _0 = &_1;
        return;
    }
}

alloc1 (static: NONE, size: 24, align: 8) {
    0x00 │ 00 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
    0x10 │ __ __ __ __ __ __ __ __                         │ ░░░░░░░░
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 1];
    let _6: [core::fmt::rt::Argument<'_>; 1];
    let mut _7: core::fmt::rt::Argument<'_>;
    let _8: &&&std::option::Option<std::string::String>;
    let mut _9: &[&str; 2];

    bb0: {
        _9 = const _;
        _3 = _9 as &[&str] (Pointer(Unsize));
        _8 = const {alloc2: &&&Option<String>};
        _7 = core::fmt::rt::Argument::<'_>::new_debug::<&&Option<String>>(_8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = [move _7];
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = _print(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

alloc2 (static: NONE_REF_REF, size: 8, align: 8) {
    ╾───────alloc12───────╼                         │ ╾──────╼
}

alloc12 (size: 8, align: 8) {
    ╾───────alloc1────────╼                         │ ╾──────╼
}

alloc1 (static: NONE, size: 24, align: 8) {
    0x00 │ 00 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
    0x10 │ __ __ __ __ __ __ __ __                         │ ░░░░░░░░
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
