// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const X: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 5_u32;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: u32;
    let mut _2: bool;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &u32;
    let _11: u32;
    let _12: ();
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let mut _15: &[core::fmt::rt::Argument<'_>];
    let _16: &[core::fmt::rt::Argument<'_>; 1];
    let _17: [core::fmt::rt::Argument<'_>; 1];
    let mut _18: core::fmt::rt::Argument<'_>;
    let _19: &u32;
    let _20: u32;
    scope 1 {
        debug x => const _;
        let mut _21: &[&str; 2];
        let mut _22: &[&str; 2];
    }

    bb0: {
        _1 = const _;
        _2 = Gt(_1, const 10_u32);
        switchInt(move _2) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        _21 = const _;
        _5 = _21 as &[&str] (Pointer(Unsize));
        _11 = Sub(_1, const 10_u32);
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_10) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _3 = _print(move _4) -> [return: bb7, unwind continue];
    }

    bb4: {
        _22 = const _;
        _14 = _22 as &[&str] (Pointer(Unsize));
        _20 = Sub(const 10_u32, _1);
        _19 = &_20;
        _18 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_19) -> [return: bb5, unwind continue];
    }

    bb5: {
        _17 = [move _18];
        _16 = &_17;
        _15 = _16 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _13 = Arguments::<'_>::new_v1(move _14, move _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        _12 = _print(move _13) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
