// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const X: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:9:10: 9:13

    bb0: {
        _0 = const 5_u32;                // scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:9:16: 9:17
        return;                          // scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:9:1: 9:18
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:11:11: 11:11
    let _1: u32;                         // in scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:12:9: 12:10
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:18: 16:22
    let mut _5: &[&str; 2];              // in scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:18: 16:22
    let _6: &[&str; 2];                  // in scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:18: 16:22
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:24: 16:30
    let mut _12: &u32;                   // in scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:24: 16:30
    let _13: &u32;                       // in scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:24: 16:30
    let _14: u32;                        // in scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:24: 16:30
    let mut _15: u32;                    // in scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:29: 16:30
    let mut _16: (u32, bool);            // in scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:24: 16:30
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:12:9: 12:10
        let mut _17: &[&str; 2];         // in scope 1 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:18: 16:22
    }

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:12:13: 12:14
        _17 = const _;                   // scope 1 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:18: 16:22
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:18: 16:22
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _6 = _17;                        // scope 1 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:18: 16:22
        _5 = _6;                         // scope 1 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:18: 16:22
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 1 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:18: 16:22
        _15 = _1;                        // scope 1 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:29: 16:30
        _16 = CheckedSub(const 10_u32, _15); // scope 1 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:24: 16:30
        assert(!move (_16.1: bool), "attempt to compute `{} - {}`, which would overflow", const 10_u32, move _15) -> bb1; // scope 1 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:24: 16:30
    }

    bb1: {
        _14 = move (_16.0: u32);         // scope 1 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:24: 16:30
        _13 = &_14;                      // scope 1 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:24: 16:30
        _12 = _13;                       // scope 1 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:24: 16:30
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<u32>(move _12) -> bb2; // scope 1 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:24: 16:30
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:24: 16:30
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b u32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u32>}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = [move _11];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb3; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = _print(move _3) -> bb4;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:18:2: 18:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:18: 16:22
    let mut _1: [&str; 2];               // in scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:18: 16:22

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:18: 16:22
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:18: 16:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:18: 16:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:18: 16:22
        return;                          // scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:16:18: 16:22
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:14:18: 14:22
    let mut _1: [&str; 2];               // in scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:14:18: 14:22

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:14:18: 14:22
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/no_lint_for_statically_known_error.rs:14:18: 14:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/no_lint_for_statically_known_error.rs:14:18: 14:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:14:18: 14:22
        return;                          // scope 0 at ui/consts/const-eval/no_lint_for_statically_known_error.rs:14:18: 14:22
    }
}
