// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const NON_NULL_PTR1: NonNull<u8> = {
    let mut _0: std::ptr::NonNull<u8>;   // return place in scope 0 at ui/consts/const-eval/valid-const.rs:9:22: 9:33
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;                // scope 1 at ui/consts/const-eval/valid-const.rs:9:45: 9:67
        _0 = transmute::<usize, NonNull<u8>>(const 1_usize) -> bb1; // scope 1 at ui/consts/const-eval/valid-const.rs:9:45: 9:67
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/valid-const.rs:9:45: 9:59
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(usize) -> NonNull<u8> {transmute::<usize, NonNull<u8>>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-eval/valid-const.rs:9:1: 9:70
    }
}

const NON_NULL_PTR2: NonNull<u8> = {
    let mut _0: std::ptr::NonNull<u8>;   // return place in scope 0 at ui/consts/const-eval/valid-const.rs:10:22: 10:33
    let mut _1: &i32;                    // in scope 0 at ui/consts/const-eval/valid-const.rs:10:60: 10:62
    let _2: i32;                         // in scope 0 at ui/consts/const-eval/valid-const.rs:10:61: 10:62
    scope 1 {
        let mut _3: &i32;                // in scope 1 at ui/consts/const-eval/valid-const.rs:10:60: 10:62
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/const-eval/valid-const.rs:10:60: 10:62
        _3 = const _;                    // scope 1 at ui/consts/const-eval/valid-const.rs:10:60: 10:62
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/valid-const.rs:10:60: 10:62
                                         // + literal: Const { ty: &i32, val: Unevaluated(NON_NULL_PTR2, [], Some(promoted[0])) }
        _1 = &(*_3);                     // scope 1 at ui/consts/const-eval/valid-const.rs:10:60: 10:62
        ConstEvalCounter;                // scope 1 at ui/consts/const-eval/valid-const.rs:10:45: 10:63
        _0 = transmute::<&i32, NonNull<u8>>(move _1) -> bb1; // scope 1 at ui/consts/const-eval/valid-const.rs:10:45: 10:63
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/valid-const.rs:10:45: 10:59
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&i32) -> NonNull<u8> {transmute::<&i32, NonNull<u8>>}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 1 at ui/consts/const-eval/valid-const.rs:10:62: 10:63
        return;                          // scope 0 at ui/consts/const-eval/valid-const.rs:10:1: 10:66
    }
}

promoted[0] in NON_NULL_PTR2: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/consts/const-eval/valid-const.rs:10:60: 10:62
    let mut _1: i32;                     // in scope 0 at ui/consts/const-eval/valid-const.rs:10:61: 10:62

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/consts/const-eval/valid-const.rs:10:61: 10:62
        _0 = &_1;                        // scope 0 at ui/consts/const-eval/valid-const.rs:10:60: 10:62
        return;                          // scope 0 at ui/consts/const-eval/valid-const.rs:10:60: 10:62
    }
}

const NON_NULL_U8: NonZeroU8 = {
    let mut _0: std::num::NonZeroU8;     // return place in scope 0 at ui/consts/const-eval/valid-const.rs:12:20: 12:29
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;                // scope 1 at ui/consts/const-eval/valid-const.rs:12:41: 12:60
        _0 = transmute::<u8, NonZeroU8>(const 1_u8) -> bb1; // scope 1 at ui/consts/const-eval/valid-const.rs:12:41: 12:60
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/valid-const.rs:12:41: 12:55
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(u8) -> NonZeroU8 {transmute::<u8, NonZeroU8>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-eval/valid-const.rs:12:1: 12:63
    }
}

const NON_NULL_USIZE: NonZeroUsize = {
    let mut _0: std::num::NonZeroUsize;  // return place in scope 0 at ui/consts/const-eval/valid-const.rs:13:23: 13:35
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;                // scope 1 at ui/consts/const-eval/valid-const.rs:13:47: 13:69
        _0 = transmute::<usize, NonZeroUsize>(const 1_usize) -> bb1; // scope 1 at ui/consts/const-eval/valid-const.rs:13:47: 13:69
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/valid-const.rs:13:47: 13:61
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(usize) -> NonZeroUsize {transmute::<usize, NonZeroUsize>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-eval/valid-const.rs:13:1: 13:72
    }
}

const UNIT: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/valid-const.rs:15:13: 15:15

    bb0: {
        _0 = ();                         // scope 0 at ui/consts/const-eval/valid-const.rs:15:18: 15:20
        return;                          // scope 0 at ui/consts/const-eval/valid-const.rs:15:1: 15:21
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/valid-const.rs:17:11: 17:11

    bb0: {
        return;                          // scope 0 at ui/consts/const-eval/valid-const.rs:17:13: 17:13
    }
}
