// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn example(_1: &Box<dyn Foo>) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:9:30: 9:30

    bb0: {
        return;                          // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:9:32: 9:32
    }
}

const BARS: &[Bar] = {
    let mut _0: &[Bar];                  // return place in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:11:13: 11:19
    let mut _1: &[Bar; 2];               // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:11:22: 20:2
    let _2: &[Bar; 2];                   // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:11:22: 20:2
    let _3: [Bar; 2];                    // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:11:23: 20:2
    let mut _4: Bar;                     // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:12:5: 15:6
    let mut _5: &[u8];                   // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:13:16: 13:30
    let _6: &[u8];                       // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:13:16: 13:30
    let mut _7: &str;                    // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:13:16: 13:30
    let _8: &str;                        // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:13:16: 13:19
    let mut _9: for<'a> fn(&'a std::boxed::Box<dyn Foo>); // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:14:15: 14:22
    let mut _10: Bar;                    // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:16:5: 19:6
    let mut _11: &[u8];                  // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:17:16: 17:30
    let _12: &[u8];                      // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:17:16: 17:30
    let mut _13: &str;                   // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:17:16: 17:30
    let _14: &str;                       // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:17:16: 17:19
    let mut _15: for<'a> fn(&'a std::boxed::Box<dyn Foo>); // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:18:15: 18:22
    let mut _16: &[Bar; 2];              // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:11:22: 20:2

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:11:22: 20:2
        StorageLive(_2);                 // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:11:22: 20:2
        _16 = const _;                   // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:11:22: 20:2
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:11:22: 20:2
                                         // + literal: Const { ty: &[Bar; 2], val: Unevaluated(BARS, [], Some(promoted[0])) }
        _2 = &(*_16);                    // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:11:22: 20:2
        _1 = &(*_2);                     // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:11:22: 20:2
        _0 = move _1 as &[Bar] (Pointer(Unsize)); // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:11:22: 20:2
        StorageDead(_2);                 // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:20:1: 20:2
        StorageDead(_1);                 // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:20:1: 20:2
        return;                          // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:11:1: 20:3
    }
}

promoted[0] in BARS: &[Bar; 2] = {
    let mut _0: &[Bar; 2];               // return place in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:11:22: 20:2
    let mut _1: [Bar; 2];                // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:11:23: 20:2
    let mut _2: Bar;                     // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:12:5: 15:6
    let mut _3: &[u8];                   // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:13:16: 13:30
    let mut _4: &[u8];                   // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:13:16: 13:30
    let mut _5: &str;                    // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:13:16: 13:30
    let mut _6: &str;                    // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:13:16: 13:19
    let mut _7: for<'a> fn(&'a std::boxed::Box<dyn Foo>); // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:14:15: 14:22
    let mut _8: Bar;                     // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:16:5: 19:6
    let mut _9: &[u8];                   // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:17:16: 17:30
    let mut _10: &[u8];                  // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:17:16: 17:30
    let mut _11: &str;                   // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:17:16: 17:30
    let mut _12: &str;                   // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:17:16: 17:19
    let mut _13: for<'a> fn(&'a std::boxed::Box<dyn Foo>); // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:18:15: 18:22

    bb0: {
        _6 = const "0";                  // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:13:16: 13:19
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:13:16: 13:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = &(*_6);                     // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:13:16: 13:30
        _4 = core::str::<impl str>::as_bytes(move _5) -> bb1; // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:13:16: 13:30
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:13:20: 13:28
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &(*_4);                     // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:13:16: 13:30
        _7 = example as for<'a> fn(&'a std::boxed::Box<dyn Foo>) (Pointer(ReifyFnPointer)); // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:14:15: 14:22
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:14:15: 14:22
                                         // + literal: Const { ty: for<'a> fn(&'a Box<(dyn Foo + 'static)>) {example}, val: Value(<ZST>) }
        _2 = Bar { bytes: move _3, func: move _7 }; // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:12:5: 15:6
        _12 = const "0";                 // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:17:16: 17:19
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:17:16: 17:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = &(*_12);                   // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:17:16: 17:30
        _10 = core::str::<impl str>::as_bytes(move _11) -> bb2; // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:17:16: 17:30
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:17:20: 17:28
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = &(*_10);                    // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:17:16: 17:30
        _13 = example as for<'a> fn(&'a std::boxed::Box<dyn Foo>) (Pointer(ReifyFnPointer)); // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:18:15: 18:22
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:18:15: 18:22
                                         // + literal: Const { ty: for<'a> fn(&'a Box<(dyn Foo + 'static)>) {example}, val: Value(<ZST>) }
        _8 = Bar { bytes: move _9, func: move _13 }; // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:16:5: 19:6
        _1 = [move _2, move _8];         // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:11:23: 20:2
        _0 = &_1;                        // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:11:22: 20:2
        return;                          // scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:11:22: 20:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:22:11: 22:11
    let _1: std::boxed::Box<dyn Foo>;    // in scope 0 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:23:9: 23:10
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:23:9: 23:10
        let mut _3: std::slice::Iter<'_, Bar>; // in scope 1 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:25:16: 25:20
        scope 2 {
            debug iter => _3;            // in scope 2 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:25:16: 25:20
            let _4: &Bar;                // in scope 2 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:25:9: 25:12
            scope 3 {
                debug bar => _4;         // in scope 3 at ui/consts/const-eval/issue-84957-const-str-as-bytes.rs:25:9: 25:12
            }
        }
    }

    bb0: {
        _2 = core::panicking::panic(const "not yet implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}
