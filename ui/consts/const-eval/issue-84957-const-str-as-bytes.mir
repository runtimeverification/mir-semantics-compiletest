// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn example(_1: &Box<dyn Foo>) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

const BARS: &[Bar] = {
    let mut _0: &[Bar];
    let mut _1: &[Bar; 2];
    let _2: &[Bar; 2];
    let _3: [Bar; 2];
    let mut _4: Bar;
    let mut _5: &[u8];
    let _6: &[u8];
    let mut _7: &str;
    let _8: &str;
    let mut _9: for<'a> fn(&'a std::boxed::Box<dyn Foo>);
    let mut _10: Bar;
    let mut _11: &[u8];
    let _12: &[u8];
    let mut _13: &str;
    let _14: &str;
    let mut _15: for<'a> fn(&'a std::boxed::Box<dyn Foo>);
    let mut _16: &[Bar; 2];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _16 = const _;
        _2 = &(*_16);
        _1 = &(*_2);
        _0 = move _1 as &[Bar] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in BARS: &[Bar; 2] = {
    let mut _0: &[Bar; 2];
    let mut _1: [Bar; 2];
    let mut _2: Bar;
    let mut _3: &[u8];
    let mut _4: &[u8];
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: for<'a> fn(&'a std::boxed::Box<dyn Foo>);
    let mut _8: Bar;
    let mut _9: &[u8];
    let mut _10: &[u8];
    let mut _11: &str;
    let mut _12: &str;
    let mut _13: for<'a> fn(&'a std::boxed::Box<dyn Foo>);

    bb0: {
        _6 = const "0";
        _5 = &(*_6);
        _4 = core::str::<impl str>::as_bytes(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &(*_4);
        _7 = example as for<'a> fn(&'a std::boxed::Box<dyn Foo>) (Pointer(ReifyFnPointer));
        _2 = Bar { bytes: move _3, func: move _7 };
        _12 = const "0";
        _11 = &(*_12);
        _10 = core::str::<impl str>::as_bytes(move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = &(*_10);
        _13 = example as for<'a> fn(&'a std::boxed::Box<dyn Foo>) (Pointer(ReifyFnPointer));
        _8 = Bar { bytes: move _9, func: move _13 };
        _1 = [move _2, move _8];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<dyn Foo>;
    let mut _2: !;
    scope 1 {
        debug x => _1;
        let mut _3: std::slice::Iter<'_, Bar>;
        scope 2 {
            debug iter => _3;
            let _4: &Bar;
            scope 3 {
                debug bar => _4;
            }
        }
    }

    bb0: {
        _2 = core::panicking::panic(const "not yet implemented") -> unwind continue;
    }
}
