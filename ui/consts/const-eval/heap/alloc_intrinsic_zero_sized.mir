// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/heap/alloc_intrinsic_zero_sized.rs:10:11: 10:11

    bb0: {
        return;                          // scope 0 at ui/consts/const-eval/heap/alloc_intrinsic_zero_sized.rs:16:2: 16:2
    }
}

main::{constant#0}: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/heap/alloc_intrinsic_zero_sized.rs:11:11: 15:6
    let mut _1: *mut ZST;                // in scope 0 at ui/consts/const-eval/heap/alloc_intrinsic_zero_sized.rs:13:21: 13:65
    let mut _2: *mut u8;                 // in scope 0 at ui/consts/const-eval/heap/alloc_intrinsic_zero_sized.rs:13:21: 13:53
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/const-eval/heap/alloc_intrinsic_zero_sized.rs:13:21: 13:65
        StorageLive(_2);                 // scope 1 at ui/consts/const-eval/heap/alloc_intrinsic_zero_sized.rs:13:21: 13:53
        ConstEvalCounter;                // scope 1 at ui/consts/const-eval/heap/alloc_intrinsic_zero_sized.rs:13:21: 13:53
        _2 = const_allocate(const 0_usize, const 0_usize) -> bb1; // scope 1 at ui/consts/const-eval/heap/alloc_intrinsic_zero_sized.rs:13:21: 13:53
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/heap/alloc_intrinsic_zero_sized.rs:13:21: 13:47
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(usize, usize) -> *mut u8 {const_allocate}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = move _2 as *mut ZST (PtrToPtr); // scope 1 at ui/consts/const-eval/heap/alloc_intrinsic_zero_sized.rs:13:21: 13:65
        StorageDead(_2);                 // scope 1 at ui/consts/const-eval/heap/alloc_intrinsic_zero_sized.rs:13:64: 13:65
        StorageDead(_1);                 // scope 1 at ui/consts/const-eval/heap/alloc_intrinsic_zero_sized.rs:13:65: 13:66
        _0 = const ();                   // scope 1 at ui/consts/const-eval/heap/alloc_intrinsic_zero_sized.rs:12:9: 14:10
        return;                          // scope 0 at ui/consts/const-eval/heap/alloc_intrinsic_zero_sized.rs:11:11: 15:6
    }
}
