// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const _X: () = {
    let mut _0: ();
    let _2: ();
    let mut _3: *mut u8;
    scope 1 {
        let _1: *mut u8;
        scope 2 {
            debug ptr => _1;
        }
    }

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = const_allocate(const 4_usize, const 4_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = _1;
        ConstEvalCounter;
        _2 = const_deallocate(move _3, const 4_usize, const 4_usize) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_3);
        StorageDead(_2);
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const Y: &u32 = {
    let mut _0: &u32;
    let mut _2: *mut u8;
    let _3: &u32;
    scope 1 {
        let _1: *mut u32;
        scope 2 {
            debug ptr => _1;
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        ConstEvalCounter;
        _2 = const_allocate(const 4_usize, const 4_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = move _2 as *mut u32 (PtrToPtr);
        StorageDead(_2);
        (*_1) = const 42_u32;
        StorageLive(_3);
        _3 = &(*_1);
        _0 = &(*_3);
        StorageDead(_1);
        StorageDead(_3);
        return;
    }
}

const Z: &u32 = {
    let mut _0: &u32;
    let _1: &u32;
    let _2: u32;
    let mut _3: &u32;

    bb0: {
        StorageLive(_1);
        _3 = const _;
        _1 = &(*_3);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in Z: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 42_u32;
        _0 = &_1;
        return;
    }
}

const _Z: () = {
    let mut _0: ();
    let mut _2: *const u32;
    let mut _3: *const u32;
    let _4: &u32;
    let _5: ();
    let mut _6: *mut u8;
    let _7: ();
    let mut _8: *mut u8;
    let _9: ();
    let mut _10: *mut u8;
    let mut _12: *const u32;
    let mut _13: *const u32;
    let _14: &u32;
    let _15: ();
    let mut _16: *mut u8;
    let _17: ();
    let mut _18: *mut u8;
    let _19: ();
    let mut _20: *mut u8;
    scope 1 {
        let _1: *mut u8;
        scope 2 {
            debug ptr1 => _1;
            let _11: *mut u8;
            scope 3 {
                debug ptr2 => _11;
            }
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = const _;
        _3 = &raw const (*_4);
        _2 = _3;
        _1 = move _2 as *mut u8 (PtrToPtr);
        StorageDead(_2);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _1;
        ConstEvalCounter;
        _5 = const_deallocate(move _6, const 4_usize, const 4_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _1;
        ConstEvalCounter;
        _7 = const_deallocate(move _8, const 2_usize, const 4_usize) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _1;
        ConstEvalCounter;
        _9 = const_deallocate(move _10, const 4_usize, const 2_usize) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = const _;
        _13 = &raw const (*_14);
        _12 = _13;
        _11 = move _12 as *mut u8 (PtrToPtr);
        StorageDead(_12);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _11;
        ConstEvalCounter;
        _15 = const_deallocate(move _16, const 4_usize, const 4_usize) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _11;
        ConstEvalCounter;
        _17 = const_deallocate(move _18, const 2_usize, const 4_usize) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _11;
        ConstEvalCounter;
        _19 = const_deallocate(move _20, const 4_usize, const 2_usize) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_20);
        StorageDead(_19);
        _0 = const ();
        StorageDead(_11);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u32, &u32);
    let _2: &u32;
    let _3: &u32;
    let _4: &u32;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: u32;
    let mut _8: u32;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _12: (&u32, &u32);
    let _13: &u32;
    let _14: &u32;
    let _15: &u32;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: u32;
    let mut _19: u32;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: &u32;
    let mut _24: &u32;
    scope 1 {
        debug left_val => _3;
        debug right_val => _4;
        let _9: core::panicking::AssertKind;
        scope 2 {
            debug kind => _9;
        }
    }
    scope 3 {
        debug left_val => _14;
        debug right_val => _15;
        let _20: core::panicking::AssertKind;
        scope 4 {
            debug kind => _20;
        }
    }

    bb0: {
        _2 = const _;
        _24 = const _;
        _1 = (_2, _24);
        _3 = (_1.0: &u32);
        _4 = (_1.1: &u32);
        _7 = (*_3);
        _8 = (*_4);
        _6 = Eq(move _7, move _8);
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<u32, u32>(move _9, _3, _4, move _11) -> unwind continue;
    }

    bb2: {
        _13 = const _;
        _23 = const _;
        _12 = (_13, _23);
        _14 = (_12.0: &u32);
        _15 = (_12.1: &u32);
        _18 = (*_14);
        _19 = (*_15);
        _17 = Eq(move _18, move _19);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<u32, u32>(move _20, _14, _15, move _22) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 42_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 42_u32;
        _0 = &_1;
        return;
    }
}
