// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const FOO: i32 = {
    let mut _0: i32;

    bb0: {
        ConstEvalCounter;
        _0 = foo() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn foo() -> i32 {
    let mut _0: i32;
    let mut _2: *mut u8;
    scope 1 {
        debug t => _1;
        scope 4 {
            let mut _3: *const ();
            let mut _4: usize;
            let mut _5: usize;
            let mut _6: usize;
            let mut _7: usize;
            let mut _8: bool;
        }
    }
    scope 2 {
        let _1: *mut i32;
        scope 3 {
            debug i => _1;
            let mut _9: *const ();
            let mut _10: usize;
            let mut _11: usize;
            let mut _12: usize;
            let mut _13: usize;
            let mut _14: bool;
        }
    }

    bb0: {
        _2 = const_allocate(const 4_usize, const 4_usize) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        _1 = move _2 as *mut i32 (PtrToPtr);
        _9 = _1 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf(i32);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb3, unwind unreachable];
    }

    bb2: {
        _0 = (*_1);
        return;
    }

    bb3: {
        (*_1) = const 20_i32;
        _3 = _1 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(i32);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb2, unwind unreachable];
    }
}

// MIR FOR CTFE
fn foo() -> i32 {
    let mut _0: i32;
    let _1: *mut i32;
    let mut _3: *mut u8;
    scope 1 {
        debug t => _1;
        scope 4 {
        }
    }
    scope 2 {
        let _2: *mut i32;
        scope 3 {
            debug i => _2;
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        ConstEvalCounter;
        _3 = const_allocate(const 4_usize, const 4_usize) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        _2 = move _3 as *mut i32 (PtrToPtr);
        StorageDead(_3);
        (*_2) = const 20_i32;
        _1 = _2;
        StorageDead(_2);
        _0 = (*_1);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let _2: &i32;
    let _3: &i32;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: i32;
    let mut _7: i32;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: &i32;
    let mut _12: &i32;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }

    bb0: {
        _12 = const _;
        _11 = const _;
        _1 = (_12, _11);
        _2 = (_1.0: &i32);
        _3 = (_1.1: &i32);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<i32, i32>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 20_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}
