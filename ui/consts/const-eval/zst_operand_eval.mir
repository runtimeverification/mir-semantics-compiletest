// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static ASSERT: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:16: 3:18
    let mut _1: [(); 1];                 // in scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:21: 3:25
    let mut _2: ();                      // in scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:22: 3:24
    let _3: usize;                       // in scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:26: 3:69
    let mut _4: bool;                    // in scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:26: 3:60
    let mut _5: bool;                    // in scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:27: 3:60
    let mut _6: usize;                   // in scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:28: 3:54
    let mut _7: usize;                   // in scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:21: 3:70
    let mut _8: bool;                    // in scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:21: 3:70

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:21: 3:25
        StorageLive(_2);                 // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:22: 3:24
        _2 = ();                         // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:22: 3:24
        _1 = [move _2];                  // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:21: 3:25
        StorageDead(_2);                 // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:24: 3:25
        StorageLive(_3);                 // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:26: 3:69
        StorageLive(_4);                 // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:26: 3:60
        StorageLive(_5);                 // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:27: 3:60
        StorageLive(_6);                 // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:28: 3:54
        ConstEvalCounter;                // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:28: 3:54
        _6 = std::mem::size_of::<u32>() -> bb1; // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:28: 3:54
                                         // mir::Constant
                                         // + span: ui/consts/const-eval/zst_operand_eval.rs:3:28: 3:52
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<u32>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = Eq(move _6, const 4_usize); // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:27: 3:60
        StorageDead(_6);                 // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:59: 3:60
        _4 = Not(move _5);               // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:26: 3:60
        StorageDead(_5);                 // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:59: 3:60
        _3 = move _4 as usize (IntToInt); // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:26: 3:69
        StorageDead(_4);                 // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:68: 3:69
        _7 = Len(_1);                    // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:21: 3:70
        _8 = Lt(_3, _7);                 // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:21: 3:70
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _3) -> bb2; // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:21: 3:70
    }

    bb2: {
        _0 = _1[_3];                     // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:21: 3:70
        StorageDead(_3);                 // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:69: 3:70
        StorageDead(_1);                 // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:69: 3:70
        return;                          // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:3:1: 3:71
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-eval/zst_operand_eval.rs:5:11: 5:11

    bb0: {
        return;                          // scope 0 at ui/consts/const-eval/zst_operand_eval.rs:5:13: 5:13
    }
}
