// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const _: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-88649.rs:9:10: 9:12
    let mut _1: i32;                     // in scope 0 at ui/consts/issue-88649.rs:10:9: 10:14
    let mut _2: ();                      // in scope 0 at ui/consts/issue-88649.rs:9:1: 18:3
    let mut _3: bool;                    // in scope 0 at ui/consts/issue-88649.rs:11:11: 11:16
    let mut _4: i32;                     // in scope 0 at ui/consts/issue-88649.rs:11:11: 11:12
    let _5: ();                          // in scope 0 at ui/consts/issue-88649.rs:12:9: 15:10
    let mut _6: Foo;                     // in scope 0 at ui/consts/issue-88649.rs:12:15: 12:34
    let mut _7: isize;                   // in scope 0 at ui/consts/issue-88649.rs:13:13: 13:29
    let mut _8: &Foo;                    // in scope 0 at ui/consts/issue-88649.rs:12:15: 12:34
    let mut _11: bool;                   // in scope 0 at ui/consts/issue-88649.rs:13:52: 13:53
    let mut _12: bool;                   // in scope 0 at ui/consts/issue-88649.rs:13:52: 13:53
    let mut _13: (i32, bool);            // in scope 0 at ui/consts/issue-88649.rs:16:9: 16:15
    let mut _14: !;                      // in scope 0 at ui/consts/issue-88649.rs:11:5: 17:6
    let _15: ();                         // in scope 0 at ui/consts/issue-88649.rs:11:5: 17:6
    let mut _16: !;                      // in scope 0 at ui/consts/issue-88649.rs:11:5: 17:6
    scope 1 {
        debug n => _1;                   // in scope 1 at ui/consts/issue-88649.rs:10:9: 10:14
        let _9: bool;                    // in scope 1 at ui/consts/issue-88649.rs:13:27: 13:28
        let _10: &bool;                  // in scope 1 at ui/consts/issue-88649.rs:13:27: 13:28
        let mut _17: &Foo;               // in scope 1 at ui/consts/issue-88649.rs:13:46: 13:47
        let mut _18: &Foo;               // in scope 1 at ui/consts/issue-88649.rs:13:27: 13:28
        scope 2 {
            debug x => _9;               // in scope 2 at ui/consts/issue-88649.rs:13:27: 13:28
            debug x => _10;              // in scope 2 at ui/consts/issue-88649.rs:13:27: 13:28
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/issue-88649.rs:10:9: 10:14
        _1 = const 0_i32;                // scope 0 at ui/consts/issue-88649.rs:10:17: 10:18
        goto -> bb1;                     // scope 1 at ui/consts/issue-88649.rs:11:5: 17:6
    }

    bb1: {
        StorageLive(_3);                 // scope 1 at ui/consts/issue-88649.rs:11:11: 11:16
        StorageLive(_4);                 // scope 1 at ui/consts/issue-88649.rs:11:11: 11:12
        _4 = _1;                         // scope 1 at ui/consts/issue-88649.rs:11:11: 11:12
        _3 = Lt(move _4, const 2_i32);   // scope 1 at ui/consts/issue-88649.rs:11:11: 11:16
        StorageDead(_4);                 // scope 1 at ui/consts/issue-88649.rs:11:15: 11:16
        switchInt(move _3) -> [0: bb13, otherwise: bb2]; // scope 1 at ui/consts/issue-88649.rs:11:11: 11:16
    }

    bb2: {
        StorageLive(_5);                 // scope 1 at ui/consts/issue-88649.rs:12:9: 15:10
        StorageLive(_6);                 // scope 1 at ui/consts/issue-88649.rs:12:15: 12:34
        _6 = Foo::Variant1(const true);  // scope 1 at ui/consts/issue-88649.rs:12:15: 12:34
        _7 = discriminant(_6);           // scope 1 at ui/consts/issue-88649.rs:12:15: 12:34
        switchInt(move _7) -> [0: bb5, 1: bb8, otherwise: bb3]; // scope 1 at ui/consts/issue-88649.rs:12:9: 12:34
    }

    bb3: {
        _5 = const ();                   // scope 1 at ui/consts/issue-88649.rs:14:18: 14:20
        goto -> bb11;                    // scope 1 at ui/consts/issue-88649.rs:14:18: 14:20
    }

    bb4: {
        _5 = const ();                   // scope 2 at ui/consts/issue-88649.rs:13:57: 13:59
        StorageDead(_9);                 // scope 1 at ui/consts/issue-88649.rs:13:58: 13:59
        StorageDead(_10);                // scope 1 at ui/consts/issue-88649.rs:13:58: 13:59
        goto -> bb11;                    // scope 1 at ui/consts/issue-88649.rs:13:58: 13:59
    }

    bb5: {
        StorageLive(_10);                // scope 1 at ui/consts/issue-88649.rs:13:27: 13:28
        _18 = const _;                   // scope 1 at ui/consts/issue-88649.rs:13:27: 13:28
                                         // mir::Constant
                                         // + span: ui/consts/issue-88649.rs:13:27: 13:28
                                         // + literal: Const { ty: &Foo, val: Unevaluated(_, [], Some(promoted[1])) }
        _10 = &(((*_18) as Variant1).0: bool); // scope 1 at ui/consts/issue-88649.rs:13:27: 13:28
        StorageLive(_11);                // scope 1 at ui/consts/issue-88649.rs:13:52: 13:53
        _11 = (*_10);                    // scope 1 at ui/consts/issue-88649.rs:13:52: 13:53
        switchInt(move _11) -> [0: bb7, otherwise: bb6]; // scope 1 at ui/consts/issue-88649.rs:13:52: 13:53
    }

    bb6: {
        StorageDead(_11);                // scope 1 at ui/consts/issue-88649.rs:13:52: 13:53
        StorageLive(_9);                 // scope 1 at ui/consts/issue-88649.rs:13:27: 13:28
        _9 = ((_6 as Variant1).0: bool); // scope 1 at ui/consts/issue-88649.rs:13:27: 13:28
        goto -> bb4;                     // scope 1 at ui/consts/issue-88649.rs:12:9: 15:10
    }

    bb7: {
        StorageDead(_11);                // scope 1 at ui/consts/issue-88649.rs:13:52: 13:53
        StorageDead(_10);                // scope 1 at ui/consts/issue-88649.rs:13:58: 13:59
        goto -> bb3;                     // scope 1 at ui/consts/issue-88649.rs:13:52: 13:53
    }

    bb8: {
        StorageLive(_10);                // scope 1 at ui/consts/issue-88649.rs:13:46: 13:47
        _17 = const _;                   // scope 1 at ui/consts/issue-88649.rs:13:46: 13:47
                                         // mir::Constant
                                         // + span: ui/consts/issue-88649.rs:13:46: 13:47
                                         // + literal: Const { ty: &Foo, val: Unevaluated(_, [], Some(promoted[0])) }
        _10 = &(((*_17) as Variant2).0: bool); // scope 1 at ui/consts/issue-88649.rs:13:46: 13:47
        StorageLive(_12);                // scope 1 at ui/consts/issue-88649.rs:13:52: 13:53
        _12 = (*_10);                    // scope 1 at ui/consts/issue-88649.rs:13:52: 13:53
        switchInt(move _12) -> [0: bb10, otherwise: bb9]; // scope 1 at ui/consts/issue-88649.rs:13:52: 13:53
    }

    bb9: {
        StorageDead(_12);                // scope 1 at ui/consts/issue-88649.rs:13:52: 13:53
        StorageLive(_9);                 // scope 1 at ui/consts/issue-88649.rs:13:46: 13:47
        _9 = ((_6 as Variant2).0: bool); // scope 1 at ui/consts/issue-88649.rs:13:46: 13:47
        goto -> bb4;                     // scope 1 at ui/consts/issue-88649.rs:12:9: 15:10
    }

    bb10: {
        StorageDead(_12);                // scope 1 at ui/consts/issue-88649.rs:13:52: 13:53
        StorageDead(_10);                // scope 1 at ui/consts/issue-88649.rs:13:58: 13:59
        goto -> bb3;                     // scope 1 at ui/consts/issue-88649.rs:13:52: 13:53
    }

    bb11: {
        StorageDead(_6);                 // scope 1 at ui/consts/issue-88649.rs:15:9: 15:10
        StorageDead(_5);                 // scope 1 at ui/consts/issue-88649.rs:15:9: 15:10
        _13 = CheckedAdd(_1, const 1_i32); // scope 1 at ui/consts/issue-88649.rs:16:9: 16:15
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> bb12; // scope 1 at ui/consts/issue-88649.rs:16:9: 16:15
    }

    bb12: {
        _1 = move (_13.0: i32);          // scope 1 at ui/consts/issue-88649.rs:16:9: 16:15
        _2 = const ();                   // scope 1 at ui/consts/issue-88649.rs:11:17: 17:6
        StorageDead(_3);                 // scope 1 at ui/consts/issue-88649.rs:17:5: 17:6
        ConstEvalCounter;                // scope 1 at ui/consts/issue-88649.rs:11:5: 17:6
        goto -> bb1;                     // scope 1 at ui/consts/issue-88649.rs:11:5: 17:6
    }

    bb13: {
        StorageLive(_15);                // scope 1 at ui/consts/issue-88649.rs:11:5: 17:6
        _0 = const ();                   // scope 1 at ui/consts/issue-88649.rs:11:5: 17:6
        StorageDead(_15);                // scope 1 at ui/consts/issue-88649.rs:17:5: 17:6
        StorageDead(_3);                 // scope 1 at ui/consts/issue-88649.rs:17:5: 17:6
        StorageDead(_1);                 // scope 0 at ui/consts/issue-88649.rs:18:1: 18:2
        return;                          // scope 0 at ui/consts/issue-88649.rs:9:1: 18:3
    }
}

promoted[0] in _: &Foo = {
    let mut _0: &Foo;                    // return place in scope 0 at ui/consts/issue-88649.rs:13:46: 13:47
    let mut _1: Foo;                     // in scope 0 at ui/consts/issue-88649.rs:12:15: 12:34

    bb0: {
        _1 = Foo::Variant1(const true);  // scope 0 at ui/consts/issue-88649.rs:12:15: 12:34
        _0 = &_1;                        // scope 0 at ui/consts/issue-88649.rs:13:46: 13:47
        return;                          // scope 0 at ui/consts/issue-88649.rs:13:46: 13:47
    }
}

promoted[1] in _: &Foo = {
    let mut _0: &Foo;                    // return place in scope 0 at ui/consts/issue-88649.rs:13:27: 13:28
    let mut _1: Foo;                     // in scope 0 at ui/consts/issue-88649.rs:12:15: 12:34

    bb0: {
        _1 = Foo::Variant1(const true);  // scope 0 at ui/consts/issue-88649.rs:12:15: 12:34
        _0 = &_1;                        // scope 0 at ui/consts/issue-88649.rs:13:27: 13:28
        return;                          // scope 0 at ui/consts/issue-88649.rs:13:27: 13:28
    }
}

fn Foo::Variant1(_1: bool) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/consts/issue-88649.rs:5:5: 5:13

    bb0: {
        _0 = Foo::Variant1(move _1);     // scope 0 at ui/consts/issue-88649.rs:5:5: 5:13
        return;                          // scope 0 at ui/consts/issue-88649.rs:5:5: 5:13
    }
}

// MIR FOR CTFE
fn Foo::Variant1(_1: bool) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/consts/issue-88649.rs:5:5: 5:13

    bb0: {
        _0 = Foo::Variant1(move _1);     // scope 0 at ui/consts/issue-88649.rs:5:5: 5:13
        return;                          // scope 0 at ui/consts/issue-88649.rs:5:5: 5:13
    }
}

fn Foo::Variant2(_1: bool) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/consts/issue-88649.rs:6:5: 6:13

    bb0: {
        _0 = Foo::Variant2(move _1);     // scope 0 at ui/consts/issue-88649.rs:6:5: 6:13
        return;                          // scope 0 at ui/consts/issue-88649.rs:6:5: 6:13
    }
}

// MIR FOR CTFE
fn Foo::Variant2(_1: bool) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/consts/issue-88649.rs:6:5: 6:13

    bb0: {
        _0 = Foo::Variant2(move _1);     // scope 0 at ui/consts/issue-88649.rs:6:5: 6:13
        return;                          // scope 0 at ui/consts/issue-88649.rs:6:5: 6:13
    }
}
