// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const NONE_CELL_STRING: Option<Cell<String>> = {
    let mut _0: std::option::Option<std::cell::Cell<std::string::String>>;

    bb0: {
        _0 = Option::<Cell<String>>::None;
        return;
    }
}

const <impl at ui/consts/rvalue-static-promotion.rs:8:1: 8:15>::FOO: Option<Box<T>> = {
    let mut _0: std::option::Option<std::boxed::Box<T>>;

    bb0: {
        _0 = Option::<Box<T>>::None;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
        }
    }

    bb0: {
        return;
    }
}

promoted[0] in main: &Option<Box<()>> = {
    let mut _0: &std::option::Option<std::boxed::Box<()>>;
    let mut _1: std::option::Option<std::boxed::Box<()>>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Option<Cell<String>> = {
    let mut _0: &std::option::Option<std::cell::Cell<std::string::String>>;
    let mut _1: std::option::Option<std::cell::Cell<std::string::String>>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &Option<u32> = {
    let mut _0: &std::option::Option<u32>;
    let mut _1: std::option::Option<u32>;

    bb0: {
        _1 = Option::<u32>::None;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 42_u32;
        _0 = &_1;
        return;
    }
}

fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}
