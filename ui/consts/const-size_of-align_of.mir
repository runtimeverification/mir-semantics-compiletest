// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn choice_u64(_1: bool, _2: u64, _3: u64) -> u64 {
    debug c => _1;                       // in scope 0 at ui/consts/const-size_of-align_of.rs:7:21: 7:22
    debug a => _2;                       // in scope 0 at ui/consts/const-size_of-align_of.rs:7:30: 7:31
    debug b => _3;                       // in scope 0 at ui/consts/const-size_of-align_of.rs:7:38: 7:39
    let mut _0: u64;                     // return place in scope 0 at ui/consts/const-size_of-align_of.rs:7:49: 7:52
    let mut _4: u64;                     // in scope 0 at ui/consts/const-size_of-align_of.rs:8:5: 8:29
    let mut _5: u64;                     // in scope 0 at ui/consts/const-size_of-align_of.rs:8:5: 8:25
    let mut _6: i64;                     // in scope 0 at ui/consts/const-size_of-align_of.rs:8:6: 8:17
    let mut _7: i64;                     // in scope 0 at ui/consts/const-size_of-align_of.rs:8:7: 8:17
    let mut _8: bool;                    // in scope 0 at ui/consts/const-size_of-align_of.rs:8:8: 8:9
    let mut _9: bool;                    // in scope 0 at ui/consts/const-size_of-align_of.rs:8:6: 8:17
    let mut _10: u64;                    // in scope 0 at ui/consts/const-size_of-align_of.rs:8:28: 8:29
    let mut _11: u64;                    // in scope 0 at ui/consts/const-size_of-align_of.rs:8:32: 8:57
    let mut _12: u64;                    // in scope 0 at ui/consts/const-size_of-align_of.rs:8:32: 8:53
    let mut _13: i64;                    // in scope 0 at ui/consts/const-size_of-align_of.rs:8:33: 8:45
    let mut _14: i64;                    // in scope 0 at ui/consts/const-size_of-align_of.rs:8:34: 8:45
    let mut _15: bool;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:8:35: 8:37
    let mut _16: bool;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:8:36: 8:37
    let mut _17: bool;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:8:33: 8:45
    let mut _18: u64;                    // in scope 0 at ui/consts/const-size_of-align_of.rs:8:56: 8:57

    bb0: {
        _8 = _1;                         // scope 0 at ui/consts/const-size_of-align_of.rs:8:8: 8:9
        _7 = move _8 as i64 (IntToInt);  // scope 0 at ui/consts/const-size_of-align_of.rs:8:7: 8:17
        _9 = Eq(_7, const i64::MIN);     // scope 0 at ui/consts/const-size_of-align_of.rs:8:6: 8:17
        assert(!move _9, "attempt to negate `{}`, which would overflow", _7) -> bb1; // scope 0 at ui/consts/const-size_of-align_of.rs:8:6: 8:17
    }

    bb1: {
        _6 = Neg(move _7);               // scope 0 at ui/consts/const-size_of-align_of.rs:8:6: 8:17
        _5 = move _6 as u64 (IntToInt);  // scope 0 at ui/consts/const-size_of-align_of.rs:8:5: 8:25
        _10 = _2;                        // scope 0 at ui/consts/const-size_of-align_of.rs:8:28: 8:29
        _4 = BitAnd(move _5, move _10);  // scope 0 at ui/consts/const-size_of-align_of.rs:8:5: 8:29
        _16 = _1;                        // scope 0 at ui/consts/const-size_of-align_of.rs:8:36: 8:37
        _15 = Not(move _16);             // scope 0 at ui/consts/const-size_of-align_of.rs:8:35: 8:37
        _14 = move _15 as i64 (IntToInt); // scope 0 at ui/consts/const-size_of-align_of.rs:8:34: 8:45
        _17 = Eq(_14, const i64::MIN);   // scope 0 at ui/consts/const-size_of-align_of.rs:8:33: 8:45
        assert(!move _17, "attempt to negate `{}`, which would overflow", _14) -> bb2; // scope 0 at ui/consts/const-size_of-align_of.rs:8:33: 8:45
    }

    bb2: {
        _13 = Neg(move _14);             // scope 0 at ui/consts/const-size_of-align_of.rs:8:33: 8:45
        _12 = move _13 as u64 (IntToInt); // scope 0 at ui/consts/const-size_of-align_of.rs:8:32: 8:53
        _18 = _3;                        // scope 0 at ui/consts/const-size_of-align_of.rs:8:56: 8:57
        _11 = BitAnd(move _12, move _18); // scope 0 at ui/consts/const-size_of-align_of.rs:8:32: 8:57
        _0 = BitOr(move _4, move _11);   // scope 0 at ui/consts/const-size_of-align_of.rs:8:5: 8:57
        return;                          // scope 0 at ui/consts/const-size_of-align_of.rs:9:2: 9:2
    }
}

// MIR FOR CTFE
fn choice_u64(_1: bool, _2: u64, _3: u64) -> u64 {
    debug c => _1;                       // in scope 0 at ui/consts/const-size_of-align_of.rs:7:21: 7:22
    debug a => _2;                       // in scope 0 at ui/consts/const-size_of-align_of.rs:7:30: 7:31
    debug b => _3;                       // in scope 0 at ui/consts/const-size_of-align_of.rs:7:38: 7:39
    let mut _0: u64;                     // return place in scope 0 at ui/consts/const-size_of-align_of.rs:7:49: 7:52
    let mut _4: u64;                     // in scope 0 at ui/consts/const-size_of-align_of.rs:8:5: 8:29
    let mut _5: u64;                     // in scope 0 at ui/consts/const-size_of-align_of.rs:8:5: 8:25
    let mut _6: i64;                     // in scope 0 at ui/consts/const-size_of-align_of.rs:8:6: 8:17
    let mut _7: i64;                     // in scope 0 at ui/consts/const-size_of-align_of.rs:8:7: 8:17
    let mut _8: bool;                    // in scope 0 at ui/consts/const-size_of-align_of.rs:8:8: 8:9
    let mut _9: bool;                    // in scope 0 at ui/consts/const-size_of-align_of.rs:8:6: 8:17
    let mut _10: u64;                    // in scope 0 at ui/consts/const-size_of-align_of.rs:8:28: 8:29
    let mut _11: u64;                    // in scope 0 at ui/consts/const-size_of-align_of.rs:8:32: 8:57
    let mut _12: u64;                    // in scope 0 at ui/consts/const-size_of-align_of.rs:8:32: 8:53
    let mut _13: i64;                    // in scope 0 at ui/consts/const-size_of-align_of.rs:8:33: 8:45
    let mut _14: i64;                    // in scope 0 at ui/consts/const-size_of-align_of.rs:8:34: 8:45
    let mut _15: bool;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:8:35: 8:37
    let mut _16: bool;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:8:36: 8:37
    let mut _17: bool;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:8:33: 8:45
    let mut _18: u64;                    // in scope 0 at ui/consts/const-size_of-align_of.rs:8:56: 8:57

    bb0: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-size_of-align_of.rs:8:5: 8:29
        StorageLive(_5);                 // scope 0 at ui/consts/const-size_of-align_of.rs:8:5: 8:25
        StorageLive(_6);                 // scope 0 at ui/consts/const-size_of-align_of.rs:8:6: 8:17
        StorageLive(_7);                 // scope 0 at ui/consts/const-size_of-align_of.rs:8:7: 8:17
        StorageLive(_8);                 // scope 0 at ui/consts/const-size_of-align_of.rs:8:8: 8:9
        _8 = _1;                         // scope 0 at ui/consts/const-size_of-align_of.rs:8:8: 8:9
        _7 = move _8 as i64 (IntToInt);  // scope 0 at ui/consts/const-size_of-align_of.rs:8:7: 8:17
        StorageDead(_8);                 // scope 0 at ui/consts/const-size_of-align_of.rs:8:16: 8:17
        _9 = Eq(_7, const i64::MIN);     // scope 0 at ui/consts/const-size_of-align_of.rs:8:6: 8:17
        assert(!move _9, "attempt to negate `{}`, which would overflow", _7) -> bb1; // scope 0 at ui/consts/const-size_of-align_of.rs:8:6: 8:17
    }

    bb1: {
        _6 = Neg(move _7);               // scope 0 at ui/consts/const-size_of-align_of.rs:8:6: 8:17
        StorageDead(_7);                 // scope 0 at ui/consts/const-size_of-align_of.rs:8:16: 8:17
        _5 = move _6 as u64 (IntToInt);  // scope 0 at ui/consts/const-size_of-align_of.rs:8:5: 8:25
        StorageDead(_6);                 // scope 0 at ui/consts/const-size_of-align_of.rs:8:24: 8:25
        StorageLive(_10);                // scope 0 at ui/consts/const-size_of-align_of.rs:8:28: 8:29
        _10 = _2;                        // scope 0 at ui/consts/const-size_of-align_of.rs:8:28: 8:29
        _4 = BitAnd(move _5, move _10);  // scope 0 at ui/consts/const-size_of-align_of.rs:8:5: 8:29
        StorageDead(_10);                // scope 0 at ui/consts/const-size_of-align_of.rs:8:28: 8:29
        StorageDead(_5);                 // scope 0 at ui/consts/const-size_of-align_of.rs:8:28: 8:29
        StorageLive(_11);                // scope 0 at ui/consts/const-size_of-align_of.rs:8:32: 8:57
        StorageLive(_12);                // scope 0 at ui/consts/const-size_of-align_of.rs:8:32: 8:53
        StorageLive(_13);                // scope 0 at ui/consts/const-size_of-align_of.rs:8:33: 8:45
        StorageLive(_14);                // scope 0 at ui/consts/const-size_of-align_of.rs:8:34: 8:45
        StorageLive(_15);                // scope 0 at ui/consts/const-size_of-align_of.rs:8:35: 8:37
        StorageLive(_16);                // scope 0 at ui/consts/const-size_of-align_of.rs:8:36: 8:37
        _16 = _1;                        // scope 0 at ui/consts/const-size_of-align_of.rs:8:36: 8:37
        _15 = Not(move _16);             // scope 0 at ui/consts/const-size_of-align_of.rs:8:35: 8:37
        StorageDead(_16);                // scope 0 at ui/consts/const-size_of-align_of.rs:8:36: 8:37
        _14 = move _15 as i64 (IntToInt); // scope 0 at ui/consts/const-size_of-align_of.rs:8:34: 8:45
        StorageDead(_15);                // scope 0 at ui/consts/const-size_of-align_of.rs:8:44: 8:45
        _17 = Eq(_14, const i64::MIN);   // scope 0 at ui/consts/const-size_of-align_of.rs:8:33: 8:45
        assert(!move _17, "attempt to negate `{}`, which would overflow", _14) -> bb2; // scope 0 at ui/consts/const-size_of-align_of.rs:8:33: 8:45
    }

    bb2: {
        _13 = Neg(move _14);             // scope 0 at ui/consts/const-size_of-align_of.rs:8:33: 8:45
        StorageDead(_14);                // scope 0 at ui/consts/const-size_of-align_of.rs:8:44: 8:45
        _12 = move _13 as u64 (IntToInt); // scope 0 at ui/consts/const-size_of-align_of.rs:8:32: 8:53
        StorageDead(_13);                // scope 0 at ui/consts/const-size_of-align_of.rs:8:52: 8:53
        StorageLive(_18);                // scope 0 at ui/consts/const-size_of-align_of.rs:8:56: 8:57
        _18 = _3;                        // scope 0 at ui/consts/const-size_of-align_of.rs:8:56: 8:57
        _11 = BitAnd(move _12, move _18); // scope 0 at ui/consts/const-size_of-align_of.rs:8:32: 8:57
        StorageDead(_18);                // scope 0 at ui/consts/const-size_of-align_of.rs:8:56: 8:57
        StorageDead(_12);                // scope 0 at ui/consts/const-size_of-align_of.rs:8:56: 8:57
        _0 = BitOr(move _4, move _11);   // scope 0 at ui/consts/const-size_of-align_of.rs:8:5: 8:57
        StorageDead(_11);                // scope 0 at ui/consts/const-size_of-align_of.rs:8:56: 8:57
        StorageDead(_4);                 // scope 0 at ui/consts/const-size_of-align_of.rs:8:56: 8:57
        return;                          // scope 0 at ui/consts/const-size_of-align_of.rs:9:2: 9:2
    }
}

fn max_usize(_1: usize, _2: usize) -> usize {
    debug a => _1;                       // in scope 0 at ui/consts/const-size_of-align_of.rs:11:20: 11:21
    debug b => _2;                       // in scope 0 at ui/consts/const-size_of-align_of.rs:11:30: 11:31
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-size_of-align_of.rs:11:43: 11:48
    let mut _3: u64;                     // in scope 0 at ui/consts/const-size_of-align_of.rs:12:5: 12:42
    let mut _4: bool;                    // in scope 0 at ui/consts/const-size_of-align_of.rs:12:16: 12:21
    let mut _5: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:12:16: 12:17
    let mut _6: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:12:20: 12:21
    let mut _7: u64;                     // in scope 0 at ui/consts/const-size_of-align_of.rs:12:23: 12:31
    let mut _8: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:12:23: 12:24
    let mut _9: u64;                     // in scope 0 at ui/consts/const-size_of-align_of.rs:12:33: 12:41
    let mut _10: usize;                  // in scope 0 at ui/consts/const-size_of-align_of.rs:12:33: 12:34

    bb0: {
        _5 = _1;                         // scope 0 at ui/consts/const-size_of-align_of.rs:12:16: 12:17
        _6 = _2;                         // scope 0 at ui/consts/const-size_of-align_of.rs:12:20: 12:21
        _4 = Gt(move _5, move _6);       // scope 0 at ui/consts/const-size_of-align_of.rs:12:16: 12:21
        _8 = _1;                         // scope 0 at ui/consts/const-size_of-align_of.rs:12:23: 12:24
        _7 = move _8 as u64 (IntToInt);  // scope 0 at ui/consts/const-size_of-align_of.rs:12:23: 12:31
        _10 = _2;                        // scope 0 at ui/consts/const-size_of-align_of.rs:12:33: 12:34
        _9 = move _10 as u64 (IntToInt); // scope 0 at ui/consts/const-size_of-align_of.rs:12:33: 12:41
        _3 = choice_u64(move _4, move _7, move _9) -> bb1; // scope 0 at ui/consts/const-size_of-align_of.rs:12:5: 12:42
                                         // mir::Constant
                                         // + span: ui/consts/const-size_of-align_of.rs:12:5: 12:15
                                         // + literal: Const { ty: fn(bool, u64, u64) -> u64 {choice_u64}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = move _3 as usize (IntToInt); // scope 0 at ui/consts/const-size_of-align_of.rs:12:5: 12:51
        return;                          // scope 0 at ui/consts/const-size_of-align_of.rs:13:2: 13:2
    }
}

// MIR FOR CTFE
fn max_usize(_1: usize, _2: usize) -> usize {
    debug a => _1;                       // in scope 0 at ui/consts/const-size_of-align_of.rs:11:20: 11:21
    debug b => _2;                       // in scope 0 at ui/consts/const-size_of-align_of.rs:11:30: 11:31
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-size_of-align_of.rs:11:43: 11:48
    let mut _3: u64;                     // in scope 0 at ui/consts/const-size_of-align_of.rs:12:5: 12:42
    let mut _4: bool;                    // in scope 0 at ui/consts/const-size_of-align_of.rs:12:16: 12:21
    let mut _5: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:12:16: 12:17
    let mut _6: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:12:20: 12:21
    let mut _7: u64;                     // in scope 0 at ui/consts/const-size_of-align_of.rs:12:23: 12:31
    let mut _8: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:12:23: 12:24
    let mut _9: u64;                     // in scope 0 at ui/consts/const-size_of-align_of.rs:12:33: 12:41
    let mut _10: usize;                  // in scope 0 at ui/consts/const-size_of-align_of.rs:12:33: 12:34

    bb0: {
        StorageLive(_3);                 // scope 0 at ui/consts/const-size_of-align_of.rs:12:5: 12:42
        StorageLive(_4);                 // scope 0 at ui/consts/const-size_of-align_of.rs:12:16: 12:21
        StorageLive(_5);                 // scope 0 at ui/consts/const-size_of-align_of.rs:12:16: 12:17
        _5 = _1;                         // scope 0 at ui/consts/const-size_of-align_of.rs:12:16: 12:17
        StorageLive(_6);                 // scope 0 at ui/consts/const-size_of-align_of.rs:12:20: 12:21
        _6 = _2;                         // scope 0 at ui/consts/const-size_of-align_of.rs:12:20: 12:21
        _4 = Gt(move _5, move _6);       // scope 0 at ui/consts/const-size_of-align_of.rs:12:16: 12:21
        StorageDead(_6);                 // scope 0 at ui/consts/const-size_of-align_of.rs:12:20: 12:21
        StorageDead(_5);                 // scope 0 at ui/consts/const-size_of-align_of.rs:12:20: 12:21
        StorageLive(_7);                 // scope 0 at ui/consts/const-size_of-align_of.rs:12:23: 12:31
        StorageLive(_8);                 // scope 0 at ui/consts/const-size_of-align_of.rs:12:23: 12:24
        _8 = _1;                         // scope 0 at ui/consts/const-size_of-align_of.rs:12:23: 12:24
        _7 = move _8 as u64 (IntToInt);  // scope 0 at ui/consts/const-size_of-align_of.rs:12:23: 12:31
        StorageDead(_8);                 // scope 0 at ui/consts/const-size_of-align_of.rs:12:30: 12:31
        StorageLive(_9);                 // scope 0 at ui/consts/const-size_of-align_of.rs:12:33: 12:41
        StorageLive(_10);                // scope 0 at ui/consts/const-size_of-align_of.rs:12:33: 12:34
        _10 = _2;                        // scope 0 at ui/consts/const-size_of-align_of.rs:12:33: 12:34
        _9 = move _10 as u64 (IntToInt); // scope 0 at ui/consts/const-size_of-align_of.rs:12:33: 12:41
        StorageDead(_10);                // scope 0 at ui/consts/const-size_of-align_of.rs:12:40: 12:41
        ConstEvalCounter;                // scope 0 at ui/consts/const-size_of-align_of.rs:12:5: 12:42
        _3 = choice_u64(move _4, move _7, move _9) -> bb1; // scope 0 at ui/consts/const-size_of-align_of.rs:12:5: 12:42
                                         // mir::Constant
                                         // + span: ui/consts/const-size_of-align_of.rs:12:5: 12:15
                                         // + literal: Const { ty: fn(bool, u64, u64) -> u64 {choice_u64}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_9);                 // scope 0 at ui/consts/const-size_of-align_of.rs:12:41: 12:42
        StorageDead(_7);                 // scope 0 at ui/consts/const-size_of-align_of.rs:12:41: 12:42
        StorageDead(_4);                 // scope 0 at ui/consts/const-size_of-align_of.rs:12:41: 12:42
        _0 = move _3 as usize (IntToInt); // scope 0 at ui/consts/const-size_of-align_of.rs:12:5: 12:51
        StorageDead(_3);                 // scope 0 at ui/consts/const-size_of-align_of.rs:12:50: 12:51
        return;                          // scope 0 at ui/consts/const-size_of-align_of.rs:13:2: 13:2
    }
}

fn align_to(_1: usize, _2: usize) -> usize {
    debug size => _1;                    // in scope 0 at ui/consts/const-size_of-align_of.rs:15:19: 15:23
    debug align => _2;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:15:32: 15:37
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-size_of-align_of.rs:15:49: 15:54
    let mut _3: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:16:5: 16:25
    let mut _4: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:16:6: 16:10
    let mut _5: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:16:13: 16:24
    let mut _6: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:16:14: 16:19
    let mut _7: (usize, bool);           // in scope 0 at ui/consts/const-size_of-align_of.rs:16:13: 16:24
    let mut _8: (usize, bool);           // in scope 0 at ui/consts/const-size_of-align_of.rs:16:5: 16:25
    let mut _9: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:16:28: 16:40
    let mut _10: usize;                  // in scope 0 at ui/consts/const-size_of-align_of.rs:16:29: 16:40
    let mut _11: usize;                  // in scope 0 at ui/consts/const-size_of-align_of.rs:16:30: 16:35
    let mut _12: (usize, bool);          // in scope 0 at ui/consts/const-size_of-align_of.rs:16:29: 16:40

    bb0: {
        _4 = _1;                         // scope 0 at ui/consts/const-size_of-align_of.rs:16:6: 16:10
        _6 = _2;                         // scope 0 at ui/consts/const-size_of-align_of.rs:16:14: 16:19
        _7 = CheckedSub(_6, const 1_usize); // scope 0 at ui/consts/const-size_of-align_of.rs:16:13: 16:24
        assert(!move (_7.1: bool), "attempt to compute `{} - {}`, which would overflow", move _6, const 1_usize) -> bb1; // scope 0 at ui/consts/const-size_of-align_of.rs:16:13: 16:24
    }

    bb1: {
        _5 = move (_7.0: usize);         // scope 0 at ui/consts/const-size_of-align_of.rs:16:13: 16:24
        _8 = CheckedAdd(_4, _5);         // scope 0 at ui/consts/const-size_of-align_of.rs:16:5: 16:25
        assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> bb2; // scope 0 at ui/consts/const-size_of-align_of.rs:16:5: 16:25
    }

    bb2: {
        _3 = move (_8.0: usize);         // scope 0 at ui/consts/const-size_of-align_of.rs:16:5: 16:25
        _11 = _2;                        // scope 0 at ui/consts/const-size_of-align_of.rs:16:30: 16:35
        _12 = CheckedSub(_11, const 1_usize); // scope 0 at ui/consts/const-size_of-align_of.rs:16:29: 16:40
        assert(!move (_12.1: bool), "attempt to compute `{} - {}`, which would overflow", move _11, const 1_usize) -> bb3; // scope 0 at ui/consts/const-size_of-align_of.rs:16:29: 16:40
    }

    bb3: {
        _10 = move (_12.0: usize);       // scope 0 at ui/consts/const-size_of-align_of.rs:16:29: 16:40
        _9 = Not(move _10);              // scope 0 at ui/consts/const-size_of-align_of.rs:16:28: 16:40
        _0 = BitAnd(move _3, move _9);   // scope 0 at ui/consts/const-size_of-align_of.rs:16:5: 16:40
        return;                          // scope 0 at ui/consts/const-size_of-align_of.rs:17:2: 17:2
    }
}

// MIR FOR CTFE
fn align_to(_1: usize, _2: usize) -> usize {
    debug size => _1;                    // in scope 0 at ui/consts/const-size_of-align_of.rs:15:19: 15:23
    debug align => _2;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:15:32: 15:37
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-size_of-align_of.rs:15:49: 15:54
    let mut _3: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:16:5: 16:25
    let mut _4: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:16:6: 16:10
    let mut _5: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:16:13: 16:24
    let mut _6: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:16:14: 16:19
    let mut _7: (usize, bool);           // in scope 0 at ui/consts/const-size_of-align_of.rs:16:13: 16:24
    let mut _8: (usize, bool);           // in scope 0 at ui/consts/const-size_of-align_of.rs:16:5: 16:25
    let mut _9: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:16:28: 16:40
    let mut _10: usize;                  // in scope 0 at ui/consts/const-size_of-align_of.rs:16:29: 16:40
    let mut _11: usize;                  // in scope 0 at ui/consts/const-size_of-align_of.rs:16:30: 16:35
    let mut _12: (usize, bool);          // in scope 0 at ui/consts/const-size_of-align_of.rs:16:29: 16:40

    bb0: {
        StorageLive(_3);                 // scope 0 at ui/consts/const-size_of-align_of.rs:16:5: 16:25
        StorageLive(_4);                 // scope 0 at ui/consts/const-size_of-align_of.rs:16:6: 16:10
        _4 = _1;                         // scope 0 at ui/consts/const-size_of-align_of.rs:16:6: 16:10
        StorageLive(_5);                 // scope 0 at ui/consts/const-size_of-align_of.rs:16:13: 16:24
        StorageLive(_6);                 // scope 0 at ui/consts/const-size_of-align_of.rs:16:14: 16:19
        _6 = _2;                         // scope 0 at ui/consts/const-size_of-align_of.rs:16:14: 16:19
        _7 = CheckedSub(_6, const 1_usize); // scope 0 at ui/consts/const-size_of-align_of.rs:16:13: 16:24
        assert(!move (_7.1: bool), "attempt to compute `{} - {}`, which would overflow", move _6, const 1_usize) -> bb1; // scope 0 at ui/consts/const-size_of-align_of.rs:16:13: 16:24
    }

    bb1: {
        _5 = move (_7.0: usize);         // scope 0 at ui/consts/const-size_of-align_of.rs:16:13: 16:24
        StorageDead(_6);                 // scope 0 at ui/consts/const-size_of-align_of.rs:16:23: 16:24
        _8 = CheckedAdd(_4, _5);         // scope 0 at ui/consts/const-size_of-align_of.rs:16:5: 16:25
        assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> bb2; // scope 0 at ui/consts/const-size_of-align_of.rs:16:5: 16:25
    }

    bb2: {
        _3 = move (_8.0: usize);         // scope 0 at ui/consts/const-size_of-align_of.rs:16:5: 16:25
        StorageDead(_5);                 // scope 0 at ui/consts/const-size_of-align_of.rs:16:24: 16:25
        StorageDead(_4);                 // scope 0 at ui/consts/const-size_of-align_of.rs:16:24: 16:25
        StorageLive(_9);                 // scope 0 at ui/consts/const-size_of-align_of.rs:16:28: 16:40
        StorageLive(_10);                // scope 0 at ui/consts/const-size_of-align_of.rs:16:29: 16:40
        StorageLive(_11);                // scope 0 at ui/consts/const-size_of-align_of.rs:16:30: 16:35
        _11 = _2;                        // scope 0 at ui/consts/const-size_of-align_of.rs:16:30: 16:35
        _12 = CheckedSub(_11, const 1_usize); // scope 0 at ui/consts/const-size_of-align_of.rs:16:29: 16:40
        assert(!move (_12.1: bool), "attempt to compute `{} - {}`, which would overflow", move _11, const 1_usize) -> bb3; // scope 0 at ui/consts/const-size_of-align_of.rs:16:29: 16:40
    }

    bb3: {
        _10 = move (_12.0: usize);       // scope 0 at ui/consts/const-size_of-align_of.rs:16:29: 16:40
        StorageDead(_11);                // scope 0 at ui/consts/const-size_of-align_of.rs:16:39: 16:40
        _9 = Not(move _10);              // scope 0 at ui/consts/const-size_of-align_of.rs:16:28: 16:40
        StorageDead(_10);                // scope 0 at ui/consts/const-size_of-align_of.rs:16:39: 16:40
        _0 = BitAnd(move _3, move _9);   // scope 0 at ui/consts/const-size_of-align_of.rs:16:5: 16:40
        StorageDead(_9);                 // scope 0 at ui/consts/const-size_of-align_of.rs:16:39: 16:40
        StorageDead(_3);                 // scope 0 at ui/consts/const-size_of-align_of.rs:16:39: 16:40
        return;                          // scope 0 at ui/consts/const-size_of-align_of.rs:17:2: 17:2
    }
}

fn packed_union_size_of() -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-size_of-align_of.rs:19:42: 19:47
    let mut _1: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:20:15: 20:34
    let mut _2: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:20:36: 20:55

    bb0: {
        _1 = std::mem::size_of::<A>() -> bb1; // scope 0 at ui/consts/const-size_of-align_of.rs:20:15: 20:34
                                         // mir::Constant
                                         // + span: ui/consts/const-size_of-align_of.rs:20:15: 20:32
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<A>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = std::mem::size_of::<B>() -> bb2; // scope 0 at ui/consts/const-size_of-align_of.rs:20:36: 20:55
                                         // mir::Constant
                                         // + span: ui/consts/const-size_of-align_of.rs:20:36: 20:53
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<B>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = max_usize(move _1, move _2) -> bb3; // scope 0 at ui/consts/const-size_of-align_of.rs:20:5: 20:56
                                         // mir::Constant
                                         // + span: ui/consts/const-size_of-align_of.rs:20:5: 20:14
                                         // + literal: Const { ty: fn(usize, usize) -> usize {max_usize}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/consts/const-size_of-align_of.rs:21:2: 21:2
    }
}

// MIR FOR CTFE
fn packed_union_size_of() -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-size_of-align_of.rs:19:42: 19:47
    let mut _1: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:20:15: 20:34
    let mut _2: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:20:36: 20:55

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-size_of-align_of.rs:20:15: 20:34
        ConstEvalCounter;                // scope 0 at ui/consts/const-size_of-align_of.rs:20:15: 20:34
        _1 = std::mem::size_of::<A>() -> bb1; // scope 0 at ui/consts/const-size_of-align_of.rs:20:15: 20:34
                                         // mir::Constant
                                         // + span: ui/consts/const-size_of-align_of.rs:20:15: 20:32
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<A>}, val: Value(<ZST>) }
    }

    bb1: {
        StorageLive(_2);                 // scope 0 at ui/consts/const-size_of-align_of.rs:20:36: 20:55
        ConstEvalCounter;                // scope 0 at ui/consts/const-size_of-align_of.rs:20:36: 20:55
        _2 = std::mem::size_of::<B>() -> bb2; // scope 0 at ui/consts/const-size_of-align_of.rs:20:36: 20:55
                                         // mir::Constant
                                         // + span: ui/consts/const-size_of-align_of.rs:20:36: 20:53
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<B>}, val: Value(<ZST>) }
    }

    bb2: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-size_of-align_of.rs:20:5: 20:56
        _0 = max_usize(move _1, move _2) -> bb3; // scope 0 at ui/consts/const-size_of-align_of.rs:20:5: 20:56
                                         // mir::Constant
                                         // + span: ui/consts/const-size_of-align_of.rs:20:5: 20:14
                                         // + literal: Const { ty: fn(usize, usize) -> usize {max_usize}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_2);                 // scope 0 at ui/consts/const-size_of-align_of.rs:20:55: 20:56
        StorageDead(_1);                 // scope 0 at ui/consts/const-size_of-align_of.rs:20:55: 20:56
        return;                          // scope 0 at ui/consts/const-size_of-align_of.rs:21:2: 21:2
    }
}

fn union_align_of() -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-size_of-align_of.rs:23:36: 23:41
    let mut _1: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:24:15: 24:35
    let mut _2: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:24:37: 24:57

    bb0: {
        _1 = align_of::<A>() -> bb1;     // scope 0 at ui/consts/const-size_of-align_of.rs:24:15: 24:35
                                         // mir::Constant
                                         // + span: ui/consts/const-size_of-align_of.rs:24:15: 24:33
                                         // + literal: Const { ty: fn() -> usize {align_of::<A>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = align_of::<B>() -> bb2;     // scope 0 at ui/consts/const-size_of-align_of.rs:24:37: 24:57
                                         // mir::Constant
                                         // + span: ui/consts/const-size_of-align_of.rs:24:37: 24:55
                                         // + literal: Const { ty: fn() -> usize {align_of::<B>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = max_usize(move _1, move _2) -> bb3; // scope 0 at ui/consts/const-size_of-align_of.rs:24:5: 24:58
                                         // mir::Constant
                                         // + span: ui/consts/const-size_of-align_of.rs:24:5: 24:14
                                         // + literal: Const { ty: fn(usize, usize) -> usize {max_usize}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/consts/const-size_of-align_of.rs:25:2: 25:2
    }
}

// MIR FOR CTFE
fn union_align_of() -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-size_of-align_of.rs:23:36: 23:41
    let mut _1: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:24:15: 24:35
    let mut _2: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:24:37: 24:57

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-size_of-align_of.rs:24:15: 24:35
        ConstEvalCounter;                // scope 0 at ui/consts/const-size_of-align_of.rs:24:15: 24:35
        _1 = align_of::<A>() -> bb1;     // scope 0 at ui/consts/const-size_of-align_of.rs:24:15: 24:35
                                         // mir::Constant
                                         // + span: ui/consts/const-size_of-align_of.rs:24:15: 24:33
                                         // + literal: Const { ty: fn() -> usize {align_of::<A>}, val: Value(<ZST>) }
    }

    bb1: {
        StorageLive(_2);                 // scope 0 at ui/consts/const-size_of-align_of.rs:24:37: 24:57
        ConstEvalCounter;                // scope 0 at ui/consts/const-size_of-align_of.rs:24:37: 24:57
        _2 = align_of::<B>() -> bb2;     // scope 0 at ui/consts/const-size_of-align_of.rs:24:37: 24:57
                                         // mir::Constant
                                         // + span: ui/consts/const-size_of-align_of.rs:24:37: 24:55
                                         // + literal: Const { ty: fn() -> usize {align_of::<B>}, val: Value(<ZST>) }
    }

    bb2: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-size_of-align_of.rs:24:5: 24:58
        _0 = max_usize(move _1, move _2) -> bb3; // scope 0 at ui/consts/const-size_of-align_of.rs:24:5: 24:58
                                         // mir::Constant
                                         // + span: ui/consts/const-size_of-align_of.rs:24:5: 24:14
                                         // + literal: Const { ty: fn(usize, usize) -> usize {max_usize}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_2);                 // scope 0 at ui/consts/const-size_of-align_of.rs:24:57: 24:58
        StorageDead(_1);                 // scope 0 at ui/consts/const-size_of-align_of.rs:24:57: 24:58
        return;                          // scope 0 at ui/consts/const-size_of-align_of.rs:25:2: 25:2
    }
}

fn union_size_of() -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-size_of-align_of.rs:27:35: 27:40
    let mut _1: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:28:14: 28:44
    let mut _2: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:28:46: 28:70

    bb0: {
        _1 = packed_union_size_of::<A, B>() -> bb1; // scope 0 at ui/consts/const-size_of-align_of.rs:28:14: 28:44
                                         // mir::Constant
                                         // + span: ui/consts/const-size_of-align_of.rs:28:14: 28:42
                                         // + literal: Const { ty: fn() -> usize {packed_union_size_of::<A, B>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = union_align_of::<A, B>() -> bb2; // scope 0 at ui/consts/const-size_of-align_of.rs:28:46: 28:70
                                         // mir::Constant
                                         // + span: ui/consts/const-size_of-align_of.rs:28:46: 28:68
                                         // + literal: Const { ty: fn() -> usize {union_align_of::<A, B>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = align_to(move _1, move _2) -> bb3; // scope 0 at ui/consts/const-size_of-align_of.rs:28:5: 28:71
                                         // mir::Constant
                                         // + span: ui/consts/const-size_of-align_of.rs:28:5: 28:13
                                         // + literal: Const { ty: fn(usize, usize) -> usize {align_to}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/consts/const-size_of-align_of.rs:29:2: 29:2
    }
}

// MIR FOR CTFE
fn union_size_of() -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-size_of-align_of.rs:27:35: 27:40
    let mut _1: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:28:14: 28:44
    let mut _2: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:28:46: 28:70

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-size_of-align_of.rs:28:14: 28:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-size_of-align_of.rs:28:14: 28:44
        _1 = packed_union_size_of::<A, B>() -> bb1; // scope 0 at ui/consts/const-size_of-align_of.rs:28:14: 28:44
                                         // mir::Constant
                                         // + span: ui/consts/const-size_of-align_of.rs:28:14: 28:42
                                         // + literal: Const { ty: fn() -> usize {packed_union_size_of::<A, B>}, val: Value(<ZST>) }
    }

    bb1: {
        StorageLive(_2);                 // scope 0 at ui/consts/const-size_of-align_of.rs:28:46: 28:70
        ConstEvalCounter;                // scope 0 at ui/consts/const-size_of-align_of.rs:28:46: 28:70
        _2 = union_align_of::<A, B>() -> bb2; // scope 0 at ui/consts/const-size_of-align_of.rs:28:46: 28:70
                                         // mir::Constant
                                         // + span: ui/consts/const-size_of-align_of.rs:28:46: 28:68
                                         // + literal: Const { ty: fn() -> usize {union_align_of::<A, B>}, val: Value(<ZST>) }
    }

    bb2: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-size_of-align_of.rs:28:5: 28:71
        _0 = align_to(move _1, move _2) -> bb3; // scope 0 at ui/consts/const-size_of-align_of.rs:28:5: 28:71
                                         // mir::Constant
                                         // + span: ui/consts/const-size_of-align_of.rs:28:5: 28:13
                                         // + literal: Const { ty: fn(usize, usize) -> usize {align_to}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_2);                 // scope 0 at ui/consts/const-size_of-align_of.rs:28:70: 28:71
        StorageDead(_1);                 // scope 0 at ui/consts/const-size_of-align_of.rs:28:70: 28:71
        return;                          // scope 0 at ui/consts/const-size_of-align_of.rs:29:2: 29:2
    }
}

U::_align::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-size_of-align_of.rs:34:27: 34:28

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/const-size_of-align_of.rs:34:27: 34:28
        return;                          // scope 0 at ui/consts/const-size_of-align_of.rs:34:27: 34:28
    }
}

U::_align::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-size_of-align_of.rs:42:27: 42:28

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/consts/const-size_of-align_of.rs:42:27: 42:28
        return;                          // scope 0 at ui/consts/const-size_of-align_of.rs:42:27: 42:28
    }
}

U::_align::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-size_of-align_of.rs:34:36: 34:37

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/const-size_of-align_of.rs:34:36: 34:37
        return;                          // scope 0 at ui/consts/const-size_of-align_of.rs:34:36: 34:37
    }
}

U::_bytes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-size_of-align_of.rs:35:26: 35:51

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-size_of-align_of.rs:35:26: 35:51
        _0 = union_size_of::<u16, [u8; 3]>() -> bb1; // scope 0 at ui/consts/const-size_of-align_of.rs:35:26: 35:51
                                         // mir::Constant
                                         // + span: ui/consts/const-size_of-align_of.rs:35:26: 35:49
                                         // + literal: Const { ty: fn() -> usize {union_size_of::<u16, [u8; 3]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-size_of-align_of.rs:35:26: 35:51
    }
}

U::_bytes::{constant#0}::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-size_of-align_of.rs:42:27: 42:28

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/consts/const-size_of-align_of.rs:42:27: 42:28
        return;                          // scope 0 at ui/consts/const-size_of-align_of.rs:42:27: 42:28
    }
}

fn test(_1: U) -> () {
    debug u => _1;                       // in scope 0 at ui/consts/const-size_of-align_of.rs:44:9: 44:10
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-size_of-align_of.rs:44:15: 44:15
    let mut _2: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _4: usize;                       // in scope 0 at ui/consts/const-size_of-align_of.rs:45:16: 45:43
    let mut _5: &[u8; 4];                // in scope 0 at ui/consts/const-size_of-align_of.rs:45:33: 45:42
    let _6: &[u8; 4];                    // in scope 0 at ui/consts/const-size_of-align_of.rs:45:33: 45:42
    let mut _7: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _8: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _9: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _6 = &(_1.1: [u8; 4]);           // scope 0 at ui/consts/const-size_of-align_of.rs:45:33: 45:42
        _5 = _6;                         // scope 0 at ui/consts/const-size_of-align_of.rs:45:33: 45:42
        _4 = std::mem::size_of_val::<[u8; 4]>(move _5) -> bb1; // scope 0 at ui/consts/const-size_of-align_of.rs:45:16: 45:43
                                         // mir::Constant
                                         // + span: ui/consts/const-size_of-align_of.rs:45:16: 45:32
                                         // + literal: Const { ty: for<'a> fn(&'a [u8; 4]) -> usize {std::mem::size_of_val::<[u8; 4]>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_4;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _22 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(test, [], Some(promoted[0])) }
        _7 = _22;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _7);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_2.0: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_2.1: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = const 4_usize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _14 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<usize, usize>(move _16, move _17, move _19, move _21); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/consts/const-size_of-align_of.rs:46:2: 46:2
    }
}

promoted[0] in test: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:45:45: 45:46

    bb0: {
        _1 = const 4_usize;              // scope 0 at ui/consts/const-size_of-align_of.rs:45:45: 45:46
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-size_of-align_of.rs:48:11: 48:11
    let mut _1: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _5: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _9: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _10: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _11: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _13: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _14: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _15: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _16: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _4;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _5;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _6: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _6;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _10;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _11;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _12: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _12;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _16 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[3])) }
        _2 = _16;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _15 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[2])) }
        _3 = _15;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _4 = (_1.0: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _5 = (_1.1: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[1])) }
        _8 = _14;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _13 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _9 = _13;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _9);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_7.0: &usize);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_7.1: &usize);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        return;                          // scope 0 at ui/consts/const-size_of-align_of.rs:51:2: 51:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:50:38: 50:39

    bb0: {
        _1 = const 2_usize;              // scope 0 at ui/consts/const-size_of-align_of.rs:50:38: 50:39
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:50:16: 50:36

    bb0: {
        _1 = align_of::<U>() -> bb1;     // scope 0 at ui/consts/const-size_of-align_of.rs:50:16: 50:36
                                         // mir::Constant
                                         // + span: ui/consts/const-size_of-align_of.rs:50:16: 50:34
                                         // + literal: Const { ty: fn() -> usize {align_of::<U>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:49:37: 49:38

    bb0: {
        _1 = const 4_usize;              // scope 0 at ui/consts/const-size_of-align_of.rs:49:37: 49:38
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/consts/const-size_of-align_of.rs:49:16: 49:35

    bb0: {
        _1 = std::mem::size_of::<U>() -> bb1; // scope 0 at ui/consts/const-size_of-align_of.rs:49:16: 49:35
                                         // mir::Constant
                                         // + span: ui/consts/const-size_of-align_of.rs:49:16: 49:33
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<U>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}
