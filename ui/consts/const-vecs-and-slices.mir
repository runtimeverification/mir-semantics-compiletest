// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static x: [isize; 4] = {
    let mut _0: [isize; 4];

    bb0: {
        _0 = [const 1_isize, const 2_isize, const 3_isize, const 4_isize];
        return;
    }
}

x::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

static y: &[isize] = {
    let mut _0: &[isize];
    let mut _1: &[isize; 4];
    let _2: &[isize; 4];
    let _3: [isize; 4];
    let mut _4: &[isize; 4];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[isize] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in y: &[isize; 4] = {
    let mut _0: &[isize; 4];
    let mut _1: [isize; 4];

    bb0: {
        _1 = [const 1_isize, const 2_isize, const 3_isize, const 4_isize];
        _0 = &_1;
        return;
    }
}

static z: &[isize; 4] = {
    let mut _0: &[isize; 4];
    let _1: &[isize; 4];
    let _2: [isize; 4];
    let mut _3: &[isize; 4];

    bb0: {
        StorageLive(_1);
        _3 = const _;
        _1 = &(*_3);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in z: &[isize; 4] = {
    let mut _0: &[isize; 4];
    let mut _1: [isize; 4];

    bb0: {
        _1 = [const 1_isize, const 2_isize, const 3_isize, const 4_isize];
        _0 = &_1;
        return;
    }
}

z::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

static zz: &[isize] = {
    let mut _0: &[isize];
    let mut _1: &[isize; 4];
    let _2: &[isize; 4];
    let _3: [isize; 4];
    let mut _4: &[isize; 4];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[isize] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in zz: &[isize; 4] = {
    let mut _0: &[isize; 4];
    let mut _1: [isize; 4];

    bb0: {
        _1 = [const 1_isize, const 2_isize, const 3_isize, const 4_isize];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 1];
    let _6: [core::fmt::rt::Argument<'_>; 1];
    let mut _7: core::fmt::rt::Argument<'_>;
    let _8: &isize;
    let _9: &[isize; 4];
    let _10: usize;
    let mut _11: usize;
    let mut _12: bool;
    let _13: ();
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let _17: &[core::fmt::rt::Argument<'_>; 1];
    let _18: [core::fmt::rt::Argument<'_>; 1];
    let mut _19: core::fmt::rt::Argument<'_>;
    let _20: &isize;
    let _21: &&[isize];
    let _22: usize;
    let mut _23: usize;
    let mut _24: bool;
    let _25: ();
    let mut _26: std::fmt::Arguments<'_>;
    let mut _27: &[&str];
    let mut _28: &[core::fmt::rt::Argument<'_>];
    let _29: &[core::fmt::rt::Argument<'_>; 1];
    let _30: [core::fmt::rt::Argument<'_>; 1];
    let mut _31: core::fmt::rt::Argument<'_>;
    let _32: &isize;
    let _33: &&[isize; 4];
    let _34: usize;
    let mut _35: usize;
    let mut _36: bool;
    let _37: ();
    let mut _38: std::fmt::Arguments<'_>;
    let mut _39: &[&str];
    let mut _40: &[core::fmt::rt::Argument<'_>];
    let _41: &[core::fmt::rt::Argument<'_>; 1];
    let _42: [core::fmt::rt::Argument<'_>; 1];
    let mut _43: core::fmt::rt::Argument<'_>;
    let _44: &isize;
    let _45: &&[isize];
    let _46: usize;
    let mut _47: usize;
    let mut _48: bool;
    let mut _49: (&isize, &isize);
    let mut _50: &isize;
    let _51: &[isize; 4];
    let _52: usize;
    let mut _53: usize;
    let mut _54: bool;
    let _55: &isize;
    let _56: &isize;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: isize;
    let mut _60: isize;
    let _62: !;
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _64: (&isize, &isize);
    let mut _65: &isize;
    let _66: &[isize; 4];
    let _67: usize;
    let mut _68: usize;
    let mut _69: bool;
    let _70: &isize;
    let _71: &isize;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: isize;
    let mut _75: isize;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _79: (&isize, &isize);
    let mut _80: &isize;
    let _81: &[isize; 4];
    let _82: usize;
    let mut _83: usize;
    let mut _84: bool;
    let mut _85: &isize;
    let _86: &&[isize];
    let _87: usize;
    let mut _88: usize;
    let mut _89: bool;
    let _90: &isize;
    let _91: &isize;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: isize;
    let mut _95: isize;
    let _97: !;
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _99: (&isize, &isize);
    let mut _100: &isize;
    let _101: &&[isize; 4];
    let _102: usize;
    let mut _103: usize;
    let mut _104: bool;
    let _105: &isize;
    let _106: &isize;
    let mut _107: bool;
    let mut _108: bool;
    let mut _109: isize;
    let mut _110: isize;
    let _112: !;
    let mut _113: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _114: (&isize, &isize);
    let mut _115: &isize;
    let _116: &&[isize; 4];
    let _117: usize;
    let mut _118: usize;
    let mut _119: bool;
    let _120: &isize;
    let _121: &isize;
    let mut _122: bool;
    let mut _123: bool;
    let mut _124: isize;
    let mut _125: isize;
    let _127: !;
    let mut _128: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _129: (&isize, &isize);
    let mut _130: &isize;
    let _131: &&[isize; 4];
    let _132: usize;
    let mut _133: usize;
    let mut _134: bool;
    let mut _135: &isize;
    let _136: &&[isize];
    let _137: usize;
    let mut _138: usize;
    let mut _139: bool;
    let _140: &isize;
    let _141: &isize;
    let mut _142: bool;
    let mut _143: bool;
    let mut _144: isize;
    let mut _145: isize;
    let _147: !;
    let mut _148: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _149: (&isize, &isize);
    let mut _150: &isize;
    let _151: &&[isize];
    let _152: usize;
    let mut _153: usize;
    let mut _154: bool;
    let _155: &isize;
    let _156: &isize;
    let mut _157: bool;
    let mut _158: bool;
    let mut _159: isize;
    let mut _160: isize;
    let _162: !;
    let mut _163: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _164: (&isize, &isize);
    let mut _165: &isize;
    let _166: &&[isize];
    let _167: usize;
    let mut _168: usize;
    let mut _169: bool;
    let _170: &isize;
    let _171: &isize;
    let mut _172: bool;
    let mut _173: bool;
    let mut _174: isize;
    let mut _175: isize;
    let _177: !;
    let mut _178: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _179: (&isize, &isize);
    let mut _180: &isize;
    let _181: &&[isize];
    let _182: usize;
    let mut _183: usize;
    let mut _184: bool;
    let mut _185: &isize;
    let _186: &&[isize];
    let _187: usize;
    let mut _188: usize;
    let mut _189: bool;
    let _190: &isize;
    let _191: &isize;
    let mut _192: bool;
    let mut _193: bool;
    let mut _194: isize;
    let mut _195: isize;
    let _197: !;
    let mut _198: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _199: &isize;
    let mut _200: &isize;
    let mut _201: &isize;
    let mut _202: &isize;
    let mut _203: &isize;
    let mut _204: &isize;
    let mut _205: &[&str; 2];
    let mut _206: &[&str; 2];
    let mut _207: &[&str; 2];
    let mut _208: &[&str; 2];
    let mut _209: &[isize];
    let mut _210: &[isize];
    let mut _211: &[isize; 4];
    let mut _212: &[isize];
    let mut _213: &[isize];
    let mut _214: &[isize];
    let mut _215: &[isize];
    let mut _216: &[isize; 4];
    let mut _217: &[isize; 4];
    let mut _218: &[isize; 4];
    let mut _219: &[isize];
    let mut _220: &[isize];
    let mut _221: &[isize];
    let mut _222: &[isize];
    let mut _223: &[isize];
    let mut _224: &[isize];
    let mut _225: &[isize];
    let mut _226: &[isize];
    let mut _227: &[isize];
    let mut _228: &[isize];
    scope 1 {
        debug left_val => _55;
        debug right_val => _56;
        let _61: core::panicking::AssertKind;
        scope 2 {
            debug kind => _61;
        }
    }
    scope 3 {
        debug left_val => _70;
        debug right_val => _71;
        let _76: core::panicking::AssertKind;
        scope 4 {
            debug kind => _76;
        }
    }
    scope 5 {
        debug left_val => _90;
        debug right_val => _91;
        let _96: core::panicking::AssertKind;
        scope 6 {
            debug kind => _96;
        }
    }
    scope 7 {
        debug left_val => _105;
        debug right_val => _106;
        let _111: core::panicking::AssertKind;
        scope 8 {
            debug kind => _111;
        }
    }
    scope 9 {
        debug left_val => _120;
        debug right_val => _121;
        let _126: core::panicking::AssertKind;
        scope 10 {
            debug kind => _126;
        }
    }
    scope 11 {
        debug left_val => _140;
        debug right_val => _141;
        let _146: core::panicking::AssertKind;
        scope 12 {
            debug kind => _146;
        }
    }
    scope 13 {
        debug left_val => _155;
        debug right_val => _156;
        let _161: core::panicking::AssertKind;
        scope 14 {
            debug kind => _161;
        }
    }
    scope 15 {
        debug left_val => _170;
        debug right_val => _171;
        let _176: core::panicking::AssertKind;
        scope 16 {
            debug kind => _176;
        }
    }
    scope 17 {
        debug left_val => _190;
        debug right_val => _191;
        let _196: core::panicking::AssertKind;
        scope 18 {
            debug kind => _196;
        }
    }

    bb0: {
        _208 = const _;
        _3 = _208 as &[&str] (Pointer(Unsize));
        _9 = const {alloc1: &[isize; 4]};
        _10 = const 1_usize;
        _11 = const 4_usize;
        _12 = Lt(_10, _11);
        assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> [success: bb1, unwind continue];
    }

    bb1: {
        _8 = &(*_9)[_10];
        _7 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = [move _7];
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _1 = _print(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _207 = const _;
        _15 = _207 as &[&str] (Pointer(Unsize));
        _21 = const {alloc2: &&[isize]};
        _22 = const 1_usize;
        _209 = deref_copy (*_21);
        _23 = Len((*_209));
        _24 = Lt(_22, _23);
        assert(move _24, "index out of bounds: the length is {} but the index is {}", move _23, _22) -> [success: bb5, unwind continue];
    }

    bb5: {
        _210 = deref_copy (*_21);
        _20 = &(*_210)[_22];
        _19 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_20) -> [return: bb6, unwind continue];
    }

    bb6: {
        _18 = [move _19];
        _17 = &_18;
        _16 = _17 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _14 = Arguments::<'_>::new_v1(move _15, move _16) -> [return: bb7, unwind continue];
    }

    bb7: {
        _13 = _print(move _14) -> [return: bb8, unwind continue];
    }

    bb8: {
        _206 = const _;
        _27 = _206 as &[&str] (Pointer(Unsize));
        _33 = const {alloc3: &&[isize; 4]};
        _34 = const 1_usize;
        _35 = const 4_usize;
        _36 = Lt(_34, _35);
        assert(move _36, "index out of bounds: the length is {} but the index is {}", move _35, _34) -> [success: bb9, unwind continue];
    }

    bb9: {
        _211 = deref_copy (*_33);
        _32 = &(*_211)[_34];
        _31 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_32) -> [return: bb10, unwind continue];
    }

    bb10: {
        _30 = [move _31];
        _29 = &_30;
        _28 = _29 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _26 = Arguments::<'_>::new_v1(move _27, move _28) -> [return: bb11, unwind continue];
    }

    bb11: {
        _25 = _print(move _26) -> [return: bb12, unwind continue];
    }

    bb12: {
        _205 = const _;
        _39 = _205 as &[&str] (Pointer(Unsize));
        _45 = const {alloc4: &&[isize]};
        _46 = const 1_usize;
        _212 = deref_copy (*_45);
        _47 = Len((*_212));
        _48 = Lt(_46, _47);
        assert(move _48, "index out of bounds: the length is {} but the index is {}", move _47, _46) -> [success: bb13, unwind continue];
    }

    bb13: {
        _213 = deref_copy (*_45);
        _44 = &(*_213)[_46];
        _43 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_44) -> [return: bb14, unwind continue];
    }

    bb14: {
        _42 = [move _43];
        _41 = &_42;
        _40 = _41 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _38 = Arguments::<'_>::new_v1(move _39, move _40) -> [return: bb15, unwind continue];
    }

    bb15: {
        _37 = _print(move _38) -> [return: bb16, unwind continue];
    }

    bb16: {
        _51 = const {alloc1: &[isize; 4]};
        _52 = const 1_usize;
        _53 = const 4_usize;
        _54 = Lt(_52, _53);
        assert(move _54, "index out of bounds: the length is {} but the index is {}", move _53, _52) -> [success: bb17, unwind continue];
    }

    bb17: {
        _50 = &(*_51)[_52];
        _204 = const _;
        _49 = (move _50, _204);
        _55 = (_49.0: &isize);
        _56 = (_49.1: &isize);
        _59 = (*_55);
        _60 = (*_56);
        _58 = Eq(move _59, move _60);
        _57 = Not(move _58);
        switchInt(move _57) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _61 = core::panicking::AssertKind::Eq;
        _63 = Option::<Arguments<'_>>::None;
        _62 = core::panicking::assert_failed::<isize, isize>(move _61, _55, _56, move _63) -> unwind continue;
    }

    bb19: {
        _66 = const {alloc1: &[isize; 4]};
        _67 = const 3_usize;
        _68 = const 4_usize;
        _69 = Lt(_67, _68);
        assert(move _69, "index out of bounds: the length is {} but the index is {}", move _68, _67) -> [success: bb20, unwind continue];
    }

    bb20: {
        _65 = &(*_66)[_67];
        _203 = const _;
        _64 = (move _65, _203);
        _70 = (_64.0: &isize);
        _71 = (_64.1: &isize);
        _74 = (*_70);
        _75 = (*_71);
        _73 = Eq(move _74, move _75);
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<isize, isize>(move _76, _70, _71, move _78) -> unwind continue;
    }

    bb22: {
        _81 = const {alloc1: &[isize; 4]};
        _82 = const 3_usize;
        _83 = const 4_usize;
        _84 = Lt(_82, _83);
        assert(move _84, "index out of bounds: the length is {} but the index is {}", move _83, _82) -> [success: bb23, unwind continue];
    }

    bb23: {
        _80 = &(*_81)[_82];
        _86 = const {alloc2: &&[isize]};
        _87 = const 3_usize;
        _214 = deref_copy (*_86);
        _88 = Len((*_214));
        _89 = Lt(_87, _88);
        assert(move _89, "index out of bounds: the length is {} but the index is {}", move _88, _87) -> [success: bb24, unwind continue];
    }

    bb24: {
        _215 = deref_copy (*_86);
        _85 = &(*_215)[_87];
        _79 = (move _80, move _85);
        _90 = (_79.0: &isize);
        _91 = (_79.1: &isize);
        _94 = (*_90);
        _95 = (*_91);
        _93 = Eq(move _94, move _95);
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _96 = core::panicking::AssertKind::Eq;
        _98 = Option::<Arguments<'_>>::None;
        _97 = core::panicking::assert_failed::<isize, isize>(move _96, _90, _91, move _98) -> unwind continue;
    }

    bb26: {
        _101 = const {alloc3: &&[isize; 4]};
        _102 = const 1_usize;
        _103 = const 4_usize;
        _104 = Lt(_102, _103);
        assert(move _104, "index out of bounds: the length is {} but the index is {}", move _103, _102) -> [success: bb27, unwind continue];
    }

    bb27: {
        _216 = deref_copy (*_101);
        _100 = &(*_216)[_102];
        _202 = const _;
        _99 = (move _100, _202);
        _105 = (_99.0: &isize);
        _106 = (_99.1: &isize);
        _109 = (*_105);
        _110 = (*_106);
        _108 = Eq(move _109, move _110);
        _107 = Not(move _108);
        switchInt(move _107) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _111 = core::panicking::AssertKind::Eq;
        _113 = Option::<Arguments<'_>>::None;
        _112 = core::panicking::assert_failed::<isize, isize>(move _111, _105, _106, move _113) -> unwind continue;
    }

    bb29: {
        _116 = const {alloc3: &&[isize; 4]};
        _117 = const 3_usize;
        _118 = const 4_usize;
        _119 = Lt(_117, _118);
        assert(move _119, "index out of bounds: the length is {} but the index is {}", move _118, _117) -> [success: bb30, unwind continue];
    }

    bb30: {
        _217 = deref_copy (*_116);
        _115 = &(*_217)[_117];
        _201 = const _;
        _114 = (move _115, _201);
        _120 = (_114.0: &isize);
        _121 = (_114.1: &isize);
        _124 = (*_120);
        _125 = (*_121);
        _123 = Eq(move _124, move _125);
        _122 = Not(move _123);
        switchInt(move _122) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _126 = core::panicking::AssertKind::Eq;
        _128 = Option::<Arguments<'_>>::None;
        _127 = core::panicking::assert_failed::<isize, isize>(move _126, _120, _121, move _128) -> unwind continue;
    }

    bb32: {
        _131 = const {alloc3: &&[isize; 4]};
        _132 = const 3_usize;
        _133 = const 4_usize;
        _134 = Lt(_132, _133);
        assert(move _134, "index out of bounds: the length is {} but the index is {}", move _133, _132) -> [success: bb33, unwind continue];
    }

    bb33: {
        _218 = deref_copy (*_131);
        _130 = &(*_218)[_132];
        _136 = const {alloc2: &&[isize]};
        _137 = const 3_usize;
        _219 = deref_copy (*_136);
        _138 = Len((*_219));
        _139 = Lt(_137, _138);
        assert(move _139, "index out of bounds: the length is {} but the index is {}", move _138, _137) -> [success: bb34, unwind continue];
    }

    bb34: {
        _220 = deref_copy (*_136);
        _135 = &(*_220)[_137];
        _129 = (move _130, move _135);
        _140 = (_129.0: &isize);
        _141 = (_129.1: &isize);
        _144 = (*_140);
        _145 = (*_141);
        _143 = Eq(move _144, move _145);
        _142 = Not(move _143);
        switchInt(move _142) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _146 = core::panicking::AssertKind::Eq;
        _148 = Option::<Arguments<'_>>::None;
        _147 = core::panicking::assert_failed::<isize, isize>(move _146, _140, _141, move _148) -> unwind continue;
    }

    bb36: {
        _151 = const {alloc4: &&[isize]};
        _152 = const 1_usize;
        _221 = deref_copy (*_151);
        _153 = Len((*_221));
        _154 = Lt(_152, _153);
        assert(move _154, "index out of bounds: the length is {} but the index is {}", move _153, _152) -> [success: bb37, unwind continue];
    }

    bb37: {
        _222 = deref_copy (*_151);
        _150 = &(*_222)[_152];
        _200 = const _;
        _149 = (move _150, _200);
        _155 = (_149.0: &isize);
        _156 = (_149.1: &isize);
        _159 = (*_155);
        _160 = (*_156);
        _158 = Eq(move _159, move _160);
        _157 = Not(move _158);
        switchInt(move _157) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _161 = core::panicking::AssertKind::Eq;
        _163 = Option::<Arguments<'_>>::None;
        _162 = core::panicking::assert_failed::<isize, isize>(move _161, _155, _156, move _163) -> unwind continue;
    }

    bb39: {
        _166 = const {alloc4: &&[isize]};
        _167 = const 3_usize;
        _223 = deref_copy (*_166);
        _168 = Len((*_223));
        _169 = Lt(_167, _168);
        assert(move _169, "index out of bounds: the length is {} but the index is {}", move _168, _167) -> [success: bb40, unwind continue];
    }

    bb40: {
        _224 = deref_copy (*_166);
        _165 = &(*_224)[_167];
        _199 = const _;
        _164 = (move _165, _199);
        _170 = (_164.0: &isize);
        _171 = (_164.1: &isize);
        _174 = (*_170);
        _175 = (*_171);
        _173 = Eq(move _174, move _175);
        _172 = Not(move _173);
        switchInt(move _172) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _176 = core::panicking::AssertKind::Eq;
        _178 = Option::<Arguments<'_>>::None;
        _177 = core::panicking::assert_failed::<isize, isize>(move _176, _170, _171, move _178) -> unwind continue;
    }

    bb42: {
        _181 = const {alloc4: &&[isize]};
        _182 = const 3_usize;
        _225 = deref_copy (*_181);
        _183 = Len((*_225));
        _184 = Lt(_182, _183);
        assert(move _184, "index out of bounds: the length is {} but the index is {}", move _183, _182) -> [success: bb43, unwind continue];
    }

    bb43: {
        _226 = deref_copy (*_181);
        _180 = &(*_226)[_182];
        _186 = const {alloc2: &&[isize]};
        _187 = const 3_usize;
        _227 = deref_copy (*_186);
        _188 = Len((*_227));
        _189 = Lt(_187, _188);
        assert(move _189, "index out of bounds: the length is {} but the index is {}", move _188, _187) -> [success: bb44, unwind continue];
    }

    bb44: {
        _228 = deref_copy (*_186);
        _185 = &(*_228)[_187];
        _179 = (move _180, move _185);
        _190 = (_179.0: &isize);
        _191 = (_179.1: &isize);
        _194 = (*_190);
        _195 = (*_191);
        _193 = Eq(move _194, move _195);
        _192 = Not(move _193);
        switchInt(move _192) -> [0: bb46, otherwise: bb45];
    }

    bb45: {
        _196 = core::panicking::AssertKind::Eq;
        _198 = Option::<Arguments<'_>>::None;
        _197 = core::panicking::assert_failed::<isize, isize>(move _196, _190, _191, move _198) -> unwind continue;
    }

    bb46: {
        return;
    }
}

alloc4 (static: zz, size: 16, align: 8) {
    ╾───────alloc30───────╼ 04 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc30 (size: 32, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 │ ................
    0x10 │ 03 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 │ ................
}

alloc3 (static: z, size: 8, align: 8) {
    ╾───────alloc23───────╼                         │ ╾──────╼
}

alloc23 (size: 32, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 │ ................
    0x10 │ 03 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 │ ................
}

alloc2 (static: y, size: 16, align: 8) {
    ╾───────alloc16───────╼ 04 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc16 (size: 32, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 │ ................
    0x10 │ 03 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 │ ................
}

alloc1 (static: x, size: 32, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 │ ................
    0x10 │ 03 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 │ ................
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 4_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 4_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 4_isize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
