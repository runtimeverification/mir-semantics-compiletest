// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
B::B1::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 4_isize;
        return;
    }
}

B::B2::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 2_isize;
        return;
    }
}

Aligned::Zero::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 0_isize;
        return;
    }
}

Aligned::One::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 1_isize;
        return;
    }
}

const X: u8 = {
    let mut _0: u8;
    let _1: Aligned;
    let _2: Aligned;
    let mut _3: isize;
    scope 1 {
        debug aligned => _1;
    }

    bb0: {
        StorageLive(_1);
        _1 = Aligned::Zero;
        StorageLive(_2);
        _2 = move _1;
        _3 = discriminant(_2);
        _0 = move _3 as u8 (IntToInt);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: isize;
    let mut _3: isize;
    let mut _4: (&isize, &isize);
    let _5: &isize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: isize;
    let mut _11: isize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&isize, &isize);
    let _16: &isize;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: isize;
    let mut _22: isize;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _26: (&isize, &isize);
    let mut _27: &isize;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: isize;
    let mut _33: isize;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&isize, &isize);
    let mut _38: &isize;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: isize;
    let mut _44: isize;
    let _46: !;
    let mut _47: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _50: isize;
    let mut _51: u8;
    let mut _52: bool;
    let mut _55: isize;
    let mut _56: u8;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: (&isize, &isize);
    let _61: &isize;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: isize;
    let mut _67: isize;
    let _69: !;
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _71: (&isize, &isize);
    let _72: &isize;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: isize;
    let mut _78: isize;
    let _80: !;
    let mut _81: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _82: (&isize, &isize);
    let mut _83: &isize;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: isize;
    let mut _89: isize;
    let _91: !;
    let mut _92: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _93: (&isize, &isize);
    let mut _94: &isize;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: isize;
    let mut _100: isize;
    let _102: !;
    let mut _103: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _104: (&u8, &u8);
    let mut _107: bool;
    let mut _108: bool;
    let mut _109: u8;
    let mut _110: u8;
    let _112: !;
    let mut _113: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a1 => const 1_isize;
        let _2: isize;
        scope 2 {
            debug a2 => _2;
            let _6: &isize;
            let _7: &isize;
            let _17: &isize;
            let _18: &isize;
            let _28: &isize;
            let _29: &isize;
            let _39: &isize;
            let _40: &isize;
            let _48: isize;
            let _49: A;
            let mut _120: &isize;
            let mut _121: &isize;
            let mut _122: &isize;
            let mut _123: &isize;
            scope 3 {
                debug left_val => _6;
                debug right_val => _7;
                let _12: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _12;
                }
            }
            scope 5 {
                debug left_val => _17;
                debug right_val => _18;
                let _23: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _23;
                }
            }
            scope 7 {
                debug left_val => _28;
                debug right_val => _29;
                let _34: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _34;
                }
            }
            scope 9 {
                debug left_val => _39;
                debug right_val => _40;
                let _45: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _45;
                }
            }
            scope 11 {
                debug a1_2 => _48;
                let _53: isize;
                let _54: B;
                scope 13 {
                    debug a2_2 => _53;
                    let _62: &isize;
                    let _63: &isize;
                    let _73: &isize;
                    let _74: &isize;
                    let _84: &isize;
                    let _85: &isize;
                    let _95: &isize;
                    let _96: &isize;
                    let _105: &u8;
                    let _106: &u8;
                    let mut _114: &u8;
                    let mut _115: &u8;
                    let mut _116: &isize;
                    let mut _117: &isize;
                    let mut _118: &isize;
                    let mut _119: &isize;
                    scope 15 {
                        debug left_val => _62;
                        debug right_val => _63;
                        let _68: core::panicking::AssertKind;
                        scope 16 {
                            debug kind => _68;
                        }
                    }
                    scope 17 {
                        debug left_val => _73;
                        debug right_val => _74;
                        let _79: core::panicking::AssertKind;
                        scope 18 {
                            debug kind => _79;
                        }
                    }
                    scope 19 {
                        debug left_val => _84;
                        debug right_val => _85;
                        let _90: core::panicking::AssertKind;
                        scope 20 {
                            debug kind => _90;
                        }
                    }
                    scope 21 {
                        debug left_val => _95;
                        debug right_val => _96;
                        let _101: core::panicking::AssertKind;
                        scope 22 {
                            debug kind => _101;
                        }
                    }
                    scope 23 {
                        debug left_val => _105;
                        debug right_val => _106;
                        let _111: core::panicking::AssertKind;
                        scope 24 {
                            debug kind => _111;
                        }
                    }
                }
                scope 14 {
                    debug v => _54;
                }
            }
            scope 12 {
                debug v => _49;
            }
        }
    }

    bb0: {
        _1 = const 1_isize;
        _3 = Add(const _, const 0_isize);
        _2 = move _3;
        _5 = const {alloc5: &isize};
        _123 = const _;
        _4 = (_5, _123);
        _6 = (_4.0: &isize);
        _7 = (_4.1: &isize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<isize, isize>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb2: {
        _16 = const {alloc6: &isize};
        _122 = const _;
        _15 = (_16, _122);
        _17 = (_15.0: &isize);
        _18 = (_15.1: &isize);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<isize, isize>(move _23, _17, _18, move _25) -> unwind continue;
    }

    bb4: {
        _27 = &_1;
        _121 = const _;
        _26 = (move _27, _121);
        _28 = (_26.0: &isize);
        _29 = (_26.1: &isize);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<isize, isize>(move _34, _28, _29, move _36) -> unwind continue;
    }

    bb6: {
        _38 = &_2;
        _120 = const _;
        _37 = (move _38, _120);
        _39 = (_37.0: &isize);
        _40 = (_37.1: &isize);
        _43 = (*_39);
        _44 = (*_40);
        _42 = Eq(move _43, move _44);
        _41 = Not(move _42);
        switchInt(move _41) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _45 = core::panicking::AssertKind::Eq;
        _47 = Option::<Arguments<'_>>::None;
        _46 = core::panicking::assert_failed::<isize, isize>(move _45, _39, _40, move _47) -> unwind continue;
    }

    bb8: {
        _49 = A::A1;
        _50 = discriminant(_49);
        _51 = _50 as u8 (IntToInt);
        _52 = Le(_51, const 1_u8);
        assume(move _52);
        _48 = move _50;
        _54 = B::B1;
        _55 = discriminant(_54);
        _56 = _55 as u8 (IntToInt);
        _57 = Ge(_56, const 2_u8);
        _58 = Le(_56, const 4_u8);
        _59 = BitAnd(move _57, move _58);
        assume(move _59);
        _53 = move _55;
        _61 = const {alloc7: &isize};
        _119 = const _;
        _60 = (_61, _119);
        _62 = (_60.0: &isize);
        _63 = (_60.1: &isize);
        _66 = (*_62);
        _67 = (*_63);
        _65 = Eq(move _66, move _67);
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _68 = core::panicking::AssertKind::Eq;
        _70 = Option::<Arguments<'_>>::None;
        _69 = core::panicking::assert_failed::<isize, isize>(move _68, _62, _63, move _70) -> unwind continue;
    }

    bb10: {
        _72 = const {alloc8: &isize};
        _118 = const _;
        _71 = (_72, _118);
        _73 = (_71.0: &isize);
        _74 = (_71.1: &isize);
        _77 = (*_73);
        _78 = (*_74);
        _76 = Eq(move _77, move _78);
        _75 = Not(move _76);
        switchInt(move _75) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _79 = core::panicking::AssertKind::Eq;
        _81 = Option::<Arguments<'_>>::None;
        _80 = core::panicking::assert_failed::<isize, isize>(move _79, _73, _74, move _81) -> unwind continue;
    }

    bb12: {
        _83 = &_48;
        _117 = const _;
        _82 = (move _83, _117);
        _84 = (_82.0: &isize);
        _85 = (_82.1: &isize);
        _88 = (*_84);
        _89 = (*_85);
        _87 = Eq(move _88, move _89);
        _86 = Not(move _87);
        switchInt(move _86) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _90 = core::panicking::AssertKind::Eq;
        _92 = Option::<Arguments<'_>>::None;
        _91 = core::panicking::assert_failed::<isize, isize>(move _90, _84, _85, move _92) -> unwind continue;
    }

    bb14: {
        _94 = &_53;
        _116 = const _;
        _93 = (move _94, _116);
        _95 = (_93.0: &isize);
        _96 = (_93.1: &isize);
        _99 = (*_95);
        _100 = (*_96);
        _98 = Eq(move _99, move _100);
        _97 = Not(move _98);
        switchInt(move _97) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _101 = core::panicking::AssertKind::Eq;
        _103 = Option::<Arguments<'_>>::None;
        _102 = core::panicking::assert_failed::<isize, isize>(move _101, _95, _96, move _103) -> unwind continue;
    }

    bb16: {
        _115 = const _;
        _114 = const _;
        _104 = (_115, _114);
        _105 = (_104.0: &u8);
        _106 = (_104.1: &u8);
        _109 = (*_105);
        _110 = (*_106);
        _108 = Eq(move _109, move _110);
        _107 = Not(move _108);
        switchInt(move _107) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _111 = core::panicking::AssertKind::Eq;
        _113 = Option::<Arguments<'_>>::None;
        _112 = core::panicking::assert_failed::<u8, u8>(move _111, _105, _106, move _113) -> unwind continue;
    }

    bb18: {
        return;
    }
}

alloc8 (static: c2_2, size: 8, align: 8) {
    04 00 00 00 00 00 00 00                         │ ........
}

alloc7 (static: c1_2, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

alloc6 (static: c2, size: 8, align: 8) {
    02 00 00 00 00 00 00 00                         │ ........
}

alloc5 (static: c1, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 4_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 0_isize;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 4_isize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 0_isize;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

static c1: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 1_isize as isize (IntToInt);
        return;
    }
}

static c2: isize = {
    let mut _0: isize;
    let mut _1: isize;
    let mut _2: (isize, bool);

    bb0: {
        StorageLive(_1);
        _2 = CheckedAdd(const _, const 0_isize);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _1 = move (_2.0: isize);
        _0 = move _1 as isize (IntToInt);
        StorageDead(_1);
        return;
    }
}

static c1_2: isize = {
    let mut _0: isize;
    let _1: A;
    let _2: A;
    let mut _3: isize;
    let mut _4: u8;
    let mut _5: bool;
    scope 1 {
        debug v => _1;
    }

    bb0: {
        StorageLive(_1);
        _1 = A::A1;
        StorageLive(_2);
        _2 = move _1;
        _3 = discriminant(_2);
        _4 = _3 as u8 (IntToInt);
        _5 = Le(_4, const 1_u8);
        assume(move _5);
        _0 = move _3 as isize (IntToInt);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

static c2_2: isize = {
    let mut _0: isize;
    let _1: B;
    let _2: B;
    let mut _3: isize;
    let mut _4: u8;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    scope 1 {
        debug v => _1;
    }

    bb0: {
        StorageLive(_1);
        _1 = B::B1;
        StorageLive(_2);
        _2 = move _1;
        _3 = discriminant(_2);
        _4 = _3 as u8 (IntToInt);
        _5 = Ge(_4, const 2_u8);
        _6 = Le(_4, const 4_u8);
        _7 = BitAnd(move _5, move _6);
        assume(move _7);
        _0 = move _3 as isize (IntToInt);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
