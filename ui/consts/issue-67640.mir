// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f1(_1: &mut X, _2: &mut isize, _3: isize) -> isize {
    debug a => _1;
    debug b => _2;
    debug c => _3;
    let mut _0: isize;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: isize;
    scope 1 {
        debug r => _0;
    }

    bb0: {
        _5 = ((*_1).0: isize);
        _6 = (*_2);
        _4 = Add(move _5, move _6);
        _0 = Add(move _4, _3);
        ((*_1).0: isize) = const 0_isize;
        (*_2) = const 10_isize;
        return;
    }
}

fn f2(_1: isize, _2: F) -> isize {
    debug a => _1;
    debug f => _2;
    let mut _0: isize;
    let _3: ();
    let mut _4: (isize,);

    bb0: {
        _4 = (const 1_isize,);
        _3 = <F as FnOnce<(isize,)>>::call_once(move _2, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = _1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: X;
    let mut _4: (&isize, &isize);
    let mut _5: &isize;
    let _6: isize;
    let mut _7: &mut X;
    let mut _8: &mut isize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: isize;
    let mut _14: isize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&isize, &isize);
    let mut _19: &isize;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: isize;
    let mut _25: isize;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&isize, &isize);
    let mut _30: &isize;
    let _31: isize;
    let mut _32: isize;
    let mut _33: [closure@ui/consts/issue-67640.rs:23:24: 23:27];
    let mut _34: &mut X;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: isize;
    let mut _40: isize;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        let mut _2: isize;
        scope 2 {
            debug b => _2;
            let _3: isize;
            scope 3 {
                debug c => const 3_isize;
                let _9: &isize;
                let _10: &isize;
                let _20: &isize;
                let _21: &isize;
                let _35: &isize;
                let _36: &isize;
                let mut _44: &isize;
                let mut _45: &isize;
                let mut _46: &isize;
                scope 4 {
                    debug left_val => _9;
                    debug right_val => _10;
                    let _15: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _15;
                    }
                }
                scope 6 {
                    debug left_val => _20;
                    debug right_val => _21;
                    let _26: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _26;
                    }
                }
                scope 8 {
                    debug left_val => _35;
                    debug right_val => _36;
                    let _41: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _41;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = X { x: const 1_isize };
        _2 = const 2_isize;
        _3 = const 3_isize;
        _7 = &mut _1;
        _8 = &mut _2;
        _6 = f1(_7, _8, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _46 = const _;
        _4 = (move _5, _46);
        _9 = (_4.0: &isize);
        _10 = (_4.1: &isize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<isize, isize>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb3: {
        _19 = &(_1.0: isize);
        _45 = const _;
        _18 = (move _19, _45);
        _20 = (_18.0: &isize);
        _21 = (_18.1: &isize);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<isize, isize>(move _26, _20, _21, move _28) -> unwind continue;
    }

    bb5: {
        _32 = (_1.0: isize);
        _34 = &mut _1;
        _33 = [closure@ui/consts/issue-67640.rs:23:24: 23:27] { a: move _34 };
        _31 = f2::<[closure@ui/consts/issue-67640.rs:23:24: 23:27]>(move _32, move _33) -> [return: bb6, unwind continue];
    }

    bb6: {
        _30 = &_31;
        _44 = const _;
        _29 = (move _30, _44);
        _35 = (_29.0: &isize);
        _36 = (_29.1: &isize);
        _39 = (*_35);
        _40 = (*_36);
        _38 = Eq(move _39, move _40);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<isize, isize>(move _41, _35, _36, move _43) -> unwind continue;
    }

    bb8: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 0_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 0_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 6_isize;
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/consts/issue-67640.rs:23:24: 23:27], _2: isize) -> () {
    debug a => (*(_1.0: &mut X));
    let mut _0: ();
    let mut _3: &mut X;

    bb0: {
        _3 = deref_copy (_1.0: &mut X);
        ((*_3).0: isize) = const 50_isize;
        return;
    }
}
