// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn nop(_1: T) -> T {
    debug x => _1;                       // in scope 0 at ui/consts/const-float-classify.rs:9:17: 9:18
    let mut _0: T;                       // return place in scope 0 at ui/consts/const-float-classify.rs:9:26: 9:27

    bb0: {
        _0 = move _1;                    // scope 0 at ui/consts/const-float-classify.rs:9:30: 9:31
        return;                          // scope 0 at ui/consts/const-float-classify.rs:9:33: 9:33
    }
}

// MIR FOR CTFE
fn nop(_1: T) -> T {
    debug x => _1;                       // in scope 0 at ui/consts/const-float-classify.rs:9:17: 9:18
    let mut _0: T;                       // return place in scope 0 at ui/consts/const-float-classify.rs:9:26: 9:27

    bb0: {
        _0 = move _1;                    // scope 0 at ui/consts/const-float-classify.rs:9:30: 9:31
        return;                          // scope 0 at ui/consts/const-float-classify.rs:9:33: 9:33
    }
}

fn <impl at ui/consts/const-float-classify.rs:47:10: 47:15>::fmt(_1: &NonDet, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/consts/const-float-classify.rs:47:10: 47:15
    debug f => _2;                       // in scope 0 at ui/consts/const-float-classify.rs:47:10: 47:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/consts/const-float-classify.rs:47:10: 47:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/consts/const-float-classify.rs:47:10: 47:15
    let mut _4: &str;                    // in scope 0 at ui/consts/const-float-classify.rs:47:10: 47:15
    let _5: &str;                        // in scope 0 at ui/consts/const-float-classify.rs:47:10: 47:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/consts/const-float-classify.rs:47:10: 47:15
        _5 = const "NonDet";             // scope 0 at ui/consts/const-float-classify.rs:47:10: 47:15
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:47:10: 47:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/consts/const-float-classify.rs:47:10: 47:15
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:47:10: 47:15
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:47:10: 47:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-float-classify.rs:47:15: 47:15
    }
}

fn <impl at ui/consts/const-float-classify.rs:50:1: 50:38>::eq(_1: &bool, _2: &NonDet) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/const-float-classify.rs:51:11: 51:16
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-float-classify.rs:51:33: 51:37

    bb0: {
        _0 = const true;                 // scope 0 at ui/consts/const-float-classify.rs:52:9: 52:13
        return;                          // scope 0 at ui/consts/const-float-classify.rs:53:6: 53:6
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/const-float-classify.rs:50:1: 50:38>::eq(_1: &bool, _2: &NonDet) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/const-float-classify.rs:51:11: 51:16
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-float-classify.rs:51:33: 51:37

    bb0: {
        _0 = const true;                 // scope 0 at ui/consts/const-float-classify.rs:52:9: 52:13
        return;                          // scope 0 at ui/consts/const-float-classify.rs:53:6: 53:6
    }
}

fn <impl at ui/consts/const-float-classify.rs:50:1: 50:38>::ne(_1: &bool, _2: &NonDet) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/const-float-classify.rs:54:11: 54:16
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-float-classify.rs:54:33: 54:37

    bb0: {
        _0 = const false;                // scope 0 at ui/consts/const-float-classify.rs:55:9: 55:14
        return;                          // scope 0 at ui/consts/const-float-classify.rs:56:6: 56:6
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/const-float-classify.rs:50:1: 50:38>::ne(_1: &bool, _2: &NonDet) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/const-float-classify.rs:54:11: 54:16
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-float-classify.rs:54:33: 54:37

    bb0: {
        _0 = const false;                // scope 0 at ui/consts/const-float-classify.rs:55:9: 55:14
        return;                          // scope 0 at ui/consts/const-float-classify.rs:56:6: 56:6
    }
}

fn f32() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:22:18: 22:18
    let mut _1: (&bool, &bool);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: bool;                        // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _4: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _5: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
    let mut _6: &bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _7: bool;                        // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _8: &bool;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _9: &bool;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _23: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _24: bool;                       // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _25: bool;                   // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _26: f32;                    // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
    let mut _27: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _28: bool;                       // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _29: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _30: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _33: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _34: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _36: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _37: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _38: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _39: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _40: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _41: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _43: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _44: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _45: bool;                       // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _46: bool;                   // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _47: f32;                    // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
    let mut _48: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _49: bool;                       // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _50: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _51: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _52: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _53: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _54: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _55: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _57: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _58: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _59: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _60: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _61: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _62: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _64: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _65: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _66: bool;                       // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _67: bool;                   // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _68: f32;                    // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
    let mut _69: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _70: bool;                       // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _71: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _72: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _73: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _74: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _75: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _76: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _78: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _79: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _80: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _81: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _82: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _83: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _85: (&bool, &NonDet);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _86: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _87: bool;                       // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _88: bool;                   // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _89: f32;                    // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
    let mut _90: &NonDet;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _91: NonDet;                     // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let mut _92: NonDet;                 // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let _93: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _94: &NonDet;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _95: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _96: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _97: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _98: &NonDet;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _100: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _101: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _102: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _103: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _104: &NonDet;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _105: &NonDet;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _106: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _107: (&bool, &NonDet);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _108: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _109: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _110: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _111: f32;                   // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
    let mut _112: &NonDet;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _113: NonDet;                    // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let mut _114: NonDet;                // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let _115: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _116: &NonDet;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _117: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _118: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _119: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _120: &NonDet;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _122: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _123: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _124: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _125: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _126: &NonDet;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _127: &NonDet;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _128: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _129: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _130: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _131: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _132: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _133: f32;                   // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
    let mut _134: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _135: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _136: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _137: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _138: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _139: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _140: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _141: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _143: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _144: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _145: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _146: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _147: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _148: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _149: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _150: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _151: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _152: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _153: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _154: f32;                   // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
    let mut _155: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _156: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _157: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _158: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _159: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _160: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _161: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _162: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _164: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _165: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _166: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _167: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _168: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _169: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _170: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _171: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _172: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _173: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _174: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _175: f32;                   // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
    let mut _176: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _177: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _178: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _179: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _180: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _181: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _182: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _183: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _185: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _186: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _187: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _188: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _189: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _190: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _191: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _192: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _193: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _194: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _195: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _196: f32;                   // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
    let mut _197: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _198: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _199: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _200: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _201: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _202: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _203: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _204: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _206: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _207: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _208: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _209: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _210: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _211: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _212: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _213: (&bool, &NonDet);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _214: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _215: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _216: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _217: f32;                   // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
    let mut _218: &NonDet;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _219: NonDet;                    // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let mut _220: NonDet;                // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let _221: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _222: &NonDet;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _223: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _224: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _225: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _226: &NonDet;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _228: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _229: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _230: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _231: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _232: &NonDet;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _233: &NonDet;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _234: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _235: (&bool, &NonDet);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _236: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _237: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _238: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _239: f32;                   // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
    let mut _240: &NonDet;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _241: NonDet;                    // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let mut _242: NonDet;                // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let _243: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _244: &NonDet;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _245: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _246: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _247: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _248: &NonDet;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _250: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _251: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _252: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _253: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _254: &NonDet;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _255: &NonDet;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _256: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _257: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _258: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _259: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _260: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _261: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _262: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _263: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _264: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _265: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _266: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _267: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _268: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _270: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _271: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _272: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _273: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _274: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _275: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _276: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _277: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _278: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _279: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _280: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _281: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _282: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _283: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _284: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _285: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _286: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _287: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _288: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _290: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _291: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _292: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _293: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _294: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _295: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _296: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _297: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _298: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _299: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _300: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _301: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _302: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _303: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _304: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _305: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _306: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _307: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _308: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _310: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _311: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _312: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _313: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _314: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _315: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _316: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _317: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _318: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _319: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _320: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _321: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _322: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _323: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _324: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _325: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _326: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _327: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _328: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _330: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _331: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _332: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _333: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _334: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _335: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _336: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _337: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _338: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _339: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _340: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _341: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _342: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _343: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _344: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _345: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _346: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _347: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _348: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _350: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _351: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _352: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _353: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _354: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _355: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _356: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _357: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _358: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _359: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _360: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _361: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _362: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _363: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _364: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _365: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _366: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _367: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _368: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _370: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _371: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _372: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _373: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _374: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _375: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _376: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _377: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _378: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _379: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _380: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _381: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _382: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _383: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _384: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _385: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _386: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _387: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _388: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _390: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _391: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _392: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _393: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _394: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _395: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _396: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _397: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _398: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _399: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _400: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _401: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _402: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _403: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _404: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _405: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _406: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _407: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _408: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _410: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _411: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _412: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _413: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _414: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _415: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _416: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _417: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _418: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _419: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _420: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _421: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _422: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _423: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _424: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _425: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _426: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _427: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _428: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _430: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _431: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _432: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _433: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _434: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _435: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _436: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _437: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _438: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _439: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _440: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _441: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _442: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _443: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _444: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _445: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _446: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _447: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _448: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _450: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _451: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _452: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _453: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _454: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _455: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _456: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _457: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _458: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _459: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _460: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _461: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _462: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _463: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _464: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _465: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _466: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _467: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _468: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _470: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _471: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _472: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _473: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _474: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _475: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _476: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _477: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _478: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _479: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _480: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _481: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _482: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _483: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _484: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _485: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _486: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _487: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _488: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _490: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _491: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _492: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _493: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _494: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _495: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _496: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _497: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _498: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _499: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _500: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _501: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _502: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _503: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _504: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _505: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _506: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _507: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _508: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _510: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _511: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _512: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _513: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _514: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _515: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _516: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _517: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _518: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _519: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _520: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _521: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _522: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _523: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _524: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _525: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _526: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _527: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _528: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _530: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _531: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _532: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _533: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _534: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _535: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _536: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _537: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _538: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _539: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _540: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _541: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _542: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _543: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _544: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _545: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _546: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _547: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _548: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _550: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _551: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _552: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _553: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _554: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _555: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _556: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _557: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _558: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _559: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _560: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _561: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _562: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _563: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _564: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _565: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _566: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _567: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _568: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _570: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _571: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _572: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _573: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _574: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _575: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _576: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _577: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _578: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _579: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _580: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _581: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _582: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _583: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _584: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _585: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _586: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _587: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _588: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _590: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _591: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _592: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _593: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _594: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _595: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _596: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _597: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _598: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _599: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _600: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _601: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _602: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _603: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _604: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _605: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _606: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _607: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _608: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _610: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _611: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _612: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _613: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _614: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _615: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _616: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _617: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _618: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _619: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _620: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _621: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _622: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _623: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _624: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _625: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _626: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _627: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _628: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _630: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _631: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _632: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _633: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _634: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _635: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _636: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _637: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _638: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _639: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _640: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _641: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _642: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _643: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _644: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _645: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _646: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _647: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _648: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _650: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _651: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _652: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _653: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _654: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _655: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _656: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _657: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _658: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _659: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _660: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _661: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _662: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _663: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _664: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _665: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _666: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _667: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _668: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _670: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _671: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _672: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _673: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _674: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _675: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _676: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _677: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _678: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _679: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _680: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _681: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _682: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _683: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _684: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _685: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _686: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _687: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _688: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _690: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _691: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _692: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _693: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _694: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _695: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _696: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _697: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _698: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _699: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _700: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _701: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _702: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _703: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _704: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _705: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _706: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _707: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _708: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _710: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _711: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _712: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _713: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _714: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _715: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _716: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _717: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _718: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _719: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _720: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _721: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _722: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _723: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _724: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _725: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _726: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _727: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _728: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _730: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _731: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _732: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _733: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _734: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _735: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _736: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _737: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _738: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _739: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _740: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _741: f32;                   // in scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
    let mut _742: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _743: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _744: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _745: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _746: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _747: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _748: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _749: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _751: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _752: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _753: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _754: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _755: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _756: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _757: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _758: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _759: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _760: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _761: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _762: f32;                   // in scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
    let mut _763: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _764: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _765: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _766: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _767: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _768: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _769: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _770: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _772: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _773: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _774: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _775: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _776: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _777: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _778: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _779: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _780: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _781: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _782: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _783: f32;                   // in scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
    let mut _784: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _785: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _786: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _787: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _788: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _789: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _790: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _791: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _793: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _794: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _795: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _796: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _797: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _798: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _799: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _800: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _801: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _802: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _803: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _804: f32;                   // in scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
    let mut _805: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _806: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _807: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _808: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _809: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _810: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _811: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _812: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _814: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _815: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _816: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _817: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _818: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _819: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _820: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _821: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _822: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _823: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _824: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _825: f32;                   // in scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
    let mut _826: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _827: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _828: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _829: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _830: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _831: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _832: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _833: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _835: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _836: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _837: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _838: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _839: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _840: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _841: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _842: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _843: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _844: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _845: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _846: f32;                   // in scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
    let mut _847: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _848: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _849: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _850: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _851: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _852: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _853: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _854: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _856: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _857: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _858: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _859: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _860: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _861: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _862: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _863: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _864: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _865: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _866: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _867: f32;                   // in scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
    let mut _868: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _869: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _870: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _871: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _872: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _873: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _874: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _875: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _877: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _878: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _879: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _880: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _881: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _882: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _883: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _884: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _885: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _886: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _887: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _888: f32;                   // in scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
    let mut _889: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _890: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _891: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _892: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _893: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _894: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _895: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _896: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _898: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _899: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _900: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _901: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _902: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _903: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _904: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _905: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _906: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _907: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _908: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _909: f32;                   // in scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
    let mut _910: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _911: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _912: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _913: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _914: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _915: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _916: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _917: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _919: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _920: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _921: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _922: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _923: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _924: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _925: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _926: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _927: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _928: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _929: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _930: f32;                   // in scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
    let mut _931: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _932: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _933: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _934: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _935: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _936: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _937: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _938: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _940: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _941: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _942: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _943: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _944: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _945: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _946: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _947: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _948: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _949: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _950: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _951: f32;                   // in scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
    let mut _952: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _953: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _954: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _955: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _956: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _957: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _958: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _959: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _961: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _962: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _963: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _964: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _965: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _966: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _967: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _968: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _969: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _970: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _971: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _972: f32;                   // in scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
    let mut _973: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _974: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _975: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _976: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _977: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _978: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _979: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _980: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _982: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _983: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _984: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _985: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _986: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _987: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _988: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _29;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _30;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _35: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _35;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _50;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _51;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _56: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _56;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug left_val => _71;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _72;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _77: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 8 {
            debug kind => _77;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 9 {
        debug left_val => _93;           // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _94;          // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _99: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 10 {
            debug kind => _99;           // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 11 {
        debug left_val => _115;          // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _116;         // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _121: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 12 {
            debug kind => _121;          // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 13 {
        debug left_val => _136;          // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _137;         // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _142: core::panicking::AssertKind; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 14 {
            debug kind => _142;          // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 15 {
        debug left_val => _157;          // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _158;         // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _163: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 16 {
            debug kind => _163;          // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 17 {
        debug left_val => _178;          // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _179;         // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _184: core::panicking::AssertKind; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 18 {
            debug kind => _184;          // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 19 {
        debug left_val => _199;          // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _200;         // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _205: core::panicking::AssertKind; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 20 {
            debug kind => _205;          // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 21 {
        debug left_val => _221;          // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _222;         // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _227: core::panicking::AssertKind; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 22 {
            debug kind => _227;          // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 23 {
        debug left_val => _243;          // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _244;         // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _249: core::panicking::AssertKind; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 24 {
            debug kind => _249;          // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 25 {
        debug left_val => _263;          // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _264;         // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _269: core::panicking::AssertKind; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 26 {
            debug kind => _269;          // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 27 {
        debug left_val => _283;          // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _284;         // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _289: core::panicking::AssertKind; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 28 {
            debug kind => _289;          // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 29 {
        debug left_val => _303;          // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _304;         // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _309: core::panicking::AssertKind; // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 30 {
            debug kind => _309;          // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 31 {
        debug left_val => _323;          // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _324;         // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _329: core::panicking::AssertKind; // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 32 {
            debug kind => _329;          // in scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 33 {
        debug left_val => _343;          // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _344;         // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _349: core::panicking::AssertKind; // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 34 {
            debug kind => _349;          // in scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 35 {
        debug left_val => _363;          // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _364;         // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _369: core::panicking::AssertKind; // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 36 {
            debug kind => _369;          // in scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 37 {
        debug left_val => _383;          // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _384;         // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _389: core::panicking::AssertKind; // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 38 {
            debug kind => _389;          // in scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 39 {
        debug left_val => _403;          // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _404;         // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _409: core::panicking::AssertKind; // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 40 {
            debug kind => _409;          // in scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 41 {
        debug left_val => _423;          // in scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _424;         // in scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _429: core::panicking::AssertKind; // in scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 42 {
            debug kind => _429;          // in scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 43 {
        debug left_val => _443;          // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _444;         // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _449: core::panicking::AssertKind; // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 44 {
            debug kind => _449;          // in scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 45 {
        debug left_val => _463;          // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _464;         // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _469: core::panicking::AssertKind; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 46 {
            debug kind => _469;          // in scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 47 {
        debug left_val => _483;          // in scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _484;         // in scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _489: core::panicking::AssertKind; // in scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 48 {
            debug kind => _489;          // in scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 49 {
        debug left_val => _503;          // in scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _504;         // in scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _509: core::panicking::AssertKind; // in scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 50 {
            debug kind => _509;          // in scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 51 {
        debug left_val => _523;          // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _524;         // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _529: core::panicking::AssertKind; // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 52 {
            debug kind => _529;          // in scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 53 {
        debug left_val => _543;          // in scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _544;         // in scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _549: core::panicking::AssertKind; // in scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 54 {
            debug kind => _549;          // in scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 55 {
        debug left_val => _563;          // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _564;         // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _569: core::panicking::AssertKind; // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 56 {
            debug kind => _569;          // in scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 57 {
        debug left_val => _583;          // in scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _584;         // in scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _589: core::panicking::AssertKind; // in scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 58 {
            debug kind => _589;          // in scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 59 {
        debug left_val => _603;          // in scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _604;         // in scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _609: core::panicking::AssertKind; // in scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 60 {
            debug kind => _609;          // in scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 61 {
        debug left_val => _623;          // in scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _624;         // in scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _629: core::panicking::AssertKind; // in scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 62 {
            debug kind => _629;          // in scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 63 {
        debug left_val => _643;          // in scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _644;         // in scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _649: core::panicking::AssertKind; // in scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 64 {
            debug kind => _649;          // in scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 65 {
        debug left_val => _663;          // in scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _664;         // in scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _669: core::panicking::AssertKind; // in scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 66 {
            debug kind => _669;          // in scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 67 {
        debug left_val => _683;          // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _684;         // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _689: core::panicking::AssertKind; // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 68 {
            debug kind => _689;          // in scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 69 {
        debug left_val => _703;          // in scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _704;         // in scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _709: core::panicking::AssertKind; // in scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 70 {
            debug kind => _709;          // in scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 71 {
        debug left_val => _723;          // in scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _724;         // in scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _729: core::panicking::AssertKind; // in scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 72 {
            debug kind => _729;          // in scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 73 {
        debug left_val => _744;          // in scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _745;         // in scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _750: core::panicking::AssertKind; // in scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 74 {
            debug kind => _750;          // in scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 75 {
        debug left_val => _765;          // in scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _766;         // in scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _771: core::panicking::AssertKind; // in scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 76 {
            debug kind => _771;          // in scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 77 {
        debug left_val => _786;          // in scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _787;         // in scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _792: core::panicking::AssertKind; // in scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 78 {
            debug kind => _792;          // in scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 79 {
        debug left_val => _807;          // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _808;         // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _813: core::panicking::AssertKind; // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 80 {
            debug kind => _813;          // in scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 81 {
        debug left_val => _828;          // in scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _829;         // in scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _834: core::panicking::AssertKind; // in scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 82 {
            debug kind => _834;          // in scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 83 {
        debug left_val => _849;          // in scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _850;         // in scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _855: core::panicking::AssertKind; // in scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 84 {
            debug kind => _855;          // in scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 85 {
        debug left_val => _870;          // in scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _871;         // in scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _876: core::panicking::AssertKind; // in scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 86 {
            debug kind => _876;          // in scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 87 {
        debug left_val => _891;          // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _892;         // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _897: core::panicking::AssertKind; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 88 {
            debug kind => _897;          // in scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 89 {
        debug left_val => _912;          // in scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _913;         // in scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _918: core::panicking::AssertKind; // in scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 90 {
            debug kind => _918;          // in scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 91 {
        debug left_val => _933;          // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _934;         // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _939: core::panicking::AssertKind; // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 92 {
            debug kind => _939;          // in scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 93 {
        debug left_val => _954;          // in scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _955;         // in scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _960: core::panicking::AssertKind; // in scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 94 {
            debug kind => _960;          // in scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 95 {
        debug left_val => _975;          // in scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _976;         // in scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _981: core::panicking::AssertKind; // in scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 96 {
            debug kind => _981;          // in scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _5 = const NaNf32;               // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        _4 = core::f32::<impl f32>::is_nan(move _5) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_nan}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = nop::<bool>(move _4) -> bb2; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _7 = nop::<bool>(const true) -> bb3; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = &_7;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _6);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_1.0: &bool);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_1.1: &bool);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = (*_9);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb5, otherwise: bb4]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _14 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<bool, bool>(move _16, move _17, move _19, move _21); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb5: {
        _26 = const NaNf32;              // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        _25 = core::f32::<impl f32>::is_infinite(move _26) -> bb6; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_infinite}, val: Value(<ZST>) }
    }

    bb6: {
        _24 = nop::<bool>(move _25) -> bb7; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb7: {
        _23 = &_24;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _28 = nop::<bool>(const false) -> bb8; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb8: {
        _27 = &_28;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _22 = (move _23, move _27);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _29 = (_22.0: &bool);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _30 = (_22.1: &bool);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _33 = (*_29);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _34 = (*_30);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _32 = Eq(move _33, move _34);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _31 = Not(move _32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _31) -> [0: bb10, otherwise: bb9]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _35 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = _29;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _39;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _41 = _30;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = _41;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _36 = core::panicking::assert_failed::<bool, bool>(move _37, move _38, move _40, move _42); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb10: {
        _47 = const NaNf32;              // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        _46 = core::f32::<impl f32>::is_finite(move _47) -> bb11; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_finite}, val: Value(<ZST>) }
    }

    bb11: {
        _45 = nop::<bool>(move _46) -> bb12; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb12: {
        _44 = &_45;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _49 = nop::<bool>(const false) -> bb13; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb13: {
        _48 = &_49;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _43 = (move _44, move _48);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _50 = (_43.0: &bool);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _51 = (_43.1: &bool);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _54 = (*_50);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _55 = (*_51);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _53 = Eq(move _54, move _55);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _52 = Not(move _53);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _52) -> [0: bb15, otherwise: bb14]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb14: {
        _56 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _60 = _50;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _59 = _60;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _62 = _51;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = _62;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _63 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _57 = core::panicking::assert_failed::<bool, bool>(move _58, move _59, move _61, move _63); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb15: {
        _68 = const NaNf32;              // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        _67 = core::f32::<impl f32>::is_normal(move _68) -> bb16; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_normal}, val: Value(<ZST>) }
    }

    bb16: {
        _66 = nop::<bool>(move _67) -> bb17; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb17: {
        _65 = &_66;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _70 = nop::<bool>(const false) -> bb18; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb18: {
        _69 = &_70;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _64 = (move _65, move _69);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _71 = (_64.0: &bool);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _72 = (_64.1: &bool);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _75 = (*_71);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _76 = (*_72);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _74 = Eq(move _75, move _76);    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _73 = Not(move _74);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _73) -> [0: bb20, otherwise: bb19]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb19: {
        _77 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _79 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _81 = _71;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _80 = _81;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _83 = _72;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _82 = _83;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _84 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _78 = core::panicking::assert_failed::<bool, bool>(move _79, move _80, move _82, move _84); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb20: {
        _89 = const NaNf32;              // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        _88 = core::f32::<impl f32>::is_sign_positive(move _89) -> bb21; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb21: {
        _87 = nop::<bool>(move _88) -> bb22; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb22: {
        _86 = &_87;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _91 = nop::<NonDet>(move _92) -> bb23; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(NonDet) -> NonDet {nop::<NonDet>}, val: Value(<ZST>) }
    }

    bb23: {
        _90 = &_91;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _85 = (move _86, move _90);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _93 = (_85.0: &bool);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _94 = (_85.1: &NonDet);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _97 = _93;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _98 = _94;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _96 = <bool as PartialEq<NonDet>>::eq(move _97, move _98) -> bb24; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a bool, &'b NonDet) -> bool {<bool as PartialEq<NonDet>>::eq}, val: Value(<ZST>) }
    }

    bb24: {
        _95 = Not(move _96);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _95) -> [0: bb26, otherwise: bb25]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb25: {
        _99 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _101 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _103 = _93;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _102 = _103;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _105 = _94;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _104 = _105;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _106 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _100 = core::panicking::assert_failed::<bool, NonDet>(move _101, move _102, move _104, move _106); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b NonDet, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, NonDet>}, val: Value(<ZST>) }
    }

    bb26: {
        _111 = const NaNf32;             // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        _110 = core::f32::<impl f32>::is_sign_negative(move _111) -> bb27; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb27: {
        _109 = nop::<bool>(move _110) -> bb28; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb28: {
        _108 = &_109;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _113 = nop::<NonDet>(move _114) -> bb29; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(NonDet) -> NonDet {nop::<NonDet>}, val: Value(<ZST>) }
    }

    bb29: {
        _112 = &_113;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _107 = (move _108, move _112);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _115 = (_107.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _116 = (_107.1: &NonDet);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _119 = _115;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _120 = _116;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _118 = <bool as PartialEq<NonDet>>::eq(move _119, move _120) -> bb30; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a bool, &'b NonDet) -> bool {<bool as PartialEq<NonDet>>::eq}, val: Value(<ZST>) }
    }

    bb30: {
        _117 = Not(move _118);           // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _117) -> [0: bb32, otherwise: bb31]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb31: {
        _121 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _123 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _125 = _115;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _124 = _125;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _127 = _116;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _126 = _127;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _128 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _122 = core::panicking::assert_failed::<bool, NonDet>(move _123, move _124, move _126, move _128); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b NonDet, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, NonDet>}, val: Value(<ZST>) }
    }

    bb32: {
        _133 = const NaNf32;             // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        _132 = core::f32::<impl f32>::is_nan(move _133) -> bb33; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_nan}, val: Value(<ZST>) }
    }

    bb33: {
        _131 = nop::<bool>(move _132) -> bb34; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb34: {
        _130 = &_131;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _135 = nop::<bool>(const true) -> bb35; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb35: {
        _134 = &_135;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _129 = (move _130, move _134);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _136 = (_129.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _137 = (_129.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _140 = (*_136);                  // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _141 = (*_137);                  // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _139 = Eq(move _140, move _141); // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _138 = Not(move _139);           // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _138) -> [0: bb37, otherwise: bb36]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb36: {
        _142 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _144 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _146 = _136;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _145 = _146;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _148 = _137;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _147 = _148;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _149 = Option::<Arguments<'_>>::None; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _143 = core::panicking::assert_failed::<bool, bool>(move _144, move _145, move _147, move _149); // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb37: {
        _154 = const NaNf32;             // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        _153 = core::f32::<impl f32>::is_infinite(move _154) -> bb38; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_infinite}, val: Value(<ZST>) }
    }

    bb38: {
        _152 = nop::<bool>(move _153) -> bb39; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb39: {
        _151 = &_152;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _156 = nop::<bool>(const false) -> bb40; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb40: {
        _155 = &_156;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _150 = (move _151, move _155);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _157 = (_150.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _158 = (_150.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _161 = (*_157);                  // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _162 = (*_158);                  // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _160 = Eq(move _161, move _162); // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _159 = Not(move _160);           // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _159) -> [0: bb42, otherwise: bb41]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb41: {
        _163 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _165 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _167 = _157;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _166 = _167;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _169 = _158;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _168 = _169;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _170 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _164 = core::panicking::assert_failed::<bool, bool>(move _165, move _166, move _168, move _170); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb42: {
        _175 = const NaNf32;             // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        _174 = core::f32::<impl f32>::is_finite(move _175) -> bb43; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_finite}, val: Value(<ZST>) }
    }

    bb43: {
        _173 = nop::<bool>(move _174) -> bb44; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb44: {
        _172 = &_173;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _177 = nop::<bool>(const false) -> bb45; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb45: {
        _176 = &_177;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _171 = (move _172, move _176);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _178 = (_171.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _179 = (_171.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _182 = (*_178);                  // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _183 = (*_179);                  // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _181 = Eq(move _182, move _183); // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _180 = Not(move _181);           // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _180) -> [0: bb47, otherwise: bb46]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb46: {
        _184 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _186 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _188 = _178;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _187 = _188;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _190 = _179;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _189 = _190;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _191 = Option::<Arguments<'_>>::None; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _185 = core::panicking::assert_failed::<bool, bool>(move _186, move _187, move _189, move _191); // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb47: {
        _196 = const NaNf32;             // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        _195 = core::f32::<impl f32>::is_normal(move _196) -> bb48; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_normal}, val: Value(<ZST>) }
    }

    bb48: {
        _194 = nop::<bool>(move _195) -> bb49; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb49: {
        _193 = &_194;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _198 = nop::<bool>(const false) -> bb50; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb50: {
        _197 = &_198;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _192 = (move _193, move _197);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _199 = (_192.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _200 = (_192.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _203 = (*_199);                  // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _204 = (*_200);                  // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _202 = Eq(move _203, move _204); // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _201 = Not(move _202);           // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _201) -> [0: bb52, otherwise: bb51]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb51: {
        _205 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _207 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _209 = _199;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _208 = _209;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _211 = _200;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _210 = _211;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _212 = Option::<Arguments<'_>>::None; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _206 = core::panicking::assert_failed::<bool, bool>(move _207, move _208, move _210, move _212); // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb52: {
        _217 = const NaNf32;             // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        _216 = core::f32::<impl f32>::is_sign_positive(move _217) -> bb53; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb53: {
        _215 = nop::<bool>(move _216) -> bb54; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb54: {
        _214 = &_215;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _219 = nop::<NonDet>(move _220) -> bb55; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(NonDet) -> NonDet {nop::<NonDet>}, val: Value(<ZST>) }
    }

    bb55: {
        _218 = &_219;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _213 = (move _214, move _218);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _221 = (_213.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _222 = (_213.1: &NonDet);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _225 = _221;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _226 = _222;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _224 = <bool as PartialEq<NonDet>>::eq(move _225, move _226) -> bb56; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a bool, &'b NonDet) -> bool {<bool as PartialEq<NonDet>>::eq}, val: Value(<ZST>) }
    }

    bb56: {
        _223 = Not(move _224);           // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _223) -> [0: bb58, otherwise: bb57]; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb57: {
        _227 = const core::panicking::AssertKind::Eq; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _229 = const core::panicking::AssertKind::Eq; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _231 = _221;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _230 = _231;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _233 = _222;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _232 = _233;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _234 = Option::<Arguments<'_>>::None; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _228 = core::panicking::assert_failed::<bool, NonDet>(move _229, move _230, move _232, move _234); // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b NonDet, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, NonDet>}, val: Value(<ZST>) }
    }

    bb58: {
        _239 = const NaNf32;             // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        _238 = core::f32::<impl f32>::is_sign_negative(move _239) -> bb59; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb59: {
        _237 = nop::<bool>(move _238) -> bb60; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb60: {
        _236 = &_237;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _241 = nop::<NonDet>(move _242) -> bb61; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(NonDet) -> NonDet {nop::<NonDet>}, val: Value(<ZST>) }
    }

    bb61: {
        _240 = &_241;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _235 = (move _236, move _240);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _243 = (_235.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _244 = (_235.1: &NonDet);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _247 = _243;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _248 = _244;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _246 = <bool as PartialEq<NonDet>>::eq(move _247, move _248) -> bb62; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a bool, &'b NonDet) -> bool {<bool as PartialEq<NonDet>>::eq}, val: Value(<ZST>) }
    }

    bb62: {
        _245 = Not(move _246);           // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _245) -> [0: bb64, otherwise: bb63]; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb63: {
        _249 = const core::panicking::AssertKind::Eq; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _251 = const core::panicking::AssertKind::Eq; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _253 = _243;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _252 = _253;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _255 = _244;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _254 = _255;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _256 = Option::<Arguments<'_>>::None; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _250 = core::panicking::assert_failed::<bool, NonDet>(move _251, move _252, move _254, move _256); // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b NonDet, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, NonDet>}, val: Value(<ZST>) }
    }

    bb64: {
        _260 = core::f32::<impl f32>::is_nan(const 1f32) -> bb65; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_nan}, val: Value(<ZST>) }
    }

    bb65: {
        _259 = nop::<bool>(move _260) -> bb66; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb66: {
        _258 = &_259;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _262 = nop::<bool>(const false) -> bb67; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb67: {
        _261 = &_262;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _257 = (move _258, move _261);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _263 = (_257.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _264 = (_257.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _267 = (*_263);                  // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _268 = (*_264);                  // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _266 = Eq(move _267, move _268); // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _265 = Not(move _266);           // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _265) -> [0: bb69, otherwise: bb68]; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb68: {
        _269 = const core::panicking::AssertKind::Eq; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _271 = const core::panicking::AssertKind::Eq; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _273 = _263;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _272 = _273;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _275 = _264;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _274 = _275;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _276 = Option::<Arguments<'_>>::None; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _270 = core::panicking::assert_failed::<bool, bool>(move _271, move _272, move _274, move _276); // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb69: {
        _280 = core::f32::<impl f32>::is_infinite(const 1f32) -> bb70; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_infinite}, val: Value(<ZST>) }
    }

    bb70: {
        _279 = nop::<bool>(move _280) -> bb71; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb71: {
        _278 = &_279;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _282 = nop::<bool>(const false) -> bb72; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb72: {
        _281 = &_282;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _277 = (move _278, move _281);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _283 = (_277.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _284 = (_277.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _287 = (*_283);                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _288 = (*_284);                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _286 = Eq(move _287, move _288); // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _285 = Not(move _286);           // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _285) -> [0: bb74, otherwise: bb73]; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb73: {
        _289 = const core::panicking::AssertKind::Eq; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _291 = const core::panicking::AssertKind::Eq; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _293 = _283;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _292 = _293;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _295 = _284;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _294 = _295;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _296 = Option::<Arguments<'_>>::None; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _290 = core::panicking::assert_failed::<bool, bool>(move _291, move _292, move _294, move _296); // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb74: {
        _300 = core::f32::<impl f32>::is_finite(const 1f32) -> bb75; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_finite}, val: Value(<ZST>) }
    }

    bb75: {
        _299 = nop::<bool>(move _300) -> bb76; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb76: {
        _298 = &_299;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _302 = nop::<bool>(const true) -> bb77; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb77: {
        _301 = &_302;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _297 = (move _298, move _301);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _303 = (_297.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _304 = (_297.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _307 = (*_303);                  // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _308 = (*_304);                  // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _306 = Eq(move _307, move _308); // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _305 = Not(move _306);           // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _305) -> [0: bb79, otherwise: bb78]; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb78: {
        _309 = const core::panicking::AssertKind::Eq; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _311 = const core::panicking::AssertKind::Eq; // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _313 = _303;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _312 = _313;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _315 = _304;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _314 = _315;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _316 = Option::<Arguments<'_>>::None; // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _310 = core::panicking::assert_failed::<bool, bool>(move _311, move _312, move _314, move _316); // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb79: {
        _320 = core::f32::<impl f32>::is_normal(const 1f32) -> bb80; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_normal}, val: Value(<ZST>) }
    }

    bb80: {
        _319 = nop::<bool>(move _320) -> bb81; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb81: {
        _318 = &_319;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _322 = nop::<bool>(const true) -> bb82; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb82: {
        _321 = &_322;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _317 = (move _318, move _321);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _323 = (_317.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _324 = (_317.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _327 = (*_323);                  // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _328 = (*_324);                  // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _326 = Eq(move _327, move _328); // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _325 = Not(move _326);           // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _325) -> [0: bb84, otherwise: bb83]; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb83: {
        _329 = const core::panicking::AssertKind::Eq; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _331 = const core::panicking::AssertKind::Eq; // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _333 = _323;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _332 = _333;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _335 = _324;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _334 = _335;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _336 = Option::<Arguments<'_>>::None; // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _330 = core::panicking::assert_failed::<bool, bool>(move _331, move _332, move _334, move _336); // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb84: {
        _340 = core::f32::<impl f32>::is_sign_positive(const 1f32) -> bb85; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb85: {
        _339 = nop::<bool>(move _340) -> bb86; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb86: {
        _338 = &_339;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _342 = nop::<bool>(const true) -> bb87; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb87: {
        _341 = &_342;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _337 = (move _338, move _341);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _343 = (_337.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _344 = (_337.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _347 = (*_343);                  // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _348 = (*_344);                  // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _346 = Eq(move _347, move _348); // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _345 = Not(move _346);           // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _345) -> [0: bb89, otherwise: bb88]; // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb88: {
        _349 = const core::panicking::AssertKind::Eq; // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _351 = const core::panicking::AssertKind::Eq; // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _353 = _343;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _352 = _353;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _355 = _344;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _354 = _355;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _356 = Option::<Arguments<'_>>::None; // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _350 = core::panicking::assert_failed::<bool, bool>(move _351, move _352, move _354, move _356); // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb89: {
        _360 = core::f32::<impl f32>::is_sign_negative(const 1f32) -> bb90; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb90: {
        _359 = nop::<bool>(move _360) -> bb91; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb91: {
        _358 = &_359;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _362 = nop::<bool>(const false) -> bb92; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb92: {
        _361 = &_362;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _357 = (move _358, move _361);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _363 = (_357.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _364 = (_357.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _367 = (*_363);                  // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _368 = (*_364);                  // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _366 = Eq(move _367, move _368); // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _365 = Not(move _366);           // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _365) -> [0: bb94, otherwise: bb93]; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb93: {
        _369 = const core::panicking::AssertKind::Eq; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _371 = const core::panicking::AssertKind::Eq; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _373 = _363;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _372 = _373;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _375 = _364;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _374 = _375;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _376 = Option::<Arguments<'_>>::None; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _370 = core::panicking::assert_failed::<bool, bool>(move _371, move _372, move _374, move _376); // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb94: {
        _380 = core::f32::<impl f32>::is_nan(const -1f32) -> bb95; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_nan}, val: Value(<ZST>) }
    }

    bb95: {
        _379 = nop::<bool>(move _380) -> bb96; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb96: {
        _378 = &_379;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _382 = nop::<bool>(const false) -> bb97; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb97: {
        _381 = &_382;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _377 = (move _378, move _381);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _383 = (_377.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _384 = (_377.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _387 = (*_383);                  // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _388 = (*_384);                  // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _386 = Eq(move _387, move _388); // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _385 = Not(move _386);           // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _385) -> [0: bb99, otherwise: bb98]; // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb98: {
        _389 = const core::panicking::AssertKind::Eq; // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _391 = const core::panicking::AssertKind::Eq; // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _393 = _383;                     // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _392 = _393;                     // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _395 = _384;                     // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _394 = _395;                     // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _396 = Option::<Arguments<'_>>::None; // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _390 = core::panicking::assert_failed::<bool, bool>(move _391, move _392, move _394, move _396); // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb99: {
        _400 = core::f32::<impl f32>::is_infinite(const -1f32) -> bb100; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_infinite}, val: Value(<ZST>) }
    }

    bb100: {
        _399 = nop::<bool>(move _400) -> bb101; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb101: {
        _398 = &_399;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _402 = nop::<bool>(const false) -> bb102; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb102: {
        _401 = &_402;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _397 = (move _398, move _401);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _403 = (_397.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _404 = (_397.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _407 = (*_403);                  // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _408 = (*_404);                  // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _406 = Eq(move _407, move _408); // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _405 = Not(move _406);           // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _405) -> [0: bb104, otherwise: bb103]; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb103: {
        _409 = const core::panicking::AssertKind::Eq; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _411 = const core::panicking::AssertKind::Eq; // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _413 = _403;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _412 = _413;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _415 = _404;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _414 = _415;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _416 = Option::<Arguments<'_>>::None; // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _410 = core::panicking::assert_failed::<bool, bool>(move _411, move _412, move _414, move _416); // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb104: {
        _420 = core::f32::<impl f32>::is_finite(const -1f32) -> bb105; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_finite}, val: Value(<ZST>) }
    }

    bb105: {
        _419 = nop::<bool>(move _420) -> bb106; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb106: {
        _418 = &_419;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _422 = nop::<bool>(const true) -> bb107; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb107: {
        _421 = &_422;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _417 = (move _418, move _421);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _423 = (_417.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _424 = (_417.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _427 = (*_423);                  // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _428 = (*_424);                  // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _426 = Eq(move _427, move _428); // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _425 = Not(move _426);           // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _425) -> [0: bb109, otherwise: bb108]; // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb108: {
        _429 = const core::panicking::AssertKind::Eq; // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _431 = const core::panicking::AssertKind::Eq; // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _433 = _423;                     // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _432 = _433;                     // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _435 = _424;                     // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _434 = _435;                     // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _436 = Option::<Arguments<'_>>::None; // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _430 = core::panicking::assert_failed::<bool, bool>(move _431, move _432, move _434, move _436); // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb109: {
        _440 = core::f32::<impl f32>::is_normal(const -1f32) -> bb110; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_normal}, val: Value(<ZST>) }
    }

    bb110: {
        _439 = nop::<bool>(move _440) -> bb111; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb111: {
        _438 = &_439;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _442 = nop::<bool>(const true) -> bb112; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb112: {
        _441 = &_442;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _437 = (move _438, move _441);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _443 = (_437.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _444 = (_437.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _447 = (*_443);                  // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _448 = (*_444);                  // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _446 = Eq(move _447, move _448); // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _445 = Not(move _446);           // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _445) -> [0: bb114, otherwise: bb113]; // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb113: {
        _449 = const core::panicking::AssertKind::Eq; // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _451 = const core::panicking::AssertKind::Eq; // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _453 = _443;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _452 = _453;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _455 = _444;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _454 = _455;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _456 = Option::<Arguments<'_>>::None; // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _450 = core::panicking::assert_failed::<bool, bool>(move _451, move _452, move _454, move _456); // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb114: {
        _460 = core::f32::<impl f32>::is_sign_positive(const -1f32) -> bb115; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb115: {
        _459 = nop::<bool>(move _460) -> bb116; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb116: {
        _458 = &_459;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _462 = nop::<bool>(const false) -> bb117; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb117: {
        _461 = &_462;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _457 = (move _458, move _461);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _463 = (_457.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _464 = (_457.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _467 = (*_463);                  // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _468 = (*_464);                  // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _466 = Eq(move _467, move _468); // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _465 = Not(move _466);           // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _465) -> [0: bb119, otherwise: bb118]; // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb118: {
        _469 = const core::panicking::AssertKind::Eq; // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _471 = const core::panicking::AssertKind::Eq; // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _473 = _463;                     // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _472 = _473;                     // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _475 = _464;                     // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _474 = _475;                     // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _476 = Option::<Arguments<'_>>::None; // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _470 = core::panicking::assert_failed::<bool, bool>(move _471, move _472, move _474, move _476); // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb119: {
        _480 = core::f32::<impl f32>::is_sign_negative(const -1f32) -> bb120; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb120: {
        _479 = nop::<bool>(move _480) -> bb121; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb121: {
        _478 = &_479;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _482 = nop::<bool>(const true) -> bb122; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb122: {
        _481 = &_482;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _477 = (move _478, move _481);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _483 = (_477.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _484 = (_477.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _487 = (*_483);                  // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _488 = (*_484);                  // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _486 = Eq(move _487, move _488); // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _485 = Not(move _486);           // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _485) -> [0: bb124, otherwise: bb123]; // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb123: {
        _489 = const core::panicking::AssertKind::Eq; // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _491 = const core::panicking::AssertKind::Eq; // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _493 = _483;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _492 = _493;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _495 = _484;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _494 = _495;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _496 = Option::<Arguments<'_>>::None; // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _490 = core::panicking::assert_failed::<bool, bool>(move _491, move _492, move _494, move _496); // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb124: {
        _500 = core::f32::<impl f32>::is_nan(const 0f32) -> bb125; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_nan}, val: Value(<ZST>) }
    }

    bb125: {
        _499 = nop::<bool>(move _500) -> bb126; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb126: {
        _498 = &_499;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _502 = nop::<bool>(const false) -> bb127; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb127: {
        _501 = &_502;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _497 = (move _498, move _501);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _503 = (_497.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _504 = (_497.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _507 = (*_503);                  // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _508 = (*_504);                  // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _506 = Eq(move _507, move _508); // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _505 = Not(move _506);           // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _505) -> [0: bb129, otherwise: bb128]; // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb128: {
        _509 = const core::panicking::AssertKind::Eq; // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _511 = const core::panicking::AssertKind::Eq; // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _513 = _503;                     // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _512 = _513;                     // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _515 = _504;                     // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _514 = _515;                     // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _516 = Option::<Arguments<'_>>::None; // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _510 = core::panicking::assert_failed::<bool, bool>(move _511, move _512, move _514, move _516); // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb129: {
        _520 = core::f32::<impl f32>::is_infinite(const 0f32) -> bb130; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_infinite}, val: Value(<ZST>) }
    }

    bb130: {
        _519 = nop::<bool>(move _520) -> bb131; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb131: {
        _518 = &_519;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _522 = nop::<bool>(const false) -> bb132; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb132: {
        _521 = &_522;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _517 = (move _518, move _521);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _523 = (_517.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _524 = (_517.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _527 = (*_523);                  // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _528 = (*_524);                  // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _526 = Eq(move _527, move _528); // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _525 = Not(move _526);           // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _525) -> [0: bb134, otherwise: bb133]; // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb133: {
        _529 = const core::panicking::AssertKind::Eq; // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _531 = const core::panicking::AssertKind::Eq; // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _533 = _523;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _532 = _533;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _535 = _524;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _534 = _535;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _536 = Option::<Arguments<'_>>::None; // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _530 = core::panicking::assert_failed::<bool, bool>(move _531, move _532, move _534, move _536); // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb134: {
        _540 = core::f32::<impl f32>::is_finite(const 0f32) -> bb135; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_finite}, val: Value(<ZST>) }
    }

    bb135: {
        _539 = nop::<bool>(move _540) -> bb136; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb136: {
        _538 = &_539;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _542 = nop::<bool>(const true) -> bb137; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb137: {
        _541 = &_542;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _537 = (move _538, move _541);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _543 = (_537.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _544 = (_537.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _547 = (*_543);                  // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _548 = (*_544);                  // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _546 = Eq(move _547, move _548); // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _545 = Not(move _546);           // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _545) -> [0: bb139, otherwise: bb138]; // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb138: {
        _549 = const core::panicking::AssertKind::Eq; // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _551 = const core::panicking::AssertKind::Eq; // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _553 = _543;                     // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _552 = _553;                     // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _555 = _544;                     // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _554 = _555;                     // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _556 = Option::<Arguments<'_>>::None; // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _550 = core::panicking::assert_failed::<bool, bool>(move _551, move _552, move _554, move _556); // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb139: {
        _560 = core::f32::<impl f32>::is_normal(const 0f32) -> bb140; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_normal}, val: Value(<ZST>) }
    }

    bb140: {
        _559 = nop::<bool>(move _560) -> bb141; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb141: {
        _558 = &_559;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _562 = nop::<bool>(const false) -> bb142; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb142: {
        _561 = &_562;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _557 = (move _558, move _561);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _563 = (_557.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _564 = (_557.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _567 = (*_563);                  // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _568 = (*_564);                  // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _566 = Eq(move _567, move _568); // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _565 = Not(move _566);           // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _565) -> [0: bb144, otherwise: bb143]; // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb143: {
        _569 = const core::panicking::AssertKind::Eq; // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _571 = const core::panicking::AssertKind::Eq; // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _573 = _563;                     // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _572 = _573;                     // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _575 = _564;                     // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _574 = _575;                     // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _576 = Option::<Arguments<'_>>::None; // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _570 = core::panicking::assert_failed::<bool, bool>(move _571, move _572, move _574, move _576); // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb144: {
        _580 = core::f32::<impl f32>::is_sign_positive(const 0f32) -> bb145; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb145: {
        _579 = nop::<bool>(move _580) -> bb146; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb146: {
        _578 = &_579;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _582 = nop::<bool>(const true) -> bb147; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb147: {
        _581 = &_582;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _577 = (move _578, move _581);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _583 = (_577.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _584 = (_577.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _587 = (*_583);                  // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _588 = (*_584);                  // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _586 = Eq(move _587, move _588); // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _585 = Not(move _586);           // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _585) -> [0: bb149, otherwise: bb148]; // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb148: {
        _589 = const core::panicking::AssertKind::Eq; // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _591 = const core::panicking::AssertKind::Eq; // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _593 = _583;                     // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _592 = _593;                     // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _595 = _584;                     // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _594 = _595;                     // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _596 = Option::<Arguments<'_>>::None; // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _590 = core::panicking::assert_failed::<bool, bool>(move _591, move _592, move _594, move _596); // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb149: {
        _600 = core::f32::<impl f32>::is_sign_negative(const 0f32) -> bb150; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb150: {
        _599 = nop::<bool>(move _600) -> bb151; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb151: {
        _598 = &_599;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _602 = nop::<bool>(const false) -> bb152; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb152: {
        _601 = &_602;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _597 = (move _598, move _601);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _603 = (_597.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _604 = (_597.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _607 = (*_603);                  // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _608 = (*_604);                  // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _606 = Eq(move _607, move _608); // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _605 = Not(move _606);           // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _605) -> [0: bb154, otherwise: bb153]; // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb153: {
        _609 = const core::panicking::AssertKind::Eq; // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _611 = const core::panicking::AssertKind::Eq; // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _613 = _603;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _612 = _613;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _615 = _604;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _614 = _615;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _616 = Option::<Arguments<'_>>::None; // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _610 = core::panicking::assert_failed::<bool, bool>(move _611, move _612, move _614, move _616); // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb154: {
        _620 = core::f32::<impl f32>::is_nan(const -0f32) -> bb155; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_nan}, val: Value(<ZST>) }
    }

    bb155: {
        _619 = nop::<bool>(move _620) -> bb156; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb156: {
        _618 = &_619;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _622 = nop::<bool>(const false) -> bb157; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb157: {
        _621 = &_622;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _617 = (move _618, move _621);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _623 = (_617.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _624 = (_617.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _627 = (*_623);                  // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _628 = (*_624);                  // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _626 = Eq(move _627, move _628); // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _625 = Not(move _626);           // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _625) -> [0: bb159, otherwise: bb158]; // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb158: {
        _629 = const core::panicking::AssertKind::Eq; // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _631 = const core::panicking::AssertKind::Eq; // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _633 = _623;                     // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _632 = _633;                     // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _635 = _624;                     // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _634 = _635;                     // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _636 = Option::<Arguments<'_>>::None; // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _630 = core::panicking::assert_failed::<bool, bool>(move _631, move _632, move _634, move _636); // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb159: {
        _640 = core::f32::<impl f32>::is_infinite(const -0f32) -> bb160; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_infinite}, val: Value(<ZST>) }
    }

    bb160: {
        _639 = nop::<bool>(move _640) -> bb161; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb161: {
        _638 = &_639;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _642 = nop::<bool>(const false) -> bb162; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb162: {
        _641 = &_642;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _637 = (move _638, move _641);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _643 = (_637.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _644 = (_637.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _647 = (*_643);                  // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _648 = (*_644);                  // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _646 = Eq(move _647, move _648); // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _645 = Not(move _646);           // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _645) -> [0: bb164, otherwise: bb163]; // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb163: {
        _649 = const core::panicking::AssertKind::Eq; // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _651 = const core::panicking::AssertKind::Eq; // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _653 = _643;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _652 = _653;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _655 = _644;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _654 = _655;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _656 = Option::<Arguments<'_>>::None; // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _650 = core::panicking::assert_failed::<bool, bool>(move _651, move _652, move _654, move _656); // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb164: {
        _660 = core::f32::<impl f32>::is_finite(const -0f32) -> bb165; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_finite}, val: Value(<ZST>) }
    }

    bb165: {
        _659 = nop::<bool>(move _660) -> bb166; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb166: {
        _658 = &_659;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _662 = nop::<bool>(const true) -> bb167; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb167: {
        _661 = &_662;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _657 = (move _658, move _661);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _663 = (_657.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _664 = (_657.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _667 = (*_663);                  // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _668 = (*_664);                  // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _666 = Eq(move _667, move _668); // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _665 = Not(move _666);           // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _665) -> [0: bb169, otherwise: bb168]; // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb168: {
        _669 = const core::panicking::AssertKind::Eq; // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _671 = const core::panicking::AssertKind::Eq; // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _673 = _663;                     // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _672 = _673;                     // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _675 = _664;                     // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _674 = _675;                     // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _676 = Option::<Arguments<'_>>::None; // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _670 = core::panicking::assert_failed::<bool, bool>(move _671, move _672, move _674, move _676); // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb169: {
        _680 = core::f32::<impl f32>::is_normal(const -0f32) -> bb170; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_normal}, val: Value(<ZST>) }
    }

    bb170: {
        _679 = nop::<bool>(move _680) -> bb171; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb171: {
        _678 = &_679;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _682 = nop::<bool>(const false) -> bb172; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb172: {
        _681 = &_682;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _677 = (move _678, move _681);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _683 = (_677.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _684 = (_677.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _687 = (*_683);                  // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _688 = (*_684);                  // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _686 = Eq(move _687, move _688); // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _685 = Not(move _686);           // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _685) -> [0: bb174, otherwise: bb173]; // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb173: {
        _689 = const core::panicking::AssertKind::Eq; // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _691 = const core::panicking::AssertKind::Eq; // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _693 = _683;                     // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _692 = _693;                     // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _695 = _684;                     // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _694 = _695;                     // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _696 = Option::<Arguments<'_>>::None; // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _690 = core::panicking::assert_failed::<bool, bool>(move _691, move _692, move _694, move _696); // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb174: {
        _700 = core::f32::<impl f32>::is_sign_positive(const -0f32) -> bb175; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb175: {
        _699 = nop::<bool>(move _700) -> bb176; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb176: {
        _698 = &_699;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _702 = nop::<bool>(const false) -> bb177; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb177: {
        _701 = &_702;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _697 = (move _698, move _701);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _703 = (_697.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _704 = (_697.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _707 = (*_703);                  // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _708 = (*_704);                  // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _706 = Eq(move _707, move _708); // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _705 = Not(move _706);           // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _705) -> [0: bb179, otherwise: bb178]; // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb178: {
        _709 = const core::panicking::AssertKind::Eq; // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _711 = const core::panicking::AssertKind::Eq; // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _713 = _703;                     // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _712 = _713;                     // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _715 = _704;                     // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _714 = _715;                     // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _716 = Option::<Arguments<'_>>::None; // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _710 = core::panicking::assert_failed::<bool, bool>(move _711, move _712, move _714, move _716); // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb179: {
        _720 = core::f32::<impl f32>::is_sign_negative(const -0f32) -> bb180; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb180: {
        _719 = nop::<bool>(move _720) -> bb181; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb181: {
        _718 = &_719;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _722 = nop::<bool>(const true) -> bb182; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb182: {
        _721 = &_722;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _717 = (move _718, move _721);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _723 = (_717.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _724 = (_717.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _727 = (*_723);                  // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _728 = (*_724);                  // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _726 = Eq(move _727, move _728); // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _725 = Not(move _726);           // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _725) -> [0: bb184, otherwise: bb183]; // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb183: {
        _729 = const core::panicking::AssertKind::Eq; // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _731 = const core::panicking::AssertKind::Eq; // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _733 = _723;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _732 = _733;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _735 = _724;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _734 = _735;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _736 = Option::<Arguments<'_>>::None; // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _730 = core::panicking::assert_failed::<bool, bool>(move _731, move _732, move _734, move _736); // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb184: {
        _741 = const +Inff32;            // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        _740 = core::f32::<impl f32>::is_nan(move _741) -> bb185; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_nan}, val: Value(<ZST>) }
    }

    bb185: {
        _739 = nop::<bool>(move _740) -> bb186; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb186: {
        _738 = &_739;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _743 = nop::<bool>(const false) -> bb187; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb187: {
        _742 = &_743;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _737 = (move _738, move _742);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _744 = (_737.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _745 = (_737.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _748 = (*_744);                  // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _749 = (*_745);                  // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _747 = Eq(move _748, move _749); // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _746 = Not(move _747);           // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _746) -> [0: bb189, otherwise: bb188]; // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb188: {
        _750 = const core::panicking::AssertKind::Eq; // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _752 = const core::panicking::AssertKind::Eq; // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _754 = _744;                     // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _753 = _754;                     // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _756 = _745;                     // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _755 = _756;                     // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _757 = Option::<Arguments<'_>>::None; // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _751 = core::panicking::assert_failed::<bool, bool>(move _752, move _753, move _755, move _757); // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb189: {
        _762 = const +Inff32;            // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        _761 = core::f32::<impl f32>::is_infinite(move _762) -> bb190; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_infinite}, val: Value(<ZST>) }
    }

    bb190: {
        _760 = nop::<bool>(move _761) -> bb191; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb191: {
        _759 = &_760;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _764 = nop::<bool>(const true) -> bb192; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb192: {
        _763 = &_764;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _758 = (move _759, move _763);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _765 = (_758.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _766 = (_758.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _769 = (*_765);                  // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _770 = (*_766);                  // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _768 = Eq(move _769, move _770); // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _767 = Not(move _768);           // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _767) -> [0: bb194, otherwise: bb193]; // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb193: {
        _771 = const core::panicking::AssertKind::Eq; // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _773 = const core::panicking::AssertKind::Eq; // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _775 = _765;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _774 = _775;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _777 = _766;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _776 = _777;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _778 = Option::<Arguments<'_>>::None; // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _772 = core::panicking::assert_failed::<bool, bool>(move _773, move _774, move _776, move _778); // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb194: {
        _783 = const +Inff32;            // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        _782 = core::f32::<impl f32>::is_finite(move _783) -> bb195; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_finite}, val: Value(<ZST>) }
    }

    bb195: {
        _781 = nop::<bool>(move _782) -> bb196; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb196: {
        _780 = &_781;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _785 = nop::<bool>(const false) -> bb197; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb197: {
        _784 = &_785;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _779 = (move _780, move _784);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _786 = (_779.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _787 = (_779.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _790 = (*_786);                  // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _791 = (*_787);                  // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _789 = Eq(move _790, move _791); // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _788 = Not(move _789);           // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _788) -> [0: bb199, otherwise: bb198]; // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb198: {
        _792 = const core::panicking::AssertKind::Eq; // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _794 = const core::panicking::AssertKind::Eq; // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _796 = _786;                     // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _795 = _796;                     // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _798 = _787;                     // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _797 = _798;                     // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _799 = Option::<Arguments<'_>>::None; // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _793 = core::panicking::assert_failed::<bool, bool>(move _794, move _795, move _797, move _799); // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb199: {
        _804 = const +Inff32;            // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        _803 = core::f32::<impl f32>::is_normal(move _804) -> bb200; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_normal}, val: Value(<ZST>) }
    }

    bb200: {
        _802 = nop::<bool>(move _803) -> bb201; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb201: {
        _801 = &_802;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _806 = nop::<bool>(const false) -> bb202; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb202: {
        _805 = &_806;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _800 = (move _801, move _805);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _807 = (_800.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _808 = (_800.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _811 = (*_807);                  // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _812 = (*_808);                  // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _810 = Eq(move _811, move _812); // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _809 = Not(move _810);           // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _809) -> [0: bb204, otherwise: bb203]; // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb203: {
        _813 = const core::panicking::AssertKind::Eq; // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _815 = const core::panicking::AssertKind::Eq; // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _817 = _807;                     // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _816 = _817;                     // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _819 = _808;                     // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _818 = _819;                     // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _820 = Option::<Arguments<'_>>::None; // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _814 = core::panicking::assert_failed::<bool, bool>(move _815, move _816, move _818, move _820); // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb204: {
        _825 = const +Inff32;            // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        _824 = core::f32::<impl f32>::is_sign_positive(move _825) -> bb205; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb205: {
        _823 = nop::<bool>(move _824) -> bb206; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb206: {
        _822 = &_823;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _827 = nop::<bool>(const true) -> bb207; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb207: {
        _826 = &_827;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _821 = (move _822, move _826);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _828 = (_821.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _829 = (_821.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _832 = (*_828);                  // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _833 = (*_829);                  // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _831 = Eq(move _832, move _833); // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _830 = Not(move _831);           // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _830) -> [0: bb209, otherwise: bb208]; // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb208: {
        _834 = const core::panicking::AssertKind::Eq; // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _836 = const core::panicking::AssertKind::Eq; // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _838 = _828;                     // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _837 = _838;                     // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _840 = _829;                     // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _839 = _840;                     // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _841 = Option::<Arguments<'_>>::None; // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _835 = core::panicking::assert_failed::<bool, bool>(move _836, move _837, move _839, move _841); // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb209: {
        _846 = const +Inff32;            // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        _845 = core::f32::<impl f32>::is_sign_negative(move _846) -> bb210; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb210: {
        _844 = nop::<bool>(move _845) -> bb211; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb211: {
        _843 = &_844;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _848 = nop::<bool>(const false) -> bb212; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb212: {
        _847 = &_848;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _842 = (move _843, move _847);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _849 = (_842.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _850 = (_842.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _853 = (*_849);                  // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _854 = (*_850);                  // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _852 = Eq(move _853, move _854); // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _851 = Not(move _852);           // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _851) -> [0: bb214, otherwise: bb213]; // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb213: {
        _855 = const core::panicking::AssertKind::Eq; // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _857 = const core::panicking::AssertKind::Eq; // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _859 = _849;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _858 = _859;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _861 = _850;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _860 = _861;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _862 = Option::<Arguments<'_>>::None; // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _856 = core::panicking::assert_failed::<bool, bool>(move _857, move _858, move _860, move _862); // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb214: {
        _867 = const -Inff32;            // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        _866 = core::f32::<impl f32>::is_nan(move _867) -> bb215; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_nan}, val: Value(<ZST>) }
    }

    bb215: {
        _865 = nop::<bool>(move _866) -> bb216; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb216: {
        _864 = &_865;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _869 = nop::<bool>(const false) -> bb217; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb217: {
        _868 = &_869;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _863 = (move _864, move _868);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _870 = (_863.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _871 = (_863.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _874 = (*_870);                  // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _875 = (*_871);                  // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _873 = Eq(move _874, move _875); // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _872 = Not(move _873);           // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _872) -> [0: bb219, otherwise: bb218]; // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb218: {
        _876 = const core::panicking::AssertKind::Eq; // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _878 = const core::panicking::AssertKind::Eq; // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _880 = _870;                     // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _879 = _880;                     // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _882 = _871;                     // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _881 = _882;                     // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _883 = Option::<Arguments<'_>>::None; // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _877 = core::panicking::assert_failed::<bool, bool>(move _878, move _879, move _881, move _883); // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb219: {
        _888 = const -Inff32;            // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        _887 = core::f32::<impl f32>::is_infinite(move _888) -> bb220; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_infinite}, val: Value(<ZST>) }
    }

    bb220: {
        _886 = nop::<bool>(move _887) -> bb221; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb221: {
        _885 = &_886;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _890 = nop::<bool>(const true) -> bb222; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb222: {
        _889 = &_890;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _884 = (move _885, move _889);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _891 = (_884.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _892 = (_884.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _895 = (*_891);                  // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _896 = (*_892);                  // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _894 = Eq(move _895, move _896); // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _893 = Not(move _894);           // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _893) -> [0: bb224, otherwise: bb223]; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb223: {
        _897 = const core::panicking::AssertKind::Eq; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _899 = const core::panicking::AssertKind::Eq; // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _901 = _891;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _900 = _901;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _903 = _892;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _902 = _903;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _904 = Option::<Arguments<'_>>::None; // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _898 = core::panicking::assert_failed::<bool, bool>(move _899, move _900, move _902, move _904); // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb224: {
        _909 = const -Inff32;            // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        _908 = core::f32::<impl f32>::is_finite(move _909) -> bb225; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_finite}, val: Value(<ZST>) }
    }

    bb225: {
        _907 = nop::<bool>(move _908) -> bb226; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb226: {
        _906 = &_907;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _911 = nop::<bool>(const false) -> bb227; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb227: {
        _910 = &_911;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _905 = (move _906, move _910);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _912 = (_905.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _913 = (_905.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _916 = (*_912);                  // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _917 = (*_913);                  // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _915 = Eq(move _916, move _917); // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _914 = Not(move _915);           // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _914) -> [0: bb229, otherwise: bb228]; // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb228: {
        _918 = const core::panicking::AssertKind::Eq; // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _920 = const core::panicking::AssertKind::Eq; // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _922 = _912;                     // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _921 = _922;                     // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _924 = _913;                     // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _923 = _924;                     // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _925 = Option::<Arguments<'_>>::None; // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _919 = core::panicking::assert_failed::<bool, bool>(move _920, move _921, move _923, move _925); // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb229: {
        _930 = const -Inff32;            // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        _929 = core::f32::<impl f32>::is_normal(move _930) -> bb230; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_normal}, val: Value(<ZST>) }
    }

    bb230: {
        _928 = nop::<bool>(move _929) -> bb231; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb231: {
        _927 = &_928;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _932 = nop::<bool>(const false) -> bb232; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb232: {
        _931 = &_932;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _926 = (move _927, move _931);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _933 = (_926.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _934 = (_926.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _937 = (*_933);                  // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _938 = (*_934);                  // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _936 = Eq(move _937, move _938); // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _935 = Not(move _936);           // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _935) -> [0: bb234, otherwise: bb233]; // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb233: {
        _939 = const core::panicking::AssertKind::Eq; // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _941 = const core::panicking::AssertKind::Eq; // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _943 = _933;                     // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _942 = _943;                     // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _945 = _934;                     // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _944 = _945;                     // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _946 = Option::<Arguments<'_>>::None; // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _940 = core::panicking::assert_failed::<bool, bool>(move _941, move _942, move _944, move _946); // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb234: {
        _951 = const -Inff32;            // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        _950 = core::f32::<impl f32>::is_sign_positive(move _951) -> bb235; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb235: {
        _949 = nop::<bool>(move _950) -> bb236; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb236: {
        _948 = &_949;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _953 = nop::<bool>(const false) -> bb237; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb237: {
        _952 = &_953;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _947 = (move _948, move _952);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _954 = (_947.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _955 = (_947.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _958 = (*_954);                  // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _959 = (*_955);                  // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _957 = Eq(move _958, move _959); // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _956 = Not(move _957);           // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _956) -> [0: bb239, otherwise: bb238]; // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb238: {
        _960 = const core::panicking::AssertKind::Eq; // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _962 = const core::panicking::AssertKind::Eq; // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _964 = _954;                     // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _963 = _964;                     // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _966 = _955;                     // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _965 = _966;                     // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _967 = Option::<Arguments<'_>>::None; // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _961 = core::panicking::assert_failed::<bool, bool>(move _962, move _963, move _965, move _967); // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb239: {
        _972 = const -Inff32;            // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        _971 = core::f32::<impl f32>::is_sign_negative(move _972) -> bb240; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb240: {
        _970 = nop::<bool>(move _971) -> bb241; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb241: {
        _969 = &_970;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _974 = nop::<bool>(const true) -> bb242; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb242: {
        _973 = &_974;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _968 = (move _969, move _973);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _975 = (_968.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _976 = (_968.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _979 = (*_975);                  // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _980 = (*_976);                  // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _978 = Eq(move _979, move _980); // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _977 = Not(move _978);           // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _977) -> [0: bb244, otherwise: bb243]; // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb243: {
        _981 = const core::panicking::AssertKind::Eq; // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _983 = const core::panicking::AssertKind::Eq; // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _985 = _975;                     // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _984 = _985;                     // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _987 = _976;                     // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _986 = _987;                     // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _988 = Option::<Arguments<'_>>::None; // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _982 = core::panicking::assert_failed::<bool, bool>(move _983, move _984, move _986, move _988); // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb244: {
        return;                          // scope 0 at ui/consts/const-float-classify.rs:24:10: 24:10
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        _4 = Div(const -0f32, const 0f32); // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_nan(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_nan}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f32::is_nan(-0.0 / 0.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        _4 = Div(const -0f32, const 0f32); // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_infinite(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_infinite}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f32::is_infinite(-0.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        _4 = Div(const -0f32, const 0f32); // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_finite(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_finite}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f32::is_finite(-0.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        _4 = Div(const -0f32, const 0f32); // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_normal(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_normal}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f32::is_normal(-0.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: &bool;                   // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let _4: bool;                        // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _5: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
    let mut _6: &NonDet;                 // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let _7: NonDet;                      // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let mut _8: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _9: &NonDet;                 // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let mut _10: &bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _10 = const _;                   // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:31: 40:40
                                         // + literal: Const { ty: &bool, val: Unevaluated(f32::_, [], Some(promoted[1])) }
        _3 = &(*_10);                    // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_6);                 // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        _9 = const _;                    // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:42: 40:46
                                         // + literal: Const { ty: &NonDet, val: Unevaluated(f32::_, [], Some(promoted[0])) }
        _6 = &(*_9);                     // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        _2 = <bool as PartialEq<NonDet>>::eq(move _3, move _6) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:35: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a bool, &'b NonDet) -> bool {<bool as PartialEq<NonDet>>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_6);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_8);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _8 = core::panicking::panic(const "assertion failed: f32::is_sign_positive(-0.0 / 0.0) == NonDet"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

promoted[0] in f32::_: &NonDet = {
    let mut _0: &NonDet;                 // return place in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let mut _1: NonDet;                  // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46

    bb0: {
        _1 = NonDet;                     // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        _0 = &_1;                        // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        return;                          // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    }
}

promoted[1] in f32::_: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _2: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16

    bb0: {
        _2 = Div(const -0f32, const 0f32); // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        _1 = core::f32::<impl f32>::is_sign_positive(move _2) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        return;                          // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: &bool;                   // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let _4: bool;                        // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _5: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
    let mut _6: &NonDet;                 // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let _7: NonDet;                      // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let mut _8: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _9: &NonDet;                 // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let mut _10: &bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _10 = const _;                   // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:31: 40:40
                                         // + literal: Const { ty: &bool, val: Unevaluated(f32::_, [], Some(promoted[1])) }
        _3 = &(*_10);                    // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_6);                 // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        _9 = const _;                    // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:42: 40:46
                                         // + literal: Const { ty: &NonDet, val: Unevaluated(f32::_, [], Some(promoted[0])) }
        _6 = &(*_9);                     // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        _2 = <bool as PartialEq<NonDet>>::eq(move _3, move _6) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:35: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a bool, &'b NonDet) -> bool {<bool as PartialEq<NonDet>>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_6);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_8);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _8 = core::panicking::panic(const "assertion failed: f32::is_sign_negative(-0.0 / 0.0) == NonDet"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

promoted[0] in f32::_: &NonDet = {
    let mut _0: &NonDet;                 // return place in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let mut _1: NonDet;                  // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46

    bb0: {
        _1 = NonDet;                     // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        _0 = &_1;                        // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        return;                          // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    }
}

promoted[1] in f32::_: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _2: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16

    bb0: {
        _2 = Div(const -0f32, const 0f32); // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        _1 = core::f32::<impl f32>::is_sign_negative(move _2) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        return;                          // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        _4 = Div(const 0f32, const 0f32); // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_nan(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_nan}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f32::is_nan(0.0 / 0.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        _4 = Div(const 0f32, const 0f32); // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_infinite(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_infinite}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f32::is_infinite(0.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        _4 = Div(const 0f32, const 0f32); // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_finite(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_finite}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f32::is_finite(0.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        _4 = Div(const 0f32, const 0f32); // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_normal(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_normal}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f32::is_normal(0.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: &bool;                   // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let _4: bool;                        // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _5: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
    let mut _6: &NonDet;                 // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let _7: NonDet;                      // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let mut _8: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _9: &NonDet;                 // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let mut _10: &bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _10 = const _;                   // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:31: 40:40
                                         // + literal: Const { ty: &bool, val: Unevaluated(f32::_, [], Some(promoted[1])) }
        _3 = &(*_10);                    // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_6);                 // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        _9 = const _;                    // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:42: 40:46
                                         // + literal: Const { ty: &NonDet, val: Unevaluated(f32::_, [], Some(promoted[0])) }
        _6 = &(*_9);                     // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        _2 = <bool as PartialEq<NonDet>>::eq(move _3, move _6) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:35: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a bool, &'b NonDet) -> bool {<bool as PartialEq<NonDet>>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_6);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_8);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _8 = core::panicking::panic(const "assertion failed: f32::is_sign_positive(0.0 / 0.0) == NonDet"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

promoted[0] in f32::_: &NonDet = {
    let mut _0: &NonDet;                 // return place in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let mut _1: NonDet;                  // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46

    bb0: {
        _1 = NonDet;                     // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        _0 = &_1;                        // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        return;                          // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    }
}

promoted[1] in f32::_: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _2: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16

    bb0: {
        _2 = Div(const 0f32, const 0f32); // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        _1 = core::f32::<impl f32>::is_sign_positive(move _2) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        return;                          // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: &bool;                   // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let _4: bool;                        // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _5: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
    let mut _6: &NonDet;                 // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let _7: NonDet;                      // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let mut _8: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _9: &NonDet;                 // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let mut _10: &bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _10 = const _;                   // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:31: 40:40
                                         // + literal: Const { ty: &bool, val: Unevaluated(f32::_, [], Some(promoted[1])) }
        _3 = &(*_10);                    // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_6);                 // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        _9 = const _;                    // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:42: 40:46
                                         // + literal: Const { ty: &NonDet, val: Unevaluated(f32::_, [], Some(promoted[0])) }
        _6 = &(*_9);                     // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        _2 = <bool as PartialEq<NonDet>>::eq(move _3, move _6) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:35: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a bool, &'b NonDet) -> bool {<bool as PartialEq<NonDet>>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_6);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_8);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _8 = core::panicking::panic(const "assertion failed: f32::is_sign_negative(0.0 / 0.0) == NonDet"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

promoted[0] in f32::_: &NonDet = {
    let mut _0: &NonDet;                 // return place in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let mut _1: NonDet;                  // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46

    bb0: {
        _1 = NonDet;                     // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        _0 = &_1;                        // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        return;                          // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    }
}

promoted[1] in f32::_: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _2: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16

    bb0: {
        _2 = Div(const 0f32, const 0f32); // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        _1 = core::f32::<impl f32>::is_sign_negative(move _2) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        return;                          // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_nan(const 1f32) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_nan}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f32::is_nan(1.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_infinite(const 1f32) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_infinite}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f32::is_infinite(1.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_finite(const 1f32) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_finite}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f32::is_finite(1.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_normal(const 1f32) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_normal}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f32::is_normal(1.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_sign_positive(const 1f32) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f32::is_sign_positive(1.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_sign_negative(const 1f32) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f32::is_sign_negative(1.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_nan(const -1f32) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_nan}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f32::is_nan(-1.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_infinite(const -1f32) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_infinite}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f32::is_infinite(-1.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_finite(const -1f32) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_finite}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f32::is_finite(-1.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_normal(const -1f32) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_normal}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f32::is_normal(-1.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_sign_positive(const -1f32) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f32::is_sign_positive(-1.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_sign_negative(const -1f32) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f32::is_sign_negative(-1.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_nan(const 0f32) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_nan}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f32::is_nan(0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_infinite(const 0f32) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_infinite}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f32::is_infinite(0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_finite(const 0f32) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_finite}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f32::is_finite(0.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_normal(const 0f32) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_normal}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f32::is_normal(0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_sign_positive(const 0f32) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f32::is_sign_positive(0.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_sign_negative(const 0f32) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f32::is_sign_negative(0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_nan(const -0f32) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_nan}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f32::is_nan(-0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_infinite(const -0f32) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_infinite}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f32::is_infinite(-0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_finite(const -0f32) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_finite}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f32::is_finite(-0.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_normal(const -0f32) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_normal}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f32::is_normal(-0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_sign_positive(const -0f32) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f32::is_sign_positive(-0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_sign_negative(const -0f32) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f32::is_sign_negative(-0.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        _4 = Div(const 1f32, const 0f32); // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_nan(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_nan}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f32::is_nan(1.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        _4 = Div(const 1f32, const 0f32); // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_infinite(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_infinite}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f32::is_infinite(1.0 / 0.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        _4 = Div(const 1f32, const 0f32); // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_finite(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_finite}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f32::is_finite(1.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        _4 = Div(const 1f32, const 0f32); // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_normal(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_normal}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f32::is_normal(1.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        _4 = Div(const 1f32, const 0f32); // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_sign_positive(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f32::is_sign_positive(1.0 / 0.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        _4 = Div(const 1f32, const 0f32); // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_sign_negative(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f32::is_sign_negative(1.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        _4 = Div(const -1f32, const 0f32); // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_nan(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_nan}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f32::is_nan(-1.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        _4 = Div(const -1f32, const 0f32); // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_infinite(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_infinite}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f32::is_infinite(-1.0 / 0.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        _4 = Div(const -1f32, const 0f32); // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_finite(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_finite}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f32::is_finite(-1.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        _4 = Div(const -1f32, const 0f32); // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_normal(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_normal}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f32::is_normal(-1.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        _4 = Div(const -1f32, const 0f32); // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_sign_positive(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f32::is_sign_positive(-1.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f32::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f32;                     // in scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        _4 = Div(const -1f32, const 0f32); // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f32::<impl f32>::is_sign_negative(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f32) -> bool {core::f32::<impl f32>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f32::is_sign_negative(-1.0 / 0.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

fn f64() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:26:18: 26:18
    let mut _1: (&bool, &bool);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: bool;                        // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _4: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _5: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
    let mut _6: &bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _7: bool;                        // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _8: &bool;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _9: &bool;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _23: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _24: bool;                       // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _25: bool;                   // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _26: f64;                    // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
    let mut _27: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _28: bool;                       // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _29: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _30: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _33: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _34: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _36: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _37: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _38: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _39: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _40: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _41: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _43: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _44: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _45: bool;                       // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _46: bool;                   // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _47: f64;                    // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
    let mut _48: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _49: bool;                       // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _50: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _51: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _52: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _53: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _54: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _55: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _57: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _58: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _59: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _60: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _61: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _62: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _64: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _65: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _66: bool;                       // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _67: bool;                   // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _68: f64;                    // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
    let mut _69: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _70: bool;                       // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _71: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _72: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _73: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _74: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _75: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _76: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _78: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _79: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _80: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _81: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _82: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _83: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _85: (&bool, &NonDet);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _86: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _87: bool;                       // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _88: bool;                   // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _89: f64;                    // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
    let mut _90: &NonDet;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _91: NonDet;                     // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let mut _92: NonDet;                 // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let _93: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _94: &NonDet;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _95: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _96: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _97: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _98: &NonDet;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _100: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _101: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _102: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _103: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _104: &NonDet;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _105: &NonDet;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _106: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _107: (&bool, &NonDet);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _108: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _109: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _110: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _111: f64;                   // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
    let mut _112: &NonDet;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _113: NonDet;                    // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let mut _114: NonDet;                // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let _115: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _116: &NonDet;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _117: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _118: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _119: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _120: &NonDet;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _122: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _123: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _124: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _125: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _126: &NonDet;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _127: &NonDet;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _128: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _129: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _130: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _131: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _132: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _133: f64;                   // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
    let mut _134: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _135: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _136: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _137: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _138: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _139: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _140: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _141: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _143: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _144: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _145: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _146: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _147: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _148: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _149: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _150: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _151: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _152: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _153: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _154: f64;                   // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
    let mut _155: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _156: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _157: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _158: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _159: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _160: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _161: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _162: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _164: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _165: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _166: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _167: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _168: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _169: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _170: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _171: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _172: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _173: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _174: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _175: f64;                   // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
    let mut _176: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _177: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _178: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _179: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _180: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _181: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _182: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _183: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _185: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _186: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _187: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _188: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _189: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _190: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _191: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _192: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _193: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _194: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _195: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _196: f64;                   // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
    let mut _197: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _198: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _199: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _200: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _201: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _202: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _203: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _204: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _206: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _207: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _208: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _209: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _210: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _211: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _212: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _213: (&bool, &NonDet);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _214: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _215: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _216: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _217: f64;                   // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
    let mut _218: &NonDet;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _219: NonDet;                    // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let mut _220: NonDet;                // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let _221: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _222: &NonDet;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _223: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _224: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _225: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _226: &NonDet;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _228: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _229: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _230: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _231: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _232: &NonDet;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _233: &NonDet;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _234: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _235: (&bool, &NonDet);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _236: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _237: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _238: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _239: f64;                   // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
    let mut _240: &NonDet;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _241: NonDet;                    // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let mut _242: NonDet;                // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let _243: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _244: &NonDet;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _245: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _246: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _247: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _248: &NonDet;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _250: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _251: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _252: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _253: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _254: &NonDet;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _255: &NonDet;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _256: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _257: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _258: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _259: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _260: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _261: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _262: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _263: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _264: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _265: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _266: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _267: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _268: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _270: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _271: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _272: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _273: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _274: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _275: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _276: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _277: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _278: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _279: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _280: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _281: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _282: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _283: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _284: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _285: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _286: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _287: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _288: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _290: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _291: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _292: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _293: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _294: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _295: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _296: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _297: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _298: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _299: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _300: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _301: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _302: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _303: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _304: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _305: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _306: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _307: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _308: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _310: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _311: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _312: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _313: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _314: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _315: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _316: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _317: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _318: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _319: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _320: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _321: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _322: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _323: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _324: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _325: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _326: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _327: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _328: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _330: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _331: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _332: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _333: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _334: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _335: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _336: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _337: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _338: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _339: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _340: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _341: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _342: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _343: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _344: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _345: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _346: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _347: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _348: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _350: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _351: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _352: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _353: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _354: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _355: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _356: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _357: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _358: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _359: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _360: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _361: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _362: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _363: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _364: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _365: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _366: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _367: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _368: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _370: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _371: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _372: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _373: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _374: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _375: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _376: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _377: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _378: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _379: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _380: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _381: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _382: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _383: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _384: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _385: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _386: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _387: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _388: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _390: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _391: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _392: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _393: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _394: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _395: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _396: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _397: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _398: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _399: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _400: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _401: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _402: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _403: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _404: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _405: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _406: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _407: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _408: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _410: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _411: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _412: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _413: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _414: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _415: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _416: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _417: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _418: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _419: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _420: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _421: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _422: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _423: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _424: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _425: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _426: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _427: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _428: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _430: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _431: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _432: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _433: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _434: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _435: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _436: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _437: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _438: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _439: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _440: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _441: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _442: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _443: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _444: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _445: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _446: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _447: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _448: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _450: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _451: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _452: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _453: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _454: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _455: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _456: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _457: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _458: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _459: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _460: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _461: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _462: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _463: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _464: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _465: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _466: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _467: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _468: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _470: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _471: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _472: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _473: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _474: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _475: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _476: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _477: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _478: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _479: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _480: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _481: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _482: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _483: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _484: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _485: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _486: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _487: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _488: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _490: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _491: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _492: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _493: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _494: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _495: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _496: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _497: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _498: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _499: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _500: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _501: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _502: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _503: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _504: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _505: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _506: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _507: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _508: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _510: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _511: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _512: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _513: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _514: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _515: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _516: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _517: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _518: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _519: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _520: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _521: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _522: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _523: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _524: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _525: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _526: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _527: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _528: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _530: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _531: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _532: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _533: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _534: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _535: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _536: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _537: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _538: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _539: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _540: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _541: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _542: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _543: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _544: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _545: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _546: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _547: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _548: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _550: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _551: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _552: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _553: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _554: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _555: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _556: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _557: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _558: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _559: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _560: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _561: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _562: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _563: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _564: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _565: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _566: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _567: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _568: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _570: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _571: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _572: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _573: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _574: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _575: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _576: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _577: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _578: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _579: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _580: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _581: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _582: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _583: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _584: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _585: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _586: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _587: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _588: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _590: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _591: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _592: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _593: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _594: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _595: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _596: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _597: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _598: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _599: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _600: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _601: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _602: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _603: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _604: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _605: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _606: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _607: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _608: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _610: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _611: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _612: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _613: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _614: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _615: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _616: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _617: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _618: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _619: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _620: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _621: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _622: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _623: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _624: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _625: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _626: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _627: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _628: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _630: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _631: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _632: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _633: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _634: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _635: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _636: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _637: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _638: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _639: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _640: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _641: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _642: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _643: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _644: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _645: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _646: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _647: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _648: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _650: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _651: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _652: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _653: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _654: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _655: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _656: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _657: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _658: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _659: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _660: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _661: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _662: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _663: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _664: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _665: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _666: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _667: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _668: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _670: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _671: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _672: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _673: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _674: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _675: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _676: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _677: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _678: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _679: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _680: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _681: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _682: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _683: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _684: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _685: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _686: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _687: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _688: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _690: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _691: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _692: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _693: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _694: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _695: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _696: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _697: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _698: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _699: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _700: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _701: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _702: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _703: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _704: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _705: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _706: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _707: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _708: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _710: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _711: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _712: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _713: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _714: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _715: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _716: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _717: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _718: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _719: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _720: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _721: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _722: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _723: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _724: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _725: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _726: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _727: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _728: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _730: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _731: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _732: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _733: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _734: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _735: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _736: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _737: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _738: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _739: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _740: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _741: f64;                   // in scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
    let mut _742: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _743: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _744: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _745: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _746: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _747: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _748: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _749: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _751: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _752: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _753: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _754: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _755: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _756: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _757: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _758: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _759: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _760: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _761: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _762: f64;                   // in scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
    let mut _763: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _764: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _765: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _766: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _767: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _768: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _769: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _770: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _772: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _773: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _774: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _775: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _776: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _777: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _778: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _779: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _780: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _781: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _782: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _783: f64;                   // in scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
    let mut _784: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _785: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _786: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _787: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _788: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _789: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _790: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _791: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _793: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _794: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _795: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _796: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _797: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _798: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _799: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _800: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _801: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _802: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _803: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _804: f64;                   // in scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
    let mut _805: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _806: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _807: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _808: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _809: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _810: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _811: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _812: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _814: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _815: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _816: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _817: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _818: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _819: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _820: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _821: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _822: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _823: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _824: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _825: f64;                   // in scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
    let mut _826: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _827: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _828: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _829: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _830: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _831: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _832: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _833: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _835: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _836: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _837: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _838: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _839: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _840: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _841: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _842: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _843: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _844: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _845: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _846: f64;                   // in scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
    let mut _847: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _848: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _849: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _850: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _851: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _852: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _853: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _854: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _856: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _857: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _858: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _859: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _860: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _861: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _862: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _863: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _864: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _865: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _866: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _867: f64;                   // in scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
    let mut _868: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _869: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _870: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _871: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _872: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _873: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _874: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _875: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _877: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _878: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _879: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _880: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _881: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _882: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _883: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _884: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _885: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _886: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _887: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _888: f64;                   // in scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
    let mut _889: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _890: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _891: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _892: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _893: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _894: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _895: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _896: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _898: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _899: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _900: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _901: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _902: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _903: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _904: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _905: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _906: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _907: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _908: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _909: f64;                   // in scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
    let mut _910: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _911: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _912: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _913: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _914: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _915: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _916: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _917: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _919: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _920: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _921: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _922: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _923: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _924: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _925: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _926: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _927: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _928: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _929: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _930: f64;                   // in scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
    let mut _931: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _932: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _933: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _934: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _935: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _936: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _937: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _938: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _940: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _941: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _942: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _943: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _944: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _945: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _946: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _947: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _948: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _949: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _950: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _951: f64;                   // in scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
    let mut _952: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _953: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _954: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _955: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _956: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _957: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _958: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _959: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _961: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _962: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _963: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _964: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _965: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _966: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _967: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _968: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _969: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _970: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
    let mut _971: bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _972: f64;                   // in scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
    let mut _973: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _974: bool;                      // in scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
    let _975: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _976: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _977: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _978: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _979: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _980: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _982: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _983: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _984: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _985: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _986: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _987: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _988: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _29;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _30;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _35: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _35;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _50;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _51;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _56: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _56;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug left_val => _71;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _72;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _77: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 8 {
            debug kind => _77;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 9 {
        debug left_val => _93;           // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _94;          // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _99: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 10 {
            debug kind => _99;           // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 11 {
        debug left_val => _115;          // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _116;         // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _121: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 12 {
            debug kind => _121;          // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 13 {
        debug left_val => _136;          // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _137;         // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _142: core::panicking::AssertKind; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 14 {
            debug kind => _142;          // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 15 {
        debug left_val => _157;          // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _158;         // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _163: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 16 {
            debug kind => _163;          // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 17 {
        debug left_val => _178;          // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _179;         // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _184: core::panicking::AssertKind; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 18 {
            debug kind => _184;          // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 19 {
        debug left_val => _199;          // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _200;         // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _205: core::panicking::AssertKind; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 20 {
            debug kind => _205;          // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 21 {
        debug left_val => _221;          // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _222;         // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _227: core::panicking::AssertKind; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 22 {
            debug kind => _227;          // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 23 {
        debug left_val => _243;          // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _244;         // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _249: core::panicking::AssertKind; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 24 {
            debug kind => _249;          // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 25 {
        debug left_val => _263;          // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _264;         // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _269: core::panicking::AssertKind; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 26 {
            debug kind => _269;          // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 27 {
        debug left_val => _283;          // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _284;         // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _289: core::panicking::AssertKind; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 28 {
            debug kind => _289;          // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 29 {
        debug left_val => _303;          // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _304;         // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _309: core::panicking::AssertKind; // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 30 {
            debug kind => _309;          // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 31 {
        debug left_val => _323;          // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _324;         // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _329: core::panicking::AssertKind; // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 32 {
            debug kind => _329;          // in scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 33 {
        debug left_val => _343;          // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _344;         // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _349: core::panicking::AssertKind; // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 34 {
            debug kind => _349;          // in scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 35 {
        debug left_val => _363;          // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _364;         // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _369: core::panicking::AssertKind; // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 36 {
            debug kind => _369;          // in scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 37 {
        debug left_val => _383;          // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _384;         // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _389: core::panicking::AssertKind; // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 38 {
            debug kind => _389;          // in scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 39 {
        debug left_val => _403;          // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _404;         // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _409: core::panicking::AssertKind; // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 40 {
            debug kind => _409;          // in scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 41 {
        debug left_val => _423;          // in scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _424;         // in scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _429: core::panicking::AssertKind; // in scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 42 {
            debug kind => _429;          // in scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 43 {
        debug left_val => _443;          // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _444;         // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _449: core::panicking::AssertKind; // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 44 {
            debug kind => _449;          // in scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 45 {
        debug left_val => _463;          // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _464;         // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _469: core::panicking::AssertKind; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 46 {
            debug kind => _469;          // in scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 47 {
        debug left_val => _483;          // in scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _484;         // in scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _489: core::panicking::AssertKind; // in scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 48 {
            debug kind => _489;          // in scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 49 {
        debug left_val => _503;          // in scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _504;         // in scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _509: core::panicking::AssertKind; // in scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 50 {
            debug kind => _509;          // in scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 51 {
        debug left_val => _523;          // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _524;         // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _529: core::panicking::AssertKind; // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 52 {
            debug kind => _529;          // in scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 53 {
        debug left_val => _543;          // in scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _544;         // in scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _549: core::panicking::AssertKind; // in scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 54 {
            debug kind => _549;          // in scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 55 {
        debug left_val => _563;          // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _564;         // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _569: core::panicking::AssertKind; // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 56 {
            debug kind => _569;          // in scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 57 {
        debug left_val => _583;          // in scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _584;         // in scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _589: core::panicking::AssertKind; // in scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 58 {
            debug kind => _589;          // in scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 59 {
        debug left_val => _603;          // in scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _604;         // in scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _609: core::panicking::AssertKind; // in scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 60 {
            debug kind => _609;          // in scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 61 {
        debug left_val => _623;          // in scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _624;         // in scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _629: core::panicking::AssertKind; // in scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 62 {
            debug kind => _629;          // in scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 63 {
        debug left_val => _643;          // in scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _644;         // in scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _649: core::panicking::AssertKind; // in scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 64 {
            debug kind => _649;          // in scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 65 {
        debug left_val => _663;          // in scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _664;         // in scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _669: core::panicking::AssertKind; // in scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 66 {
            debug kind => _669;          // in scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 67 {
        debug left_val => _683;          // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _684;         // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _689: core::panicking::AssertKind; // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 68 {
            debug kind => _689;          // in scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 69 {
        debug left_val => _703;          // in scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _704;         // in scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _709: core::panicking::AssertKind; // in scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 70 {
            debug kind => _709;          // in scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 71 {
        debug left_val => _723;          // in scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _724;         // in scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _729: core::panicking::AssertKind; // in scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 72 {
            debug kind => _729;          // in scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 73 {
        debug left_val => _744;          // in scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _745;         // in scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _750: core::panicking::AssertKind; // in scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 74 {
            debug kind => _750;          // in scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 75 {
        debug left_val => _765;          // in scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _766;         // in scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _771: core::panicking::AssertKind; // in scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 76 {
            debug kind => _771;          // in scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 77 {
        debug left_val => _786;          // in scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _787;         // in scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _792: core::panicking::AssertKind; // in scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 78 {
            debug kind => _792;          // in scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 79 {
        debug left_val => _807;          // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _808;         // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _813: core::panicking::AssertKind; // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 80 {
            debug kind => _813;          // in scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 81 {
        debug left_val => _828;          // in scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _829;         // in scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _834: core::panicking::AssertKind; // in scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 82 {
            debug kind => _834;          // in scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 83 {
        debug left_val => _849;          // in scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _850;         // in scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _855: core::panicking::AssertKind; // in scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 84 {
            debug kind => _855;          // in scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 85 {
        debug left_val => _870;          // in scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _871;         // in scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _876: core::panicking::AssertKind; // in scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 86 {
            debug kind => _876;          // in scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 87 {
        debug left_val => _891;          // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _892;         // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _897: core::panicking::AssertKind; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 88 {
            debug kind => _897;          // in scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 89 {
        debug left_val => _912;          // in scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _913;         // in scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _918: core::panicking::AssertKind; // in scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 90 {
            debug kind => _918;          // in scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 91 {
        debug left_val => _933;          // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _934;         // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _939: core::panicking::AssertKind; // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 92 {
            debug kind => _939;          // in scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 93 {
        debug left_val => _954;          // in scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _955;         // in scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _960: core::panicking::AssertKind; // in scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 94 {
            debug kind => _960;          // in scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 95 {
        debug left_val => _975;          // in scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _976;         // in scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _981: core::panicking::AssertKind; // in scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 96 {
            debug kind => _981;          // in scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _5 = const NaNf64;               // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        _4 = core::f64::<impl f64>::is_nan(move _5) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = nop::<bool>(move _4) -> bb2; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _7 = nop::<bool>(const true) -> bb3; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = &_7;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _6);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_1.0: &bool);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_1.1: &bool);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = (*_9);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb5, otherwise: bb4]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _14 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<bool, bool>(move _16, move _17, move _19, move _21); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb5: {
        _26 = const NaNf64;              // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        _25 = core::f64::<impl f64>::is_infinite(move _26) -> bb6; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_infinite}, val: Value(<ZST>) }
    }

    bb6: {
        _24 = nop::<bool>(move _25) -> bb7; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb7: {
        _23 = &_24;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _28 = nop::<bool>(const false) -> bb8; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb8: {
        _27 = &_28;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _22 = (move _23, move _27);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _29 = (_22.0: &bool);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _30 = (_22.1: &bool);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _33 = (*_29);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _34 = (*_30);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _32 = Eq(move _33, move _34);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _31 = Not(move _32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _31) -> [0: bb10, otherwise: bb9]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _35 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = _29;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _39;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _41 = _30;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = _41;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _36 = core::panicking::assert_failed::<bool, bool>(move _37, move _38, move _40, move _42); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb10: {
        _47 = const NaNf64;              // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        _46 = core::f64::<impl f64>::is_finite(move _47) -> bb11; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_finite}, val: Value(<ZST>) }
    }

    bb11: {
        _45 = nop::<bool>(move _46) -> bb12; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb12: {
        _44 = &_45;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _49 = nop::<bool>(const false) -> bb13; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb13: {
        _48 = &_49;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _43 = (move _44, move _48);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _50 = (_43.0: &bool);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _51 = (_43.1: &bool);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _54 = (*_50);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _55 = (*_51);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _53 = Eq(move _54, move _55);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _52 = Not(move _53);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _52) -> [0: bb15, otherwise: bb14]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb14: {
        _56 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _60 = _50;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _59 = _60;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _62 = _51;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = _62;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _63 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _57 = core::panicking::assert_failed::<bool, bool>(move _58, move _59, move _61, move _63); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb15: {
        _68 = const NaNf64;              // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        _67 = core::f64::<impl f64>::is_normal(move _68) -> bb16; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_normal}, val: Value(<ZST>) }
    }

    bb16: {
        _66 = nop::<bool>(move _67) -> bb17; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb17: {
        _65 = &_66;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _70 = nop::<bool>(const false) -> bb18; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb18: {
        _69 = &_70;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _64 = (move _65, move _69);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _71 = (_64.0: &bool);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _72 = (_64.1: &bool);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _75 = (*_71);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _76 = (*_72);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _74 = Eq(move _75, move _76);    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _73 = Not(move _74);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _73) -> [0: bb20, otherwise: bb19]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb19: {
        _77 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _79 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _81 = _71;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _80 = _81;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _83 = _72;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _82 = _83;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _84 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _78 = core::panicking::assert_failed::<bool, bool>(move _79, move _80, move _82, move _84); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb20: {
        _89 = const NaNf64;              // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        _88 = core::f64::<impl f64>::is_sign_positive(move _89) -> bb21; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb21: {
        _87 = nop::<bool>(move _88) -> bb22; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb22: {
        _86 = &_87;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _91 = nop::<NonDet>(move _92) -> bb23; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(NonDet) -> NonDet {nop::<NonDet>}, val: Value(<ZST>) }
    }

    bb23: {
        _90 = &_91;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _85 = (move _86, move _90);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _93 = (_85.0: &bool);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _94 = (_85.1: &NonDet);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _97 = _93;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _98 = _94;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _96 = <bool as PartialEq<NonDet>>::eq(move _97, move _98) -> bb24; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a bool, &'b NonDet) -> bool {<bool as PartialEq<NonDet>>::eq}, val: Value(<ZST>) }
    }

    bb24: {
        _95 = Not(move _96);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _95) -> [0: bb26, otherwise: bb25]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb25: {
        _99 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _101 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _103 = _93;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _102 = _103;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _105 = _94;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _104 = _105;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _106 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _100 = core::panicking::assert_failed::<bool, NonDet>(move _101, move _102, move _104, move _106); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b NonDet, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, NonDet>}, val: Value(<ZST>) }
    }

    bb26: {
        _111 = const NaNf64;             // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        _110 = core::f64::<impl f64>::is_sign_negative(move _111) -> bb27; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb27: {
        _109 = nop::<bool>(move _110) -> bb28; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb28: {
        _108 = &_109;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _113 = nop::<NonDet>(move _114) -> bb29; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(NonDet) -> NonDet {nop::<NonDet>}, val: Value(<ZST>) }
    }

    bb29: {
        _112 = &_113;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _107 = (move _108, move _112);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _115 = (_107.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _116 = (_107.1: &NonDet);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _119 = _115;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _120 = _116;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _118 = <bool as PartialEq<NonDet>>::eq(move _119, move _120) -> bb30; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a bool, &'b NonDet) -> bool {<bool as PartialEq<NonDet>>::eq}, val: Value(<ZST>) }
    }

    bb30: {
        _117 = Not(move _118);           // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _117) -> [0: bb32, otherwise: bb31]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb31: {
        _121 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _123 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _125 = _115;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _124 = _125;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _127 = _116;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _126 = _127;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _128 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _122 = core::panicking::assert_failed::<bool, NonDet>(move _123, move _124, move _126, move _128); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b NonDet, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, NonDet>}, val: Value(<ZST>) }
    }

    bb32: {
        _133 = const NaNf64;             // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        _132 = core::f64::<impl f64>::is_nan(move _133) -> bb33; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb33: {
        _131 = nop::<bool>(move _132) -> bb34; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb34: {
        _130 = &_131;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _135 = nop::<bool>(const true) -> bb35; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb35: {
        _134 = &_135;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _129 = (move _130, move _134);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _136 = (_129.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _137 = (_129.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _140 = (*_136);                  // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _141 = (*_137);                  // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _139 = Eq(move _140, move _141); // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _138 = Not(move _139);           // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _138) -> [0: bb37, otherwise: bb36]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb36: {
        _142 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _144 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _146 = _136;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _145 = _146;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _148 = _137;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _147 = _148;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _149 = Option::<Arguments<'_>>::None; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _143 = core::panicking::assert_failed::<bool, bool>(move _144, move _145, move _147, move _149); // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb37: {
        _154 = const NaNf64;             // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        _153 = core::f64::<impl f64>::is_infinite(move _154) -> bb38; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_infinite}, val: Value(<ZST>) }
    }

    bb38: {
        _152 = nop::<bool>(move _153) -> bb39; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb39: {
        _151 = &_152;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _156 = nop::<bool>(const false) -> bb40; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb40: {
        _155 = &_156;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _150 = (move _151, move _155);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _157 = (_150.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _158 = (_150.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _161 = (*_157);                  // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _162 = (*_158);                  // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _160 = Eq(move _161, move _162); // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _159 = Not(move _160);           // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _159) -> [0: bb42, otherwise: bb41]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb41: {
        _163 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _165 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _167 = _157;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _166 = _167;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _169 = _158;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _168 = _169;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _170 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _164 = core::panicking::assert_failed::<bool, bool>(move _165, move _166, move _168, move _170); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb42: {
        _175 = const NaNf64;             // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        _174 = core::f64::<impl f64>::is_finite(move _175) -> bb43; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_finite}, val: Value(<ZST>) }
    }

    bb43: {
        _173 = nop::<bool>(move _174) -> bb44; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb44: {
        _172 = &_173;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _177 = nop::<bool>(const false) -> bb45; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb45: {
        _176 = &_177;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _171 = (move _172, move _176);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _178 = (_171.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _179 = (_171.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _182 = (*_178);                  // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _183 = (*_179);                  // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _181 = Eq(move _182, move _183); // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _180 = Not(move _181);           // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _180) -> [0: bb47, otherwise: bb46]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb46: {
        _184 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _186 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _188 = _178;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _187 = _188;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _190 = _179;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _189 = _190;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _191 = Option::<Arguments<'_>>::None; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _185 = core::panicking::assert_failed::<bool, bool>(move _186, move _187, move _189, move _191); // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb47: {
        _196 = const NaNf64;             // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        _195 = core::f64::<impl f64>::is_normal(move _196) -> bb48; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_normal}, val: Value(<ZST>) }
    }

    bb48: {
        _194 = nop::<bool>(move _195) -> bb49; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb49: {
        _193 = &_194;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _198 = nop::<bool>(const false) -> bb50; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb50: {
        _197 = &_198;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _192 = (move _193, move _197);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _199 = (_192.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _200 = (_192.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _203 = (*_199);                  // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _204 = (*_200);                  // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _202 = Eq(move _203, move _204); // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _201 = Not(move _202);           // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _201) -> [0: bb52, otherwise: bb51]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb51: {
        _205 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _207 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _209 = _199;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _208 = _209;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _211 = _200;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _210 = _211;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _212 = Option::<Arguments<'_>>::None; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _206 = core::panicking::assert_failed::<bool, bool>(move _207, move _208, move _210, move _212); // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb52: {
        _217 = const NaNf64;             // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        _216 = core::f64::<impl f64>::is_sign_positive(move _217) -> bb53; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb53: {
        _215 = nop::<bool>(move _216) -> bb54; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb54: {
        _214 = &_215;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _219 = nop::<NonDet>(move _220) -> bb55; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(NonDet) -> NonDet {nop::<NonDet>}, val: Value(<ZST>) }
    }

    bb55: {
        _218 = &_219;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _213 = (move _214, move _218);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _221 = (_213.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _222 = (_213.1: &NonDet);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _225 = _221;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _226 = _222;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _224 = <bool as PartialEq<NonDet>>::eq(move _225, move _226) -> bb56; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a bool, &'b NonDet) -> bool {<bool as PartialEq<NonDet>>::eq}, val: Value(<ZST>) }
    }

    bb56: {
        _223 = Not(move _224);           // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _223) -> [0: bb58, otherwise: bb57]; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb57: {
        _227 = const core::panicking::AssertKind::Eq; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _229 = const core::panicking::AssertKind::Eq; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _231 = _221;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _230 = _231;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _233 = _222;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _232 = _233;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _234 = Option::<Arguments<'_>>::None; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _228 = core::panicking::assert_failed::<bool, NonDet>(move _229, move _230, move _232, move _234); // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b NonDet, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, NonDet>}, val: Value(<ZST>) }
    }

    bb58: {
        _239 = const NaNf64;             // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        _238 = core::f64::<impl f64>::is_sign_negative(move _239) -> bb59; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb59: {
        _237 = nop::<bool>(move _238) -> bb60; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb60: {
        _236 = &_237;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _241 = nop::<NonDet>(move _242) -> bb61; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(NonDet) -> NonDet {nop::<NonDet>}, val: Value(<ZST>) }
    }

    bb61: {
        _240 = &_241;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _235 = (move _236, move _240);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _243 = (_235.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _244 = (_235.1: &NonDet);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _247 = _243;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _248 = _244;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _246 = <bool as PartialEq<NonDet>>::eq(move _247, move _248) -> bb62; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a bool, &'b NonDet) -> bool {<bool as PartialEq<NonDet>>::eq}, val: Value(<ZST>) }
    }

    bb62: {
        _245 = Not(move _246);           // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _245) -> [0: bb64, otherwise: bb63]; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb63: {
        _249 = const core::panicking::AssertKind::Eq; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _251 = const core::panicking::AssertKind::Eq; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _253 = _243;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _252 = _253;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _255 = _244;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _254 = _255;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _256 = Option::<Arguments<'_>>::None; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _250 = core::panicking::assert_failed::<bool, NonDet>(move _251, move _252, move _254, move _256); // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b NonDet, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, NonDet>}, val: Value(<ZST>) }
    }

    bb64: {
        _260 = core::f64::<impl f64>::is_nan(const 1f64) -> bb65; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb65: {
        _259 = nop::<bool>(move _260) -> bb66; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb66: {
        _258 = &_259;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _262 = nop::<bool>(const false) -> bb67; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb67: {
        _261 = &_262;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _257 = (move _258, move _261);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _263 = (_257.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _264 = (_257.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _267 = (*_263);                  // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _268 = (*_264);                  // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _266 = Eq(move _267, move _268); // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _265 = Not(move _266);           // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _265) -> [0: bb69, otherwise: bb68]; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb68: {
        _269 = const core::panicking::AssertKind::Eq; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _271 = const core::panicking::AssertKind::Eq; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _273 = _263;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _272 = _273;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _275 = _264;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _274 = _275;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _276 = Option::<Arguments<'_>>::None; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _270 = core::panicking::assert_failed::<bool, bool>(move _271, move _272, move _274, move _276); // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb69: {
        _280 = core::f64::<impl f64>::is_infinite(const 1f64) -> bb70; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_infinite}, val: Value(<ZST>) }
    }

    bb70: {
        _279 = nop::<bool>(move _280) -> bb71; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb71: {
        _278 = &_279;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _282 = nop::<bool>(const false) -> bb72; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb72: {
        _281 = &_282;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _277 = (move _278, move _281);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _283 = (_277.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _284 = (_277.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _287 = (*_283);                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _288 = (*_284);                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _286 = Eq(move _287, move _288); // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _285 = Not(move _286);           // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _285) -> [0: bb74, otherwise: bb73]; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb73: {
        _289 = const core::panicking::AssertKind::Eq; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _291 = const core::panicking::AssertKind::Eq; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _293 = _283;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _292 = _293;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _295 = _284;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _294 = _295;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _296 = Option::<Arguments<'_>>::None; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _290 = core::panicking::assert_failed::<bool, bool>(move _291, move _292, move _294, move _296); // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb74: {
        _300 = core::f64::<impl f64>::is_finite(const 1f64) -> bb75; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_finite}, val: Value(<ZST>) }
    }

    bb75: {
        _299 = nop::<bool>(move _300) -> bb76; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb76: {
        _298 = &_299;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _302 = nop::<bool>(const true) -> bb77; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb77: {
        _301 = &_302;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _297 = (move _298, move _301);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _303 = (_297.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _304 = (_297.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _307 = (*_303);                  // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _308 = (*_304);                  // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _306 = Eq(move _307, move _308); // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _305 = Not(move _306);           // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _305) -> [0: bb79, otherwise: bb78]; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb78: {
        _309 = const core::panicking::AssertKind::Eq; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _311 = const core::panicking::AssertKind::Eq; // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _313 = _303;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _312 = _313;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _315 = _304;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _314 = _315;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _316 = Option::<Arguments<'_>>::None; // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _310 = core::panicking::assert_failed::<bool, bool>(move _311, move _312, move _314, move _316); // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb79: {
        _320 = core::f64::<impl f64>::is_normal(const 1f64) -> bb80; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_normal}, val: Value(<ZST>) }
    }

    bb80: {
        _319 = nop::<bool>(move _320) -> bb81; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb81: {
        _318 = &_319;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _322 = nop::<bool>(const true) -> bb82; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb82: {
        _321 = &_322;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _317 = (move _318, move _321);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _323 = (_317.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _324 = (_317.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _327 = (*_323);                  // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _328 = (*_324);                  // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _326 = Eq(move _327, move _328); // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _325 = Not(move _326);           // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _325) -> [0: bb84, otherwise: bb83]; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb83: {
        _329 = const core::panicking::AssertKind::Eq; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _331 = const core::panicking::AssertKind::Eq; // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _333 = _323;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _332 = _333;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _335 = _324;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _334 = _335;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _336 = Option::<Arguments<'_>>::None; // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _330 = core::panicking::assert_failed::<bool, bool>(move _331, move _332, move _334, move _336); // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb84: {
        _340 = core::f64::<impl f64>::is_sign_positive(const 1f64) -> bb85; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb85: {
        _339 = nop::<bool>(move _340) -> bb86; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb86: {
        _338 = &_339;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _342 = nop::<bool>(const true) -> bb87; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb87: {
        _341 = &_342;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _337 = (move _338, move _341);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _343 = (_337.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _344 = (_337.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _347 = (*_343);                  // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _348 = (*_344);                  // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _346 = Eq(move _347, move _348); // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _345 = Not(move _346);           // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _345) -> [0: bb89, otherwise: bb88]; // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb88: {
        _349 = const core::panicking::AssertKind::Eq; // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _351 = const core::panicking::AssertKind::Eq; // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _353 = _343;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _352 = _353;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _355 = _344;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _354 = _355;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _356 = Option::<Arguments<'_>>::None; // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _350 = core::panicking::assert_failed::<bool, bool>(move _351, move _352, move _354, move _356); // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb89: {
        _360 = core::f64::<impl f64>::is_sign_negative(const 1f64) -> bb90; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb90: {
        _359 = nop::<bool>(move _360) -> bb91; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb91: {
        _358 = &_359;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _362 = nop::<bool>(const false) -> bb92; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb92: {
        _361 = &_362;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _357 = (move _358, move _361);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _363 = (_357.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _364 = (_357.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _367 = (*_363);                  // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _368 = (*_364);                  // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _366 = Eq(move _367, move _368); // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _365 = Not(move _366);           // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _365) -> [0: bb94, otherwise: bb93]; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb93: {
        _369 = const core::panicking::AssertKind::Eq; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _371 = const core::panicking::AssertKind::Eq; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _373 = _363;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _372 = _373;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _375 = _364;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _374 = _375;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _376 = Option::<Arguments<'_>>::None; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _370 = core::panicking::assert_failed::<bool, bool>(move _371, move _372, move _374, move _376); // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb94: {
        _380 = core::f64::<impl f64>::is_nan(const -1f64) -> bb95; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb95: {
        _379 = nop::<bool>(move _380) -> bb96; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb96: {
        _378 = &_379;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _382 = nop::<bool>(const false) -> bb97; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb97: {
        _381 = &_382;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _377 = (move _378, move _381);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _383 = (_377.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _384 = (_377.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _387 = (*_383);                  // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _388 = (*_384);                  // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _386 = Eq(move _387, move _388); // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _385 = Not(move _386);           // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _385) -> [0: bb99, otherwise: bb98]; // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb98: {
        _389 = const core::panicking::AssertKind::Eq; // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _391 = const core::panicking::AssertKind::Eq; // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _393 = _383;                     // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _392 = _393;                     // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _395 = _384;                     // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _394 = _395;                     // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _396 = Option::<Arguments<'_>>::None; // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _390 = core::panicking::assert_failed::<bool, bool>(move _391, move _392, move _394, move _396); // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb99: {
        _400 = core::f64::<impl f64>::is_infinite(const -1f64) -> bb100; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_infinite}, val: Value(<ZST>) }
    }

    bb100: {
        _399 = nop::<bool>(move _400) -> bb101; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb101: {
        _398 = &_399;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _402 = nop::<bool>(const false) -> bb102; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb102: {
        _401 = &_402;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _397 = (move _398, move _401);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _403 = (_397.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _404 = (_397.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _407 = (*_403);                  // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _408 = (*_404);                  // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _406 = Eq(move _407, move _408); // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _405 = Not(move _406);           // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _405) -> [0: bb104, otherwise: bb103]; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb103: {
        _409 = const core::panicking::AssertKind::Eq; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _411 = const core::panicking::AssertKind::Eq; // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _413 = _403;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _412 = _413;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _415 = _404;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _414 = _415;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _416 = Option::<Arguments<'_>>::None; // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _410 = core::panicking::assert_failed::<bool, bool>(move _411, move _412, move _414, move _416); // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb104: {
        _420 = core::f64::<impl f64>::is_finite(const -1f64) -> bb105; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_finite}, val: Value(<ZST>) }
    }

    bb105: {
        _419 = nop::<bool>(move _420) -> bb106; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb106: {
        _418 = &_419;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _422 = nop::<bool>(const true) -> bb107; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb107: {
        _421 = &_422;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _417 = (move _418, move _421);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _423 = (_417.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _424 = (_417.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _427 = (*_423);                  // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _428 = (*_424);                  // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _426 = Eq(move _427, move _428); // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _425 = Not(move _426);           // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _425) -> [0: bb109, otherwise: bb108]; // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb108: {
        _429 = const core::panicking::AssertKind::Eq; // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _431 = const core::panicking::AssertKind::Eq; // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _433 = _423;                     // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _432 = _433;                     // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _435 = _424;                     // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _434 = _435;                     // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _436 = Option::<Arguments<'_>>::None; // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _430 = core::panicking::assert_failed::<bool, bool>(move _431, move _432, move _434, move _436); // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb109: {
        _440 = core::f64::<impl f64>::is_normal(const -1f64) -> bb110; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_normal}, val: Value(<ZST>) }
    }

    bb110: {
        _439 = nop::<bool>(move _440) -> bb111; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb111: {
        _438 = &_439;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _442 = nop::<bool>(const true) -> bb112; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb112: {
        _441 = &_442;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _437 = (move _438, move _441);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _443 = (_437.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _444 = (_437.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _447 = (*_443);                  // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _448 = (*_444);                  // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _446 = Eq(move _447, move _448); // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _445 = Not(move _446);           // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _445) -> [0: bb114, otherwise: bb113]; // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb113: {
        _449 = const core::panicking::AssertKind::Eq; // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _451 = const core::panicking::AssertKind::Eq; // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _453 = _443;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _452 = _453;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _455 = _444;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _454 = _455;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _456 = Option::<Arguments<'_>>::None; // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _450 = core::panicking::assert_failed::<bool, bool>(move _451, move _452, move _454, move _456); // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb114: {
        _460 = core::f64::<impl f64>::is_sign_positive(const -1f64) -> bb115; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb115: {
        _459 = nop::<bool>(move _460) -> bb116; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb116: {
        _458 = &_459;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _462 = nop::<bool>(const false) -> bb117; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb117: {
        _461 = &_462;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _457 = (move _458, move _461);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _463 = (_457.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _464 = (_457.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _467 = (*_463);                  // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _468 = (*_464);                  // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _466 = Eq(move _467, move _468); // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _465 = Not(move _466);           // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _465) -> [0: bb119, otherwise: bb118]; // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb118: {
        _469 = const core::panicking::AssertKind::Eq; // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _471 = const core::panicking::AssertKind::Eq; // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _473 = _463;                     // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _472 = _473;                     // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _475 = _464;                     // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _474 = _475;                     // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _476 = Option::<Arguments<'_>>::None; // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _470 = core::panicking::assert_failed::<bool, bool>(move _471, move _472, move _474, move _476); // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb119: {
        _480 = core::f64::<impl f64>::is_sign_negative(const -1f64) -> bb120; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb120: {
        _479 = nop::<bool>(move _480) -> bb121; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb121: {
        _478 = &_479;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _482 = nop::<bool>(const true) -> bb122; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb122: {
        _481 = &_482;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _477 = (move _478, move _481);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _483 = (_477.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _484 = (_477.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _487 = (*_483);                  // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _488 = (*_484);                  // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _486 = Eq(move _487, move _488); // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _485 = Not(move _486);           // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _485) -> [0: bb124, otherwise: bb123]; // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb123: {
        _489 = const core::panicking::AssertKind::Eq; // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _491 = const core::panicking::AssertKind::Eq; // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _493 = _483;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _492 = _493;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _495 = _484;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _494 = _495;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _496 = Option::<Arguments<'_>>::None; // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _490 = core::panicking::assert_failed::<bool, bool>(move _491, move _492, move _494, move _496); // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb124: {
        _500 = core::f64::<impl f64>::is_nan(const 0f64) -> bb125; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb125: {
        _499 = nop::<bool>(move _500) -> bb126; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb126: {
        _498 = &_499;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _502 = nop::<bool>(const false) -> bb127; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb127: {
        _501 = &_502;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _497 = (move _498, move _501);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _503 = (_497.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _504 = (_497.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _507 = (*_503);                  // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _508 = (*_504);                  // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _506 = Eq(move _507, move _508); // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _505 = Not(move _506);           // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _505) -> [0: bb129, otherwise: bb128]; // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb128: {
        _509 = const core::panicking::AssertKind::Eq; // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _511 = const core::panicking::AssertKind::Eq; // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _513 = _503;                     // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _512 = _513;                     // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _515 = _504;                     // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _514 = _515;                     // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _516 = Option::<Arguments<'_>>::None; // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _510 = core::panicking::assert_failed::<bool, bool>(move _511, move _512, move _514, move _516); // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb129: {
        _520 = core::f64::<impl f64>::is_infinite(const 0f64) -> bb130; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_infinite}, val: Value(<ZST>) }
    }

    bb130: {
        _519 = nop::<bool>(move _520) -> bb131; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb131: {
        _518 = &_519;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _522 = nop::<bool>(const false) -> bb132; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb132: {
        _521 = &_522;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _517 = (move _518, move _521);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _523 = (_517.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _524 = (_517.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _527 = (*_523);                  // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _528 = (*_524);                  // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _526 = Eq(move _527, move _528); // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _525 = Not(move _526);           // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _525) -> [0: bb134, otherwise: bb133]; // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb133: {
        _529 = const core::panicking::AssertKind::Eq; // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _531 = const core::panicking::AssertKind::Eq; // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _533 = _523;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _532 = _533;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _535 = _524;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _534 = _535;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _536 = Option::<Arguments<'_>>::None; // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _530 = core::panicking::assert_failed::<bool, bool>(move _531, move _532, move _534, move _536); // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb134: {
        _540 = core::f64::<impl f64>::is_finite(const 0f64) -> bb135; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_finite}, val: Value(<ZST>) }
    }

    bb135: {
        _539 = nop::<bool>(move _540) -> bb136; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb136: {
        _538 = &_539;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _542 = nop::<bool>(const true) -> bb137; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb137: {
        _541 = &_542;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _537 = (move _538, move _541);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _543 = (_537.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _544 = (_537.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _547 = (*_543);                  // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _548 = (*_544);                  // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _546 = Eq(move _547, move _548); // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _545 = Not(move _546);           // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _545) -> [0: bb139, otherwise: bb138]; // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb138: {
        _549 = const core::panicking::AssertKind::Eq; // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _551 = const core::panicking::AssertKind::Eq; // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _553 = _543;                     // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _552 = _553;                     // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _555 = _544;                     // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _554 = _555;                     // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _556 = Option::<Arguments<'_>>::None; // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _550 = core::panicking::assert_failed::<bool, bool>(move _551, move _552, move _554, move _556); // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb139: {
        _560 = core::f64::<impl f64>::is_normal(const 0f64) -> bb140; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_normal}, val: Value(<ZST>) }
    }

    bb140: {
        _559 = nop::<bool>(move _560) -> bb141; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb141: {
        _558 = &_559;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _562 = nop::<bool>(const false) -> bb142; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb142: {
        _561 = &_562;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _557 = (move _558, move _561);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _563 = (_557.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _564 = (_557.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _567 = (*_563);                  // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _568 = (*_564);                  // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _566 = Eq(move _567, move _568); // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _565 = Not(move _566);           // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _565) -> [0: bb144, otherwise: bb143]; // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb143: {
        _569 = const core::panicking::AssertKind::Eq; // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _571 = const core::panicking::AssertKind::Eq; // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _573 = _563;                     // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _572 = _573;                     // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _575 = _564;                     // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _574 = _575;                     // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _576 = Option::<Arguments<'_>>::None; // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _570 = core::panicking::assert_failed::<bool, bool>(move _571, move _572, move _574, move _576); // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb144: {
        _580 = core::f64::<impl f64>::is_sign_positive(const 0f64) -> bb145; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb145: {
        _579 = nop::<bool>(move _580) -> bb146; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb146: {
        _578 = &_579;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _582 = nop::<bool>(const true) -> bb147; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb147: {
        _581 = &_582;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _577 = (move _578, move _581);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _583 = (_577.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _584 = (_577.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _587 = (*_583);                  // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _588 = (*_584);                  // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _586 = Eq(move _587, move _588); // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _585 = Not(move _586);           // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _585) -> [0: bb149, otherwise: bb148]; // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb148: {
        _589 = const core::panicking::AssertKind::Eq; // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _591 = const core::panicking::AssertKind::Eq; // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _593 = _583;                     // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _592 = _593;                     // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _595 = _584;                     // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _594 = _595;                     // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _596 = Option::<Arguments<'_>>::None; // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _590 = core::panicking::assert_failed::<bool, bool>(move _591, move _592, move _594, move _596); // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb149: {
        _600 = core::f64::<impl f64>::is_sign_negative(const 0f64) -> bb150; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb150: {
        _599 = nop::<bool>(move _600) -> bb151; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb151: {
        _598 = &_599;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _602 = nop::<bool>(const false) -> bb152; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb152: {
        _601 = &_602;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _597 = (move _598, move _601);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _603 = (_597.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _604 = (_597.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _607 = (*_603);                  // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _608 = (*_604);                  // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _606 = Eq(move _607, move _608); // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _605 = Not(move _606);           // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _605) -> [0: bb154, otherwise: bb153]; // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb153: {
        _609 = const core::panicking::AssertKind::Eq; // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _611 = const core::panicking::AssertKind::Eq; // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _613 = _603;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _612 = _613;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _615 = _604;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _614 = _615;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _616 = Option::<Arguments<'_>>::None; // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _610 = core::panicking::assert_failed::<bool, bool>(move _611, move _612, move _614, move _616); // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb154: {
        _620 = core::f64::<impl f64>::is_nan(const -0f64) -> bb155; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb155: {
        _619 = nop::<bool>(move _620) -> bb156; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb156: {
        _618 = &_619;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _622 = nop::<bool>(const false) -> bb157; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb157: {
        _621 = &_622;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _617 = (move _618, move _621);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _623 = (_617.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _624 = (_617.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _627 = (*_623);                  // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _628 = (*_624);                  // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _626 = Eq(move _627, move _628); // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _625 = Not(move _626);           // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _625) -> [0: bb159, otherwise: bb158]; // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb158: {
        _629 = const core::panicking::AssertKind::Eq; // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _631 = const core::panicking::AssertKind::Eq; // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _633 = _623;                     // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _632 = _633;                     // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _635 = _624;                     // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _634 = _635;                     // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _636 = Option::<Arguments<'_>>::None; // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _630 = core::panicking::assert_failed::<bool, bool>(move _631, move _632, move _634, move _636); // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb159: {
        _640 = core::f64::<impl f64>::is_infinite(const -0f64) -> bb160; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_infinite}, val: Value(<ZST>) }
    }

    bb160: {
        _639 = nop::<bool>(move _640) -> bb161; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb161: {
        _638 = &_639;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _642 = nop::<bool>(const false) -> bb162; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb162: {
        _641 = &_642;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _637 = (move _638, move _641);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _643 = (_637.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _644 = (_637.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _647 = (*_643);                  // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _648 = (*_644);                  // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _646 = Eq(move _647, move _648); // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _645 = Not(move _646);           // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _645) -> [0: bb164, otherwise: bb163]; // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb163: {
        _649 = const core::panicking::AssertKind::Eq; // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _651 = const core::panicking::AssertKind::Eq; // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _653 = _643;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _652 = _653;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _655 = _644;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _654 = _655;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _656 = Option::<Arguments<'_>>::None; // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _650 = core::panicking::assert_failed::<bool, bool>(move _651, move _652, move _654, move _656); // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb164: {
        _660 = core::f64::<impl f64>::is_finite(const -0f64) -> bb165; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_finite}, val: Value(<ZST>) }
    }

    bb165: {
        _659 = nop::<bool>(move _660) -> bb166; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb166: {
        _658 = &_659;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _662 = nop::<bool>(const true) -> bb167; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb167: {
        _661 = &_662;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _657 = (move _658, move _661);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _663 = (_657.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _664 = (_657.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _667 = (*_663);                  // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _668 = (*_664);                  // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _666 = Eq(move _667, move _668); // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _665 = Not(move _666);           // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _665) -> [0: bb169, otherwise: bb168]; // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb168: {
        _669 = const core::panicking::AssertKind::Eq; // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _671 = const core::panicking::AssertKind::Eq; // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _673 = _663;                     // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _672 = _673;                     // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _675 = _664;                     // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _674 = _675;                     // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _676 = Option::<Arguments<'_>>::None; // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _670 = core::panicking::assert_failed::<bool, bool>(move _671, move _672, move _674, move _676); // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb169: {
        _680 = core::f64::<impl f64>::is_normal(const -0f64) -> bb170; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_normal}, val: Value(<ZST>) }
    }

    bb170: {
        _679 = nop::<bool>(move _680) -> bb171; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb171: {
        _678 = &_679;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _682 = nop::<bool>(const false) -> bb172; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb172: {
        _681 = &_682;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _677 = (move _678, move _681);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _683 = (_677.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _684 = (_677.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _687 = (*_683);                  // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _688 = (*_684);                  // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _686 = Eq(move _687, move _688); // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _685 = Not(move _686);           // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _685) -> [0: bb174, otherwise: bb173]; // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb173: {
        _689 = const core::panicking::AssertKind::Eq; // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _691 = const core::panicking::AssertKind::Eq; // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _693 = _683;                     // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _692 = _693;                     // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _695 = _684;                     // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _694 = _695;                     // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _696 = Option::<Arguments<'_>>::None; // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _690 = core::panicking::assert_failed::<bool, bool>(move _691, move _692, move _694, move _696); // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb174: {
        _700 = core::f64::<impl f64>::is_sign_positive(const -0f64) -> bb175; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb175: {
        _699 = nop::<bool>(move _700) -> bb176; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb176: {
        _698 = &_699;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _702 = nop::<bool>(const false) -> bb177; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb177: {
        _701 = &_702;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _697 = (move _698, move _701);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _703 = (_697.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _704 = (_697.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _707 = (*_703);                  // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _708 = (*_704);                  // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _706 = Eq(move _707, move _708); // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _705 = Not(move _706);           // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _705) -> [0: bb179, otherwise: bb178]; // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb178: {
        _709 = const core::panicking::AssertKind::Eq; // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _711 = const core::panicking::AssertKind::Eq; // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _713 = _703;                     // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _712 = _713;                     // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _715 = _704;                     // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _714 = _715;                     // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _716 = Option::<Arguments<'_>>::None; // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _710 = core::panicking::assert_failed::<bool, bool>(move _711, move _712, move _714, move _716); // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb179: {
        _720 = core::f64::<impl f64>::is_sign_negative(const -0f64) -> bb180; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb180: {
        _719 = nop::<bool>(move _720) -> bb181; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb181: {
        _718 = &_719;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _722 = nop::<bool>(const true) -> bb182; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb182: {
        _721 = &_722;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _717 = (move _718, move _721);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _723 = (_717.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _724 = (_717.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _727 = (*_723);                  // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _728 = (*_724);                  // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _726 = Eq(move _727, move _728); // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _725 = Not(move _726);           // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _725) -> [0: bb184, otherwise: bb183]; // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb183: {
        _729 = const core::panicking::AssertKind::Eq; // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _731 = const core::panicking::AssertKind::Eq; // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _733 = _723;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _732 = _733;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _735 = _724;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _734 = _735;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _736 = Option::<Arguments<'_>>::None; // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _730 = core::panicking::assert_failed::<bool, bool>(move _731, move _732, move _734, move _736); // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb184: {
        _741 = const +Inff64;            // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        _740 = core::f64::<impl f64>::is_nan(move _741) -> bb185; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb185: {
        _739 = nop::<bool>(move _740) -> bb186; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb186: {
        _738 = &_739;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _743 = nop::<bool>(const false) -> bb187; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb187: {
        _742 = &_743;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _737 = (move _738, move _742);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _744 = (_737.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _745 = (_737.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _748 = (*_744);                  // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _749 = (*_745);                  // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _747 = Eq(move _748, move _749); // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _746 = Not(move _747);           // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _746) -> [0: bb189, otherwise: bb188]; // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb188: {
        _750 = const core::panicking::AssertKind::Eq; // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _752 = const core::panicking::AssertKind::Eq; // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _754 = _744;                     // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _753 = _754;                     // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _756 = _745;                     // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _755 = _756;                     // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _757 = Option::<Arguments<'_>>::None; // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _751 = core::panicking::assert_failed::<bool, bool>(move _752, move _753, move _755, move _757); // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb189: {
        _762 = const +Inff64;            // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        _761 = core::f64::<impl f64>::is_infinite(move _762) -> bb190; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_infinite}, val: Value(<ZST>) }
    }

    bb190: {
        _760 = nop::<bool>(move _761) -> bb191; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb191: {
        _759 = &_760;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _764 = nop::<bool>(const true) -> bb192; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb192: {
        _763 = &_764;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _758 = (move _759, move _763);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _765 = (_758.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _766 = (_758.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _769 = (*_765);                  // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _770 = (*_766);                  // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _768 = Eq(move _769, move _770); // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _767 = Not(move _768);           // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _767) -> [0: bb194, otherwise: bb193]; // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb193: {
        _771 = const core::panicking::AssertKind::Eq; // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _773 = const core::panicking::AssertKind::Eq; // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _775 = _765;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _774 = _775;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _777 = _766;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _776 = _777;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _778 = Option::<Arguments<'_>>::None; // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _772 = core::panicking::assert_failed::<bool, bool>(move _773, move _774, move _776, move _778); // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb194: {
        _783 = const +Inff64;            // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        _782 = core::f64::<impl f64>::is_finite(move _783) -> bb195; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_finite}, val: Value(<ZST>) }
    }

    bb195: {
        _781 = nop::<bool>(move _782) -> bb196; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb196: {
        _780 = &_781;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _785 = nop::<bool>(const false) -> bb197; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb197: {
        _784 = &_785;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _779 = (move _780, move _784);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _786 = (_779.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _787 = (_779.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _790 = (*_786);                  // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _791 = (*_787);                  // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _789 = Eq(move _790, move _791); // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _788 = Not(move _789);           // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _788) -> [0: bb199, otherwise: bb198]; // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb198: {
        _792 = const core::panicking::AssertKind::Eq; // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _794 = const core::panicking::AssertKind::Eq; // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _796 = _786;                     // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _795 = _796;                     // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _798 = _787;                     // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _797 = _798;                     // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _799 = Option::<Arguments<'_>>::None; // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _793 = core::panicking::assert_failed::<bool, bool>(move _794, move _795, move _797, move _799); // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb199: {
        _804 = const +Inff64;            // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        _803 = core::f64::<impl f64>::is_normal(move _804) -> bb200; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_normal}, val: Value(<ZST>) }
    }

    bb200: {
        _802 = nop::<bool>(move _803) -> bb201; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb201: {
        _801 = &_802;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _806 = nop::<bool>(const false) -> bb202; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb202: {
        _805 = &_806;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _800 = (move _801, move _805);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _807 = (_800.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _808 = (_800.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _811 = (*_807);                  // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _812 = (*_808);                  // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _810 = Eq(move _811, move _812); // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _809 = Not(move _810);           // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _809) -> [0: bb204, otherwise: bb203]; // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb203: {
        _813 = const core::panicking::AssertKind::Eq; // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _815 = const core::panicking::AssertKind::Eq; // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _817 = _807;                     // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _816 = _817;                     // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _819 = _808;                     // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _818 = _819;                     // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _820 = Option::<Arguments<'_>>::None; // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _814 = core::panicking::assert_failed::<bool, bool>(move _815, move _816, move _818, move _820); // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb204: {
        _825 = const +Inff64;            // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        _824 = core::f64::<impl f64>::is_sign_positive(move _825) -> bb205; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb205: {
        _823 = nop::<bool>(move _824) -> bb206; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb206: {
        _822 = &_823;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _827 = nop::<bool>(const true) -> bb207; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb207: {
        _826 = &_827;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _821 = (move _822, move _826);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _828 = (_821.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _829 = (_821.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _832 = (*_828);                  // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _833 = (*_829);                  // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _831 = Eq(move _832, move _833); // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _830 = Not(move _831);           // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _830) -> [0: bb209, otherwise: bb208]; // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb208: {
        _834 = const core::panicking::AssertKind::Eq; // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _836 = const core::panicking::AssertKind::Eq; // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _838 = _828;                     // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _837 = _838;                     // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _840 = _829;                     // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _839 = _840;                     // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _841 = Option::<Arguments<'_>>::None; // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _835 = core::panicking::assert_failed::<bool, bool>(move _836, move _837, move _839, move _841); // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb209: {
        _846 = const +Inff64;            // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        _845 = core::f64::<impl f64>::is_sign_negative(move _846) -> bb210; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb210: {
        _844 = nop::<bool>(move _845) -> bb211; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb211: {
        _843 = &_844;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _848 = nop::<bool>(const false) -> bb212; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb212: {
        _847 = &_848;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _842 = (move _843, move _847);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _849 = (_842.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _850 = (_842.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _853 = (*_849);                  // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _854 = (*_850);                  // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _852 = Eq(move _853, move _854); // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _851 = Not(move _852);           // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _851) -> [0: bb214, otherwise: bb213]; // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb213: {
        _855 = const core::panicking::AssertKind::Eq; // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _857 = const core::panicking::AssertKind::Eq; // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _859 = _849;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _858 = _859;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _861 = _850;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _860 = _861;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _862 = Option::<Arguments<'_>>::None; // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _856 = core::panicking::assert_failed::<bool, bool>(move _857, move _858, move _860, move _862); // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb214: {
        _867 = const -Inff64;            // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        _866 = core::f64::<impl f64>::is_nan(move _867) -> bb215; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb215: {
        _865 = nop::<bool>(move _866) -> bb216; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb216: {
        _864 = &_865;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _869 = nop::<bool>(const false) -> bb217; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb217: {
        _868 = &_869;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _863 = (move _864, move _868);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _870 = (_863.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _871 = (_863.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _874 = (*_870);                  // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _875 = (*_871);                  // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _873 = Eq(move _874, move _875); // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _872 = Not(move _873);           // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _872) -> [0: bb219, otherwise: bb218]; // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb218: {
        _876 = const core::panicking::AssertKind::Eq; // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _878 = const core::panicking::AssertKind::Eq; // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _880 = _870;                     // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _879 = _880;                     // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _882 = _871;                     // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _881 = _882;                     // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _883 = Option::<Arguments<'_>>::None; // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _877 = core::panicking::assert_failed::<bool, bool>(move _878, move _879, move _881, move _883); // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb219: {
        _888 = const -Inff64;            // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        _887 = core::f64::<impl f64>::is_infinite(move _888) -> bb220; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_infinite}, val: Value(<ZST>) }
    }

    bb220: {
        _886 = nop::<bool>(move _887) -> bb221; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb221: {
        _885 = &_886;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _890 = nop::<bool>(const true) -> bb222; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb222: {
        _889 = &_890;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _884 = (move _885, move _889);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _891 = (_884.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _892 = (_884.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _895 = (*_891);                  // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _896 = (*_892);                  // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _894 = Eq(move _895, move _896); // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _893 = Not(move _894);           // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _893) -> [0: bb224, otherwise: bb223]; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb223: {
        _897 = const core::panicking::AssertKind::Eq; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _899 = const core::panicking::AssertKind::Eq; // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _901 = _891;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _900 = _901;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _903 = _892;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _902 = _903;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _904 = Option::<Arguments<'_>>::None; // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _898 = core::panicking::assert_failed::<bool, bool>(move _899, move _900, move _902, move _904); // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb224: {
        _909 = const -Inff64;            // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        _908 = core::f64::<impl f64>::is_finite(move _909) -> bb225; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_finite}, val: Value(<ZST>) }
    }

    bb225: {
        _907 = nop::<bool>(move _908) -> bb226; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb226: {
        _906 = &_907;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _911 = nop::<bool>(const false) -> bb227; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb227: {
        _910 = &_911;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _905 = (move _906, move _910);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _912 = (_905.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _913 = (_905.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _916 = (*_912);                  // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _917 = (*_913);                  // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _915 = Eq(move _916, move _917); // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _914 = Not(move _915);           // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _914) -> [0: bb229, otherwise: bb228]; // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb228: {
        _918 = const core::panicking::AssertKind::Eq; // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _920 = const core::panicking::AssertKind::Eq; // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _922 = _912;                     // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _921 = _922;                     // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _924 = _913;                     // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _923 = _924;                     // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _925 = Option::<Arguments<'_>>::None; // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _919 = core::panicking::assert_failed::<bool, bool>(move _920, move _921, move _923, move _925); // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb229: {
        _930 = const -Inff64;            // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        _929 = core::f64::<impl f64>::is_normal(move _930) -> bb230; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_normal}, val: Value(<ZST>) }
    }

    bb230: {
        _928 = nop::<bool>(move _929) -> bb231; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb231: {
        _927 = &_928;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _932 = nop::<bool>(const false) -> bb232; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb232: {
        _931 = &_932;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _926 = (move _927, move _931);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _933 = (_926.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _934 = (_926.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _937 = (*_933);                  // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _938 = (*_934);                  // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _936 = Eq(move _937, move _938); // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _935 = Not(move _936);           // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _935) -> [0: bb234, otherwise: bb233]; // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb233: {
        _939 = const core::panicking::AssertKind::Eq; // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _941 = const core::panicking::AssertKind::Eq; // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _943 = _933;                     // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _942 = _943;                     // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _945 = _934;                     // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _944 = _945;                     // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _946 = Option::<Arguments<'_>>::None; // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _940 = core::panicking::assert_failed::<bool, bool>(move _941, move _942, move _944, move _946); // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb234: {
        _951 = const -Inff64;            // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        _950 = core::f64::<impl f64>::is_sign_positive(move _951) -> bb235; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb235: {
        _949 = nop::<bool>(move _950) -> bb236; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb236: {
        _948 = &_949;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _953 = nop::<bool>(const false) -> bb237; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb237: {
        _952 = &_953;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _947 = (move _948, move _952);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _954 = (_947.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _955 = (_947.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _958 = (*_954);                  // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _959 = (*_955);                  // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _957 = Eq(move _958, move _959); // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _956 = Not(move _957);           // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _956) -> [0: bb239, otherwise: bb238]; // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb238: {
        _960 = const core::panicking::AssertKind::Eq; // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _962 = const core::panicking::AssertKind::Eq; // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _964 = _954;                     // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _963 = _964;                     // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _966 = _955;                     // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _965 = _966;                     // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _967 = Option::<Arguments<'_>>::None; // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _961 = core::panicking::assert_failed::<bool, bool>(move _962, move _963, move _965, move _967); // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb239: {
        _972 = const -Inff64;            // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        _971 = core::f64::<impl f64>::is_sign_negative(move _972) -> bb240; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb240: {
        _970 = nop::<bool>(move _971) -> bb241; // scope 0 at ui/consts/const-float-classify.rs:15:24: 15:31
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:24: 15:27
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb241: {
        _969 = &_970;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _974 = nop::<bool>(const true) -> bb242; // scope 0 at ui/consts/const-float-classify.rs:15:33: 15:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:15:33: 15:36
                                         // + literal: Const { ty: fn(bool) -> bool {nop::<bool>}, val: Value(<ZST>) }
    }

    bb242: {
        _973 = &_974;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _968 = (move _969, move _973);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _975 = (_968.0: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _976 = (_968.1: &bool);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _979 = (*_975);                  // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _980 = (*_976);                  // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _978 = Eq(move _979, move _980); // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _977 = Not(move _978);           // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _977) -> [0: bb244, otherwise: bb243]; // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb243: {
        _981 = const core::panicking::AssertKind::Eq; // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _983 = const core::panicking::AssertKind::Eq; // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _985 = _975;                     // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _984 = _985;                     // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _987 = _976;                     // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _986 = _987;                     // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _988 = Option::<Arguments<'_>>::None; // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _982 = core::panicking::assert_failed::<bool, bool>(move _983, move _984, move _986, move _988); // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb244: {
        return;                          // scope 0 at ui/consts/const-float-classify.rs:28:10: 28:10
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        _4 = Div(const -0f64, const 0f64); // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_nan(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f64::is_nan(-0.0 / 0.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        _4 = Div(const -0f64, const 0f64); // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_infinite(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_infinite}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f64::is_infinite(-0.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        _4 = Div(const -0f64, const 0f64); // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_finite(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_finite}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f64::is_finite(-0.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        _4 = Div(const -0f64, const 0f64); // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_normal(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_normal}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f64::is_normal(-0.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: &bool;                   // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let _4: bool;                        // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _5: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
    let mut _6: &NonDet;                 // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let _7: NonDet;                      // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let mut _8: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _9: &NonDet;                 // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let mut _10: &bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _10 = const _;                   // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:31: 40:40
                                         // + literal: Const { ty: &bool, val: Unevaluated(f64::_, [], Some(promoted[1])) }
        _3 = &(*_10);                    // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_6);                 // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        _9 = const _;                    // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:42: 40:46
                                         // + literal: Const { ty: &NonDet, val: Unevaluated(f64::_, [], Some(promoted[0])) }
        _6 = &(*_9);                     // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        _2 = <bool as PartialEq<NonDet>>::eq(move _3, move _6) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:35: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a bool, &'b NonDet) -> bool {<bool as PartialEq<NonDet>>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_6);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_8);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _8 = core::panicking::panic(const "assertion failed: f64::is_sign_positive(-0.0 / 0.0) == NonDet"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

promoted[0] in f64::_: &NonDet = {
    let mut _0: &NonDet;                 // return place in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let mut _1: NonDet;                  // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46

    bb0: {
        _1 = NonDet;                     // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        _0 = &_1;                        // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        return;                          // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    }
}

promoted[1] in f64::_: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _2: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16

    bb0: {
        _2 = Div(const -0f64, const 0f64); // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        _1 = core::f64::<impl f64>::is_sign_positive(move _2) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        return;                          // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: &bool;                   // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let _4: bool;                        // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _5: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
    let mut _6: &NonDet;                 // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let _7: NonDet;                      // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let mut _8: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _9: &NonDet;                 // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let mut _10: &bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _10 = const _;                   // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:31: 40:40
                                         // + literal: Const { ty: &bool, val: Unevaluated(f64::_, [], Some(promoted[1])) }
        _3 = &(*_10);                    // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_6);                 // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        _9 = const _;                    // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:42: 40:46
                                         // + literal: Const { ty: &NonDet, val: Unevaluated(f64::_, [], Some(promoted[0])) }
        _6 = &(*_9);                     // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        _2 = <bool as PartialEq<NonDet>>::eq(move _3, move _6) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:35: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a bool, &'b NonDet) -> bool {<bool as PartialEq<NonDet>>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_6);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_8);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _8 = core::panicking::panic(const "assertion failed: f64::is_sign_negative(-0.0 / 0.0) == NonDet"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

promoted[0] in f64::_: &NonDet = {
    let mut _0: &NonDet;                 // return place in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let mut _1: NonDet;                  // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46

    bb0: {
        _1 = NonDet;                     // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        _0 = &_1;                        // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        return;                          // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    }
}

promoted[1] in f64::_: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _2: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16

    bb0: {
        _2 = Div(const -0f64, const 0f64); // scope 0 at ui/consts/const-float-classify.rs:65:6: 65:16
        _1 = core::f64::<impl f64>::is_sign_negative(move _2) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        return;                          // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        _4 = Div(const 0f64, const 0f64); // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_nan(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f64::is_nan(0.0 / 0.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        _4 = Div(const 0f64, const 0f64); // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_infinite(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_infinite}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f64::is_infinite(0.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        _4 = Div(const 0f64, const 0f64); // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_finite(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_finite}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f64::is_finite(0.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        _4 = Div(const 0f64, const 0f64); // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_normal(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_normal}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f64::is_normal(0.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: &bool;                   // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let _4: bool;                        // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _5: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
    let mut _6: &NonDet;                 // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let _7: NonDet;                      // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let mut _8: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _9: &NonDet;                 // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let mut _10: &bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _10 = const _;                   // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:31: 40:40
                                         // + literal: Const { ty: &bool, val: Unevaluated(f64::_, [], Some(promoted[1])) }
        _3 = &(*_10);                    // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_6);                 // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        _9 = const _;                    // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:42: 40:46
                                         // + literal: Const { ty: &NonDet, val: Unevaluated(f64::_, [], Some(promoted[0])) }
        _6 = &(*_9);                     // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        _2 = <bool as PartialEq<NonDet>>::eq(move _3, move _6) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:35: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a bool, &'b NonDet) -> bool {<bool as PartialEq<NonDet>>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_6);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_8);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _8 = core::panicking::panic(const "assertion failed: f64::is_sign_positive(0.0 / 0.0) == NonDet"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

promoted[0] in f64::_: &NonDet = {
    let mut _0: &NonDet;                 // return place in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let mut _1: NonDet;                  // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46

    bb0: {
        _1 = NonDet;                     // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        _0 = &_1;                        // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        return;                          // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    }
}

promoted[1] in f64::_: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _2: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16

    bb0: {
        _2 = Div(const 0f64, const 0f64); // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        _1 = core::f64::<impl f64>::is_sign_positive(move _2) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        return;                          // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: &bool;                   // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let _4: bool;                        // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _5: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
    let mut _6: &NonDet;                 // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let _7: NonDet;                      // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let mut _8: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _9: &NonDet;                 // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let mut _10: &bool;                  // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _10 = const _;                   // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:31: 40:40
                                         // + literal: Const { ty: &bool, val: Unevaluated(f64::_, [], Some(promoted[1])) }
        _3 = &(*_10);                    // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_6);                 // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        _9 = const _;                    // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:42: 40:46
                                         // + literal: Const { ty: &NonDet, val: Unevaluated(f64::_, [], Some(promoted[0])) }
        _6 = &(*_9);                     // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        _2 = <bool as PartialEq<NonDet>>::eq(move _3, move _6) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:35: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a bool, &'b NonDet) -> bool {<bool as PartialEq<NonDet>>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_6);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_8);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _8 = core::panicking::panic(const "assertion failed: f64::is_sign_negative(0.0 / 0.0) == NonDet"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

promoted[0] in f64::_: &NonDet = {
    let mut _0: &NonDet;                 // return place in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    let mut _1: NonDet;                  // in scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46

    bb0: {
        _1 = NonDet;                     // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        _0 = &_1;                        // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
        return;                          // scope 0 at ui/consts/const-float-classify.rs:40:42: 40:46
    }
}

promoted[1] in f64::_: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _2: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16

    bb0: {
        _2 = Div(const 0f64, const 0f64); // scope 0 at ui/consts/const-float-classify.rs:66:7: 66:16
        _1 = core::f64::<impl f64>::is_sign_negative(move _2) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        return;                          // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_nan(const 1f64) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f64::is_nan(1.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_infinite(const 1f64) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_infinite}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f64::is_infinite(1.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_finite(const 1f64) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_finite}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f64::is_finite(1.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_normal(const 1f64) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_normal}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f64::is_normal(1.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_sign_positive(const 1f64) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f64::is_sign_positive(1.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_sign_negative(const 1f64) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f64::is_sign_negative(1.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_nan(const -1f64) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f64::is_nan(-1.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_infinite(const -1f64) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_infinite}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f64::is_infinite(-1.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_finite(const -1f64) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_finite}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f64::is_finite(-1.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_normal(const -1f64) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_normal}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f64::is_normal(-1.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_sign_positive(const -1f64) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f64::is_sign_positive(-1.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_sign_negative(const -1f64) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f64::is_sign_negative(-1.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_nan(const 0f64) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f64::is_nan(0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_infinite(const 0f64) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_infinite}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f64::is_infinite(0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_finite(const 0f64) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_finite}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f64::is_finite(0.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_normal(const 0f64) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_normal}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f64::is_normal(0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_sign_positive(const 0f64) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f64::is_sign_positive(0.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_sign_negative(const 0f64) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f64::is_sign_negative(0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_nan(const -0f64) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f64::is_nan(-0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_infinite(const -0f64) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_infinite}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f64::is_infinite(-0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_finite(const -0f64) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_finite}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f64::is_finite(-0.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_normal(const -0f64) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_normal}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f64::is_normal(-0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_sign_positive(const -0f64) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f64::is_sign_positive(-0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_sign_negative(const -0f64) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _4 = core::panicking::panic(const "assertion failed: f64::is_sign_negative(-0.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        _4 = Div(const 1f64, const 0f64); // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_nan(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f64::is_nan(1.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        _4 = Div(const 1f64, const 0f64); // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_infinite(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_infinite}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f64::is_infinite(1.0 / 0.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        _4 = Div(const 1f64, const 0f64); // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_finite(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_finite}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f64::is_finite(1.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        _4 = Div(const 1f64, const 0f64); // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_normal(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_normal}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f64::is_normal(1.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        _4 = Div(const 1f64, const 0f64); // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_sign_positive(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f64::is_sign_positive(1.0 / 0.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        _4 = Div(const 1f64, const 0f64); // scope 0 at ui/consts/const-float-classify.rs:71:7: 71:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_sign_negative(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f64::is_sign_negative(1.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        _4 = Div(const -1f64, const 0f64); // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_nan(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_nan}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f64::is_nan(-1.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        _4 = Div(const -1f64, const 0f64); // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_infinite(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_infinite}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f64::is_infinite(-1.0 / 0.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        _4 = Div(const -1f64, const 0f64); // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_finite(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_finite}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f64::is_finite(-1.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        _4 = Div(const -1f64, const 0f64); // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_normal(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_normal}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f64::is_normal(-1.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        _4 = Div(const -1f64, const 0f64); // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_sign_positive(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_positive}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const false);   // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f64::is_sign_positive(-1.0 / 0.0) == false"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

const f64::_: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:14:22: 14:24
    let mut _1: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    let mut _2: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
    let mut _3: bool;                    // in scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
    let mut _4: f64;                     // in scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
    let mut _5: !;                       // in scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageLive(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageLive(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        StorageLive(_4);                 // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        _4 = Div(const -1f64, const 0f64); // scope 0 at ui/consts/const-float-classify.rs:72:6: 72:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
        _3 = core::f64::<impl f64>::is_sign_negative(move _4) -> bb1; // scope 0 at ui/consts/const-float-classify.rs:40:31: 40:40
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:40:26: 40:34
                                         // + literal: Const { ty: fn(f64) -> bool {core::f64::<impl f64>::is_sign_negative}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/consts/const-float-classify.rs:40:39: 40:40
        _2 = Eq(move _3, const true);    // scope 0 at ui/consts/const-float-classify.rs:14:35: 40:46
        StorageDead(_3);                 // scope 0 at ui/consts/const-float-classify.rs:40:45: 40:46
        _1 = Not(move _2);               // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        StorageDead(_2);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
    }

    bb2: {
        StorageLive(_5);                 // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        ConstEvalCounter;                // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
        _5 = core::panicking::panic(const "assertion failed: f64::is_sign_negative(-1.0 / 0.0) == true"); // scope 0 at ui/consts/const-float-classify.rs:14:27: 14:44
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:14:27: 14:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const ();                   // scope 0 at ui/consts/const-float-classify.rs:14:44: 14:44
        StorageDead(_1);                 // scope 0 at ui/consts/const-float-classify.rs:14:43: 14:44
        return;                          // scope 0 at ui/consts/const-float-classify.rs:14:13: 14:45
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-float-classify.rs:75:11: 75:11
    let _1: ();                          // in scope 0 at ui/consts/const-float-classify.rs:76:5: 76:10
    let _2: ();                          // in scope 0 at ui/consts/const-float-classify.rs:77:5: 77:10

    bb0: {
        _1 = f32() -> bb1;               // scope 0 at ui/consts/const-float-classify.rs:76:5: 76:10
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:76:5: 76:8
                                         // + literal: Const { ty: fn() {f32}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = f64() -> bb2;               // scope 0 at ui/consts/const-float-classify.rs:77:5: 77:10
                                         // mir::Constant
                                         // + span: ui/consts/const-float-classify.rs:77:5: 77:8
                                         // + literal: Const { ty: fn() {f64}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/consts/const-float-classify.rs:78:2: 78:2
    }
}
