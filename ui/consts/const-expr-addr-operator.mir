// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let _4: &i32;
    let _5: &i32;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: i32;
    let mut _9: i32;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: &u32;
    let mut _14: &i32;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }

    bb0: {
        _14 = const _;
        _13 = const _;
        switchInt((*_13)) -> [22: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = const 1_i32;
        goto -> bb3;
    }

    bb2: {
        _3 = const 0_i32;
        goto -> bb3;
    }

    bb3: {
        _2 = &_3;
        _1 = (_14, move _2);
        _4 = (_1.0: &i32);
        _5 = (_1.1: &i32);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<i32, i32>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb5: {
        return;
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 22_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

const X: &u32 = {
    let mut _0: &u32;
    let _1: &u32;
    let _2: u32;
    let mut _3: &u32;

    bb0: {
        StorageLive(_1);
        _3 = const _;
        _1 = &(*_3);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in X: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 22_u32;
        _0 = &_1;
        return;
    }
}
