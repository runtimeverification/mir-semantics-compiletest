// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static X: Foo = {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Baz;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: &Foo;
    let mut _2: isize;
    let mut _3: !;
    let mut _4: &Foo;
    let mut _5: isize;
    let _6: u32;
    let mut _7: (&u32, &u32);
    let mut _8: &u32;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: u32;
    let mut _14: u32;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: !;
    let mut _19: &Foo;
    let mut _20: isize;
    let _21: u64;
    let _22: u16;
    let mut _23: (&u64, &u64);
    let mut _24: &u64;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: u64;
    let mut _30: u64;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: (&u16, &u16);
    let mut _35: &u16;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: u16;
    let mut _41: u16;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: !;
    scope 1 {
        debug s => _6;
        let _9: &u32;
        let _10: &u32;
        let mut _48: &u32;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
    }
    scope 4 {
        debug d => _21;
        debug h => _22;
        let _25: &u64;
        let _26: &u64;
        let _36: &u16;
        let _37: &u16;
        let mut _46: &u16;
        let mut _47: &u64;
        scope 5 {
            debug left_val => _25;
            debug right_val => _26;
            let _31: core::panicking::AssertKind;
            scope 6 {
                debug kind => _31;
            }
        }
        scope 7 {
            debug left_val => _36;
            debug right_val => _37;
            let _42: core::panicking::AssertKind;
            scope 8 {
                debug kind => _42;
            }
        }
    }

    bb0: {
        _1 = const {alloc1: &Foo};
        _2 = discriminant((*_1));
        switchInt(move _2) -> [1: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb2: {
        _4 = const {alloc2: &Foo};
        _5 = discriminant((*_4));
        switchInt(move _5) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _18 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb4: {
        _6 = (((*_4) as Bar).0: u32);
        _8 = &_6;
        _48 = const _;
        _7 = (move _8, _48);
        _9 = (_7.0: &u32);
        _10 = (_7.1: &u32);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<u32, u32>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb6: {
        _19 = const {alloc3: &Foo};
        _20 = discriminant((*_19));
        switchInt(move _20) -> [2: bb8, otherwise: bb7];
    }

    bb7: {
        _45 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb8: {
        _21 = (((*_19) as Quux).0: u64);
        _22 = (((*_19) as Quux).1: u16);
        _24 = &_21;
        _47 = const _;
        _23 = (move _24, _47);
        _25 = (_23.0: &u64);
        _26 = (_23.1: &u64);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<u64, u64>(move _31, _25, _26, move _33) -> unwind continue;
    }

    bb10: {
        _35 = &_22;
        _46 = const _;
        _34 = (move _35, _46);
        _36 = (_34.0: &u16);
        _37 = (_34.1: &u16);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<u16, u16>(move _42, _36, _37, move _44) -> unwind continue;
    }

    bb12: {
        return;
    }
}

alloc3 (static: Z, size: 16, align: 8) {
    02 00 34 12 __ __ __ __ f0 de bc 9a 78 56 34 12 │ ..4.░░░░....xV4.
}

alloc2 (static: Y, size: 16, align: 8) {
    00 00 __ __ b9 79 37 9e __ __ __ __ __ __ __ __ │ ..░░.y7.░░░░░░░░
}

alloc1 (static: X, size: 16, align: 8) {
    01 00 __ __ __ __ __ __ __ __ __ __ __ __ __ __ │ ..░░░░░░░░░░░░░░
}

promoted[0] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 4660_u16;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const 1311768467463790320_u64;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 2654435769_u32;
        _0 = &_1;
        return;
    }
}

static Y: Foo = {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Bar(const 2654435769_u32);
        return;
    }
}

static Z: Foo = {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Quux(const 1311768467463790320_u64, const 4660_u16);
        return;
    }
}

fn Foo::Bar(_1: u32) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Bar(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo::Bar(_1: u32) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Bar(move _1);
        return;
    }
}

fn Foo::Quux(_1: u64, _2: u16) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Quux(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Foo::Quux(_1: u64, _2: u16) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Quux(move _1, move _2);
        return;
    }
}
