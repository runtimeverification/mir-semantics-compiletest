// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const U8_MAX_HALF: u8 = {
    let mut _0: u8;
    let mut _1: u8;
    let mut _2: bool;

    bb0: {
        StorageLive(_1);
        _1 = Not(const 0_u8);
        _2 = Eq(const 2_u8, const 0_u8);
        assert(!move _2, "attempt to divide `{}` by zero", _1) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Div(move _1, const 2_u8);
        StorageDead(_1);
        return;
    }
}

const U16_MAX_HALF: u16 = {
    let mut _0: u16;
    let mut _1: u16;
    let mut _2: bool;

    bb0: {
        StorageLive(_1);
        _1 = Not(const 0_u16);
        _2 = Eq(const 2_u16, const 0_u16);
        assert(!move _2, "attempt to divide `{}` by zero", _1) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Div(move _1, const 2_u16);
        StorageDead(_1);
        return;
    }
}

const U32_MAX_HALF: u32 = {
    let mut _0: u32;
    let mut _1: u32;
    let mut _2: bool;

    bb0: {
        StorageLive(_1);
        _1 = Not(const 0_u32);
        _2 = Eq(const 2_u32, const 0_u32);
        assert(!move _2, "attempt to divide `{}` by zero", _1) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Div(move _1, const 2_u32);
        StorageDead(_1);
        return;
    }
}

const U64_MAX_HALF: u64 = {
    let mut _0: u64;
    let mut _1: u64;
    let mut _2: bool;

    bb0: {
        StorageLive(_1);
        _1 = Not(const 0_u64);
        _2 = Eq(const 2_u64, const 0_u64);
        assert(!move _2, "attempt to divide `{}` by zero", _1) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Div(move _1, const 2_u64);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u8, &u8);
    let _2: &u8;
    let _3: &u8;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: u8;
    let mut _7: u8;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&u16, &u16);
    let _12: &u16;
    let _13: &u16;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: u16;
    let mut _17: u16;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&u32, &u32);
    let _22: &u32;
    let _23: &u32;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: u32;
    let mut _27: u32;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&u64, &u64);
    let _32: &u64;
    let _33: &u64;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: u64;
    let mut _37: u64;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: &u64;
    let mut _42: &u64;
    let mut _43: &u32;
    let mut _44: &u32;
    let mut _45: &u16;
    let mut _46: &u16;
    let mut _47: &u8;
    let mut _48: &u8;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _12;
        debug right_val => _13;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 6 {
            debug kind => _28;
        }
    }
    scope 7 {
        debug left_val => _32;
        debug right_val => _33;
        let _38: core::panicking::AssertKind;
        scope 8 {
            debug kind => _38;
        }
    }

    bb0: {
        _48 = const _;
        _47 = const _;
        _1 = (_48, _47);
        _2 = (_1.0: &u8);
        _3 = (_1.1: &u8);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<u8, u8>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        _46 = const _;
        _45 = const _;
        _11 = (_46, _45);
        _12 = (_11.0: &u16);
        _13 = (_11.1: &u16);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<u16, u16>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb4: {
        _44 = const _;
        _43 = const _;
        _21 = (_44, _43);
        _22 = (_21.0: &u32);
        _23 = (_21.1: &u32);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<u32, u32>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb6: {
        _42 = const _;
        _41 = const _;
        _31 = (_42, _41);
        _32 = (_31.0: &u64);
        _33 = (_31.1: &u64);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<u64, u64>(move _38, _32, _33, move _40) -> unwind continue;
    }

    bb8: {
        return;
    }
}

promoted[0] in main: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const 9223372036854775807_u64;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 2147483647_u32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 32767_u16;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 127_u8;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}
