// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/packed_pattern.rs:3:10: 3:19>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/packed_pattern.rs:3:10: 3:19
    debug other => _2;                   // in scope 0 at ui/consts/packed_pattern.rs:3:10: 3:19
    let mut _0: bool;                    // return place in scope 0 at ui/consts/packed_pattern.rs:3:10: 3:19
    let mut _3: &(i64, u32, u32, u32);   // in scope 0 at ui/consts/packed_pattern.rs:6:5: 6:32
    let _4: (i64, u32, u32, u32);        // in scope 0 at ui/consts/packed_pattern.rs:6:5: 6:32
    let mut _5: &(i64, u32, u32, u32);   // in scope 0 at ui/consts/packed_pattern.rs:6:5: 6:32
    let _6: (i64, u32, u32, u32);        // in scope 0 at ui/consts/packed_pattern.rs:6:5: 6:32

    bb0: {
        _4 = ((*_1).0: (i64, u32, u32, u32)); // scope 0 at ui/consts/packed_pattern.rs:6:5: 6:32
        _3 = &_4;                        // scope 0 at ui/consts/packed_pattern.rs:6:5: 6:32
        _6 = ((*_2).0: (i64, u32, u32, u32)); // scope 0 at ui/consts/packed_pattern.rs:6:5: 6:32
        _5 = &_6;                        // scope 0 at ui/consts/packed_pattern.rs:6:5: 6:32
        _0 = <(i64, u32, u32, u32) as PartialEq>::eq(move _3, move _5) -> bb1; // scope 0 at ui/consts/packed_pattern.rs:6:5: 6:32
                                         // mir::Constant
                                         // + span: ui/consts/packed_pattern.rs:6:5: 6:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (i64, u32, u32, u32), &'b (i64, u32, u32, u32)) -> bool {<(i64, u32, u32, u32) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/packed_pattern.rs:3:19: 3:19
    }
}

fn <impl at ui/consts/packed_pattern.rs:3:21: 3:23>::assert_receiver_is_total_eq(_1: &Foo) -> () {
    debug self => _1;                    // in scope 0 at ui/consts/packed_pattern.rs:3:21: 3:23
    let mut _0: ();                      // return place in scope 0 at ui/consts/packed_pattern.rs:3:21: 3:23
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/consts/packed_pattern.rs:3:23: 3:23
    }
}

fn <impl at ui/consts/packed_pattern.rs:3:31: 3:36>::clone(_1: &Foo) -> Foo {
    debug self => _1;                    // in scope 0 at ui/consts/packed_pattern.rs:3:31: 3:36
    let mut _0: Foo;                     // return place in scope 0 at ui/consts/packed_pattern.rs:3:31: 3:36
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/consts/packed_pattern.rs:3:31: 3:36
        return;                          // scope 0 at ui/consts/packed_pattern.rs:3:36: 3:36
    }
}

const FOO: Foo = {
    let mut _0: Foo;                     // return place in scope 0 at ui/consts/packed_pattern.rs:9:12: 9:15
    let mut _1: (i64, u32, u32, u32);    // in scope 0 at ui/consts/packed_pattern.rs:10:12: 10:24

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/packed_pattern.rs:10:12: 10:24
        _1 = (const 5_i64, const 6_u32, const 7_u32, const 8_u32); // scope 0 at ui/consts/packed_pattern.rs:10:12: 10:24
        _0 = Foo { field: move _1 };     // scope 0 at ui/consts/packed_pattern.rs:9:18: 11:2
        StorageDead(_1);                 // scope 0 at ui/consts/packed_pattern.rs:11:1: 11:2
        return;                          // scope 0 at ui/consts/packed_pattern.rs:9:1: 11:3
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/packed_pattern.rs:13:11: 13:11

    bb0: {
        return;                          // scope 0 at ui/consts/packed_pattern.rs:19:2: 19:2
    }
}
