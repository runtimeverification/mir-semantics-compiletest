// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const-struct.rs:7:10: 7:15>::fmt(_1: &foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &isize;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &isize;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &&isize;
    let _13: &isize;

    bb0: {
        _3 = const "foo";
        _4 = const "a";
        _6 = &((*_1).0: isize);
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = const "b";
        _9 = &((*_1).1: isize);
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _10 = const "c";
        _13 = &((*_1).2: isize);
        _12 = &_13;
        _11 = _12 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/consts/const-struct.rs:10:1: 10:28>::eq(_1: &foo, _2: &foo) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: isize;
    let mut _6: isize;
    let mut _7: bool;
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;

    bb0: {
        _5 = ((*_1).0: isize);
        _6 = ((*_2).0: isize);
        _4 = Eq(move _5, move _6);
        switchInt(move _4) -> [0: bb4, otherwise: bb5];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _11 = ((*_1).2: isize);
        _12 = ((*_2).2: isize);
        _10 = Eq(move _11, move _12);
        _0 = move _10;
        goto -> bb3;
    }

    bb3: {
        return;
    }

    bb4: {
        _3 = const false;
        goto -> bb6;
    }

    bb5: {
        _8 = ((*_1).1: isize);
        _9 = ((*_2).1: isize);
        _7 = Eq(move _8, move _9);
        _3 = move _7;
        goto -> bb6;
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2];
    }
}

fn <impl at ui/consts/const-struct.rs:10:1: 10:28>::ne(_1: &foo, _2: &foo) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;

    bb0: {
        _3 = <foo as PartialEq>::eq(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Not(move _3);
        return;
    }
}

const x: foo = {
    let mut _0: foo;

    bb0: {
        _0 = foo { a: const 1_isize, b: const 2_isize, c: const 3_isize };
        return;
    }
}

const y: foo = {
    let mut _0: foo;

    bb0: {
        _0 = foo { a: const 1_isize, b: const 2_isize, c: const 3_isize };
        return;
    }
}

const z: &foo = {
    let mut _0: &foo;
    let _1: &foo;
    let _2: foo;
    let mut _3: &foo;

    bb0: {
        StorageLive(_1);
        _3 = const _;
        _1 = &(*_3);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in z: &foo = {
    let mut _0: &foo;
    let mut _1: foo;

    bb0: {
        _1 = foo { a: const 10_isize, b: const 22_isize, c: const 12_isize };
        _0 = &_1;
        return;
    }
}

const w: foo = {
    let mut _0: foo;
    let mut _1: foo;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        _0 = foo { a: const 5_isize, b: (_1.1: isize), c: (_1.2: isize) };
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let mut _2: &isize;
    let _3: &isize;
    let _4: &isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: isize;
    let mut _8: isize;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _12: (&foo, &foo);
    let _13: &foo;
    let _14: &foo;
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: (&isize, &isize);
    let mut _21: &isize;
    let _22: &foo;
    let _23: &isize;
    let _24: &isize;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: isize;
    let mut _28: isize;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: (&isize, &isize);
    let mut _33: &isize;
    let _34: &isize;
    let _35: &isize;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: isize;
    let mut _39: isize;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&isize, &isize);
    let mut _44: &isize;
    let _45: &isize;
    let _46: &isize;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: isize;
    let mut _50: isize;
    let _52: !;
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>;
    let _54: ();
    let mut _55: std::fmt::Arguments<'_>;
    let mut _56: &[&str];
    let mut _57: &[core::fmt::rt::Argument<'_>];
    let _58: &[core::fmt::rt::Argument<'_>; 1];
    let _59: [core::fmt::rt::Argument<'_>; 1];
    let mut _60: core::fmt::rt::Argument<'_>;
    let _61: &isize;
    let mut _62: &[core::fmt::rt::Placeholder];
    let _63: &[core::fmt::rt::Placeholder; 1];
    let _64: [core::fmt::rt::Placeholder; 1];
    let mut _65: core::fmt::rt::Placeholder;
    let mut _66: core::fmt::rt::Alignment;
    let mut _67: core::fmt::rt::Count;
    let mut _68: core::fmt::rt::Count;
    let mut _69: core::fmt::rt::UnsafeArg;
    let _70: ();
    let mut _71: std::fmt::Arguments<'_>;
    let mut _72: &[&str];
    let mut _73: &[core::fmt::rt::Argument<'_>];
    let _74: &[core::fmt::rt::Argument<'_>; 1];
    let _75: [core::fmt::rt::Argument<'_>; 1];
    let mut _76: core::fmt::rt::Argument<'_>;
    let _77: &isize;
    let _78: &foo;
    let mut _79: &[core::fmt::rt::Placeholder];
    let _80: &[core::fmt::rt::Placeholder; 1];
    let _81: [core::fmt::rt::Placeholder; 1];
    let mut _82: core::fmt::rt::Placeholder;
    let mut _83: core::fmt::rt::Alignment;
    let mut _84: core::fmt::rt::Count;
    let mut _85: core::fmt::rt::Count;
    let mut _86: core::fmt::rt::UnsafeArg;
    let mut _87: &[&str; 2];
    let mut _88: &foo;
    let mut _89: &[&str; 2];
    let mut _90: &isize;
    let mut _91: &foo;
    let mut _92: &isize;
    let mut _93: &foo;
    let mut _94: &isize;
    let mut _95: &foo;
    let mut _96: &foo;
    let mut _97: &isize;
    let mut _98: &foo;
    scope 1 {
        debug left_val => _3;
        debug right_val => _4;
        let _9: core::panicking::AssertKind;
        scope 2 {
            debug kind => _9;
        }
    }
    scope 3 {
        debug left_val => _13;
        debug right_val => _14;
        let _17: core::panicking::AssertKind;
        scope 4 {
            debug kind => _17;
        }
    }
    scope 5 {
        debug left_val => _23;
        debug right_val => _24;
        let _29: core::panicking::AssertKind;
        scope 6 {
            debug kind => _29;
        }
    }
    scope 7 {
        debug left_val => _34;
        debug right_val => _35;
        let _40: core::panicking::AssertKind;
        scope 8 {
            debug kind => _40;
        }
    }
    scope 9 {
        debug left_val => _45;
        debug right_val => _46;
        let _51: core::panicking::AssertKind;
        scope 10 {
            debug kind => _51;
        }
    }
    scope 11 {
    }
    scope 12 {
    }

    bb0: {
        _98 = const _;
        _2 = &((*_98).1: isize);
        _97 = const _;
        _1 = (move _2, _97);
        _3 = (_1.0: &isize);
        _4 = (_1.1: &isize);
        _7 = (*_3);
        _8 = (*_4);
        _6 = Eq(move _7, move _8);
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<isize, isize>(move _9, _3, _4, move _11) -> unwind continue;
    }

    bb2: {
        _96 = const _;
        _95 = const _;
        _12 = (_96, _95);
        _13 = (_12.0: &foo);
        _14 = (_12.1: &foo);
        _16 = <foo as PartialEq>::eq(_13, _14) -> [return: bb3, unwind continue];
    }

    bb3: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<foo, foo>(move _17, _13, _14, move _19) -> unwind continue;
    }

    bb5: {
        _22 = const _;
        _21 = &((*_22).1: isize);
        _94 = const _;
        _20 = (move _21, _94);
        _23 = (_20.0: &isize);
        _24 = (_20.1: &isize);
        _27 = (*_23);
        _28 = (*_24);
        _26 = Eq(move _27, move _28);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<isize, isize>(move _29, _23, _24, move _31) -> unwind continue;
    }

    bb7: {
        _93 = const _;
        _33 = &((*_93).0: isize);
        _92 = const _;
        _32 = (move _33, _92);
        _34 = (_32.0: &isize);
        _35 = (_32.1: &isize);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<isize, isize>(move _40, _34, _35, move _42) -> unwind continue;
    }

    bb9: {
        _91 = const _;
        _44 = &((*_91).2: isize);
        _90 = const _;
        _43 = (move _44, _90);
        _45 = (_43.0: &isize);
        _46 = (_43.1: &isize);
        _49 = (*_45);
        _50 = (*_46);
        _48 = Eq(move _49, move _50);
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _51 = core::panicking::AssertKind::Eq;
        _53 = Option::<Arguments<'_>>::None;
        _52 = core::panicking::assert_failed::<isize, isize>(move _51, _45, _46, move _53) -> unwind continue;
    }

    bb11: {
        _89 = const _;
        _56 = _89 as &[&str] (Pointer(Unsize));
        _88 = const _;
        _61 = &((*_88).1: isize);
        _60 = core::fmt::rt::Argument::<'_>::new_lower_hex::<isize>(_61) -> [return: bb12, unwind continue];
    }

    bb12: {
        _59 = [move _60];
        _58 = &_59;
        _57 = _58 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _66 = core::fmt::rt::Alignment::Unknown;
        _67 = core::fmt::rt::Count::Implied;
        _68 = core::fmt::rt::Count::Implied;
        _65 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _66, const 4_u32, move _67, move _68) -> [return: bb13, unwind continue];
    }

    bb13: {
        _64 = [move _65];
        _63 = &_64;
        _62 = _63 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _69 = core::fmt::rt::UnsafeArg::new() -> [return: bb14, unwind continue];
    }

    bb14: {
        _55 = Arguments::<'_>::new_v1_formatted(move _56, move _57, move _62, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb15, unwind continue];
    }

    bb15: {
        _54 = _print(move _55) -> [return: bb16, unwind continue];
    }

    bb16: {
        _87 = const _;
        _72 = _87 as &[&str] (Pointer(Unsize));
        _78 = const _;
        _77 = &((*_78).2: isize);
        _76 = core::fmt::rt::Argument::<'_>::new_lower_hex::<isize>(_77) -> [return: bb17, unwind continue];
    }

    bb17: {
        _75 = [move _76];
        _74 = &_75;
        _73 = _74 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _83 = core::fmt::rt::Alignment::Unknown;
        _84 = core::fmt::rt::Count::Implied;
        _85 = core::fmt::rt::Count::Implied;
        _82 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _83, const 4_u32, move _84, move _85) -> [return: bb18, unwind continue];
    }

    bb18: {
        _81 = [move _82];
        _80 = &_81;
        _79 = _80 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _86 = core::fmt::rt::UnsafeArg::new() -> [return: bb19, unwind continue];
    }

    bb19: {
        _71 = Arguments::<'_>::new_v1_formatted(move _72, move _73, move _79, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb20, unwind continue];
    }

    bb20: {
        _70 = _print(move _71) -> [return: bb21, unwind continue];
    }

    bb21: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &foo = {
    let mut _0: &foo;
    let mut _1: foo;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &foo = {
    let mut _0: &foo;
    let mut _1: foo;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 5_isize;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &foo = {
    let mut _0: &foo;
    let mut _1: foo;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 22_isize;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &foo = {
    let mut _0: &foo;
    let mut _1: foo;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &foo = {
    let mut _0: &foo;
    let mut _1: foo;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &foo = {
    let mut _0: &foo;
    let mut _1: foo;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}
