// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/issue-37222.rs:3:10: 3:15>::fmt(_1: &Bar, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/consts/issue-37222.rs:3:10: 3:15
    debug f => _2;                       // in scope 0 at ui/consts/issue-37222.rs:3:10: 3:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/consts/issue-37222.rs:3:10: 3:15
    let mut _3: isize;                   // in scope 0 at ui/consts/issue-37222.rs:3:10: 3:15
    let _4: &i64;                        // in scope 0 at ui/consts/issue-37222.rs:5:7: 5:10
    let mut _5: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/consts/issue-37222.rs:3:10: 3:15
    let mut _6: &str;                    // in scope 0 at ui/consts/issue-37222.rs:3:10: 3:15
    let _7: &str;                        // in scope 0 at ui/consts/issue-37222.rs:3:10: 3:15
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/consts/issue-37222.rs:5:7: 5:10
    let mut _9: &&i64;                   // in scope 0 at ui/consts/issue-37222.rs:5:7: 5:10
    let _10: &&i64;                      // in scope 0 at ui/consts/issue-37222.rs:5:7: 5:10
    let _11: &i32;                       // in scope 0 at ui/consts/issue-37222.rs:6:7: 6:10
    let mut _12: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/consts/issue-37222.rs:3:10: 3:15
    let mut _13: &str;                   // in scope 0 at ui/consts/issue-37222.rs:3:10: 3:15
    let _14: &str;                       // in scope 0 at ui/consts/issue-37222.rs:3:10: 3:15
    let mut _15: &dyn std::fmt::Debug;   // in scope 0 at ui/consts/issue-37222.rs:6:7: 6:10
    let mut _16: &&i32;                  // in scope 0 at ui/consts/issue-37222.rs:6:7: 6:10
    let _17: &&i32;                      // in scope 0 at ui/consts/issue-37222.rs:6:7: 6:10
    let mut _18: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/consts/issue-37222.rs:3:10: 3:15
    let mut _19: &str;                   // in scope 0 at ui/consts/issue-37222.rs:3:10: 3:15
    let _20: &str;                       // in scope 0 at ui/consts/issue-37222.rs:3:10: 3:15
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/consts/issue-37222.rs:5:7: 5:10
    }
    scope 2 {
        debug __self_0 => _11;           // in scope 2 at ui/consts/issue-37222.rs:6:7: 6:10
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/consts/issue-37222.rs:3:10: 3:15
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at ui/consts/issue-37222.rs:3:10: 3:15
    }

    bb1: {
        _18 = &mut (*_2);                // scope 0 at ui/consts/issue-37222.rs:3:10: 3:15
        _20 = const "C";                 // scope 0 at ui/consts/issue-37222.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: ui/consts/issue-37222.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _19 = _20;                       // scope 0 at ui/consts/issue-37222.rs:3:10: 3:15
        _0 = Formatter::<'_>::write_str(move _18, move _19) -> bb5; // scope 0 at ui/consts/issue-37222.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: ui/consts/issue-37222.rs:3:10: 3:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/consts/issue-37222.rs:3:10: 3:15
    }

    bb3: {
        _4 = &(((*_1) as A).0: i64);     // scope 0 at ui/consts/issue-37222.rs:5:7: 5:10
        _5 = &mut (*_2);                 // scope 1 at ui/consts/issue-37222.rs:3:10: 3:15
        _7 = const "A";                  // scope 1 at ui/consts/issue-37222.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: ui/consts/issue-37222.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 1 at ui/consts/issue-37222.rs:3:10: 3:15
        _10 = &_4;                       // scope 1 at ui/consts/issue-37222.rs:5:7: 5:10
        _9 = _10;                        // scope 1 at ui/consts/issue-37222.rs:5:7: 5:10
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/consts/issue-37222.rs:5:7: 5:10
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _5, move _6, move _8) -> bb5; // scope 1 at ui/consts/issue-37222.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: ui/consts/issue-37222.rs:3:10: 3:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &(((*_1) as B).0: i32);    // scope 0 at ui/consts/issue-37222.rs:6:7: 6:10
        _12 = &mut (*_2);                // scope 2 at ui/consts/issue-37222.rs:3:10: 3:15
        _14 = const "B";                 // scope 2 at ui/consts/issue-37222.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: ui/consts/issue-37222.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = _14;                       // scope 2 at ui/consts/issue-37222.rs:3:10: 3:15
        _17 = &_11;                      // scope 2 at ui/consts/issue-37222.rs:6:7: 6:10
        _16 = _17;                       // scope 2 at ui/consts/issue-37222.rs:6:7: 6:10
        _15 = move _16 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/consts/issue-37222.rs:6:7: 6:10
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _12, move _13, move _15) -> bb5; // scope 2 at ui/consts/issue-37222.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: ui/consts/issue-37222.rs:3:10: 3:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/consts/issue-37222.rs:3:15: 3:15
    }
}

fn <impl at ui/consts/issue-37222.rs:3:17: 3:26>::eq(_1: &Bar, _2: &Bar) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
    debug other => _2;                   // in scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
    let mut _0: bool;                    // return place in scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
    let _3: isize;                       // in scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
    let mut _4: &Bar;                    // in scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
    let mut _6: &Bar;                    // in scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
    let mut _7: bool;                    // in scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
    let mut _8: isize;                   // in scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
    let mut _9: isize;                   // in scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
    let mut _10: bool;                   // in scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
    let mut _11: (&Bar, &Bar);           // in scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
    let mut _12: &Bar;                   // in scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
    let mut _13: &Bar;                   // in scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
    let mut _14: isize;                  // in scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
    let mut _15: isize;                  // in scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
    let mut _16: isize;                  // in scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
    let mut _19: i64;                    // in scope 0 at ui/consts/issue-37222.rs:5:7: 5:10
    let mut _20: i64;                    // in scope 0 at ui/consts/issue-37222.rs:5:7: 5:10
    let mut _23: i32;                    // in scope 0 at ui/consts/issue-37222.rs:6:7: 6:10
    let mut _24: i32;                    // in scope 0 at ui/consts/issue-37222.rs:6:7: 6:10
    let mut _25: &Bar;                   // in scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
    let mut _26: &Bar;                   // in scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
    let mut _27: &Bar;                   // in scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
    let mut _28: &Bar;                   // in scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
    let mut _29: &Bar;                   // in scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
    let mut _30: &Bar;                   // in scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
    let mut _31: &Bar;                   // in scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/consts/issue-37222.rs:3:17: 3:26
        let _5: isize;                   // in scope 1 at ui/consts/issue-37222.rs:3:17: 3:26
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/consts/issue-37222.rs:3:17: 3:26
            let _17: &i64;               // in scope 2 at ui/consts/issue-37222.rs:5:7: 5:10
            let _18: &i64;               // in scope 2 at ui/consts/issue-37222.rs:5:7: 5:10
            let _21: &i32;               // in scope 2 at ui/consts/issue-37222.rs:6:7: 6:10
            let _22: &i32;               // in scope 2 at ui/consts/issue-37222.rs:6:7: 6:10
            scope 3 {
                debug __self_0 => _17;   // in scope 3 at ui/consts/issue-37222.rs:5:7: 5:10
                debug __arg1_0 => _18;   // in scope 3 at ui/consts/issue-37222.rs:5:7: 5:10
            }
            scope 4 {
                debug __self_0 => _21;   // in scope 4 at ui/consts/issue-37222.rs:6:7: 6:10
                debug __arg1_0 => _22;   // in scope 4 at ui/consts/issue-37222.rs:6:7: 6:10
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
        _3 = discriminant((*_4));        // scope 0 at ui/consts/issue-37222.rs:3:17: 3:26
        _6 = _2;                         // scope 1 at ui/consts/issue-37222.rs:3:17: 3:26
        _5 = discriminant((*_6));        // scope 1 at ui/consts/issue-37222.rs:3:17: 3:26
        _8 = _3;                         // scope 2 at ui/consts/issue-37222.rs:3:17: 3:26
        _9 = _5;                         // scope 2 at ui/consts/issue-37222.rs:3:17: 3:26
        _7 = Eq(move _8, move _9);       // scope 2 at ui/consts/issue-37222.rs:3:17: 3:26
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/consts/issue-37222.rs:3:17: 3:26
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/consts/issue-37222.rs:3:17: 3:26
        goto -> bb3;                     // scope 2 at ui/consts/issue-37222.rs:3:17: 3:26
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/consts/issue-37222.rs:3:17: 3:26
        _13 = _2;                        // scope 2 at ui/consts/issue-37222.rs:3:17: 3:26
        _11 = (move _12, move _13);      // scope 2 at ui/consts/issue-37222.rs:3:17: 3:26
        _25 = deref_copy (_11.0: &Bar);  // scope 2 at ui/consts/issue-37222.rs:3:17: 3:26
        _16 = discriminant((*_25));      // scope 2 at ui/consts/issue-37222.rs:3:17: 3:26
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 2 at ui/consts/issue-37222.rs:3:17: 3:26
    }

    bb3: {
        return;                          // scope 0 at ui/consts/issue-37222.rs:3:26: 3:26
    }

    bb4: {
        _26 = deref_copy (_11.1: &Bar);  // scope 2 at ui/consts/issue-37222.rs:3:17: 3:26
        _14 = discriminant((*_26));      // scope 2 at ui/consts/issue-37222.rs:3:17: 3:26
        switchInt(move _14) -> [0: bb7, otherwise: bb5]; // scope 2 at ui/consts/issue-37222.rs:3:17: 3:26
    }

    bb5: {
        _10 = const true;                // scope 2 at ui/consts/issue-37222.rs:3:17: 3:26
        goto -> bb9;                     // scope 2 at ui/consts/issue-37222.rs:3:17: 3:26
    }

    bb6: {
        _27 = deref_copy (_11.1: &Bar);  // scope 2 at ui/consts/issue-37222.rs:3:17: 3:26
        _15 = discriminant((*_27));      // scope 2 at ui/consts/issue-37222.rs:3:17: 3:26
        switchInt(move _15) -> [1: bb8, otherwise: bb5]; // scope 2 at ui/consts/issue-37222.rs:3:17: 3:26
    }

    bb7: {
        _28 = deref_copy (_11.0: &Bar);  // scope 2 at ui/consts/issue-37222.rs:5:7: 5:10
        _17 = &(((*_28) as A).0: i64);   // scope 2 at ui/consts/issue-37222.rs:5:7: 5:10
        _29 = deref_copy (_11.1: &Bar);  // scope 2 at ui/consts/issue-37222.rs:5:7: 5:10
        _18 = &(((*_29) as A).0: i64);   // scope 2 at ui/consts/issue-37222.rs:5:7: 5:10
        _19 = (*_17);                    // scope 3 at ui/consts/issue-37222.rs:5:7: 5:10
        _20 = (*_18);                    // scope 3 at ui/consts/issue-37222.rs:5:7: 5:10
        _10 = Eq(move _19, move _20);    // scope 3 at ui/consts/issue-37222.rs:5:7: 5:10
        goto -> bb9;                     // scope 2 at ui/consts/issue-37222.rs:3:25: 3:26
    }

    bb8: {
        _30 = deref_copy (_11.0: &Bar);  // scope 2 at ui/consts/issue-37222.rs:6:7: 6:10
        _21 = &(((*_30) as B).0: i32);   // scope 2 at ui/consts/issue-37222.rs:6:7: 6:10
        _31 = deref_copy (_11.1: &Bar);  // scope 2 at ui/consts/issue-37222.rs:6:7: 6:10
        _22 = &(((*_31) as B).0: i32);   // scope 2 at ui/consts/issue-37222.rs:6:7: 6:10
        _23 = (*_21);                    // scope 4 at ui/consts/issue-37222.rs:6:7: 6:10
        _24 = (*_22);                    // scope 4 at ui/consts/issue-37222.rs:6:7: 6:10
        _10 = Eq(move _23, move _24);    // scope 4 at ui/consts/issue-37222.rs:6:7: 6:10
        goto -> bb9;                     // scope 2 at ui/consts/issue-37222.rs:3:25: 3:26
    }

    bb9: {
        _0 = move _10;                   // scope 2 at ui/consts/issue-37222.rs:3:17: 3:26
        goto -> bb3;                     // scope 2 at ui/consts/issue-37222.rs:3:17: 3:26
    }
}

fn <impl at ui/consts/issue-37222.rs:10:10: 10:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/consts/issue-37222.rs:10:10: 10:15
    debug f => _2;                       // in scope 0 at ui/consts/issue-37222.rs:10:10: 10:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/consts/issue-37222.rs:10:10: 10:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/consts/issue-37222.rs:10:10: 10:15
    let mut _4: &str;                    // in scope 0 at ui/consts/issue-37222.rs:10:10: 10:15
    let _5: &str;                        // in scope 0 at ui/consts/issue-37222.rs:10:10: 10:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/consts/issue-37222.rs:11:12: 11:15
    let mut _7: &Bar;                    // in scope 0 at ui/consts/issue-37222.rs:11:12: 11:15
    let _8: &Bar;                        // in scope 0 at ui/consts/issue-37222.rs:11:12: 11:15
    let mut _9: &dyn std::fmt::Debug;    // in scope 0 at ui/consts/issue-37222.rs:11:17: 11:19
    let mut _10: &&u8;                   // in scope 0 at ui/consts/issue-37222.rs:11:17: 11:19
    let _11: &&u8;                       // in scope 0 at ui/consts/issue-37222.rs:11:17: 11:19
    let _12: &u8;                        // in scope 0 at ui/consts/issue-37222.rs:11:17: 11:19

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/consts/issue-37222.rs:10:10: 10:15
        _5 = const "Foo";                // scope 0 at ui/consts/issue-37222.rs:10:10: 10:15
                                         // mir::Constant
                                         // + span: ui/consts/issue-37222.rs:10:10: 10:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/consts/issue-37222.rs:10:10: 10:15
        _8 = &((*_1).0: Bar);            // scope 0 at ui/consts/issue-37222.rs:11:12: 11:15
        _7 = _8;                         // scope 0 at ui/consts/issue-37222.rs:11:12: 11:15
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/consts/issue-37222.rs:11:12: 11:15
        _12 = &((*_1).1: u8);            // scope 0 at ui/consts/issue-37222.rs:11:17: 11:19
        _11 = &_12;                      // scope 0 at ui/consts/issue-37222.rs:11:17: 11:19
        _10 = _11;                       // scope 0 at ui/consts/issue-37222.rs:11:17: 11:19
        _9 = move _10 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/consts/issue-37222.rs:11:17: 11:19
        _0 = Formatter::<'_>::debug_tuple_field2_finish(move _3, move _4, move _6, move _9) -> bb1; // scope 0 at ui/consts/issue-37222.rs:10:10: 10:15
                                         // mir::Constant
                                         // + span: ui/consts/issue-37222.rs:10:10: 10:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c), &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/issue-37222.rs:10:15: 10:15
    }
}

fn <impl at ui/consts/issue-37222.rs:10:17: 10:26>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/issue-37222.rs:10:17: 10:26
    debug other => _2;                   // in scope 0 at ui/consts/issue-37222.rs:10:17: 10:26
    let mut _0: bool;                    // return place in scope 0 at ui/consts/issue-37222.rs:10:17: 10:26
    let mut _3: bool;                    // in scope 0 at ui/consts/issue-37222.rs:11:12: 11:15
    let mut _4: &Bar;                    // in scope 0 at ui/consts/issue-37222.rs:11:12: 11:15
    let mut _5: &Bar;                    // in scope 0 at ui/consts/issue-37222.rs:11:12: 11:15
    let mut _6: bool;                    // in scope 0 at ui/consts/issue-37222.rs:11:17: 11:19
    let mut _7: u8;                      // in scope 0 at ui/consts/issue-37222.rs:11:17: 11:19
    let mut _8: u8;                      // in scope 0 at ui/consts/issue-37222.rs:11:17: 11:19

    bb0: {
        _4 = &((*_1).0: Bar);            // scope 0 at ui/consts/issue-37222.rs:11:12: 11:15
        _5 = &((*_2).0: Bar);            // scope 0 at ui/consts/issue-37222.rs:11:12: 11:15
        _3 = <Bar as PartialEq>::eq(move _4, move _5) -> bb4; // scope 0 at ui/consts/issue-37222.rs:11:12: 11:15
                                         // mir::Constant
                                         // + span: ui/consts/issue-37222.rs:11:12: 11:15
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Bar, &'b Bar) -> bool {<Bar as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/consts/issue-37222.rs:11:17: 11:19
        goto -> bb3;                     // scope 0 at ui/consts/issue-37222.rs:11:17: 11:19
    }

    bb2: {
        _7 = ((*_1).1: u8);              // scope 0 at ui/consts/issue-37222.rs:11:17: 11:19
        _8 = ((*_2).1: u8);              // scope 0 at ui/consts/issue-37222.rs:11:17: 11:19
        _6 = Eq(move _7, move _8);       // scope 0 at ui/consts/issue-37222.rs:11:17: 11:19
        _0 = move _6;                    // scope 0 at ui/consts/issue-37222.rs:11:17: 11:19
        goto -> bb3;                     // scope 0 at ui/consts/issue-37222.rs:11:17: 11:19
    }

    bb3: {
        return;                          // scope 0 at ui/consts/issue-37222.rs:10:26: 10:26
    }

    bb4: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/consts/issue-37222.rs:11:17: 11:19
    }
}

static FOO: [Foo; 2] = {
    let mut _0: [Foo; 2];                // return place in scope 0 at ui/consts/issue-37222.rs:13:13: 13:21
    let mut _1: Foo;                     // in scope 0 at ui/consts/issue-37222.rs:13:25: 13:39
    let mut _2: Bar;                     // in scope 0 at ui/consts/issue-37222.rs:13:29: 13:35
    let mut _3: Foo;                     // in scope 0 at ui/consts/issue-37222.rs:13:41: 13:58
    let mut _4: Bar;                     // in scope 0 at ui/consts/issue-37222.rs:13:45: 13:51

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/issue-37222.rs:13:25: 13:39
        StorageLive(_2);                 // scope 0 at ui/consts/issue-37222.rs:13:29: 13:35
        _2 = Bar::C;                     // scope 0 at ui/consts/issue-37222.rs:13:29: 13:35
        _1 = Foo(move _2, const 0_u8);   // scope 0 at ui/consts/issue-37222.rs:13:25: 13:39
        StorageDead(_2);                 // scope 0 at ui/consts/issue-37222.rs:13:38: 13:39
        StorageLive(_3);                 // scope 0 at ui/consts/issue-37222.rs:13:41: 13:58
        StorageLive(_4);                 // scope 0 at ui/consts/issue-37222.rs:13:45: 13:51
        _4 = Bar::C;                     // scope 0 at ui/consts/issue-37222.rs:13:45: 13:51
        _3 = Foo(move _4, const u8::MAX); // scope 0 at ui/consts/issue-37222.rs:13:41: 13:58
        StorageDead(_4);                 // scope 0 at ui/consts/issue-37222.rs:13:57: 13:58
        _0 = [move _1, move _3];         // scope 0 at ui/consts/issue-37222.rs:13:24: 13:59
        StorageDead(_3);                 // scope 0 at ui/consts/issue-37222.rs:13:58: 13:59
        StorageDead(_1);                 // scope 0 at ui/consts/issue-37222.rs:13:58: 13:59
        return;                          // scope 0 at ui/consts/issue-37222.rs:13:1: 13:60
    }
}

FOO::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/issue-37222.rs:13:19: 13:20

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/consts/issue-37222.rs:13:19: 13:20
        return;                          // scope 0 at ui/consts/issue-37222.rs:13:19: 13:20
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-37222.rs:15:11: 15:11
    let mut _1: (&&Foo, &&Foo);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &&Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: &Foo;                        // in scope 0 at ui/consts/issue-37222.rs:16:16: 16:23
    let _4: &[Foo; 2];                   // in scope 0 at ui/consts/issue-37222.rs:16:17: 16:20
    let _5: usize;                       // in scope 0 at ui/consts/issue-37222.rs:16:21: 16:22
    let mut _6: &&Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _7: &&Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _8: &&Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: &&Foo;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: &&Foo;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &&Foo;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &&Foo;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &&Foo;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &&Foo;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _21: &&Foo;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _7;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _8;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _13: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _13;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _4 = const {alloc1: &[Foo; 2]};  // scope 0 at ui/consts/issue-37222.rs:16:17: 16:20
                                         // mir::Constant
                                         // + span: ui/consts/issue-37222.rs:16:17: 16:20
                                         // + literal: Const { ty: &[Foo; 2], val: Value(Scalar(alloc1)) }
        _5 = const 1_usize;              // scope 0 at ui/consts/issue-37222.rs:16:21: 16:22
        _3 = &(*_4)[_5];                 // scope 0 at ui/consts/issue-37222.rs:16:16: 16:23
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _21 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&Foo, val: Unevaluated(main, [], Some(promoted[0])) }
        _6 = _21;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _6);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_1.0: &&Foo);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_1.1: &&Foo);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = _7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = _8;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = <&Foo as PartialEq>::eq(move _11, move _12) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &Foo, &'b &Foo) -> bool {<&Foo as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = Not(move _10);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _13 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<&Foo, &Foo>(move _15, move _16, move _18, move _20); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &Foo, &'b &Foo, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&Foo, &Foo>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/consts/issue-37222.rs:17:2: 17:2
    }
}

alloc1 (static: FOO, size: 48, align: 8) {
    0x00 │ 02 00 00 00 __ __ __ __ __ __ __ __ __ __ __ __ │ ....░░░░░░░░░░░░
    0x10 │ 00 __ __ __ __ __ __ __ 02 00 00 00 __ __ __ __ │ .░░░░░░░....░░░░
    0x20 │ __ __ __ __ __ __ __ __ ff __ __ __ __ __ __ __ │ ░░░░░░░░.░░░░░░░
}

promoted[0] in main: &&Foo = {
    let mut _0: &&Foo;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &Foo;                    // in scope 0 at ui/consts/issue-37222.rs:16:26: 16:44
    let mut _2: Foo;                     // in scope 0 at ui/consts/issue-37222.rs:16:27: 16:44
    let mut _3: Bar;                     // in scope 0 at ui/consts/issue-37222.rs:16:31: 16:37

    bb0: {
        _3 = Bar::C;                     // scope 0 at ui/consts/issue-37222.rs:16:31: 16:37
        _2 = Foo(move _3, const u8::MAX); // scope 0 at ui/consts/issue-37222.rs:16:27: 16:44
        _1 = &_2;                        // scope 0 at ui/consts/issue-37222.rs:16:26: 16:44
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn Bar::A(_1: i64) -> Bar {
    let mut _0: Bar;                     // return place in scope 0 at ui/consts/issue-37222.rs:5:5: 5:6

    bb0: {
        _0 = Bar::A(move _1);            // scope 0 at ui/consts/issue-37222.rs:5:5: 5:6
        return;                          // scope 0 at ui/consts/issue-37222.rs:5:5: 5:6
    }
}

// MIR FOR CTFE
fn Bar::A(_1: i64) -> Bar {
    let mut _0: Bar;                     // return place in scope 0 at ui/consts/issue-37222.rs:5:5: 5:6

    bb0: {
        _0 = Bar::A(move _1);            // scope 0 at ui/consts/issue-37222.rs:5:5: 5:6
        return;                          // scope 0 at ui/consts/issue-37222.rs:5:5: 5:6
    }
}

fn Bar::B(_1: i32) -> Bar {
    let mut _0: Bar;                     // return place in scope 0 at ui/consts/issue-37222.rs:6:5: 6:6

    bb0: {
        _0 = Bar::B(move _1);            // scope 0 at ui/consts/issue-37222.rs:6:5: 6:6
        return;                          // scope 0 at ui/consts/issue-37222.rs:6:5: 6:6
    }
}

// MIR FOR CTFE
fn Bar::B(_1: i32) -> Bar {
    let mut _0: Bar;                     // return place in scope 0 at ui/consts/issue-37222.rs:6:5: 6:6

    bb0: {
        _0 = Bar::B(move _1);            // scope 0 at ui/consts/issue-37222.rs:6:5: 6:6
        return;                          // scope 0 at ui/consts/issue-37222.rs:6:5: 6:6
    }
}

fn Foo(_1: Bar, _2: u8) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/consts/issue-37222.rs:11:1: 11:11

    bb0: {
        _0 = Foo(move _1, move _2);      // scope 0 at ui/consts/issue-37222.rs:11:1: 11:11
        return;                          // scope 0 at ui/consts/issue-37222.rs:11:1: 11:11
    }
}

// MIR FOR CTFE
fn Foo(_1: Bar, _2: u8) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/consts/issue-37222.rs:11:1: 11:11

    bb0: {
        _0 = Foo(move _1, move _2);      // scope 0 at ui/consts/issue-37222.rs:11:1: 11:11
        return;                          // scope 0 at ui/consts/issue-37222.rs:11:1: 11:11
    }
}
