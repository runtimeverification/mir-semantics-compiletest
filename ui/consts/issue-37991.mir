// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> i64 {
    let mut _0: i64;

    bb0: {
        _0 = const 3_i64;
        return;
    }
}

// MIR FOR CTFE
fn foo() -> i64 {
    let mut _0: i64;

    bb0: {
        _0 = const 3_i64;
        return;
    }
}

fn bar(_1: i64) -> i64 {
    debug x => _1;
    let mut _0: i64;

    bb0: {
        _0 = Mul(_1, const 2_i64);
        return;
    }
}

// MIR FOR CTFE
fn bar(_1: i64) -> i64 {
    debug x => _1;
    let mut _0: i64;
    let mut _2: i64;

    bb0: {
        StorageLive(_2);
        _2 = _1;
        _0 = Mul(move _2, const 2_i64);
        StorageDead(_2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: &i64;
    let _2: i64;
    let mut _3: i64;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: (&i64, &i64);
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: i64;
    let mut _14: i64;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let _19: i64;
    let mut _20: i64;
    let mut _21: i64;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: (&i64, &i64);
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: i64;
    let mut _32: i64;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug val => _1;
        let _9: &i64;
        let _10: &i64;
        let _18: &i64;
        let mut _37: &i64;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
        scope 4 {
            debug val2 => _18;
            let _27: &i64;
            let _28: &i64;
            let mut _36: &i64;
            scope 5 {
                debug left_val => _27;
                debug right_val => _28;
                let _33: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _33;
                }
            }
        }
    }

    bb0: {
        _3 = foo() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Eq(const 2_i64, const 0_i64);
        assert(!move _4, "attempt to calculate the remainder of `{}` with a divisor of zero", _3) -> [success: bb2, unwind continue];
    }

    bb2: {
        _5 = Eq(const 2_i64, const -1_i64);
        _6 = Eq(_3, const i64::MIN);
        _7 = BitAnd(move _5, move _6);
        assert(!move _7, "attempt to compute the remainder of `{} % {}`, which would overflow", _3, const 2_i64) -> [success: bb3, unwind continue];
    }

    bb3: {
        _2 = Rem(move _3, const 2_i64);
        _1 = &_2;
        _37 = const _;
        _8 = (_1, _37);
        _9 = (_8.0: &i64);
        _10 = (_8.1: &i64);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<i64, i64>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb5: {
        _21 = Add(const 1_i64, const 1_i64);
        _20 = bar(move _21) -> [return: bb6, unwind continue];
    }

    bb6: {
        _22 = Eq(const 3_i64, const 0_i64);
        assert(!move _22, "attempt to calculate the remainder of `{}` with a divisor of zero", _20) -> [success: bb7, unwind continue];
    }

    bb7: {
        _23 = Eq(const 3_i64, const -1_i64);
        _24 = Eq(_20, const i64::MIN);
        _25 = BitAnd(move _23, move _24);
        assert(!move _25, "attempt to compute the remainder of `{} % {}`, which would overflow", _20, const 3_i64) -> [success: bb8, unwind continue];
    }

    bb8: {
        _19 = Rem(move _20, const 3_i64);
        _18 = &_19;
        _36 = const _;
        _26 = (_18, _36);
        _27 = (_26.0: &i64);
        _28 = (_26.1: &i64);
        _31 = (*_27);
        _32 = (*_28);
        _30 = Eq(move _31, move _32);
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<i64, i64>(move _33, _27, _28, move _35) -> unwind continue;
    }

    bb10: {
        return;
    }
}

promoted[0] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 1_i64;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 1_i64;
        _0 = &_1;
        return;
    }
}
