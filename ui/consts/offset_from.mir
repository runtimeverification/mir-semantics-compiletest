// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const OFFSET: usize = {
    let mut _0: usize;
    let _1: std::mem::MaybeUninit<Struct>;
    let mut _3: *const std::mem::MaybeUninit<Struct>;
    let mut _4: *const std::mem::MaybeUninit<Struct>;
    let _5: &std::mem::MaybeUninit<Struct>;
    let mut _7: *const ();
    let _8: &();
    let mut _10: *const u8;
    let mut _11: *const u8;
    let mut _12: *const Struct;
    let mut _13: isize;
    scope 1 {
        debug uninit => _1;
        let _2: *const Struct;
        scope 2 {
            debug base_ptr => _2;
            let _6: *const u8;
            scope 3 {
                debug field_ptr => _6;
                let _9: isize;
                scope 5 {
                    debug offset => _9;
                }
                scope 6 {
                }
            }
            scope 4 {
            }
        }
    }

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = MaybeUninit::<Struct>::uninit() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &_1;
        _4 = &raw const (*_5);
        _3 = _4;
        _2 = move _3 as *const Struct (PtrToPtr);
        StorageDead(_3);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &((*_2).0: ());
        _7 = &raw const (*_8);
        _6 = move _7 as *const u8 (PtrToPtr);
        StorageDead(_7);
        StorageDead(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _6;
        StorageLive(_11);
        StorageLive(_12);
        _12 = _2;
        _11 = move _12 as *const u8 (PtrToPtr);
        StorageDead(_12);
        ConstEvalCounter;
        _9 = ptr::const_ptr::<impl *const u8>::offset_from(move _10, move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_13);
        _13 = _9;
        _0 = move _13 as usize (IntToInt);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const OFFSET_2: usize = {
    let mut _0: usize;
    let _1: std::mem::MaybeUninit<Struct2>;
    let mut _3: *const std::mem::MaybeUninit<Struct2>;
    let mut _4: *const std::mem::MaybeUninit<Struct2>;
    let _5: &std::mem::MaybeUninit<Struct2>;
    let _7: &u8;
    let mut _9: *const u8;
    let mut _10: *const u8;
    let mut _11: *const Struct2;
    let mut _12: isize;
    scope 1 {
        debug uninit => _1;
        let _2: *const Struct2;
        scope 2 {
            debug base_ptr => _2;
            let _6: *const u8;
            scope 3 {
                debug field_ptr => _6;
                let _8: isize;
                scope 5 {
                    debug offset => _8;
                }
                scope 6 {
                }
            }
            scope 4 {
            }
        }
    }

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = MaybeUninit::<Struct2>::uninit() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &_1;
        _4 = &raw const (*_5);
        _3 = _4;
        _2 = move _3 as *const Struct2 (PtrToPtr);
        StorageDead(_3);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_2).1: u8);
        _6 = &raw const (*_7);
        StorageDead(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _6;
        StorageLive(_10);
        StorageLive(_11);
        _11 = _2;
        _10 = move _11 as *const u8 (PtrToPtr);
        StorageDead(_11);
        ConstEvalCounter;
        _8 = ptr::const_ptr::<impl *const u8>::offset_from(move _9, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_12);
        _12 = _8;
        _0 = move _12 as usize (IntToInt);
        StorageDead(_12);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const OVERFLOW: isize = {
    let mut _0: isize;
    let _1: std::mem::MaybeUninit<Struct2>;
    let mut _3: *const std::mem::MaybeUninit<Struct2>;
    let mut _4: *const std::mem::MaybeUninit<Struct2>;
    let _5: &std::mem::MaybeUninit<Struct2>;
    let _7: &u8;
    let mut _8: *const u8;
    let mut _9: *const Struct2;
    let mut _10: *const u8;
    scope 1 {
        debug uninit => _1;
        let _2: *const Struct2;
        scope 2 {
            debug base_ptr => _2;
            let _6: *const u8;
            scope 3 {
                debug field_ptr => _6;
                scope 5 {
                }
            }
            scope 4 {
            }
        }
    }

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = MaybeUninit::<Struct2>::uninit() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &_1;
        _4 = &raw const (*_5);
        _3 = _4;
        _2 = move _3 as *const Struct2 (PtrToPtr);
        StorageDead(_3);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_2).1: u8);
        _6 = &raw const (*_7);
        StorageDead(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _2;
        _8 = move _9 as *const u8 (PtrToPtr);
        StorageDead(_9);
        StorageLive(_10);
        _10 = _6;
        ConstEvalCounter;
        _0 = ptr::const_ptr::<impl *const u8>::offset_from(move _8, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const OFFSET_EQUAL_INTS: isize = {
    let mut _0: isize;
    let _1: *const u8;
    let mut _2: *const u8;
    let mut _3: *const u8;
    scope 1 {
        debug ptr => _1;
        scope 2 {
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = const 1_usize as *const u8 (PointerFromExposedAddress);
        StorageLive(_2);
        _2 = _1;
        StorageLive(_3);
        _3 = _1;
        ConstEvalCounter;
        _0 = ptr::const_ptr::<impl *const u8>::offset_from(move _2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const OFFSET_UNSIGNED: usize = {
    let mut _0: usize;
    let _1: [char; 3];
    let mut _3: &[char];
    let mut _4: &[char; 3];
    let mut _5: *const char;
    let mut _6: *const char;
    let mut _7: *const char;
    scope 1 {
        debug a => _1;
        let _2: *const char;
        scope 2 {
            debug ptr => _2;
            scope 3 {
            }
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = [const 'a', const 'b', const 'c'];
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &_1;
        _3 = move _4 as &[char] (Pointer(Unsize));
        StorageDead(_4);
        ConstEvalCounter;
        _2 = core::slice::<impl [char]>::as_ptr(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _2;
        ConstEvalCounter;
        _5 = ptr::const_ptr::<impl *const char>::add(move _6, const 2_usize) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_7);
        _7 = _2;
        ConstEvalCounter;
        _0 = ptr::const_ptr::<impl *const char>::sub_ptr(move _5, move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let _2: &usize;
    let _3: &usize;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&usize, &usize);
    let _12: &usize;
    let _13: &usize;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: usize;
    let mut _17: usize;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&isize, &isize);
    let _22: &isize;
    let _23: &isize;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: isize;
    let mut _27: isize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&isize, &isize);
    let _32: &isize;
    let _33: &isize;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: isize;
    let mut _37: isize;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&usize, &usize);
    let _42: &usize;
    let _43: &usize;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: usize;
    let mut _47: usize;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: &usize;
    let mut _52: &usize;
    let mut _53: &isize;
    let mut _54: &isize;
    let mut _55: &isize;
    let mut _56: &isize;
    let mut _57: &usize;
    let mut _58: &usize;
    let mut _59: &usize;
    let mut _60: &usize;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _12;
        debug right_val => _13;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 6 {
            debug kind => _28;
        }
    }
    scope 7 {
        debug left_val => _32;
        debug right_val => _33;
        let _38: core::panicking::AssertKind;
        scope 8 {
            debug kind => _38;
        }
    }
    scope 9 {
        debug left_val => _42;
        debug right_val => _43;
        let _48: core::panicking::AssertKind;
        scope 10 {
            debug kind => _48;
        }
    }

    bb0: {
        _60 = const _;
        _59 = const _;
        _1 = (_60, _59);
        _2 = (_1.0: &usize);
        _3 = (_1.1: &usize);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<usize, usize>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        _58 = const _;
        _57 = const _;
        _11 = (_58, _57);
        _12 = (_11.0: &usize);
        _13 = (_11.1: &usize);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<usize, usize>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb4: {
        _56 = const _;
        _55 = const _;
        _21 = (_56, _55);
        _22 = (_21.0: &isize);
        _23 = (_21.1: &isize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<isize, isize>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb6: {
        _54 = const _;
        _53 = const _;
        _31 = (_54, _53);
        _32 = (_31.0: &isize);
        _33 = (_31.1: &isize);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<isize, isize>(move _38, _32, _33, move _40) -> unwind continue;
    }

    bb8: {
        _52 = const _;
        _51 = const _;
        _41 = (_52, _51);
        _42 = (_41.0: &usize);
        _43 = (_41.1: &usize);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<usize, usize>(move _48, _42, _43, move _50) -> unwind continue;
    }

    bb10: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 0_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const -1_isize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}
