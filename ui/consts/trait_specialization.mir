// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const <impl at ui/consts/trait_specialization.rs:17:1: 17:32>::CONST_BOOL: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/trait_specialization.rs:18:31: 18:35

    bb0: {
        _0 = const false;                // scope 0 at ui/consts/trait_specialization.rs:18:38: 18:43
        return;                          // scope 0 at ui/consts/trait_specialization.rs:18:5: 18:44
    }
}

const <impl at ui/consts/trait_specialization.rs:17:1: 17:32>::CONST_STR: &str = {
    let mut _0: &str;                    // return place in scope 0 at ui/consts/trait_specialization.rs:19:30: 19:42

    bb0: {
        _0 = const "in default impl";    // scope 0 at ui/consts/trait_specialization.rs:19:45: 19:62
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:19:45: 19:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at ui/consts/trait_specialization.rs:19:5: 19:63
    }
}

fn <impl at ui/consts/trait_specialization.rs:17:1: 17:32>::method() -> &str {
    let mut _0: &str;                    // return place in scope 0 at ui/consts/trait_specialization.rs:21:28: 21:40

    bb0: {
        _0 = const "in default impl";    // scope 0 at ui/consts/trait_specialization.rs:22:9: 22:26
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:22:9: 22:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at ui/consts/trait_specialization.rs:23:6: 23:6
    }
}

const <impl at ui/consts/trait_specialization.rs:25:1: 25:40>::CONST_BOOL: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/trait_specialization.rs:26:23: 26:27

    bb0: {
        _0 = const true;                 // scope 0 at ui/consts/trait_specialization.rs:26:30: 26:34
        return;                          // scope 0 at ui/consts/trait_specialization.rs:26:5: 26:35
    }
}

const <impl at ui/consts/trait_specialization.rs:25:1: 25:40>::CONST_STR: &str = {
    let mut _0: &str;                    // return place in scope 0 at ui/consts/trait_specialization.rs:27:22: 27:34

    bb0: {
        _0 = const "in specialized impl"; // scope 0 at ui/consts/trait_specialization.rs:27:37: 27:58
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:27:37: 27:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at ui/consts/trait_specialization.rs:27:5: 27:59
    }
}

fn <impl at ui/consts/trait_specialization.rs:25:1: 25:40>::method() -> &str {
    let mut _0: &str;                    // return place in scope 0 at ui/consts/trait_specialization.rs:28:20: 28:32

    bb0: {
        _0 = const "in specialized impl"; // scope 0 at ui/consts/trait_specialization.rs:29:9: 29:30
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:29:9: 29:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at ui/consts/trait_specialization.rs:30:6: 30:6
    }
}

fn const_bool() -> &str {
    let mut _0: &str;                    // return place in scope 0 at ui/consts/trait_specialization.rs:33:23: 33:35
    let mut _1: bool;                    // in scope 0 at ui/consts/trait_specialization.rs:34:8: 34:43

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/trait_specialization.rs:34:8: 34:43
        switchInt(move _1) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/consts/trait_specialization.rs:34:8: 34:43
    }

    bb1: {
        _0 = const "in specialized impl"; // scope 0 at ui/consts/trait_specialization.rs:35:9: 35:30
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:35:9: 35:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb3;                     // scope 0 at ui/consts/trait_specialization.rs:34:5: 38:6
    }

    bb2: {
        _0 = const "in default impl";    // scope 0 at ui/consts/trait_specialization.rs:37:9: 37:26
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:37:9: 37:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb3;                     // scope 0 at ui/consts/trait_specialization.rs:34:5: 38:6
    }

    bb3: {
        return;                          // scope 0 at ui/consts/trait_specialization.rs:39:2: 39:2
    }
}

fn const_str() -> &str {
    let mut _0: &str;                    // return place in scope 0 at ui/consts/trait_specialization.rs:40:22: 40:34

    bb0: {
        _0 = const _;                    // scope 0 at ui/consts/trait_specialization.rs:41:5: 41:39
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:41:5: 41:39
                                         // + literal: Const { ty: &str, val: Unevaluated(SpecializedTrait::CONST_STR, [T], None) }
        return;                          // scope 0 at ui/consts/trait_specialization.rs:42:2: 42:2
    }
}

fn run_method() -> &str {
    let mut _0: &str;                    // return place in scope 0 at ui/consts/trait_specialization.rs:43:23: 43:35

    bb0: {
        _0 = <T as SpecializedTrait>::method() -> bb1; // scope 0 at ui/consts/trait_specialization.rs:44:5: 44:38
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:44:5: 44:36
                                         // + literal: Const { ty: fn() -> &'static str {<T as SpecializedTrait>::method}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/trait_specialization.rs:45:2: 45:2
    }
}

fn exit_if_not_eq(_1: &str, _2: &str) -> () {
    debug left => _1;                    // in scope 0 at ui/consts/trait_specialization.rs:52:19: 52:23
    debug right => _2;                   // in scope 0 at ui/consts/trait_specialization.rs:52:31: 52:36
    let mut _0: ();                      // return place in scope 0 at ui/consts/trait_specialization.rs:52:44: 52:44
    let mut _3: bool;                    // in scope 0 at ui/consts/trait_specialization.rs:53:8: 53:21
    let mut _4: &&str;                   // in scope 0 at ui/consts/trait_specialization.rs:53:8: 53:12
    let mut _5: &&str;                   // in scope 0 at ui/consts/trait_specialization.rs:53:16: 53:21
    let _6: !;                           // in scope 0 at ui/consts/trait_specialization.rs:54:9: 54:30

    bb0: {
        _4 = &_1;                        // scope 0 at ui/consts/trait_specialization.rs:53:8: 53:12
        _5 = &_2;                        // scope 0 at ui/consts/trait_specialization.rs:53:16: 53:21
        _3 = <&str as PartialEq>::ne(move _4, move _5) -> bb1; // scope 0 at ui/consts/trait_specialization.rs:53:8: 53:21
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:53:8: 53:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/trait_specialization.rs:53:8: 53:21
    }

    bb2: {
        _6 = exit(const 1_i32);          // scope 0 at ui/consts/trait_specialization.rs:54:9: 54:30
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:54:9: 54:27
                                         // + literal: Const { ty: fn(i32) -> ! {exit}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/consts/trait_specialization.rs:56:2: 56:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/trait_specialization.rs:58:15: 58:15
    let _1: ();                          // in scope 0 at ui/consts/trait_specialization.rs:59:5: 59:65
    let mut _2: &str;                    // in scope 0 at ui/consts/trait_specialization.rs:59:20: 59:41
    let _3: &str;                        // in scope 0 at ui/consts/trait_specialization.rs:59:20: 59:41
    let mut _4: &str;                    // in scope 0 at ui/consts/trait_specialization.rs:59:43: 59:64
    let _5: &str;                        // in scope 0 at ui/consts/trait_specialization.rs:59:43: 59:64
    let _6: ();                          // in scope 0 at ui/consts/trait_specialization.rs:60:5: 60:61
    let mut _7: &str;                    // in scope 0 at ui/consts/trait_specialization.rs:60:20: 60:37
    let _8: &str;                        // in scope 0 at ui/consts/trait_specialization.rs:60:20: 60:37
    let mut _9: &str;                    // in scope 0 at ui/consts/trait_specialization.rs:60:39: 60:60
    let _10: &str;                       // in scope 0 at ui/consts/trait_specialization.rs:60:39: 60:60
    let _11: ();                         // in scope 0 at ui/consts/trait_specialization.rs:61:5: 61:64
    let mut _12: &str;                   // in scope 0 at ui/consts/trait_specialization.rs:61:20: 61:41
    let _13: &str;                       // in scope 0 at ui/consts/trait_specialization.rs:61:20: 61:41
    let mut _14: &str;                   // in scope 0 at ui/consts/trait_specialization.rs:61:43: 61:63
    let _15: &str;                       // in scope 0 at ui/consts/trait_specialization.rs:61:43: 61:63
    let _16: ();                         // in scope 0 at ui/consts/trait_specialization.rs:62:5: 62:60
    let mut _17: &str;                   // in scope 0 at ui/consts/trait_specialization.rs:62:20: 62:37
    let _18: &str;                       // in scope 0 at ui/consts/trait_specialization.rs:62:20: 62:37
    let mut _19: &str;                   // in scope 0 at ui/consts/trait_specialization.rs:62:39: 62:59
    let _20: &str;                       // in scope 0 at ui/consts/trait_specialization.rs:62:39: 62:59
    let _21: ();                         // in scope 0 at ui/consts/trait_specialization.rs:63:5: 63:65
    let mut _22: &str;                   // in scope 0 at ui/consts/trait_specialization.rs:63:20: 63:41
    let _23: &str;                       // in scope 0 at ui/consts/trait_specialization.rs:63:20: 63:41
    let mut _24: &str;                   // in scope 0 at ui/consts/trait_specialization.rs:63:43: 63:64
    let _25: &str;                       // in scope 0 at ui/consts/trait_specialization.rs:63:43: 63:64
    let _26: ();                         // in scope 0 at ui/consts/trait_specialization.rs:64:5: 64:61
    let mut _27: &str;                   // in scope 0 at ui/consts/trait_specialization.rs:64:20: 64:37
    let _28: &str;                       // in scope 0 at ui/consts/trait_specialization.rs:64:20: 64:37
    let mut _29: &str;                   // in scope 0 at ui/consts/trait_specialization.rs:64:39: 64:60
    let _30: &str;                       // in scope 0 at ui/consts/trait_specialization.rs:64:39: 64:60

    bb0: {
        _3 = const "in specialized impl"; // scope 0 at ui/consts/trait_specialization.rs:59:20: 59:41
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:59:20: 59:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at ui/consts/trait_specialization.rs:59:20: 59:41
        _5 = const_bool::<TypeA>() -> bb1; // scope 0 at ui/consts/trait_specialization.rs:59:43: 59:64
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:59:43: 59:62
                                         // + literal: Const { ty: fn() -> &'static str {const_bool::<TypeA>}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at ui/consts/trait_specialization.rs:59:43: 59:64
        _1 = exit_if_not_eq(move _2, move _4) -> bb2; // scope 0 at ui/consts/trait_specialization.rs:59:5: 59:65
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:59:5: 59:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) {exit_if_not_eq}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = const "in default impl";    // scope 0 at ui/consts/trait_specialization.rs:60:20: 60:37
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:60:20: 60:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 0 at ui/consts/trait_specialization.rs:60:20: 60:37
        _10 = const_bool::<TypeB>() -> bb3; // scope 0 at ui/consts/trait_specialization.rs:60:39: 60:60
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:60:39: 60:58
                                         // + literal: Const { ty: fn() -> &'static str {const_bool::<TypeB>}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = _10;                        // scope 0 at ui/consts/trait_specialization.rs:60:39: 60:60
        _6 = exit_if_not_eq(move _7, move _9) -> bb4; // scope 0 at ui/consts/trait_specialization.rs:60:5: 60:61
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:60:5: 60:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) {exit_if_not_eq}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = const "in specialized impl"; // scope 0 at ui/consts/trait_specialization.rs:61:20: 61:41
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:61:20: 61:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = _13;                       // scope 0 at ui/consts/trait_specialization.rs:61:20: 61:41
        _15 = const_str::<TypeA>() -> bb5; // scope 0 at ui/consts/trait_specialization.rs:61:43: 61:63
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:61:43: 61:61
                                         // + literal: Const { ty: fn() -> &'static str {const_str::<TypeA>}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = _15;                       // scope 0 at ui/consts/trait_specialization.rs:61:43: 61:63
        _11 = exit_if_not_eq(move _12, move _14) -> bb6; // scope 0 at ui/consts/trait_specialization.rs:61:5: 61:64
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:61:5: 61:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) {exit_if_not_eq}, val: Value(<ZST>) }
    }

    bb6: {
        _18 = const "in default impl";   // scope 0 at ui/consts/trait_specialization.rs:62:20: 62:37
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:62:20: 62:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _17 = _18;                       // scope 0 at ui/consts/trait_specialization.rs:62:20: 62:37
        _20 = const_str::<TypeB>() -> bb7; // scope 0 at ui/consts/trait_specialization.rs:62:39: 62:59
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:62:39: 62:57
                                         // + literal: Const { ty: fn() -> &'static str {const_str::<TypeB>}, val: Value(<ZST>) }
    }

    bb7: {
        _19 = _20;                       // scope 0 at ui/consts/trait_specialization.rs:62:39: 62:59
        _16 = exit_if_not_eq(move _17, move _19) -> bb8; // scope 0 at ui/consts/trait_specialization.rs:62:5: 62:60
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:62:5: 62:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) {exit_if_not_eq}, val: Value(<ZST>) }
    }

    bb8: {
        _23 = const "in specialized impl"; // scope 0 at ui/consts/trait_specialization.rs:63:20: 63:41
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:63:20: 63:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _22 = _23;                       // scope 0 at ui/consts/trait_specialization.rs:63:20: 63:41
        _25 = run_method::<TypeA>() -> bb9; // scope 0 at ui/consts/trait_specialization.rs:63:43: 63:64
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:63:43: 63:62
                                         // + literal: Const { ty: fn() -> &'static str {run_method::<TypeA>}, val: Value(<ZST>) }
    }

    bb9: {
        _24 = _25;                       // scope 0 at ui/consts/trait_specialization.rs:63:43: 63:64
        _21 = exit_if_not_eq(move _22, move _24) -> bb10; // scope 0 at ui/consts/trait_specialization.rs:63:5: 63:65
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:63:5: 63:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) {exit_if_not_eq}, val: Value(<ZST>) }
    }

    bb10: {
        _28 = const "in default impl";   // scope 0 at ui/consts/trait_specialization.rs:64:20: 64:37
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:64:20: 64:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _27 = _28;                       // scope 0 at ui/consts/trait_specialization.rs:64:20: 64:37
        _30 = run_method::<TypeB>() -> bb11; // scope 0 at ui/consts/trait_specialization.rs:64:39: 64:60
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:64:39: 64:58
                                         // + literal: Const { ty: fn() -> &'static str {run_method::<TypeB>}, val: Value(<ZST>) }
    }

    bb11: {
        _29 = _30;                       // scope 0 at ui/consts/trait_specialization.rs:64:39: 64:60
        _26 = exit_if_not_eq(move _27, move _29) -> bb12; // scope 0 at ui/consts/trait_specialization.rs:64:5: 64:61
                                         // mir::Constant
                                         // + span: ui/consts/trait_specialization.rs:64:5: 64:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) {exit_if_not_eq}, val: Value(<ZST>) }
    }

    bb12: {
        return;                          // scope 0 at ui/consts/trait_specialization.rs:65:2: 65:2
    }
}
