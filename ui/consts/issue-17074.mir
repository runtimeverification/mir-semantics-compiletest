// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static X2: u64 = {
    let mut _0: u64;
    let mut _1: u16;

    bb0: {
        StorageLive(_1);
        _1 = Not(const 0_u16);
        _0 = move _1 as u64 (IntToInt);
        StorageDead(_1);
        return;
    }
}

static Y2: u64 = {
    let mut _0: u64;
    let mut _1: u32;

    bb0: {
        StorageLive(_1);
        _1 = Not(const 0_u32);
        _0 = move _1 as u64 (IntToInt);
        StorageDead(_1);
        return;
    }
}

const X: u64 = {
    let mut _0: u64;
    let mut _1: u16;

    bb0: {
        StorageLive(_1);
        _1 = Not(const 0_u16);
        _0 = move _1 as u64 (IntToInt);
        StorageDead(_1);
        return;
    }
}

const Y: u64 = {
    let mut _0: u64;
    let mut _1: u32;

    bb0: {
        StorageLive(_1);
        _1 = Not(const 0_u32);
        _0 = move _1 as u64 (IntToInt);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: u64;
    let mut _3: !;
    let mut _4: !;
    let _5: &i32;
    let _6: &i32;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: i32;
    let mut _10: i32;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: &i32;
    let mut _15: &i32;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }

    bb0: {
        _2 = const 1_u64;
        switchInt(_2) -> [65535: bb2, 4294967295: bb3, otherwise: bb1];
    }

    bb1: {
        _15 = const _;
        _14 = const _;
        _1 = (_15, _14);
        _5 = (_1.0: &i32);
        _6 = (_1.1: &i32);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb5, otherwise: bb4];
    }

    bb2: {
        _3 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb3: {
        _4 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb4: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<i32, i32>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb5: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}
