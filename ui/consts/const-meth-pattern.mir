// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const-meth-pattern.rs:5:1: 5:7>::banana() -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-meth-pattern.rs:6:26: 6:30

    bb0: {
        _0 = const true;                 // scope 0 at ui/consts/const-meth-pattern.rs:7:9: 7:13
        return;                          // scope 0 at ui/consts/const-meth-pattern.rs:8:6: 8:6
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/const-meth-pattern.rs:5:1: 5:7>::banana() -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-meth-pattern.rs:6:26: 6:30

    bb0: {
        _0 = const true;                 // scope 0 at ui/consts/const-meth-pattern.rs:7:9: 7:13
        return;                          // scope 0 at ui/consts/const-meth-pattern.rs:8:6: 8:6
    }
}

const ABANANA: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-meth-pattern.rs:11:16: 11:20

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-meth-pattern.rs:11:23: 11:34
        _0 = A::banana() -> bb1;         // scope 0 at ui/consts/const-meth-pattern.rs:11:23: 11:34
                                         // mir::Constant
                                         // + span: ui/consts/const-meth-pattern.rs:11:23: 11:32
                                         // + literal: Const { ty: fn() -> bool {A::banana}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-meth-pattern.rs:11:1: 11:35
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-meth-pattern.rs:13:11: 13:11

    bb0: {
        return;                          // scope 0 at ui/consts/const-meth-pattern.rs:18:2: 18:2
    }
}
