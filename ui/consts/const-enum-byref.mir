// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static C: E = {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const-enum-byref.rs:5:11: 5:12

    bb0: {
        _0 = E::V;                       // scope 0 at ui/consts/const-enum-byref.rs:5:15: 5:19
        return;                          // scope 0 at ui/consts/const-enum-byref.rs:5:1: 5:20
    }
}

fn f(_1: &E) -> () {
    debug a => _1;                       // in scope 0 at ui/consts/const-enum-byref.rs:7:6: 7:7
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-enum-byref.rs:7:13: 7:13
    let mut _2: isize;                   // in scope 0 at ui/consts/const-enum-byref.rs:9:9: 9:13
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at ui/consts/const-enum-byref.rs:8:11: 8:13
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/consts/const-enum-byref.rs:8:5: 8:13
    }

    bb1: {
        _3 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/consts/const-enum-byref.rs:8:11: 8:13
    }

    bb3: {
        return;                          // scope 0 at ui/consts/const-enum-byref.rs:12:2: 12:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-enum-byref.rs:14:15: 14:15
    let mut _1: &E;                      // in scope 0 at ui/consts/const-enum-byref.rs:15:7: 15:9
    let _2: &E;                          // in scope 0 at ui/consts/const-enum-byref.rs:15:7: 15:9
    let _3: &E;                          // in scope 0 at ui/consts/const-enum-byref.rs:15:8: 15:9

    bb0: {
        _3 = const {alloc1: &E};         // scope 0 at ui/consts/const-enum-byref.rs:15:8: 15:9
                                         // mir::Constant
                                         // + span: ui/consts/const-enum-byref.rs:15:8: 15:9
                                         // + literal: Const { ty: &E, val: Value(Scalar(alloc1)) }
        _2 = _3;                         // scope 0 at ui/consts/const-enum-byref.rs:15:7: 15:9
        _1 = _2;                         // scope 0 at ui/consts/const-enum-byref.rs:15:7: 15:9
        _0 = f(move _1) -> bb1;          // scope 0 at ui/consts/const-enum-byref.rs:15:5: 15:10
                                         // mir::Constant
                                         // + span: ui/consts/const-enum-byref.rs:15:5: 15:6
                                         // + literal: Const { ty: for<'a> fn(&'a E) {f}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-enum-byref.rs:16:2: 16:2
    }
}

alloc1 (static: C, size: 16, align: 8) {
    00 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
}

fn E::VV(_1: isize) -> E {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const-enum-byref.rs:4:13: 4:15

    bb0: {
        _0 = E::VV(move _1);             // scope 0 at ui/consts/const-enum-byref.rs:4:13: 4:15
        return;                          // scope 0 at ui/consts/const-enum-byref.rs:4:13: 4:15
    }
}

// MIR FOR CTFE
fn E::VV(_1: isize) -> E {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const-enum-byref.rs:4:13: 4:15

    bb0: {
        _0 = E::VV(move _1);             // scope 0 at ui/consts/const-enum-byref.rs:4:13: 4:15
        return;                          // scope 0 at ui/consts/const-enum-byref.rs:4:13: 4:15
    }
}
