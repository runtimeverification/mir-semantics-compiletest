// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> isize {
    let mut _0: isize;

    bb0: {
        _0 = const 3397320717_isize;
        return;
    }
}

static mut b: Bar<fn() -> isize> = {
    let mut _0: Bar<fn() -> isize>;
    let mut _1: fn() -> isize;

    bb0: {
        StorageLive(_1);
        _1 = foo as fn() -> isize (Pointer(ReifyFnPointer));
        _0 = Bar::<fn() -> isize> { f: move _1 };
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let mut _2: &isize;
    let _3: isize;
    let mut _4: fn() -> isize;
    let mut _5: *mut Bar<fn() -> isize>;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: isize;
    let mut _11: isize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        let _6: &isize;
        let _7: &isize;
        let mut _15: &isize;
        let mut _16: *const ();
        let mut _17: usize;
        let mut _18: usize;
        let mut _19: usize;
        let mut _20: usize;
        let mut _21: bool;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
    }

    bb0: {
        _5 = const {alloc1: *mut Bar<fn() -> isize>};
        _16 = _5 as *const () (PtrToPtr);
        _17 = _16 as usize (Transmute);
        _18 = AlignOf(Bar<fn() -> isize>);
        _19 = Sub(_18, const 1_usize);
        _20 = BitAnd(_17, _19);
        _21 = Eq(_20, const 0_usize);
        assert(_21, "misaligned pointer dereference: address must be a multiple of {} but is {}", _18, _17) -> [success: bb4, unwind unreachable];
    }

    bb1: {
        _2 = &_3;
        _15 = const _;
        _1 = (move _2, _15);
        _6 = (_1.0: &isize);
        _7 = (_1.1: &isize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<isize, isize>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        return;
    }

    bb4: {
        _4 = ((*_5).0: fn() -> isize);
        _3 = move _4() -> [return: bb1, unwind continue];
    }
}

alloc1 (static: b, size: 8, align: 8) {
    ╾───────alloc5────────╼                         │ ╾──────╼
}

alloc5 (fn: foo)

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3397320717_isize;
        _0 = &_1;
        return;
    }
}
