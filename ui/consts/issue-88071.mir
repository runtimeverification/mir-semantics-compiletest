// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/issue-88071.rs:9:1: 9:27>::new() -> CustomMap<K, V> {
    let mut _0: CustomMap<K, V>;         // return place in scope 0 at ui/consts/issue-88071.rs:13:27: 13:31
    let mut _1: std::collections::BTreeMap<K, V>; // in scope 0 at ui/consts/issue-88071.rs:14:19: 14:34

    bb0: {
        _1 = BTreeMap::<K, V>::new() -> bb1; // scope 0 at ui/consts/issue-88071.rs:14:19: 14:34
                                         // mir::Constant
                                         // + span: ui/consts/issue-88071.rs:14:19: 14:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> BTreeMap<K, V> {BTreeMap::<K, V>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = CustomMap::<K, V>(move _1); // scope 0 at ui/consts/issue-88071.rs:14:9: 14:35
        return;                          // scope 0 at ui/consts/issue-88071.rs:15:6: 15:6
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/issue-88071.rs:9:1: 9:27>::new() -> CustomMap<K, V> {
    let mut _0: CustomMap<K, V>;         // return place in scope 0 at ui/consts/issue-88071.rs:13:27: 13:31
    let mut _1: std::collections::BTreeMap<K, V>; // in scope 0 at ui/consts/issue-88071.rs:14:19: 14:34

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/issue-88071.rs:14:19: 14:34
        ConstEvalCounter;                // scope 0 at ui/consts/issue-88071.rs:14:19: 14:34
        _1 = BTreeMap::<K, V>::new() -> bb1; // scope 0 at ui/consts/issue-88071.rs:14:19: 14:34
                                         // mir::Constant
                                         // + span: ui/consts/issue-88071.rs:14:19: 14:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> BTreeMap<K, V> {BTreeMap::<K, V>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = CustomMap::<K, V>(move _1); // scope 0 at ui/consts/issue-88071.rs:14:9: 14:35
        StorageDead(_1);                 // scope 0 at ui/consts/issue-88071.rs:14:34: 14:35
        return;                          // scope 0 at ui/consts/issue-88071.rs:15:6: 15:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-88071.rs:18:11: 18:11

    bb0: {
        return;                          // scope 0 at ui/consts/issue-88071.rs:18:13: 18:13
    }
}

fn CustomMap(_1: BTreeMap<K, V>) -> CustomMap<K, V> {
    let mut _0: CustomMap<K, V>;         // return place in scope 0 at ui/consts/issue-88071.rs:7:1: 7:27

    bb0: {
        _0 = CustomMap::<K, V>(move _1); // scope 0 at ui/consts/issue-88071.rs:7:1: 7:27
        return;                          // scope 0 at ui/consts/issue-88071.rs:7:1: 7:27
    }
}

// MIR FOR CTFE
fn CustomMap(_1: BTreeMap<K, V>) -> CustomMap<K, V> {
    let mut _0: CustomMap<K, V>;         // return place in scope 0 at ui/consts/issue-88071.rs:7:1: 7:27

    bb0: {
        _0 = CustomMap::<K, V>(move _1); // scope 0 at ui/consts/issue-88071.rs:7:1: 7:27
        return;                          // scope 0 at ui/consts/issue-88071.rs:7:1: 7:27
    }
}
