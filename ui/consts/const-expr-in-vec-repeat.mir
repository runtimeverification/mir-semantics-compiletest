// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-expr-in-vec-repeat.rs:6:15: 6:15
    let _1: [i32; 6];                    // in scope 0 at ui/consts/const-expr-in-vec-repeat.rs:9:9: 9:11
    scope 1 {
        debug _v => _1;                  // in scope 1 at ui/consts/const-expr-in-vec-repeat.rs:9:9: 9:11
    }

    bb0: {
        _1 = [const 0_i32; 6];           // scope 0 at ui/consts/const-expr-in-vec-repeat.rs:9:14: 9:28
        return;                          // scope 0 at ui/consts/const-expr-in-vec-repeat.rs:11:2: 11:2
    }
}

const FOO: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-expr-in-vec-repeat.rs:8:16: 8:21

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/consts/const-expr-in-vec-repeat.rs:8:24: 8:25
        return;                          // scope 0 at ui/consts/const-expr-in-vec-repeat.rs:8:5: 8:26
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-expr-in-vec-repeat.rs:9:18: 9:27
    let mut _1: usize;                   // in scope 0 at ui/consts/const-expr-in-vec-repeat.rs:9:18: 9:25
    let mut _2: usize;                   // in scope 0 at ui/consts/const-expr-in-vec-repeat.rs:9:18: 9:23
    let mut _3: (usize, bool);           // in scope 0 at ui/consts/const-expr-in-vec-repeat.rs:9:18: 9:23
    let mut _4: (usize, bool);           // in scope 0 at ui/consts/const-expr-in-vec-repeat.rs:9:18: 9:25
    let mut _5: bool;                    // in scope 0 at ui/consts/const-expr-in-vec-repeat.rs:9:18: 9:27

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-expr-in-vec-repeat.rs:9:18: 9:25
        StorageLive(_2);                 // scope 0 at ui/consts/const-expr-in-vec-repeat.rs:9:18: 9:23
        _3 = CheckedMul(const _, const 3_usize); // scope 0 at ui/consts/const-expr-in-vec-repeat.rs:9:18: 9:23
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, const 3_usize) -> bb1; // scope 0 at ui/consts/const-expr-in-vec-repeat.rs:9:18: 9:23
    }

    bb1: {
        _2 = move (_3.0: usize);         // scope 0 at ui/consts/const-expr-in-vec-repeat.rs:9:18: 9:23
        _4 = CheckedMul(_2, const 2_usize); // scope 0 at ui/consts/const-expr-in-vec-repeat.rs:9:18: 9:25
        assert(!move (_4.1: bool), "attempt to compute `{} * {}`, which would overflow", move _2, const 2_usize) -> bb2; // scope 0 at ui/consts/const-expr-in-vec-repeat.rs:9:18: 9:25
    }

    bb2: {
        _1 = move (_4.0: usize);         // scope 0 at ui/consts/const-expr-in-vec-repeat.rs:9:18: 9:25
        StorageDead(_2);                 // scope 0 at ui/consts/const-expr-in-vec-repeat.rs:9:24: 9:25
        _5 = Eq(const 2_usize, const 0_usize); // scope 0 at ui/consts/const-expr-in-vec-repeat.rs:9:18: 9:27
        assert(!move _5, "attempt to divide `{}` by zero", _1) -> bb3; // scope 0 at ui/consts/const-expr-in-vec-repeat.rs:9:18: 9:27
    }

    bb3: {
        _0 = Div(move _1, const 2_usize); // scope 0 at ui/consts/const-expr-in-vec-repeat.rs:9:18: 9:27
        StorageDead(_1);                 // scope 0 at ui/consts/const-expr-in-vec-repeat.rs:9:26: 9:27
        return;                          // scope 0 at ui/consts/const-expr-in-vec-repeat.rs:9:18: 9:27
    }
}
