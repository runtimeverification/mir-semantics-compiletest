// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const x: &isize = {
    let mut _0: &isize;
    let _1: &isize;
    let _2: isize;
    let mut _3: &isize;

    bb0: {
        StorageLive(_1);
        _3 = const _;
        _1 = &(*_3);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in x: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 10_isize;
        _0 = &_1;
        return;
    }
}

const y: &Pair<'_> = {
    let mut _0: &Pair<'_>;
    let _1: &Pair<'_>;
    let _2: Pair<'_>;
    let mut _3: &isize;
    let _4: &isize;
    let mut _5: &Pair<'_>;

    bb0: {
        StorageLive(_1);
        _5 = const _;
        _1 = &(*_5);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in y: &Pair<'_> = {
    let mut _0: &Pair<'_>;
    let mut _1: Pair<'_>;
    let mut _2: &isize;
    let mut _3: &isize;

    bb0: {
        _3 = const _;
        _2 = &(*_3);
        _1 = Pair::<'_> { a: const 15_isize, b: move _2 };
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 1];
    let _6: [core::fmt::rt::Argument<'_>; 1];
    let mut _7: core::fmt::rt::Argument<'_>;
    let _8: &isize;
    let _9: ();
    let mut _10: std::fmt::Arguments<'_>;
    let mut _11: &[&str];
    let mut _12: &[core::fmt::rt::Argument<'_>];
    let _13: &[core::fmt::rt::Argument<'_>; 2];
    let _14: [core::fmt::rt::Argument<'_>; 2];
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &isize;
    let _17: &Pair<'_>;
    let mut _18: core::fmt::rt::Argument<'_>;
    let _19: &Pair<'_>;
    let mut _20: (&isize, &isize);
    let _21: &isize;
    let _22: &isize;
    let _23: &isize;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: isize;
    let mut _27: isize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&isize, &isize);
    let _32: &Pair<'_>;
    let _33: &isize;
    let _34: &isize;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: isize;
    let mut _38: isize;
    let _40: !;
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _42: &isize;
    let mut _43: &isize;
    let mut _44: &[&str; 3];
    let mut _45: &[&str; 2];
    let mut _46: &isize;
    let mut _47: &isize;
    scope 1 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 2 {
            debug kind => _28;
        }
    }
    scope 3 {
        debug left_val => _33;
        debug right_val => _34;
        let _39: core::panicking::AssertKind;
        scope 4 {
            debug kind => _39;
        }
    }

    bb0: {
        _45 = const _;
        _3 = _45 as &[&str] (Pointer(Unsize));
        _8 = const _;
        _7 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = [move _7];
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = _print(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _44 = const _;
        _11 = _44 as &[&str] (Pointer(Unsize));
        _17 = const _;
        _16 = &((*_17).0: isize);
        _15 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_16) -> [return: bb4, unwind continue];
    }

    bb4: {
        _19 = const _;
        _46 = deref_copy ((*_19).1: &isize);
        _18 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_46) -> [return: bb5, unwind continue];
    }

    bb5: {
        _14 = [move _15, move _18];
        _13 = &_14;
        _12 = _13 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _10 = Arguments::<'_>::new_v1(move _11, move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        _9 = _print(move _10) -> [return: bb7, unwind continue];
    }

    bb7: {
        _21 = const _;
        _43 = const _;
        _20 = (_21, _43);
        _22 = (_20.0: &isize);
        _23 = (_20.1: &isize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<isize, isize>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb9: {
        _32 = const _;
        _47 = deref_copy ((*_32).1: &isize);
        _42 = const _;
        _31 = (_47, _42);
        _33 = (_31.0: &isize);
        _34 = (_31.1: &isize);
        _37 = (*_33);
        _38 = (*_34);
        _36 = Eq(move _37, move _38);
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _39 = core::panicking::AssertKind::Eq;
        _41 = Option::<Arguments<'_>>::None;
        _40 = core::panicking::assert_failed::<isize, isize>(move _39, _33, _34, move _41) -> unwind continue;
    }

    bb11: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 10_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 10_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "y = {a: ", const ", b: ", const "}\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "x = ", const "\n"];
        _0 = &_1;
        return;
    }
}
