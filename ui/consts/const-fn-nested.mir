// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn sub(_1: u32, _2: u32) -> u32 {
    debug x => _1;                       // in scope 0 at ui/consts/const-fn-nested.rs:4:14: 4:15
    debug y => _2;                       // in scope 0 at ui/consts/const-fn-nested.rs:4:22: 4:23
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const-fn-nested.rs:4:33: 4:36
    let mut _3: u32;                     // in scope 0 at ui/consts/const-fn-nested.rs:5:5: 5:6
    let mut _4: u32;                     // in scope 0 at ui/consts/const-fn-nested.rs:5:9: 5:10
    let mut _5: (u32, bool);             // in scope 0 at ui/consts/const-fn-nested.rs:5:5: 5:10

    bb0: {
        _3 = _1;                         // scope 0 at ui/consts/const-fn-nested.rs:5:5: 5:6
        _4 = _2;                         // scope 0 at ui/consts/const-fn-nested.rs:5:9: 5:10
        _5 = CheckedSub(_3, _4);         // scope 0 at ui/consts/const-fn-nested.rs:5:5: 5:10
        assert(!move (_5.1: bool), "attempt to compute `{} - {}`, which would overflow", move _3, move _4) -> bb1; // scope 0 at ui/consts/const-fn-nested.rs:5:5: 5:10
    }

    bb1: {
        _0 = move (_5.0: u32);           // scope 0 at ui/consts/const-fn-nested.rs:5:5: 5:10
        return;                          // scope 0 at ui/consts/const-fn-nested.rs:6:2: 6:2
    }
}

// MIR FOR CTFE
fn sub(_1: u32, _2: u32) -> u32 {
    debug x => _1;                       // in scope 0 at ui/consts/const-fn-nested.rs:4:14: 4:15
    debug y => _2;                       // in scope 0 at ui/consts/const-fn-nested.rs:4:22: 4:23
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const-fn-nested.rs:4:33: 4:36
    let mut _3: u32;                     // in scope 0 at ui/consts/const-fn-nested.rs:5:5: 5:6
    let mut _4: u32;                     // in scope 0 at ui/consts/const-fn-nested.rs:5:9: 5:10
    let mut _5: (u32, bool);             // in scope 0 at ui/consts/const-fn-nested.rs:5:5: 5:10

    bb0: {
        StorageLive(_3);                 // scope 0 at ui/consts/const-fn-nested.rs:5:5: 5:6
        _3 = _1;                         // scope 0 at ui/consts/const-fn-nested.rs:5:5: 5:6
        StorageLive(_4);                 // scope 0 at ui/consts/const-fn-nested.rs:5:9: 5:10
        _4 = _2;                         // scope 0 at ui/consts/const-fn-nested.rs:5:9: 5:10
        _5 = CheckedSub(_3, _4);         // scope 0 at ui/consts/const-fn-nested.rs:5:5: 5:10
        assert(!move (_5.1: bool), "attempt to compute `{} - {}`, which would overflow", move _3, move _4) -> bb1; // scope 0 at ui/consts/const-fn-nested.rs:5:5: 5:10
    }

    bb1: {
        _0 = move (_5.0: u32);           // scope 0 at ui/consts/const-fn-nested.rs:5:5: 5:10
        StorageDead(_4);                 // scope 0 at ui/consts/const-fn-nested.rs:5:9: 5:10
        StorageDead(_3);                 // scope 0 at ui/consts/const-fn-nested.rs:5:9: 5:10
        return;                          // scope 0 at ui/consts/const-fn-nested.rs:6:2: 6:2
    }
}

const X: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const-fn-nested.rs:8:10: 8:13
    let mut _1: u32;                     // in scope 0 at ui/consts/const-fn-nested.rs:8:20: 8:31

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-fn-nested.rs:8:20: 8:31
        ConstEvalCounter;                // scope 0 at ui/consts/const-fn-nested.rs:8:20: 8:31
        _1 = sub(const 88_u32, const 44_u32) -> bb1; // scope 0 at ui/consts/const-fn-nested.rs:8:20: 8:31
                                         // mir::Constant
                                         // + span: ui/consts/const-fn-nested.rs:8:20: 8:23
                                         // + literal: Const { ty: fn(u32, u32) -> u32 {sub}, val: Value(<ZST>) }
    }

    bb1: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-fn-nested.rs:8:16: 8:36
        _0 = sub(move _1, const 22_u32) -> bb2; // scope 0 at ui/consts/const-fn-nested.rs:8:16: 8:36
                                         // mir::Constant
                                         // + span: ui/consts/const-fn-nested.rs:8:16: 8:19
                                         // + literal: Const { ty: fn(u32, u32) -> u32 {sub}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_1);                 // scope 0 at ui/consts/const-fn-nested.rs:8:35: 8:36
        return;                          // scope 0 at ui/consts/const-fn-nested.rs:8:1: 8:37
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-fn-nested.rs:10:11: 10:11
    let mut _1: (&u32, &u32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: &u32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _5: &u32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _8: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _4;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _5;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _6: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _6;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _8 = const _;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[1])) }
        _2 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _7 = const _;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _7;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _4 = (_1.0: &u32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _5 = (_1.1: &u32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        return;                          // scope 0 at ui/consts/const-fn-nested.rs:12:2: 12:2
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/consts/const-fn-nested.rs:11:19: 11:21

    bb0: {
        _1 = const 22_u32;               // scope 0 at ui/consts/const-fn-nested.rs:11:19: 11:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: u32;                     // in scope 0 at ui/consts/const-fn-nested.rs:11:16: 11:17

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-fn-nested.rs:11:16: 11:17
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}
