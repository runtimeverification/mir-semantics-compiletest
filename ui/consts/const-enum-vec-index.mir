// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const-enum-vec-index.rs:2:16: 2:21>::clone(_1: &E) -> E {
    debug self => _1;
    let mut _0: E;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

const C: &[E] = {
    let mut _0: &[E];
    let mut _1: &[E; 2];
    let _2: &[E; 2];
    let _3: [E; 2];
    let mut _4: E;
    let mut _5: E;
    let mut _6: &[E; 2];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _6 = const _;
        _2 = &(*_6);
        _1 = &(*_2);
        _0 = move _1 as &[E] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in C: &[E; 2] = {
    let mut _0: &[E; 2];
    let mut _1: [E; 2];
    let mut _2: E;
    let mut _3: E;

    bb0: {
        _2 = E::V0;
        _3 = E::V1(const 233495534_isize);
        _1 = [move _2, move _3];
        _0 = &_1;
        return;
    }
}

static C0: E = {
    let mut _0: E;
    let mut _1: &[E];
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        _2 = const 0_usize;
        _3 = Len((*_1));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = (*_1)[_2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

static C1: E = {
    let mut _0: E;
    let mut _1: &[E];
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        _2 = const 1_usize;
        _3 = Len((*_1));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = (*_1)[_2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const D: &[E; 2] = {
    let mut _0: &[E; 2];
    let _1: &[E; 2];
    let _2: [E; 2];
    let mut _3: E;
    let mut _4: E;
    let mut _5: &[E; 2];

    bb0: {
        StorageLive(_1);
        _5 = const _;
        _1 = &(*_5);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in D: &[E; 2] = {
    let mut _0: &[E; 2];
    let mut _1: [E; 2];
    let mut _2: E;
    let mut _3: E;

    bb0: {
        _2 = E::V0;
        _3 = E::V1(const 233503726_isize);
        _1 = [move _2, move _3];
        _0 = &_1;
        return;
    }
}

D::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

static D0: E = {
    let mut _0: E;
    let mut _1: &[E; 2];
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        _2 = const 0_usize;
        _3 = Len((*_1));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = (*_1)[_2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

static D1: E = {
    let mut _0: E;
    let mut _1: &[E; 2];
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        _2 = const 1_usize;
        _3 = Len((*_1));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = (*_1)[_2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: &E;
    let mut _2: isize;
    let mut _3: !;
    let mut _4: &E;
    let mut _5: isize;
    let _6: isize;
    let mut _7: (&isize, &isize);
    let mut _8: &isize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: isize;
    let mut _14: isize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: !;
    let mut _19: &E;
    let mut _20: isize;
    let mut _21: !;
    let mut _22: &E;
    let mut _23: isize;
    let _24: isize;
    let mut _25: (&isize, &isize);
    let mut _26: &isize;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: isize;
    let mut _32: isize;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: !;
    scope 1 {
        debug n => _6;
        let _9: &isize;
        let _10: &isize;
        let mut _38: &isize;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
    }
    scope 4 {
        debug n => _24;
        let _27: &isize;
        let _28: &isize;
        let mut _37: &isize;
        scope 5 {
            debug left_val => _27;
            debug right_val => _28;
            let _33: core::panicking::AssertKind;
            scope 6 {
                debug kind => _33;
            }
        }
    }

    bb0: {
        _1 = const {alloc1: &E};
        _2 = discriminant((*_1));
        switchInt(move _2) -> [1: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb2: {
        _4 = const {alloc2: &E};
        _5 = discriminant((*_4));
        switchInt(move _5) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _18 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb4: {
        _6 = (((*_4) as V1).0: isize);
        _8 = &_6;
        _38 = const _;
        _7 = (move _8, _38);
        _9 = (_7.0: &isize);
        _10 = (_7.1: &isize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<isize, isize>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb6: {
        _19 = const {alloc3: &E};
        _20 = discriminant((*_19));
        switchInt(move _20) -> [1: bb8, otherwise: bb7];
    }

    bb7: {
        _21 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb8: {
        _22 = const {alloc4: &E};
        _23 = discriminant((*_22));
        switchInt(move _23) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _36 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb10: {
        _24 = (((*_22) as V1).0: isize);
        _26 = &_24;
        _37 = const _;
        _25 = (move _26, _37);
        _27 = (_25.0: &isize);
        _28 = (_25.1: &isize);
        _31 = (*_27);
        _32 = (*_28);
        _30 = Eq(move _31, move _32);
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<isize, isize>(move _33, _27, _28, move _35) -> unwind continue;
    }

    bb12: {
        return;
    }
}

alloc4 (static: D1, size: 16, align: 8) {
    00 00 00 00 00 00 00 00 ee fb ea 0d 00 00 00 00 │ ................
}

alloc3 (static: D0, size: 16, align: 8) {
    01 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
}

alloc2 (static: C1, size: 16, align: 8) {
    00 00 00 00 00 00 00 00 ee db ea 0d 00 00 00 00 │ ................
}

alloc1 (static: C0, size: 16, align: 8) {
    01 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 233503726_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 233495534_isize;
        _0 = &_1;
        return;
    }
}

fn E::V1(_1: isize) -> E {
    let mut _0: E;

    bb0: {
        _0 = E::V1(move _1);
        return;
    }
}

// MIR FOR CTFE
fn E::V1(_1: isize) -> E {
    let mut _0: E;

    bb0: {
        _0 = E::V1(move _1);
        return;
    }
}
