// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const-enum-vec-index.rs:2:16: 2:21>::clone(_1: &E) -> E {
    debug self => _1;                    // in scope 0 at ui/consts/const-enum-vec-index.rs:2:16: 2:21
    let mut _0: E;                       // return place in scope 0 at ui/consts/const-enum-vec-index.rs:2:16: 2:21
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/consts/const-enum-vec-index.rs:2:16: 2:21
        return;                          // scope 0 at ui/consts/const-enum-vec-index.rs:2:21: 2:21
    }
}

const C: &[E] = {
    let mut _0: &[E];                    // return place in scope 0 at ui/consts/const-enum-vec-index.rs:5:10: 5:22
    let mut _1: &[E; 2];                 // in scope 0 at ui/consts/const-enum-vec-index.rs:5:25: 5:51
    let _2: &[E; 2];                     // in scope 0 at ui/consts/const-enum-vec-index.rs:5:25: 5:51
    let _3: [E; 2];                      // in scope 0 at ui/consts/const-enum-vec-index.rs:5:26: 5:51
    let mut _4: E;                       // in scope 0 at ui/consts/const-enum-vec-index.rs:5:27: 5:32
    let mut _5: E;                       // in scope 0 at ui/consts/const-enum-vec-index.rs:5:34: 5:50
    let mut _6: &[E; 2];                 // in scope 0 at ui/consts/const-enum-vec-index.rs:5:25: 5:51

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-enum-vec-index.rs:5:25: 5:51
        StorageLive(_2);                 // scope 0 at ui/consts/const-enum-vec-index.rs:5:25: 5:51
        _6 = const _;                    // scope 0 at ui/consts/const-enum-vec-index.rs:5:25: 5:51
                                         // mir::Constant
                                         // + span: ui/consts/const-enum-vec-index.rs:5:25: 5:51
                                         // + literal: Const { ty: &[E; 2], val: Unevaluated(C, [], Some(promoted[0])) }
        _2 = &(*_6);                     // scope 0 at ui/consts/const-enum-vec-index.rs:5:25: 5:51
        _1 = &(*_2);                     // scope 0 at ui/consts/const-enum-vec-index.rs:5:25: 5:51
        _0 = move _1 as &[E] (Pointer(Unsize)); // scope 0 at ui/consts/const-enum-vec-index.rs:5:25: 5:51
        StorageDead(_2);                 // scope 0 at ui/consts/const-enum-vec-index.rs:5:50: 5:51
        StorageDead(_1);                 // scope 0 at ui/consts/const-enum-vec-index.rs:5:50: 5:51
        return;                          // scope 0 at ui/consts/const-enum-vec-index.rs:5:1: 5:52
    }
}

promoted[0] in C: &[E; 2] = {
    let mut _0: &[E; 2];                 // return place in scope 0 at ui/consts/const-enum-vec-index.rs:5:25: 5:51
    let mut _1: [E; 2];                  // in scope 0 at ui/consts/const-enum-vec-index.rs:5:26: 5:51
    let mut _2: E;                       // in scope 0 at ui/consts/const-enum-vec-index.rs:5:27: 5:32
    let mut _3: E;                       // in scope 0 at ui/consts/const-enum-vec-index.rs:5:34: 5:50

    bb0: {
        _2 = E::V0;                      // scope 0 at ui/consts/const-enum-vec-index.rs:5:27: 5:32
        _3 = E::V1(const 233495534_isize); // scope 0 at ui/consts/const-enum-vec-index.rs:5:34: 5:50
        _1 = [move _2, move _3];         // scope 0 at ui/consts/const-enum-vec-index.rs:5:26: 5:51
        _0 = &_1;                        // scope 0 at ui/consts/const-enum-vec-index.rs:5:25: 5:51
        return;                          // scope 0 at ui/consts/const-enum-vec-index.rs:5:25: 5:51
    }
}

static C0: E = {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const-enum-vec-index.rs:6:12: 6:13
    let mut _1: &[E];                    // in scope 0 at ui/consts/const-enum-vec-index.rs:6:16: 6:17
    let _2: usize;                       // in scope 0 at ui/consts/const-enum-vec-index.rs:6:18: 6:19
    let mut _3: usize;                   // in scope 0 at ui/consts/const-enum-vec-index.rs:6:16: 6:20
    let mut _4: bool;                    // in scope 0 at ui/consts/const-enum-vec-index.rs:6:16: 6:20

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-enum-vec-index.rs:6:16: 6:17
        _1 = const _;                    // scope 0 at ui/consts/const-enum-vec-index.rs:6:16: 6:17
                                         // mir::Constant
                                         // + span: ui/consts/const-enum-vec-index.rs:6:16: 6:17
                                         // + literal: Const { ty: &[E], val: Unevaluated(C, [], None) }
        StorageLive(_2);                 // scope 0 at ui/consts/const-enum-vec-index.rs:6:18: 6:19
        _2 = const 0_usize;              // scope 0 at ui/consts/const-enum-vec-index.rs:6:18: 6:19
        _3 = Len((*_1));                 // scope 0 at ui/consts/const-enum-vec-index.rs:6:16: 6:20
        _4 = Lt(_2, _3);                 // scope 0 at ui/consts/const-enum-vec-index.rs:6:16: 6:20
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1; // scope 0 at ui/consts/const-enum-vec-index.rs:6:16: 6:20
    }

    bb1: {
        _0 = (*_1)[_2];                  // scope 0 at ui/consts/const-enum-vec-index.rs:6:16: 6:20
        StorageDead(_2);                 // scope 0 at ui/consts/const-enum-vec-index.rs:6:19: 6:20
        StorageDead(_1);                 // scope 0 at ui/consts/const-enum-vec-index.rs:6:19: 6:20
        return;                          // scope 0 at ui/consts/const-enum-vec-index.rs:6:1: 6:21
    }
}

static C1: E = {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const-enum-vec-index.rs:7:12: 7:13
    let mut _1: &[E];                    // in scope 0 at ui/consts/const-enum-vec-index.rs:7:16: 7:17
    let _2: usize;                       // in scope 0 at ui/consts/const-enum-vec-index.rs:7:18: 7:19
    let mut _3: usize;                   // in scope 0 at ui/consts/const-enum-vec-index.rs:7:16: 7:20
    let mut _4: bool;                    // in scope 0 at ui/consts/const-enum-vec-index.rs:7:16: 7:20

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-enum-vec-index.rs:7:16: 7:17
        _1 = const _;                    // scope 0 at ui/consts/const-enum-vec-index.rs:7:16: 7:17
                                         // mir::Constant
                                         // + span: ui/consts/const-enum-vec-index.rs:7:16: 7:17
                                         // + literal: Const { ty: &[E], val: Unevaluated(C, [], None) }
        StorageLive(_2);                 // scope 0 at ui/consts/const-enum-vec-index.rs:7:18: 7:19
        _2 = const 1_usize;              // scope 0 at ui/consts/const-enum-vec-index.rs:7:18: 7:19
        _3 = Len((*_1));                 // scope 0 at ui/consts/const-enum-vec-index.rs:7:16: 7:20
        _4 = Lt(_2, _3);                 // scope 0 at ui/consts/const-enum-vec-index.rs:7:16: 7:20
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1; // scope 0 at ui/consts/const-enum-vec-index.rs:7:16: 7:20
    }

    bb1: {
        _0 = (*_1)[_2];                  // scope 0 at ui/consts/const-enum-vec-index.rs:7:16: 7:20
        StorageDead(_2);                 // scope 0 at ui/consts/const-enum-vec-index.rs:7:19: 7:20
        StorageDead(_1);                 // scope 0 at ui/consts/const-enum-vec-index.rs:7:19: 7:20
        return;                          // scope 0 at ui/consts/const-enum-vec-index.rs:7:1: 7:21
    }
}

const D: &[E; 2] = {
    let mut _0: &[E; 2];                 // return place in scope 0 at ui/consts/const-enum-vec-index.rs:8:10: 8:25
    let _1: &[E; 2];                     // in scope 0 at ui/consts/const-enum-vec-index.rs:8:28: 8:54
    let _2: [E; 2];                      // in scope 0 at ui/consts/const-enum-vec-index.rs:8:29: 8:54
    let mut _3: E;                       // in scope 0 at ui/consts/const-enum-vec-index.rs:8:30: 8:35
    let mut _4: E;                       // in scope 0 at ui/consts/const-enum-vec-index.rs:8:37: 8:53
    let mut _5: &[E; 2];                 // in scope 0 at ui/consts/const-enum-vec-index.rs:8:28: 8:54

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-enum-vec-index.rs:8:28: 8:54
        _5 = const _;                    // scope 0 at ui/consts/const-enum-vec-index.rs:8:28: 8:54
                                         // mir::Constant
                                         // + span: ui/consts/const-enum-vec-index.rs:8:28: 8:54
                                         // + literal: Const { ty: &[E; 2], val: Unevaluated(D, [], Some(promoted[0])) }
        _1 = &(*_5);                     // scope 0 at ui/consts/const-enum-vec-index.rs:8:28: 8:54
        _0 = &(*_1);                     // scope 0 at ui/consts/const-enum-vec-index.rs:8:28: 8:54
        StorageDead(_1);                 // scope 0 at ui/consts/const-enum-vec-index.rs:8:53: 8:54
        return;                          // scope 0 at ui/consts/const-enum-vec-index.rs:8:1: 8:55
    }
}

promoted[0] in D: &[E; 2] = {
    let mut _0: &[E; 2];                 // return place in scope 0 at ui/consts/const-enum-vec-index.rs:8:28: 8:54
    let mut _1: [E; 2];                  // in scope 0 at ui/consts/const-enum-vec-index.rs:8:29: 8:54
    let mut _2: E;                       // in scope 0 at ui/consts/const-enum-vec-index.rs:8:30: 8:35
    let mut _3: E;                       // in scope 0 at ui/consts/const-enum-vec-index.rs:8:37: 8:53

    bb0: {
        _2 = E::V0;                      // scope 0 at ui/consts/const-enum-vec-index.rs:8:30: 8:35
        _3 = E::V1(const 233503726_isize); // scope 0 at ui/consts/const-enum-vec-index.rs:8:37: 8:53
        _1 = [move _2, move _3];         // scope 0 at ui/consts/const-enum-vec-index.rs:8:29: 8:54
        _0 = &_1;                        // scope 0 at ui/consts/const-enum-vec-index.rs:8:28: 8:54
        return;                          // scope 0 at ui/consts/const-enum-vec-index.rs:8:28: 8:54
    }
}

D::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-enum-vec-index.rs:8:23: 8:24

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/consts/const-enum-vec-index.rs:8:23: 8:24
        return;                          // scope 0 at ui/consts/const-enum-vec-index.rs:8:23: 8:24
    }
}

static D0: E = {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const-enum-vec-index.rs:9:12: 9:13
    let mut _1: &[E; 2];                 // in scope 0 at ui/consts/const-enum-vec-index.rs:9:16: 9:17
    let _2: usize;                       // in scope 0 at ui/consts/const-enum-vec-index.rs:9:18: 9:19
    let mut _3: usize;                   // in scope 0 at ui/consts/const-enum-vec-index.rs:9:16: 9:20
    let mut _4: bool;                    // in scope 0 at ui/consts/const-enum-vec-index.rs:9:16: 9:20

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-enum-vec-index.rs:9:16: 9:17
        _1 = const _;                    // scope 0 at ui/consts/const-enum-vec-index.rs:9:16: 9:17
                                         // mir::Constant
                                         // + span: ui/consts/const-enum-vec-index.rs:9:16: 9:17
                                         // + literal: Const { ty: &[E; 2], val: Unevaluated(D, [], None) }
        StorageLive(_2);                 // scope 0 at ui/consts/const-enum-vec-index.rs:9:18: 9:19
        _2 = const 0_usize;              // scope 0 at ui/consts/const-enum-vec-index.rs:9:18: 9:19
        _3 = Len((*_1));                 // scope 0 at ui/consts/const-enum-vec-index.rs:9:16: 9:20
        _4 = Lt(_2, _3);                 // scope 0 at ui/consts/const-enum-vec-index.rs:9:16: 9:20
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1; // scope 0 at ui/consts/const-enum-vec-index.rs:9:16: 9:20
    }

    bb1: {
        _0 = (*_1)[_2];                  // scope 0 at ui/consts/const-enum-vec-index.rs:9:16: 9:20
        StorageDead(_2);                 // scope 0 at ui/consts/const-enum-vec-index.rs:9:19: 9:20
        StorageDead(_1);                 // scope 0 at ui/consts/const-enum-vec-index.rs:9:19: 9:20
        return;                          // scope 0 at ui/consts/const-enum-vec-index.rs:9:1: 9:21
    }
}

static D1: E = {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const-enum-vec-index.rs:10:12: 10:13
    let mut _1: &[E; 2];                 // in scope 0 at ui/consts/const-enum-vec-index.rs:10:16: 10:17
    let _2: usize;                       // in scope 0 at ui/consts/const-enum-vec-index.rs:10:18: 10:19
    let mut _3: usize;                   // in scope 0 at ui/consts/const-enum-vec-index.rs:10:16: 10:20
    let mut _4: bool;                    // in scope 0 at ui/consts/const-enum-vec-index.rs:10:16: 10:20

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-enum-vec-index.rs:10:16: 10:17
        _1 = const _;                    // scope 0 at ui/consts/const-enum-vec-index.rs:10:16: 10:17
                                         // mir::Constant
                                         // + span: ui/consts/const-enum-vec-index.rs:10:16: 10:17
                                         // + literal: Const { ty: &[E; 2], val: Unevaluated(D, [], None) }
        StorageLive(_2);                 // scope 0 at ui/consts/const-enum-vec-index.rs:10:18: 10:19
        _2 = const 1_usize;              // scope 0 at ui/consts/const-enum-vec-index.rs:10:18: 10:19
        _3 = Len((*_1));                 // scope 0 at ui/consts/const-enum-vec-index.rs:10:16: 10:20
        _4 = Lt(_2, _3);                 // scope 0 at ui/consts/const-enum-vec-index.rs:10:16: 10:20
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1; // scope 0 at ui/consts/const-enum-vec-index.rs:10:16: 10:20
    }

    bb1: {
        _0 = (*_1)[_2];                  // scope 0 at ui/consts/const-enum-vec-index.rs:10:16: 10:20
        StorageDead(_2);                 // scope 0 at ui/consts/const-enum-vec-index.rs:10:19: 10:20
        StorageDead(_1);                 // scope 0 at ui/consts/const-enum-vec-index.rs:10:19: 10:20
        return;                          // scope 0 at ui/consts/const-enum-vec-index.rs:10:1: 10:21
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-enum-vec-index.rs:12:15: 12:15
    let mut _1: &E;                      // in scope 0 at ui/consts/const-enum-vec-index.rs:17:11: 17:13
    let _2: isize;                       // in scope 0 at ui/consts/const-enum-vec-index.rs:18:15: 18:16
    let mut _3: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _5: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _20: &E;                     // in scope 0 at ui/consts/const-enum-vec-index.rs:26:11: 26:13
    let _21: isize;                      // in scope 0 at ui/consts/const-enum-vec-index.rs:27:15: 27:16
    let mut _22: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _23: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _24: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _27: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _28: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _29: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _30: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _32: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _33: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _34: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _35: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _36: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _37: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug n => _2;                   // in scope 1 at ui/consts/const-enum-vec-index.rs:18:15: 18:16
        let _6: &isize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _7: &isize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _40: &isize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _6;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _7;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _12: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _12;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 4 {
        debug n => _21;                  // in scope 4 at ui/consts/const-enum-vec-index.rs:27:15: 27:16
        let _25: &isize;                 // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _26: &isize;                 // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _39: &isize;             // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 5 {
            debug left_val => _25;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _26;      // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _31: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 6 {
                debug kind => _31;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = const {alloc2: &E};         // scope 0 at ui/consts/const-enum-vec-index.rs:17:11: 17:13
                                         // mir::Constant
                                         // + span: ui/consts/const-enum-vec-index.rs:17:11: 17:13
                                         // + literal: Const { ty: &E, val: Value(Scalar(alloc2)) }
        _2 = (((*_1) as V1).0: isize);   // scope 0 at ui/consts/const-enum-vec-index.rs:18:15: 18:16
        _4 = &_2;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _40 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[1])) }
        _5 = _40;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _5);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_3.0: &isize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_3.1: &isize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = (*_6);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = const 233495534_isize;     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = Eq(move _10, move _11);     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _8 = Not(move _9);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb2, otherwise: bb1]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _12 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<isize, isize>(move _14, move _15, move _17, move _19); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb2: {
        _20 = const {alloc4: &E};        // scope 0 at ui/consts/const-enum-vec-index.rs:26:11: 26:13
                                         // mir::Constant
                                         // + span: ui/consts/const-enum-vec-index.rs:26:11: 26:13
                                         // + literal: Const { ty: &E, val: Value(Scalar(alloc4)) }
        _21 = (((*_20) as V1).0: isize); // scope 0 at ui/consts/const-enum-vec-index.rs:27:15: 27:16
        _23 = &_21;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _39 = const _;                   // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _24 = _39;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _22 = (move _23, move _24);      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _25 = (_22.0: &isize);           // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _26 = (_22.1: &isize);           // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _29 = (*_25);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _30 = const 233503726_isize;     // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _28 = Eq(move _29, move _30);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _27 = Not(move _28);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _27) -> [0: bb4, otherwise: bb3]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _31 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = _25;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _35;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _26;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = _37;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _32 = core::panicking::assert_failed::<isize, isize>(move _33, move _34, move _36, move _38); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/consts/const-enum-vec-index.rs:30:2: 30:2
    }
}

alloc4 (static: D1, size: 16, align: 8) {
    00 00 00 00 00 00 00 00 ee fb ea 0d 00 00 00 00 │ ................
}

alloc2 (static: C1, size: 16, align: 8) {
    00 00 00 00 00 00 00 00 ee db ea 0d 00 00 00 00 │ ................
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/consts/const-enum-vec-index.rs:27:35: 27:44

    bb0: {
        _1 = const 233503726_isize;      // scope 0 at ui/consts/const-enum-vec-index.rs:27:35: 27:44
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/consts/const-enum-vec-index.rs:18:35: 18:44

    bb0: {
        _1 = const 233495534_isize;      // scope 0 at ui/consts/const-enum-vec-index.rs:18:35: 18:44
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn E::V1(_1: isize) -> E {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const-enum-vec-index.rs:3:10: 3:12

    bb0: {
        _0 = E::V1(move _1);             // scope 0 at ui/consts/const-enum-vec-index.rs:3:10: 3:12
        return;                          // scope 0 at ui/consts/const-enum-vec-index.rs:3:10: 3:12
    }
}

// MIR FOR CTFE
fn E::V1(_1: isize) -> E {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const-enum-vec-index.rs:3:10: 3:12

    bb0: {
        _0 = E::V1(move _1);             // scope 0 at ui/consts/const-enum-vec-index.rs:3:10: 3:12
        return;                          // scope 0 at ui/consts/const-enum-vec-index.rs:3:10: 3:12
    }
}
