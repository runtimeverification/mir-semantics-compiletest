// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const EMPTY_SLICE: &[i32] = {
    let mut _0: &[i32];                  // return place in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:6:20: 6:26
    let mut _1: &[i32; 0];               // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:6:29: 6:32
    let _2: &[i32; 0];                   // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:6:29: 6:32
    let _3: [i32; 0];                    // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:6:30: 6:32
    let mut _4: &[i32; 0];               // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:6:29: 6:32

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:6:29: 6:32
        StorageLive(_2);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:6:29: 6:32
        _4 = const _;                    // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:6:29: 6:32
                                         // mir::Constant
                                         // + span: ui/consts/miri_unleashed/slice_eq.rs:6:29: 6:32
                                         // + literal: Const { ty: &[i32; 0], val: Unevaluated(EMPTY_SLICE, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:6:29: 6:32
        _1 = &(*_2);                     // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:6:29: 6:32
        _0 = move _1 as &[i32] (Pointer(Unsize)); // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:6:29: 6:32
        StorageDead(_2);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:6:31: 6:32
        StorageDead(_1);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:6:31: 6:32
        return;                          // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:6:1: 6:33
    }
}

promoted[0] in EMPTY_SLICE: &[i32; 0] = {
    let mut _0: &[i32; 0];               // return place in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:6:29: 6:32
    let mut _1: [i32; 0];                // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:6:30: 6:32

    bb0: {
        _1 = [];                         // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:6:30: 6:32
        _0 = &_1;                        // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:6:29: 6:32
        return;                          // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:6:29: 6:32
    }
}

const EMPTY_EQ: Option<bool> = {
    let mut _0: std::option::Option<bool>; // return place in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:17: 7:29
    let mut _1: *const i32;              // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:32: 7:52
    let mut _2: &[i32];                  // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:32: 7:52
    let _3: &[i32];                      // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:32: 7:43
    let mut _4: *const i32;              // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:67: 7:82
    let mut _5: *const i32;              // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:67: 7:82
    let mut _6: *const [i32; 0];         // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:67: 7:70
    let _7: &[i32; 0];                   // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:67: 7:70
    let _8: [i32; 0];                    // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:68: 7:70
    let mut _9: &[i32; 0];               // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:67: 7:70

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:32: 7:52
        StorageLive(_2);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:32: 7:52
        StorageLive(_3);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:32: 7:43
        _3 = const _;                    // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:32: 7:43
                                         // mir::Constant
                                         // + span: ui/consts/miri_unleashed/slice_eq.rs:7:32: 7:43
                                         // + literal: Const { ty: &[i32], val: Unevaluated(EMPTY_SLICE, [], None) }
        _2 = &(*_3);                     // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:32: 7:52
        ConstEvalCounter;                // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:32: 7:52
        _1 = core::slice::<impl [i32]>::as_ptr(move _2) -> bb1; // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:32: 7:52
                                         // mir::Constant
                                         // + span: ui/consts/miri_unleashed/slice_eq.rs:7:44: 7:50
                                         // + literal: Const { ty: for<'a> fn(&'a [i32]) -> *const i32 {core::slice::<impl [i32]>::as_ptr}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:51: 7:52
        StorageLive(_4);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:67: 7:82
        StorageLive(_5);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:67: 7:82
        StorageLive(_6);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:67: 7:70
        StorageLive(_7);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:67: 7:70
        _9 = const _;                    // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:67: 7:70
                                         // mir::Constant
                                         // + span: ui/consts/miri_unleashed/slice_eq.rs:7:67: 7:70
                                         // + literal: Const { ty: &[i32; 0], val: Unevaluated(EMPTY_EQ, [], Some(promoted[0])) }
        _7 = &(*_9);                     // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:67: 7:70
        _6 = &raw const (*_7);           // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:67: 7:70
        _5 = move _6 as *const i32 (Pointer(ArrayToPointer)); // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:67: 7:82
        _4 = _5;                         // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:67: 7:82
        StorageDead(_6);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:81: 7:82
        ConstEvalCounter;                // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:32: 7:83
        _0 = ptr::const_ptr::<impl *const i32>::guaranteed_eq(move _1, move _4) -> bb2; // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:32: 7:83
                                         // mir::Constant
                                         // + span: ui/consts/miri_unleashed/slice_eq.rs:7:53: 7:66
                                         // + literal: Const { ty: fn(*const i32, *const i32) -> Option<bool> {ptr::const_ptr::<impl *const i32>::guaranteed_eq}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_7);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:82: 7:83
        StorageDead(_5);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:82: 7:83
        StorageDead(_4);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:82: 7:83
        StorageDead(_3);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:82: 7:83
        StorageDead(_1);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:82: 7:83
        return;                          // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:1: 7:84
    }
}

promoted[0] in EMPTY_EQ: &[i32; 0] = {
    let mut _0: &[i32; 0];               // return place in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:67: 7:70
    let mut _1: [i32; 0];                // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:68: 7:70

    bb0: {
        _1 = [];                         // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:68: 7:70
        _0 = &_1;                        // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:67: 7:70
        return;                          // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:7:67: 7:70
    }
}

const EMPTY_EQ2: Option<bool> = {
    let mut _0: std::option::Option<bool>; // return place in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:18: 8:30
    let mut _1: *const i32;              // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:33: 8:53
    let mut _2: &[i32];                  // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:33: 8:53
    let _3: &[i32];                      // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:33: 8:44
    let mut _4: *const i32;              // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:68: 8:84
    let mut _5: *const i32;              // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:68: 8:84
    let mut _6: *const [i32; 1];         // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:68: 8:72
    let _7: &[i32; 1];                   // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:68: 8:72
    let _8: [i32; 1];                    // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:69: 8:72
    let mut _9: &[i32; 1];               // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:68: 8:72

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:33: 8:53
        StorageLive(_2);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:33: 8:53
        StorageLive(_3);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:33: 8:44
        _3 = const _;                    // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:33: 8:44
                                         // mir::Constant
                                         // + span: ui/consts/miri_unleashed/slice_eq.rs:8:33: 8:44
                                         // + literal: Const { ty: &[i32], val: Unevaluated(EMPTY_SLICE, [], None) }
        _2 = &(*_3);                     // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:33: 8:53
        ConstEvalCounter;                // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:33: 8:53
        _1 = core::slice::<impl [i32]>::as_ptr(move _2) -> bb1; // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:33: 8:53
                                         // mir::Constant
                                         // + span: ui/consts/miri_unleashed/slice_eq.rs:8:45: 8:51
                                         // + literal: Const { ty: for<'a> fn(&'a [i32]) -> *const i32 {core::slice::<impl [i32]>::as_ptr}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:52: 8:53
        StorageLive(_4);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:68: 8:84
        StorageLive(_5);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:68: 8:84
        StorageLive(_6);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:68: 8:72
        StorageLive(_7);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:68: 8:72
        _9 = const _;                    // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:68: 8:72
                                         // mir::Constant
                                         // + span: ui/consts/miri_unleashed/slice_eq.rs:8:68: 8:72
                                         // + literal: Const { ty: &[i32; 1], val: Unevaluated(EMPTY_EQ2, [], Some(promoted[0])) }
        _7 = &(*_9);                     // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:68: 8:72
        _6 = &raw const (*_7);           // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:68: 8:72
        _5 = move _6 as *const i32 (Pointer(ArrayToPointer)); // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:68: 8:84
        _4 = _5;                         // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:68: 8:84
        StorageDead(_6);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:83: 8:84
        ConstEvalCounter;                // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:33: 8:85
        _0 = ptr::const_ptr::<impl *const i32>::guaranteed_eq(move _1, move _4) -> bb2; // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:33: 8:85
                                         // mir::Constant
                                         // + span: ui/consts/miri_unleashed/slice_eq.rs:8:54: 8:67
                                         // + literal: Const { ty: fn(*const i32, *const i32) -> Option<bool> {ptr::const_ptr::<impl *const i32>::guaranteed_eq}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_7);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:84: 8:85
        StorageDead(_5);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:84: 8:85
        StorageDead(_4);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:84: 8:85
        StorageDead(_3);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:84: 8:85
        StorageDead(_1);                 // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:84: 8:85
        return;                          // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:1: 8:86
    }
}

promoted[0] in EMPTY_EQ2: &[i32; 1] = {
    let mut _0: &[i32; 1];               // return place in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:68: 8:72
    let mut _1: [i32; 1];                // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:69: 8:72

    bb0: {
        _1 = [const 1_i32];              // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:69: 8:72
        _0 = &_1;                        // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:68: 8:72
        return;                          // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:8:68: 8:72
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:10:11: 10:11
    let mut _1: bool;                    // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:11:5: 11:32
    let mut _2: bool;                    // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:11:13: 11:31
    let mut _3: &std::option::Option<bool>; // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:11:13: 11:31
    let mut _4: !;                       // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:11:5: 11:32
    let mut _5: bool;                    // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:12:5: 12:33
    let mut _6: bool;                    // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:12:13: 12:32
    let mut _7: &std::option::Option<bool>; // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:12:13: 12:32
    let mut _8: !;                       // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:12:5: 12:33
    let mut _9: &std::option::Option<bool>; // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:12:13: 12:32
    let mut _10: &std::option::Option<bool>; // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:11:13: 11:31

    bb0: {
        _10 = const _;                   // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:11:13: 11:31
                                         // mir::Constant
                                         // + span: ui/consts/miri_unleashed/slice_eq.rs:11:13: 11:31
                                         // + literal: Const { ty: &Option<bool>, val: Unevaluated(main, [], Some(promoted[1])) }
        _3 = _10;                        // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:11:13: 11:31
        _2 = Option::<bool>::is_none(move _3) -> bb1; // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:11:13: 11:31
                                         // mir::Constant
                                         // + span: ui/consts/miri_unleashed/slice_eq.rs:11:22: 11:29
                                         // + literal: Const { ty: for<'a> fn(&'a Option<bool>) -> bool {Option::<bool>::is_none}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Not(move _2);               // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:11:5: 11:32
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:11:5: 11:32
    }

    bb2: {
        _4 = core::panicking::panic(const "assertion failed: EMPTY_EQ.is_none()"); // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:11:5: 11:32
                                         // mir::Constant
                                         // + span: ui/consts/miri_unleashed/slice_eq.rs:11:5: 11:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _9 = const _;                    // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:12:13: 12:32
                                         // mir::Constant
                                         // + span: ui/consts/miri_unleashed/slice_eq.rs:12:13: 12:32
                                         // + literal: Const { ty: &Option<bool>, val: Unevaluated(main, [], Some(promoted[0])) }
        _7 = _9;                         // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:12:13: 12:32
        _6 = Option::<bool>::is_none(move _7) -> bb4; // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:12:13: 12:32
                                         // mir::Constant
                                         // + span: ui/consts/miri_unleashed/slice_eq.rs:12:23: 12:30
                                         // + literal: Const { ty: for<'a> fn(&'a Option<bool>) -> bool {Option::<bool>::is_none}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = Not(move _6);               // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:12:5: 12:33
        switchInt(move _5) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:12:5: 12:33
    }

    bb5: {
        _8 = core::panicking::panic(const "assertion failed: EMPTY_EQ2.is_none()"); // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:12:5: 12:33
                                         // mir::Constant
                                         // + span: ui/consts/miri_unleashed/slice_eq.rs:12:5: 12:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        return;                          // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:13:2: 13:2
    }
}

promoted[0] in main: &Option<bool> = {
    let mut _0: &std::option::Option<bool>; // return place in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:12:13: 12:32
    let mut _1: std::option::Option<bool>; // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:12:13: 12:22

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:12:13: 12:22
                                         // mir::Constant
                                         // + span: ui/consts/miri_unleashed/slice_eq.rs:12:13: 12:22
                                         // + literal: Const { ty: Option<bool>, val: Unevaluated(EMPTY_EQ2, [], None) }
        _0 = &_1;                        // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:12:13: 12:32
        return;                          // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:12:13: 12:32
    }
}

promoted[1] in main: &Option<bool> = {
    let mut _0: &std::option::Option<bool>; // return place in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:11:13: 11:31
    let mut _1: std::option::Option<bool>; // in scope 0 at ui/consts/miri_unleashed/slice_eq.rs:11:13: 11:21

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:11:13: 11:21
                                         // mir::Constant
                                         // + span: ui/consts/miri_unleashed/slice_eq.rs:11:13: 11:21
                                         // + literal: Const { ty: Option<bool>, val: Unevaluated(EMPTY_EQ, [], None) }
        _0 = &_1;                        // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:11:13: 11:31
        return;                          // scope 0 at ui/consts/miri_unleashed/slice_eq.rs:11:13: 11:31
    }
}
