// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static C: &[E] = {
    let mut _0: &[E];
    let mut _1: &[E; 3];
    let _2: &[E; 3];
    let _3: [E; 3];
    let mut _4: E;
    let mut _5: E;
    let mut _6: E;
    let mut _7: &[E; 3];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _7 = const _;
        _2 = &(*_7);
        _1 = &(*_2);
        _0 = move _1 as &[E] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in C: &[E; 3] = {
    let mut _0: &[E; 3];
    let mut _1: [E; 3];
    let mut _2: E;
    let mut _3: E;
    let mut _4: E;

    bb0: {
        _2 = E::V0;
        _3 = E::V1(const 233495534_isize);
        _4 = E::V0;
        _1 = [move _2, move _3, move _4];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: &&[E];
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;
    let mut _5: isize;
    let _6: isize;
    let mut _7: (&isize, &isize);
    let mut _8: &isize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: isize;
    let mut _14: isize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: !;
    let mut _19: &&[E];
    let _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    let mut _23: isize;
    let mut _24: !;
    let mut _26: &[E];
    let mut _27: &[E];
    let mut _28: &[E];
    let mut _29: &[E];
    let mut _30: &[E];
    scope 1 {
        debug n => _6;
        let _9: &isize;
        let _10: &isize;
        let mut _25: &isize;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
    }

    bb0: {
        _1 = const {alloc1: &&[E]};
        _2 = const 1_usize;
        _26 = deref_copy (*_1);
        _3 = Len((*_26));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        _27 = deref_copy (*_1);
        _5 = discriminant((*_27)[_2]);
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _18 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb3: {
        _28 = deref_copy (*_1);
        _6 = (((*_28)[_2] as V1).0: isize);
        _8 = &_6;
        _25 = const _;
        _7 = (move _8, _25);
        _9 = (_7.0: &isize);
        _10 = (_7.1: &isize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<isize, isize>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb5: {
        _19 = const {alloc1: &&[E]};
        _20 = const 2_usize;
        _29 = deref_copy (*_19);
        _21 = Len((*_29));
        _22 = Lt(_20, _21);
        assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> [success: bb6, unwind continue];
    }

    bb6: {
        _30 = deref_copy (*_19);
        _23 = discriminant((*_30)[_20]);
        switchInt(move _23) -> [1: bb8, otherwise: bb7];
    }

    bb7: {
        _24 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb8: {
        return;
    }
}

alloc1 (static: C, size: 16, align: 8) {
    ╾───────alloc8────────╼ 03 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc8 (size: 48, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
    0x10 │ 00 00 00 00 00 00 00 00 ee db ea 0d 00 00 00 00 │ ................
    0x20 │ 01 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 233495534_isize;
        _0 = &_1;
        return;
    }
}

fn E::V1(_1: isize) -> E {
    let mut _0: E;

    bb0: {
        _0 = E::V1(move _1);
        return;
    }
}

// MIR FOR CTFE
fn E::V1(_1: isize) -> E {
    let mut _0: E;

    bb0: {
        _0 = E::V1(move _1);
        return;
    }
}
