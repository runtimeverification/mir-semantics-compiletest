// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static C: &[E] = {
    let mut _0: &[E];                    // return place in scope 0 at ui/consts/const-enum-vec-ptr.rs:4:11: 4:23
    let mut _1: &[E; 3];                 // in scope 0 at ui/consts/const-enum-vec-ptr.rs:4:26: 4:59
    let _2: &[E; 3];                     // in scope 0 at ui/consts/const-enum-vec-ptr.rs:4:26: 4:59
    let _3: [E; 3];                      // in scope 0 at ui/consts/const-enum-vec-ptr.rs:4:27: 4:59
    let mut _4: E;                       // in scope 0 at ui/consts/const-enum-vec-ptr.rs:4:28: 4:33
    let mut _5: E;                       // in scope 0 at ui/consts/const-enum-vec-ptr.rs:4:35: 4:51
    let mut _6: E;                       // in scope 0 at ui/consts/const-enum-vec-ptr.rs:4:53: 4:58
    let mut _7: &[E; 3];                 // in scope 0 at ui/consts/const-enum-vec-ptr.rs:4:26: 4:59

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-enum-vec-ptr.rs:4:26: 4:59
        StorageLive(_2);                 // scope 0 at ui/consts/const-enum-vec-ptr.rs:4:26: 4:59
        _7 = const _;                    // scope 0 at ui/consts/const-enum-vec-ptr.rs:4:26: 4:59
                                         // mir::Constant
                                         // + span: ui/consts/const-enum-vec-ptr.rs:4:26: 4:59
                                         // + literal: Const { ty: &[E; 3], val: Unevaluated(C, [], Some(promoted[0])) }
        _2 = &(*_7);                     // scope 0 at ui/consts/const-enum-vec-ptr.rs:4:26: 4:59
        _1 = &(*_2);                     // scope 0 at ui/consts/const-enum-vec-ptr.rs:4:26: 4:59
        _0 = move _1 as &[E] (Pointer(Unsize)); // scope 0 at ui/consts/const-enum-vec-ptr.rs:4:26: 4:59
        StorageDead(_2);                 // scope 0 at ui/consts/const-enum-vec-ptr.rs:4:58: 4:59
        StorageDead(_1);                 // scope 0 at ui/consts/const-enum-vec-ptr.rs:4:58: 4:59
        return;                          // scope 0 at ui/consts/const-enum-vec-ptr.rs:4:1: 4:60
    }
}

promoted[0] in C: &[E; 3] = {
    let mut _0: &[E; 3];                 // return place in scope 0 at ui/consts/const-enum-vec-ptr.rs:4:26: 4:59
    let mut _1: [E; 3];                  // in scope 0 at ui/consts/const-enum-vec-ptr.rs:4:27: 4:59
    let mut _2: E;                       // in scope 0 at ui/consts/const-enum-vec-ptr.rs:4:28: 4:33
    let mut _3: E;                       // in scope 0 at ui/consts/const-enum-vec-ptr.rs:4:35: 4:51
    let mut _4: E;                       // in scope 0 at ui/consts/const-enum-vec-ptr.rs:4:53: 4:58

    bb0: {
        _2 = E::V0;                      // scope 0 at ui/consts/const-enum-vec-ptr.rs:4:28: 4:33
        _3 = E::V1(const 233495534_isize); // scope 0 at ui/consts/const-enum-vec-ptr.rs:4:35: 4:51
        _4 = E::V0;                      // scope 0 at ui/consts/const-enum-vec-ptr.rs:4:53: 4:58
        _1 = [move _2, move _3, move _4]; // scope 0 at ui/consts/const-enum-vec-ptr.rs:4:27: 4:59
        _0 = &_1;                        // scope 0 at ui/consts/const-enum-vec-ptr.rs:4:26: 4:59
        return;                          // scope 0 at ui/consts/const-enum-vec-ptr.rs:4:26: 4:59
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-enum-vec-ptr.rs:6:15: 6:15
    let mut _1: &&[E];                   // in scope 0 at ui/consts/const-enum-vec-ptr.rs:7:11: 7:12
    let _2: usize;                       // in scope 0 at ui/consts/const-enum-vec-ptr.rs:7:13: 7:14
    let _3: isize;                       // in scope 0 at ui/consts/const-enum-vec-ptr.rs:8:15: 8:16
    let mut _4: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _6: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: &[E];                   // in scope 0 at ui/consts/const-enum-vec-ptr.rs:7:11: 7:12
    scope 1 {
        debug n => _3;                   // in scope 1 at ui/consts/const-enum-vec-ptr.rs:8:15: 8:16
        let _7: &isize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _8: &isize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _21: &isize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _7;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _8;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _13: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _13;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = const {alloc1: &&[E]};      // scope 0 at ui/consts/const-enum-vec-ptr.rs:7:11: 7:12
                                         // mir::Constant
                                         // + span: ui/consts/const-enum-vec-ptr.rs:7:11: 7:12
                                         // + literal: Const { ty: &&[E], val: Value(Scalar(alloc1)) }
        _2 = const 1_usize;              // scope 0 at ui/consts/const-enum-vec-ptr.rs:7:13: 7:14
        _22 = deref_copy (*_1);          // scope 0 at ui/consts/const-enum-vec-ptr.rs:8:15: 8:16
        _3 = (((*_22)[_2] as V1).0: isize); // scope 0 at ui/consts/const-enum-vec-ptr.rs:8:15: 8:16
        _5 = &_3;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _21 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _6 = _21;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _6);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_4.0: &isize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_4.1: &isize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = const 233495534_isize;     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<isize, isize>(move _15, move _16, move _18, move _20); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/consts/const-enum-vec-ptr.rs:15:2: 15:2
    }
}

alloc1 (static: C, size: 16, align: 8) {
    ╾───────alloc7────────╼ 03 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc7 (size: 48, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
    0x10 │ 00 00 00 00 00 00 00 00 ee db ea 0d 00 00 00 00 │ ................
    0x20 │ 01 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/consts/const-enum-vec-ptr.rs:8:35: 8:44

    bb0: {
        _1 = const 233495534_isize;      // scope 0 at ui/consts/const-enum-vec-ptr.rs:8:35: 8:44
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn E::V1(_1: isize) -> E {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const-enum-vec-ptr.rs:3:10: 3:12

    bb0: {
        _0 = E::V1(move _1);             // scope 0 at ui/consts/const-enum-vec-ptr.rs:3:10: 3:12
        return;                          // scope 0 at ui/consts/const-enum-vec-ptr.rs:3:10: 3:12
    }
}

// MIR FOR CTFE
fn E::V1(_1: isize) -> E {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const-enum-vec-ptr.rs:3:10: 3:12

    bb0: {
        _0 = E::V1(move _1);             // scope 0 at ui/consts/const-enum-vec-ptr.rs:3:10: 3:12
        return;                          // scope 0 at ui/consts/const-enum-vec-ptr.rs:3:10: 3:12
    }
}
