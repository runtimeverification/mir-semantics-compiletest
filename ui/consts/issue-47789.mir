// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut x: &u32 = {
    let mut _0: &u32;
    let _1: &u32;
    let _2: u32;
    let mut _3: &u32;

    bb0: {
        StorageLive(_1);
        _3 = const _;
        _1 = &(*_3);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in x: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 0_u32;
        _0 = &_1;
        return;
    }
}

fn foo() -> () {
    let mut _0: ();
    let mut _1: *mut &u32;
    scope 1 {
        let mut _2: &u32;
        let mut _3: *const ();
        let mut _4: usize;
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: bool;
    }

    bb0: {
        _2 = const _;
        _1 = const {alloc1: *mut &u32};
        _3 = _1 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(&u32);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb1, unwind unreachable];
    }

    bb1: {
        (*_1) = _2;
        return;
    }
}

alloc1 (static: x, size: 8, align: 8) {
    ╾───────alloc8────────╼                         │ ╾──────╼
}

alloc8 (size: 4, align: 4) {
    00 00 00 00                                     │ ....
}

promoted[0] in foo: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 1_u32;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
