// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const-size_of_val-align_of_val.rs:10:10: 10:15>::clone(_1: &Bar) -> Bar {
    debug self => _1;
    let mut _0: Bar;
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

Ugh::_a::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

const FOO: Foo = {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(const 4_u32);
        return;
    }
}

const BAR: Bar = {
    let mut _0: Bar;

    bb0: {
        _0 = Bar { _x: const 4_u8, _y: const 1_u16, _z: const 2_u8 };
        return;
    }
}

const UGH: Ugh = {
    let mut _0: Ugh;
    let mut _1: [u8; 3];

    bb0: {
        StorageLive(_1);
        _1 = [const 0_u8; 3];
        _0 = Ugh { _a: move _1 };
        StorageDead(_1);
        return;
    }
}

UGH::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

const SIZE_OF_FOO: usize = {
    let mut _0: usize;
    let mut _1: &Foo;
    let _2: &Foo;
    let _3: Foo;
    let mut _4: &Foo;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = std::mem::size_of_val::<Foo>(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in SIZE_OF_FOO: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

const SIZE_OF_BAR: usize = {
    let mut _0: usize;
    let mut _1: &Bar;
    let _2: &Bar;
    let _3: Bar;
    let mut _4: &Bar;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = std::mem::size_of_val::<Bar>(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in SIZE_OF_BAR: &Bar = {
    let mut _0: &Bar;
    let mut _1: Bar;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

const SIZE_OF_UGH: usize = {
    let mut _0: usize;
    let mut _1: &Ugh;
    let _2: &Ugh;
    let _3: Ugh;
    let mut _4: &Ugh;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = std::mem::size_of_val::<Ugh>(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in SIZE_OF_UGH: &Ugh = {
    let mut _0: &Ugh;
    let mut _1: Ugh;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

const ALIGN_OF_FOO: usize = {
    let mut _0: usize;
    let mut _1: &Foo;
    let _2: &Foo;
    let _3: Foo;
    let mut _4: &Foo;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = align_of_val::<Foo>(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in ALIGN_OF_FOO: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

const ALIGN_OF_BAR: usize = {
    let mut _0: usize;
    let mut _1: &Bar;
    let _2: &Bar;
    let _3: Bar;
    let mut _4: &Bar;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = align_of_val::<Bar>(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in ALIGN_OF_BAR: &Bar = {
    let mut _0: &Bar;
    let mut _1: Bar;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

const ALIGN_OF_UGH: usize = {
    let mut _0: usize;
    let mut _1: &Ugh;
    let _2: &Ugh;
    let _3: Ugh;
    let mut _4: &Ugh;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = align_of_val::<Ugh>(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in ALIGN_OF_UGH: &Ugh = {
    let mut _0: &Ugh;
    let mut _1: Ugh;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

const SIZE_OF_SLICE: usize = {
    let mut _0: usize;
    let mut _1: &[u8];
    let _2: &[u8];
    let mut _3: &str;
    let _4: &str;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = const "foobar";
        _3 = &(*_4);
        ConstEvalCounter;
        _2 = core::str::<impl str>::as_bytes(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = &(*_2);
        StorageDead(_3);
        ConstEvalCounter;
        _0 = std::mem::size_of_val::<[u8]>(move _1) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_4);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const SIZE_OF_DANGLING: usize = {
    let mut _0: usize;
    let mut _1: *const i32;
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        _1 = const 256_usize as *const i32 (PointerFromExposedAddress);
        ConstEvalCounter;
        _0 = size_of_val_raw::<i32>(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}

const SIZE_OF_BIG: usize = {
    let mut _0: usize;
    let mut _1: *const [u8];
    let mut _2: *const u8;
    let mut _3: usize;
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const 0_usize as *const u8 (PointerFromExposedAddress);
        StorageLive(_3);
        _3 = const _ as usize (IntToInt);
        ConstEvalCounter;
        _1 = slice_from_raw_parts::<u8>(move _2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageDead(_2);
        ConstEvalCounter;
        _0 = size_of_val_raw::<[u8]>(move _1) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_1);
        return;
    }
}

const ALIGN_OF_DANGLING: usize = {
    let mut _0: usize;
    let mut _1: *const i16;
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        _1 = const 256_usize as *const i16 (PointerFromExposedAddress);
        ConstEvalCounter;
        _0 = align_of_val_raw::<i16>(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let _2: &usize;
    let _3: &usize;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&usize, &usize);
    let _12: &usize;
    let _13: &usize;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: usize;
    let mut _17: usize;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&usize, &usize);
    let _22: &usize;
    let _23: &usize;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: usize;
    let mut _27: usize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&usize, &usize);
    let _32: &usize;
    let _33: &usize;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: usize;
    let mut _37: usize;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&usize, &usize);
    let _42: &usize;
    let _43: &usize;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: usize;
    let mut _47: usize;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: (&usize, &usize);
    let _52: &usize;
    let _53: &usize;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: usize;
    let mut _57: usize;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&usize, &usize);
    let _62: &usize;
    let _63: &usize;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: usize;
    let mut _67: usize;
    let _69: !;
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _71: (&usize, &usize);
    let _72: &usize;
    let _73: &usize;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: usize;
    let mut _77: usize;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _81: (&usize, &usize);
    let _82: &usize;
    let _83: &usize;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: usize;
    let mut _87: usize;
    let _89: !;
    let mut _90: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _91: (&usize, &usize);
    let mut _92: &usize;
    let _93: usize;
    let _94: &str;
    let _95: &usize;
    let _96: &usize;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: usize;
    let mut _100: usize;
    let _102: !;
    let mut _103: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _104: &usize;
    let mut _105: &usize;
    let mut _106: &usize;
    let mut _107: &usize;
    let mut _108: &usize;
    let mut _109: &usize;
    let mut _110: &usize;
    let mut _111: &usize;
    let mut _112: &usize;
    let mut _113: &usize;
    let mut _114: &usize;
    let mut _115: &usize;
    let mut _116: &usize;
    let mut _117: &usize;
    let mut _118: &usize;
    let mut _119: &usize;
    let mut _120: &usize;
    let mut _121: &usize;
    let mut _122: &usize;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _12;
        debug right_val => _13;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 6 {
            debug kind => _28;
        }
    }
    scope 7 {
        debug left_val => _32;
        debug right_val => _33;
        let _38: core::panicking::AssertKind;
        scope 8 {
            debug kind => _38;
        }
    }
    scope 9 {
        debug left_val => _42;
        debug right_val => _43;
        let _48: core::panicking::AssertKind;
        scope 10 {
            debug kind => _48;
        }
    }
    scope 11 {
        debug left_val => _52;
        debug right_val => _53;
        let _58: core::panicking::AssertKind;
        scope 12 {
            debug kind => _58;
        }
    }
    scope 13 {
        debug left_val => _62;
        debug right_val => _63;
        let _68: core::panicking::AssertKind;
        scope 14 {
            debug kind => _68;
        }
    }
    scope 15 {
        debug left_val => _72;
        debug right_val => _73;
        let _78: core::panicking::AssertKind;
        scope 16 {
            debug kind => _78;
        }
    }
    scope 17 {
        debug left_val => _82;
        debug right_val => _83;
        let _88: core::panicking::AssertKind;
        scope 18 {
            debug kind => _88;
        }
    }
    scope 19 {
        debug left_val => _95;
        debug right_val => _96;
        let _101: core::panicking::AssertKind;
        scope 20 {
            debug kind => _101;
        }
    }

    bb0: {
        _122 = const _;
        _121 = const _;
        _1 = (_122, _121);
        _2 = (_1.0: &usize);
        _3 = (_1.1: &usize);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<usize, usize>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        _120 = const _;
        _119 = const _;
        _11 = (_120, _119);
        _12 = (_11.0: &usize);
        _13 = (_11.1: &usize);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<usize, usize>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb4: {
        _118 = const _;
        _117 = const _;
        _21 = (_118, _117);
        _22 = (_21.0: &usize);
        _23 = (_21.1: &usize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<usize, usize>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb6: {
        _116 = const _;
        _115 = const _;
        _31 = (_116, _115);
        _32 = (_31.0: &usize);
        _33 = (_31.1: &usize);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<usize, usize>(move _38, _32, _33, move _40) -> unwind continue;
    }

    bb8: {
        _114 = const _;
        _113 = const _;
        _41 = (_114, _113);
        _42 = (_41.0: &usize);
        _43 = (_41.1: &usize);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<usize, usize>(move _48, _42, _43, move _50) -> unwind continue;
    }

    bb10: {
        _112 = const _;
        _111 = const _;
        _51 = (_112, _111);
        _52 = (_51.0: &usize);
        _53 = (_51.1: &usize);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<usize, usize>(move _58, _52, _53, move _60) -> unwind continue;
    }

    bb12: {
        _110 = const _;
        _109 = const _;
        _61 = (_110, _109);
        _62 = (_61.0: &usize);
        _63 = (_61.1: &usize);
        _66 = (*_62);
        _67 = (*_63);
        _65 = Eq(move _66, move _67);
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _68 = core::panicking::AssertKind::Eq;
        _70 = Option::<Arguments<'_>>::None;
        _69 = core::panicking::assert_failed::<usize, usize>(move _68, _62, _63, move _70) -> unwind continue;
    }

    bb14: {
        _108 = const _;
        _107 = const _;
        _71 = (_108, _107);
        _72 = (_71.0: &usize);
        _73 = (_71.1: &usize);
        _76 = (*_72);
        _77 = (*_73);
        _75 = Eq(move _76, move _77);
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<usize, usize>(move _78, _72, _73, move _80) -> unwind continue;
    }

    bb16: {
        _106 = const _;
        _105 = const _;
        _81 = (_106, _105);
        _82 = (_81.0: &usize);
        _83 = (_81.1: &usize);
        _86 = (*_82);
        _87 = (*_83);
        _85 = Eq(move _86, move _87);
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _88 = core::panicking::AssertKind::Eq;
        _90 = Option::<Arguments<'_>>::None;
        _89 = core::panicking::assert_failed::<usize, usize>(move _88, _82, _83, move _90) -> unwind continue;
    }

    bb18: {
        _104 = const _;
        _94 = const "foobar";
        _93 = core::str::<impl str>::len(_94) -> [return: bb19, unwind continue];
    }

    bb19: {
        _92 = &_93;
        _91 = (_104, move _92);
        _95 = (_91.0: &usize);
        _96 = (_91.1: &usize);
        _99 = (*_95);
        _100 = (*_96);
        _98 = Eq(move _99, move _100);
        _97 = Not(move _98);
        switchInt(move _97) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _101 = core::panicking::AssertKind::Eq;
        _103 = Option::<Arguments<'_>>::None;
        _102 = core::panicking::assert_failed::<usize, usize>(move _101, _95, _96, move _103) -> unwind continue;
    }

    bb21: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<i16>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const _ as usize (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<i32>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<Ugh>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<Bar>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<Foo>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<Ugh>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<Bar>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<Foo>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

fn Foo(_1: u32) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: u32) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}
