// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const CustomAutoTraceable::vftable: CustomAutoRooterVFTable = {
    let mut _0: CustomAutoRooterVFTable; // return place in scope 0 at ui/consts/mozjs-error.rs:10:20: 10:43
    let mut _1: unsafe extern "C" fn(*mut i32, *mut u32); // in scope 0 at ui/consts/mozjs-error.rs:11:16: 11:27

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/mozjs-error.rs:11:16: 11:27
        _1 = <Self as CustomAutoTraceable>::trace as unsafe extern "C" fn(*mut i32, *mut u32) (Pointer(ReifyFnPointer)); // scope 0 at ui/consts/mozjs-error.rs:11:16: 11:27
                                         // mir::Constant
                                         // + span: ui/consts/mozjs-error.rs:11:16: 11:27
                                         // + literal: Const { ty: unsafe extern "C" fn(*mut i32, *mut u32) {<Self as CustomAutoTraceable>::trace}, val: Value(<ZST>) }
        _0 = CustomAutoRooterVFTable { trace: move _1 }; // scope 0 at ui/consts/mozjs-error.rs:10:46: 12:6
        StorageDead(_1);                 // scope 0 at ui/consts/mozjs-error.rs:12:5: 12:6
        return;                          // scope 0 at ui/consts/mozjs-error.rs:10:5: 12:7
    }
}

fn CustomAutoTraceable::trace(_1: *mut i32, _2: *mut u32) -> () {
    debug this => _1;                    // in scope 0 at ui/consts/mozjs-error.rs:14:32: 14:36
    debug trc => _2;                     // in scope 0 at ui/consts/mozjs-error.rs:14:48: 14:51
    let mut _0: ();                      // return place in scope 0 at ui/consts/mozjs-error.rs:14:63: 14:63
    let _3: *const Self;                 // in scope 0 at ui/consts/mozjs-error.rs:15:13: 15:17
    let mut _4: *mut i32;                // in scope 0 at ui/consts/mozjs-error.rs:15:20: 15:24
    let mut _6: std::option::Option<&Self>; // in scope 0 at ui/consts/mozjs-error.rs:16:20: 16:33
    let mut _7: *const Self;             // in scope 0 at ui/consts/mozjs-error.rs:16:20: 16:24
    let _8: ();                          // in scope 0 at ui/consts/mozjs-error.rs:17:9: 17:34
    let mut _9: &Self;                   // in scope 0 at ui/consts/mozjs-error.rs:17:24: 17:28
    let mut _10: *mut u32;               // in scope 0 at ui/consts/mozjs-error.rs:17:30: 17:33
    scope 1 {
        debug this => _3;                // in scope 1 at ui/consts/mozjs-error.rs:15:13: 15:17
        let _5: &Self;                   // in scope 1 at ui/consts/mozjs-error.rs:16:13: 16:17
        scope 2 {
            debug this => _5;            // in scope 2 at ui/consts/mozjs-error.rs:16:13: 16:17
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/consts/mozjs-error.rs:15:20: 15:24
        _3 = move _4 as *const Self (PtrToPtr); // scope 0 at ui/consts/mozjs-error.rs:15:20: 15:39
        _7 = _3;                         // scope 1 at ui/consts/mozjs-error.rs:16:20: 16:24
        _6 = ptr::const_ptr::<impl *const Self>::as_ref::<'_>(move _7) -> bb1; // scope 1 at ui/consts/mozjs-error.rs:16:20: 16:33
                                         // mir::Constant
                                         // + span: ui/consts/mozjs-error.rs:16:25: 16:31
                                         // + literal: Const { ty: unsafe fn(*const Self) -> Option<&Self> {ptr::const_ptr::<impl *const Self>::as_ref::<'_>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = Option::<&Self>::unwrap(move _6) -> bb2; // scope 1 at ui/consts/mozjs-error.rs:16:20: 16:42
                                         // mir::Constant
                                         // + span: ui/consts/mozjs-error.rs:16:34: 16:40
                                         // + literal: Const { ty: fn(Option<&Self>) -> &Self {Option::<&Self>::unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = _5;                         // scope 2 at ui/consts/mozjs-error.rs:17:24: 17:28
        _10 = _2;                        // scope 2 at ui/consts/mozjs-error.rs:17:30: 17:33
        _8 = <Self as CustomAutoTraceable>::do_trace(move _9, move _10) -> bb3; // scope 2 at ui/consts/mozjs-error.rs:17:9: 17:34
                                         // mir::Constant
                                         // + span: ui/consts/mozjs-error.rs:17:9: 17:23
                                         // + literal: Const { ty: for<'a> fn(&'a Self, *mut u32) {<Self as CustomAutoTraceable>::do_trace}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/consts/mozjs-error.rs:18:6: 18:6
    }
}

fn <impl at ui/consts/mozjs-error.rs:23:1: 23:39>::do_trace(_1: &(), _2: *mut u32) -> () {
    debug self => _1;                    // in scope 0 at ui/consts/mozjs-error.rs:24:17: 24:22
    let mut _0: ();                      // return place in scope 0 at ui/consts/mozjs-error.rs:24:37: 24:37

    bb0: {
        return;                          // scope 0 at ui/consts/mozjs-error.rs:26:6: 26:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/mozjs-error.rs:29:11: 29:11
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/consts/mozjs-error.rs:31:2: 31:2
    }
}
