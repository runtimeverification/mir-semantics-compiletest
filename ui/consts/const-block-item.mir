// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static BLOCK_USE: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 100_usize;
        return;
    }
}

static BLOCK_STRUCT_DEF: usize = {
    let mut _0: usize;
    let mut _1: BLOCK_STRUCT_DEF::Foo;

    bb0: {
        StorageLive(_1);
        _1 = Foo { a: const 300_usize };
        _0 = (_1.0: usize);
        StorageDead(_1);
        return;
    }
}

static BLOCK_FN_DEF: fn(usize) -> usize = {
    let mut _0: fn(usize) -> usize;

    bb0: {
        _0 = foo as fn(usize) -> usize (Pointer(ReifyFnPointer));
        return;
    }
}

fn foo(_1: usize) -> usize {
    debug a => _1;
    let mut _0: usize;

    bb0: {
        _0 = Add(_1, const 10_usize);
        return;
    }
}

static BLOCK_MACRO_RULES: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 412_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let _2: &usize;
    let _3: &usize;
    let _4: &usize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: usize;
    let mut _8: usize;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _12: (&usize, &usize);
    let _13: &usize;
    let _14: &usize;
    let _15: &usize;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: (&usize, &usize);
    let mut _24: &usize;
    let _25: usize;
    let mut _26: fn(usize) -> usize;
    let mut _27: &fn(usize) -> usize;
    let _28: &usize;
    let _29: &usize;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: usize;
    let mut _33: usize;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&usize, &usize);
    let _38: &usize;
    let _39: &usize;
    let _40: &usize;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: usize;
    let mut _44: usize;
    let _46: !;
    let mut _47: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _48: &usize;
    let mut _49: &usize;
    let mut _50: &usize;
    let mut _51: &usize;
    scope 1 {
        debug left_val => _3;
        debug right_val => _4;
        let _9: core::panicking::AssertKind;
        scope 2 {
            debug kind => _9;
        }
    }
    scope 3 {
        debug left_val => _14;
        debug right_val => _15;
        let _20: core::panicking::AssertKind;
        scope 4 {
            debug kind => _20;
        }
    }
    scope 5 {
        debug left_val => _28;
        debug right_val => _29;
        let _34: core::panicking::AssertKind;
        scope 6 {
            debug kind => _34;
        }
    }
    scope 7 {
        debug left_val => _39;
        debug right_val => _40;
        let _45: core::panicking::AssertKind;
        scope 8 {
            debug kind => _45;
        }
    }

    bb0: {
        _2 = const {alloc1: &usize};
        _51 = const _;
        _1 = (_2, _51);
        _3 = (_1.0: &usize);
        _4 = (_1.1: &usize);
        _7 = (*_3);
        _8 = (*_4);
        _6 = Eq(move _7, move _8);
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<usize, usize>(move _9, _3, _4, move _11) -> unwind continue;
    }

    bb2: {
        _13 = const {alloc2: &usize};
        _50 = const _;
        _12 = (_13, _50);
        _14 = (_12.0: &usize);
        _15 = (_12.1: &usize);
        _18 = (*_14);
        _19 = (*_15);
        _17 = Eq(move _18, move _19);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<usize, usize>(move _20, _14, _15, move _22) -> unwind continue;
    }

    bb4: {
        _27 = const {alloc3: &fn(usize) -> usize};
        _26 = (*_27);
        _25 = move _26(const 390_usize) -> [return: bb5, unwind continue];
    }

    bb5: {
        _24 = &_25;
        _49 = const _;
        _23 = (move _24, _49);
        _28 = (_23.0: &usize);
        _29 = (_23.1: &usize);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<usize, usize>(move _34, _28, _29, move _36) -> unwind continue;
    }

    bb7: {
        _38 = const {alloc4: &usize};
        _48 = const _;
        _37 = (_38, _48);
        _39 = (_37.0: &usize);
        _40 = (_37.1: &usize);
        _43 = (*_39);
        _44 = (*_40);
        _42 = Eq(move _43, move _44);
        _41 = Not(move _42);
        switchInt(move _41) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _45 = core::panicking::AssertKind::Eq;
        _47 = Option::<Arguments<'_>>::None;
        _46 = core::panicking::assert_failed::<usize, usize>(move _45, _39, _40, move _47) -> unwind continue;
    }

    bb9: {
        return;
    }
}

alloc4 (static: BLOCK_MACRO_RULES, size: 8, align: 8) {
    9c 01 00 00 00 00 00 00                         │ ........
}

alloc3 (static: BLOCK_FN_DEF, size: 8, align: 8) {
    ╾───────alloc18───────╼                         │ ╾──────╼
}

alloc18 (fn: foo)

alloc2 (static: BLOCK_STRUCT_DEF, size: 8, align: 8) {
    2c 01 00 00 00 00 00 00                         │ ,.......
}

alloc1 (static: BLOCK_USE, size: 8, align: 8) {
    64 00 00 00 00 00 00 00                         │ d.......
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 412_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 400_usize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 300_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 100_usize;
        _0 = &_1;
        return;
    }
}
