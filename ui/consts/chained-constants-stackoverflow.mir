// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const CST_1: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:5:18: 5:21

    bb0: {
        _0 = const 0_u32;                // scope 0 at ui/consts/chained-constants-stackoverflow.rs:5:24: 5:25
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:5:1: 5:26
    }
}

const CST_2: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:6:18: 6:21
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:6:24: 6:31

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:6:24: 6:31
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:6:24: 6:31
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:6:24: 6:31
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:6:1: 6:32
    }
}

const CST_3: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:7:18: 7:21
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:7:24: 7:31

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:7:24: 7:31
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:7:24: 7:31
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:7:24: 7:31
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:7:1: 7:32
    }
}

const CST_4: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:8:18: 8:21
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:8:24: 8:31

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:8:24: 8:31
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:8:24: 8:31
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:8:24: 8:31
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:8:1: 8:32
    }
}

const CST_5: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:9:18: 9:21
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:9:24: 9:31

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:9:24: 9:31
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:9:24: 9:31
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:9:24: 9:31
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:9:1: 9:32
    }
}

const CST_6: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:10:18: 10:21
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:10:24: 10:31

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:10:24: 10:31
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:10:24: 10:31
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:10:24: 10:31
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:10:1: 10:32
    }
}

const CST_7: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:11:18: 11:21
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:11:24: 11:31

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:11:24: 11:31
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:11:24: 11:31
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:11:24: 11:31
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:11:1: 11:32
    }
}

const CST_8: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:12:18: 12:21
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:12:24: 12:31

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:12:24: 12:31
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:12:24: 12:31
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:12:24: 12:31
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:12:1: 12:32
    }
}

const CST_9: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:13:18: 13:21
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:13:24: 13:31

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:13:24: 13:31
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:13:24: 13:31
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:13:24: 13:31
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:13:1: 13:32
    }
}

const CST_10: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:14:19: 14:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:14:25: 14:32

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:14:25: 14:32
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:14:25: 14:32
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:14:25: 14:32
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:14:1: 14:33
    }
}

const CST_11: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:15:19: 15:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:15:25: 15:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:15:25: 15:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:15:25: 15:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:15:25: 15:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:15:1: 15:34
    }
}

const CST_12: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:16:19: 16:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:16:25: 16:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:16:25: 16:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:16:25: 16:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:16:25: 16:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:16:1: 16:34
    }
}

const CST_13: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:17:19: 17:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:17:25: 17:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:17:25: 17:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:17:25: 17:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:17:25: 17:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:17:1: 17:34
    }
}

const CST_14: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:18:19: 18:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:18:25: 18:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:18:25: 18:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:18:25: 18:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:18:25: 18:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:18:1: 18:34
    }
}

const CST_15: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:19:19: 19:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:19:25: 19:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:19:25: 19:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:19:25: 19:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:19:25: 19:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:19:1: 19:34
    }
}

const CST_16: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:20:19: 20:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:20:25: 20:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:20:25: 20:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:20:25: 20:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:20:25: 20:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:20:1: 20:34
    }
}

const CST_17: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:21:19: 21:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:21:25: 21:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:21:25: 21:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:21:25: 21:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:21:25: 21:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:21:1: 21:34
    }
}

const CST_18: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:22:19: 22:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:22:25: 22:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:22:25: 22:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:22:25: 22:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:22:25: 22:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:22:1: 22:34
    }
}

const CST_19: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:23:19: 23:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:23:25: 23:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:23:25: 23:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:23:25: 23:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:23:25: 23:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:23:1: 23:34
    }
}

const CST_20: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:24:19: 24:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:24:25: 24:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:24:25: 24:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:24:25: 24:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:24:25: 24:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:24:1: 24:34
    }
}

const CST_21: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:25:19: 25:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:25:25: 25:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:25:25: 25:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:25:25: 25:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:25:25: 25:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:25:1: 25:34
    }
}

const CST_22: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:26:19: 26:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:26:25: 26:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:26:25: 26:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:26:25: 26:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:26:25: 26:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:26:1: 26:34
    }
}

const CST_23: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:27:19: 27:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:27:25: 27:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:27:25: 27:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:27:25: 27:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:27:25: 27:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:27:1: 27:34
    }
}

const CST_24: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:28:19: 28:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:28:25: 28:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:28:25: 28:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:28:25: 28:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:28:25: 28:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:28:1: 28:34
    }
}

const CST_25: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:29:19: 29:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:29:25: 29:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:29:25: 29:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:29:25: 29:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:29:25: 29:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:29:1: 29:34
    }
}

const CST_26: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:30:19: 30:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:30:25: 30:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:30:25: 30:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:30:25: 30:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:30:25: 30:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:30:1: 30:34
    }
}

const CST_27: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:31:19: 31:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:31:25: 31:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:31:25: 31:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:31:25: 31:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:31:25: 31:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:31:1: 31:34
    }
}

const CST_28: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:32:19: 32:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:32:25: 32:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:32:25: 32:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:32:25: 32:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:32:25: 32:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:32:1: 32:34
    }
}

const CST_29: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:33:19: 33:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:33:25: 33:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:33:25: 33:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:33:25: 33:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:33:25: 33:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:33:1: 33:34
    }
}

const CST_30: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:34:19: 34:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:34:25: 34:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:34:25: 34:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:34:25: 34:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:34:25: 34:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:34:1: 34:34
    }
}

const CST_31: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:35:19: 35:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:35:25: 35:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:35:25: 35:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:35:25: 35:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:35:25: 35:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:35:1: 35:34
    }
}

const CST_32: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:36:19: 36:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:36:25: 36:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:36:25: 36:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:36:25: 36:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:36:25: 36:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:36:1: 36:34
    }
}

const CST_33: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:37:19: 37:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:37:25: 37:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:37:25: 37:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:37:25: 37:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:37:25: 37:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:37:1: 37:34
    }
}

const CST_34: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:38:19: 38:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:38:25: 38:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:38:25: 38:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:38:25: 38:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:38:25: 38:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:38:1: 38:34
    }
}

const CST_35: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:39:19: 39:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:39:25: 39:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:39:25: 39:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:39:25: 39:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:39:25: 39:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:39:1: 39:34
    }
}

const CST_36: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:40:19: 40:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:40:25: 40:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:40:25: 40:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:40:25: 40:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:40:25: 40:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:40:1: 40:34
    }
}

const CST_37: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:41:19: 41:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:41:25: 41:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:41:25: 41:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:41:25: 41:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:41:25: 41:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:41:1: 41:34
    }
}

const CST_38: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:42:19: 42:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:42:25: 42:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:42:25: 42:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:42:25: 42:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:42:25: 42:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:42:1: 42:34
    }
}

const CST_39: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:43:19: 43:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:43:25: 43:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:43:25: 43:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:43:25: 43:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:43:25: 43:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:43:1: 43:34
    }
}

const CST_40: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:44:19: 44:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:44:25: 44:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:44:25: 44:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:44:25: 44:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:44:25: 44:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:44:1: 44:34
    }
}

const CST_41: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:45:19: 45:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:45:25: 45:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:45:25: 45:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:45:25: 45:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:45:25: 45:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:45:1: 45:34
    }
}

const CST_42: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:46:19: 46:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:46:25: 46:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:46:25: 46:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:46:25: 46:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:46:25: 46:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:46:1: 46:34
    }
}

const CST_43: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:47:19: 47:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:47:25: 47:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:47:25: 47:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:47:25: 47:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:47:25: 47:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:47:1: 47:34
    }
}

const CST_44: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:48:19: 48:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:48:25: 48:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:48:25: 48:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:48:25: 48:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:48:25: 48:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:48:1: 48:34
    }
}

const CST_45: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:49:19: 49:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:49:25: 49:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:49:25: 49:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:49:25: 49:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:49:25: 49:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:49:1: 49:34
    }
}

const CST_46: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:50:19: 50:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:50:25: 50:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:50:25: 50:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:50:25: 50:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:50:25: 50:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:50:1: 50:34
    }
}

const CST_47: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:51:19: 51:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:51:25: 51:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:51:25: 51:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:51:25: 51:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:51:25: 51:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:51:1: 51:34
    }
}

const CST_48: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:52:19: 52:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:52:25: 52:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:52:25: 52:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:52:25: 52:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:52:25: 52:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:52:1: 52:34
    }
}

const CST_49: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:53:19: 53:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:53:25: 53:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:53:25: 53:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:53:25: 53:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:53:25: 53:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:53:1: 53:34
    }
}

const CST_50: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:54:19: 54:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:54:25: 54:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:54:25: 54:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:54:25: 54:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:54:25: 54:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:54:1: 54:34
    }
}

const CST_51: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:55:19: 55:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:55:25: 55:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:55:25: 55:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:55:25: 55:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:55:25: 55:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:55:1: 55:34
    }
}

const CST_52: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:56:19: 56:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:56:25: 56:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:56:25: 56:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:56:25: 56:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:56:25: 56:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:56:1: 56:34
    }
}

const CST_53: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:57:19: 57:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:57:25: 57:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:57:25: 57:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:57:25: 57:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:57:25: 57:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:57:1: 57:34
    }
}

const CST_54: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:58:19: 58:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:58:25: 58:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:58:25: 58:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:58:25: 58:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:58:25: 58:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:58:1: 58:34
    }
}

const CST_55: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:59:19: 59:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:59:25: 59:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:59:25: 59:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:59:25: 59:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:59:25: 59:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:59:1: 59:34
    }
}

const CST_56: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:60:19: 60:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:60:25: 60:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:60:25: 60:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:60:25: 60:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:60:25: 60:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:60:1: 60:34
    }
}

const CST_57: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:61:19: 61:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:61:25: 61:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:61:25: 61:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:61:25: 61:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:61:25: 61:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:61:1: 61:34
    }
}

const CST_58: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:62:19: 62:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:62:25: 62:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:62:25: 62:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:62:25: 62:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:62:25: 62:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:62:1: 62:34
    }
}

const CST_59: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:63:19: 63:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:63:25: 63:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:63:25: 63:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:63:25: 63:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:63:25: 63:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:63:1: 63:34
    }
}

const CST_60: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:64:19: 64:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:64:25: 64:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:64:25: 64:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:64:25: 64:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:64:25: 64:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:64:1: 64:34
    }
}

const CST_61: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:65:19: 65:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:65:25: 65:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:65:25: 65:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:65:25: 65:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:65:25: 65:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:65:1: 65:34
    }
}

const CST_62: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:66:19: 66:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:66:25: 66:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:66:25: 66:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:66:25: 66:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:66:25: 66:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:66:1: 66:34
    }
}

const CST_63: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:67:19: 67:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:67:25: 67:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:67:25: 67:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:67:25: 67:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:67:25: 67:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:67:1: 67:34
    }
}

const CST_64: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:68:19: 68:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:68:25: 68:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:68:25: 68:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:68:25: 68:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:68:25: 68:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:68:1: 68:34
    }
}

const CST_65: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:69:19: 69:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:69:25: 69:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:69:25: 69:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:69:25: 69:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:69:25: 69:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:69:1: 69:34
    }
}

const CST_66: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:70:19: 70:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:70:25: 70:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:70:25: 70:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:70:25: 70:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:70:25: 70:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:70:1: 70:34
    }
}

const CST_67: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:71:19: 71:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:71:25: 71:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:71:25: 71:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:71:25: 71:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:71:25: 71:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:71:1: 71:34
    }
}

const CST_68: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:72:19: 72:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:72:25: 72:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:72:25: 72:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:72:25: 72:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:72:25: 72:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:72:1: 72:34
    }
}

const CST_69: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:73:19: 73:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:73:25: 73:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:73:25: 73:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:73:25: 73:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:73:25: 73:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:73:1: 73:34
    }
}

const CST_70: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:74:19: 74:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:74:25: 74:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:74:25: 74:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:74:25: 74:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:74:25: 74:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:74:1: 74:34
    }
}

const CST_71: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:75:19: 75:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:75:25: 75:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:75:25: 75:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:75:25: 75:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:75:25: 75:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:75:1: 75:34
    }
}

const CST_72: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:76:19: 76:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:76:25: 76:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:76:25: 76:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:76:25: 76:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:76:25: 76:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:76:1: 76:34
    }
}

const CST_73: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:77:19: 77:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:77:25: 77:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:77:25: 77:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:77:25: 77:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:77:25: 77:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:77:1: 77:34
    }
}

const CST_74: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:78:19: 78:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:78:25: 78:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:78:25: 78:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:78:25: 78:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:78:25: 78:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:78:1: 78:34
    }
}

const CST_75: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:79:19: 79:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:79:25: 79:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:79:25: 79:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:79:25: 79:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:79:25: 79:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:79:1: 79:34
    }
}

const CST_76: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:80:19: 80:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:80:25: 80:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:80:25: 80:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:80:25: 80:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:80:25: 80:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:80:1: 80:34
    }
}

const CST_77: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:81:19: 81:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:81:25: 81:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:81:25: 81:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:81:25: 81:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:81:25: 81:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:81:1: 81:34
    }
}

const CST_78: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:82:19: 82:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:82:25: 82:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:82:25: 82:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:82:25: 82:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:82:25: 82:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:82:1: 82:34
    }
}

const CST_79: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:83:19: 83:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:83:25: 83:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:83:25: 83:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:83:25: 83:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:83:25: 83:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:83:1: 83:34
    }
}

const CST_80: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:84:19: 84:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:84:25: 84:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:84:25: 84:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:84:25: 84:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:84:25: 84:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:84:1: 84:34
    }
}

const CST_81: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:85:19: 85:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:85:25: 85:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:85:25: 85:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:85:25: 85:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:85:25: 85:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:85:1: 85:34
    }
}

const CST_82: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:86:19: 86:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:86:25: 86:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:86:25: 86:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:86:25: 86:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:86:25: 86:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:86:1: 86:34
    }
}

const CST_83: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:87:19: 87:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:87:25: 87:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:87:25: 87:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:87:25: 87:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:87:25: 87:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:87:1: 87:34
    }
}

const CST_84: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:88:19: 88:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:88:25: 88:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:88:25: 88:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:88:25: 88:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:88:25: 88:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:88:1: 88:34
    }
}

const CST_85: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:89:19: 89:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:89:25: 89:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:89:25: 89:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:89:25: 89:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:89:25: 89:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:89:1: 89:34
    }
}

const CST_86: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:90:19: 90:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:90:25: 90:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:90:25: 90:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:90:25: 90:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:90:25: 90:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:90:1: 90:34
    }
}

const CST_87: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:91:19: 91:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:91:25: 91:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:91:25: 91:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:91:25: 91:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:91:25: 91:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:91:1: 91:34
    }
}

const CST_88: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:92:19: 92:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:92:25: 92:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:92:25: 92:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:92:25: 92:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:92:25: 92:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:92:1: 92:34
    }
}

const CST_89: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:93:19: 93:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:93:25: 93:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:93:25: 93:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:93:25: 93:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:93:25: 93:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:93:1: 93:34
    }
}

const CST_90: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:94:19: 94:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:94:25: 94:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:94:25: 94:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:94:25: 94:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:94:25: 94:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:94:1: 94:34
    }
}

const CST_91: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:95:19: 95:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:95:25: 95:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:95:25: 95:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:95:25: 95:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:95:25: 95:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:95:1: 95:34
    }
}

const CST_92: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:96:19: 96:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:96:25: 96:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:96:25: 96:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:96:25: 96:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:96:25: 96:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:96:1: 96:34
    }
}

const CST_93: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:97:19: 97:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:97:25: 97:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:97:25: 97:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:97:25: 97:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:97:25: 97:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:97:1: 97:34
    }
}

const CST_94: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:98:19: 98:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:98:25: 98:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:98:25: 98:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:98:25: 98:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:98:25: 98:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:98:1: 98:34
    }
}

const CST_95: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:99:19: 99:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:99:25: 99:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:99:25: 99:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:99:25: 99:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:99:25: 99:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:99:1: 99:34
    }
}

const CST_96: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:100:19: 100:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:100:25: 100:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:100:25: 100:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:100:25: 100:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:100:25: 100:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:100:1: 100:34
    }
}

const CST_97: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:101:19: 101:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:101:25: 101:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:101:25: 101:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:101:25: 101:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:101:25: 101:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:101:1: 101:34
    }
}

const CST_98: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:102:19: 102:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:102:25: 102:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:102:25: 102:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:102:25: 102:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:102:25: 102:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:102:1: 102:34
    }
}

const CST_99: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:103:19: 103:22
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:103:25: 103:33

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:103:25: 103:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:103:25: 103:33
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:103:25: 103:33
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:103:1: 103:34
    }
}

const CST_100: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:104:20: 104:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:104:26: 104:34

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:104:26: 104:34
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:104:26: 104:34
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:104:26: 104:34
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:104:1: 104:35
    }
}

const CST_101: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:105:20: 105:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:105:26: 105:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:105:26: 105:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:105:26: 105:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:105:26: 105:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:105:1: 105:36
    }
}

const CST_102: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:106:20: 106:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:106:26: 106:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:106:26: 106:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:106:26: 106:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:106:26: 106:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:106:1: 106:36
    }
}

const CST_103: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:107:20: 107:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:107:26: 107:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:107:26: 107:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:107:26: 107:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:107:26: 107:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:107:1: 107:36
    }
}

const CST_104: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:108:20: 108:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:108:26: 108:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:108:26: 108:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:108:26: 108:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:108:26: 108:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:108:1: 108:36
    }
}

const CST_105: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:109:20: 109:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:109:26: 109:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:109:26: 109:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:109:26: 109:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:109:26: 109:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:109:1: 109:36
    }
}

const CST_106: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:110:20: 110:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:110:26: 110:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:110:26: 110:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:110:26: 110:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:110:26: 110:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:110:1: 110:36
    }
}

const CST_107: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:111:20: 111:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:111:26: 111:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:111:26: 111:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:111:26: 111:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:111:26: 111:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:111:1: 111:36
    }
}

const CST_108: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:112:20: 112:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:112:26: 112:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:112:26: 112:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:112:26: 112:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:112:26: 112:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:112:1: 112:36
    }
}

const CST_109: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:113:20: 113:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:113:26: 113:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:113:26: 113:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:113:26: 113:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:113:26: 113:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:113:1: 113:36
    }
}

const CST_110: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:114:20: 114:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:114:26: 114:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:114:26: 114:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:114:26: 114:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:114:26: 114:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:114:1: 114:36
    }
}

const CST_111: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:115:20: 115:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:115:26: 115:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:115:26: 115:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:115:26: 115:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:115:26: 115:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:115:1: 115:36
    }
}

const CST_112: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:116:20: 116:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:116:26: 116:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:116:26: 116:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:116:26: 116:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:116:26: 116:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:116:1: 116:36
    }
}

const CST_113: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:117:20: 117:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:117:26: 117:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:117:26: 117:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:117:26: 117:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:117:26: 117:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:117:1: 117:36
    }
}

const CST_114: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:118:20: 118:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:118:26: 118:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:118:26: 118:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:118:26: 118:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:118:26: 118:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:118:1: 118:36
    }
}

const CST_115: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:119:20: 119:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:119:26: 119:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:119:26: 119:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:119:26: 119:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:119:26: 119:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:119:1: 119:36
    }
}

const CST_116: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:120:20: 120:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:120:26: 120:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:120:26: 120:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:120:26: 120:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:120:26: 120:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:120:1: 120:36
    }
}

const CST_117: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:121:20: 121:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:121:26: 121:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:121:26: 121:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:121:26: 121:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:121:26: 121:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:121:1: 121:36
    }
}

const CST_118: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:122:20: 122:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:122:26: 122:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:122:26: 122:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:122:26: 122:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:122:26: 122:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:122:1: 122:36
    }
}

const CST_119: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:123:20: 123:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:123:26: 123:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:123:26: 123:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:123:26: 123:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:123:26: 123:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:123:1: 123:36
    }
}

const CST_120: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:124:20: 124:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:124:26: 124:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:124:26: 124:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:124:26: 124:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:124:26: 124:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:124:1: 124:36
    }
}

const CST_121: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:125:20: 125:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:125:26: 125:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:125:26: 125:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:125:26: 125:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:125:26: 125:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:125:1: 125:36
    }
}

const CST_122: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:126:20: 126:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:126:26: 126:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:126:26: 126:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:126:26: 126:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:126:26: 126:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:126:1: 126:36
    }
}

const CST_123: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:127:20: 127:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:127:26: 127:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:127:26: 127:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:127:26: 127:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:127:26: 127:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:127:1: 127:36
    }
}

const CST_124: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:128:20: 128:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:128:26: 128:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:128:26: 128:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:128:26: 128:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:128:26: 128:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:128:1: 128:36
    }
}

const CST_125: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:129:20: 129:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:129:26: 129:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:129:26: 129:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:129:26: 129:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:129:26: 129:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:129:1: 129:36
    }
}

const CST_126: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:130:20: 130:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:130:26: 130:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:130:26: 130:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:130:26: 130:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:130:26: 130:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:130:1: 130:36
    }
}

const CST_127: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:131:20: 131:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:131:26: 131:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:131:26: 131:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:131:26: 131:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:131:26: 131:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:131:1: 131:36
    }
}

const CST_128: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:132:20: 132:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:132:26: 132:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:132:26: 132:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:132:26: 132:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:132:26: 132:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:132:1: 132:36
    }
}

const CST_129: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:133:20: 133:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:133:26: 133:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:133:26: 133:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:133:26: 133:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:133:26: 133:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:133:1: 133:36
    }
}

const CST_130: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:134:20: 134:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:134:26: 134:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:134:26: 134:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:134:26: 134:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:134:26: 134:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:134:1: 134:36
    }
}

const CST_131: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:135:20: 135:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:135:26: 135:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:135:26: 135:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:135:26: 135:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:135:26: 135:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:135:1: 135:36
    }
}

const CST_132: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:136:20: 136:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:136:26: 136:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:136:26: 136:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:136:26: 136:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:136:26: 136:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:136:1: 136:36
    }
}

const CST_133: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:137:20: 137:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:137:26: 137:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:137:26: 137:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:137:26: 137:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:137:26: 137:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:137:1: 137:36
    }
}

const CST_134: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:138:20: 138:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:138:26: 138:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:138:26: 138:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:138:26: 138:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:138:26: 138:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:138:1: 138:36
    }
}

const CST_135: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:139:20: 139:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:139:26: 139:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:139:26: 139:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:139:26: 139:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:139:26: 139:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:139:1: 139:36
    }
}

const CST_136: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:140:20: 140:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:140:26: 140:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:140:26: 140:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:140:26: 140:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:140:26: 140:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:140:1: 140:36
    }
}

const CST_137: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:141:20: 141:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:141:26: 141:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:141:26: 141:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:141:26: 141:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:141:26: 141:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:141:1: 141:36
    }
}

const CST_138: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:142:20: 142:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:142:26: 142:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:142:26: 142:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:142:26: 142:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:142:26: 142:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:142:1: 142:36
    }
}

const CST_139: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:143:20: 143:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:143:26: 143:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:143:26: 143:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:143:26: 143:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:143:26: 143:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:143:1: 143:36
    }
}

const CST_140: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:144:20: 144:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:144:26: 144:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:144:26: 144:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:144:26: 144:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:144:26: 144:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:144:1: 144:36
    }
}

const CST_141: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:145:20: 145:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:145:26: 145:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:145:26: 145:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:145:26: 145:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:145:26: 145:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:145:1: 145:36
    }
}

const CST_142: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:146:20: 146:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:146:26: 146:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:146:26: 146:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:146:26: 146:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:146:26: 146:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:146:1: 146:36
    }
}

const CST_143: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:147:20: 147:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:147:26: 147:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:147:26: 147:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:147:26: 147:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:147:26: 147:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:147:1: 147:36
    }
}

const CST_144: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:148:20: 148:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:148:26: 148:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:148:26: 148:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:148:26: 148:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:148:26: 148:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:148:1: 148:36
    }
}

const CST_145: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:149:20: 149:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:149:26: 149:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:149:26: 149:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:149:26: 149:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:149:26: 149:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:149:1: 149:36
    }
}

const CST_146: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:150:20: 150:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:150:26: 150:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:150:26: 150:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:150:26: 150:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:150:26: 150:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:150:1: 150:36
    }
}

const CST_147: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:151:20: 151:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:151:26: 151:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:151:26: 151:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:151:26: 151:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:151:26: 151:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:151:1: 151:36
    }
}

const CST_148: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:152:20: 152:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:152:26: 152:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:152:26: 152:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:152:26: 152:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:152:26: 152:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:152:1: 152:36
    }
}

const CST_149: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:153:20: 153:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:153:26: 153:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:153:26: 153:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:153:26: 153:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:153:26: 153:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:153:1: 153:36
    }
}

const CST_150: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:154:20: 154:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:154:26: 154:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:154:26: 154:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:154:26: 154:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:154:26: 154:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:154:1: 154:36
    }
}

const CST_151: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:155:20: 155:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:155:26: 155:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:155:26: 155:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:155:26: 155:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:155:26: 155:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:155:1: 155:36
    }
}

const CST_152: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:156:20: 156:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:156:26: 156:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:156:26: 156:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:156:26: 156:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:156:26: 156:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:156:1: 156:36
    }
}

const CST_153: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:157:20: 157:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:157:26: 157:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:157:26: 157:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:157:26: 157:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:157:26: 157:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:157:1: 157:36
    }
}

const CST_154: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:158:20: 158:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:158:26: 158:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:158:26: 158:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:158:26: 158:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:158:26: 158:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:158:1: 158:36
    }
}

const CST_155: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:159:20: 159:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:159:26: 159:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:159:26: 159:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:159:26: 159:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:159:26: 159:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:159:1: 159:36
    }
}

const CST_156: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:160:20: 160:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:160:26: 160:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:160:26: 160:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:160:26: 160:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:160:26: 160:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:160:1: 160:36
    }
}

const CST_157: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:161:20: 161:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:161:26: 161:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:161:26: 161:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:161:26: 161:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:161:26: 161:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:161:1: 161:36
    }
}

const CST_158: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:162:20: 162:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:162:26: 162:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:162:26: 162:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:162:26: 162:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:162:26: 162:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:162:1: 162:36
    }
}

const CST_159: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:163:20: 163:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:163:26: 163:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:163:26: 163:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:163:26: 163:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:163:26: 163:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:163:1: 163:36
    }
}

const CST_160: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:164:20: 164:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:164:26: 164:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:164:26: 164:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:164:26: 164:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:164:26: 164:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:164:1: 164:36
    }
}

const CST_161: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:165:20: 165:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:165:26: 165:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:165:26: 165:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:165:26: 165:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:165:26: 165:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:165:1: 165:36
    }
}

const CST_162: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:166:20: 166:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:166:26: 166:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:166:26: 166:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:166:26: 166:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:166:26: 166:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:166:1: 166:36
    }
}

const CST_163: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:167:20: 167:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:167:26: 167:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:167:26: 167:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:167:26: 167:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:167:26: 167:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:167:1: 167:36
    }
}

const CST_164: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:168:20: 168:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:168:26: 168:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:168:26: 168:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:168:26: 168:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:168:26: 168:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:168:1: 168:36
    }
}

const CST_165: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:169:20: 169:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:169:26: 169:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:169:26: 169:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:169:26: 169:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:169:26: 169:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:169:1: 169:36
    }
}

const CST_166: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:170:20: 170:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:170:26: 170:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:170:26: 170:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:170:26: 170:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:170:26: 170:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:170:1: 170:36
    }
}

const CST_167: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:171:20: 171:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:171:26: 171:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:171:26: 171:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:171:26: 171:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:171:26: 171:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:171:1: 171:36
    }
}

const CST_168: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:172:20: 172:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:172:26: 172:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:172:26: 172:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:172:26: 172:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:172:26: 172:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:172:1: 172:36
    }
}

const CST_169: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:173:20: 173:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:173:26: 173:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:173:26: 173:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:173:26: 173:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:173:26: 173:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:173:1: 173:36
    }
}

const CST_170: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:174:20: 174:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:174:26: 174:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:174:26: 174:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:174:26: 174:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:174:26: 174:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:174:1: 174:36
    }
}

const CST_171: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:175:20: 175:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:175:26: 175:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:175:26: 175:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:175:26: 175:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:175:26: 175:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:175:1: 175:36
    }
}

const CST_172: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:176:20: 176:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:176:26: 176:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:176:26: 176:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:176:26: 176:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:176:26: 176:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:176:1: 176:36
    }
}

const CST_173: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:177:20: 177:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:177:26: 177:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:177:26: 177:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:177:26: 177:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:177:26: 177:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:177:1: 177:36
    }
}

const CST_174: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:178:20: 178:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:178:26: 178:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:178:26: 178:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:178:26: 178:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:178:26: 178:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:178:1: 178:36
    }
}

const CST_175: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:179:20: 179:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:179:26: 179:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:179:26: 179:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:179:26: 179:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:179:26: 179:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:179:1: 179:36
    }
}

const CST_176: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:180:20: 180:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:180:26: 180:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:180:26: 180:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:180:26: 180:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:180:26: 180:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:180:1: 180:36
    }
}

const CST_177: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:181:20: 181:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:181:26: 181:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:181:26: 181:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:181:26: 181:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:181:26: 181:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:181:1: 181:36
    }
}

const CST_178: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:182:20: 182:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:182:26: 182:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:182:26: 182:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:182:26: 182:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:182:26: 182:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:182:1: 182:36
    }
}

const CST_179: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:183:20: 183:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:183:26: 183:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:183:26: 183:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:183:26: 183:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:183:26: 183:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:183:1: 183:36
    }
}

const CST_180: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:184:20: 184:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:184:26: 184:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:184:26: 184:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:184:26: 184:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:184:26: 184:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:184:1: 184:36
    }
}

const CST_181: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:185:20: 185:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:185:26: 185:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:185:26: 185:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:185:26: 185:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:185:26: 185:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:185:1: 185:36
    }
}

const CST_182: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:186:20: 186:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:186:26: 186:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:186:26: 186:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:186:26: 186:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:186:26: 186:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:186:1: 186:36
    }
}

const CST_183: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:187:20: 187:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:187:26: 187:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:187:26: 187:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:187:26: 187:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:187:26: 187:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:187:1: 187:36
    }
}

const CST_184: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:188:20: 188:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:188:26: 188:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:188:26: 188:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:188:26: 188:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:188:26: 188:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:188:1: 188:36
    }
}

const CST_185: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:189:20: 189:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:189:26: 189:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:189:26: 189:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:189:26: 189:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:189:26: 189:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:189:1: 189:36
    }
}

const CST_186: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:190:20: 190:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:190:26: 190:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:190:26: 190:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:190:26: 190:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:190:26: 190:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:190:1: 190:36
    }
}

const CST_187: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:191:20: 191:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:191:26: 191:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:191:26: 191:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:191:26: 191:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:191:26: 191:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:191:1: 191:36
    }
}

const CST_188: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:192:20: 192:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:192:26: 192:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:192:26: 192:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:192:26: 192:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:192:26: 192:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:192:1: 192:36
    }
}

const CST_189: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:193:20: 193:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:193:26: 193:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:193:26: 193:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:193:26: 193:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:193:26: 193:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:193:1: 193:36
    }
}

const CST_190: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:194:20: 194:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:194:26: 194:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:194:26: 194:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:194:26: 194:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:194:26: 194:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:194:1: 194:36
    }
}

const CST_191: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:195:20: 195:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:195:26: 195:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:195:26: 195:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:195:26: 195:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:195:26: 195:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:195:1: 195:36
    }
}

const CST_192: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:196:20: 196:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:196:26: 196:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:196:26: 196:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:196:26: 196:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:196:26: 196:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:196:1: 196:36
    }
}

const CST_193: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:197:20: 197:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:197:26: 197:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:197:26: 197:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:197:26: 197:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:197:26: 197:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:197:1: 197:36
    }
}

const CST_194: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:198:20: 198:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:198:26: 198:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:198:26: 198:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:198:26: 198:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:198:26: 198:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:198:1: 198:36
    }
}

const CST_195: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:199:20: 199:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:199:26: 199:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:199:26: 199:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:199:26: 199:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:199:26: 199:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:199:1: 199:36
    }
}

const CST_196: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:200:20: 200:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:200:26: 200:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:200:26: 200:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:200:26: 200:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:200:26: 200:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:200:1: 200:36
    }
}

const CST_197: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:201:20: 201:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:201:26: 201:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:201:26: 201:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:201:26: 201:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:201:26: 201:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:201:1: 201:36
    }
}

const CST_198: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:202:20: 202:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:202:26: 202:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:202:26: 202:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:202:26: 202:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:202:26: 202:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:202:1: 202:36
    }
}

const CST_199: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:203:20: 203:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:203:26: 203:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:203:26: 203:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:203:26: 203:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:203:26: 203:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:203:1: 203:36
    }
}

const CST_200: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:204:20: 204:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:204:26: 204:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:204:26: 204:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:204:26: 204:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:204:26: 204:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:204:1: 204:36
    }
}

const CST_201: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:205:20: 205:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:205:26: 205:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:205:26: 205:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:205:26: 205:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:205:26: 205:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:205:1: 205:36
    }
}

const CST_202: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:206:20: 206:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:206:26: 206:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:206:26: 206:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:206:26: 206:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:206:26: 206:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:206:1: 206:36
    }
}

const CST_203: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:207:20: 207:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:207:26: 207:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:207:26: 207:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:207:26: 207:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:207:26: 207:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:207:1: 207:36
    }
}

const CST_204: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:208:20: 208:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:208:26: 208:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:208:26: 208:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:208:26: 208:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:208:26: 208:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:208:1: 208:36
    }
}

const CST_205: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:209:20: 209:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:209:26: 209:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:209:26: 209:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:209:26: 209:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:209:26: 209:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:209:1: 209:36
    }
}

const CST_206: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:210:20: 210:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:210:26: 210:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:210:26: 210:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:210:26: 210:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:210:26: 210:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:210:1: 210:36
    }
}

const CST_207: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:211:20: 211:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:211:26: 211:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:211:26: 211:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:211:26: 211:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:211:26: 211:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:211:1: 211:36
    }
}

const CST_208: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:212:20: 212:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:212:26: 212:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:212:26: 212:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:212:26: 212:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:212:26: 212:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:212:1: 212:36
    }
}

const CST_209: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:213:20: 213:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:213:26: 213:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:213:26: 213:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:213:26: 213:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:213:26: 213:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:213:1: 213:36
    }
}

const CST_210: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:214:20: 214:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:214:26: 214:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:214:26: 214:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:214:26: 214:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:214:26: 214:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:214:1: 214:36
    }
}

const CST_211: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:215:20: 215:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:215:26: 215:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:215:26: 215:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:215:26: 215:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:215:26: 215:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:215:1: 215:36
    }
}

const CST_212: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:216:20: 216:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:216:26: 216:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:216:26: 216:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:216:26: 216:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:216:26: 216:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:216:1: 216:36
    }
}

const CST_213: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:217:20: 217:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:217:26: 217:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:217:26: 217:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:217:26: 217:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:217:26: 217:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:217:1: 217:36
    }
}

const CST_214: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:218:20: 218:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:218:26: 218:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:218:26: 218:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:218:26: 218:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:218:26: 218:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:218:1: 218:36
    }
}

const CST_215: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:219:20: 219:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:219:26: 219:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:219:26: 219:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:219:26: 219:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:219:26: 219:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:219:1: 219:36
    }
}

const CST_216: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:220:20: 220:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:220:26: 220:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:220:26: 220:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:220:26: 220:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:220:26: 220:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:220:1: 220:36
    }
}

const CST_217: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:221:20: 221:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:221:26: 221:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:221:26: 221:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:221:26: 221:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:221:26: 221:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:221:1: 221:36
    }
}

const CST_218: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:222:20: 222:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:222:26: 222:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:222:26: 222:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:222:26: 222:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:222:26: 222:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:222:1: 222:36
    }
}

const CST_219: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:223:20: 223:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:223:26: 223:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:223:26: 223:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:223:26: 223:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:223:26: 223:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:223:1: 223:36
    }
}

const CST_220: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:224:20: 224:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:224:26: 224:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:224:26: 224:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:224:26: 224:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:224:26: 224:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:224:1: 224:36
    }
}

const CST_221: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:225:20: 225:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:225:26: 225:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:225:26: 225:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:225:26: 225:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:225:26: 225:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:225:1: 225:36
    }
}

const CST_222: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:226:20: 226:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:226:26: 226:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:226:26: 226:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:226:26: 226:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:226:26: 226:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:226:1: 226:36
    }
}

const CST_223: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:227:20: 227:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:227:26: 227:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:227:26: 227:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:227:26: 227:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:227:26: 227:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:227:1: 227:36
    }
}

const CST_224: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:228:20: 228:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:228:26: 228:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:228:26: 228:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:228:26: 228:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:228:26: 228:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:228:1: 228:36
    }
}

const CST_225: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:229:20: 229:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:229:26: 229:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:229:26: 229:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:229:26: 229:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:229:26: 229:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:229:1: 229:36
    }
}

const CST_226: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:230:20: 230:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:230:26: 230:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:230:26: 230:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:230:26: 230:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:230:26: 230:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:230:1: 230:36
    }
}

const CST_227: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:231:20: 231:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:231:26: 231:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:231:26: 231:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:231:26: 231:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:231:26: 231:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:231:1: 231:36
    }
}

const CST_228: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:232:20: 232:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:232:26: 232:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:232:26: 232:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:232:26: 232:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:232:26: 232:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:232:1: 232:36
    }
}

const CST_229: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:233:20: 233:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:233:26: 233:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:233:26: 233:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:233:26: 233:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:233:26: 233:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:233:1: 233:36
    }
}

const CST_230: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:234:20: 234:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:234:26: 234:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:234:26: 234:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:234:26: 234:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:234:26: 234:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:234:1: 234:36
    }
}

const CST_231: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:235:20: 235:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:235:26: 235:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:235:26: 235:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:235:26: 235:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:235:26: 235:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:235:1: 235:36
    }
}

const CST_232: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:236:20: 236:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:236:26: 236:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:236:26: 236:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:236:26: 236:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:236:26: 236:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:236:1: 236:36
    }
}

const CST_233: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:237:20: 237:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:237:26: 237:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:237:26: 237:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:237:26: 237:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:237:26: 237:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:237:1: 237:36
    }
}

const CST_234: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:238:20: 238:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:238:26: 238:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:238:26: 238:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:238:26: 238:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:238:26: 238:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:238:1: 238:36
    }
}

const CST_235: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:239:20: 239:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:239:26: 239:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:239:26: 239:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:239:26: 239:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:239:26: 239:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:239:1: 239:36
    }
}

const CST_236: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:240:20: 240:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:240:26: 240:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:240:26: 240:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:240:26: 240:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:240:26: 240:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:240:1: 240:36
    }
}

const CST_237: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:241:20: 241:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:241:26: 241:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:241:26: 241:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:241:26: 241:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:241:26: 241:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:241:1: 241:36
    }
}

const CST_238: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:242:20: 242:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:242:26: 242:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:242:26: 242:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:242:26: 242:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:242:26: 242:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:242:1: 242:36
    }
}

const CST_239: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:243:20: 243:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:243:26: 243:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:243:26: 243:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:243:26: 243:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:243:26: 243:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:243:1: 243:36
    }
}

const CST_240: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:244:20: 244:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:244:26: 244:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:244:26: 244:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:244:26: 244:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:244:26: 244:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:244:1: 244:36
    }
}

const CST_241: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:245:20: 245:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:245:26: 245:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:245:26: 245:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:245:26: 245:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:245:26: 245:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:245:1: 245:36
    }
}

const CST_242: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:246:20: 246:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:246:26: 246:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:246:26: 246:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:246:26: 246:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:246:26: 246:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:246:1: 246:36
    }
}

const CST_243: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:247:20: 247:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:247:26: 247:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:247:26: 247:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:247:26: 247:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:247:26: 247:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:247:1: 247:36
    }
}

const CST_244: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:248:20: 248:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:248:26: 248:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:248:26: 248:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:248:26: 248:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:248:26: 248:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:248:1: 248:36
    }
}

const CST_245: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:249:20: 249:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:249:26: 249:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:249:26: 249:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:249:26: 249:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:249:26: 249:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:249:1: 249:36
    }
}

const CST_246: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:250:20: 250:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:250:26: 250:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:250:26: 250:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:250:26: 250:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:250:26: 250:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:250:1: 250:36
    }
}

const CST_247: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:251:20: 251:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:251:26: 251:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:251:26: 251:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:251:26: 251:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:251:26: 251:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:251:1: 251:36
    }
}

const CST_248: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:252:20: 252:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:252:26: 252:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:252:26: 252:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:252:26: 252:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:252:26: 252:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:252:1: 252:36
    }
}

const CST_249: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:253:20: 253:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:253:26: 253:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:253:26: 253:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:253:26: 253:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:253:26: 253:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:253:1: 253:36
    }
}

const CST_250: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:254:20: 254:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:254:26: 254:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:254:26: 254:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:254:26: 254:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:254:26: 254:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:254:1: 254:36
    }
}

const CST_251: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:255:20: 255:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:255:26: 255:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:255:26: 255:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:255:26: 255:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:255:26: 255:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:255:1: 255:36
    }
}

const CST_252: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:256:20: 256:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:256:26: 256:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:256:26: 256:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:256:26: 256:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:256:26: 256:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:256:1: 256:36
    }
}

const CST_253: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:257:20: 257:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:257:26: 257:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:257:26: 257:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:257:26: 257:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:257:26: 257:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:257:1: 257:36
    }
}

const CST_254: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:258:20: 258:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:258:26: 258:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:258:26: 258:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:258:26: 258:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:258:26: 258:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:258:1: 258:36
    }
}

const CST_255: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:259:20: 259:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:259:26: 259:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:259:26: 259:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:259:26: 259:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:259:26: 259:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:259:1: 259:36
    }
}

const CST_256: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:260:20: 260:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:260:26: 260:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:260:26: 260:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:260:26: 260:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:260:26: 260:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:260:1: 260:36
    }
}

const CST_257: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:261:20: 261:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:261:26: 261:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:261:26: 261:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:261:26: 261:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:261:26: 261:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:261:1: 261:36
    }
}

const CST_258: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:262:20: 262:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:262:26: 262:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:262:26: 262:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:262:26: 262:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:262:26: 262:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:262:1: 262:36
    }
}

const CST_259: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:263:20: 263:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:263:26: 263:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:263:26: 263:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:263:26: 263:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:263:26: 263:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:263:1: 263:36
    }
}

const CST_260: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:264:20: 264:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:264:26: 264:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:264:26: 264:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:264:26: 264:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:264:26: 264:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:264:1: 264:36
    }
}

const CST_261: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:265:20: 265:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:265:26: 265:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:265:26: 265:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:265:26: 265:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:265:26: 265:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:265:1: 265:36
    }
}

const CST_262: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:266:20: 266:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:266:26: 266:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:266:26: 266:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:266:26: 266:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:266:26: 266:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:266:1: 266:36
    }
}

const CST_263: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:267:20: 267:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:267:26: 267:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:267:26: 267:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:267:26: 267:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:267:26: 267:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:267:1: 267:36
    }
}

const CST_264: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:268:20: 268:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:268:26: 268:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:268:26: 268:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:268:26: 268:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:268:26: 268:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:268:1: 268:36
    }
}

const CST_265: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:269:20: 269:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:269:26: 269:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:269:26: 269:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:269:26: 269:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:269:26: 269:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:269:1: 269:36
    }
}

const CST_266: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:270:20: 270:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:270:26: 270:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:270:26: 270:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:270:26: 270:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:270:26: 270:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:270:1: 270:36
    }
}

const CST_267: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:271:20: 271:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:271:26: 271:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:271:26: 271:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:271:26: 271:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:271:26: 271:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:271:1: 271:36
    }
}

const CST_268: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:272:20: 272:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:272:26: 272:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:272:26: 272:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:272:26: 272:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:272:26: 272:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:272:1: 272:36
    }
}

const CST_269: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:273:20: 273:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:273:26: 273:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:273:26: 273:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:273:26: 273:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:273:26: 273:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:273:1: 273:36
    }
}

const CST_270: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:274:20: 274:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:274:26: 274:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:274:26: 274:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:274:26: 274:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:274:26: 274:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:274:1: 274:36
    }
}

const CST_271: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:275:20: 275:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:275:26: 275:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:275:26: 275:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:275:26: 275:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:275:26: 275:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:275:1: 275:36
    }
}

const CST_272: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:276:20: 276:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:276:26: 276:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:276:26: 276:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:276:26: 276:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:276:26: 276:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:276:1: 276:36
    }
}

const CST_273: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:277:20: 277:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:277:26: 277:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:277:26: 277:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:277:26: 277:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:277:26: 277:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:277:1: 277:36
    }
}

const CST_274: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:278:20: 278:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:278:26: 278:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:278:26: 278:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:278:26: 278:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:278:26: 278:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:278:1: 278:36
    }
}

const CST_275: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:279:20: 279:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:279:26: 279:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:279:26: 279:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:279:26: 279:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:279:26: 279:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:279:1: 279:36
    }
}

const CST_276: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:280:20: 280:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:280:26: 280:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:280:26: 280:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:280:26: 280:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:280:26: 280:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:280:1: 280:36
    }
}

const CST_277: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:281:20: 281:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:281:26: 281:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:281:26: 281:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:281:26: 281:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:281:26: 281:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:281:1: 281:36
    }
}

const CST_278: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:282:20: 282:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:282:26: 282:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:282:26: 282:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:282:26: 282:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:282:26: 282:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:282:1: 282:36
    }
}

const CST_279: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:283:20: 283:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:283:26: 283:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:283:26: 283:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:283:26: 283:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:283:26: 283:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:283:1: 283:36
    }
}

const CST_280: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:284:20: 284:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:284:26: 284:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:284:26: 284:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:284:26: 284:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:284:26: 284:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:284:1: 284:36
    }
}

const CST_281: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:285:20: 285:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:285:26: 285:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:285:26: 285:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:285:26: 285:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:285:26: 285:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:285:1: 285:36
    }
}

const CST_282: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:286:20: 286:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:286:26: 286:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:286:26: 286:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:286:26: 286:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:286:26: 286:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:286:1: 286:36
    }
}

const CST_283: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:287:20: 287:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:287:26: 287:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:287:26: 287:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:287:26: 287:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:287:26: 287:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:287:1: 287:36
    }
}

const CST_284: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:288:20: 288:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:288:26: 288:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:288:26: 288:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:288:26: 288:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:288:26: 288:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:288:1: 288:36
    }
}

const CST_285: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:289:20: 289:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:289:26: 289:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:289:26: 289:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:289:26: 289:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:289:26: 289:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:289:1: 289:36
    }
}

const CST_286: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:290:20: 290:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:290:26: 290:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:290:26: 290:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:290:26: 290:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:290:26: 290:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:290:1: 290:36
    }
}

const CST_287: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:291:20: 291:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:291:26: 291:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:291:26: 291:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:291:26: 291:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:291:26: 291:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:291:1: 291:36
    }
}

const CST_288: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:292:20: 292:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:292:26: 292:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:292:26: 292:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:292:26: 292:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:292:26: 292:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:292:1: 292:36
    }
}

const CST_289: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:293:20: 293:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:293:26: 293:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:293:26: 293:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:293:26: 293:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:293:26: 293:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:293:1: 293:36
    }
}

const CST_290: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:294:20: 294:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:294:26: 294:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:294:26: 294:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:294:26: 294:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:294:26: 294:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:294:1: 294:36
    }
}

const CST_291: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:295:20: 295:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:295:26: 295:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:295:26: 295:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:295:26: 295:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:295:26: 295:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:295:1: 295:36
    }
}

const CST_292: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:296:20: 296:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:296:26: 296:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:296:26: 296:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:296:26: 296:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:296:26: 296:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:296:1: 296:36
    }
}

const CST_293: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:297:20: 297:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:297:26: 297:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:297:26: 297:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:297:26: 297:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:297:26: 297:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:297:1: 297:36
    }
}

const CST_294: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:298:20: 298:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:298:26: 298:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:298:26: 298:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:298:26: 298:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:298:26: 298:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:298:1: 298:36
    }
}

const CST_295: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:299:20: 299:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:299:26: 299:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:299:26: 299:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:299:26: 299:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:299:26: 299:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:299:1: 299:36
    }
}

const CST_296: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:300:20: 300:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:300:26: 300:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:300:26: 300:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:300:26: 300:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:300:26: 300:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:300:1: 300:36
    }
}

const CST_297: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:301:20: 301:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:301:26: 301:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:301:26: 301:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:301:26: 301:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:301:26: 301:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:301:1: 301:36
    }
}

const CST_298: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:302:20: 302:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:302:26: 302:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:302:26: 302:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:302:26: 302:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:302:26: 302:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:302:1: 302:36
    }
}

const CST_299: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:303:20: 303:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:303:26: 303:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:303:26: 303:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:303:26: 303:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:303:26: 303:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:303:1: 303:36
    }
}

const CST_300: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:304:20: 304:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:304:26: 304:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:304:26: 304:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:304:26: 304:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:304:26: 304:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:304:1: 304:36
    }
}

const CST_301: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:305:20: 305:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:305:26: 305:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:305:26: 305:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:305:26: 305:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:305:26: 305:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:305:1: 305:36
    }
}

const CST_302: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:306:20: 306:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:306:26: 306:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:306:26: 306:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:306:26: 306:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:306:26: 306:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:306:1: 306:36
    }
}

const CST_303: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:307:20: 307:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:307:26: 307:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:307:26: 307:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:307:26: 307:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:307:26: 307:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:307:1: 307:36
    }
}

const CST_304: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:308:20: 308:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:308:26: 308:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:308:26: 308:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:308:26: 308:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:308:26: 308:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:308:1: 308:36
    }
}

const CST_305: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:309:20: 309:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:309:26: 309:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:309:26: 309:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:309:26: 309:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:309:26: 309:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:309:1: 309:36
    }
}

const CST_306: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:310:20: 310:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:310:26: 310:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:310:26: 310:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:310:26: 310:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:310:26: 310:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:310:1: 310:36
    }
}

const CST_307: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:311:20: 311:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:311:26: 311:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:311:26: 311:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:311:26: 311:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:311:26: 311:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:311:1: 311:36
    }
}

const CST_308: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:312:20: 312:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:312:26: 312:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:312:26: 312:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:312:26: 312:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:312:26: 312:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:312:1: 312:36
    }
}

const CST_309: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:313:20: 313:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:313:26: 313:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:313:26: 313:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:313:26: 313:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:313:26: 313:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:313:1: 313:36
    }
}

const CST_310: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:314:20: 314:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:314:26: 314:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:314:26: 314:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:314:26: 314:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:314:26: 314:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:314:1: 314:36
    }
}

const CST_311: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:315:20: 315:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:315:26: 315:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:315:26: 315:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:315:26: 315:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:315:26: 315:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:315:1: 315:36
    }
}

const CST_312: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:316:20: 316:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:316:26: 316:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:316:26: 316:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:316:26: 316:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:316:26: 316:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:316:1: 316:36
    }
}

const CST_313: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:317:20: 317:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:317:26: 317:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:317:26: 317:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:317:26: 317:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:317:26: 317:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:317:1: 317:36
    }
}

const CST_314: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:318:20: 318:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:318:26: 318:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:318:26: 318:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:318:26: 318:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:318:26: 318:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:318:1: 318:36
    }
}

const CST_315: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:319:20: 319:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:319:26: 319:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:319:26: 319:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:319:26: 319:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:319:26: 319:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:319:1: 319:36
    }
}

const CST_316: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:320:20: 320:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:320:26: 320:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:320:26: 320:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:320:26: 320:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:320:26: 320:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:320:1: 320:36
    }
}

const CST_317: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:321:20: 321:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:321:26: 321:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:321:26: 321:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:321:26: 321:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:321:26: 321:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:321:1: 321:36
    }
}

const CST_318: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:322:20: 322:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:322:26: 322:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:322:26: 322:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:322:26: 322:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:322:26: 322:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:322:1: 322:36
    }
}

const CST_319: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:323:20: 323:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:323:26: 323:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:323:26: 323:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:323:26: 323:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:323:26: 323:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:323:1: 323:36
    }
}

const CST_320: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:324:20: 324:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:324:26: 324:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:324:26: 324:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:324:26: 324:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:324:26: 324:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:324:1: 324:36
    }
}

const CST_321: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:325:20: 325:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:325:26: 325:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:325:26: 325:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:325:26: 325:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:325:26: 325:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:325:1: 325:36
    }
}

const CST_322: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:326:20: 326:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:326:26: 326:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:326:26: 326:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:326:26: 326:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:326:26: 326:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:326:1: 326:36
    }
}

const CST_323: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:327:20: 327:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:327:26: 327:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:327:26: 327:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:327:26: 327:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:327:26: 327:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:327:1: 327:36
    }
}

const CST_324: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:328:20: 328:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:328:26: 328:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:328:26: 328:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:328:26: 328:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:328:26: 328:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:328:1: 328:36
    }
}

const CST_325: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:329:20: 329:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:329:26: 329:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:329:26: 329:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:329:26: 329:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:329:26: 329:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:329:1: 329:36
    }
}

const CST_326: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:330:20: 330:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:330:26: 330:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:330:26: 330:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:330:26: 330:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:330:26: 330:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:330:1: 330:36
    }
}

const CST_327: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:331:20: 331:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:331:26: 331:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:331:26: 331:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:331:26: 331:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:331:26: 331:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:331:1: 331:36
    }
}

const CST_328: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:332:20: 332:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:332:26: 332:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:332:26: 332:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:332:26: 332:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:332:26: 332:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:332:1: 332:36
    }
}

const CST_329: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:333:20: 333:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:333:26: 333:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:333:26: 333:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:333:26: 333:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:333:26: 333:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:333:1: 333:36
    }
}

const CST_330: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:334:20: 334:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:334:26: 334:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:334:26: 334:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:334:26: 334:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:334:26: 334:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:334:1: 334:36
    }
}

const CST_331: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:335:20: 335:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:335:26: 335:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:335:26: 335:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:335:26: 335:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:335:26: 335:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:335:1: 335:36
    }
}

const CST_332: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:336:20: 336:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:336:26: 336:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:336:26: 336:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:336:26: 336:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:336:26: 336:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:336:1: 336:36
    }
}

const CST_333: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:337:20: 337:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:337:26: 337:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:337:26: 337:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:337:26: 337:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:337:26: 337:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:337:1: 337:36
    }
}

const CST_334: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:338:20: 338:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:338:26: 338:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:338:26: 338:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:338:26: 338:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:338:26: 338:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:338:1: 338:36
    }
}

const CST_335: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:339:20: 339:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:339:26: 339:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:339:26: 339:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:339:26: 339:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:339:26: 339:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:339:1: 339:36
    }
}

const CST_336: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:340:20: 340:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:340:26: 340:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:340:26: 340:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:340:26: 340:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:340:26: 340:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:340:1: 340:36
    }
}

const CST_337: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:341:20: 341:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:341:26: 341:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:341:26: 341:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:341:26: 341:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:341:26: 341:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:341:1: 341:36
    }
}

const CST_338: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:342:20: 342:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:342:26: 342:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:342:26: 342:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:342:26: 342:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:342:26: 342:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:342:1: 342:36
    }
}

const CST_339: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:343:20: 343:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:343:26: 343:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:343:26: 343:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:343:26: 343:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:343:26: 343:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:343:1: 343:36
    }
}

const CST_340: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:344:20: 344:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:344:26: 344:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:344:26: 344:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:344:26: 344:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:344:26: 344:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:344:1: 344:36
    }
}

const CST_341: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:345:20: 345:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:345:26: 345:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:345:26: 345:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:345:26: 345:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:345:26: 345:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:345:1: 345:36
    }
}

const CST_342: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:346:20: 346:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:346:26: 346:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:346:26: 346:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:346:26: 346:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:346:26: 346:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:346:1: 346:36
    }
}

const CST_343: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:347:20: 347:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:347:26: 347:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:347:26: 347:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:347:26: 347:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:347:26: 347:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:347:1: 347:36
    }
}

const CST_344: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:348:20: 348:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:348:26: 348:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:348:26: 348:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:348:26: 348:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:348:26: 348:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:348:1: 348:36
    }
}

const CST_345: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:349:20: 349:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:349:26: 349:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:349:26: 349:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:349:26: 349:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:349:26: 349:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:349:1: 349:36
    }
}

const CST_346: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:350:20: 350:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:350:26: 350:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:350:26: 350:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:350:26: 350:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:350:26: 350:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:350:1: 350:36
    }
}

const CST_347: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:351:20: 351:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:351:26: 351:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:351:26: 351:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:351:26: 351:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:351:26: 351:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:351:1: 351:36
    }
}

const CST_348: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:352:20: 352:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:352:26: 352:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:352:26: 352:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:352:26: 352:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:352:26: 352:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:352:1: 352:36
    }
}

const CST_349: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:353:20: 353:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:353:26: 353:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:353:26: 353:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:353:26: 353:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:353:26: 353:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:353:1: 353:36
    }
}

const CST_350: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:354:20: 354:23
    let mut _1: (u32, bool);             // in scope 0 at ui/consts/chained-constants-stackoverflow.rs:354:26: 354:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/consts/chained-constants-stackoverflow.rs:354:26: 354:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/consts/chained-constants-stackoverflow.rs:354:26: 354:35
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/consts/chained-constants-stackoverflow.rs:354:26: 354:35
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:354:1: 354:36
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/chained-constants-stackoverflow.rs:356:11: 356:11

    bb0: {
        return;                          // scope 0 at ui/consts/chained-constants-stackoverflow.rs:356:13: 356:13
    }
}
