// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/unstable-precise-live-drops-in-libcore.rs:12:1: 12:21>::unwrap(_1: Either<T, T>) -> T {
    debug self => _1;                    // in scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:15:25: 15:29
    let mut _0: T;                       // return place in scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:15:34: 15:35
    let mut _2: isize;                   // in scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:17:13: 17:26
    let _3: T;                           // in scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:17:24: 17:25
    let _4: T;                           // in scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:18:25: 18:26
    scope 1 {
        debug t => _3;                   // in scope 1 at ui/consts/unstable-precise-live-drops-in-libcore.rs:17:24: 17:25
    }
    scope 2 {
        debug t => _4;                   // in scope 2 at ui/consts/unstable-precise-live-drops-in-libcore.rs:18:25: 18:26
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:16:15: 16:19
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:16:9: 16:19
    }

    bb1: {
        _4 = move ((_1 as Right).0: T);  // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:18:25: 18:26
        _0 = move _4;                    // scope 2 at ui/consts/unstable-precise-live-drops-in-libcore.rs:18:31: 18:32
        goto -> bb4;                     // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:18:31: 18:32
    }

    bb2: {
        unreachable;                     // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:16:15: 16:19
    }

    bb3: {
        _3 = move ((_1 as Left).0: T);   // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:17:24: 17:25
        _0 = move _3;                    // scope 1 at ui/consts/unstable-precise-live-drops-in-libcore.rs:17:30: 17:31
        goto -> bb4;                     // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:17:30: 17:31
    }

    bb4: {
        return;                          // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:20:6: 20:6
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/unstable-precise-live-drops-in-libcore.rs:12:1: 12:21>::unwrap(_1: Either<T, T>) -> T {
    debug self => _1;                    // in scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:15:25: 15:29
    let mut _0: T;                       // return place in scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:15:34: 15:35
    let mut _2: isize;                   // in scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:17:13: 17:26
    let _3: T;                           // in scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:17:24: 17:25
    let _4: T;                           // in scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:18:25: 18:26
    scope 1 {
        debug t => _3;                   // in scope 1 at ui/consts/unstable-precise-live-drops-in-libcore.rs:17:24: 17:25
    }
    scope 2 {
        debug t => _4;                   // in scope 2 at ui/consts/unstable-precise-live-drops-in-libcore.rs:18:25: 18:26
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:16:15: 16:19
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:16:9: 16:19
    }

    bb1: {
        StorageLive(_4);                 // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:18:25: 18:26
        _4 = move ((_1 as Right).0: T);  // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:18:25: 18:26
        _0 = move _4;                    // scope 2 at ui/consts/unstable-precise-live-drops-in-libcore.rs:18:31: 18:32
        StorageDead(_4);                 // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:18:31: 18:32
        goto -> bb4;                     // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:18:31: 18:32
    }

    bb2: {
        unreachable;                     // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:16:15: 16:19
    }

    bb3: {
        StorageLive(_3);                 // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:17:24: 17:25
        _3 = move ((_1 as Left).0: T);   // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:17:24: 17:25
        _0 = move _3;                    // scope 1 at ui/consts/unstable-precise-live-drops-in-libcore.rs:17:30: 17:31
        StorageDead(_3);                 // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:17:30: 17:31
        goto -> bb4;                     // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:17:30: 17:31
    }

    bb4: {
        return;                          // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:20:6: 20:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:23:11: 23:11

    bb0: {
        return;                          // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:23:13: 23:13
    }
}

fn Either::Left(_1: T) -> Either<T, S> {
    let mut _0: Either<T, S>;            // return place in scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:8:5: 8:9

    bb0: {
        _0 = Either::<T, S>::Left(move _1); // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:8:5: 8:9
        return;                          // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:8:5: 8:9
    }
}

// MIR FOR CTFE
fn Either::Left(_1: T) -> Either<T, S> {
    let mut _0: Either<T, S>;            // return place in scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:8:5: 8:9

    bb0: {
        _0 = Either::<T, S>::Left(move _1); // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:8:5: 8:9
        return;                          // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:8:5: 8:9
    }
}

fn Either::Right(_1: S) -> Either<T, S> {
    let mut _0: Either<T, S>;            // return place in scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:9:5: 9:10

    bb0: {
        _0 = Either::<T, S>::Right(move _1); // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:9:5: 9:10
        return;                          // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:9:5: 9:10
    }
}

// MIR FOR CTFE
fn Either::Right(_1: S) -> Either<T, S> {
    let mut _0: Either<T, S>;            // return place in scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:9:5: 9:10

    bb0: {
        _0 = Either::<T, S>::Right(move _1); // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:9:5: 9:10
        return;                          // scope 0 at ui/consts/unstable-precise-live-drops-in-libcore.rs:9:5: 9:10
    }
}
