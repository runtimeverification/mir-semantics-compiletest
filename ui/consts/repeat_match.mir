// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const X: [u8; 1] = {
    let mut _0: [u8; 1];

    bb0: {
        _0 = [const 0_u8; 1];
        return;
    }
}

X::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

X::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[&str; 1];
    let mut _8: &[&str; 1];
    let mut _9: &[u8; 1];

    bb0: {
        _9 = const _;
        switchInt((*_9)[0 of 1]) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _7 = const _;
        _6 = _7 as &[&str] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_const(move _6) -> [return: bb4, unwind continue];
    }

    bb2: {
        _8 = const _;
        _3 = _8 as &[&str] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_const(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _1 = _print(move _2) -> [return: bb5, unwind continue];
    }

    bb4: {
        _4 = _print(move _5) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "b\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "a\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[u8; 1] = {
    let mut _0: &[u8; 1];
    let mut _1: [u8; 1];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}
