// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const I: std::iter::Empty<u32> = {
    let mut _0: std::iter::Empty<u32>;   // return place in scope 0 at ui/consts/std/iter.rs:3:10: 3:31

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/std/iter.rs:3:34: 3:52
        _0 = std::iter::empty::<u32>() -> bb1; // scope 0 at ui/consts/std/iter.rs:3:34: 3:52
                                         // mir::Constant
                                         // + span: ui/consts/std/iter.rs:3:34: 3:50
                                         // + literal: Const { ty: fn() -> std::iter::Empty<u32> {std::iter::empty::<u32>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/std/iter.rs:3:1: 3:53
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/std/iter.rs:5:11: 5:11
    let mut _1: std::iter::Empty<u32>;   // in scope 0 at ui/consts/std/iter.rs:6:14: 6:15
    let mut _2: std::iter::Empty<u32>;   // in scope 0 at ui/consts/std/iter.rs:6:14: 6:15
    let mut _3: std::option::Option<u32>; // in scope 0 at ui/consts/std/iter.rs:6:14: 6:15
    let mut _4: &mut std::iter::Empty<u32>; // in scope 0 at ui/consts/std/iter.rs:6:14: 6:15
    let mut _5: &mut std::iter::Empty<u32>; // in scope 0 at ui/consts/std/iter.rs:6:14: 6:15
    let mut _6: isize;                   // in scope 0 at ui/consts/std/iter.rs:6:5: 8:6
    let mut _8: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _9: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _10: &[&str];                // in scope 0 at ui/consts/std/iter.rs:7:16: 7:44
    let mut _11: &[&str; 1];             // in scope 0 at ui/consts/std/iter.rs:7:16: 7:44
    let _12: &[&str; 1];                 // in scope 0 at ui/consts/std/iter.rs:7:16: 7:44
    let mut _13: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _14: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _16: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _17: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/consts/std/iter.rs:7:46: 7:47
    let mut _18: &u32;                   // in scope 0 at ui/consts/std/iter.rs:7:46: 7:47
    let _19: &u32;                       // in scope 0 at ui/consts/std/iter.rs:7:46: 7:47
    scope 1 {
        debug iter => _2;                // in scope 1 at ui/consts/std/iter.rs:6:14: 6:15
        let _7: u32;                     // in scope 1 at ui/consts/std/iter.rs:6:9: 6:10
        scope 2 {
            debug i => _7;               // in scope 2 at ui/consts/std/iter.rs:6:9: 6:10
            let mut _20: &[&str; 1];     // in scope 2 at ui/consts/std/iter.rs:7:16: 7:44
        }
    }

    bb0: {
        _1 = <std::iter::Empty<u32> as IntoIterator>::into_iter(const _) -> bb1; // scope 0 at ui/consts/std/iter.rs:6:14: 6:15
                                         // mir::Constant
                                         // + span: ui/consts/std/iter.rs:6:14: 6:15
                                         // + literal: Const { ty: fn(std::iter::Empty<u32>) -> <std::iter::Empty<u32> as IntoIterator>::IntoIter {<std::iter::Empty<u32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/consts/std/iter.rs:6:14: 6:15
                                         // + literal: Const { ty: std::iter::Empty<u32>, val: Unevaluated(I, [], None) }
    }

    bb1: {
        _5 = &mut _2;                    // scope 1 at ui/consts/std/iter.rs:6:14: 6:15
        _4 = &mut (*_5);                 // scope 1 at ui/consts/std/iter.rs:6:14: 6:15
        _3 = <std::iter::Empty<u32> as Iterator>::next(move _4) -> bb2; // scope 1 at ui/consts/std/iter.rs:6:14: 6:15
                                         // mir::Constant
                                         // + span: ui/consts/std/iter.rs:6:14: 6:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::iter::Empty<u32>) -> Option<<std::iter::Empty<u32> as Iterator>::Item> {<std::iter::Empty<u32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = discriminant(_3);           // scope 1 at ui/consts/std/iter.rs:6:14: 6:15
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 1 at ui/consts/std/iter.rs:6:14: 6:15
    }

    bb3: {
        _7 = ((_3 as Some).0: u32);      // scope 1 at ui/consts/std/iter.rs:6:9: 6:10
        _20 = const _;                   // scope 2 at ui/consts/std/iter.rs:7:16: 7:44
                                         // mir::Constant
                                         // + span: ui/consts/std/iter.rs:7:16: 7:44
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[0])) }
        _12 = _20;                       // scope 2 at ui/consts/std/iter.rs:7:16: 7:44
        _11 = _12;                       // scope 2 at ui/consts/std/iter.rs:7:16: 7:44
        _10 = move _11 as &[&str] (Pointer(Unsize)); // scope 2 at ui/consts/std/iter.rs:7:16: 7:44
        _19 = &_7;                       // scope 2 at ui/consts/std/iter.rs:7:46: 7:47
        _18 = _19;                       // scope 2 at ui/consts/std/iter.rs:7:46: 7:47
        _17 = core::fmt::ArgumentV1::<'_>::new_display::<u32>(move _18) -> bb6; // scope 2 at ui/consts/std/iter.rs:7:46: 7:47
                                         // mir::Constant
                                         // + span: ui/consts/std/iter.rs:7:46: 7:47
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u32>}, val: Value(<ZST>) }
    }

    bb4: {
        unreachable;                     // scope 1 at ui/consts/std/iter.rs:6:14: 6:15
    }

    bb5: {
        return;                          // scope 0 at ui/consts/std/iter.rs:9:2: 9:2
    }

    bb6: {
        _16 = [move _17];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _15 = &_16;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _13 = move _14 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _9 = Arguments::<'_>::new_v1(move _10, move _13) -> bb7; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb7: {
        _8 = panic_fmt(move _9);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/consts/std/iter.rs:7:16: 7:44
    let mut _1: [&str; 1];               // in scope 0 at ui/consts/std/iter.rs:7:16: 7:44

    bb0: {
        _1 = [const "magical value creation: "]; // scope 0 at ui/consts/std/iter.rs:7:16: 7:44
                                         // mir::Constant
                                         // + span: ui/consts/std/iter.rs:7:16: 7:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/consts/std/iter.rs:7:16: 7:44
        return;                          // scope 0 at ui/consts/std/iter.rs:7:16: 7:44
    }
}
