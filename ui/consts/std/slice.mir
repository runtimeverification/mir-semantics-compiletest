// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static FOO: Wrap<*const u32> = {
    let mut _0: Wrap<*const u32>;
    let mut _1: *const u32;
    let mut _2: &[u32];
    let mut _3: &[u32; 3];
    let _4: [u32; 3];
    let mut _5: &[u32; 3];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _5 = const _;
        _3 = &(*_5);
        _2 = move _3 as &[u32] (Pointer(Unsize));
        StorageDead(_3);
        ConstEvalCounter;
        _1 = core::slice::<impl [u32]>::as_ptr(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        _0 = Wrap::<*const u32>(move _1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in FOO: &[u32; 3] = {
    let mut _0: &[u32; 3];
    let mut _1: [u32; 3];

    bb0: {
        _1 = [const 42_u32, const 44_u32, const 46_u32];
        _0 = &_1;
        return;
    }
}

static BAR: Wrap<*const u8> = {
    let mut _0: Wrap<*const u8>;
    let mut _1: *const u8;
    let mut _2: &str;
    let _3: &str;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const "hello";
        _2 = &(*_3);
        ConstEvalCounter;
        _1 = core::str::<impl str>::as_ptr(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        _0 = Wrap::<*const u8>(move _1);
        StorageDead(_3);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Wrap(_1: T) -> Wrap<T> {
    let mut _0: Wrap<T>;

    bb0: {
        _0 = Wrap::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Wrap(_1: T) -> Wrap<T> {
    let mut _0: Wrap<T>;

    bb0: {
        _0 = Wrap::<T>(move _1);
        return;
    }
}
