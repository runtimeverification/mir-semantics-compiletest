// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static FOO: Wrap<*const u32> = {
    let mut _0: Wrap<*const u32>;        // return place in scope 0 at ui/consts/std/slice.rs:7:13: 7:29
    let mut _1: *const u32;              // in scope 0 at ui/consts/std/slice.rs:7:37: 7:58
    let mut _2: &[u32];                  // in scope 0 at ui/consts/std/slice.rs:7:37: 7:58
    let mut _3: &[u32; 3];               // in scope 0 at ui/consts/std/slice.rs:7:37: 7:58
    let _4: [u32; 3];                    // in scope 0 at ui/consts/std/slice.rs:7:37: 7:49
    let mut _5: &[u32; 3];               // in scope 0 at ui/consts/std/slice.rs:7:37: 7:58

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/std/slice.rs:7:37: 7:58
        StorageLive(_2);                 // scope 0 at ui/consts/std/slice.rs:7:37: 7:58
        StorageLive(_3);                 // scope 0 at ui/consts/std/slice.rs:7:37: 7:58
        _5 = const _;                    // scope 0 at ui/consts/std/slice.rs:7:37: 7:58
                                         // mir::Constant
                                         // + span: ui/consts/std/slice.rs:7:37: 7:58
                                         // + literal: Const { ty: &[u32; 3], val: Unevaluated(FOO, [], Some(promoted[0])) }
        _3 = &(*_5);                     // scope 0 at ui/consts/std/slice.rs:7:37: 7:58
        _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at ui/consts/std/slice.rs:7:37: 7:58
        StorageDead(_3);                 // scope 0 at ui/consts/std/slice.rs:7:48: 7:49
        ConstEvalCounter;                // scope 0 at ui/consts/std/slice.rs:7:37: 7:58
        _1 = core::slice::<impl [u32]>::as_ptr(move _2) -> bb1; // scope 0 at ui/consts/std/slice.rs:7:37: 7:58
                                         // mir::Constant
                                         // + span: ui/consts/std/slice.rs:7:50: 7:56
                                         // + literal: Const { ty: for<'a> fn(&'a [u32]) -> *const u32 {core::slice::<impl [u32]>::as_ptr}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/std/slice.rs:7:57: 7:58
        _0 = Wrap::<*const u32>(move _1); // scope 0 at ui/consts/std/slice.rs:7:32: 7:59
        StorageDead(_1);                 // scope 0 at ui/consts/std/slice.rs:7:58: 7:59
        return;                          // scope 0 at ui/consts/std/slice.rs:7:1: 7:60
    }
}

promoted[0] in FOO: &[u32; 3] = {
    let mut _0: &[u32; 3];               // return place in scope 0 at ui/consts/std/slice.rs:7:37: 7:58
    let mut _1: [u32; 3];                // in scope 0 at ui/consts/std/slice.rs:7:37: 7:49

    bb0: {
        _1 = [const 42_u32, const 44_u32, const 46_u32]; // scope 0 at ui/consts/std/slice.rs:7:37: 7:49
        _0 = &_1;                        // scope 0 at ui/consts/std/slice.rs:7:37: 7:58
        return;                          // scope 0 at ui/consts/std/slice.rs:7:37: 7:58
    }
}

static BAR: Wrap<*const u8> = {
    let mut _0: Wrap<*const u8>;         // return place in scope 0 at ui/consts/std/slice.rs:8:13: 8:28
    let mut _1: *const u8;               // in scope 0 at ui/consts/std/slice.rs:8:36: 8:52
    let mut _2: &str;                    // in scope 0 at ui/consts/std/slice.rs:8:36: 8:52
    let _3: &str;                        // in scope 0 at ui/consts/std/slice.rs:8:36: 8:43

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/std/slice.rs:8:36: 8:52
        StorageLive(_2);                 // scope 0 at ui/consts/std/slice.rs:8:36: 8:52
        StorageLive(_3);                 // scope 0 at ui/consts/std/slice.rs:8:36: 8:43
        _3 = const "hello";              // scope 0 at ui/consts/std/slice.rs:8:36: 8:43
                                         // mir::Constant
                                         // + span: ui/consts/std/slice.rs:8:36: 8:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at ui/consts/std/slice.rs:8:36: 8:52
        ConstEvalCounter;                // scope 0 at ui/consts/std/slice.rs:8:36: 8:52
        _1 = core::str::<impl str>::as_ptr(move _2) -> bb1; // scope 0 at ui/consts/std/slice.rs:8:36: 8:52
                                         // mir::Constant
                                         // + span: ui/consts/std/slice.rs:8:44: 8:50
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> *const u8 {core::str::<impl str>::as_ptr}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/std/slice.rs:8:51: 8:52
        _0 = Wrap::<*const u8>(move _1); // scope 0 at ui/consts/std/slice.rs:8:31: 8:53
        StorageDead(_3);                 // scope 0 at ui/consts/std/slice.rs:8:52: 8:53
        StorageDead(_1);                 // scope 0 at ui/consts/std/slice.rs:8:52: 8:53
        return;                          // scope 0 at ui/consts/std/slice.rs:8:1: 8:54
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/std/slice.rs:10:11: 10:11

    bb0: {
        return;                          // scope 0 at ui/consts/std/slice.rs:10:13: 10:13
    }
}

fn Wrap(_1: T) -> Wrap<T> {
    let mut _0: Wrap<T>;                 // return place in scope 0 at ui/consts/std/slice.rs:3:1: 3:15

    bb0: {
        _0 = Wrap::<T>(move _1);         // scope 0 at ui/consts/std/slice.rs:3:1: 3:15
        return;                          // scope 0 at ui/consts/std/slice.rs:3:1: 3:15
    }
}

// MIR FOR CTFE
fn Wrap(_1: T) -> Wrap<T> {
    let mut _0: Wrap<T>;                 // return place in scope 0 at ui/consts/std/slice.rs:3:1: 3:15

    bb0: {
        _0 = Wrap::<T>(move _1);         // scope 0 at ui/consts/std/slice.rs:3:1: 3:15
        return;                          // scope 0 at ui/consts/std/slice.rs:3:1: 3:15
    }
}
