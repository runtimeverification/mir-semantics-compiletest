// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:9:19: 9:22

    bb0: {
        _0 = const Foo {{ x: 0_usize }}; // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:10:5: 10:17
                                         // mir::Constant
                                         // + span: ui/consts/const-mut-refs/const_mut_address_of.rs:10:5: 10:17
                                         // + literal: Const { ty: Foo, val: Value(Scalar(0x0000000000000000)) }
        return;                          // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:11:2: 11:2
    }
}

// MIR FOR CTFE
fn foo() -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:9:19: 9:22

    bb0: {
        _0 = Foo { x: const 0_usize };   // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:10:5: 10:17
        return;                          // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:11:2: 11:2
    }
}

fn <impl at ui/consts/const-mut-refs/const_mut_address_of.rs:13:1: 13:9>::bar(_1: &mut Foo) -> *mut usize {
    debug self => _1;                    // in scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:14:18: 14:27
    let mut _0: *mut usize;              // return place in scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:14:32: 14:42

    bb0: {
        _0 = &raw mut ((*_1).0: usize);  // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:15:9: 15:24
        return;                          // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:16:6: 16:6
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/const-mut-refs/const_mut_address_of.rs:13:1: 13:9>::bar(_1: &mut Foo) -> *mut usize {
    debug self => _1;                    // in scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:14:18: 14:27
    let mut _0: *mut usize;              // return place in scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:14:32: 14:42

    bb0: {
        _0 = &raw mut ((*_1).0: usize);  // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:15:9: 15:24
        return;                          // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:16:6: 16:6
    }
}

fn baz(_1: &mut Foo) -> *mut usize {
    debug foo => _1;                     // in scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:19:14: 19:17
    let mut _0: *mut usize;              // return place in scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:19:31: 19:41

    bb0: {
        _0 = &raw mut ((*_1).0: usize);  // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:20:5: 20:19
        return;                          // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:21:2: 21:2
    }
}

// MIR FOR CTFE
fn baz(_1: &mut Foo) -> *mut usize {
    debug foo => _1;                     // in scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:19:14: 19:17
    let mut _0: *mut usize;              // return place in scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:19:31: 19:41

    bb0: {
        _0 = &raw mut ((*_1).0: usize);  // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:20:5: 20:19
        return;                          // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:21:2: 21:2
    }
}

const _: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:23:10: 23:12
    let _1: *mut usize;                  // in scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:24:5: 24:16
    let mut _2: &mut Foo;                // in scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:24:5: 24:16
    let mut _3: Foo;                     // in scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:24:5: 24:10
    let _4: *mut usize;                  // in scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:25:5: 25:20
    let mut _5: &mut Foo;                // in scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:25:9: 25:19
    let mut _6: &mut Foo;                // in scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:25:9: 25:19
    let mut _7: Foo;                     // in scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:25:14: 25:19

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:24:5: 24:16
        StorageLive(_2);                 // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:24:5: 24:16
        StorageLive(_3);                 // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:24:5: 24:10
        ConstEvalCounter;                // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:24:5: 24:10
        _3 = foo() -> bb1;               // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:24:5: 24:10
                                         // mir::Constant
                                         // + span: ui/consts/const-mut-refs/const_mut_address_of.rs:24:5: 24:8
                                         // + literal: Const { ty: fn() -> Foo {foo}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &mut _3;                    // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:24:5: 24:16
        ConstEvalCounter;                // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:24:5: 24:16
        _1 = Foo::bar(move _2) -> bb2;   // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:24:5: 24:16
                                         // mir::Constant
                                         // + span: ui/consts/const-mut-refs/const_mut_address_of.rs:24:11: 24:14
                                         // + literal: Const { ty: for<'a> fn(&'a mut Foo) -> *mut usize {Foo::bar}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_2);                 // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:24:15: 24:16
        StorageDead(_3);                 // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:24:16: 24:17
        StorageDead(_1);                 // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:24:16: 24:17
        StorageLive(_4);                 // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:25:5: 25:20
        StorageLive(_5);                 // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:25:9: 25:19
        StorageLive(_6);                 // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:25:9: 25:19
        StorageLive(_7);                 // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:25:14: 25:19
        ConstEvalCounter;                // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:25:14: 25:19
        _7 = foo() -> bb3;               // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:25:14: 25:19
                                         // mir::Constant
                                         // + span: ui/consts/const-mut-refs/const_mut_address_of.rs:25:14: 25:17
                                         // + literal: Const { ty: fn() -> Foo {foo}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = &mut _7;                    // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:25:9: 25:19
        _5 = &mut (*_6);                 // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:25:9: 25:19
        ConstEvalCounter;                // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:25:5: 25:20
        _4 = baz(move _5) -> bb4;        // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:25:5: 25:20
                                         // mir::Constant
                                         // + span: ui/consts/const-mut-refs/const_mut_address_of.rs:25:5: 25:8
                                         // + literal: Const { ty: for<'a> fn(&'a mut Foo) -> *mut usize {baz}, val: Value(<ZST>) }
    }

    bb4: {
        StorageDead(_5);                 // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:25:19: 25:20
        StorageDead(_7);                 // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:25:20: 25:21
        StorageDead(_6);                 // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:25:20: 25:21
        StorageDead(_4);                 // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:25:20: 25:21
        _0 = const ();                   // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:23:15: 26:2
        return;                          // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:23:1: 26:3
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:28:11: 28:11

    bb0: {
        return;                          // scope 0 at ui/consts/const-mut-refs/const_mut_address_of.rs:28:13: 28:13
    }
}
