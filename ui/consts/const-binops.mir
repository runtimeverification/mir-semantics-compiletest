// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static A: isize = {
    let mut _0: isize;
    let mut _1: (isize, bool);

    bb0: {
        _1 = CheckedAdd(const -4_isize, const 3_isize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const -4_isize, const 3_isize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_1.0: isize);
        return;
    }
}

static A2: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedAdd(const 3_usize, const 3_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 3_usize, const 3_usize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

static B: f64 = {
    let mut _0: f64;

    bb0: {
        _0 = Add(const 3f64, const 2.7000000000000002f64);
        return;
    }
}

static C: isize = {
    let mut _0: isize;
    let mut _1: (isize, bool);

    bb0: {
        _1 = CheckedSub(const 3_isize, const 4_isize);
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const 3_isize, const 4_isize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_1.0: isize);
        return;
    }
}

static D: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedSub(const 3_usize, const 3_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const 3_usize, const 3_usize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

static E: f64 = {
    let mut _0: f64;

    bb0: {
        _0 = Sub(const 3f64, const 2.7000000000000002f64);
        return;
    }
}

static E2: isize = {
    let mut _0: isize;
    let mut _1: (isize, bool);

    bb0: {
        _1 = CheckedMul(const -3_isize, const 3_isize);
        assert(!move (_1.1: bool), "attempt to compute `{} * {}`, which would overflow", const -3_isize, const 3_isize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_1.0: isize);
        return;
    }
}

static F: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedMul(const 3_usize, const 3_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} * {}`, which would overflow", const 3_usize, const 3_usize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

static G: f64 = {
    let mut _0: f64;

    bb0: {
        _0 = Mul(const 3.2999999999999998f64, const 3.2999999999999998f64);
        return;
    }
}

static H: isize = {
    let mut _0: isize;
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;

    bb0: {
        _1 = Eq(const -1_isize, const 0_isize);
        assert(!move _1, "attempt to divide `{}` by zero", const 3_isize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _2 = Eq(const -1_isize, const -1_isize);
        _3 = Eq(const 3_isize, const isize::MIN);
        _4 = BitAnd(move _2, move _3);
        assert(!move _4, "attempt to compute `{} / {}`, which would overflow", const 3_isize, const -1_isize) -> [success: bb2, unwind continue];
    }

    bb2: {
        _0 = Div(const 3_isize, const -1_isize);
        return;
    }
}

static I: usize = {
    let mut _0: usize;
    let mut _1: bool;

    bb0: {
        _1 = Eq(const 3_usize, const 0_usize);
        assert(!move _1, "attempt to divide `{}` by zero", const 3_usize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Div(const 3_usize, const 3_usize);
        return;
    }
}

static J: f64 = {
    let mut _0: f64;

    bb0: {
        _0 = Div(const 3.2999999999999998f64, const 3.2999999999999998f64);
        return;
    }
}

static N: bool = {
    let mut _0: bool;

    bb0: {
        switchInt(const true) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _0 = const false;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

static O: bool = {
    let mut _0: bool;

    bb0: {
        switchInt(const true) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = const true;
        goto -> bb3;
    }

    bb2: {
        _0 = const false;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

static P: isize = {
    let mut _0: isize;

    bb0: {
        _0 = BitAnd(const 3_isize, const 1_isize);
        return;
    }
}

static Q: usize = {
    let mut _0: usize;

    bb0: {
        _0 = BitAnd(const 1_usize, const 3_usize);
        return;
    }
}

static R: isize = {
    let mut _0: isize;

    bb0: {
        _0 = BitOr(const 3_isize, const 1_isize);
        return;
    }
}

static S: usize = {
    let mut _0: usize;

    bb0: {
        _0 = BitOr(const 1_usize, const 3_usize);
        return;
    }
}

static T: isize = {
    let mut _0: isize;

    bb0: {
        _0 = BitXor(const 3_isize, const 1_isize);
        return;
    }
}

static U: usize = {
    let mut _0: usize;

    bb0: {
        _0 = BitXor(const 1_usize, const 3_usize);
        return;
    }
}

static V: isize = {
    let mut _0: isize;
    let mut _1: u32;
    let mut _2: bool;

    bb0: {
        _1 = const 3_i32 as u32 (IntToInt);
        _2 = Lt(move _1, const 64_u32);
        assert(move _2, "attempt to shift left by `{}`, which would overflow", const 3_i32) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Shl(const 1_isize, const 3_i32);
        return;
    }
}

static W: isize = {
    let mut _0: isize;
    let mut _1: u32;
    let mut _2: bool;

    bb0: {
        _1 = const 4_i32 as u32 (IntToInt);
        _2 = Lt(move _1, const 64_u32);
        assert(move _2, "attempt to shift right by `{}`, which would overflow", const 4_i32) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Shr(const 1024_isize, const 4_i32);
        return;
    }
}

static X: usize = {
    let mut _0: usize;
    let mut _1: u32;
    let mut _2: bool;

    bb0: {
        _1 = const 4_i32 as u32 (IntToInt);
        _2 = Lt(move _1, const 64_u32);
        assert(move _2, "attempt to shift right by `{}`, which would overflow", const 4_i32) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Shr(const 1024_usize, const 4_i32);
        return;
    }
}

static Y: bool = {
    let mut _0: bool;

    bb0: {
        _0 = Eq(const 1_i32, const 1_i32);
        return;
    }
}

static Z: bool = {
    let mut _0: bool;

    bb0: {
        _0 = Eq(const 1f64, const 1f64);
        return;
    }
}

static AA: bool = {
    let mut _0: bool;

    bb0: {
        _0 = Le(const 1_i32, const 2_i32);
        return;
    }
}

static AB: bool = {
    let mut _0: bool;

    bb0: {
        _0 = Le(const -1_i32, const 2_i32);
        return;
    }
}

static AC: bool = {
    let mut _0: bool;

    bb0: {
        _0 = Le(const 1f64, const 2f64);
        return;
    }
}

static AD: bool = {
    let mut _0: bool;

    bb0: {
        _0 = Lt(const 1_i32, const 2_i32);
        return;
    }
}

static AE: bool = {
    let mut _0: bool;

    bb0: {
        _0 = Lt(const -1_i32, const 2_i32);
        return;
    }
}

static AF: bool = {
    let mut _0: bool;

    bb0: {
        _0 = Lt(const 1f64, const 2f64);
        return;
    }
}

static AG: bool = {
    let mut _0: bool;

    bb0: {
        _0 = Ne(const 1_i32, const 2_i32);
        return;
    }
}

static AH: bool = {
    let mut _0: bool;

    bb0: {
        _0 = Ne(const -1_i32, const 2_i32);
        return;
    }
}

static AI: bool = {
    let mut _0: bool;

    bb0: {
        _0 = Ne(const 1f64, const 2f64);
        return;
    }
}

static AJ: bool = {
    let mut _0: bool;

    bb0: {
        _0 = Ge(const 2_i32, const 1_i32);
        return;
    }
}

static AK: bool = {
    let mut _0: bool;

    bb0: {
        _0 = Ge(const 2_i32, const -2_i32);
        return;
    }
}

static AL: bool = {
    let mut _0: bool;

    bb0: {
        _0 = Ge(const 1f64, const -2f64);
        return;
    }
}

static AM: bool = {
    let mut _0: bool;

    bb0: {
        _0 = Gt(const 2_i32, const 1_i32);
        return;
    }
}

static AN: bool = {
    let mut _0: bool;

    bb0: {
        _0 = Gt(const 2_i32, const -2_i32);
        return;
    }
}

static AO: bool = {
    let mut _0: bool;

    bb0: {
        _0 = Gt(const 1f64, const -2f64);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let _2: &isize;
    let _3: &isize;
    let _4: &isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: isize;
    let mut _8: isize;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _12: (&usize, &usize);
    let _13: &usize;
    let _14: &usize;
    let _15: &usize;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let _23: &f64;
    let _24: &f64;
    let mut _25: (&f64, &f64);
    let _26: &f64;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: f64;
    let mut _30: f64;
    let mut _31: f64;
    let mut _32: f64;
    let _33: !;
    let mut _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let _37: &[core::fmt::rt::Argument<'_>; 2];
    let _38: [core::fmt::rt::Argument<'_>; 2];
    let mut _39: core::fmt::rt::Argument<'_>;
    let mut _40: core::fmt::rt::Argument<'_>;
    let mut _41: (&isize, &isize);
    let _42: &isize;
    let _43: &isize;
    let _44: &isize;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: isize;
    let mut _48: isize;
    let _50: !;
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _52: (&usize, &usize);
    let _53: &usize;
    let _54: &usize;
    let _55: &usize;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: usize;
    let mut _59: usize;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    let _63: &f64;
    let _64: &f64;
    let mut _65: (&f64, &f64);
    let _66: &f64;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: f64;
    let mut _70: f64;
    let mut _71: f64;
    let mut _72: f64;
    let _73: !;
    let mut _74: std::fmt::Arguments<'_>;
    let mut _75: &[&str];
    let mut _76: &[core::fmt::rt::Argument<'_>];
    let _77: &[core::fmt::rt::Argument<'_>; 2];
    let _78: [core::fmt::rt::Argument<'_>; 2];
    let mut _79: core::fmt::rt::Argument<'_>;
    let mut _80: core::fmt::rt::Argument<'_>;
    let mut _81: (&isize, &isize);
    let _82: &isize;
    let _83: &isize;
    let _84: &isize;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: isize;
    let mut _88: isize;
    let _90: !;
    let mut _91: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _92: (&usize, &usize);
    let _93: &usize;
    let _94: &usize;
    let _95: &usize;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: usize;
    let mut _99: usize;
    let _101: !;
    let mut _102: std::option::Option<std::fmt::Arguments<'_>>;
    let _103: &f64;
    let _104: &f64;
    let mut _105: (&f64, &f64);
    let _106: &f64;
    let mut _107: bool;
    let mut _108: bool;
    let mut _109: f64;
    let mut _110: f64;
    let mut _111: f64;
    let mut _112: f64;
    let _113: !;
    let mut _114: std::fmt::Arguments<'_>;
    let mut _115: &[&str];
    let mut _116: &[core::fmt::rt::Argument<'_>];
    let _117: &[core::fmt::rt::Argument<'_>; 2];
    let _118: [core::fmt::rt::Argument<'_>; 2];
    let mut _119: core::fmt::rt::Argument<'_>;
    let mut _120: core::fmt::rt::Argument<'_>;
    let mut _121: (&isize, &isize);
    let _122: &isize;
    let _123: &isize;
    let _124: &isize;
    let mut _125: bool;
    let mut _126: bool;
    let mut _127: isize;
    let mut _128: isize;
    let _130: !;
    let mut _131: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _132: (&usize, &usize);
    let _133: &usize;
    let _134: &usize;
    let _135: &usize;
    let mut _136: bool;
    let mut _137: bool;
    let mut _138: usize;
    let mut _139: usize;
    let _141: !;
    let mut _142: std::option::Option<std::fmt::Arguments<'_>>;
    let _143: &f64;
    let _144: &f64;
    let mut _145: (&f64, &f64);
    let _146: &f64;
    let mut _147: bool;
    let mut _148: bool;
    let mut _149: f64;
    let mut _150: f64;
    let mut _151: f64;
    let mut _152: f64;
    let _153: !;
    let mut _154: std::fmt::Arguments<'_>;
    let mut _155: &[&str];
    let mut _156: &[core::fmt::rt::Argument<'_>];
    let _157: &[core::fmt::rt::Argument<'_>; 2];
    let _158: [core::fmt::rt::Argument<'_>; 2];
    let mut _159: core::fmt::rt::Argument<'_>;
    let mut _160: core::fmt::rt::Argument<'_>;
    let mut _161: (&bool, &bool);
    let _162: &bool;
    let _163: &bool;
    let _164: &bool;
    let mut _165: bool;
    let mut _166: bool;
    let mut _167: bool;
    let mut _168: bool;
    let _170: !;
    let mut _171: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _172: (&bool, &bool);
    let _173: &bool;
    let _174: &bool;
    let _175: &bool;
    let mut _176: bool;
    let mut _177: bool;
    let mut _178: bool;
    let mut _179: bool;
    let _181: !;
    let mut _182: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _183: (&isize, &isize);
    let _184: &isize;
    let _185: &isize;
    let _186: &isize;
    let mut _187: bool;
    let mut _188: bool;
    let mut _189: isize;
    let mut _190: isize;
    let _192: !;
    let mut _193: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _194: (&usize, &usize);
    let _195: &usize;
    let _196: &usize;
    let _197: &usize;
    let mut _198: bool;
    let mut _199: bool;
    let mut _200: usize;
    let mut _201: usize;
    let _203: !;
    let mut _204: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _205: (&isize, &isize);
    let _206: &isize;
    let _207: &isize;
    let _208: &isize;
    let mut _209: bool;
    let mut _210: bool;
    let mut _211: isize;
    let mut _212: isize;
    let _214: !;
    let mut _215: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _216: (&usize, &usize);
    let _217: &usize;
    let _218: &usize;
    let _219: &usize;
    let mut _220: bool;
    let mut _221: bool;
    let mut _222: usize;
    let mut _223: usize;
    let _225: !;
    let mut _226: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _227: (&isize, &isize);
    let _228: &isize;
    let _229: &isize;
    let _230: &isize;
    let mut _231: bool;
    let mut _232: bool;
    let mut _233: isize;
    let mut _234: isize;
    let _236: !;
    let mut _237: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _238: (&usize, &usize);
    let _239: &usize;
    let _240: &usize;
    let _241: &usize;
    let mut _242: bool;
    let mut _243: bool;
    let mut _244: usize;
    let mut _245: usize;
    let _247: !;
    let mut _248: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _249: (&isize, &isize);
    let _250: &isize;
    let _251: &isize;
    let _252: &isize;
    let mut _253: bool;
    let mut _254: bool;
    let mut _255: isize;
    let mut _256: isize;
    let _258: !;
    let mut _259: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _260: (&isize, &isize);
    let _261: &isize;
    let _262: &isize;
    let _263: &isize;
    let mut _264: bool;
    let mut _265: bool;
    let mut _266: isize;
    let mut _267: isize;
    let _269: !;
    let mut _270: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _271: (&usize, &usize);
    let _272: &usize;
    let _273: &usize;
    let _274: &usize;
    let mut _275: bool;
    let mut _276: bool;
    let mut _277: usize;
    let mut _278: usize;
    let _280: !;
    let mut _281: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _282: (&bool, &bool);
    let _283: &bool;
    let _284: &bool;
    let _285: &bool;
    let mut _286: bool;
    let mut _287: bool;
    let mut _288: bool;
    let mut _289: bool;
    let _291: !;
    let mut _292: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _293: (&bool, &bool);
    let _294: &bool;
    let _295: &bool;
    let _296: &bool;
    let mut _297: bool;
    let mut _298: bool;
    let mut _299: bool;
    let mut _300: bool;
    let _302: !;
    let mut _303: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _304: (&bool, &bool);
    let _305: &bool;
    let _306: &bool;
    let _307: &bool;
    let mut _308: bool;
    let mut _309: bool;
    let mut _310: bool;
    let mut _311: bool;
    let _313: !;
    let mut _314: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _315: (&bool, &bool);
    let _316: &bool;
    let _317: &bool;
    let _318: &bool;
    let mut _319: bool;
    let mut _320: bool;
    let mut _321: bool;
    let mut _322: bool;
    let _324: !;
    let mut _325: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _326: (&bool, &bool);
    let _327: &bool;
    let _328: &bool;
    let _329: &bool;
    let mut _330: bool;
    let mut _331: bool;
    let mut _332: bool;
    let mut _333: bool;
    let _335: !;
    let mut _336: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _337: (&bool, &bool);
    let _338: &bool;
    let _339: &bool;
    let _340: &bool;
    let mut _341: bool;
    let mut _342: bool;
    let mut _343: bool;
    let mut _344: bool;
    let _346: !;
    let mut _347: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _348: (&bool, &bool);
    let _349: &bool;
    let _350: &bool;
    let _351: &bool;
    let mut _352: bool;
    let mut _353: bool;
    let mut _354: bool;
    let mut _355: bool;
    let _357: !;
    let mut _358: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _359: (&bool, &bool);
    let _360: &bool;
    let _361: &bool;
    let _362: &bool;
    let mut _363: bool;
    let mut _364: bool;
    let mut _365: bool;
    let mut _366: bool;
    let _368: !;
    let mut _369: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _370: (&bool, &bool);
    let _371: &bool;
    let _372: &bool;
    let _373: &bool;
    let mut _374: bool;
    let mut _375: bool;
    let mut _376: bool;
    let mut _377: bool;
    let _379: !;
    let mut _380: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _381: (&bool, &bool);
    let _382: &bool;
    let _383: &bool;
    let _384: &bool;
    let mut _385: bool;
    let mut _386: bool;
    let mut _387: bool;
    let mut _388: bool;
    let _390: !;
    let mut _391: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _392: (&bool, &bool);
    let _393: &bool;
    let _394: &bool;
    let _395: &bool;
    let mut _396: bool;
    let mut _397: bool;
    let mut _398: bool;
    let mut _399: bool;
    let _401: !;
    let mut _402: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _403: (&bool, &bool);
    let _404: &bool;
    let _405: &bool;
    let _406: &bool;
    let mut _407: bool;
    let mut _408: bool;
    let mut _409: bool;
    let mut _410: bool;
    let _412: !;
    let mut _413: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _414: (&bool, &bool);
    let _415: &bool;
    let _416: &bool;
    let _417: &bool;
    let mut _418: bool;
    let mut _419: bool;
    let mut _420: bool;
    let mut _421: bool;
    let _423: !;
    let mut _424: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _425: (&bool, &bool);
    let _426: &bool;
    let _427: &bool;
    let _428: &bool;
    let mut _429: bool;
    let mut _430: bool;
    let mut _431: bool;
    let mut _432: bool;
    let _434: !;
    let mut _435: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _436: (&bool, &bool);
    let _437: &bool;
    let _438: &bool;
    let _439: &bool;
    let mut _440: bool;
    let mut _441: bool;
    let mut _442: bool;
    let mut _443: bool;
    let _445: !;
    let mut _446: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _447: (&bool, &bool);
    let _448: &bool;
    let _449: &bool;
    let _450: &bool;
    let mut _451: bool;
    let mut _452: bool;
    let mut _453: bool;
    let mut _454: bool;
    let _456: !;
    let mut _457: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _458: (&bool, &bool);
    let _459: &bool;
    let _460: &bool;
    let _461: &bool;
    let mut _462: bool;
    let mut _463: bool;
    let mut _464: bool;
    let mut _465: bool;
    let _467: !;
    let mut _468: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _473: &bool;
    let mut _474: &bool;
    let mut _475: &bool;
    let mut _476: &bool;
    let mut _477: &bool;
    let mut _478: &bool;
    let mut _479: &bool;
    let mut _480: &bool;
    let mut _481: &bool;
    let mut _482: &bool;
    let mut _483: &bool;
    let mut _484: &bool;
    let mut _485: &bool;
    let mut _486: &bool;
    let mut _487: &bool;
    let mut _488: &bool;
    let mut _489: &bool;
    let mut _490: &usize;
    let mut _491: &isize;
    let mut _492: &isize;
    let mut _493: &usize;
    let mut _494: &isize;
    let mut _495: &usize;
    let mut _496: &isize;
    let mut _497: &usize;
    let mut _498: &isize;
    let mut _499: &bool;
    let mut _500: &bool;
    let mut _501: &f64;
    let mut _502: &usize;
    let mut _503: &isize;
    let mut _504: &f64;
    let mut _505: &usize;
    let mut _506: &isize;
    let mut _507: &f64;
    let mut _508: &usize;
    let mut _509: &isize;
    let mut _510: &f64;
    let mut _511: &usize;
    let mut _512: &isize;
    scope 1 {
        debug left_val => _3;
        debug right_val => _4;
        let _9: core::panicking::AssertKind;
        scope 2 {
            debug kind => _9;
        }
    }
    scope 3 {
        debug left_val => _14;
        debug right_val => _15;
        let _20: core::panicking::AssertKind;
        scope 4 {
            debug kind => _20;
        }
    }
    scope 5 {
        debug a => _23;
        debug b => _24;
        let mut _469: &[&str; 2];
    }
    scope 6 {
        debug left_val => _43;
        debug right_val => _44;
        let _49: core::panicking::AssertKind;
        scope 7 {
            debug kind => _49;
        }
    }
    scope 8 {
        debug left_val => _54;
        debug right_val => _55;
        let _60: core::panicking::AssertKind;
        scope 9 {
            debug kind => _60;
        }
    }
    scope 10 {
        debug a => _63;
        debug b => _64;
        let mut _470: &[&str; 2];
    }
    scope 11 {
        debug left_val => _83;
        debug right_val => _84;
        let _89: core::panicking::AssertKind;
        scope 12 {
            debug kind => _89;
        }
    }
    scope 13 {
        debug left_val => _94;
        debug right_val => _95;
        let _100: core::panicking::AssertKind;
        scope 14 {
            debug kind => _100;
        }
    }
    scope 15 {
        debug a => _103;
        debug b => _104;
        let mut _471: &[&str; 2];
    }
    scope 16 {
        debug left_val => _123;
        debug right_val => _124;
        let _129: core::panicking::AssertKind;
        scope 17 {
            debug kind => _129;
        }
    }
    scope 18 {
        debug left_val => _134;
        debug right_val => _135;
        let _140: core::panicking::AssertKind;
        scope 19 {
            debug kind => _140;
        }
    }
    scope 20 {
        debug a => _143;
        debug b => _144;
        let mut _472: &[&str; 2];
    }
    scope 21 {
        debug left_val => _163;
        debug right_val => _164;
        let _169: core::panicking::AssertKind;
        scope 22 {
            debug kind => _169;
        }
    }
    scope 23 {
        debug left_val => _174;
        debug right_val => _175;
        let _180: core::panicking::AssertKind;
        scope 24 {
            debug kind => _180;
        }
    }
    scope 25 {
        debug left_val => _185;
        debug right_val => _186;
        let _191: core::panicking::AssertKind;
        scope 26 {
            debug kind => _191;
        }
    }
    scope 27 {
        debug left_val => _196;
        debug right_val => _197;
        let _202: core::panicking::AssertKind;
        scope 28 {
            debug kind => _202;
        }
    }
    scope 29 {
        debug left_val => _207;
        debug right_val => _208;
        let _213: core::panicking::AssertKind;
        scope 30 {
            debug kind => _213;
        }
    }
    scope 31 {
        debug left_val => _218;
        debug right_val => _219;
        let _224: core::panicking::AssertKind;
        scope 32 {
            debug kind => _224;
        }
    }
    scope 33 {
        debug left_val => _229;
        debug right_val => _230;
        let _235: core::panicking::AssertKind;
        scope 34 {
            debug kind => _235;
        }
    }
    scope 35 {
        debug left_val => _240;
        debug right_val => _241;
        let _246: core::panicking::AssertKind;
        scope 36 {
            debug kind => _246;
        }
    }
    scope 37 {
        debug left_val => _251;
        debug right_val => _252;
        let _257: core::panicking::AssertKind;
        scope 38 {
            debug kind => _257;
        }
    }
    scope 39 {
        debug left_val => _262;
        debug right_val => _263;
        let _268: core::panicking::AssertKind;
        scope 40 {
            debug kind => _268;
        }
    }
    scope 41 {
        debug left_val => _273;
        debug right_val => _274;
        let _279: core::panicking::AssertKind;
        scope 42 {
            debug kind => _279;
        }
    }
    scope 43 {
        debug left_val => _284;
        debug right_val => _285;
        let _290: core::panicking::AssertKind;
        scope 44 {
            debug kind => _290;
        }
    }
    scope 45 {
        debug left_val => _295;
        debug right_val => _296;
        let _301: core::panicking::AssertKind;
        scope 46 {
            debug kind => _301;
        }
    }
    scope 47 {
        debug left_val => _306;
        debug right_val => _307;
        let _312: core::panicking::AssertKind;
        scope 48 {
            debug kind => _312;
        }
    }
    scope 49 {
        debug left_val => _317;
        debug right_val => _318;
        let _323: core::panicking::AssertKind;
        scope 50 {
            debug kind => _323;
        }
    }
    scope 51 {
        debug left_val => _328;
        debug right_val => _329;
        let _334: core::panicking::AssertKind;
        scope 52 {
            debug kind => _334;
        }
    }
    scope 53 {
        debug left_val => _339;
        debug right_val => _340;
        let _345: core::panicking::AssertKind;
        scope 54 {
            debug kind => _345;
        }
    }
    scope 55 {
        debug left_val => _350;
        debug right_val => _351;
        let _356: core::panicking::AssertKind;
        scope 56 {
            debug kind => _356;
        }
    }
    scope 57 {
        debug left_val => _361;
        debug right_val => _362;
        let _367: core::panicking::AssertKind;
        scope 58 {
            debug kind => _367;
        }
    }
    scope 59 {
        debug left_val => _372;
        debug right_val => _373;
        let _378: core::panicking::AssertKind;
        scope 60 {
            debug kind => _378;
        }
    }
    scope 61 {
        debug left_val => _383;
        debug right_val => _384;
        let _389: core::panicking::AssertKind;
        scope 62 {
            debug kind => _389;
        }
    }
    scope 63 {
        debug left_val => _394;
        debug right_val => _395;
        let _400: core::panicking::AssertKind;
        scope 64 {
            debug kind => _400;
        }
    }
    scope 65 {
        debug left_val => _405;
        debug right_val => _406;
        let _411: core::panicking::AssertKind;
        scope 66 {
            debug kind => _411;
        }
    }
    scope 67 {
        debug left_val => _416;
        debug right_val => _417;
        let _422: core::panicking::AssertKind;
        scope 68 {
            debug kind => _422;
        }
    }
    scope 69 {
        debug left_val => _427;
        debug right_val => _428;
        let _433: core::panicking::AssertKind;
        scope 70 {
            debug kind => _433;
        }
    }
    scope 71 {
        debug left_val => _438;
        debug right_val => _439;
        let _444: core::panicking::AssertKind;
        scope 72 {
            debug kind => _444;
        }
    }
    scope 73 {
        debug left_val => _449;
        debug right_val => _450;
        let _455: core::panicking::AssertKind;
        scope 74 {
            debug kind => _455;
        }
    }
    scope 75 {
        debug left_val => _460;
        debug right_val => _461;
        let _466: core::panicking::AssertKind;
        scope 76 {
            debug kind => _466;
        }
    }

    bb0: {
        _2 = const {alloc1: &isize};
        _512 = const _;
        _1 = (_2, _512);
        _3 = (_1.0: &isize);
        _4 = (_1.1: &isize);
        _7 = (*_3);
        _8 = (*_4);
        _6 = Eq(move _7, move _8);
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<isize, isize>(move _9, _3, _4, move _11) -> unwind continue;
    }

    bb2: {
        _13 = const {alloc2: &usize};
        _511 = const _;
        _12 = (_13, _511);
        _14 = (_12.0: &usize);
        _15 = (_12.1: &usize);
        _18 = (*_14);
        _19 = (*_15);
        _17 = Eq(move _18, move _19);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<usize, usize>(move _20, _14, _15, move _22) -> unwind continue;
    }

    bb4: {
        _26 = const {alloc3: &f64};
        _510 = const _;
        _25 = (_26, _510);
        _23 = (_25.0: &f64);
        _24 = (_25.1: &f64);
        _31 = (*_23);
        _32 = (*_24);
        _30 = Sub(move _31, move _32);
        _29 = f64::<impl f64>::abs(move _30) -> [return: bb5, unwind continue];
    }

    bb5: {
        _28 = Lt(move _29, const 9.9999999999999995E-7f64);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb10, otherwise: bb6];
    }

    bb6: {
        _469 = const _;
        _35 = _469 as &[&str] (Pointer(Unsize));
        _39 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_23) -> [return: bb7, unwind continue];
    }

    bb7: {
        _40 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_24) -> [return: bb8, unwind continue];
    }

    bb8: {
        _38 = [move _39, move _40];
        _37 = &_38;
        _36 = _37 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _34 = Arguments::<'_>::new_v1(move _35, move _36) -> [return: bb9, unwind continue];
    }

    bb9: {
        _33 = panic_fmt(move _34) -> unwind continue;
    }

    bb10: {
        _42 = const {alloc4: &isize};
        _509 = const _;
        _41 = (_42, _509);
        _43 = (_41.0: &isize);
        _44 = (_41.1: &isize);
        _47 = (*_43);
        _48 = (*_44);
        _46 = Eq(move _47, move _48);
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _49 = core::panicking::AssertKind::Eq;
        _51 = Option::<Arguments<'_>>::None;
        _50 = core::panicking::assert_failed::<isize, isize>(move _49, _43, _44, move _51) -> unwind continue;
    }

    bb12: {
        _53 = const {alloc5: &usize};
        _508 = const _;
        _52 = (_53, _508);
        _54 = (_52.0: &usize);
        _55 = (_52.1: &usize);
        _58 = (*_54);
        _59 = (*_55);
        _57 = Eq(move _58, move _59);
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<usize, usize>(move _60, _54, _55, move _62) -> unwind continue;
    }

    bb14: {
        _66 = const {alloc6: &f64};
        _507 = const _;
        _65 = (_66, _507);
        _63 = (_65.0: &f64);
        _64 = (_65.1: &f64);
        _71 = (*_63);
        _72 = (*_64);
        _70 = Sub(move _71, move _72);
        _69 = f64::<impl f64>::abs(move _70) -> [return: bb15, unwind continue];
    }

    bb15: {
        _68 = Lt(move _69, const 9.9999999999999995E-7f64);
        _67 = Not(move _68);
        switchInt(move _67) -> [0: bb20, otherwise: bb16];
    }

    bb16: {
        _470 = const _;
        _75 = _470 as &[&str] (Pointer(Unsize));
        _79 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_63) -> [return: bb17, unwind continue];
    }

    bb17: {
        _80 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_64) -> [return: bb18, unwind continue];
    }

    bb18: {
        _78 = [move _79, move _80];
        _77 = &_78;
        _76 = _77 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _74 = Arguments::<'_>::new_v1(move _75, move _76) -> [return: bb19, unwind continue];
    }

    bb19: {
        _73 = panic_fmt(move _74) -> unwind continue;
    }

    bb20: {
        _82 = const {alloc7: &isize};
        _506 = const _;
        _81 = (_82, _506);
        _83 = (_81.0: &isize);
        _84 = (_81.1: &isize);
        _87 = (*_83);
        _88 = (*_84);
        _86 = Eq(move _87, move _88);
        _85 = Not(move _86);
        switchInt(move _85) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _89 = core::panicking::AssertKind::Eq;
        _91 = Option::<Arguments<'_>>::None;
        _90 = core::panicking::assert_failed::<isize, isize>(move _89, _83, _84, move _91) -> unwind continue;
    }

    bb22: {
        _93 = const {alloc8: &usize};
        _505 = const _;
        _92 = (_93, _505);
        _94 = (_92.0: &usize);
        _95 = (_92.1: &usize);
        _98 = (*_94);
        _99 = (*_95);
        _97 = Eq(move _98, move _99);
        _96 = Not(move _97);
        switchInt(move _96) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _100 = core::panicking::AssertKind::Eq;
        _102 = Option::<Arguments<'_>>::None;
        _101 = core::panicking::assert_failed::<usize, usize>(move _100, _94, _95, move _102) -> unwind continue;
    }

    bb24: {
        _106 = const {alloc9: &f64};
        _504 = const _;
        _105 = (_106, _504);
        _103 = (_105.0: &f64);
        _104 = (_105.1: &f64);
        _111 = (*_103);
        _112 = (*_104);
        _110 = Sub(move _111, move _112);
        _109 = f64::<impl f64>::abs(move _110) -> [return: bb25, unwind continue];
    }

    bb25: {
        _108 = Lt(move _109, const 9.9999999999999995E-7f64);
        _107 = Not(move _108);
        switchInt(move _107) -> [0: bb30, otherwise: bb26];
    }

    bb26: {
        _471 = const _;
        _115 = _471 as &[&str] (Pointer(Unsize));
        _119 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_103) -> [return: bb27, unwind continue];
    }

    bb27: {
        _120 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_104) -> [return: bb28, unwind continue];
    }

    bb28: {
        _118 = [move _119, move _120];
        _117 = &_118;
        _116 = _117 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _114 = Arguments::<'_>::new_v1(move _115, move _116) -> [return: bb29, unwind continue];
    }

    bb29: {
        _113 = panic_fmt(move _114) -> unwind continue;
    }

    bb30: {
        _122 = const {alloc10: &isize};
        _503 = const _;
        _121 = (_122, _503);
        _123 = (_121.0: &isize);
        _124 = (_121.1: &isize);
        _127 = (*_123);
        _128 = (*_124);
        _126 = Eq(move _127, move _128);
        _125 = Not(move _126);
        switchInt(move _125) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _129 = core::panicking::AssertKind::Eq;
        _131 = Option::<Arguments<'_>>::None;
        _130 = core::panicking::assert_failed::<isize, isize>(move _129, _123, _124, move _131) -> unwind continue;
    }

    bb32: {
        _133 = const {alloc11: &usize};
        _502 = const _;
        _132 = (_133, _502);
        _134 = (_132.0: &usize);
        _135 = (_132.1: &usize);
        _138 = (*_134);
        _139 = (*_135);
        _137 = Eq(move _138, move _139);
        _136 = Not(move _137);
        switchInt(move _136) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _140 = core::panicking::AssertKind::Eq;
        _142 = Option::<Arguments<'_>>::None;
        _141 = core::panicking::assert_failed::<usize, usize>(move _140, _134, _135, move _142) -> unwind continue;
    }

    bb34: {
        _146 = const {alloc12: &f64};
        _501 = const _;
        _145 = (_146, _501);
        _143 = (_145.0: &f64);
        _144 = (_145.1: &f64);
        _151 = (*_143);
        _152 = (*_144);
        _150 = Sub(move _151, move _152);
        _149 = f64::<impl f64>::abs(move _150) -> [return: bb35, unwind continue];
    }

    bb35: {
        _148 = Lt(move _149, const 9.9999999999999995E-7f64);
        _147 = Not(move _148);
        switchInt(move _147) -> [0: bb40, otherwise: bb36];
    }

    bb36: {
        _472 = const _;
        _155 = _472 as &[&str] (Pointer(Unsize));
        _159 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_143) -> [return: bb37, unwind continue];
    }

    bb37: {
        _160 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_144) -> [return: bb38, unwind continue];
    }

    bb38: {
        _158 = [move _159, move _160];
        _157 = &_158;
        _156 = _157 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _154 = Arguments::<'_>::new_v1(move _155, move _156) -> [return: bb39, unwind continue];
    }

    bb39: {
        _153 = panic_fmt(move _154) -> unwind continue;
    }

    bb40: {
        _162 = const {alloc13: &bool};
        _500 = const _;
        _161 = (_162, _500);
        _163 = (_161.0: &bool);
        _164 = (_161.1: &bool);
        _167 = (*_163);
        _168 = (*_164);
        _166 = Eq(move _167, move _168);
        _165 = Not(move _166);
        switchInt(move _165) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _169 = core::panicking::AssertKind::Eq;
        _171 = Option::<Arguments<'_>>::None;
        _170 = core::panicking::assert_failed::<bool, bool>(move _169, _163, _164, move _171) -> unwind continue;
    }

    bb42: {
        _173 = const {alloc14: &bool};
        _499 = const _;
        _172 = (_173, _499);
        _174 = (_172.0: &bool);
        _175 = (_172.1: &bool);
        _178 = (*_174);
        _179 = (*_175);
        _177 = Eq(move _178, move _179);
        _176 = Not(move _177);
        switchInt(move _176) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        _180 = core::panicking::AssertKind::Eq;
        _182 = Option::<Arguments<'_>>::None;
        _181 = core::panicking::assert_failed::<bool, bool>(move _180, _174, _175, move _182) -> unwind continue;
    }

    bb44: {
        _184 = const {alloc15: &isize};
        _498 = const _;
        _183 = (_184, _498);
        _185 = (_183.0: &isize);
        _186 = (_183.1: &isize);
        _189 = (*_185);
        _190 = (*_186);
        _188 = Eq(move _189, move _190);
        _187 = Not(move _188);
        switchInt(move _187) -> [0: bb46, otherwise: bb45];
    }

    bb45: {
        _191 = core::panicking::AssertKind::Eq;
        _193 = Option::<Arguments<'_>>::None;
        _192 = core::panicking::assert_failed::<isize, isize>(move _191, _185, _186, move _193) -> unwind continue;
    }

    bb46: {
        _195 = const {alloc16: &usize};
        _497 = const _;
        _194 = (_195, _497);
        _196 = (_194.0: &usize);
        _197 = (_194.1: &usize);
        _200 = (*_196);
        _201 = (*_197);
        _199 = Eq(move _200, move _201);
        _198 = Not(move _199);
        switchInt(move _198) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _202 = core::panicking::AssertKind::Eq;
        _204 = Option::<Arguments<'_>>::None;
        _203 = core::panicking::assert_failed::<usize, usize>(move _202, _196, _197, move _204) -> unwind continue;
    }

    bb48: {
        _206 = const {alloc17: &isize};
        _496 = const _;
        _205 = (_206, _496);
        _207 = (_205.0: &isize);
        _208 = (_205.1: &isize);
        _211 = (*_207);
        _212 = (*_208);
        _210 = Eq(move _211, move _212);
        _209 = Not(move _210);
        switchInt(move _209) -> [0: bb50, otherwise: bb49];
    }

    bb49: {
        _213 = core::panicking::AssertKind::Eq;
        _215 = Option::<Arguments<'_>>::None;
        _214 = core::panicking::assert_failed::<isize, isize>(move _213, _207, _208, move _215) -> unwind continue;
    }

    bb50: {
        _217 = const {alloc18: &usize};
        _495 = const _;
        _216 = (_217, _495);
        _218 = (_216.0: &usize);
        _219 = (_216.1: &usize);
        _222 = (*_218);
        _223 = (*_219);
        _221 = Eq(move _222, move _223);
        _220 = Not(move _221);
        switchInt(move _220) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        _224 = core::panicking::AssertKind::Eq;
        _226 = Option::<Arguments<'_>>::None;
        _225 = core::panicking::assert_failed::<usize, usize>(move _224, _218, _219, move _226) -> unwind continue;
    }

    bb52: {
        _228 = const {alloc19: &isize};
        _494 = const _;
        _227 = (_228, _494);
        _229 = (_227.0: &isize);
        _230 = (_227.1: &isize);
        _233 = (*_229);
        _234 = (*_230);
        _232 = Eq(move _233, move _234);
        _231 = Not(move _232);
        switchInt(move _231) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _235 = core::panicking::AssertKind::Eq;
        _237 = Option::<Arguments<'_>>::None;
        _236 = core::panicking::assert_failed::<isize, isize>(move _235, _229, _230, move _237) -> unwind continue;
    }

    bb54: {
        _239 = const {alloc20: &usize};
        _493 = const _;
        _238 = (_239, _493);
        _240 = (_238.0: &usize);
        _241 = (_238.1: &usize);
        _244 = (*_240);
        _245 = (*_241);
        _243 = Eq(move _244, move _245);
        _242 = Not(move _243);
        switchInt(move _242) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _246 = core::panicking::AssertKind::Eq;
        _248 = Option::<Arguments<'_>>::None;
        _247 = core::panicking::assert_failed::<usize, usize>(move _246, _240, _241, move _248) -> unwind continue;
    }

    bb56: {
        _250 = const {alloc21: &isize};
        _492 = const _;
        _249 = (_250, _492);
        _251 = (_249.0: &isize);
        _252 = (_249.1: &isize);
        _255 = (*_251);
        _256 = (*_252);
        _254 = Eq(move _255, move _256);
        _253 = Not(move _254);
        switchInt(move _253) -> [0: bb58, otherwise: bb57];
    }

    bb57: {
        _257 = core::panicking::AssertKind::Eq;
        _259 = Option::<Arguments<'_>>::None;
        _258 = core::panicking::assert_failed::<isize, isize>(move _257, _251, _252, move _259) -> unwind continue;
    }

    bb58: {
        _261 = const {alloc22: &isize};
        _491 = const _;
        _260 = (_261, _491);
        _262 = (_260.0: &isize);
        _263 = (_260.1: &isize);
        _266 = (*_262);
        _267 = (*_263);
        _265 = Eq(move _266, move _267);
        _264 = Not(move _265);
        switchInt(move _264) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _268 = core::panicking::AssertKind::Eq;
        _270 = Option::<Arguments<'_>>::None;
        _269 = core::panicking::assert_failed::<isize, isize>(move _268, _262, _263, move _270) -> unwind continue;
    }

    bb60: {
        _272 = const {alloc23: &usize};
        _490 = const _;
        _271 = (_272, _490);
        _273 = (_271.0: &usize);
        _274 = (_271.1: &usize);
        _277 = (*_273);
        _278 = (*_274);
        _276 = Eq(move _277, move _278);
        _275 = Not(move _276);
        switchInt(move _275) -> [0: bb62, otherwise: bb61];
    }

    bb61: {
        _279 = core::panicking::AssertKind::Eq;
        _281 = Option::<Arguments<'_>>::None;
        _280 = core::panicking::assert_failed::<usize, usize>(move _279, _273, _274, move _281) -> unwind continue;
    }

    bb62: {
        _283 = const {alloc24: &bool};
        _489 = const _;
        _282 = (_283, _489);
        _284 = (_282.0: &bool);
        _285 = (_282.1: &bool);
        _288 = (*_284);
        _289 = (*_285);
        _287 = Eq(move _288, move _289);
        _286 = Not(move _287);
        switchInt(move _286) -> [0: bb64, otherwise: bb63];
    }

    bb63: {
        _290 = core::panicking::AssertKind::Eq;
        _292 = Option::<Arguments<'_>>::None;
        _291 = core::panicking::assert_failed::<bool, bool>(move _290, _284, _285, move _292) -> unwind continue;
    }

    bb64: {
        _294 = const {alloc25: &bool};
        _488 = const _;
        _293 = (_294, _488);
        _295 = (_293.0: &bool);
        _296 = (_293.1: &bool);
        _299 = (*_295);
        _300 = (*_296);
        _298 = Eq(move _299, move _300);
        _297 = Not(move _298);
        switchInt(move _297) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _301 = core::panicking::AssertKind::Eq;
        _303 = Option::<Arguments<'_>>::None;
        _302 = core::panicking::assert_failed::<bool, bool>(move _301, _295, _296, move _303) -> unwind continue;
    }

    bb66: {
        _305 = const {alloc26: &bool};
        _487 = const _;
        _304 = (_305, _487);
        _306 = (_304.0: &bool);
        _307 = (_304.1: &bool);
        _310 = (*_306);
        _311 = (*_307);
        _309 = Eq(move _310, move _311);
        _308 = Not(move _309);
        switchInt(move _308) -> [0: bb68, otherwise: bb67];
    }

    bb67: {
        _312 = core::panicking::AssertKind::Eq;
        _314 = Option::<Arguments<'_>>::None;
        _313 = core::panicking::assert_failed::<bool, bool>(move _312, _306, _307, move _314) -> unwind continue;
    }

    bb68: {
        _316 = const {alloc27: &bool};
        _486 = const _;
        _315 = (_316, _486);
        _317 = (_315.0: &bool);
        _318 = (_315.1: &bool);
        _321 = (*_317);
        _322 = (*_318);
        _320 = Eq(move _321, move _322);
        _319 = Not(move _320);
        switchInt(move _319) -> [0: bb70, otherwise: bb69];
    }

    bb69: {
        _323 = core::panicking::AssertKind::Eq;
        _325 = Option::<Arguments<'_>>::None;
        _324 = core::panicking::assert_failed::<bool, bool>(move _323, _317, _318, move _325) -> unwind continue;
    }

    bb70: {
        _327 = const {alloc28: &bool};
        _485 = const _;
        _326 = (_327, _485);
        _328 = (_326.0: &bool);
        _329 = (_326.1: &bool);
        _332 = (*_328);
        _333 = (*_329);
        _331 = Eq(move _332, move _333);
        _330 = Not(move _331);
        switchInt(move _330) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _334 = core::panicking::AssertKind::Eq;
        _336 = Option::<Arguments<'_>>::None;
        _335 = core::panicking::assert_failed::<bool, bool>(move _334, _328, _329, move _336) -> unwind continue;
    }

    bb72: {
        _338 = const {alloc29: &bool};
        _484 = const _;
        _337 = (_338, _484);
        _339 = (_337.0: &bool);
        _340 = (_337.1: &bool);
        _343 = (*_339);
        _344 = (*_340);
        _342 = Eq(move _343, move _344);
        _341 = Not(move _342);
        switchInt(move _341) -> [0: bb74, otherwise: bb73];
    }

    bb73: {
        _345 = core::panicking::AssertKind::Eq;
        _347 = Option::<Arguments<'_>>::None;
        _346 = core::panicking::assert_failed::<bool, bool>(move _345, _339, _340, move _347) -> unwind continue;
    }

    bb74: {
        _349 = const {alloc30: &bool};
        _483 = const _;
        _348 = (_349, _483);
        _350 = (_348.0: &bool);
        _351 = (_348.1: &bool);
        _354 = (*_350);
        _355 = (*_351);
        _353 = Eq(move _354, move _355);
        _352 = Not(move _353);
        switchInt(move _352) -> [0: bb76, otherwise: bb75];
    }

    bb75: {
        _356 = core::panicking::AssertKind::Eq;
        _358 = Option::<Arguments<'_>>::None;
        _357 = core::panicking::assert_failed::<bool, bool>(move _356, _350, _351, move _358) -> unwind continue;
    }

    bb76: {
        _360 = const {alloc31: &bool};
        _482 = const _;
        _359 = (_360, _482);
        _361 = (_359.0: &bool);
        _362 = (_359.1: &bool);
        _365 = (*_361);
        _366 = (*_362);
        _364 = Eq(move _365, move _366);
        _363 = Not(move _364);
        switchInt(move _363) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        _367 = core::panicking::AssertKind::Eq;
        _369 = Option::<Arguments<'_>>::None;
        _368 = core::panicking::assert_failed::<bool, bool>(move _367, _361, _362, move _369) -> unwind continue;
    }

    bb78: {
        _371 = const {alloc32: &bool};
        _481 = const _;
        _370 = (_371, _481);
        _372 = (_370.0: &bool);
        _373 = (_370.1: &bool);
        _376 = (*_372);
        _377 = (*_373);
        _375 = Eq(move _376, move _377);
        _374 = Not(move _375);
        switchInt(move _374) -> [0: bb80, otherwise: bb79];
    }

    bb79: {
        _378 = core::panicking::AssertKind::Eq;
        _380 = Option::<Arguments<'_>>::None;
        _379 = core::panicking::assert_failed::<bool, bool>(move _378, _372, _373, move _380) -> unwind continue;
    }

    bb80: {
        _382 = const {alloc33: &bool};
        _480 = const _;
        _381 = (_382, _480);
        _383 = (_381.0: &bool);
        _384 = (_381.1: &bool);
        _387 = (*_383);
        _388 = (*_384);
        _386 = Eq(move _387, move _388);
        _385 = Not(move _386);
        switchInt(move _385) -> [0: bb82, otherwise: bb81];
    }

    bb81: {
        _389 = core::panicking::AssertKind::Eq;
        _391 = Option::<Arguments<'_>>::None;
        _390 = core::panicking::assert_failed::<bool, bool>(move _389, _383, _384, move _391) -> unwind continue;
    }

    bb82: {
        _393 = const {alloc34: &bool};
        _479 = const _;
        _392 = (_393, _479);
        _394 = (_392.0: &bool);
        _395 = (_392.1: &bool);
        _398 = (*_394);
        _399 = (*_395);
        _397 = Eq(move _398, move _399);
        _396 = Not(move _397);
        switchInt(move _396) -> [0: bb84, otherwise: bb83];
    }

    bb83: {
        _400 = core::panicking::AssertKind::Eq;
        _402 = Option::<Arguments<'_>>::None;
        _401 = core::panicking::assert_failed::<bool, bool>(move _400, _394, _395, move _402) -> unwind continue;
    }

    bb84: {
        _404 = const {alloc35: &bool};
        _478 = const _;
        _403 = (_404, _478);
        _405 = (_403.0: &bool);
        _406 = (_403.1: &bool);
        _409 = (*_405);
        _410 = (*_406);
        _408 = Eq(move _409, move _410);
        _407 = Not(move _408);
        switchInt(move _407) -> [0: bb86, otherwise: bb85];
    }

    bb85: {
        _411 = core::panicking::AssertKind::Eq;
        _413 = Option::<Arguments<'_>>::None;
        _412 = core::panicking::assert_failed::<bool, bool>(move _411, _405, _406, move _413) -> unwind continue;
    }

    bb86: {
        _415 = const {alloc36: &bool};
        _477 = const _;
        _414 = (_415, _477);
        _416 = (_414.0: &bool);
        _417 = (_414.1: &bool);
        _420 = (*_416);
        _421 = (*_417);
        _419 = Eq(move _420, move _421);
        _418 = Not(move _419);
        switchInt(move _418) -> [0: bb88, otherwise: bb87];
    }

    bb87: {
        _422 = core::panicking::AssertKind::Eq;
        _424 = Option::<Arguments<'_>>::None;
        _423 = core::panicking::assert_failed::<bool, bool>(move _422, _416, _417, move _424) -> unwind continue;
    }

    bb88: {
        _426 = const {alloc37: &bool};
        _476 = const _;
        _425 = (_426, _476);
        _427 = (_425.0: &bool);
        _428 = (_425.1: &bool);
        _431 = (*_427);
        _432 = (*_428);
        _430 = Eq(move _431, move _432);
        _429 = Not(move _430);
        switchInt(move _429) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        _433 = core::panicking::AssertKind::Eq;
        _435 = Option::<Arguments<'_>>::None;
        _434 = core::panicking::assert_failed::<bool, bool>(move _433, _427, _428, move _435) -> unwind continue;
    }

    bb90: {
        _437 = const {alloc38: &bool};
        _475 = const _;
        _436 = (_437, _475);
        _438 = (_436.0: &bool);
        _439 = (_436.1: &bool);
        _442 = (*_438);
        _443 = (*_439);
        _441 = Eq(move _442, move _443);
        _440 = Not(move _441);
        switchInt(move _440) -> [0: bb92, otherwise: bb91];
    }

    bb91: {
        _444 = core::panicking::AssertKind::Eq;
        _446 = Option::<Arguments<'_>>::None;
        _445 = core::panicking::assert_failed::<bool, bool>(move _444, _438, _439, move _446) -> unwind continue;
    }

    bb92: {
        _448 = const {alloc39: &bool};
        _474 = const _;
        _447 = (_448, _474);
        _449 = (_447.0: &bool);
        _450 = (_447.1: &bool);
        _453 = (*_449);
        _454 = (*_450);
        _452 = Eq(move _453, move _454);
        _451 = Not(move _452);
        switchInt(move _451) -> [0: bb94, otherwise: bb93];
    }

    bb93: {
        _455 = core::panicking::AssertKind::Eq;
        _457 = Option::<Arguments<'_>>::None;
        _456 = core::panicking::assert_failed::<bool, bool>(move _455, _449, _450, move _457) -> unwind continue;
    }

    bb94: {
        _459 = const {alloc40: &bool};
        _473 = const _;
        _458 = (_459, _473);
        _460 = (_458.0: &bool);
        _461 = (_458.1: &bool);
        _464 = (*_460);
        _465 = (*_461);
        _463 = Eq(move _464, move _465);
        _462 = Not(move _463);
        switchInt(move _462) -> [0: bb96, otherwise: bb95];
    }

    bb95: {
        _466 = core::panicking::AssertKind::Eq;
        _468 = Option::<Arguments<'_>>::None;
        _467 = core::panicking::assert_failed::<bool, bool>(move _466, _460, _461, move _468) -> unwind continue;
    }

    bb96: {
        return;
    }
}

alloc40 (static: AO, size: 1, align: 1) {
    01                                              │ .
}

alloc39 (static: AN, size: 1, align: 1) {
    01                                              │ .
}

alloc38 (static: AM, size: 1, align: 1) {
    01                                              │ .
}

alloc37 (static: AL, size: 1, align: 1) {
    01                                              │ .
}

alloc36 (static: AK, size: 1, align: 1) {
    01                                              │ .
}

alloc35 (static: AJ, size: 1, align: 1) {
    01                                              │ .
}

alloc34 (static: AI, size: 1, align: 1) {
    01                                              │ .
}

alloc33 (static: AH, size: 1, align: 1) {
    01                                              │ .
}

alloc32 (static: AG, size: 1, align: 1) {
    01                                              │ .
}

alloc31 (static: AF, size: 1, align: 1) {
    01                                              │ .
}

alloc30 (static: AE, size: 1, align: 1) {
    01                                              │ .
}

alloc29 (static: AD, size: 1, align: 1) {
    01                                              │ .
}

alloc28 (static: AC, size: 1, align: 1) {
    01                                              │ .
}

alloc27 (static: AB, size: 1, align: 1) {
    01                                              │ .
}

alloc26 (static: AA, size: 1, align: 1) {
    01                                              │ .
}

alloc25 (static: Z, size: 1, align: 1) {
    01                                              │ .
}

alloc24 (static: Y, size: 1, align: 1) {
    01                                              │ .
}

alloc23 (static: X, size: 8, align: 8) {
    40 00 00 00 00 00 00 00                         │ @.......
}

alloc22 (static: W, size: 8, align: 8) {
    40 00 00 00 00 00 00 00                         │ @.......
}

alloc21 (static: V, size: 8, align: 8) {
    08 00 00 00 00 00 00 00                         │ ........
}

alloc20 (static: U, size: 8, align: 8) {
    02 00 00 00 00 00 00 00                         │ ........
}

alloc19 (static: T, size: 8, align: 8) {
    02 00 00 00 00 00 00 00                         │ ........
}

alloc18 (static: S, size: 8, align: 8) {
    03 00 00 00 00 00 00 00                         │ ........
}

alloc17 (static: R, size: 8, align: 8) {
    03 00 00 00 00 00 00 00                         │ ........
}

alloc16 (static: Q, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

alloc15 (static: P, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

alloc14 (static: O, size: 1, align: 1) {
    01                                              │ .
}

alloc13 (static: N, size: 1, align: 1) {
    00                                              │ .
}

alloc12 (static: J, size: 8, align: 8) {
    00 00 00 00 00 00 f0 3f                         │ .......?
}

alloc11 (static: I, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

alloc10 (static: H, size: 8, align: 8) {
    fd ff ff ff ff ff ff ff                         │ ........
}

alloc9 (static: G, size: 8, align: 8) {
    47 e1 7a 14 ae c7 25 40                         │ G.z...%@
}

alloc8 (static: F, size: 8, align: 8) {
    09 00 00 00 00 00 00 00                         │ ........
}

alloc7 (static: E2, size: 8, align: 8) {
    f7 ff ff ff ff ff ff ff                         │ ........
}

alloc6 (static: E, size: 8, align: 8) {
    30 33 33 33 33 33 d3 3f                         │ 033333.?
}

alloc5 (static: D, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

alloc4 (static: C, size: 8, align: 8) {
    ff ff ff ff ff ff ff ff                         │ ........
}

alloc3 (static: B, size: 8, align: 8) {
    cd cc cc cc cc cc 16 40                         │ .......@
}

alloc2 (static: A2, size: 8, align: 8) {
    06 00 00 00 00 00 00 00                         │ ........
}

alloc1 (static: A, size: 8, align: 8) {
    ff ff ff ff ff ff ff ff                         │ ........
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const " is not approximately equal to "];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const " is not approximately equal to "];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const " is not approximately equal to "];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const " is not approximately equal to "];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 64_usize;
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 64_isize;
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 8_isize;
        _0 = &_1;
        return;
    }
}

promoted[24] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[25] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[26] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[27] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}

promoted[28] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[29] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[30] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[31] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const false;
        _0 = &_1;
        return;
    }
}

promoted[32] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 1f64;
        _0 = &_1;
        return;
    }
}

promoted[33] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[34] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const -3_isize;
        _0 = &_1;
        return;
    }
}

promoted[35] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 10.890000000000001f64;
        _0 = &_1;
        return;
    }
}

promoted[36] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 9_usize;
        _0 = &_1;
        return;
    }
}

promoted[37] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const -9_isize;
        _0 = &_1;
        return;
    }
}

promoted[38] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 0.29999999999999999f64;
        _0 = &_1;
        return;
    }
}

promoted[39] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

promoted[40] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const -1_isize;
        _0 = &_1;
        return;
    }
}

promoted[41] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 5.7000000000000002f64;
        _0 = &_1;
        return;
    }
}

promoted[42] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 6_usize;
        _0 = &_1;
        return;
    }
}

promoted[43] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const -1_isize;
        _0 = &_1;
        return;
    }
}
