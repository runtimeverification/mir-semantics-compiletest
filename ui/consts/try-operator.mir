// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/try-operator.rs:8:11: 8:11
    let mut _1: (&std::result::Result<bool, ()>, &std::result::Result<bool, ()>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _5: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _6: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _8: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _9: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _11: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _12: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _13: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _14: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _15: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _16: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _18: (&std::option::Option<()>, &std::option::Option<()>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _19: &std::option::Option<()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _20: &std::option::Option<()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _21: &std::option::Option<()>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _22: &std::option::Option<()>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _23: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _24: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _25: &std::option::Option<()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _26: &std::option::Option<()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _28: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _29: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _30: &std::option::Option<()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _31: &std::option::Option<()>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _32: &std::option::Option<()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _33: &std::option::Option<()>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _35: &std::option::Option<()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _36: &std::option::Option<()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _37: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _38: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _4;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _5;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _10: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _10;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _21;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _22;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _27: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _27;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _38 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Result<bool, ()>, val: Unevaluated(main, [], Some(promoted[3])) }
        _2 = _38;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _37 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Result<bool, ()>, val: Unevaluated(main, [], Some(promoted[2])) }
        _3 = _37;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _4 = (_1.0: &std::result::Result<bool, ()>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _5 = (_1.1: &std::result::Result<bool, ()>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _8 = _4;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _9 = _5;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _7 = <Result<bool, ()> as PartialEq>::eq(move _8, move _9) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<bool, ()>, &'b Result<bool, ()>) -> bool {<Result<bool, ()> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = Not(move _7);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _6) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _10 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _12 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = _4;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _13 = _14;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _11 = core::panicking::assert_failed::<Result<bool, ()>, Result<bool, ()>>(move _12, move _13, move _15, move _17); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<bool, ()>, &'b Result<bool, ()>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<bool, ()>, Result<bool, ()>>}, val: Value(<ZST>) }
    }

    bb3: {
        _36 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<()>, val: Unevaluated(main, [], Some(promoted[1])) }
        _19 = _36;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _35 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<()>, val: Unevaluated(main, [], Some(promoted[0])) }
        _20 = _35;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _18 = (move _19, move _20);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _21 = (_18.0: &std::option::Option<()>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _22 = (_18.1: &std::option::Option<()>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _25 = _21;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _26 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _24 = <Option<()> as PartialEq>::eq(move _25, move _26) -> bb4; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<()>, &'b Option<()>) -> bool {<Option<()> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _23 = Not(move _24);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _23) -> [0: bb6, otherwise: bb5]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _27 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _29 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _31 = _21;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _30 = _31;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _33 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _32 = _33;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _34 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _28 = core::panicking::assert_failed::<Option<()>, Option<()>>(move _29, move _30, move _32, move _34); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<()>, &'b Option<()>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<()>, Option<()>>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/consts/try-operator.rs:23:2: 23:2
    }
}

promoted[0] in main: &Option<()> = {
    let mut _0: &std::option::Option<()>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<()>; // in scope 0 at ui/consts/try-operator.rs:22:22: 22:25

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/try-operator.rs:22:22: 22:25
                                         // mir::Constant
                                         // + span: ui/consts/try-operator.rs:22:22: 22:25
                                         // + literal: Const { ty: Option<()>, val: Unevaluated(BAR, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &Option<()> = {
    let mut _0: &std::option::Option<()>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<()>; // in scope 0 at ui/consts/try-operator.rs:22:16: 22:20

    bb0: {
        _1 = Option::<()>::None;         // scope 0 at ui/consts/try-operator.rs:22:16: 22:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[2] in main: &Result<bool, ()> = {
    let mut _0: &std::result::Result<bool, ()>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::result::Result<bool, ()>; // in scope 0 at ui/consts/try-operator.rs:15:25: 15:28

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/try-operator.rs:15:25: 15:28
                                         // mir::Constant
                                         // + span: ui/consts/try-operator.rs:15:25: 15:28
                                         // + literal: Const { ty: Result<bool, ()>, val: Unevaluated(FOO, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &Result<bool, ()> = {
    let mut _0: &std::result::Result<bool, ()>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::result::Result<bool, ()>; // in scope 0 at ui/consts/try-operator.rs:15:16: 15:23
    let mut _2: ();                      // in scope 0 at ui/consts/try-operator.rs:15:20: 15:22

    bb0: {
        _2 = ();                         // scope 0 at ui/consts/try-operator.rs:15:20: 15:22
        _1 = Result::<bool, ()>::Err(move _2); // scope 0 at ui/consts/try-operator.rs:15:16: 15:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

fn result() -> Result<bool, ()> {
    let mut _0: std::result::Result<bool, ()>; // return place in scope 0 at ui/consts/try-operator.rs:9:26: 9:42
    let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>>; // in scope 0 at ui/consts/try-operator.rs:10:9: 10:17
    let mut _2: std::result::Result<(), ()>; // in scope 0 at ui/consts/try-operator.rs:10:9: 10:16
    let mut _3: isize;                   // in scope 0 at ui/consts/try-operator.rs:10:16: 10:17
    let _4: std::result::Result<std::convert::Infallible, ()>; // in scope 0 at ui/consts/try-operator.rs:10:16: 10:17
    let mut _5: std::result::Result<std::convert::Infallible, ()>; // in scope 0 at ui/consts/try-operator.rs:10:16: 10:17
    let _6: ();                          // in scope 0 at ui/consts/try-operator.rs:10:9: 10:17
    scope 1 {
        debug residual => _4;            // in scope 1 at ui/consts/try-operator.rs:10:16: 10:17
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;                 // in scope 3 at ui/consts/try-operator.rs:10:9: 10:17
        scope 4 {
        }
    }

    bb0: {
        _2 = const Result::<(), ()>::Err(()); // scope 0 at ui/consts/try-operator.rs:10:9: 10:16
                                         // mir::Constant
                                         // + span: ui/consts/try-operator.rs:10:9: 10:16
                                         // + literal: Const { ty: Result<(), ()>, val: Value(Scalar(0x01)) }
        _1 = <Result<(), ()> as Try>::branch(move _2) -> bb1; // scope 0 at ui/consts/try-operator.rs:10:9: 10:17
                                         // mir::Constant
                                         // + span: ui/consts/try-operator.rs:10:9: 10:17
                                         // + literal: Const { ty: fn(Result<(), ()>) -> ControlFlow<<Result<(), ()> as Try>::Residual, <Result<(), ()> as Try>::Output> {<Result<(), ()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = discriminant(_1);           // scope 0 at ui/consts/try-operator.rs:10:9: 10:17
        switchInt(move _3) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at ui/consts/try-operator.rs:10:9: 10:17
    }

    bb2: {
        _0 = const Result::<bool, ()>::Ok(true); // scope 0 at ui/consts/try-operator.rs:11:9: 11:17
                                         // mir::Constant
                                         // + span: ui/consts/try-operator.rs:11:9: 11:17
                                         // + literal: Const { ty: Result<bool, ()>, val: Value(Scalar(0x01)) }
        goto -> bb5;                     // scope 0 at ui/consts/try-operator.rs:12:6: 12:6
    }

    bb3: {
        unreachable;                     // scope 0 at ui/consts/try-operator.rs:10:9: 10:17
    }

    bb4: {
        _0 = <Result<bool, ()> as FromResidual<Result<Infallible, ()>>>::from_residual(move _5) -> bb5; // scope 2 at ui/consts/try-operator.rs:10:9: 10:17
                                         // mir::Constant
                                         // + span: ui/consts/try-operator.rs:10:16: 10:17
                                         // + literal: Const { ty: fn(Result<Infallible, ()>) -> Result<bool, ()> {<Result<bool, ()> as FromResidual<Result<Infallible, ()>>>::from_residual}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/consts/try-operator.rs:12:6: 12:6
    }
}

// MIR FOR CTFE
fn result() -> Result<bool, ()> {
    let mut _0: std::result::Result<bool, ()>; // return place in scope 0 at ui/consts/try-operator.rs:9:26: 9:42
    let _1: ();                          // in scope 0 at ui/consts/try-operator.rs:10:9: 10:17
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>>; // in scope 0 at ui/consts/try-operator.rs:10:9: 10:17
    let mut _3: std::result::Result<(), ()>; // in scope 0 at ui/consts/try-operator.rs:10:9: 10:16
    let mut _4: ();                      // in scope 0 at ui/consts/try-operator.rs:10:13: 10:15
    let mut _5: isize;                   // in scope 0 at ui/consts/try-operator.rs:10:16: 10:17
    let _6: std::result::Result<std::convert::Infallible, ()>; // in scope 0 at ui/consts/try-operator.rs:10:16: 10:17
    let mut _7: !;                       // in scope 0 at ui/consts/try-operator.rs:10:16: 10:17
    let mut _8: std::result::Result<std::convert::Infallible, ()>; // in scope 0 at ui/consts/try-operator.rs:10:16: 10:17
    let _9: ();                          // in scope 0 at ui/consts/try-operator.rs:10:9: 10:17
    scope 1 {
        debug residual => _6;            // in scope 1 at ui/consts/try-operator.rs:10:16: 10:17
        scope 2 {
        }
    }
    scope 3 {
        debug val => _9;                 // in scope 3 at ui/consts/try-operator.rs:10:9: 10:17
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/try-operator.rs:10:9: 10:17
        StorageLive(_2);                 // scope 0 at ui/consts/try-operator.rs:10:9: 10:17
        StorageLive(_3);                 // scope 0 at ui/consts/try-operator.rs:10:9: 10:16
        StorageLive(_4);                 // scope 0 at ui/consts/try-operator.rs:10:13: 10:15
        _4 = ();                         // scope 0 at ui/consts/try-operator.rs:10:13: 10:15
        _3 = Result::<(), ()>::Err(move _4); // scope 0 at ui/consts/try-operator.rs:10:9: 10:16
        StorageDead(_4);                 // scope 0 at ui/consts/try-operator.rs:10:15: 10:16
        ConstEvalCounter;                // scope 0 at ui/consts/try-operator.rs:10:9: 10:17
        _2 = <Result<(), ()> as Try>::branch(move _3) -> bb1; // scope 0 at ui/consts/try-operator.rs:10:9: 10:17
                                         // mir::Constant
                                         // + span: ui/consts/try-operator.rs:10:9: 10:17
                                         // + literal: Const { ty: fn(Result<(), ()>) -> ControlFlow<<Result<(), ()> as Try>::Residual, <Result<(), ()> as Try>::Output> {<Result<(), ()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at ui/consts/try-operator.rs:10:16: 10:17
        _5 = discriminant(_2);           // scope 0 at ui/consts/try-operator.rs:10:9: 10:17
        switchInt(move _5) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at ui/consts/try-operator.rs:10:9: 10:17
    }

    bb2: {
        StorageLive(_9);                 // scope 0 at ui/consts/try-operator.rs:10:9: 10:17
        _9 = ((_2 as Continue).0: ());   // scope 0 at ui/consts/try-operator.rs:10:9: 10:17
        _1 = _9;                         // scope 4 at ui/consts/try-operator.rs:10:9: 10:17
        StorageDead(_9);                 // scope 0 at ui/consts/try-operator.rs:10:16: 10:17
        StorageDead(_2);                 // scope 0 at ui/consts/try-operator.rs:10:17: 10:18
        StorageDead(_1);                 // scope 0 at ui/consts/try-operator.rs:10:17: 10:18
        _0 = Result::<bool, ()>::Ok(const true); // scope 0 at ui/consts/try-operator.rs:11:9: 11:17
        goto -> bb6;                     // scope 0 at ui/consts/try-operator.rs:12:6: 12:6
    }

    bb3: {
        unreachable;                     // scope 0 at ui/consts/try-operator.rs:10:9: 10:17
    }

    bb4: {
        StorageLive(_6);                 // scope 0 at ui/consts/try-operator.rs:10:16: 10:17
        _6 = ((_2 as Break).0: std::result::Result<std::convert::Infallible, ()>); // scope 0 at ui/consts/try-operator.rs:10:16: 10:17
        StorageLive(_8);                 // scope 2 at ui/consts/try-operator.rs:10:16: 10:17
        _8 = _6;                         // scope 2 at ui/consts/try-operator.rs:10:16: 10:17
        ConstEvalCounter;                // scope 2 at ui/consts/try-operator.rs:10:9: 10:17
        _0 = <Result<bool, ()> as FromResidual<Result<Infallible, ()>>>::from_residual(move _8) -> bb5; // scope 2 at ui/consts/try-operator.rs:10:9: 10:17
                                         // mir::Constant
                                         // + span: ui/consts/try-operator.rs:10:16: 10:17
                                         // + literal: Const { ty: fn(Result<Infallible, ()>) -> Result<bool, ()> {<Result<bool, ()> as FromResidual<Result<Infallible, ()>>>::from_residual}, val: Value(<ZST>) }
    }

    bb5: {
        StorageDead(_8);                 // scope 2 at ui/consts/try-operator.rs:10:16: 10:17
        StorageDead(_6);                 // scope 0 at ui/consts/try-operator.rs:10:16: 10:17
        StorageDead(_2);                 // scope 0 at ui/consts/try-operator.rs:10:17: 10:18
        StorageDead(_1);                 // scope 0 at ui/consts/try-operator.rs:10:17: 10:18
        goto -> bb6;                     // scope 0 at ui/consts/try-operator.rs:12:6: 12:6
    }

    bb6: {
        return;                          // scope 0 at ui/consts/try-operator.rs:12:6: 12:6
    }
}

const FOO: Result<bool, ()> = {
    let mut _0: std::result::Result<bool, ()>; // return place in scope 0 at ui/consts/try-operator.rs:14:16: 14:32

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/try-operator.rs:14:35: 14:43
        _0 = result() -> bb1;            // scope 0 at ui/consts/try-operator.rs:14:35: 14:43
                                         // mir::Constant
                                         // + span: ui/consts/try-operator.rs:14:35: 14:41
                                         // + literal: Const { ty: fn() -> Result<bool, ()> {result}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/try-operator.rs:14:5: 14:44
    }
}

fn option() -> Option<()> {
    let mut _0: std::option::Option<()>; // return place in scope 0 at ui/consts/try-operator.rs:17:26: 17:36
    let mut _1: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>>; // in scope 0 at ui/consts/try-operator.rs:18:9: 18:14
    let mut _2: std::option::Option<()>; // in scope 0 at ui/consts/try-operator.rs:18:9: 18:13
    let mut _3: isize;                   // in scope 0 at ui/consts/try-operator.rs:18:13: 18:14
    let _4: std::option::Option<std::convert::Infallible>; // in scope 0 at ui/consts/try-operator.rs:18:13: 18:14
    let mut _5: std::option::Option<std::convert::Infallible>; // in scope 0 at ui/consts/try-operator.rs:18:13: 18:14
    let _6: ();                          // in scope 0 at ui/consts/try-operator.rs:18:9: 18:14
    scope 1 {
        debug residual => _4;            // in scope 1 at ui/consts/try-operator.rs:18:13: 18:14
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;                 // in scope 3 at ui/consts/try-operator.rs:18:9: 18:14
        scope 4 {
        }
    }

    bb0: {
        _2 = const Option::<()>::None;   // scope 0 at ui/consts/try-operator.rs:18:9: 18:13
                                         // mir::Constant
                                         // + span: ui/consts/try-operator.rs:18:9: 18:13
                                         // + literal: Const { ty: Option<()>, val: Value(Scalar(0x00)) }
        _1 = <Option<()> as Try>::branch(move _2) -> bb1; // scope 0 at ui/consts/try-operator.rs:18:9: 18:14
                                         // mir::Constant
                                         // + span: ui/consts/try-operator.rs:18:9: 18:14
                                         // + literal: Const { ty: fn(Option<()>) -> ControlFlow<<Option<()> as Try>::Residual, <Option<()> as Try>::Output> {<Option<()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = discriminant(_1);           // scope 0 at ui/consts/try-operator.rs:18:9: 18:14
        switchInt(move _3) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at ui/consts/try-operator.rs:18:9: 18:14
    }

    bb2: {
        _0 = const Option::<()>::Some(()); // scope 0 at ui/consts/try-operator.rs:19:9: 19:17
                                         // mir::Constant
                                         // + span: ui/consts/try-operator.rs:19:9: 19:17
                                         // + literal: Const { ty: Option<()>, val: Value(Scalar(0x01)) }
        goto -> bb5;                     // scope 0 at ui/consts/try-operator.rs:20:6: 20:6
    }

    bb3: {
        unreachable;                     // scope 0 at ui/consts/try-operator.rs:18:9: 18:14
    }

    bb4: {
        _0 = <Option<()> as FromResidual<Option<Infallible>>>::from_residual(move _5) -> bb5; // scope 2 at ui/consts/try-operator.rs:18:9: 18:14
                                         // mir::Constant
                                         // + span: ui/consts/try-operator.rs:18:13: 18:14
                                         // + literal: Const { ty: fn(Option<Infallible>) -> Option<()> {<Option<()> as FromResidual<Option<Infallible>>>::from_residual}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/consts/try-operator.rs:20:6: 20:6
    }
}

// MIR FOR CTFE
fn option() -> Option<()> {
    let mut _0: std::option::Option<()>; // return place in scope 0 at ui/consts/try-operator.rs:17:26: 17:36
    let _1: ();                          // in scope 0 at ui/consts/try-operator.rs:18:9: 18:14
    let mut _2: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>>; // in scope 0 at ui/consts/try-operator.rs:18:9: 18:14
    let mut _3: std::option::Option<()>; // in scope 0 at ui/consts/try-operator.rs:18:9: 18:13
    let mut _4: isize;                   // in scope 0 at ui/consts/try-operator.rs:18:13: 18:14
    let _5: std::option::Option<std::convert::Infallible>; // in scope 0 at ui/consts/try-operator.rs:18:13: 18:14
    let mut _6: !;                       // in scope 0 at ui/consts/try-operator.rs:18:13: 18:14
    let mut _7: std::option::Option<std::convert::Infallible>; // in scope 0 at ui/consts/try-operator.rs:18:13: 18:14
    let _8: ();                          // in scope 0 at ui/consts/try-operator.rs:18:9: 18:14
    let mut _9: ();                      // in scope 0 at ui/consts/try-operator.rs:19:14: 19:16
    scope 1 {
        debug residual => _5;            // in scope 1 at ui/consts/try-operator.rs:18:13: 18:14
        scope 2 {
        }
    }
    scope 3 {
        debug val => _8;                 // in scope 3 at ui/consts/try-operator.rs:18:9: 18:14
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/try-operator.rs:18:9: 18:14
        StorageLive(_2);                 // scope 0 at ui/consts/try-operator.rs:18:9: 18:14
        StorageLive(_3);                 // scope 0 at ui/consts/try-operator.rs:18:9: 18:13
        _3 = Option::<()>::None;         // scope 0 at ui/consts/try-operator.rs:18:9: 18:13
        ConstEvalCounter;                // scope 0 at ui/consts/try-operator.rs:18:9: 18:14
        _2 = <Option<()> as Try>::branch(move _3) -> bb1; // scope 0 at ui/consts/try-operator.rs:18:9: 18:14
                                         // mir::Constant
                                         // + span: ui/consts/try-operator.rs:18:9: 18:14
                                         // + literal: Const { ty: fn(Option<()>) -> ControlFlow<<Option<()> as Try>::Residual, <Option<()> as Try>::Output> {<Option<()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at ui/consts/try-operator.rs:18:13: 18:14
        _4 = discriminant(_2);           // scope 0 at ui/consts/try-operator.rs:18:9: 18:14
        switchInt(move _4) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at ui/consts/try-operator.rs:18:9: 18:14
    }

    bb2: {
        StorageLive(_8);                 // scope 0 at ui/consts/try-operator.rs:18:9: 18:14
        _8 = ((_2 as Continue).0: ());   // scope 0 at ui/consts/try-operator.rs:18:9: 18:14
        _1 = _8;                         // scope 4 at ui/consts/try-operator.rs:18:9: 18:14
        StorageDead(_8);                 // scope 0 at ui/consts/try-operator.rs:18:13: 18:14
        StorageDead(_2);                 // scope 0 at ui/consts/try-operator.rs:18:14: 18:15
        StorageDead(_1);                 // scope 0 at ui/consts/try-operator.rs:18:14: 18:15
        StorageLive(_9);                 // scope 0 at ui/consts/try-operator.rs:19:14: 19:16
        _9 = ();                         // scope 0 at ui/consts/try-operator.rs:19:14: 19:16
        _0 = Option::<()>::Some(move _9); // scope 0 at ui/consts/try-operator.rs:19:9: 19:17
        StorageDead(_9);                 // scope 0 at ui/consts/try-operator.rs:19:16: 19:17
        goto -> bb6;                     // scope 0 at ui/consts/try-operator.rs:20:6: 20:6
    }

    bb3: {
        unreachable;                     // scope 0 at ui/consts/try-operator.rs:18:9: 18:14
    }

    bb4: {
        StorageLive(_5);                 // scope 0 at ui/consts/try-operator.rs:18:13: 18:14
        _5 = ((_2 as Break).0: std::option::Option<std::convert::Infallible>); // scope 0 at ui/consts/try-operator.rs:18:13: 18:14
        StorageLive(_7);                 // scope 2 at ui/consts/try-operator.rs:18:13: 18:14
        _7 = _5;                         // scope 2 at ui/consts/try-operator.rs:18:13: 18:14
        ConstEvalCounter;                // scope 2 at ui/consts/try-operator.rs:18:9: 18:14
        _0 = <Option<()> as FromResidual<Option<Infallible>>>::from_residual(move _7) -> bb5; // scope 2 at ui/consts/try-operator.rs:18:9: 18:14
                                         // mir::Constant
                                         // + span: ui/consts/try-operator.rs:18:13: 18:14
                                         // + literal: Const { ty: fn(Option<Infallible>) -> Option<()> {<Option<()> as FromResidual<Option<Infallible>>>::from_residual}, val: Value(<ZST>) }
    }

    bb5: {
        StorageDead(_7);                 // scope 2 at ui/consts/try-operator.rs:18:13: 18:14
        StorageDead(_5);                 // scope 0 at ui/consts/try-operator.rs:18:13: 18:14
        StorageDead(_2);                 // scope 0 at ui/consts/try-operator.rs:18:14: 18:15
        StorageDead(_1);                 // scope 0 at ui/consts/try-operator.rs:18:14: 18:15
        goto -> bb6;                     // scope 0 at ui/consts/try-operator.rs:20:6: 20:6
    }

    bb6: {
        return;                          // scope 0 at ui/consts/try-operator.rs:20:6: 20:6
    }
}

const BAR: Option<()> = {
    let mut _0: std::option::Option<()>; // return place in scope 0 at ui/consts/try-operator.rs:21:16: 21:26

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/try-operator.rs:21:29: 21:37
        _0 = option() -> bb1;            // scope 0 at ui/consts/try-operator.rs:21:29: 21:37
                                         // mir::Constant
                                         // + span: ui/consts/try-operator.rs:21:29: 21:35
                                         // + literal: Const { ty: fn() -> Option<()> {option}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/try-operator.rs:21:5: 21:38
    }
}
