// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static C: &E = {
    let mut _0: &E;                      // return place in scope 0 at ui/consts/const-enum-ptr.rs:5:11: 5:21
    let _1: &E;                          // in scope 0 at ui/consts/const-enum-ptr.rs:5:24: 5:30
    let _2: E;                           // in scope 0 at ui/consts/const-enum-ptr.rs:5:25: 5:30
    let mut _3: &E;                      // in scope 0 at ui/consts/const-enum-ptr.rs:5:24: 5:30

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-enum-ptr.rs:5:24: 5:30
        _3 = const _;                    // scope 0 at ui/consts/const-enum-ptr.rs:5:24: 5:30
                                         // mir::Constant
                                         // + span: ui/consts/const-enum-ptr.rs:5:24: 5:30
                                         // + literal: Const { ty: &E, val: Unevaluated(C, [], Some(promoted[0])) }
        _1 = &(*_3);                     // scope 0 at ui/consts/const-enum-ptr.rs:5:24: 5:30
        _0 = &(*_1);                     // scope 0 at ui/consts/const-enum-ptr.rs:5:24: 5:30
        StorageDead(_1);                 // scope 0 at ui/consts/const-enum-ptr.rs:5:29: 5:30
        return;                          // scope 0 at ui/consts/const-enum-ptr.rs:5:1: 5:31
    }
}

promoted[0] in C: &E = {
    let mut _0: &E;                      // return place in scope 0 at ui/consts/const-enum-ptr.rs:5:24: 5:30
    let mut _1: E;                       // in scope 0 at ui/consts/const-enum-ptr.rs:5:25: 5:30

    bb0: {
        _1 = E::V0;                      // scope 0 at ui/consts/const-enum-ptr.rs:5:25: 5:30
        _0 = &_1;                        // scope 0 at ui/consts/const-enum-ptr.rs:5:24: 5:30
        return;                          // scope 0 at ui/consts/const-enum-ptr.rs:5:24: 5:30
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-enum-ptr.rs:7:15: 7:15

    bb0: {
        return;                          // scope 0 at ui/consts/const-enum-ptr.rs:12:2: 12:2
    }
}

fn E::V1(_1: isize) -> E {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const-enum-ptr.rs:4:14: 4:16

    bb0: {
        _0 = E::V1(move _1);             // scope 0 at ui/consts/const-enum-ptr.rs:4:14: 4:16
        return;                          // scope 0 at ui/consts/const-enum-ptr.rs:4:14: 4:16
    }
}

// MIR FOR CTFE
fn E::V1(_1: isize) -> E {
    let mut _0: E;                       // return place in scope 0 at ui/consts/const-enum-ptr.rs:4:14: 4:16

    bb0: {
        _0 = E::V1(move _1);             // scope 0 at ui/consts/const-enum-ptr.rs:4:14: 4:16
        return;                          // scope 0 at ui/consts/const-enum-ptr.rs:4:14: 4:16
    }
}
