// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const HASH_LEN: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 20_usize;
        return;
    }
}

Hash::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn init_hash(_1: &mut [u8; 20]) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

init_hash::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn foo() -> &() {
    let mut _0: &();
    let _1: ();
    let mut _2: &mut [u8; 20];
    let mut _3: [u8; 20];
    let _4: [i32; 20];
    let mut _5: ([i32; 20],);
    let mut _6: [i32; 20];
    scope 1 {
        debug _array => _4;
    }

    bb0: {
        _3 = [const 0_u8; 20];
        _2 = &mut _3;
        _1 = init_hash(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = [const 0_i32; 20];
        _5 = (move _6,);
        _4 = (_5.0: [i32; 20]);
        _0 = const _;
        return;
    }
}

promoted[0] in foo: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

foo::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

foo::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: &();

    bb0: {
        _1 = foo::<'_>() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn Hash(_1: [u8; 20]) -> Hash {
    let mut _0: Hash;

    bb0: {
        _0 = Hash(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Hash(_1: [u8; 20]) -> Hash {
    let mut _0: Hash;

    bb0: {
        _0 = Hash(move _1);
        return;
    }
}
