// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const RHS: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:2:12: 2:14

    bb0: {
        _0 = const 8_u8;                 // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:2:17: 2:18
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:2:1: 2:19
    }
}

const IRHS: i8 = {
    let mut _0: i8;                      // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:3:13: 3:15

    bb0: {
        _0 = const 8_i8;                 // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:3:18: 3:19
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:3:1: 3:20
    }
}

const RHS16: u16 = {
    let mut _0: u16;                     // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:4:14: 4:17

    bb0: {
        _0 = const 8_u16;                // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:4:20: 4:21
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:4:1: 4:22
    }
}

const IRHS16: i16 = {
    let mut _0: i16;                     // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:5:15: 5:18

    bb0: {
        _0 = const 8_i16;                // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:5:21: 5:22
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:5:1: 5:23
    }
}

const RHS32: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:6:14: 6:17

    bb0: {
        _0 = const 8_u32;                // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:6:20: 6:21
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:6:1: 6:22
    }
}

const IRHS32: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:7:15: 7:18

    bb0: {
        _0 = const 8_i32;                // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:7:21: 7:22
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:7:1: 7:23
    }
}

const RHS64: u64 = {
    let mut _0: u64;                     // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:8:14: 8:17

    bb0: {
        _0 = const 8_u64;                // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:8:20: 8:21
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:8:1: 8:22
    }
}

const IRHS64: i64 = {
    let mut _0: i64;                     // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:9:15: 9:18

    bb0: {
        _0 = const 8_i64;                // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:9:21: 9:22
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:9:1: 9:23
    }
}

const RHSUS: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:10:14: 10:19

    bb0: {
        _0 = const 8_usize;              // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:10:22: 10:23
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:10:1: 10:24
    }
}

const IRHSIS: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:11:15: 11:20

    bb0: {
        _0 = const 8_isize;              // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:11:23: 11:24
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:11:1: 11:25
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:13:11: 13:11
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                    scope 5 {
                        scope 6 {
                            scope 7 {
                                scope 8 {
                                    scope 9 {
                                        scope 10 {
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:24:2: 24:2
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:14:44: 14:47

    bb0: {
        _0 = const 256_usize;            // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:14:44: 14:47
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:14:44: 14:47
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:14:27: 14:35
    let mut _1: (usize, bool);           // in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:14:27: 14:35

    bb0: {
        _1 = CheckedShl(const 1_usize, const _); // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:14:27: 14:35
        assert(!move (_1.1: bool), "attempt to shift left by `{}`, which would overflow", const _) -> bb1; // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:14:27: 14:35
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:14:27: 14:35
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:14:27: 14:35
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:15:45: 15:48

    bb0: {
        _0 = const 256_usize;            // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:15:45: 15:48
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:15:45: 15:48
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:15:27: 15:36
    let mut _1: (usize, bool);           // in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:15:27: 15:36

    bb0: {
        _1 = CheckedShl(const 1_usize, const _); // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:15:27: 15:36
        assert(!move (_1.1: bool), "attempt to shift left by `{}`, which would overflow", const _) -> bb1; // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:15:27: 15:36
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:15:27: 15:36
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:15:27: 15:36
    }
}

main::{constant#5}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:16:46: 16:49

    bb0: {
        _0 = const 256_usize;            // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:16:46: 16:49
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:16:46: 16:49
    }
}

main::{constant#4}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:16:27: 16:37
    let mut _1: (usize, bool);           // in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:16:27: 16:37

    bb0: {
        _1 = CheckedShl(const 1_usize, const _); // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:16:27: 16:37
        assert(!move (_1.1: bool), "attempt to shift left by `{}`, which would overflow", const _) -> bb1; // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:16:27: 16:37
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:16:27: 16:37
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:16:27: 16:37
    }
}

main::{constant#7}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:17:47: 17:50

    bb0: {
        _0 = const 256_usize;            // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:17:47: 17:50
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:17:47: 17:50
    }
}

main::{constant#6}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:17:27: 17:38
    let mut _1: (usize, bool);           // in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:17:27: 17:38

    bb0: {
        _1 = CheckedShl(const 1_usize, const _); // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:17:27: 17:38
        assert(!move (_1.1: bool), "attempt to shift left by `{}`, which would overflow", const _) -> bb1; // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:17:27: 17:38
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:17:27: 17:38
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:17:27: 17:38
    }
}

main::{constant#9}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:18:46: 18:49

    bb0: {
        _0 = const 256_usize;            // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:18:46: 18:49
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:18:46: 18:49
    }
}

main::{constant#8}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:18:27: 18:37
    let mut _1: (usize, bool);           // in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:18:27: 18:37

    bb0: {
        _1 = CheckedShl(const 1_usize, const _); // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:18:27: 18:37
        assert(!move (_1.1: bool), "attempt to shift left by `{}`, which would overflow", const _) -> bb1; // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:18:27: 18:37
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:18:27: 18:37
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:18:27: 18:37
    }
}

main::{constant#11}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:19:47: 19:50

    bb0: {
        _0 = const 256_usize;            // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:19:47: 19:50
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:19:47: 19:50
    }
}

main::{constant#10}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:19:27: 19:38
    let mut _1: (usize, bool);           // in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:19:27: 19:38

    bb0: {
        _1 = CheckedShl(const 1_usize, const _); // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:19:27: 19:38
        assert(!move (_1.1: bool), "attempt to shift left by `{}`, which would overflow", const _) -> bb1; // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:19:27: 19:38
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:19:27: 19:38
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:19:27: 19:38
    }
}

main::{constant#13}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:20:46: 20:49

    bb0: {
        _0 = const 256_usize;            // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:20:46: 20:49
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:20:46: 20:49
    }
}

main::{constant#12}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:20:27: 20:37
    let mut _1: (usize, bool);           // in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:20:27: 20:37

    bb0: {
        _1 = CheckedShl(const 1_usize, const _); // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:20:27: 20:37
        assert(!move (_1.1: bool), "attempt to shift left by `{}`, which would overflow", const _) -> bb1; // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:20:27: 20:37
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:20:27: 20:37
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:20:27: 20:37
    }
}

main::{constant#15}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:21:47: 21:50

    bb0: {
        _0 = const 256_usize;            // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:21:47: 21:50
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:21:47: 21:50
    }
}

main::{constant#14}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:21:27: 21:38
    let mut _1: (usize, bool);           // in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:21:27: 21:38

    bb0: {
        _1 = CheckedShl(const 1_usize, const _); // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:21:27: 21:38
        assert(!move (_1.1: bool), "attempt to shift left by `{}`, which would overflow", const _) -> bb1; // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:21:27: 21:38
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:21:27: 21:38
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:21:27: 21:38
    }
}

main::{constant#17}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:22:46: 22:49

    bb0: {
        _0 = const 256_usize;            // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:22:46: 22:49
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:22:46: 22:49
    }
}

main::{constant#16}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:22:27: 22:37
    let mut _1: (usize, bool);           // in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:22:27: 22:37

    bb0: {
        _1 = CheckedShl(const 1_usize, const _); // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:22:27: 22:37
        assert(!move (_1.1: bool), "attempt to shift left by `{}`, which would overflow", const _) -> bb1; // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:22:27: 22:37
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:22:27: 22:37
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:22:27: 22:37
    }
}

main::{constant#19}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:23:47: 23:50

    bb0: {
        _0 = const 256_usize;            // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:23:47: 23:50
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:23:47: 23:50
    }
}

main::{constant#18}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:23:27: 23:38
    let mut _1: (usize, bool);           // in scope 0 at ui/consts/const-bitshift-rhs-inference.rs:23:27: 23:38

    bb0: {
        _1 = CheckedShl(const 1_usize, const _); // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:23:27: 23:38
        assert(!move (_1.1: bool), "attempt to shift left by `{}`, which would overflow", const _) -> bb1; // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:23:27: 23:38
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:23:27: 23:38
        return;                          // scope 0 at ui/consts/const-bitshift-rhs-inference.rs:23:27: 23:38
    }
}
