// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static S: Struct = {
    let mut _0: Struct;                  // return place in scope 0 at ui/consts/offset.rs:10:11: 10:17

    bb0: {
        _0 = Struct { a: const 0_u32, b: const 0_u32, c: const 0_u32 }; // scope 0 at ui/consts/offset.rs:10:20: 10:47
        return;                          // scope 0 at ui/consts/offset.rs:10:1: 10:48
    }
}

static OFFSET_NO_CHANGE: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/offset.rs:15:26: 15:30
    let _2: &u32;                        // in scope 0 at ui/consts/offset.rs:16:14: 16:18
    let _3: &Struct;                     // in scope 0 at ui/consts/offset.rs:16:15: 16:16
    let mut _5: *const u32;              // in scope 0 at ui/consts/offset.rs:17:14: 17:26
    let mut _6: *const u32;              // in scope 0 at ui/consts/offset.rs:17:14: 17:16
    let mut _7: isize;                   // in scope 0 at ui/consts/offset.rs:18:5: 18:23
    let mut _8: *const u32;              // in scope 0 at ui/consts/offset.rs:18:5: 18:7
    let mut _9: *const u32;              // in scope 0 at ui/consts/offset.rs:18:20: 18:22
    scope 1 {
        let _1: *const u32;              // in scope 1 at ui/consts/offset.rs:16:9: 16:11
        scope 2 {
            debug p1 => _1;              // in scope 2 at ui/consts/offset.rs:16:9: 16:11
            let _4: *const u32;          // in scope 2 at ui/consts/offset.rs:17:9: 17:11
            scope 3 {
                debug p2 => _4;          // in scope 3 at ui/consts/offset.rs:17:9: 17:11
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/offset.rs:16:9: 16:11
        StorageLive(_2);                 // scope 1 at ui/consts/offset.rs:16:14: 16:18
        StorageLive(_3);                 // scope 1 at ui/consts/offset.rs:16:15: 16:16
        _3 = const {alloc1: &Struct};    // scope 1 at ui/consts/offset.rs:16:15: 16:16
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:16:15: 16:16
                                         // + literal: Const { ty: &Struct, val: Value(Scalar(alloc1)) }
        _2 = &((*_3).1: u32);            // scope 1 at ui/consts/offset.rs:16:14: 16:18
        _1 = &raw const (*_2);           // scope 1 at ui/consts/offset.rs:16:14: 16:18
        StorageDead(_2);                 // scope 1 at ui/consts/offset.rs:16:32: 16:33
        StorageLive(_4);                 // scope 2 at ui/consts/offset.rs:17:9: 17:11
        StorageLive(_5);                 // scope 2 at ui/consts/offset.rs:17:14: 17:26
        StorageLive(_6);                 // scope 2 at ui/consts/offset.rs:17:14: 17:16
        _6 = _1;                         // scope 2 at ui/consts/offset.rs:17:14: 17:16
        ConstEvalCounter;                // scope 2 at ui/consts/offset.rs:17:14: 17:26
        _5 = ptr::const_ptr::<impl *const u32>::offset(move _6, const 2_isize) -> bb1; // scope 2 at ui/consts/offset.rs:17:14: 17:26
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:17:17: 17:23
                                         // + literal: Const { ty: unsafe fn(*const u32, isize) -> *const u32 {ptr::const_ptr::<impl *const u32>::offset}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_6);                 // scope 2 at ui/consts/offset.rs:17:25: 17:26
        ConstEvalCounter;                // scope 2 at ui/consts/offset.rs:17:14: 17:37
        _4 = ptr::const_ptr::<impl *const u32>::offset(move _5, const -2_isize) -> bb2; // scope 2 at ui/consts/offset.rs:17:14: 17:37
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:17:27: 17:33
                                         // + literal: Const { ty: unsafe fn(*const u32, isize) -> *const u32 {ptr::const_ptr::<impl *const u32>::offset}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_5);                 // scope 2 at ui/consts/offset.rs:17:36: 17:37
        StorageLive(_7);                 // scope 3 at ui/consts/offset.rs:18:5: 18:23
        StorageLive(_8);                 // scope 3 at ui/consts/offset.rs:18:5: 18:7
        _8 = _1;                         // scope 3 at ui/consts/offset.rs:18:5: 18:7
        StorageLive(_9);                 // scope 3 at ui/consts/offset.rs:18:20: 18:22
        _9 = _4;                         // scope 3 at ui/consts/offset.rs:18:20: 18:22
        ConstEvalCounter;                // scope 3 at ui/consts/offset.rs:18:5: 18:23
        _7 = ptr::const_ptr::<impl *const u32>::offset_from(move _8, move _9) -> bb3; // scope 3 at ui/consts/offset.rs:18:5: 18:23
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:18:8: 18:19
                                         // + literal: Const { ty: unsafe fn(*const u32, *const u32) -> isize {ptr::const_ptr::<impl *const u32>::offset_from}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_9);                 // scope 3 at ui/consts/offset.rs:18:22: 18:23
        StorageDead(_8);                 // scope 3 at ui/consts/offset.rs:18:22: 18:23
        _0 = Eq(move _7, const 0_isize); // scope 3 at ui/consts/offset.rs:18:5: 18:28
        StorageDead(_7);                 // scope 3 at ui/consts/offset.rs:18:27: 18:28
        StorageDead(_4);                 // scope 2 at ui/consts/offset.rs:19:1: 19:2
        StorageDead(_3);                 // scope 1 at ui/consts/offset.rs:19:1: 19:2
        StorageDead(_1);                 // scope 1 at ui/consts/offset.rs:19:1: 19:2
        return;                          // scope 0 at ui/consts/offset.rs:15:1: 19:3
    }
}

alloc1 (static: S, size: 12, align: 4) {
    00 00 00 00 00 00 00 00 00 00 00 00             â”‚ ............
}

static OFFSET_MIDDLE: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/offset.rs:20:23: 20:27
    let mut _2: *const u32;              // in scope 0 at ui/consts/offset.rs:21:14: 21:34
    let _3: &u32;                        // in scope 0 at ui/consts/offset.rs:21:15: 21:19
    let _4: &Struct;                     // in scope 0 at ui/consts/offset.rs:21:16: 21:17
    let mut _6: *const u32;              // in scope 0 at ui/consts/offset.rs:22:14: 22:34
    let _7: &u32;                        // in scope 0 at ui/consts/offset.rs:22:15: 22:19
    let _8: &Struct;                     // in scope 0 at ui/consts/offset.rs:22:16: 22:17
    let mut _9: isize;                   // in scope 0 at ui/consts/offset.rs:23:5: 23:23
    let mut _10: *const u32;             // in scope 0 at ui/consts/offset.rs:23:5: 23:7
    let mut _11: *const u32;             // in scope 0 at ui/consts/offset.rs:23:20: 23:22
    scope 1 {
        let _1: *const u32;              // in scope 1 at ui/consts/offset.rs:21:9: 21:11
        scope 2 {
            debug p1 => _1;              // in scope 2 at ui/consts/offset.rs:21:9: 21:11
            let _5: *const u32;          // in scope 2 at ui/consts/offset.rs:22:9: 22:11
            scope 3 {
                debug p2 => _5;          // in scope 3 at ui/consts/offset.rs:22:9: 22:11
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/offset.rs:21:9: 21:11
        StorageLive(_2);                 // scope 1 at ui/consts/offset.rs:21:14: 21:34
        StorageLive(_3);                 // scope 1 at ui/consts/offset.rs:21:15: 21:19
        StorageLive(_4);                 // scope 1 at ui/consts/offset.rs:21:16: 21:17
        _4 = const {alloc1: &Struct};    // scope 1 at ui/consts/offset.rs:21:16: 21:17
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:21:16: 21:17
                                         // + literal: Const { ty: &Struct, val: Value(Scalar(alloc1)) }
        _3 = &((*_4).0: u32);            // scope 1 at ui/consts/offset.rs:21:15: 21:19
        _2 = &raw const (*_3);           // scope 1 at ui/consts/offset.rs:21:15: 21:19
        ConstEvalCounter;                // scope 1 at ui/consts/offset.rs:21:14: 21:44
        _1 = ptr::const_ptr::<impl *const u32>::offset(move _2, const 1_isize) -> bb1; // scope 1 at ui/consts/offset.rs:21:14: 21:44
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:21:35: 21:41
                                         // + literal: Const { ty: unsafe fn(*const u32, isize) -> *const u32 {ptr::const_ptr::<impl *const u32>::offset}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 1 at ui/consts/offset.rs:21:43: 21:44
        StorageDead(_4);                 // scope 1 at ui/consts/offset.rs:21:44: 21:45
        StorageDead(_3);                 // scope 1 at ui/consts/offset.rs:21:44: 21:45
        StorageLive(_5);                 // scope 2 at ui/consts/offset.rs:22:9: 22:11
        StorageLive(_6);                 // scope 2 at ui/consts/offset.rs:22:14: 22:34
        StorageLive(_7);                 // scope 2 at ui/consts/offset.rs:22:15: 22:19
        StorageLive(_8);                 // scope 2 at ui/consts/offset.rs:22:16: 22:17
        _8 = const {alloc1: &Struct};    // scope 2 at ui/consts/offset.rs:22:16: 22:17
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:22:16: 22:17
                                         // + literal: Const { ty: &Struct, val: Value(Scalar(alloc1)) }
        _7 = &((*_8).2: u32);            // scope 2 at ui/consts/offset.rs:22:15: 22:19
        _6 = &raw const (*_7);           // scope 2 at ui/consts/offset.rs:22:15: 22:19
        ConstEvalCounter;                // scope 2 at ui/consts/offset.rs:22:14: 22:45
        _5 = ptr::const_ptr::<impl *const u32>::offset(move _6, const -1_isize) -> bb2; // scope 2 at ui/consts/offset.rs:22:14: 22:45
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:22:35: 22:41
                                         // + literal: Const { ty: unsafe fn(*const u32, isize) -> *const u32 {ptr::const_ptr::<impl *const u32>::offset}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_6);                 // scope 2 at ui/consts/offset.rs:22:44: 22:45
        StorageDead(_8);                 // scope 2 at ui/consts/offset.rs:22:45: 22:46
        StorageDead(_7);                 // scope 2 at ui/consts/offset.rs:22:45: 22:46
        StorageLive(_9);                 // scope 3 at ui/consts/offset.rs:23:5: 23:23
        StorageLive(_10);                // scope 3 at ui/consts/offset.rs:23:5: 23:7
        _10 = _1;                        // scope 3 at ui/consts/offset.rs:23:5: 23:7
        StorageLive(_11);                // scope 3 at ui/consts/offset.rs:23:20: 23:22
        _11 = _5;                        // scope 3 at ui/consts/offset.rs:23:20: 23:22
        ConstEvalCounter;                // scope 3 at ui/consts/offset.rs:23:5: 23:23
        _9 = ptr::const_ptr::<impl *const u32>::offset_from(move _10, move _11) -> bb3; // scope 3 at ui/consts/offset.rs:23:5: 23:23
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:23:8: 23:19
                                         // + literal: Const { ty: unsafe fn(*const u32, *const u32) -> isize {ptr::const_ptr::<impl *const u32>::offset_from}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_11);                // scope 3 at ui/consts/offset.rs:23:22: 23:23
        StorageDead(_10);                // scope 3 at ui/consts/offset.rs:23:22: 23:23
        _0 = Eq(move _9, const 0_isize); // scope 3 at ui/consts/offset.rs:23:5: 23:28
        StorageDead(_9);                 // scope 3 at ui/consts/offset.rs:23:27: 23:28
        StorageDead(_5);                 // scope 2 at ui/consts/offset.rs:24:1: 24:2
        StorageDead(_1);                 // scope 1 at ui/consts/offset.rs:24:1: 24:2
        return;                          // scope 0 at ui/consts/offset.rs:20:1: 24:3
    }
}

alloc1 (static: S, size: 12, align: 4) {
    00 00 00 00 00 00 00 00 00 00 00 00             â”‚ ............
}

static OFFSET_END: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/offset.rs:26:20: 26:24
    let mut _2: *const u32;              // in scope 0 at ui/consts/offset.rs:27:14: 27:34
    let _3: &u32;                        // in scope 0 at ui/consts/offset.rs:27:15: 27:19
    let _4: &Struct;                     // in scope 0 at ui/consts/offset.rs:27:16: 27:17
    let mut _6: *const u32;              // in scope 0 at ui/consts/offset.rs:28:14: 28:34
    let _7: &u32;                        // in scope 0 at ui/consts/offset.rs:28:15: 28:19
    let _8: &Struct;                     // in scope 0 at ui/consts/offset.rs:28:16: 28:17
    let mut _9: isize;                   // in scope 0 at ui/consts/offset.rs:29:5: 29:23
    let mut _10: *const u32;             // in scope 0 at ui/consts/offset.rs:29:5: 29:7
    let mut _11: *const u32;             // in scope 0 at ui/consts/offset.rs:29:20: 29:22
    scope 1 {
        let _1: *const u32;              // in scope 1 at ui/consts/offset.rs:27:9: 27:11
        scope 2 {
            debug p1 => _1;              // in scope 2 at ui/consts/offset.rs:27:9: 27:11
            let _5: *const u32;          // in scope 2 at ui/consts/offset.rs:28:9: 28:11
            scope 3 {
                debug p2 => _5;          // in scope 3 at ui/consts/offset.rs:28:9: 28:11
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/offset.rs:27:9: 27:11
        StorageLive(_2);                 // scope 1 at ui/consts/offset.rs:27:14: 27:34
        StorageLive(_3);                 // scope 1 at ui/consts/offset.rs:27:15: 27:19
        StorageLive(_4);                 // scope 1 at ui/consts/offset.rs:27:16: 27:17
        _4 = const {alloc1: &Struct};    // scope 1 at ui/consts/offset.rs:27:16: 27:17
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:27:16: 27:17
                                         // + literal: Const { ty: &Struct, val: Value(Scalar(alloc1)) }
        _3 = &((*_4).0: u32);            // scope 1 at ui/consts/offset.rs:27:15: 27:19
        _2 = &raw const (*_3);           // scope 1 at ui/consts/offset.rs:27:15: 27:19
        ConstEvalCounter;                // scope 1 at ui/consts/offset.rs:27:14: 27:44
        _1 = ptr::const_ptr::<impl *const u32>::offset(move _2, const 3_isize) -> bb1; // scope 1 at ui/consts/offset.rs:27:14: 27:44
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:27:35: 27:41
                                         // + literal: Const { ty: unsafe fn(*const u32, isize) -> *const u32 {ptr::const_ptr::<impl *const u32>::offset}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 1 at ui/consts/offset.rs:27:43: 27:44
        StorageDead(_4);                 // scope 1 at ui/consts/offset.rs:27:44: 27:45
        StorageDead(_3);                 // scope 1 at ui/consts/offset.rs:27:44: 27:45
        StorageLive(_5);                 // scope 2 at ui/consts/offset.rs:28:9: 28:11
        StorageLive(_6);                 // scope 2 at ui/consts/offset.rs:28:14: 28:34
        StorageLive(_7);                 // scope 2 at ui/consts/offset.rs:28:15: 28:19
        StorageLive(_8);                 // scope 2 at ui/consts/offset.rs:28:16: 28:17
        _8 = const {alloc1: &Struct};    // scope 2 at ui/consts/offset.rs:28:16: 28:17
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:28:16: 28:17
                                         // + literal: Const { ty: &Struct, val: Value(Scalar(alloc1)) }
        _7 = &((*_8).2: u32);            // scope 2 at ui/consts/offset.rs:28:15: 28:19
        _6 = &raw const (*_7);           // scope 2 at ui/consts/offset.rs:28:15: 28:19
        ConstEvalCounter;                // scope 2 at ui/consts/offset.rs:28:14: 28:44
        _5 = ptr::const_ptr::<impl *const u32>::offset(move _6, const 1_isize) -> bb2; // scope 2 at ui/consts/offset.rs:28:14: 28:44
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:28:35: 28:41
                                         // + literal: Const { ty: unsafe fn(*const u32, isize) -> *const u32 {ptr::const_ptr::<impl *const u32>::offset}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_6);                 // scope 2 at ui/consts/offset.rs:28:43: 28:44
        StorageDead(_8);                 // scope 2 at ui/consts/offset.rs:28:44: 28:45
        StorageDead(_7);                 // scope 2 at ui/consts/offset.rs:28:44: 28:45
        StorageLive(_9);                 // scope 3 at ui/consts/offset.rs:29:5: 29:23
        StorageLive(_10);                // scope 3 at ui/consts/offset.rs:29:5: 29:7
        _10 = _1;                        // scope 3 at ui/consts/offset.rs:29:5: 29:7
        StorageLive(_11);                // scope 3 at ui/consts/offset.rs:29:20: 29:22
        _11 = _5;                        // scope 3 at ui/consts/offset.rs:29:20: 29:22
        ConstEvalCounter;                // scope 3 at ui/consts/offset.rs:29:5: 29:23
        _9 = ptr::const_ptr::<impl *const u32>::offset_from(move _10, move _11) -> bb3; // scope 3 at ui/consts/offset.rs:29:5: 29:23
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:29:8: 29:19
                                         // + literal: Const { ty: unsafe fn(*const u32, *const u32) -> isize {ptr::const_ptr::<impl *const u32>::offset_from}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_11);                // scope 3 at ui/consts/offset.rs:29:22: 29:23
        StorageDead(_10);                // scope 3 at ui/consts/offset.rs:29:22: 29:23
        _0 = Eq(move _9, const 0_isize); // scope 3 at ui/consts/offset.rs:29:5: 29:28
        StorageDead(_9);                 // scope 3 at ui/consts/offset.rs:29:27: 29:28
        StorageDead(_5);                 // scope 2 at ui/consts/offset.rs:30:1: 30:2
        StorageDead(_1);                 // scope 1 at ui/consts/offset.rs:30:1: 30:2
        return;                          // scope 0 at ui/consts/offset.rs:26:1: 30:3
    }
}

alloc1 (static: S, size: 12, align: 4) {
    00 00 00 00 00 00 00 00 00 00 00 00             â”‚ ............
}

static OFFSET_U8_PTR: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/offset.rs:32:23: 32:27
    let mut _2: *const u8;               // in scope 0 at ui/consts/offset.rs:33:14: 33:47
    let mut _3: *const u32;              // in scope 0 at ui/consts/offset.rs:33:15: 33:33
    let _4: &u32;                        // in scope 0 at ui/consts/offset.rs:33:15: 33:19
    let _5: &Struct;                     // in scope 0 at ui/consts/offset.rs:33:16: 33:17
    let mut _7: *const u8;               // in scope 0 at ui/consts/offset.rs:34:14: 34:47
    let mut _8: *const u32;              // in scope 0 at ui/consts/offset.rs:34:15: 34:33
    let _9: &u32;                        // in scope 0 at ui/consts/offset.rs:34:15: 34:19
    let _10: &Struct;                    // in scope 0 at ui/consts/offset.rs:34:16: 34:17
    let mut _11: isize;                  // in scope 0 at ui/consts/offset.rs:35:5: 35:23
    let mut _12: *const u8;              // in scope 0 at ui/consts/offset.rs:35:5: 35:7
    let mut _13: *const u8;              // in scope 0 at ui/consts/offset.rs:35:20: 35:22
    scope 1 {
        let _1: *const u8;               // in scope 1 at ui/consts/offset.rs:33:9: 33:11
        scope 2 {
            debug p1 => _1;              // in scope 2 at ui/consts/offset.rs:33:9: 33:11
            let _6: *const u8;           // in scope 2 at ui/consts/offset.rs:34:9: 34:11
            scope 3 {
                debug p2 => _6;          // in scope 3 at ui/consts/offset.rs:34:9: 34:11
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/offset.rs:33:9: 33:11
        StorageLive(_2);                 // scope 1 at ui/consts/offset.rs:33:14: 33:47
        StorageLive(_3);                 // scope 1 at ui/consts/offset.rs:33:15: 33:33
        StorageLive(_4);                 // scope 1 at ui/consts/offset.rs:33:15: 33:19
        StorageLive(_5);                 // scope 1 at ui/consts/offset.rs:33:16: 33:17
        _5 = const {alloc1: &Struct};    // scope 1 at ui/consts/offset.rs:33:16: 33:17
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:33:16: 33:17
                                         // + literal: Const { ty: &Struct, val: Value(Scalar(alloc1)) }
        _4 = &((*_5).0: u32);            // scope 1 at ui/consts/offset.rs:33:15: 33:19
        _3 = &raw const (*_4);           // scope 1 at ui/consts/offset.rs:33:15: 33:19
        _2 = move _3 as *const u8 (PtrToPtr); // scope 1 at ui/consts/offset.rs:33:14: 33:47
        StorageDead(_3);                 // scope 1 at ui/consts/offset.rs:33:46: 33:47
        ConstEvalCounter;                // scope 1 at ui/consts/offset.rs:33:14: 33:57
        _1 = ptr::const_ptr::<impl *const u8>::offset(move _2, const 5_isize) -> bb1; // scope 1 at ui/consts/offset.rs:33:14: 33:57
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:33:48: 33:54
                                         // + literal: Const { ty: unsafe fn(*const u8, isize) -> *const u8 {ptr::const_ptr::<impl *const u8>::offset}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 1 at ui/consts/offset.rs:33:56: 33:57
        StorageDead(_5);                 // scope 1 at ui/consts/offset.rs:33:57: 33:58
        StorageDead(_4);                 // scope 1 at ui/consts/offset.rs:33:57: 33:58
        StorageLive(_6);                 // scope 2 at ui/consts/offset.rs:34:9: 34:11
        StorageLive(_7);                 // scope 2 at ui/consts/offset.rs:34:14: 34:47
        StorageLive(_8);                 // scope 2 at ui/consts/offset.rs:34:15: 34:33
        StorageLive(_9);                 // scope 2 at ui/consts/offset.rs:34:15: 34:19
        StorageLive(_10);                // scope 2 at ui/consts/offset.rs:34:16: 34:17
        _10 = const {alloc1: &Struct};   // scope 2 at ui/consts/offset.rs:34:16: 34:17
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:34:16: 34:17
                                         // + literal: Const { ty: &Struct, val: Value(Scalar(alloc1)) }
        _9 = &((*_10).2: u32);           // scope 2 at ui/consts/offset.rs:34:15: 34:19
        _8 = &raw const (*_9);           // scope 2 at ui/consts/offset.rs:34:15: 34:19
        _7 = move _8 as *const u8 (PtrToPtr); // scope 2 at ui/consts/offset.rs:34:14: 34:47
        StorageDead(_8);                 // scope 2 at ui/consts/offset.rs:34:46: 34:47
        ConstEvalCounter;                // scope 2 at ui/consts/offset.rs:34:14: 34:58
        _6 = ptr::const_ptr::<impl *const u8>::offset(move _7, const -3_isize) -> bb2; // scope 2 at ui/consts/offset.rs:34:14: 34:58
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:34:48: 34:54
                                         // + literal: Const { ty: unsafe fn(*const u8, isize) -> *const u8 {ptr::const_ptr::<impl *const u8>::offset}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_7);                 // scope 2 at ui/consts/offset.rs:34:57: 34:58
        StorageDead(_10);                // scope 2 at ui/consts/offset.rs:34:58: 34:59
        StorageDead(_9);                 // scope 2 at ui/consts/offset.rs:34:58: 34:59
        StorageLive(_11);                // scope 3 at ui/consts/offset.rs:35:5: 35:23
        StorageLive(_12);                // scope 3 at ui/consts/offset.rs:35:5: 35:7
        _12 = _1;                        // scope 3 at ui/consts/offset.rs:35:5: 35:7
        StorageLive(_13);                // scope 3 at ui/consts/offset.rs:35:20: 35:22
        _13 = _6;                        // scope 3 at ui/consts/offset.rs:35:20: 35:22
        ConstEvalCounter;                // scope 3 at ui/consts/offset.rs:35:5: 35:23
        _11 = ptr::const_ptr::<impl *const u8>::offset_from(move _12, move _13) -> bb3; // scope 3 at ui/consts/offset.rs:35:5: 35:23
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:35:8: 35:19
                                         // + literal: Const { ty: unsafe fn(*const u8, *const u8) -> isize {ptr::const_ptr::<impl *const u8>::offset_from}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_13);                // scope 3 at ui/consts/offset.rs:35:22: 35:23
        StorageDead(_12);                // scope 3 at ui/consts/offset.rs:35:22: 35:23
        _0 = Eq(move _11, const 0_isize); // scope 3 at ui/consts/offset.rs:35:5: 35:28
        StorageDead(_11);                // scope 3 at ui/consts/offset.rs:35:27: 35:28
        StorageDead(_6);                 // scope 2 at ui/consts/offset.rs:36:1: 36:2
        StorageDead(_1);                 // scope 1 at ui/consts/offset.rs:36:1: 36:2
        return;                          // scope 0 at ui/consts/offset.rs:32:1: 36:3
    }
}

alloc1 (static: S, size: 12, align: 4) {
    00 00 00 00 00 00 00 00 00 00 00 00             â”‚ ............
}

const OFFSET_ZST: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/offset.rs:38:19: 38:23
    let _2: &();                         // in scope 0 at ui/consts/offset.rs:39:14: 39:17
    let _3: ();                          // in scope 0 at ui/consts/offset.rs:39:15: 39:17
    let mut _5: *const ();               // in scope 0 at ui/consts/offset.rs:41:14: 41:26
    let mut _6: *const ();               // in scope 0 at ui/consts/offset.rs:41:14: 41:16
    let mut _8: *const ();               // in scope 0 at ui/consts/offset.rs:42:14: 42:35
    let mut _9: *const ();               // in scope 0 at ui/consts/offset.rs:42:14: 42:16
    let mut _10: isize;                  // in scope 0 at ui/consts/offset.rs:43:5: 43:23
    let mut _11: *const u8;              // in scope 0 at ui/consts/offset.rs:43:5: 43:7
    let mut _12: *const u8;              // in scope 0 at ui/consts/offset.rs:43:20: 43:22
    scope 1 {
        let _1: *const ();               // in scope 1 at ui/consts/offset.rs:39:9: 39:11
        let mut _13: &();                // in scope 1 at ui/consts/offset.rs:39:14: 39:17
        scope 2 {
            debug pz => _1;              // in scope 2 at ui/consts/offset.rs:39:9: 39:11
            let _4: *const u8;           // in scope 2 at ui/consts/offset.rs:41:9: 41:11
            scope 3 {
                debug p1 => _4;          // in scope 3 at ui/consts/offset.rs:41:9: 41:11
                let _7: *const u8;       // in scope 3 at ui/consts/offset.rs:42:9: 42:11
                scope 4 {
                    debug p2 => _7;      // in scope 4 at ui/consts/offset.rs:42:9: 42:11
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/offset.rs:39:9: 39:11
        StorageLive(_2);                 // scope 1 at ui/consts/offset.rs:39:14: 39:17
        _13 = const _;                   // scope 1 at ui/consts/offset.rs:39:14: 39:17
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:39:14: 39:17
                                         // + literal: Const { ty: &(), val: Unevaluated(OFFSET_ZST, [], Some(promoted[0])) }
        _2 = &(*_13);                    // scope 1 at ui/consts/offset.rs:39:14: 39:17
        _1 = &raw const (*_2);           // scope 1 at ui/consts/offset.rs:39:14: 39:17
        StorageDead(_2);                 // scope 1 at ui/consts/offset.rs:39:30: 39:31
        StorageLive(_4);                 // scope 2 at ui/consts/offset.rs:41:9: 41:11
        StorageLive(_5);                 // scope 2 at ui/consts/offset.rs:41:14: 41:26
        StorageLive(_6);                 // scope 2 at ui/consts/offset.rs:41:14: 41:16
        _6 = _1;                         // scope 2 at ui/consts/offset.rs:41:14: 41:16
        ConstEvalCounter;                // scope 2 at ui/consts/offset.rs:41:14: 41:26
        _5 = ptr::const_ptr::<impl *const ()>::offset(move _6, const 5_isize) -> bb1; // scope 2 at ui/consts/offset.rs:41:14: 41:26
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:41:17: 41:23
                                         // + literal: Const { ty: unsafe fn(*const (), isize) -> *const () {ptr::const_ptr::<impl *const ()>::offset}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_6);                 // scope 2 at ui/consts/offset.rs:41:25: 41:26
        _4 = move _5 as *const u8 (PtrToPtr); // scope 2 at ui/consts/offset.rs:41:14: 41:39
        StorageDead(_5);                 // scope 2 at ui/consts/offset.rs:41:38: 41:39
        StorageLive(_7);                 // scope 3 at ui/consts/offset.rs:42:9: 42:11
        StorageLive(_8);                 // scope 3 at ui/consts/offset.rs:42:14: 42:35
        StorageLive(_9);                 // scope 3 at ui/consts/offset.rs:42:14: 42:16
        _9 = _1;                         // scope 3 at ui/consts/offset.rs:42:14: 42:16
        ConstEvalCounter;                // scope 3 at ui/consts/offset.rs:42:14: 42:35
        _8 = ptr::const_ptr::<impl *const ()>::offset(move _9, const _) -> bb2; // scope 3 at ui/consts/offset.rs:42:14: 42:35
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:42:17: 42:23
                                         // + literal: Const { ty: unsafe fn(*const (), isize) -> *const () {ptr::const_ptr::<impl *const ()>::offset}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_9);                 // scope 3 at ui/consts/offset.rs:42:34: 42:35
        _7 = move _8 as *const u8 (PtrToPtr); // scope 3 at ui/consts/offset.rs:42:14: 42:48
        StorageDead(_8);                 // scope 3 at ui/consts/offset.rs:42:47: 42:48
        StorageLive(_10);                // scope 4 at ui/consts/offset.rs:43:5: 43:23
        StorageLive(_11);                // scope 4 at ui/consts/offset.rs:43:5: 43:7
        _11 = _4;                        // scope 4 at ui/consts/offset.rs:43:5: 43:7
        StorageLive(_12);                // scope 4 at ui/consts/offset.rs:43:20: 43:22
        _12 = _7;                        // scope 4 at ui/consts/offset.rs:43:20: 43:22
        ConstEvalCounter;                // scope 4 at ui/consts/offset.rs:43:5: 43:23
        _10 = ptr::const_ptr::<impl *const u8>::offset_from(move _11, move _12) -> bb3; // scope 4 at ui/consts/offset.rs:43:5: 43:23
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:43:8: 43:19
                                         // + literal: Const { ty: unsafe fn(*const u8, *const u8) -> isize {ptr::const_ptr::<impl *const u8>::offset_from}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_12);                // scope 4 at ui/consts/offset.rs:43:22: 43:23
        StorageDead(_11);                // scope 4 at ui/consts/offset.rs:43:22: 43:23
        _0 = Eq(move _10, const 0_isize); // scope 4 at ui/consts/offset.rs:43:5: 43:28
        StorageDead(_10);                // scope 4 at ui/consts/offset.rs:43:27: 43:28
        StorageDead(_7);                 // scope 3 at ui/consts/offset.rs:44:1: 44:2
        StorageDead(_4);                 // scope 2 at ui/consts/offset.rs:44:1: 44:2
        StorageDead(_1);                 // scope 1 at ui/consts/offset.rs:44:1: 44:2
        return;                          // scope 0 at ui/consts/offset.rs:38:1: 44:3
    }
}

promoted[0] in OFFSET_ZST: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/consts/offset.rs:39:14: 39:17
    let mut _1: ();                      // in scope 0 at ui/consts/offset.rs:39:15: 39:17

    bb0: {
        _1 = ();                         // scope 0 at ui/consts/offset.rs:39:15: 39:17
        _0 = &_1;                        // scope 0 at ui/consts/offset.rs:39:14: 39:17
        return;                          // scope 0 at ui/consts/offset.rs:39:14: 39:17
    }
}

const OFFSET_ZERO: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/offset.rs:45:20: 45:24
    let mut _2: &[u8];                   // in scope 0 at ui/consts/offset.rs:46:13: 46:30
    let mut _3: &[u8; 0];                // in scope 0 at ui/consts/offset.rs:46:13: 46:30
    let _4: [u8; 0];                     // in scope 0 at ui/consts/offset.rs:46:13: 46:21
    let mut _5: isize;                   // in scope 0 at ui/consts/offset.rs:47:5: 47:31
    let mut _6: *const u8;               // in scope 0 at ui/consts/offset.rs:47:5: 47:16
    let mut _7: *const u8;               // in scope 0 at ui/consts/offset.rs:47:5: 47:6
    let mut _8: *const u8;               // in scope 0 at ui/consts/offset.rs:47:29: 47:30
    scope 1 {
        let _1: *const u8;               // in scope 1 at ui/consts/offset.rs:46:9: 46:10
        let mut _9: &[u8; 0];            // in scope 1 at ui/consts/offset.rs:46:13: 46:30
        scope 2 {
            debug p => _1;               // in scope 2 at ui/consts/offset.rs:46:9: 46:10
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/offset.rs:46:9: 46:10
        StorageLive(_2);                 // scope 1 at ui/consts/offset.rs:46:13: 46:30
        StorageLive(_3);                 // scope 1 at ui/consts/offset.rs:46:13: 46:30
        _9 = const _;                    // scope 1 at ui/consts/offset.rs:46:13: 46:30
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:46:13: 46:30
                                         // + literal: Const { ty: &[u8; 0], val: Unevaluated(OFFSET_ZERO, [], Some(promoted[0])) }
        _3 = &(*_9);                     // scope 1 at ui/consts/offset.rs:46:13: 46:30
        _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 1 at ui/consts/offset.rs:46:13: 46:30
        StorageDead(_3);                 // scope 1 at ui/consts/offset.rs:46:20: 46:21
        ConstEvalCounter;                // scope 1 at ui/consts/offset.rs:46:13: 46:30
        _1 = core::slice::<impl [u8]>::as_ptr(move _2) -> bb1; // scope 1 at ui/consts/offset.rs:46:13: 46:30
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:46:22: 46:28
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> *const u8 {core::slice::<impl [u8]>::as_ptr}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 1 at ui/consts/offset.rs:46:29: 46:30
        StorageLive(_5);                 // scope 2 at ui/consts/offset.rs:47:5: 47:31
        StorageLive(_6);                 // scope 2 at ui/consts/offset.rs:47:5: 47:16
        StorageLive(_7);                 // scope 2 at ui/consts/offset.rs:47:5: 47:6
        _7 = _1;                         // scope 2 at ui/consts/offset.rs:47:5: 47:6
        ConstEvalCounter;                // scope 2 at ui/consts/offset.rs:47:5: 47:16
        _6 = ptr::const_ptr::<impl *const u8>::offset(move _7, const 0_isize) -> bb2; // scope 2 at ui/consts/offset.rs:47:5: 47:16
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:47:7: 47:13
                                         // + literal: Const { ty: unsafe fn(*const u8, isize) -> *const u8 {ptr::const_ptr::<impl *const u8>::offset}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_7);                 // scope 2 at ui/consts/offset.rs:47:15: 47:16
        StorageLive(_8);                 // scope 2 at ui/consts/offset.rs:47:29: 47:30
        _8 = _1;                         // scope 2 at ui/consts/offset.rs:47:29: 47:30
        ConstEvalCounter;                // scope 2 at ui/consts/offset.rs:47:5: 47:31
        _5 = ptr::const_ptr::<impl *const u8>::offset_from(move _6, move _8) -> bb3; // scope 2 at ui/consts/offset.rs:47:5: 47:31
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:47:17: 47:28
                                         // + literal: Const { ty: unsafe fn(*const u8, *const u8) -> isize {ptr::const_ptr::<impl *const u8>::offset_from}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_8);                 // scope 2 at ui/consts/offset.rs:47:30: 47:31
        StorageDead(_6);                 // scope 2 at ui/consts/offset.rs:47:30: 47:31
        _0 = Eq(move _5, const 0_isize); // scope 2 at ui/consts/offset.rs:47:5: 47:36
        StorageDead(_5);                 // scope 2 at ui/consts/offset.rs:47:35: 47:36
        StorageDead(_1);                 // scope 1 at ui/consts/offset.rs:48:1: 48:2
        return;                          // scope 0 at ui/consts/offset.rs:45:1: 48:3
    }
}

promoted[0] in OFFSET_ZERO: &[u8; 0] = {
    let mut _0: &[u8; 0];                // return place in scope 0 at ui/consts/offset.rs:46:13: 46:30
    let mut _1: [u8; 0];                 // in scope 0 at ui/consts/offset.rs:46:13: 46:21

    bb0: {
        _1 = [];                         // scope 0 at ui/consts/offset.rs:46:13: 46:21
        _0 = &_1;                        // scope 0 at ui/consts/offset.rs:46:13: 46:30
        return;                          // scope 0 at ui/consts/offset.rs:46:13: 46:30
    }
}

OFFSET_ZERO::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/offset.rs:46:19: 46:20

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/offset.rs:46:19: 46:20
        return;                          // scope 0 at ui/consts/offset.rs:46:19: 46:20
    }
}

const OFFSET_ONE: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/offset.rs:49:19: 49:23
    let _2: &u32;                        // in scope 0 at ui/consts/offset.rs:50:13: 50:19
    let _3: u32;                         // in scope 0 at ui/consts/offset.rs:50:14: 50:19
    let mut _4: isize;                   // in scope 0 at ui/consts/offset.rs:51:5: 51:31
    let mut _5: *const u32;              // in scope 0 at ui/consts/offset.rs:51:5: 51:16
    let mut _6: *const u32;              // in scope 0 at ui/consts/offset.rs:51:5: 51:6
    let mut _7: *const u32;              // in scope 0 at ui/consts/offset.rs:51:29: 51:30
    scope 1 {
        let _1: *const u32;              // in scope 1 at ui/consts/offset.rs:50:9: 50:10
        let mut _8: &u32;                // in scope 1 at ui/consts/offset.rs:50:13: 50:19
        scope 2 {
            debug p => _1;               // in scope 2 at ui/consts/offset.rs:50:9: 50:10
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/offset.rs:50:9: 50:10
        StorageLive(_2);                 // scope 1 at ui/consts/offset.rs:50:13: 50:19
        _8 = const _;                    // scope 1 at ui/consts/offset.rs:50:13: 50:19
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:50:13: 50:19
                                         // + literal: Const { ty: &u32, val: Unevaluated(OFFSET_ONE, [], Some(promoted[0])) }
        _2 = &(*_8);                     // scope 1 at ui/consts/offset.rs:50:13: 50:19
        _1 = &raw const (*_2);           // scope 1 at ui/consts/offset.rs:50:13: 50:19
        StorageDead(_2);                 // scope 1 at ui/consts/offset.rs:50:33: 50:34
        StorageLive(_4);                 // scope 2 at ui/consts/offset.rs:51:5: 51:31
        StorageLive(_5);                 // scope 2 at ui/consts/offset.rs:51:5: 51:16
        StorageLive(_6);                 // scope 2 at ui/consts/offset.rs:51:5: 51:6
        _6 = _1;                         // scope 2 at ui/consts/offset.rs:51:5: 51:6
        ConstEvalCounter;                // scope 2 at ui/consts/offset.rs:51:5: 51:16
        _5 = ptr::const_ptr::<impl *const u32>::offset(move _6, const 1_isize) -> bb1; // scope 2 at ui/consts/offset.rs:51:5: 51:16
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:51:7: 51:13
                                         // + literal: Const { ty: unsafe fn(*const u32, isize) -> *const u32 {ptr::const_ptr::<impl *const u32>::offset}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_6);                 // scope 2 at ui/consts/offset.rs:51:15: 51:16
        StorageLive(_7);                 // scope 2 at ui/consts/offset.rs:51:29: 51:30
        _7 = _1;                         // scope 2 at ui/consts/offset.rs:51:29: 51:30
        ConstEvalCounter;                // scope 2 at ui/consts/offset.rs:51:5: 51:31
        _4 = ptr::const_ptr::<impl *const u32>::offset_from(move _5, move _7) -> bb2; // scope 2 at ui/consts/offset.rs:51:5: 51:31
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:51:17: 51:28
                                         // + literal: Const { ty: unsafe fn(*const u32, *const u32) -> isize {ptr::const_ptr::<impl *const u32>::offset_from}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_7);                 // scope 2 at ui/consts/offset.rs:51:30: 51:31
        StorageDead(_5);                 // scope 2 at ui/consts/offset.rs:51:30: 51:31
        _0 = Eq(move _4, const 1_isize); // scope 2 at ui/consts/offset.rs:51:5: 51:36
        StorageDead(_4);                 // scope 2 at ui/consts/offset.rs:51:35: 51:36
        StorageDead(_1);                 // scope 1 at ui/consts/offset.rs:52:1: 52:2
        return;                          // scope 0 at ui/consts/offset.rs:49:1: 52:3
    }
}

promoted[0] in OFFSET_ONE: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/consts/offset.rs:50:13: 50:19
    let mut _1: u32;                     // in scope 0 at ui/consts/offset.rs:50:14: 50:19

    bb0: {
        _1 = const 42_u32;               // scope 0 at ui/consts/offset.rs:50:14: 50:19
        _0 = &_1;                        // scope 0 at ui/consts/offset.rs:50:13: 50:19
        return;                          // scope 0 at ui/consts/offset.rs:50:13: 50:19
    }
}

const OFFSET_DANGLING: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/offset.rs:53:24: 53:28
    let mut _2: std::ptr::NonNull<u8>;   // in scope 0 at ui/consts/offset.rs:54:13: 54:43
    let mut _3: isize;                   // in scope 0 at ui/consts/offset.rs:55:5: 55:31
    let mut _4: *mut u8;                 // in scope 0 at ui/consts/offset.rs:55:5: 55:16
    let mut _5: *mut u8;                 // in scope 0 at ui/consts/offset.rs:55:5: 55:6
    let mut _6: *const u8;               // in scope 0 at ui/consts/offset.rs:55:29: 55:30
    let mut _7: *mut u8;                 // in scope 0 at ui/consts/offset.rs:55:29: 55:30
    scope 1 {
        let _1: *mut u8;                 // in scope 1 at ui/consts/offset.rs:54:9: 54:10
        scope 2 {
            debug p => _1;               // in scope 2 at ui/consts/offset.rs:54:9: 54:10
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/offset.rs:54:9: 54:10
        StorageLive(_2);                 // scope 1 at ui/consts/offset.rs:54:13: 54:43
        ConstEvalCounter;                // scope 1 at ui/consts/offset.rs:54:13: 54:43
        _2 = NonNull::<u8>::dangling() -> bb1; // scope 1 at ui/consts/offset.rs:54:13: 54:43
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:54:13: 54:41
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> NonNull<u8> {NonNull::<u8>::dangling}, val: Value(<ZST>) }
    }

    bb1: {
        ConstEvalCounter;                // scope 1 at ui/consts/offset.rs:54:13: 54:52
        _1 = NonNull::<u8>::as_ptr(move _2) -> bb2; // scope 1 at ui/consts/offset.rs:54:13: 54:52
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:54:44: 54:50
                                         // + literal: Const { ty: fn(NonNull<u8>) -> *mut u8 {NonNull::<u8>::as_ptr}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_2);                 // scope 1 at ui/consts/offset.rs:54:51: 54:52
        StorageLive(_3);                 // scope 2 at ui/consts/offset.rs:55:5: 55:31
        StorageLive(_4);                 // scope 2 at ui/consts/offset.rs:55:5: 55:16
        StorageLive(_5);                 // scope 2 at ui/consts/offset.rs:55:5: 55:6
        _5 = _1;                         // scope 2 at ui/consts/offset.rs:55:5: 55:6
        ConstEvalCounter;                // scope 2 at ui/consts/offset.rs:55:5: 55:16
        _4 = ptr::mut_ptr::<impl *mut u8>::offset(move _5, const 0_isize) -> bb3; // scope 2 at ui/consts/offset.rs:55:5: 55:16
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:55:7: 55:13
                                         // + literal: Const { ty: unsafe fn(*mut u8, isize) -> *mut u8 {ptr::mut_ptr::<impl *mut u8>::offset}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_5);                 // scope 2 at ui/consts/offset.rs:55:15: 55:16
        StorageLive(_6);                 // scope 2 at ui/consts/offset.rs:55:29: 55:30
        StorageLive(_7);                 // scope 2 at ui/consts/offset.rs:55:29: 55:30
        _7 = _1;                         // scope 2 at ui/consts/offset.rs:55:29: 55:30
        _6 = move _7 as *const u8 (Pointer(MutToConstPointer)); // scope 2 at ui/consts/offset.rs:55:29: 55:30
        StorageDead(_7);                 // scope 2 at ui/consts/offset.rs:55:29: 55:30
        ConstEvalCounter;                // scope 2 at ui/consts/offset.rs:55:5: 55:31
        _3 = ptr::mut_ptr::<impl *mut u8>::offset_from(move _4, move _6) -> bb4; // scope 2 at ui/consts/offset.rs:55:5: 55:31
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:55:17: 55:28
                                         // + literal: Const { ty: unsafe fn(*mut u8, *const u8) -> isize {ptr::mut_ptr::<impl *mut u8>::offset_from}, val: Value(<ZST>) }
    }

    bb4: {
        StorageDead(_6);                 // scope 2 at ui/consts/offset.rs:55:30: 55:31
        StorageDead(_4);                 // scope 2 at ui/consts/offset.rs:55:30: 55:31
        _0 = Eq(move _3, const 0_isize); // scope 2 at ui/consts/offset.rs:55:5: 55:36
        StorageDead(_3);                 // scope 2 at ui/consts/offset.rs:55:35: 55:36
        StorageDead(_1);                 // scope 1 at ui/consts/offset.rs:56:1: 56:2
        return;                          // scope 0 at ui/consts/offset.rs:53:1: 56:3
    }
}

const OFFSET_UNALIGNED: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/offset.rs:57:25: 57:29
    let mut _3: &[u8];                   // in scope 0 at ui/consts/offset.rs:59:14: 59:26
    let mut _4: &[u8; 32];               // in scope 0 at ui/consts/offset.rs:59:14: 59:26
    let mut _6: *const u32;              // in scope 0 at ui/consts/offset.rs:60:14: 60:42
    let mut _7: *const u8;               // in scope 0 at ui/consts/offset.rs:60:15: 60:27
    let mut _8: *const u8;               // in scope 0 at ui/consts/offset.rs:60:15: 60:17
    let mut _9: isize;                   // in scope 0 at ui/consts/offset.rs:61:5: 61:38
    let mut _10: *const u8;              // in scope 0 at ui/consts/offset.rs:61:5: 61:22
    let mut _11: *const u32;             // in scope 0 at ui/consts/offset.rs:61:6: 61:8
    let mut _12: *const u8;              // in scope 0 at ui/consts/offset.rs:61:35: 61:37
    scope 1 {
        let _1: [u8; 32];                // in scope 1 at ui/consts/offset.rs:58:9: 58:12
        scope 2 {
            debug arr => _1;             // in scope 2 at ui/consts/offset.rs:58:9: 58:12
            let _2: *const u8;           // in scope 2 at ui/consts/offset.rs:59:9: 59:11
            scope 3 {
                debug p1 => _2;          // in scope 3 at ui/consts/offset.rs:59:9: 59:11
                let _5: *const u32;      // in scope 3 at ui/consts/offset.rs:60:9: 60:11
                scope 4 {
                    debug p2 => _5;      // in scope 4 at ui/consts/offset.rs:60:9: 60:11
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/offset.rs:58:9: 58:12
        _1 = [const 0_u8; 32];           // scope 1 at ui/consts/offset.rs:58:15: 58:24
        StorageLive(_2);                 // scope 2 at ui/consts/offset.rs:59:9: 59:11
        StorageLive(_3);                 // scope 2 at ui/consts/offset.rs:59:14: 59:26
        StorageLive(_4);                 // scope 2 at ui/consts/offset.rs:59:14: 59:26
        _4 = &_1;                        // scope 2 at ui/consts/offset.rs:59:14: 59:26
        _3 = move _4 as &[u8] (Pointer(Unsize)); // scope 2 at ui/consts/offset.rs:59:14: 59:26
        StorageDead(_4);                 // scope 2 at ui/consts/offset.rs:59:16: 59:17
        ConstEvalCounter;                // scope 2 at ui/consts/offset.rs:59:14: 59:26
        _2 = core::slice::<impl [u8]>::as_ptr(move _3) -> bb1; // scope 2 at ui/consts/offset.rs:59:14: 59:26
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:59:18: 59:24
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> *const u8 {core::slice::<impl [u8]>::as_ptr}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 2 at ui/consts/offset.rs:59:25: 59:26
        StorageLive(_5);                 // scope 3 at ui/consts/offset.rs:60:9: 60:11
        StorageLive(_6);                 // scope 3 at ui/consts/offset.rs:60:14: 60:42
        StorageLive(_7);                 // scope 3 at ui/consts/offset.rs:60:15: 60:27
        StorageLive(_8);                 // scope 3 at ui/consts/offset.rs:60:15: 60:17
        _8 = _2;                         // scope 3 at ui/consts/offset.rs:60:15: 60:17
        ConstEvalCounter;                // scope 3 at ui/consts/offset.rs:60:15: 60:27
        _7 = ptr::const_ptr::<impl *const u8>::offset(move _8, const 2_isize) -> bb2; // scope 3 at ui/consts/offset.rs:60:15: 60:27
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:60:18: 60:24
                                         // + literal: Const { ty: unsafe fn(*const u8, isize) -> *const u8 {ptr::const_ptr::<impl *const u8>::offset}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_8);                 // scope 3 at ui/consts/offset.rs:60:26: 60:27
        _6 = move _7 as *const u32 (PtrToPtr); // scope 3 at ui/consts/offset.rs:60:14: 60:42
        StorageDead(_7);                 // scope 3 at ui/consts/offset.rs:60:41: 60:42
        ConstEvalCounter;                // scope 3 at ui/consts/offset.rs:60:14: 60:52
        _5 = ptr::const_ptr::<impl *const u32>::offset(move _6, const 1_isize) -> bb3; // scope 3 at ui/consts/offset.rs:60:14: 60:52
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:60:43: 60:49
                                         // + literal: Const { ty: unsafe fn(*const u32, isize) -> *const u32 {ptr::const_ptr::<impl *const u32>::offset}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_6);                 // scope 3 at ui/consts/offset.rs:60:51: 60:52
        StorageLive(_9);                 // scope 4 at ui/consts/offset.rs:61:5: 61:38
        StorageLive(_10);                // scope 4 at ui/consts/offset.rs:61:5: 61:22
        StorageLive(_11);                // scope 4 at ui/consts/offset.rs:61:6: 61:8
        _11 = _5;                        // scope 4 at ui/consts/offset.rs:61:6: 61:8
        _10 = move _11 as *const u8 (PtrToPtr); // scope 4 at ui/consts/offset.rs:61:5: 61:22
        StorageDead(_11);                // scope 4 at ui/consts/offset.rs:61:21: 61:22
        StorageLive(_12);                // scope 4 at ui/consts/offset.rs:61:35: 61:37
        _12 = _2;                        // scope 4 at ui/consts/offset.rs:61:35: 61:37
        ConstEvalCounter;                // scope 4 at ui/consts/offset.rs:61:5: 61:38
        _9 = ptr::const_ptr::<impl *const u8>::offset_from(move _10, move _12) -> bb4; // scope 4 at ui/consts/offset.rs:61:5: 61:38
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:61:23: 61:34
                                         // + literal: Const { ty: unsafe fn(*const u8, *const u8) -> isize {ptr::const_ptr::<impl *const u8>::offset_from}, val: Value(<ZST>) }
    }

    bb4: {
        StorageDead(_12);                // scope 4 at ui/consts/offset.rs:61:37: 61:38
        StorageDead(_10);                // scope 4 at ui/consts/offset.rs:61:37: 61:38
        _0 = Eq(move _9, const 6_isize); // scope 4 at ui/consts/offset.rs:61:5: 61:43
        StorageDead(_9);                 // scope 4 at ui/consts/offset.rs:61:42: 61:43
        StorageDead(_5);                 // scope 3 at ui/consts/offset.rs:62:1: 62:2
        StorageDead(_2);                 // scope 2 at ui/consts/offset.rs:62:1: 62:2
        StorageDead(_1);                 // scope 1 at ui/consts/offset.rs:62:1: 62:2
        return;                          // scope 0 at ui/consts/offset.rs:57:1: 62:3
    }
}

OFFSET_UNALIGNED::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/offset.rs:58:21: 58:23

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/consts/offset.rs:58:21: 58:23
        return;                          // scope 0 at ui/consts/offset.rs:58:21: 58:23
    }
}

const WRAP_OFFSET_NO_CHANGE: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/offset.rs:64:30: 64:34
    let _2: &u32;                        // in scope 0 at ui/consts/offset.rs:65:14: 65:20
    let _3: u32;                         // in scope 0 at ui/consts/offset.rs:65:15: 65:20
    let mut _5: *const u32;              // in scope 0 at ui/consts/offset.rs:66:14: 66:38
    let mut _6: *const u32;              // in scope 0 at ui/consts/offset.rs:66:14: 66:16
    let mut _8: *const u32;              // in scope 0 at ui/consts/offset.rs:67:14: 67:39
    let mut _9: *const u32;              // in scope 0 at ui/consts/offset.rs:67:14: 67:16
    let mut _10: bool;                   // in scope 0 at ui/consts/offset.rs:68:5: 68:30
    let mut _11: isize;                  // in scope 0 at ui/consts/offset.rs:68:6: 68:24
    let mut _12: *const u32;             // in scope 0 at ui/consts/offset.rs:68:6: 68:8
    let mut _13: *const u32;             // in scope 0 at ui/consts/offset.rs:68:21: 68:23
    let mut _14: bool;                   // in scope 0 at ui/consts/offset.rs:68:33: 68:58
    let mut _15: isize;                  // in scope 0 at ui/consts/offset.rs:68:34: 68:52
    let mut _16: *const u32;             // in scope 0 at ui/consts/offset.rs:68:34: 68:36
    let mut _17: *const u32;             // in scope 0 at ui/consts/offset.rs:68:49: 68:51
    scope 1 {
        let _1: *const u32;              // in scope 1 at ui/consts/offset.rs:65:9: 65:11
        let mut _18: &u32;               // in scope 1 at ui/consts/offset.rs:65:14: 65:20
        scope 2 {
            debug p1 => _1;              // in scope 2 at ui/consts/offset.rs:65:9: 65:11
            let _4: *const u32;          // in scope 2 at ui/consts/offset.rs:66:9: 66:11
            scope 3 {
                debug p2 => _4;          // in scope 3 at ui/consts/offset.rs:66:9: 66:11
                let _7: *const u32;      // in scope 3 at ui/consts/offset.rs:67:9: 67:11
                scope 4 {
                    debug p3 => _7;      // in scope 4 at ui/consts/offset.rs:67:9: 67:11
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/offset.rs:65:9: 65:11
        StorageLive(_2);                 // scope 1 at ui/consts/offset.rs:65:14: 65:20
        _18 = const _;                   // scope 1 at ui/consts/offset.rs:65:14: 65:20
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:65:14: 65:20
                                         // + literal: Const { ty: &u32, val: Unevaluated(WRAP_OFFSET_NO_CHANGE, [], Some(promoted[0])) }
        _2 = &(*_18);                    // scope 1 at ui/consts/offset.rs:65:14: 65:20
        _1 = &raw const (*_2);           // scope 1 at ui/consts/offset.rs:65:14: 65:20
        StorageDead(_2);                 // scope 1 at ui/consts/offset.rs:65:34: 65:35
        StorageLive(_4);                 // scope 2 at ui/consts/offset.rs:66:9: 66:11
        StorageLive(_5);                 // scope 2 at ui/consts/offset.rs:66:14: 66:38
        StorageLive(_6);                 // scope 2 at ui/consts/offset.rs:66:14: 66:16
        _6 = _1;                         // scope 2 at ui/consts/offset.rs:66:14: 66:16
        ConstEvalCounter;                // scope 2 at ui/consts/offset.rs:66:14: 66:38
        _5 = ptr::const_ptr::<impl *const u32>::wrapping_offset(move _6, const 1000_isize) -> bb1; // scope 2 at ui/consts/offset.rs:66:14: 66:38
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:66:17: 66:32
                                         // + literal: Const { ty: fn(*const u32, isize) -> *const u32 {ptr::const_ptr::<impl *const u32>::wrapping_offset}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_6);                 // scope 2 at ui/consts/offset.rs:66:37: 66:38
        ConstEvalCounter;                // scope 2 at ui/consts/offset.rs:66:14: 66:61
        _4 = ptr::const_ptr::<impl *const u32>::wrapping_offset(move _5, const -1000_isize) -> bb2; // scope 2 at ui/consts/offset.rs:66:14: 66:61
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:66:39: 66:54
                                         // + literal: Const { ty: fn(*const u32, isize) -> *const u32 {ptr::const_ptr::<impl *const u32>::wrapping_offset}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_5);                 // scope 2 at ui/consts/offset.rs:66:60: 66:61
        StorageLive(_7);                 // scope 3 at ui/consts/offset.rs:67:9: 67:11
        StorageLive(_8);                 // scope 3 at ui/consts/offset.rs:67:14: 67:39
        StorageLive(_9);                 // scope 3 at ui/consts/offset.rs:67:14: 67:16
        _9 = _1;                         // scope 3 at ui/consts/offset.rs:67:14: 67:16
        ConstEvalCounter;                // scope 3 at ui/consts/offset.rs:67:14: 67:39
        _8 = ptr::const_ptr::<impl *const u32>::wrapping_offset(move _9, const -1000_isize) -> bb3; // scope 3 at ui/consts/offset.rs:67:14: 67:39
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:67:17: 67:32
                                         // + literal: Const { ty: fn(*const u32, isize) -> *const u32 {ptr::const_ptr::<impl *const u32>::wrapping_offset}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_9);                 // scope 3 at ui/consts/offset.rs:67:38: 67:39
        ConstEvalCounter;                // scope 3 at ui/consts/offset.rs:67:14: 67:61
        _7 = ptr::const_ptr::<impl *const u32>::wrapping_offset(move _8, const 1000_isize) -> bb4; // scope 3 at ui/consts/offset.rs:67:14: 67:61
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:67:40: 67:55
                                         // + literal: Const { ty: fn(*const u32, isize) -> *const u32 {ptr::const_ptr::<impl *const u32>::wrapping_offset}, val: Value(<ZST>) }
    }

    bb4: {
        StorageDead(_8);                 // scope 3 at ui/consts/offset.rs:67:60: 67:61
        StorageLive(_10);                // scope 4 at ui/consts/offset.rs:68:5: 68:30
        StorageLive(_11);                // scope 4 at ui/consts/offset.rs:68:6: 68:24
        StorageLive(_12);                // scope 4 at ui/consts/offset.rs:68:6: 68:8
        _12 = _1;                        // scope 4 at ui/consts/offset.rs:68:6: 68:8
        StorageLive(_13);                // scope 4 at ui/consts/offset.rs:68:21: 68:23
        _13 = _4;                        // scope 4 at ui/consts/offset.rs:68:21: 68:23
        ConstEvalCounter;                // scope 4 at ui/consts/offset.rs:68:6: 68:24
        _11 = ptr::const_ptr::<impl *const u32>::offset_from(move _12, move _13) -> bb5; // scope 4 at ui/consts/offset.rs:68:6: 68:24
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:68:9: 68:20
                                         // + literal: Const { ty: unsafe fn(*const u32, *const u32) -> isize {ptr::const_ptr::<impl *const u32>::offset_from}, val: Value(<ZST>) }
    }

    bb5: {
        StorageDead(_13);                // scope 4 at ui/consts/offset.rs:68:23: 68:24
        StorageDead(_12);                // scope 4 at ui/consts/offset.rs:68:23: 68:24
        _10 = Eq(move _11, const 0_isize); // scope 4 at ui/consts/offset.rs:68:5: 68:30
        StorageDead(_11);                // scope 4 at ui/consts/offset.rs:68:29: 68:30
        StorageLive(_14);                // scope 4 at ui/consts/offset.rs:68:33: 68:58
        StorageLive(_15);                // scope 4 at ui/consts/offset.rs:68:34: 68:52
        StorageLive(_16);                // scope 4 at ui/consts/offset.rs:68:34: 68:36
        _16 = _1;                        // scope 4 at ui/consts/offset.rs:68:34: 68:36
        StorageLive(_17);                // scope 4 at ui/consts/offset.rs:68:49: 68:51
        _17 = _7;                        // scope 4 at ui/consts/offset.rs:68:49: 68:51
        ConstEvalCounter;                // scope 4 at ui/consts/offset.rs:68:34: 68:52
        _15 = ptr::const_ptr::<impl *const u32>::offset_from(move _16, move _17) -> bb6; // scope 4 at ui/consts/offset.rs:68:34: 68:52
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:68:37: 68:48
                                         // + literal: Const { ty: unsafe fn(*const u32, *const u32) -> isize {ptr::const_ptr::<impl *const u32>::offset_from}, val: Value(<ZST>) }
    }

    bb6: {
        StorageDead(_17);                // scope 4 at ui/consts/offset.rs:68:51: 68:52
        StorageDead(_16);                // scope 4 at ui/consts/offset.rs:68:51: 68:52
        _14 = Eq(move _15, const 0_isize); // scope 4 at ui/consts/offset.rs:68:33: 68:58
        StorageDead(_15);                // scope 4 at ui/consts/offset.rs:68:57: 68:58
        _0 = BitAnd(move _10, move _14); // scope 4 at ui/consts/offset.rs:68:5: 68:58
        StorageDead(_14);                // scope 4 at ui/consts/offset.rs:68:57: 68:58
        StorageDead(_10);                // scope 4 at ui/consts/offset.rs:68:57: 68:58
        StorageDead(_7);                 // scope 3 at ui/consts/offset.rs:69:1: 69:2
        StorageDead(_4);                 // scope 2 at ui/consts/offset.rs:69:1: 69:2
        StorageDead(_1);                 // scope 1 at ui/consts/offset.rs:69:1: 69:2
        return;                          // scope 0 at ui/consts/offset.rs:64:1: 69:3
    }
}

promoted[0] in WRAP_OFFSET_NO_CHANGE: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/consts/offset.rs:65:14: 65:20
    let mut _1: u32;                     // in scope 0 at ui/consts/offset.rs:65:15: 65:20

    bb0: {
        _1 = const 42_u32;               // scope 0 at ui/consts/offset.rs:65:15: 65:20
        _0 = &_1;                        // scope 0 at ui/consts/offset.rs:65:14: 65:20
        return;                          // scope 0 at ui/consts/offset.rs:65:14: 65:20
    }
}

const WRAP_ADDRESS_SPACE: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/offset.rs:70:27: 70:31
    let _2: &u8;                         // in scope 0 at ui/consts/offset.rs:71:14: 71:19
    let _3: u8;                          // in scope 0 at ui/consts/offset.rs:71:15: 71:19
    let mut _5: *const u8;               // in scope 0 at ui/consts/offset.rs:72:14: 72:44
    let mut _6: *const u8;               // in scope 0 at ui/consts/offset.rs:72:14: 72:16
    let mut _7: isize;                   // in scope 0 at ui/consts/offset.rs:73:5: 73:23
    let mut _8: *const u8;               // in scope 0 at ui/consts/offset.rs:73:5: 73:7
    let mut _9: *const u8;               // in scope 0 at ui/consts/offset.rs:73:20: 73:22
    scope 1 {
        let _1: *const u8;               // in scope 1 at ui/consts/offset.rs:71:9: 71:11
        let mut _10: &u8;                // in scope 1 at ui/consts/offset.rs:71:14: 71:19
        scope 2 {
            debug p1 => _1;              // in scope 2 at ui/consts/offset.rs:71:9: 71:11
            let _4: *const u8;           // in scope 2 at ui/consts/offset.rs:72:9: 72:11
            scope 3 {
                debug p2 => _4;          // in scope 3 at ui/consts/offset.rs:72:9: 72:11
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/offset.rs:71:9: 71:11
        StorageLive(_2);                 // scope 1 at ui/consts/offset.rs:71:14: 71:19
        _10 = const _;                   // scope 1 at ui/consts/offset.rs:71:14: 71:19
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:71:14: 71:19
                                         // + literal: Const { ty: &u8, val: Unevaluated(WRAP_ADDRESS_SPACE, [], Some(promoted[0])) }
        _2 = &(*_10);                    // scope 1 at ui/consts/offset.rs:71:14: 71:19
        _1 = &raw const (*_2);           // scope 1 at ui/consts/offset.rs:71:14: 71:19
        StorageDead(_2);                 // scope 1 at ui/consts/offset.rs:71:32: 71:33
        StorageLive(_4);                 // scope 2 at ui/consts/offset.rs:72:9: 72:11
        StorageLive(_5);                 // scope 2 at ui/consts/offset.rs:72:14: 72:44
        StorageLive(_6);                 // scope 2 at ui/consts/offset.rs:72:14: 72:16
        _6 = _1;                         // scope 2 at ui/consts/offset.rs:72:14: 72:16
        ConstEvalCounter;                // scope 2 at ui/consts/offset.rs:72:14: 72:44
        _5 = ptr::const_ptr::<impl *const u8>::wrapping_offset(move _6, const _) -> bb1; // scope 2 at ui/consts/offset.rs:72:14: 72:44
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:72:17: 72:32
                                         // + literal: Const { ty: fn(*const u8, isize) -> *const u8 {ptr::const_ptr::<impl *const u8>::wrapping_offset}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_6);                 // scope 2 at ui/consts/offset.rs:72:43: 72:44
        ConstEvalCounter;                // scope 2 at ui/consts/offset.rs:72:14: 72:72
        _4 = ptr::const_ptr::<impl *const u8>::wrapping_offset(move _5, const _) -> bb2; // scope 2 at ui/consts/offset.rs:72:14: 72:72
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:72:45: 72:60
                                         // + literal: Const { ty: fn(*const u8, isize) -> *const u8 {ptr::const_ptr::<impl *const u8>::wrapping_offset}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_5);                 // scope 2 at ui/consts/offset.rs:72:71: 72:72
        StorageLive(_7);                 // scope 3 at ui/consts/offset.rs:73:5: 73:23
        StorageLive(_8);                 // scope 3 at ui/consts/offset.rs:73:5: 73:7
        _8 = _1;                         // scope 3 at ui/consts/offset.rs:73:5: 73:7
        StorageLive(_9);                 // scope 3 at ui/consts/offset.rs:73:20: 73:22
        _9 = _4;                         // scope 3 at ui/consts/offset.rs:73:20: 73:22
        ConstEvalCounter;                // scope 3 at ui/consts/offset.rs:73:5: 73:23
        _7 = ptr::const_ptr::<impl *const u8>::offset_from(move _8, move _9) -> bb3; // scope 3 at ui/consts/offset.rs:73:5: 73:23
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:73:8: 73:19
                                         // + literal: Const { ty: unsafe fn(*const u8, *const u8) -> isize {ptr::const_ptr::<impl *const u8>::offset_from}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_9);                 // scope 3 at ui/consts/offset.rs:73:22: 73:23
        StorageDead(_8);                 // scope 3 at ui/consts/offset.rs:73:22: 73:23
        _0 = Eq(move _7, const 0_isize); // scope 3 at ui/consts/offset.rs:73:5: 73:28
        StorageDead(_7);                 // scope 3 at ui/consts/offset.rs:73:27: 73:28
        StorageDead(_4);                 // scope 2 at ui/consts/offset.rs:74:1: 74:2
        StorageDead(_1);                 // scope 1 at ui/consts/offset.rs:74:1: 74:2
        return;                          // scope 0 at ui/consts/offset.rs:70:1: 74:3
    }
}

promoted[0] in WRAP_ADDRESS_SPACE: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/consts/offset.rs:71:14: 71:19
    let mut _1: u8;                      // in scope 0 at ui/consts/offset.rs:71:15: 71:19

    bb0: {
        _1 = const 42_u8;                // scope 0 at ui/consts/offset.rs:71:15: 71:19
        _0 = &_1;                        // scope 0 at ui/consts/offset.rs:71:14: 71:19
        return;                          // scope 0 at ui/consts/offset.rs:71:14: 71:19
    }
}

const WRAP_SIZE_OF: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/offset.rs:76:21: 76:25
    let _3: &u32;                        // in scope 0 at ui/consts/offset.rs:79:13: 79:20
    let _4: usize;                       // in scope 0 at ui/consts/offset.rs:79:18: 79:19
    let mut _5: usize;                   // in scope 0 at ui/consts/offset.rs:79:14: 79:20
    let mut _6: bool;                    // in scope 0 at ui/consts/offset.rs:79:14: 79:20
    let mut _8: *const u32;              // in scope 0 at ui/consts/offset.rs:81:19: 81:20
    let mut _10: *const u32;             // in scope 0 at ui/consts/offset.rs:82:20: 82:21
    let mut _11: isize;                  // in scope 0 at ui/consts/offset.rs:83:5: 83:34
    let mut _12: *const u32;             // in scope 0 at ui/consts/offset.rs:83:5: 83:12
    let mut _13: *const u32;             // in scope 0 at ui/consts/offset.rs:83:25: 83:33
    scope 1 {
        let _1: [u32; 2];                // in scope 1 at ui/consts/offset.rs:78:9: 78:12
        scope 2 {
            debug arr => _1;             // in scope 2 at ui/consts/offset.rs:78:9: 78:12
            let _2: *const u32;          // in scope 2 at ui/consts/offset.rs:79:9: 79:10
            scope 3 {
                debug p => _2;           // in scope 3 at ui/consts/offset.rs:79:9: 79:10
                let _7: *const u32;      // in scope 3 at ui/consts/offset.rs:81:9: 81:16
                scope 4 {
                    debug wrapped => _7; // in scope 4 at ui/consts/offset.rs:81:9: 81:16
                    let _9: *const u32;  // in scope 4 at ui/consts/offset.rs:82:9: 82:17
                    scope 5 {
                        debug backward => _9; // in scope 5 at ui/consts/offset.rs:82:9: 82:17
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/offset.rs:78:9: 78:12
        _1 = [const 0_u32; 2];           // scope 1 at ui/consts/offset.rs:78:15: 78:24
        StorageLive(_2);                 // scope 2 at ui/consts/offset.rs:79:9: 79:10
        StorageLive(_3);                 // scope 2 at ui/consts/offset.rs:79:13: 79:20
        StorageLive(_4);                 // scope 2 at ui/consts/offset.rs:79:18: 79:19
        _4 = const 1_usize;              // scope 2 at ui/consts/offset.rs:79:18: 79:19
        _5 = Len(_1);                    // scope 2 at ui/consts/offset.rs:79:14: 79:20
        _6 = Lt(_4, _5);                 // scope 2 at ui/consts/offset.rs:79:14: 79:20
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _4) -> bb1; // scope 2 at ui/consts/offset.rs:79:14: 79:20
    }

    bb1: {
        _3 = &_1[_4];                    // scope 2 at ui/consts/offset.rs:79:13: 79:20
        _2 = &raw const (*_3);           // scope 2 at ui/consts/offset.rs:79:13: 79:20
        StorageDead(_3);                 // scope 2 at ui/consts/offset.rs:79:34: 79:35
        StorageLive(_7);                 // scope 3 at ui/consts/offset.rs:81:9: 81:16
        StorageLive(_8);                 // scope 3 at ui/consts/offset.rs:81:19: 81:20
        _8 = _2;                         // scope 3 at ui/consts/offset.rs:81:19: 81:20
        ConstEvalCounter;                // scope 3 at ui/consts/offset.rs:81:19: 81:48
        _7 = ptr::const_ptr::<impl *const u32>::wrapping_offset(move _8, const _) -> bb2; // scope 3 at ui/consts/offset.rs:81:19: 81:48
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:81:21: 81:36
                                         // + literal: Const { ty: fn(*const u32, isize) -> *const u32 {ptr::const_ptr::<impl *const u32>::wrapping_offset}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_8);                 // scope 3 at ui/consts/offset.rs:81:47: 81:48
        StorageLive(_9);                 // scope 4 at ui/consts/offset.rs:82:9: 82:17
        StorageLive(_10);                // scope 4 at ui/consts/offset.rs:82:20: 82:21
        _10 = _2;                        // scope 4 at ui/consts/offset.rs:82:20: 82:21
        ConstEvalCounter;                // scope 4 at ui/consts/offset.rs:82:20: 82:41
        _9 = ptr::const_ptr::<impl *const u32>::wrapping_offset(move _10, const -1_isize) -> bb3; // scope 4 at ui/consts/offset.rs:82:20: 82:41
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:82:22: 82:37
                                         // + literal: Const { ty: fn(*const u32, isize) -> *const u32 {ptr::const_ptr::<impl *const u32>::wrapping_offset}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_10);                // scope 4 at ui/consts/offset.rs:82:40: 82:41
        StorageLive(_11);                // scope 5 at ui/consts/offset.rs:83:5: 83:34
        StorageLive(_12);                // scope 5 at ui/consts/offset.rs:83:5: 83:12
        _12 = _7;                        // scope 5 at ui/consts/offset.rs:83:5: 83:12
        StorageLive(_13);                // scope 5 at ui/consts/offset.rs:83:25: 83:33
        _13 = _9;                        // scope 5 at ui/consts/offset.rs:83:25: 83:33
        ConstEvalCounter;                // scope 5 at ui/consts/offset.rs:83:5: 83:34
        _11 = ptr::const_ptr::<impl *const u32>::offset_from(move _12, move _13) -> bb4; // scope 5 at ui/consts/offset.rs:83:5: 83:34
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:83:13: 83:24
                                         // + literal: Const { ty: unsafe fn(*const u32, *const u32) -> isize {ptr::const_ptr::<impl *const u32>::offset_from}, val: Value(<ZST>) }
    }

    bb4: {
        StorageDead(_13);                // scope 5 at ui/consts/offset.rs:83:33: 83:34
        StorageDead(_12);                // scope 5 at ui/consts/offset.rs:83:33: 83:34
        _0 = Eq(move _11, const 0_isize); // scope 5 at ui/consts/offset.rs:83:5: 83:39
        StorageDead(_11);                // scope 5 at ui/consts/offset.rs:83:38: 83:39
        StorageDead(_9);                 // scope 4 at ui/consts/offset.rs:84:1: 84:2
        StorageDead(_7);                 // scope 3 at ui/consts/offset.rs:84:1: 84:2
        StorageDead(_4);                 // scope 2 at ui/consts/offset.rs:84:1: 84:2
        StorageDead(_2);                 // scope 2 at ui/consts/offset.rs:84:1: 84:2
        StorageDead(_1);                 // scope 1 at ui/consts/offset.rs:84:1: 84:2
        return;                          // scope 0 at ui/consts/offset.rs:76:1: 84:3
    }
}

WRAP_SIZE_OF::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/offset.rs:78:22: 78:23

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/consts/offset.rs:78:22: 78:23
        return;                          // scope 0 at ui/consts/offset.rs:78:22: 78:23
    }
}

const WRAP_INTEGER_POINTER: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/offset.rs:85:29: 85:33
    let mut _2: *const u32;              // in scope 0 at ui/consts/offset.rs:86:14: 86:34
    let mut _4: isize;                   // in scope 0 at ui/consts/offset.rs:88:5: 88:23
    let mut _5: *const u32;              // in scope 0 at ui/consts/offset.rs:88:5: 88:7
    let mut _6: *const u32;              // in scope 0 at ui/consts/offset.rs:88:20: 88:22
    scope 1 {
        let _1: *const u32;              // in scope 1 at ui/consts/offset.rs:86:9: 86:11
        scope 2 {
            debug p1 => _1;              // in scope 2 at ui/consts/offset.rs:86:9: 86:11
            let _3: *const u32;          // in scope 2 at ui/consts/offset.rs:87:9: 87:11
            scope 3 {
                debug p2 => _3;          // in scope 3 at ui/consts/offset.rs:87:9: 87:11
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/offset.rs:86:9: 86:11
        StorageLive(_2);                 // scope 1 at ui/consts/offset.rs:86:14: 86:34
        _2 = const 66_usize as *const u32 (PointerFromExposedAddress); // scope 1 at ui/consts/offset.rs:86:14: 86:34
        ConstEvalCounter;                // scope 1 at ui/consts/offset.rs:86:14: 86:53
        _1 = ptr::const_ptr::<impl *const u32>::wrapping_offset(move _2, const 4_isize) -> bb1; // scope 1 at ui/consts/offset.rs:86:14: 86:53
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:86:35: 86:50
                                         // + literal: Const { ty: fn(*const u32, isize) -> *const u32 {ptr::const_ptr::<impl *const u32>::wrapping_offset}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 1 at ui/consts/offset.rs:86:52: 86:53
        StorageLive(_3);                 // scope 2 at ui/consts/offset.rs:87:9: 87:11
        _3 = const 82_usize as *const u32 (PointerFromExposedAddress); // scope 2 at ui/consts/offset.rs:87:14: 87:32
        StorageLive(_4);                 // scope 3 at ui/consts/offset.rs:88:5: 88:23
        StorageLive(_5);                 // scope 3 at ui/consts/offset.rs:88:5: 88:7
        _5 = _1;                         // scope 3 at ui/consts/offset.rs:88:5: 88:7
        StorageLive(_6);                 // scope 3 at ui/consts/offset.rs:88:20: 88:22
        _6 = _3;                         // scope 3 at ui/consts/offset.rs:88:20: 88:22
        ConstEvalCounter;                // scope 3 at ui/consts/offset.rs:88:5: 88:23
        _4 = ptr::const_ptr::<impl *const u32>::offset_from(move _5, move _6) -> bb2; // scope 3 at ui/consts/offset.rs:88:5: 88:23
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:88:8: 88:19
                                         // + literal: Const { ty: unsafe fn(*const u32, *const u32) -> isize {ptr::const_ptr::<impl *const u32>::offset_from}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_6);                 // scope 3 at ui/consts/offset.rs:88:22: 88:23
        StorageDead(_5);                 // scope 3 at ui/consts/offset.rs:88:22: 88:23
        _0 = Eq(move _4, const 0_isize); // scope 3 at ui/consts/offset.rs:88:5: 88:28
        StorageDead(_4);                 // scope 3 at ui/consts/offset.rs:88:27: 88:28
        StorageDead(_3);                 // scope 2 at ui/consts/offset.rs:89:1: 89:2
        StorageDead(_1);                 // scope 1 at ui/consts/offset.rs:89:1: 89:2
        return;                          // scope 0 at ui/consts/offset.rs:85:1: 89:3
    }
}

const WRAP_NULL: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/offset.rs:90:18: 90:22
    let mut _2: *const u32;              // in scope 0 at ui/consts/offset.rs:91:14: 91:32
    let mut _4: isize;                   // in scope 0 at ui/consts/offset.rs:93:5: 93:23
    let mut _5: *const u32;              // in scope 0 at ui/consts/offset.rs:93:5: 93:7
    let mut _6: *const u32;              // in scope 0 at ui/consts/offset.rs:93:20: 93:22
    scope 1 {
        let _1: *const u32;              // in scope 1 at ui/consts/offset.rs:91:9: 91:11
        scope 2 {
            debug p1 => _1;              // in scope 2 at ui/consts/offset.rs:91:9: 91:11
            let _3: *const u32;          // in scope 2 at ui/consts/offset.rs:92:9: 92:11
            scope 3 {
                debug p2 => _3;          // in scope 3 at ui/consts/offset.rs:92:9: 92:11
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/offset.rs:91:9: 91:11
        StorageLive(_2);                 // scope 1 at ui/consts/offset.rs:91:14: 91:32
        ConstEvalCounter;                // scope 1 at ui/consts/offset.rs:91:14: 91:32
        _2 = null::<u32>() -> bb1;       // scope 1 at ui/consts/offset.rs:91:14: 91:32
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:91:14: 91:30
                                         // + literal: Const { ty: fn() -> *const u32 {null::<u32>}, val: Value(<ZST>) }
    }

    bb1: {
        ConstEvalCounter;                // scope 1 at ui/consts/offset.rs:91:14: 91:51
        _1 = ptr::const_ptr::<impl *const u32>::wrapping_offset(move _2, const 1_isize) -> bb2; // scope 1 at ui/consts/offset.rs:91:14: 91:51
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:91:33: 91:48
                                         // + literal: Const { ty: fn(*const u32, isize) -> *const u32 {ptr::const_ptr::<impl *const u32>::wrapping_offset}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_2);                 // scope 1 at ui/consts/offset.rs:91:50: 91:51
        StorageLive(_3);                 // scope 2 at ui/consts/offset.rs:92:9: 92:11
        _3 = const 4_usize as *const u32 (PointerFromExposedAddress); // scope 2 at ui/consts/offset.rs:92:14: 92:31
        StorageLive(_4);                 // scope 3 at ui/consts/offset.rs:93:5: 93:23
        StorageLive(_5);                 // scope 3 at ui/consts/offset.rs:93:5: 93:7
        _5 = _1;                         // scope 3 at ui/consts/offset.rs:93:5: 93:7
        StorageLive(_6);                 // scope 3 at ui/consts/offset.rs:93:20: 93:22
        _6 = _3;                         // scope 3 at ui/consts/offset.rs:93:20: 93:22
        ConstEvalCounter;                // scope 3 at ui/consts/offset.rs:93:5: 93:23
        _4 = ptr::const_ptr::<impl *const u32>::offset_from(move _5, move _6) -> bb3; // scope 3 at ui/consts/offset.rs:93:5: 93:23
                                         // mir::Constant
                                         // + span: ui/consts/offset.rs:93:8: 93:19
                                         // + literal: Const { ty: unsafe fn(*const u32, *const u32) -> isize {ptr::const_ptr::<impl *const u32>::offset_from}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_6);                 // scope 3 at ui/consts/offset.rs:93:22: 93:23
        StorageDead(_5);                 // scope 3 at ui/consts/offset.rs:93:22: 93:23
        _0 = Eq(move _4, const 0_isize); // scope 3 at ui/consts/offset.rs:93:5: 93:28
        StorageDead(_4);                 // scope 3 at ui/consts/offset.rs:93:27: 93:28
        StorageDead(_3);                 // scope 2 at ui/consts/offset.rs:94:1: 94:2
        StorageDead(_1);                 // scope 1 at ui/consts/offset.rs:94:1: 94:2
        return;                          // scope 0 at ui/consts/offset.rs:90:1: 94:3
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/offset.rs:96:11: 96:11

    bb0: {
        return;                          // scope 0 at ui/consts/offset.rs:112:2: 112:2
    }
}
