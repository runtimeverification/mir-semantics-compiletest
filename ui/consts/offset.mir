// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static S: Struct = {
    let mut _0: Struct;

    bb0: {
        _0 = Struct { a: const 0_u32, b: const 0_u32, c: const 0_u32 };
        return;
    }
}

static OFFSET_NO_CHANGE: bool = {
    let mut _0: bool;
    let _2: &u32;
    let _3: &Struct;
    let mut _5: *const u32;
    let mut _6: *const u32;
    let mut _7: isize;
    let mut _8: *const u32;
    let mut _9: *const u32;
    scope 1 {
        let _1: *const u32;
        scope 2 {
            debug p1 => _1;
            let _4: *const u32;
            scope 3 {
                debug p2 => _4;
            }
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const {alloc1: &Struct};
        _2 = &((*_3).1: u32);
        _1 = &raw const (*_2);
        StorageDead(_2);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _1;
        ConstEvalCounter;
        _5 = ptr::const_ptr::<impl *const u32>::offset(move _6, const 2_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        ConstEvalCounter;
        _4 = ptr::const_ptr::<impl *const u32>::offset(move _5, const -2_isize) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _1;
        StorageLive(_9);
        _9 = _4;
        ConstEvalCounter;
        _7 = ptr::const_ptr::<impl *const u32>::offset_from(move _8, move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        StorageDead(_8);
        _0 = Eq(move _7, const 0_isize);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_1);
        return;
    }
}

alloc1 (static: S, size: 12, align: 4) {
    00 00 00 00 00 00 00 00 00 00 00 00             │ ............
}

static OFFSET_MIDDLE: bool = {
    let mut _0: bool;
    let mut _2: *const u32;
    let _3: &u32;
    let _4: &Struct;
    let mut _6: *const u32;
    let _7: &u32;
    let _8: &Struct;
    let mut _9: isize;
    let mut _10: *const u32;
    let mut _11: *const u32;
    scope 1 {
        let _1: *const u32;
        scope 2 {
            debug p1 => _1;
            let _5: *const u32;
            scope 3 {
                debug p2 => _5;
            }
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = const {alloc1: &Struct};
        _3 = &((*_4).0: u32);
        _2 = &raw const (*_3);
        ConstEvalCounter;
        _1 = ptr::const_ptr::<impl *const u32>::offset(move _2, const 1_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = const {alloc1: &Struct};
        _7 = &((*_8).2: u32);
        _6 = &raw const (*_7);
        ConstEvalCounter;
        _5 = ptr::const_ptr::<impl *const u32>::offset(move _6, const -1_isize) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _1;
        StorageLive(_11);
        _11 = _5;
        ConstEvalCounter;
        _9 = ptr::const_ptr::<impl *const u32>::offset_from(move _10, move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        StorageDead(_10);
        _0 = Eq(move _9, const 0_isize);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_1);
        return;
    }
}

alloc1 (static: S, size: 12, align: 4) {
    00 00 00 00 00 00 00 00 00 00 00 00             │ ............
}

static OFFSET_END: bool = {
    let mut _0: bool;
    let mut _2: *const u32;
    let _3: &u32;
    let _4: &Struct;
    let mut _6: *const u32;
    let _7: &u32;
    let _8: &Struct;
    let mut _9: isize;
    let mut _10: *const u32;
    let mut _11: *const u32;
    scope 1 {
        let _1: *const u32;
        scope 2 {
            debug p1 => _1;
            let _5: *const u32;
            scope 3 {
                debug p2 => _5;
            }
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = const {alloc1: &Struct};
        _3 = &((*_4).0: u32);
        _2 = &raw const (*_3);
        ConstEvalCounter;
        _1 = ptr::const_ptr::<impl *const u32>::offset(move _2, const 3_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = const {alloc1: &Struct};
        _7 = &((*_8).2: u32);
        _6 = &raw const (*_7);
        ConstEvalCounter;
        _5 = ptr::const_ptr::<impl *const u32>::offset(move _6, const 1_isize) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _1;
        StorageLive(_11);
        _11 = _5;
        ConstEvalCounter;
        _9 = ptr::const_ptr::<impl *const u32>::offset_from(move _10, move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        StorageDead(_10);
        _0 = Eq(move _9, const 0_isize);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_1);
        return;
    }
}

alloc1 (static: S, size: 12, align: 4) {
    00 00 00 00 00 00 00 00 00 00 00 00             │ ............
}

static OFFSET_U8_PTR: bool = {
    let mut _0: bool;
    let mut _2: *const u8;
    let mut _3: *const u32;
    let _4: &u32;
    let _5: &Struct;
    let mut _7: *const u8;
    let mut _8: *const u32;
    let _9: &u32;
    let _10: &Struct;
    let mut _11: isize;
    let mut _12: *const u8;
    let mut _13: *const u8;
    scope 1 {
        let _1: *const u8;
        scope 2 {
            debug p1 => _1;
            let _6: *const u8;
            scope 3 {
                debug p2 => _6;
            }
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = const {alloc1: &Struct};
        _4 = &((*_5).0: u32);
        _3 = &raw const (*_4);
        _2 = move _3 as *const u8 (PtrToPtr);
        StorageDead(_3);
        ConstEvalCounter;
        _1 = ptr::const_ptr::<impl *const u8>::offset(move _2, const 5_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = const {alloc1: &Struct};
        _9 = &((*_10).2: u32);
        _8 = &raw const (*_9);
        _7 = move _8 as *const u8 (PtrToPtr);
        StorageDead(_8);
        ConstEvalCounter;
        _6 = ptr::const_ptr::<impl *const u8>::offset(move _7, const -3_isize) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _1;
        StorageLive(_13);
        _13 = _6;
        ConstEvalCounter;
        _11 = ptr::const_ptr::<impl *const u8>::offset_from(move _12, move _13) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_13);
        StorageDead(_12);
        _0 = Eq(move _11, const 0_isize);
        StorageDead(_11);
        StorageDead(_6);
        StorageDead(_1);
        return;
    }
}

alloc1 (static: S, size: 12, align: 4) {
    00 00 00 00 00 00 00 00 00 00 00 00             │ ............
}

const OFFSET_ZST: bool = {
    let mut _0: bool;
    let _2: &();
    let _3: ();
    let mut _5: *const ();
    let mut _6: *const ();
    let mut _8: *const ();
    let mut _9: *const ();
    let mut _10: isize;
    let mut _11: *const u8;
    let mut _12: *const u8;
    scope 1 {
        let _1: *const ();
        let mut _13: &();
        scope 2 {
            debug pz => _1;
            let _4: *const u8;
            scope 3 {
                debug p1 => _4;
                let _7: *const u8;
                scope 4 {
                    debug p2 => _7;
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _13 = const _;
        _2 = &(*_13);
        _1 = &raw const (*_2);
        StorageDead(_2);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _1;
        ConstEvalCounter;
        _5 = ptr::const_ptr::<impl *const ()>::offset(move _6, const 5_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = move _5 as *const u8 (PtrToPtr);
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _1;
        ConstEvalCounter;
        _8 = ptr::const_ptr::<impl *const ()>::offset(move _9, const _) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _7 = move _8 as *const u8 (PtrToPtr);
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _4;
        StorageLive(_12);
        _12 = _7;
        ConstEvalCounter;
        _10 = ptr::const_ptr::<impl *const u8>::offset_from(move _11, move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_12);
        StorageDead(_11);
        _0 = Eq(move _10, const 0_isize);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_1);
        return;
    }
}

promoted[0] in OFFSET_ZST: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

const OFFSET_ZERO: bool = {
    let mut _0: bool;
    let mut _2: &[u8];
    let mut _3: &[u8; 0];
    let _4: [u8; 0];
    let mut _5: isize;
    let mut _6: *const u8;
    let mut _7: *const u8;
    let mut _8: *const u8;
    scope 1 {
        let _1: *const u8;
        let mut _9: &[u8; 0];
        scope 2 {
            debug p => _1;
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _9 = const _;
        _3 = &(*_9);
        _2 = move _3 as &[u8] (Pointer(Unsize));
        StorageDead(_3);
        ConstEvalCounter;
        _1 = core::slice::<impl [u8]>::as_ptr(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _1;
        ConstEvalCounter;
        _6 = ptr::const_ptr::<impl *const u8>::offset(move _7, const 0_isize) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        StorageLive(_8);
        _8 = _1;
        ConstEvalCounter;
        _5 = ptr::const_ptr::<impl *const u8>::offset_from(move _6, move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_6);
        _0 = Eq(move _5, const 0_isize);
        StorageDead(_5);
        StorageDead(_1);
        return;
    }
}

promoted[0] in OFFSET_ZERO: &[u8; 0] = {
    let mut _0: &[u8; 0];
    let mut _1: [u8; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

OFFSET_ZERO::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

const OFFSET_ONE: bool = {
    let mut _0: bool;
    let _2: &u32;
    let _3: u32;
    let mut _4: isize;
    let mut _5: *const u32;
    let mut _6: *const u32;
    let mut _7: *const u32;
    scope 1 {
        let _1: *const u32;
        let mut _8: &u32;
        scope 2 {
            debug p => _1;
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _8 = const _;
        _2 = &(*_8);
        _1 = &raw const (*_2);
        StorageDead(_2);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _1;
        ConstEvalCounter;
        _5 = ptr::const_ptr::<impl *const u32>::offset(move _6, const 1_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        _7 = _1;
        ConstEvalCounter;
        _4 = ptr::const_ptr::<impl *const u32>::offset_from(move _5, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_5);
        _0 = Eq(move _4, const 1_isize);
        StorageDead(_4);
        StorageDead(_1);
        return;
    }
}

promoted[0] in OFFSET_ONE: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 42_u32;
        _0 = &_1;
        return;
    }
}

const OFFSET_DANGLING: bool = {
    let mut _0: bool;
    let mut _2: std::ptr::NonNull<u8>;
    let mut _3: isize;
    let mut _4: *mut u8;
    let mut _5: *mut u8;
    let mut _6: *const u8;
    let mut _7: *mut u8;
    scope 1 {
        let _1: *mut u8;
        scope 2 {
            debug p => _1;
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        ConstEvalCounter;
        _2 = NonNull::<u8>::dangling() -> [return: bb1, unwind continue];
    }

    bb1: {
        ConstEvalCounter;
        _1 = NonNull::<u8>::as_ptr(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _1;
        ConstEvalCounter;
        _4 = ptr::mut_ptr::<impl *mut u8>::offset(move _5, const 0_isize) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _1;
        _6 = move _7 as *const u8 (Pointer(MutToConstPointer));
        StorageDead(_7);
        ConstEvalCounter;
        _3 = ptr::mut_ptr::<impl *mut u8>::offset_from(move _4, move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_6);
        StorageDead(_4);
        _0 = Eq(move _3, const 0_isize);
        StorageDead(_3);
        StorageDead(_1);
        return;
    }
}

const OFFSET_UNALIGNED: bool = {
    let mut _0: bool;
    let mut _3: &[u8];
    let mut _4: &[u8; 32];
    let mut _6: *const u32;
    let mut _7: *const u8;
    let mut _8: *const u8;
    let mut _9: isize;
    let mut _10: *const u8;
    let mut _11: *const u32;
    let mut _12: *const u8;
    scope 1 {
        let _1: [u8; 32];
        scope 2 {
            debug arr => _1;
            let _2: *const u8;
            scope 3 {
                debug p1 => _2;
                let _5: *const u32;
                scope 4 {
                    debug p2 => _5;
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = [const 0_u8; 32];
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &_1;
        _3 = move _4 as &[u8] (Pointer(Unsize));
        StorageDead(_4);
        ConstEvalCounter;
        _2 = core::slice::<impl [u8]>::as_ptr(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _2;
        ConstEvalCounter;
        _7 = ptr::const_ptr::<impl *const u8>::offset(move _8, const 2_isize) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _6 = move _7 as *const u32 (PtrToPtr);
        StorageDead(_7);
        ConstEvalCounter;
        _5 = ptr::const_ptr::<impl *const u32>::offset(move _6, const 1_isize) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_6);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _5;
        _10 = move _11 as *const u8 (PtrToPtr);
        StorageDead(_11);
        StorageLive(_12);
        _12 = _2;
        ConstEvalCounter;
        _9 = ptr::const_ptr::<impl *const u8>::offset_from(move _10, move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_12);
        StorageDead(_10);
        _0 = Eq(move _9, const 6_isize);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

OFFSET_UNALIGNED::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 32_usize;
        return;
    }
}

const WRAP_OFFSET_NO_CHANGE: bool = {
    let mut _0: bool;
    let _2: &u32;
    let _3: u32;
    let mut _5: *const u32;
    let mut _6: *const u32;
    let mut _8: *const u32;
    let mut _9: *const u32;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: *const u32;
    let mut _13: *const u32;
    let mut _14: bool;
    let mut _15: isize;
    let mut _16: *const u32;
    let mut _17: *const u32;
    scope 1 {
        let _1: *const u32;
        let mut _18: &u32;
        scope 2 {
            debug p1 => _1;
            let _4: *const u32;
            scope 3 {
                debug p2 => _4;
                let _7: *const u32;
                scope 4 {
                    debug p3 => _7;
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _18 = const _;
        _2 = &(*_18);
        _1 = &raw const (*_2);
        StorageDead(_2);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _1;
        ConstEvalCounter;
        _5 = ptr::const_ptr::<impl *const u32>::wrapping_offset(move _6, const 1000_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        ConstEvalCounter;
        _4 = ptr::const_ptr::<impl *const u32>::wrapping_offset(move _5, const -1000_isize) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _1;
        ConstEvalCounter;
        _8 = ptr::const_ptr::<impl *const u32>::wrapping_offset(move _9, const -1000_isize) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        ConstEvalCounter;
        _7 = ptr::const_ptr::<impl *const u32>::wrapping_offset(move _8, const 1000_isize) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _1;
        StorageLive(_13);
        _13 = _4;
        ConstEvalCounter;
        _11 = ptr::const_ptr::<impl *const u32>::offset_from(move _12, move _13) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_13);
        StorageDead(_12);
        _10 = Eq(move _11, const 0_isize);
        StorageDead(_11);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _1;
        StorageLive(_17);
        _17 = _7;
        ConstEvalCounter;
        _15 = ptr::const_ptr::<impl *const u32>::offset_from(move _16, move _17) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_17);
        StorageDead(_16);
        _14 = Eq(move _15, const 0_isize);
        StorageDead(_15);
        _0 = BitAnd(move _10, move _14);
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_1);
        return;
    }
}

promoted[0] in WRAP_OFFSET_NO_CHANGE: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 42_u32;
        _0 = &_1;
        return;
    }
}

const WRAP_ADDRESS_SPACE: bool = {
    let mut _0: bool;
    let _2: &u8;
    let _3: u8;
    let mut _5: *const u8;
    let mut _6: *const u8;
    let mut _7: isize;
    let mut _8: *const u8;
    let mut _9: *const u8;
    scope 1 {
        let _1: *const u8;
        let mut _10: &u8;
        scope 2 {
            debug p1 => _1;
            let _4: *const u8;
            scope 3 {
                debug p2 => _4;
            }
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _10 = const _;
        _2 = &(*_10);
        _1 = &raw const (*_2);
        StorageDead(_2);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _1;
        ConstEvalCounter;
        _5 = ptr::const_ptr::<impl *const u8>::wrapping_offset(move _6, const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        ConstEvalCounter;
        _4 = ptr::const_ptr::<impl *const u8>::wrapping_offset(move _5, const _) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _1;
        StorageLive(_9);
        _9 = _4;
        ConstEvalCounter;
        _7 = ptr::const_ptr::<impl *const u8>::offset_from(move _8, move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        StorageDead(_8);
        _0 = Eq(move _7, const 0_isize);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_1);
        return;
    }
}

promoted[0] in WRAP_ADDRESS_SPACE: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 42_u8;
        _0 = &_1;
        return;
    }
}

const WRAP_SIZE_OF: bool = {
    let mut _0: bool;
    let _3: &u32;
    let _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _8: *const u32;
    let mut _10: *const u32;
    let mut _11: isize;
    let mut _12: *const u32;
    let mut _13: *const u32;
    scope 1 {
        let _1: [u32; 2];
        scope 2 {
            debug arr => _1;
            let _2: *const u32;
            scope 3 {
                debug p => _2;
                let _7: *const u32;
                scope 4 {
                    debug wrapped => _7;
                    let _9: *const u32;
                    scope 5 {
                        debug backward => _9;
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = [const 0_u32; 2];
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = const 1_usize;
        _5 = Len(_1);
        _6 = Lt(_4, _5);
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _4) -> [success: bb1, unwind continue];
    }

    bb1: {
        _3 = &_1[_4];
        _2 = &raw const (*_3);
        StorageDead(_3);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _2;
        ConstEvalCounter;
        _7 = ptr::const_ptr::<impl *const u32>::wrapping_offset(move _8, const _) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _2;
        ConstEvalCounter;
        _9 = ptr::const_ptr::<impl *const u32>::wrapping_offset(move _10, const -1_isize) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _7;
        StorageLive(_13);
        _13 = _9;
        ConstEvalCounter;
        _11 = ptr::const_ptr::<impl *const u32>::offset_from(move _12, move _13) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_13);
        StorageDead(_12);
        _0 = Eq(move _11, const 0_isize);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

WRAP_SIZE_OF::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

const WRAP_INTEGER_POINTER: bool = {
    let mut _0: bool;
    let mut _2: *const u32;
    let mut _4: isize;
    let mut _5: *const u32;
    let mut _6: *const u32;
    scope 1 {
        let _1: *const u32;
        scope 2 {
            debug p1 => _1;
            let _3: *const u32;
            scope 3 {
                debug p2 => _3;
            }
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const 66_usize as *const u32 (PointerFromExposedAddress);
        ConstEvalCounter;
        _1 = ptr::const_ptr::<impl *const u32>::wrapping_offset(move _2, const 4_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_2);
        StorageLive(_3);
        _3 = const 82_usize as *const u32 (PointerFromExposedAddress);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _1;
        StorageLive(_6);
        _6 = _3;
        ConstEvalCounter;
        _4 = ptr::const_ptr::<impl *const u32>::offset_from(move _5, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageDead(_5);
        _0 = Eq(move _4, const 0_isize);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_1);
        return;
    }
}

const WRAP_NULL: bool = {
    let mut _0: bool;
    let mut _2: *const u32;
    let mut _4: isize;
    let mut _5: *const u32;
    let mut _6: *const u32;
    scope 1 {
        let _1: *const u32;
        scope 2 {
            debug p1 => _1;
            let _3: *const u32;
            scope 3 {
                debug p2 => _3;
            }
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        ConstEvalCounter;
        _2 = null::<u32>() -> [return: bb1, unwind continue];
    }

    bb1: {
        ConstEvalCounter;
        _1 = ptr::const_ptr::<impl *const u32>::wrapping_offset(move _2, const 1_isize) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_2);
        StorageLive(_3);
        _3 = const 4_usize as *const u32 (PointerFromExposedAddress);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _1;
        StorageLive(_6);
        _6 = _3;
        ConstEvalCounter;
        _4 = ptr::const_ptr::<impl *const u32>::offset_from(move _5, move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_5);
        _0 = Eq(move _4, const 0_isize);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: &bool;
    let mut _4: !;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: &bool;
    let mut _8: !;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: &bool;
    let mut _12: !;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: &bool;
    let mut _16: !;
    let mut _17: bool;
    let mut _18: !;
    let mut _19: bool;
    let mut _20: !;
    let mut _21: bool;
    let mut _22: !;
    let mut _23: bool;
    let mut _24: !;
    let mut _25: bool;
    let mut _26: !;
    let mut _27: bool;
    let mut _28: !;
    let mut _29: bool;
    let mut _30: !;
    let mut _31: bool;
    let mut _32: !;
    let mut _33: bool;
    let mut _34: !;
    let mut _35: bool;
    let mut _36: !;

    bb0: {
        _3 = const {alloc2: &bool};
        _2 = (*_3);
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _4 = core::panicking::panic(const "assertion failed: OFFSET_NO_CHANGE") -> unwind continue;
    }

    bb2: {
        _7 = const {alloc3: &bool};
        _6 = (*_7);
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _8 = core::panicking::panic(const "assertion failed: OFFSET_MIDDLE") -> unwind continue;
    }

    bb4: {
        _11 = const {alloc4: &bool};
        _10 = (*_11);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _12 = core::panicking::panic(const "assertion failed: OFFSET_END") -> unwind continue;
    }

    bb6: {
        _15 = const {alloc5: &bool};
        _14 = (*_15);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _16 = core::panicking::panic(const "assertion failed: OFFSET_U8_PTR") -> unwind continue;
    }

    bb8: {
        _17 = Not(const _);
        switchInt(move _17) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _18 = core::panicking::panic(const "assertion failed: OFFSET_ZST") -> unwind continue;
    }

    bb10: {
        _19 = Not(const _);
        switchInt(move _19) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _20 = core::panicking::panic(const "assertion failed: OFFSET_ZERO") -> unwind continue;
    }

    bb12: {
        _21 = Not(const _);
        switchInt(move _21) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _22 = core::panicking::panic(const "assertion failed: OFFSET_ONE") -> unwind continue;
    }

    bb14: {
        _23 = Not(const _);
        switchInt(move _23) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _24 = core::panicking::panic(const "assertion failed: OFFSET_DANGLING") -> unwind continue;
    }

    bb16: {
        _25 = Not(const _);
        switchInt(move _25) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _26 = core::panicking::panic(const "assertion failed: OFFSET_UNALIGNED") -> unwind continue;
    }

    bb18: {
        _27 = Not(const _);
        switchInt(move _27) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _28 = core::panicking::panic(const "assertion failed: WRAP_OFFSET_NO_CHANGE") -> unwind continue;
    }

    bb20: {
        _29 = Not(const _);
        switchInt(move _29) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _30 = core::panicking::panic(const "assertion failed: WRAP_ADDRESS_SPACE") -> unwind continue;
    }

    bb22: {
        _31 = Not(const _);
        switchInt(move _31) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _32 = core::panicking::panic(const "assertion failed: WRAP_SIZE_OF") -> unwind continue;
    }

    bb24: {
        _33 = Not(const _);
        switchInt(move _33) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _34 = core::panicking::panic(const "assertion failed: WRAP_INTEGER_POINTER") -> unwind continue;
    }

    bb26: {
        _35 = Not(const _);
        switchInt(move _35) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _36 = core::panicking::panic(const "assertion failed: WRAP_NULL") -> unwind continue;
    }

    bb28: {
        return;
    }
}

alloc5 (static: OFFSET_U8_PTR, size: 1, align: 1) {
    01                                              │ .
}

alloc4 (static: OFFSET_END, size: 1, align: 1) {
    01                                              │ .
}

alloc3 (static: OFFSET_MIDDLE, size: 1, align: 1) {
    01                                              │ .
}

alloc2 (static: OFFSET_NO_CHANGE, size: 1, align: 1) {
    01                                              │ .
}
