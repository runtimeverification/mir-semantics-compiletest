// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn basics(_1: (f32,)) -> f32 {
    let _2: f32;                         // in scope 0 at ui/consts/const_let_eq_float.rs:11:18: 11:19
    let mut _4: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:14:9: 14:10
    let mut _6: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:17:18: 17:19
    let mut _7: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:20:22: 20:23
    let mut _8: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:21:9: 21:10
    let _10: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:30:9: 30:10
    let mut _11: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:31:9: 31:10
    let mut _12: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:31:13: 31:19
    let _13: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:31:17: 31:18
    let mut _16: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:39:9: 39:18
    let mut _17: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:39:9: 39:10
    let mut _18: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:39:13: 39:18
    let mut _19: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:39:21: 39:26
    let mut _21: Foo<f32>;               // in scope 0 at ui/consts/const_let_eq_float.rs:43:35: 43:43
    let _22: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:44:9: 44:10
    let mut _23: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:45:9: 45:10
    let mut _24: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:45:13: 45:21
    let _25: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:45:17: 45:18
    let mut _27: Bar<f32>;               // in scope 0 at ui/consts/const_let_eq_float.rs:46:35: 46:49
    let _28: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:47:9: 47:10
    let mut _29: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:48:9: 48:10
    let mut _30: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:48:13: 48:21
    let _31: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:48:17: 48:18
    let mut _33: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:52:38: 52:43
    let _34: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:53:13: 53:14
    let mut _35: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:54:9: 54:10
    let mut _36: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:54:13: 54:23
    let _37: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:54:21: 54:22
    let mut _39: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:55:43: 55:48
    let _40: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:56:11: 56:12
    let mut _41: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:57:9: 57:10
    let mut _42: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:57:13: 57:21
    let _43: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:57:19: 57:20
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq_float.rs:11:18: 11:19
        let _3: f32;                     // in scope 1 at ui/consts/const_let_eq_float.rs:13:9: 13:10
        scope 2 {
            debug b => _3;               // in scope 2 at ui/consts/const_let_eq_float.rs:13:9: 13:10
            let _5: f32;                 // in scope 2 at ui/consts/const_let_eq_float.rs:17:9: 17:10
            scope 3 {
                debug c => _5;           // in scope 3 at ui/consts/const_let_eq_float.rs:17:9: 17:10
                let mut _0: f32;         // return place in scope 3 at ui/consts/const_let_eq_float.rs:20:9: 20:14
                scope 4 {
                    debug d => _0;       // in scope 4 at ui/consts/const_let_eq_float.rs:20:9: 20:14
                    let mut _9: [f32; 1]; // in scope 4 at ui/consts/const_let_eq_float.rs:29:9: 29:16
                    scope 5 {
                        debug arr => _9; // in scope 5 at ui/consts/const_let_eq_float.rs:29:9: 29:16
                        let mut _14: Foo<f32>; // in scope 5 at ui/consts/const_let_eq_float.rs:35:9: 35:16
                        scope 6 {
                            debug foo => _14; // in scope 6 at ui/consts/const_let_eq_float.rs:35:9: 35:16
                            let mut _15: Bar<f32>; // in scope 6 at ui/consts/const_let_eq_float.rs:36:9: 36:16
                            scope 7 {
                                debug bar => _15; // in scope 7 at ui/consts/const_let_eq_float.rs:36:9: 36:16
                                let mut _20: [Foo<f32>; 1]; // in scope 7 at ui/consts/const_let_eq_float.rs:43:9: 43:16
                                scope 8 {
                                    debug arr => _20; // in scope 8 at ui/consts/const_let_eq_float.rs:43:9: 43:16
                                    let mut _26: [Bar<f32>; 1]; // in scope 8 at ui/consts/const_let_eq_float.rs:46:9: 46:16
                                    scope 9 {
                                        debug arr => _26; // in scope 9 at ui/consts/const_let_eq_float.rs:46:9: 46:16
                                        let mut _32: Foo<[f32; 1]>; // in scope 9 at ui/consts/const_let_eq_float.rs:52:9: 52:16
                                        scope 10 {
                                            debug arr => _32; // in scope 10 at ui/consts/const_let_eq_float.rs:52:9: 52:16
                                            let mut _38: Bar<[f32; 1]>; // in scope 10 at ui/consts/const_let_eq_float.rs:55:9: 55:16
                                            scope 11 {
                                                debug arr => _38; // in scope 11 at ui/consts/const_let_eq_float.rs:55:9: 55:16
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = (_1.0: f32);                // scope 0 at ui/consts/const_let_eq_float.rs:11:18: 11:19
        _4 = _2;                         // scope 2 at ui/consts/const_let_eq_float.rs:14:9: 14:10
        _3 = Add(move _4, const 1f32);   // scope 2 at ui/consts/const_let_eq_float.rs:14:5: 14:16
        _6 = _3;                         // scope 2 at ui/consts/const_let_eq_float.rs:17:18: 17:19
        _5 = Add(move _6, const 1f32);   // scope 2 at ui/consts/const_let_eq_float.rs:17:18: 17:25
        _7 = _5;                         // scope 3 at ui/consts/const_let_eq_float.rs:20:22: 20:23
        _0 = Add(move _7, const 1f32);   // scope 3 at ui/consts/const_let_eq_float.rs:20:22: 20:29
        _8 = _0;                         // scope 4 at ui/consts/const_let_eq_float.rs:21:9: 21:10
        _0 = Add(move _8, const 1f32);   // scope 4 at ui/consts/const_let_eq_float.rs:21:5: 21:16
        _9 = [const 0f32];               // scope 4 at ui/consts/const_let_eq_float.rs:29:29: 29:34
        _10 = const 0_usize;             // scope 5 at ui/consts/const_let_eq_float.rs:30:9: 30:10
        _9[_10] = const 1f32;            // scope 5 at ui/consts/const_let_eq_float.rs:30:5: 30:17
        _11 = _0;                        // scope 5 at ui/consts/const_let_eq_float.rs:31:9: 31:10
        _13 = const 0_usize;             // scope 5 at ui/consts/const_let_eq_float.rs:31:17: 31:18
        _12 = _9[_13];                   // scope 5 at ui/consts/const_let_eq_float.rs:31:13: 31:19
        _0 = Add(move _11, move _12);    // scope 5 at ui/consts/const_let_eq_float.rs:31:5: 31:19
        _14 = const Foo::<f32>(0f32);    // scope 5 at ui/consts/const_let_eq_float.rs:35:29: 35:37
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:35:29: 35:37
                                         // + literal: Const { ty: Foo<f32>, val: Value(Scalar(0x00000000)) }
        _15 = const Bar::<f32> {{ x: 0f32 }}; // scope 6 at ui/consts/const_let_eq_float.rs:36:29: 36:43
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:36:29: 36:43
                                         // + literal: Const { ty: Bar<f32>, val: Value(Scalar(0x00000000)) }
        (_14.0: f32) = const 1f32;       // scope 7 at ui/consts/const_let_eq_float.rs:37:5: 37:16
        (_15.0: f32) = const 1f32;       // scope 7 at ui/consts/const_let_eq_float.rs:38:5: 38:16
        _17 = _0;                        // scope 7 at ui/consts/const_let_eq_float.rs:39:9: 39:10
        _18 = const 1f32;                // scope 7 at ui/consts/const_let_eq_float.rs:39:13: 39:18
        _16 = Add(move _17, move _18);   // scope 7 at ui/consts/const_let_eq_float.rs:39:9: 39:18
        _19 = const 1f32;                // scope 7 at ui/consts/const_let_eq_float.rs:39:21: 39:26
        _0 = Add(move _16, move _19);    // scope 7 at ui/consts/const_let_eq_float.rs:39:5: 39:26
        _21 = const Foo::<f32>(0f32);    // scope 7 at ui/consts/const_let_eq_float.rs:43:35: 43:43
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:43:35: 43:43
                                         // + literal: Const { ty: Foo<f32>, val: Value(Scalar(0x00000000)) }
        _20 = [move _21];                // scope 7 at ui/consts/const_let_eq_float.rs:43:34: 43:44
        _22 = const 0_usize;             // scope 8 at ui/consts/const_let_eq_float.rs:44:9: 44:10
        (_20[_22].0: f32) = const 1f32;  // scope 8 at ui/consts/const_let_eq_float.rs:44:5: 44:19
        _23 = _0;                        // scope 8 at ui/consts/const_let_eq_float.rs:45:9: 45:10
        _25 = const 0_usize;             // scope 8 at ui/consts/const_let_eq_float.rs:45:17: 45:18
        _24 = (_20[_25].0: f32);         // scope 8 at ui/consts/const_let_eq_float.rs:45:13: 45:21
        _0 = Add(move _23, move _24);    // scope 8 at ui/consts/const_let_eq_float.rs:45:5: 45:21
        _27 = const Bar::<f32> {{ x: 0f32 }}; // scope 8 at ui/consts/const_let_eq_float.rs:46:35: 46:49
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:46:35: 46:49
                                         // + literal: Const { ty: Bar<f32>, val: Value(Scalar(0x00000000)) }
        _26 = [move _27];                // scope 8 at ui/consts/const_let_eq_float.rs:46:34: 46:50
        _28 = const 0_usize;             // scope 9 at ui/consts/const_let_eq_float.rs:47:9: 47:10
        (_26[_28].0: f32) = const 1f32;  // scope 9 at ui/consts/const_let_eq_float.rs:47:5: 47:19
        _29 = _0;                        // scope 9 at ui/consts/const_let_eq_float.rs:48:9: 48:10
        _31 = const 0_usize;             // scope 9 at ui/consts/const_let_eq_float.rs:48:17: 48:18
        _30 = (_26[_31].0: f32);         // scope 9 at ui/consts/const_let_eq_float.rs:48:13: 48:21
        _0 = Add(move _29, move _30);    // scope 9 at ui/consts/const_let_eq_float.rs:48:5: 48:21
        _33 = [const 0f32];              // scope 9 at ui/consts/const_let_eq_float.rs:52:38: 52:43
        _32 = Foo::<[f32; 1]>(move _33); // scope 9 at ui/consts/const_let_eq_float.rs:52:34: 52:44
        _34 = const 0_usize;             // scope 10 at ui/consts/const_let_eq_float.rs:53:13: 53:14
        (_32.0: [f32; 1])[_34] = const 1f32; // scope 10 at ui/consts/const_let_eq_float.rs:53:5: 53:21
        _35 = _0;                        // scope 10 at ui/consts/const_let_eq_float.rs:54:9: 54:10
        _37 = const 0_usize;             // scope 10 at ui/consts/const_let_eq_float.rs:54:21: 54:22
        _36 = (_32.0: [f32; 1])[_37];    // scope 10 at ui/consts/const_let_eq_float.rs:54:13: 54:23
        _0 = Add(move _35, move _36);    // scope 10 at ui/consts/const_let_eq_float.rs:54:5: 54:23
        _39 = [const 0f32];              // scope 10 at ui/consts/const_let_eq_float.rs:55:43: 55:48
        _38 = Bar::<[f32; 1]> { x: move _39 }; // scope 10 at ui/consts/const_let_eq_float.rs:55:34: 55:50
        _40 = const 0_usize;             // scope 11 at ui/consts/const_let_eq_float.rs:56:11: 56:12
        (_38.0: [f32; 1])[_40] = const 1f32; // scope 11 at ui/consts/const_let_eq_float.rs:56:5: 56:19
        _41 = _0;                        // scope 11 at ui/consts/const_let_eq_float.rs:57:9: 57:10
        _43 = const 0_usize;             // scope 11 at ui/consts/const_let_eq_float.rs:57:19: 57:20
        _42 = (_38.0: [f32; 1])[_43];    // scope 11 at ui/consts/const_let_eq_float.rs:57:13: 57:21
        _0 = Add(move _41, move _42);    // scope 11 at ui/consts/const_let_eq_float.rs:57:5: 57:21
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:61:2: 61:2
    }
}

// MIR FOR CTFE
fn basics(_1: (f32,)) -> f32 {
    let mut _0: f32;                     // return place in scope 0 at ui/consts/const_let_eq_float.rs:11:34: 11:37
    let _2: f32;                         // in scope 0 at ui/consts/const_let_eq_float.rs:11:18: 11:19
    let mut _4: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:14:9: 14:10
    let mut _6: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:17:18: 17:19
    let mut _8: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:20:22: 20:23
    let mut _9: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:21:9: 21:10
    let _10: i32;                        // in scope 0 at ui/consts/const_let_eq_float.rs:26:5: 26:6
    let _12: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:30:9: 30:10
    let mut _13: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:30:5: 30:11
    let mut _14: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:30:5: 30:11
    let mut _15: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:31:9: 31:10
    let mut _16: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:31:13: 31:19
    let _17: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:31:17: 31:18
    let mut _18: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:31:13: 31:19
    let mut _19: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:31:13: 31:19
    let mut _22: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:39:9: 39:18
    let mut _23: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:39:9: 39:10
    let mut _24: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:39:13: 39:18
    let mut _25: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:39:21: 39:26
    let mut _27: Foo<f32>;               // in scope 0 at ui/consts/const_let_eq_float.rs:43:35: 43:43
    let _28: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:44:9: 44:10
    let mut _29: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:44:5: 44:11
    let mut _30: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:44:5: 44:11
    let mut _31: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:45:9: 45:10
    let mut _32: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:45:13: 45:21
    let _33: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:45:17: 45:18
    let mut _34: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:45:13: 45:19
    let mut _35: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:45:13: 45:19
    let mut _37: Bar<f32>;               // in scope 0 at ui/consts/const_let_eq_float.rs:46:35: 46:49
    let _38: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:47:9: 47:10
    let mut _39: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:47:5: 47:11
    let mut _40: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:47:5: 47:11
    let mut _41: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:48:9: 48:10
    let mut _42: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:48:13: 48:21
    let _43: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:48:17: 48:18
    let mut _44: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:48:13: 48:19
    let mut _45: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:48:13: 48:19
    let mut _47: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:52:38: 52:43
    let _48: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:53:13: 53:14
    let mut _49: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:53:5: 53:15
    let mut _50: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:53:5: 53:15
    let mut _51: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:54:9: 54:10
    let mut _52: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:54:13: 54:23
    let _53: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:54:21: 54:22
    let mut _54: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:54:13: 54:23
    let mut _55: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:54:13: 54:23
    let mut _57: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:55:43: 55:48
    let _58: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:56:11: 56:12
    let mut _59: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:56:5: 56:13
    let mut _60: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:56:5: 56:13
    let mut _61: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:57:9: 57:10
    let mut _62: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:57:13: 57:21
    let _63: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:57:19: 57:20
    let mut _64: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:57:13: 57:21
    let mut _65: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:57:13: 57:21
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq_float.rs:11:18: 11:19
        let _3: f32;                     // in scope 1 at ui/consts/const_let_eq_float.rs:13:9: 13:10
        scope 2 {
            debug b => _3;               // in scope 2 at ui/consts/const_let_eq_float.rs:13:9: 13:10
            let _5: f32;                 // in scope 2 at ui/consts/const_let_eq_float.rs:17:9: 17:10
            scope 3 {
                debug c => _5;           // in scope 3 at ui/consts/const_let_eq_float.rs:17:9: 17:10
                let mut _7: f32;         // in scope 3 at ui/consts/const_let_eq_float.rs:20:9: 20:14
                scope 4 {
                    debug d => _7;       // in scope 4 at ui/consts/const_let_eq_float.rs:20:9: 20:14
                    let mut _11: [f32; 1]; // in scope 4 at ui/consts/const_let_eq_float.rs:29:9: 29:16
                    scope 5 {
                        debug arr => _11; // in scope 5 at ui/consts/const_let_eq_float.rs:29:9: 29:16
                        let mut _20: Foo<f32>; // in scope 5 at ui/consts/const_let_eq_float.rs:35:9: 35:16
                        scope 6 {
                            debug foo => _20; // in scope 6 at ui/consts/const_let_eq_float.rs:35:9: 35:16
                            let mut _21: Bar<f32>; // in scope 6 at ui/consts/const_let_eq_float.rs:36:9: 36:16
                            scope 7 {
                                debug bar => _21; // in scope 7 at ui/consts/const_let_eq_float.rs:36:9: 36:16
                                let mut _26: [Foo<f32>; 1]; // in scope 7 at ui/consts/const_let_eq_float.rs:43:9: 43:16
                                scope 8 {
                                    debug arr => _26; // in scope 8 at ui/consts/const_let_eq_float.rs:43:9: 43:16
                                    let mut _36: [Bar<f32>; 1]; // in scope 8 at ui/consts/const_let_eq_float.rs:46:9: 46:16
                                    scope 9 {
                                        debug arr => _36; // in scope 9 at ui/consts/const_let_eq_float.rs:46:9: 46:16
                                        let mut _46: Foo<[f32; 1]>; // in scope 9 at ui/consts/const_let_eq_float.rs:52:9: 52:16
                                        scope 10 {
                                            debug arr => _46; // in scope 10 at ui/consts/const_let_eq_float.rs:52:9: 52:16
                                            let mut _56: Bar<[f32; 1]>; // in scope 10 at ui/consts/const_let_eq_float.rs:55:9: 55:16
                                            scope 11 {
                                                debug arr => _56; // in scope 11 at ui/consts/const_let_eq_float.rs:55:9: 55:16
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const_let_eq_float.rs:11:18: 11:19
        _2 = (_1.0: f32);                // scope 0 at ui/consts/const_let_eq_float.rs:11:18: 11:19
        StorageLive(_3);                 // scope 1 at ui/consts/const_let_eq_float.rs:13:9: 13:10
        StorageLive(_4);                 // scope 2 at ui/consts/const_let_eq_float.rs:14:9: 14:10
        _4 = _2;                         // scope 2 at ui/consts/const_let_eq_float.rs:14:9: 14:10
        _3 = Add(move _4, const 1f32);   // scope 2 at ui/consts/const_let_eq_float.rs:14:5: 14:16
        StorageDead(_4);                 // scope 2 at ui/consts/const_let_eq_float.rs:14:15: 14:16
        StorageLive(_5);                 // scope 2 at ui/consts/const_let_eq_float.rs:17:9: 17:10
        StorageLive(_6);                 // scope 2 at ui/consts/const_let_eq_float.rs:17:18: 17:19
        _6 = _3;                         // scope 2 at ui/consts/const_let_eq_float.rs:17:18: 17:19
        _5 = Add(move _6, const 1f32);   // scope 2 at ui/consts/const_let_eq_float.rs:17:18: 17:25
        StorageDead(_6);                 // scope 2 at ui/consts/const_let_eq_float.rs:17:24: 17:25
        StorageLive(_7);                 // scope 3 at ui/consts/const_let_eq_float.rs:20:9: 20:14
        StorageLive(_8);                 // scope 3 at ui/consts/const_let_eq_float.rs:20:22: 20:23
        _8 = _5;                         // scope 3 at ui/consts/const_let_eq_float.rs:20:22: 20:23
        _7 = Add(move _8, const 1f32);   // scope 3 at ui/consts/const_let_eq_float.rs:20:22: 20:29
        StorageDead(_8);                 // scope 3 at ui/consts/const_let_eq_float.rs:20:28: 20:29
        StorageLive(_9);                 // scope 4 at ui/consts/const_let_eq_float.rs:21:9: 21:10
        _9 = _7;                         // scope 4 at ui/consts/const_let_eq_float.rs:21:9: 21:10
        _7 = Add(move _9, const 1f32);   // scope 4 at ui/consts/const_let_eq_float.rs:21:5: 21:16
        StorageDead(_9);                 // scope 4 at ui/consts/const_let_eq_float.rs:21:15: 21:16
        StorageLive(_10);                // scope 4 at ui/consts/const_let_eq_float.rs:26:5: 26:6
        _10 = const 1_i32;               // scope 4 at ui/consts/const_let_eq_float.rs:26:5: 26:6
        StorageDead(_10);                // scope 4 at ui/consts/const_let_eq_float.rs:26:6: 26:7
        StorageLive(_11);                // scope 4 at ui/consts/const_let_eq_float.rs:29:9: 29:16
        _11 = [const 0f32];              // scope 4 at ui/consts/const_let_eq_float.rs:29:29: 29:34
        StorageLive(_12);                // scope 5 at ui/consts/const_let_eq_float.rs:30:9: 30:10
        _12 = const 0_usize;             // scope 5 at ui/consts/const_let_eq_float.rs:30:9: 30:10
        _13 = Len(_11);                  // scope 5 at ui/consts/const_let_eq_float.rs:30:5: 30:11
        _14 = Lt(_12, _13);              // scope 5 at ui/consts/const_let_eq_float.rs:30:5: 30:11
        assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _12) -> bb1; // scope 5 at ui/consts/const_let_eq_float.rs:30:5: 30:11
    }

    bb1: {
        _11[_12] = const 1f32;           // scope 5 at ui/consts/const_let_eq_float.rs:30:5: 30:17
        StorageDead(_12);                // scope 5 at ui/consts/const_let_eq_float.rs:30:17: 30:18
        StorageLive(_15);                // scope 5 at ui/consts/const_let_eq_float.rs:31:9: 31:10
        _15 = _7;                        // scope 5 at ui/consts/const_let_eq_float.rs:31:9: 31:10
        StorageLive(_16);                // scope 5 at ui/consts/const_let_eq_float.rs:31:13: 31:19
        StorageLive(_17);                // scope 5 at ui/consts/const_let_eq_float.rs:31:17: 31:18
        _17 = const 0_usize;             // scope 5 at ui/consts/const_let_eq_float.rs:31:17: 31:18
        _18 = Len(_11);                  // scope 5 at ui/consts/const_let_eq_float.rs:31:13: 31:19
        _19 = Lt(_17, _18);              // scope 5 at ui/consts/const_let_eq_float.rs:31:13: 31:19
        assert(move _19, "index out of bounds: the length is {} but the index is {}", move _18, _17) -> bb2; // scope 5 at ui/consts/const_let_eq_float.rs:31:13: 31:19
    }

    bb2: {
        _16 = _11[_17];                  // scope 5 at ui/consts/const_let_eq_float.rs:31:13: 31:19
        _7 = Add(move _15, move _16);    // scope 5 at ui/consts/const_let_eq_float.rs:31:5: 31:19
        StorageDead(_16);                // scope 5 at ui/consts/const_let_eq_float.rs:31:18: 31:19
        StorageDead(_15);                // scope 5 at ui/consts/const_let_eq_float.rs:31:18: 31:19
        StorageDead(_17);                // scope 5 at ui/consts/const_let_eq_float.rs:31:19: 31:20
        StorageLive(_20);                // scope 5 at ui/consts/const_let_eq_float.rs:35:9: 35:16
        _20 = Foo::<f32>(const 0f32);    // scope 5 at ui/consts/const_let_eq_float.rs:35:29: 35:37
        StorageLive(_21);                // scope 6 at ui/consts/const_let_eq_float.rs:36:9: 36:16
        _21 = Bar::<f32> { x: const 0f32 }; // scope 6 at ui/consts/const_let_eq_float.rs:36:29: 36:43
        (_20.0: f32) = const 1f32;       // scope 7 at ui/consts/const_let_eq_float.rs:37:5: 37:16
        (_21.0: f32) = const 1f32;       // scope 7 at ui/consts/const_let_eq_float.rs:38:5: 38:16
        StorageLive(_22);                // scope 7 at ui/consts/const_let_eq_float.rs:39:9: 39:18
        StorageLive(_23);                // scope 7 at ui/consts/const_let_eq_float.rs:39:9: 39:10
        _23 = _7;                        // scope 7 at ui/consts/const_let_eq_float.rs:39:9: 39:10
        StorageLive(_24);                // scope 7 at ui/consts/const_let_eq_float.rs:39:13: 39:18
        _24 = (_20.0: f32);              // scope 7 at ui/consts/const_let_eq_float.rs:39:13: 39:18
        _22 = Add(move _23, move _24);   // scope 7 at ui/consts/const_let_eq_float.rs:39:9: 39:18
        StorageDead(_24);                // scope 7 at ui/consts/const_let_eq_float.rs:39:17: 39:18
        StorageDead(_23);                // scope 7 at ui/consts/const_let_eq_float.rs:39:17: 39:18
        StorageLive(_25);                // scope 7 at ui/consts/const_let_eq_float.rs:39:21: 39:26
        _25 = (_21.0: f32);              // scope 7 at ui/consts/const_let_eq_float.rs:39:21: 39:26
        _7 = Add(move _22, move _25);    // scope 7 at ui/consts/const_let_eq_float.rs:39:5: 39:26
        StorageDead(_25);                // scope 7 at ui/consts/const_let_eq_float.rs:39:25: 39:26
        StorageDead(_22);                // scope 7 at ui/consts/const_let_eq_float.rs:39:25: 39:26
        StorageLive(_26);                // scope 7 at ui/consts/const_let_eq_float.rs:43:9: 43:16
        StorageLive(_27);                // scope 7 at ui/consts/const_let_eq_float.rs:43:35: 43:43
        _27 = Foo::<f32>(const 0f32);    // scope 7 at ui/consts/const_let_eq_float.rs:43:35: 43:43
        _26 = [move _27];                // scope 7 at ui/consts/const_let_eq_float.rs:43:34: 43:44
        StorageDead(_27);                // scope 7 at ui/consts/const_let_eq_float.rs:43:43: 43:44
        StorageLive(_28);                // scope 8 at ui/consts/const_let_eq_float.rs:44:9: 44:10
        _28 = const 0_usize;             // scope 8 at ui/consts/const_let_eq_float.rs:44:9: 44:10
        _29 = Len(_26);                  // scope 8 at ui/consts/const_let_eq_float.rs:44:5: 44:11
        _30 = Lt(_28, _29);              // scope 8 at ui/consts/const_let_eq_float.rs:44:5: 44:11
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> bb3; // scope 8 at ui/consts/const_let_eq_float.rs:44:5: 44:11
    }

    bb3: {
        (_26[_28].0: f32) = const 1f32;  // scope 8 at ui/consts/const_let_eq_float.rs:44:5: 44:19
        StorageDead(_28);                // scope 8 at ui/consts/const_let_eq_float.rs:44:19: 44:20
        StorageLive(_31);                // scope 8 at ui/consts/const_let_eq_float.rs:45:9: 45:10
        _31 = _7;                        // scope 8 at ui/consts/const_let_eq_float.rs:45:9: 45:10
        StorageLive(_32);                // scope 8 at ui/consts/const_let_eq_float.rs:45:13: 45:21
        StorageLive(_33);                // scope 8 at ui/consts/const_let_eq_float.rs:45:17: 45:18
        _33 = const 0_usize;             // scope 8 at ui/consts/const_let_eq_float.rs:45:17: 45:18
        _34 = Len(_26);                  // scope 8 at ui/consts/const_let_eq_float.rs:45:13: 45:19
        _35 = Lt(_33, _34);              // scope 8 at ui/consts/const_let_eq_float.rs:45:13: 45:19
        assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _33) -> bb4; // scope 8 at ui/consts/const_let_eq_float.rs:45:13: 45:19
    }

    bb4: {
        _32 = (_26[_33].0: f32);         // scope 8 at ui/consts/const_let_eq_float.rs:45:13: 45:21
        _7 = Add(move _31, move _32);    // scope 8 at ui/consts/const_let_eq_float.rs:45:5: 45:21
        StorageDead(_32);                // scope 8 at ui/consts/const_let_eq_float.rs:45:20: 45:21
        StorageDead(_31);                // scope 8 at ui/consts/const_let_eq_float.rs:45:20: 45:21
        StorageDead(_33);                // scope 8 at ui/consts/const_let_eq_float.rs:45:21: 45:22
        StorageLive(_36);                // scope 8 at ui/consts/const_let_eq_float.rs:46:9: 46:16
        StorageLive(_37);                // scope 8 at ui/consts/const_let_eq_float.rs:46:35: 46:49
        _37 = Bar::<f32> { x: const 0f32 }; // scope 8 at ui/consts/const_let_eq_float.rs:46:35: 46:49
        _36 = [move _37];                // scope 8 at ui/consts/const_let_eq_float.rs:46:34: 46:50
        StorageDead(_37);                // scope 8 at ui/consts/const_let_eq_float.rs:46:49: 46:50
        StorageLive(_38);                // scope 9 at ui/consts/const_let_eq_float.rs:47:9: 47:10
        _38 = const 0_usize;             // scope 9 at ui/consts/const_let_eq_float.rs:47:9: 47:10
        _39 = Len(_36);                  // scope 9 at ui/consts/const_let_eq_float.rs:47:5: 47:11
        _40 = Lt(_38, _39);              // scope 9 at ui/consts/const_let_eq_float.rs:47:5: 47:11
        assert(move _40, "index out of bounds: the length is {} but the index is {}", move _39, _38) -> bb5; // scope 9 at ui/consts/const_let_eq_float.rs:47:5: 47:11
    }

    bb5: {
        (_36[_38].0: f32) = const 1f32;  // scope 9 at ui/consts/const_let_eq_float.rs:47:5: 47:19
        StorageDead(_38);                // scope 9 at ui/consts/const_let_eq_float.rs:47:19: 47:20
        StorageLive(_41);                // scope 9 at ui/consts/const_let_eq_float.rs:48:9: 48:10
        _41 = _7;                        // scope 9 at ui/consts/const_let_eq_float.rs:48:9: 48:10
        StorageLive(_42);                // scope 9 at ui/consts/const_let_eq_float.rs:48:13: 48:21
        StorageLive(_43);                // scope 9 at ui/consts/const_let_eq_float.rs:48:17: 48:18
        _43 = const 0_usize;             // scope 9 at ui/consts/const_let_eq_float.rs:48:17: 48:18
        _44 = Len(_36);                  // scope 9 at ui/consts/const_let_eq_float.rs:48:13: 48:19
        _45 = Lt(_43, _44);              // scope 9 at ui/consts/const_let_eq_float.rs:48:13: 48:19
        assert(move _45, "index out of bounds: the length is {} but the index is {}", move _44, _43) -> bb6; // scope 9 at ui/consts/const_let_eq_float.rs:48:13: 48:19
    }

    bb6: {
        _42 = (_36[_43].0: f32);         // scope 9 at ui/consts/const_let_eq_float.rs:48:13: 48:21
        _7 = Add(move _41, move _42);    // scope 9 at ui/consts/const_let_eq_float.rs:48:5: 48:21
        StorageDead(_42);                // scope 9 at ui/consts/const_let_eq_float.rs:48:20: 48:21
        StorageDead(_41);                // scope 9 at ui/consts/const_let_eq_float.rs:48:20: 48:21
        StorageDead(_43);                // scope 9 at ui/consts/const_let_eq_float.rs:48:21: 48:22
        StorageLive(_46);                // scope 9 at ui/consts/const_let_eq_float.rs:52:9: 52:16
        StorageLive(_47);                // scope 9 at ui/consts/const_let_eq_float.rs:52:38: 52:43
        _47 = [const 0f32];              // scope 9 at ui/consts/const_let_eq_float.rs:52:38: 52:43
        _46 = Foo::<[f32; 1]>(move _47); // scope 9 at ui/consts/const_let_eq_float.rs:52:34: 52:44
        StorageDead(_47);                // scope 9 at ui/consts/const_let_eq_float.rs:52:43: 52:44
        StorageLive(_48);                // scope 10 at ui/consts/const_let_eq_float.rs:53:13: 53:14
        _48 = const 0_usize;             // scope 10 at ui/consts/const_let_eq_float.rs:53:13: 53:14
        _49 = Len((_46.0: [f32; 1]));    // scope 10 at ui/consts/const_let_eq_float.rs:53:5: 53:15
        _50 = Lt(_48, _49);              // scope 10 at ui/consts/const_let_eq_float.rs:53:5: 53:15
        assert(move _50, "index out of bounds: the length is {} but the index is {}", move _49, _48) -> bb7; // scope 10 at ui/consts/const_let_eq_float.rs:53:5: 53:15
    }

    bb7: {
        (_46.0: [f32; 1])[_48] = const 1f32; // scope 10 at ui/consts/const_let_eq_float.rs:53:5: 53:21
        StorageDead(_48);                // scope 10 at ui/consts/const_let_eq_float.rs:53:21: 53:22
        StorageLive(_51);                // scope 10 at ui/consts/const_let_eq_float.rs:54:9: 54:10
        _51 = _7;                        // scope 10 at ui/consts/const_let_eq_float.rs:54:9: 54:10
        StorageLive(_52);                // scope 10 at ui/consts/const_let_eq_float.rs:54:13: 54:23
        StorageLive(_53);                // scope 10 at ui/consts/const_let_eq_float.rs:54:21: 54:22
        _53 = const 0_usize;             // scope 10 at ui/consts/const_let_eq_float.rs:54:21: 54:22
        _54 = Len((_46.0: [f32; 1]));    // scope 10 at ui/consts/const_let_eq_float.rs:54:13: 54:23
        _55 = Lt(_53, _54);              // scope 10 at ui/consts/const_let_eq_float.rs:54:13: 54:23
        assert(move _55, "index out of bounds: the length is {} but the index is {}", move _54, _53) -> bb8; // scope 10 at ui/consts/const_let_eq_float.rs:54:13: 54:23
    }

    bb8: {
        _52 = (_46.0: [f32; 1])[_53];    // scope 10 at ui/consts/const_let_eq_float.rs:54:13: 54:23
        _7 = Add(move _51, move _52);    // scope 10 at ui/consts/const_let_eq_float.rs:54:5: 54:23
        StorageDead(_52);                // scope 10 at ui/consts/const_let_eq_float.rs:54:22: 54:23
        StorageDead(_51);                // scope 10 at ui/consts/const_let_eq_float.rs:54:22: 54:23
        StorageDead(_53);                // scope 10 at ui/consts/const_let_eq_float.rs:54:23: 54:24
        StorageLive(_56);                // scope 10 at ui/consts/const_let_eq_float.rs:55:9: 55:16
        StorageLive(_57);                // scope 10 at ui/consts/const_let_eq_float.rs:55:43: 55:48
        _57 = [const 0f32];              // scope 10 at ui/consts/const_let_eq_float.rs:55:43: 55:48
        _56 = Bar::<[f32; 1]> { x: move _57 }; // scope 10 at ui/consts/const_let_eq_float.rs:55:34: 55:50
        StorageDead(_57);                // scope 10 at ui/consts/const_let_eq_float.rs:55:49: 55:50
        StorageLive(_58);                // scope 11 at ui/consts/const_let_eq_float.rs:56:11: 56:12
        _58 = const 0_usize;             // scope 11 at ui/consts/const_let_eq_float.rs:56:11: 56:12
        _59 = Len((_56.0: [f32; 1]));    // scope 11 at ui/consts/const_let_eq_float.rs:56:5: 56:13
        _60 = Lt(_58, _59);              // scope 11 at ui/consts/const_let_eq_float.rs:56:5: 56:13
        assert(move _60, "index out of bounds: the length is {} but the index is {}", move _59, _58) -> bb9; // scope 11 at ui/consts/const_let_eq_float.rs:56:5: 56:13
    }

    bb9: {
        (_56.0: [f32; 1])[_58] = const 1f32; // scope 11 at ui/consts/const_let_eq_float.rs:56:5: 56:19
        StorageDead(_58);                // scope 11 at ui/consts/const_let_eq_float.rs:56:19: 56:20
        StorageLive(_61);                // scope 11 at ui/consts/const_let_eq_float.rs:57:9: 57:10
        _61 = _7;                        // scope 11 at ui/consts/const_let_eq_float.rs:57:9: 57:10
        StorageLive(_62);                // scope 11 at ui/consts/const_let_eq_float.rs:57:13: 57:21
        StorageLive(_63);                // scope 11 at ui/consts/const_let_eq_float.rs:57:19: 57:20
        _63 = const 0_usize;             // scope 11 at ui/consts/const_let_eq_float.rs:57:19: 57:20
        _64 = Len((_56.0: [f32; 1]));    // scope 11 at ui/consts/const_let_eq_float.rs:57:13: 57:21
        _65 = Lt(_63, _64);              // scope 11 at ui/consts/const_let_eq_float.rs:57:13: 57:21
        assert(move _65, "index out of bounds: the length is {} but the index is {}", move _64, _63) -> bb10; // scope 11 at ui/consts/const_let_eq_float.rs:57:13: 57:21
    }

    bb10: {
        _62 = (_56.0: [f32; 1])[_63];    // scope 11 at ui/consts/const_let_eq_float.rs:57:13: 57:21
        _7 = Add(move _61, move _62);    // scope 11 at ui/consts/const_let_eq_float.rs:57:5: 57:21
        StorageDead(_62);                // scope 11 at ui/consts/const_let_eq_float.rs:57:20: 57:21
        StorageDead(_61);                // scope 11 at ui/consts/const_let_eq_float.rs:57:20: 57:21
        StorageDead(_63);                // scope 11 at ui/consts/const_let_eq_float.rs:57:21: 57:22
        _0 = _7;                         // scope 11 at ui/consts/const_let_eq_float.rs:60:5: 60:6
        StorageDead(_56);                // scope 10 at ui/consts/const_let_eq_float.rs:61:1: 61:2
        StorageDead(_46);                // scope 9 at ui/consts/const_let_eq_float.rs:61:1: 61:2
        StorageDead(_36);                // scope 8 at ui/consts/const_let_eq_float.rs:61:1: 61:2
        StorageDead(_26);                // scope 7 at ui/consts/const_let_eq_float.rs:61:1: 61:2
        StorageDead(_21);                // scope 6 at ui/consts/const_let_eq_float.rs:61:1: 61:2
        StorageDead(_20);                // scope 5 at ui/consts/const_let_eq_float.rs:61:1: 61:2
        StorageDead(_11);                // scope 4 at ui/consts/const_let_eq_float.rs:61:1: 61:2
        StorageDead(_7);                 // scope 3 at ui/consts/const_let_eq_float.rs:61:1: 61:2
        StorageDead(_5);                 // scope 2 at ui/consts/const_let_eq_float.rs:61:1: 61:2
        StorageDead(_3);                 // scope 1 at ui/consts/const_let_eq_float.rs:61:1: 61:2
        StorageDead(_2);                 // scope 0 at ui/consts/const_let_eq_float.rs:61:1: 61:2
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:61:2: 61:2
    }
}

basics::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:29:24: 29:25

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:29:24: 29:25
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:29:24: 29:25
    }
}

basics::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:43:29: 43:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:43:29: 43:30
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:43:29: 43:30
    }
}

basics::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:46:29: 46:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:46:29: 46:30
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:46:29: 46:30
    }
}

basics::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:52:28: 52:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:52:28: 52:29
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:52:28: 52:29
    }
}

basics::{constant#4}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:55:28: 55:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:55:28: 55:29
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:55:28: 55:29
    }
}

fn add_assign(_1: W) -> f32 {
    let _2: f32;                         // in scope 0 at ui/consts/const_let_eq_float.rs:63:23: 63:24
    let mut _3: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:65:22: 65:23
    let _5: usize;                       // in scope 0 at ui/consts/const_let_eq_float.rs:71:9: 71:10
    let mut _6: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:72:10: 72:16
    let _7: usize;                       // in scope 0 at ui/consts/const_let_eq_float.rs:72:14: 72:15
    let mut _10: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:80:10: 80:23
    let mut _12: Foo<f32>;               // in scope 0 at ui/consts/const_let_eq_float.rs:84:35: 84:43
    let _13: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:85:9: 85:10
    let mut _14: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:86:10: 86:18
    let _15: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:86:14: 86:15
    let mut _17: Bar<f32>;               // in scope 0 at ui/consts/const_let_eq_float.rs:87:35: 87:49
    let _18: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:88:9: 88:10
    let mut _19: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:89:10: 89:18
    let _20: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:89:14: 89:15
    let mut _22: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:93:38: 93:43
    let _23: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:94:13: 94:14
    let mut _24: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:95:10: 95:20
    let _25: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:95:18: 95:19
    let mut _27: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:96:43: 96:48
    let _28: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:97:11: 97:12
    let mut _29: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:98:10: 98:18
    let _30: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:98:16: 98:17
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq_float.rs:63:23: 63:24
        let mut _0: f32;                 // return place in scope 1 at ui/consts/const_let_eq_float.rs:65:9: 65:14
        scope 2 {
            debug d => _0;               // in scope 2 at ui/consts/const_let_eq_float.rs:65:9: 65:14
            let mut _4: [f32; 1];        // in scope 2 at ui/consts/const_let_eq_float.rs:70:9: 70:16
            scope 3 {
                debug arr => _4;         // in scope 3 at ui/consts/const_let_eq_float.rs:70:9: 70:16
                let mut _8: Foo<f32>;    // in scope 3 at ui/consts/const_let_eq_float.rs:76:9: 76:16
                scope 4 {
                    debug foo => _8;     // in scope 4 at ui/consts/const_let_eq_float.rs:76:9: 76:16
                    let mut _9: Bar<f32>; // in scope 4 at ui/consts/const_let_eq_float.rs:77:9: 77:16
                    scope 5 {
                        debug bar => _9; // in scope 5 at ui/consts/const_let_eq_float.rs:77:9: 77:16
                        let mut _11: [Foo<f32>; 1]; // in scope 5 at ui/consts/const_let_eq_float.rs:84:9: 84:16
                        scope 6 {
                            debug arr => _11; // in scope 6 at ui/consts/const_let_eq_float.rs:84:9: 84:16
                            let mut _16: [Bar<f32>; 1]; // in scope 6 at ui/consts/const_let_eq_float.rs:87:9: 87:16
                            scope 7 {
                                debug arr => _16; // in scope 7 at ui/consts/const_let_eq_float.rs:87:9: 87:16
                                let mut _21: Foo<[f32; 1]>; // in scope 7 at ui/consts/const_let_eq_float.rs:93:9: 93:16
                                scope 8 {
                                    debug arr => _21; // in scope 8 at ui/consts/const_let_eq_float.rs:93:9: 93:16
                                    let mut _26: Bar<[f32; 1]>; // in scope 8 at ui/consts/const_let_eq_float.rs:96:9: 96:16
                                    scope 9 {
                                        debug arr => _26; // in scope 9 at ui/consts/const_let_eq_float.rs:96:9: 96:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = (_1.0: f32);                // scope 0 at ui/consts/const_let_eq_float.rs:63:23: 63:24
        _3 = _2;                         // scope 1 at ui/consts/const_let_eq_float.rs:65:22: 65:23
        _0 = Add(move _3, const 1f32);   // scope 1 at ui/consts/const_let_eq_float.rs:65:22: 65:29
        _0 = Add(_0, const 1f32);        // scope 2 at ui/consts/const_let_eq_float.rs:66:5: 66:13
        _4 = [const 0f32];               // scope 2 at ui/consts/const_let_eq_float.rs:70:29: 70:34
        _5 = const 0_usize;              // scope 3 at ui/consts/const_let_eq_float.rs:71:9: 71:10
        _4[_5] = Add(_4[_5], const 1f32); // scope 3 at ui/consts/const_let_eq_float.rs:71:5: 71:18
        _7 = const 0_usize;              // scope 3 at ui/consts/const_let_eq_float.rs:72:14: 72:15
        _6 = _4[_7];                     // scope 3 at ui/consts/const_let_eq_float.rs:72:10: 72:16
        _0 = Add(_0, move _6);           // scope 3 at ui/consts/const_let_eq_float.rs:72:5: 72:16
        _8 = const Foo::<f32>(0f32);     // scope 3 at ui/consts/const_let_eq_float.rs:76:29: 76:37
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:76:29: 76:37
                                         // + literal: Const { ty: Foo<f32>, val: Value(Scalar(0x00000000)) }
        _9 = const Bar::<f32> {{ x: 0f32 }}; // scope 4 at ui/consts/const_let_eq_float.rs:77:29: 77:43
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:77:29: 77:43
                                         // + literal: Const { ty: Bar<f32>, val: Value(Scalar(0x00000000)) }
        (_8.0: f32) = const 1f32;        // scope 5 at ui/consts/const_let_eq_float.rs:78:5: 78:17
        (_9.0: f32) = const 1f32;        // scope 5 at ui/consts/const_let_eq_float.rs:79:5: 79:17
        _10 = const 2f32;                // scope 5 at ui/consts/const_let_eq_float.rs:80:10: 80:23
        _0 = Add(_0, move _10);          // scope 5 at ui/consts/const_let_eq_float.rs:80:5: 80:23
        _12 = const Foo::<f32>(0f32);    // scope 5 at ui/consts/const_let_eq_float.rs:84:35: 84:43
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:84:35: 84:43
                                         // + literal: Const { ty: Foo<f32>, val: Value(Scalar(0x00000000)) }
        _11 = [move _12];                // scope 5 at ui/consts/const_let_eq_float.rs:84:34: 84:44
        _13 = const 0_usize;             // scope 6 at ui/consts/const_let_eq_float.rs:85:9: 85:10
        (_11[_13].0: f32) = Add((_11[_13].0: f32), const 1f32); // scope 6 at ui/consts/const_let_eq_float.rs:85:5: 85:20
        _15 = const 0_usize;             // scope 6 at ui/consts/const_let_eq_float.rs:86:14: 86:15
        _14 = (_11[_15].0: f32);         // scope 6 at ui/consts/const_let_eq_float.rs:86:10: 86:18
        _0 = Add(_0, move _14);          // scope 6 at ui/consts/const_let_eq_float.rs:86:5: 86:18
        _17 = const Bar::<f32> {{ x: 0f32 }}; // scope 6 at ui/consts/const_let_eq_float.rs:87:35: 87:49
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:87:35: 87:49
                                         // + literal: Const { ty: Bar<f32>, val: Value(Scalar(0x00000000)) }
        _16 = [move _17];                // scope 6 at ui/consts/const_let_eq_float.rs:87:34: 87:50
        _18 = const 0_usize;             // scope 7 at ui/consts/const_let_eq_float.rs:88:9: 88:10
        (_16[_18].0: f32) = Add((_16[_18].0: f32), const 1f32); // scope 7 at ui/consts/const_let_eq_float.rs:88:5: 88:20
        _20 = const 0_usize;             // scope 7 at ui/consts/const_let_eq_float.rs:89:14: 89:15
        _19 = (_16[_20].0: f32);         // scope 7 at ui/consts/const_let_eq_float.rs:89:10: 89:18
        _0 = Add(_0, move _19);          // scope 7 at ui/consts/const_let_eq_float.rs:89:5: 89:18
        _22 = [const 0f32];              // scope 7 at ui/consts/const_let_eq_float.rs:93:38: 93:43
        _21 = Foo::<[f32; 1]>(move _22); // scope 7 at ui/consts/const_let_eq_float.rs:93:34: 93:44
        _23 = const 0_usize;             // scope 8 at ui/consts/const_let_eq_float.rs:94:13: 94:14
        (_21.0: [f32; 1])[_23] = Add((_21.0: [f32; 1])[_23], const 1f32); // scope 8 at ui/consts/const_let_eq_float.rs:94:5: 94:22
        _25 = const 0_usize;             // scope 8 at ui/consts/const_let_eq_float.rs:95:18: 95:19
        _24 = (_21.0: [f32; 1])[_25];    // scope 8 at ui/consts/const_let_eq_float.rs:95:10: 95:20
        _0 = Add(_0, move _24);          // scope 8 at ui/consts/const_let_eq_float.rs:95:5: 95:20
        _27 = [const 0f32];              // scope 8 at ui/consts/const_let_eq_float.rs:96:43: 96:48
        _26 = Bar::<[f32; 1]> { x: move _27 }; // scope 8 at ui/consts/const_let_eq_float.rs:96:34: 96:50
        _28 = const 0_usize;             // scope 9 at ui/consts/const_let_eq_float.rs:97:11: 97:12
        (_26.0: [f32; 1])[_28] = Add((_26.0: [f32; 1])[_28], const 1f32); // scope 9 at ui/consts/const_let_eq_float.rs:97:5: 97:20
        _30 = const 0_usize;             // scope 9 at ui/consts/const_let_eq_float.rs:98:16: 98:17
        _29 = (_26.0: [f32; 1])[_30];    // scope 9 at ui/consts/const_let_eq_float.rs:98:10: 98:18
        _0 = Add(_0, move _29);          // scope 9 at ui/consts/const_let_eq_float.rs:98:5: 98:18
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:102:2: 102:2
    }
}

// MIR FOR CTFE
fn add_assign(_1: W) -> f32 {
    let mut _0: f32;                     // return place in scope 0 at ui/consts/const_let_eq_float.rs:63:33: 63:36
    let _2: f32;                         // in scope 0 at ui/consts/const_let_eq_float.rs:63:23: 63:24
    let mut _4: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:65:22: 65:23
    let _6: usize;                       // in scope 0 at ui/consts/const_let_eq_float.rs:71:9: 71:10
    let mut _7: usize;                   // in scope 0 at ui/consts/const_let_eq_float.rs:71:5: 71:11
    let mut _8: bool;                    // in scope 0 at ui/consts/const_let_eq_float.rs:71:5: 71:11
    let mut _9: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:72:10: 72:16
    let _10: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:72:14: 72:15
    let mut _11: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:72:10: 72:16
    let mut _12: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:72:10: 72:16
    let mut _15: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:80:10: 80:23
    let mut _16: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:80:10: 80:15
    let mut _17: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:80:18: 80:23
    let mut _19: Foo<f32>;               // in scope 0 at ui/consts/const_let_eq_float.rs:84:35: 84:43
    let _20: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:85:9: 85:10
    let mut _21: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:85:5: 85:11
    let mut _22: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:85:5: 85:11
    let mut _23: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:86:10: 86:18
    let _24: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:86:14: 86:15
    let mut _25: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:86:10: 86:16
    let mut _26: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:86:10: 86:16
    let mut _28: Bar<f32>;               // in scope 0 at ui/consts/const_let_eq_float.rs:87:35: 87:49
    let _29: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:88:9: 88:10
    let mut _30: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:88:5: 88:11
    let mut _31: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:88:5: 88:11
    let mut _32: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:89:10: 89:18
    let _33: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:89:14: 89:15
    let mut _34: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:89:10: 89:16
    let mut _35: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:89:10: 89:16
    let mut _37: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:93:38: 93:43
    let _38: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:94:13: 94:14
    let mut _39: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:94:5: 94:15
    let mut _40: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:94:5: 94:15
    let mut _41: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:95:10: 95:20
    let _42: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:95:18: 95:19
    let mut _43: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:95:10: 95:20
    let mut _44: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:95:10: 95:20
    let mut _46: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:96:43: 96:48
    let _47: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:97:11: 97:12
    let mut _48: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:97:5: 97:13
    let mut _49: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:97:5: 97:13
    let mut _50: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:98:10: 98:18
    let _51: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:98:16: 98:17
    let mut _52: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:98:10: 98:18
    let mut _53: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:98:10: 98:18
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq_float.rs:63:23: 63:24
        let mut _3: f32;                 // in scope 1 at ui/consts/const_let_eq_float.rs:65:9: 65:14
        scope 2 {
            debug d => _3;               // in scope 2 at ui/consts/const_let_eq_float.rs:65:9: 65:14
            let mut _5: [f32; 1];        // in scope 2 at ui/consts/const_let_eq_float.rs:70:9: 70:16
            scope 3 {
                debug arr => _5;         // in scope 3 at ui/consts/const_let_eq_float.rs:70:9: 70:16
                let mut _13: Foo<f32>;   // in scope 3 at ui/consts/const_let_eq_float.rs:76:9: 76:16
                scope 4 {
                    debug foo => _13;    // in scope 4 at ui/consts/const_let_eq_float.rs:76:9: 76:16
                    let mut _14: Bar<f32>; // in scope 4 at ui/consts/const_let_eq_float.rs:77:9: 77:16
                    scope 5 {
                        debug bar => _14; // in scope 5 at ui/consts/const_let_eq_float.rs:77:9: 77:16
                        let mut _18: [Foo<f32>; 1]; // in scope 5 at ui/consts/const_let_eq_float.rs:84:9: 84:16
                        scope 6 {
                            debug arr => _18; // in scope 6 at ui/consts/const_let_eq_float.rs:84:9: 84:16
                            let mut _27: [Bar<f32>; 1]; // in scope 6 at ui/consts/const_let_eq_float.rs:87:9: 87:16
                            scope 7 {
                                debug arr => _27; // in scope 7 at ui/consts/const_let_eq_float.rs:87:9: 87:16
                                let mut _36: Foo<[f32; 1]>; // in scope 7 at ui/consts/const_let_eq_float.rs:93:9: 93:16
                                scope 8 {
                                    debug arr => _36; // in scope 8 at ui/consts/const_let_eq_float.rs:93:9: 93:16
                                    let mut _45: Bar<[f32; 1]>; // in scope 8 at ui/consts/const_let_eq_float.rs:96:9: 96:16
                                    scope 9 {
                                        debug arr => _45; // in scope 9 at ui/consts/const_let_eq_float.rs:96:9: 96:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const_let_eq_float.rs:63:23: 63:24
        _2 = (_1.0: f32);                // scope 0 at ui/consts/const_let_eq_float.rs:63:23: 63:24
        StorageLive(_3);                 // scope 1 at ui/consts/const_let_eq_float.rs:65:9: 65:14
        StorageLive(_4);                 // scope 1 at ui/consts/const_let_eq_float.rs:65:22: 65:23
        _4 = _2;                         // scope 1 at ui/consts/const_let_eq_float.rs:65:22: 65:23
        _3 = Add(move _4, const 1f32);   // scope 1 at ui/consts/const_let_eq_float.rs:65:22: 65:29
        StorageDead(_4);                 // scope 1 at ui/consts/const_let_eq_float.rs:65:28: 65:29
        _3 = Add(_3, const 1f32);        // scope 2 at ui/consts/const_let_eq_float.rs:66:5: 66:13
        StorageLive(_5);                 // scope 2 at ui/consts/const_let_eq_float.rs:70:9: 70:16
        _5 = [const 0f32];               // scope 2 at ui/consts/const_let_eq_float.rs:70:29: 70:34
        StorageLive(_6);                 // scope 3 at ui/consts/const_let_eq_float.rs:71:9: 71:10
        _6 = const 0_usize;              // scope 3 at ui/consts/const_let_eq_float.rs:71:9: 71:10
        _7 = Len(_5);                    // scope 3 at ui/consts/const_let_eq_float.rs:71:5: 71:11
        _8 = Lt(_6, _7);                 // scope 3 at ui/consts/const_let_eq_float.rs:71:5: 71:11
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> bb1; // scope 3 at ui/consts/const_let_eq_float.rs:71:5: 71:11
    }

    bb1: {
        _5[_6] = Add(_5[_6], const 1f32); // scope 3 at ui/consts/const_let_eq_float.rs:71:5: 71:18
        StorageDead(_6);                 // scope 3 at ui/consts/const_let_eq_float.rs:71:18: 71:19
        StorageLive(_9);                 // scope 3 at ui/consts/const_let_eq_float.rs:72:10: 72:16
        StorageLive(_10);                // scope 3 at ui/consts/const_let_eq_float.rs:72:14: 72:15
        _10 = const 0_usize;             // scope 3 at ui/consts/const_let_eq_float.rs:72:14: 72:15
        _11 = Len(_5);                   // scope 3 at ui/consts/const_let_eq_float.rs:72:10: 72:16
        _12 = Lt(_10, _11);              // scope 3 at ui/consts/const_let_eq_float.rs:72:10: 72:16
        assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> bb2; // scope 3 at ui/consts/const_let_eq_float.rs:72:10: 72:16
    }

    bb2: {
        _9 = _5[_10];                    // scope 3 at ui/consts/const_let_eq_float.rs:72:10: 72:16
        _3 = Add(_3, move _9);           // scope 3 at ui/consts/const_let_eq_float.rs:72:5: 72:16
        StorageDead(_9);                 // scope 3 at ui/consts/const_let_eq_float.rs:72:15: 72:16
        StorageDead(_10);                // scope 3 at ui/consts/const_let_eq_float.rs:72:16: 72:17
        StorageLive(_13);                // scope 3 at ui/consts/const_let_eq_float.rs:76:9: 76:16
        _13 = Foo::<f32>(const 0f32);    // scope 3 at ui/consts/const_let_eq_float.rs:76:29: 76:37
        StorageLive(_14);                // scope 4 at ui/consts/const_let_eq_float.rs:77:9: 77:16
        _14 = Bar::<f32> { x: const 0f32 }; // scope 4 at ui/consts/const_let_eq_float.rs:77:29: 77:43
        (_13.0: f32) = Add((_13.0: f32), const 1f32); // scope 5 at ui/consts/const_let_eq_float.rs:78:5: 78:17
        (_14.0: f32) = Add((_14.0: f32), const 1f32); // scope 5 at ui/consts/const_let_eq_float.rs:79:5: 79:17
        StorageLive(_15);                // scope 5 at ui/consts/const_let_eq_float.rs:80:10: 80:23
        StorageLive(_16);                // scope 5 at ui/consts/const_let_eq_float.rs:80:10: 80:15
        _16 = (_13.0: f32);              // scope 5 at ui/consts/const_let_eq_float.rs:80:10: 80:15
        StorageLive(_17);                // scope 5 at ui/consts/const_let_eq_float.rs:80:18: 80:23
        _17 = (_14.0: f32);              // scope 5 at ui/consts/const_let_eq_float.rs:80:18: 80:23
        _15 = Add(move _16, move _17);   // scope 5 at ui/consts/const_let_eq_float.rs:80:10: 80:23
        StorageDead(_17);                // scope 5 at ui/consts/const_let_eq_float.rs:80:22: 80:23
        StorageDead(_16);                // scope 5 at ui/consts/const_let_eq_float.rs:80:22: 80:23
        _3 = Add(_3, move _15);          // scope 5 at ui/consts/const_let_eq_float.rs:80:5: 80:23
        StorageDead(_15);                // scope 5 at ui/consts/const_let_eq_float.rs:80:22: 80:23
        StorageLive(_18);                // scope 5 at ui/consts/const_let_eq_float.rs:84:9: 84:16
        StorageLive(_19);                // scope 5 at ui/consts/const_let_eq_float.rs:84:35: 84:43
        _19 = Foo::<f32>(const 0f32);    // scope 5 at ui/consts/const_let_eq_float.rs:84:35: 84:43
        _18 = [move _19];                // scope 5 at ui/consts/const_let_eq_float.rs:84:34: 84:44
        StorageDead(_19);                // scope 5 at ui/consts/const_let_eq_float.rs:84:43: 84:44
        StorageLive(_20);                // scope 6 at ui/consts/const_let_eq_float.rs:85:9: 85:10
        _20 = const 0_usize;             // scope 6 at ui/consts/const_let_eq_float.rs:85:9: 85:10
        _21 = Len(_18);                  // scope 6 at ui/consts/const_let_eq_float.rs:85:5: 85:11
        _22 = Lt(_20, _21);              // scope 6 at ui/consts/const_let_eq_float.rs:85:5: 85:11
        assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> bb3; // scope 6 at ui/consts/const_let_eq_float.rs:85:5: 85:11
    }

    bb3: {
        (_18[_20].0: f32) = Add((_18[_20].0: f32), const 1f32); // scope 6 at ui/consts/const_let_eq_float.rs:85:5: 85:20
        StorageDead(_20);                // scope 6 at ui/consts/const_let_eq_float.rs:85:20: 85:21
        StorageLive(_23);                // scope 6 at ui/consts/const_let_eq_float.rs:86:10: 86:18
        StorageLive(_24);                // scope 6 at ui/consts/const_let_eq_float.rs:86:14: 86:15
        _24 = const 0_usize;             // scope 6 at ui/consts/const_let_eq_float.rs:86:14: 86:15
        _25 = Len(_18);                  // scope 6 at ui/consts/const_let_eq_float.rs:86:10: 86:16
        _26 = Lt(_24, _25);              // scope 6 at ui/consts/const_let_eq_float.rs:86:10: 86:16
        assert(move _26, "index out of bounds: the length is {} but the index is {}", move _25, _24) -> bb4; // scope 6 at ui/consts/const_let_eq_float.rs:86:10: 86:16
    }

    bb4: {
        _23 = (_18[_24].0: f32);         // scope 6 at ui/consts/const_let_eq_float.rs:86:10: 86:18
        _3 = Add(_3, move _23);          // scope 6 at ui/consts/const_let_eq_float.rs:86:5: 86:18
        StorageDead(_23);                // scope 6 at ui/consts/const_let_eq_float.rs:86:17: 86:18
        StorageDead(_24);                // scope 6 at ui/consts/const_let_eq_float.rs:86:18: 86:19
        StorageLive(_27);                // scope 6 at ui/consts/const_let_eq_float.rs:87:9: 87:16
        StorageLive(_28);                // scope 6 at ui/consts/const_let_eq_float.rs:87:35: 87:49
        _28 = Bar::<f32> { x: const 0f32 }; // scope 6 at ui/consts/const_let_eq_float.rs:87:35: 87:49
        _27 = [move _28];                // scope 6 at ui/consts/const_let_eq_float.rs:87:34: 87:50
        StorageDead(_28);                // scope 6 at ui/consts/const_let_eq_float.rs:87:49: 87:50
        StorageLive(_29);                // scope 7 at ui/consts/const_let_eq_float.rs:88:9: 88:10
        _29 = const 0_usize;             // scope 7 at ui/consts/const_let_eq_float.rs:88:9: 88:10
        _30 = Len(_27);                  // scope 7 at ui/consts/const_let_eq_float.rs:88:5: 88:11
        _31 = Lt(_29, _30);              // scope 7 at ui/consts/const_let_eq_float.rs:88:5: 88:11
        assert(move _31, "index out of bounds: the length is {} but the index is {}", move _30, _29) -> bb5; // scope 7 at ui/consts/const_let_eq_float.rs:88:5: 88:11
    }

    bb5: {
        (_27[_29].0: f32) = Add((_27[_29].0: f32), const 1f32); // scope 7 at ui/consts/const_let_eq_float.rs:88:5: 88:20
        StorageDead(_29);                // scope 7 at ui/consts/const_let_eq_float.rs:88:20: 88:21
        StorageLive(_32);                // scope 7 at ui/consts/const_let_eq_float.rs:89:10: 89:18
        StorageLive(_33);                // scope 7 at ui/consts/const_let_eq_float.rs:89:14: 89:15
        _33 = const 0_usize;             // scope 7 at ui/consts/const_let_eq_float.rs:89:14: 89:15
        _34 = Len(_27);                  // scope 7 at ui/consts/const_let_eq_float.rs:89:10: 89:16
        _35 = Lt(_33, _34);              // scope 7 at ui/consts/const_let_eq_float.rs:89:10: 89:16
        assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _33) -> bb6; // scope 7 at ui/consts/const_let_eq_float.rs:89:10: 89:16
    }

    bb6: {
        _32 = (_27[_33].0: f32);         // scope 7 at ui/consts/const_let_eq_float.rs:89:10: 89:18
        _3 = Add(_3, move _32);          // scope 7 at ui/consts/const_let_eq_float.rs:89:5: 89:18
        StorageDead(_32);                // scope 7 at ui/consts/const_let_eq_float.rs:89:17: 89:18
        StorageDead(_33);                // scope 7 at ui/consts/const_let_eq_float.rs:89:18: 89:19
        StorageLive(_36);                // scope 7 at ui/consts/const_let_eq_float.rs:93:9: 93:16
        StorageLive(_37);                // scope 7 at ui/consts/const_let_eq_float.rs:93:38: 93:43
        _37 = [const 0f32];              // scope 7 at ui/consts/const_let_eq_float.rs:93:38: 93:43
        _36 = Foo::<[f32; 1]>(move _37); // scope 7 at ui/consts/const_let_eq_float.rs:93:34: 93:44
        StorageDead(_37);                // scope 7 at ui/consts/const_let_eq_float.rs:93:43: 93:44
        StorageLive(_38);                // scope 8 at ui/consts/const_let_eq_float.rs:94:13: 94:14
        _38 = const 0_usize;             // scope 8 at ui/consts/const_let_eq_float.rs:94:13: 94:14
        _39 = Len((_36.0: [f32; 1]));    // scope 8 at ui/consts/const_let_eq_float.rs:94:5: 94:15
        _40 = Lt(_38, _39);              // scope 8 at ui/consts/const_let_eq_float.rs:94:5: 94:15
        assert(move _40, "index out of bounds: the length is {} but the index is {}", move _39, _38) -> bb7; // scope 8 at ui/consts/const_let_eq_float.rs:94:5: 94:15
    }

    bb7: {
        (_36.0: [f32; 1])[_38] = Add((_36.0: [f32; 1])[_38], const 1f32); // scope 8 at ui/consts/const_let_eq_float.rs:94:5: 94:22
        StorageDead(_38);                // scope 8 at ui/consts/const_let_eq_float.rs:94:22: 94:23
        StorageLive(_41);                // scope 8 at ui/consts/const_let_eq_float.rs:95:10: 95:20
        StorageLive(_42);                // scope 8 at ui/consts/const_let_eq_float.rs:95:18: 95:19
        _42 = const 0_usize;             // scope 8 at ui/consts/const_let_eq_float.rs:95:18: 95:19
        _43 = Len((_36.0: [f32; 1]));    // scope 8 at ui/consts/const_let_eq_float.rs:95:10: 95:20
        _44 = Lt(_42, _43);              // scope 8 at ui/consts/const_let_eq_float.rs:95:10: 95:20
        assert(move _44, "index out of bounds: the length is {} but the index is {}", move _43, _42) -> bb8; // scope 8 at ui/consts/const_let_eq_float.rs:95:10: 95:20
    }

    bb8: {
        _41 = (_36.0: [f32; 1])[_42];    // scope 8 at ui/consts/const_let_eq_float.rs:95:10: 95:20
        _3 = Add(_3, move _41);          // scope 8 at ui/consts/const_let_eq_float.rs:95:5: 95:20
        StorageDead(_41);                // scope 8 at ui/consts/const_let_eq_float.rs:95:19: 95:20
        StorageDead(_42);                // scope 8 at ui/consts/const_let_eq_float.rs:95:20: 95:21
        StorageLive(_45);                // scope 8 at ui/consts/const_let_eq_float.rs:96:9: 96:16
        StorageLive(_46);                // scope 8 at ui/consts/const_let_eq_float.rs:96:43: 96:48
        _46 = [const 0f32];              // scope 8 at ui/consts/const_let_eq_float.rs:96:43: 96:48
        _45 = Bar::<[f32; 1]> { x: move _46 }; // scope 8 at ui/consts/const_let_eq_float.rs:96:34: 96:50
        StorageDead(_46);                // scope 8 at ui/consts/const_let_eq_float.rs:96:49: 96:50
        StorageLive(_47);                // scope 9 at ui/consts/const_let_eq_float.rs:97:11: 97:12
        _47 = const 0_usize;             // scope 9 at ui/consts/const_let_eq_float.rs:97:11: 97:12
        _48 = Len((_45.0: [f32; 1]));    // scope 9 at ui/consts/const_let_eq_float.rs:97:5: 97:13
        _49 = Lt(_47, _48);              // scope 9 at ui/consts/const_let_eq_float.rs:97:5: 97:13
        assert(move _49, "index out of bounds: the length is {} but the index is {}", move _48, _47) -> bb9; // scope 9 at ui/consts/const_let_eq_float.rs:97:5: 97:13
    }

    bb9: {
        (_45.0: [f32; 1])[_47] = Add((_45.0: [f32; 1])[_47], const 1f32); // scope 9 at ui/consts/const_let_eq_float.rs:97:5: 97:20
        StorageDead(_47);                // scope 9 at ui/consts/const_let_eq_float.rs:97:20: 97:21
        StorageLive(_50);                // scope 9 at ui/consts/const_let_eq_float.rs:98:10: 98:18
        StorageLive(_51);                // scope 9 at ui/consts/const_let_eq_float.rs:98:16: 98:17
        _51 = const 0_usize;             // scope 9 at ui/consts/const_let_eq_float.rs:98:16: 98:17
        _52 = Len((_45.0: [f32; 1]));    // scope 9 at ui/consts/const_let_eq_float.rs:98:10: 98:18
        _53 = Lt(_51, _52);              // scope 9 at ui/consts/const_let_eq_float.rs:98:10: 98:18
        assert(move _53, "index out of bounds: the length is {} but the index is {}", move _52, _51) -> bb10; // scope 9 at ui/consts/const_let_eq_float.rs:98:10: 98:18
    }

    bb10: {
        _50 = (_45.0: [f32; 1])[_51];    // scope 9 at ui/consts/const_let_eq_float.rs:98:10: 98:18
        _3 = Add(_3, move _50);          // scope 9 at ui/consts/const_let_eq_float.rs:98:5: 98:18
        StorageDead(_50);                // scope 9 at ui/consts/const_let_eq_float.rs:98:17: 98:18
        StorageDead(_51);                // scope 9 at ui/consts/const_let_eq_float.rs:98:18: 98:19
        _0 = _3;                         // scope 9 at ui/consts/const_let_eq_float.rs:101:5: 101:6
        StorageDead(_45);                // scope 8 at ui/consts/const_let_eq_float.rs:102:1: 102:2
        StorageDead(_36);                // scope 7 at ui/consts/const_let_eq_float.rs:102:1: 102:2
        StorageDead(_27);                // scope 6 at ui/consts/const_let_eq_float.rs:102:1: 102:2
        StorageDead(_18);                // scope 5 at ui/consts/const_let_eq_float.rs:102:1: 102:2
        StorageDead(_14);                // scope 4 at ui/consts/const_let_eq_float.rs:102:1: 102:2
        StorageDead(_13);                // scope 3 at ui/consts/const_let_eq_float.rs:102:1: 102:2
        StorageDead(_5);                 // scope 2 at ui/consts/const_let_eq_float.rs:102:1: 102:2
        StorageDead(_3);                 // scope 1 at ui/consts/const_let_eq_float.rs:102:1: 102:2
        StorageDead(_2);                 // scope 0 at ui/consts/const_let_eq_float.rs:102:1: 102:2
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:102:2: 102:2
    }
}

add_assign::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:70:24: 70:25

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:70:24: 70:25
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:70:24: 70:25
    }
}

add_assign::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:84:29: 84:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:84:29: 84:30
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:84:29: 84:30
    }
}

add_assign::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:87:29: 87:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:87:29: 87:30
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:87:29: 87:30
    }
}

add_assign::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:93:28: 93:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:93:28: 93:29
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:93:28: 93:29
    }
}

add_assign::{constant#4}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:96:28: 96:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:96:28: 96:29
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:96:28: 96:29
    }
}

fn mul_assign(_1: A) -> f32 {
    let _2: f32;                         // in scope 0 at ui/consts/const_let_eq_float.rs:104:25: 104:26
    let mut _3: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:106:22: 106:23
    let _5: usize;                       // in scope 0 at ui/consts/const_let_eq_float.rs:112:9: 112:10
    let mut _6: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:113:10: 113:16
    let _7: usize;                       // in scope 0 at ui/consts/const_let_eq_float.rs:113:14: 113:15
    let mut _10: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:121:10: 121:23
    let mut _12: Foo<f32>;               // in scope 0 at ui/consts/const_let_eq_float.rs:125:35: 125:43
    let _13: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:126:9: 126:10
    let mut _14: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:127:10: 127:18
    let _15: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:127:14: 127:15
    let mut _17: Bar<f32>;               // in scope 0 at ui/consts/const_let_eq_float.rs:128:35: 128:49
    let _18: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:129:9: 129:10
    let mut _19: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:130:10: 130:18
    let _20: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:130:14: 130:15
    let mut _22: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:134:38: 134:43
    let _23: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:135:13: 135:14
    let mut _24: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:136:10: 136:20
    let _25: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:136:18: 136:19
    let mut _27: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:137:43: 137:48
    let _28: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:138:11: 138:12
    let mut _29: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:139:10: 139:18
    let _30: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:139:16: 139:17
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq_float.rs:104:25: 104:26
        let mut _0: f32;                 // return place in scope 1 at ui/consts/const_let_eq_float.rs:106:9: 106:14
        scope 2 {
            debug d => _0;               // in scope 2 at ui/consts/const_let_eq_float.rs:106:9: 106:14
            let mut _4: [f32; 1];        // in scope 2 at ui/consts/const_let_eq_float.rs:111:9: 111:16
            scope 3 {
                debug arr => _4;         // in scope 3 at ui/consts/const_let_eq_float.rs:111:9: 111:16
                let mut _8: Foo<f32>;    // in scope 3 at ui/consts/const_let_eq_float.rs:117:9: 117:16
                scope 4 {
                    debug foo => _8;     // in scope 4 at ui/consts/const_let_eq_float.rs:117:9: 117:16
                    let mut _9: Bar<f32>; // in scope 4 at ui/consts/const_let_eq_float.rs:118:9: 118:16
                    scope 5 {
                        debug bar => _9; // in scope 5 at ui/consts/const_let_eq_float.rs:118:9: 118:16
                        let mut _11: [Foo<f32>; 1]; // in scope 5 at ui/consts/const_let_eq_float.rs:125:9: 125:16
                        scope 6 {
                            debug arr => _11; // in scope 6 at ui/consts/const_let_eq_float.rs:125:9: 125:16
                            let mut _16: [Bar<f32>; 1]; // in scope 6 at ui/consts/const_let_eq_float.rs:128:9: 128:16
                            scope 7 {
                                debug arr => _16; // in scope 7 at ui/consts/const_let_eq_float.rs:128:9: 128:16
                                let mut _21: Foo<[f32; 1]>; // in scope 7 at ui/consts/const_let_eq_float.rs:134:9: 134:16
                                scope 8 {
                                    debug arr => _21; // in scope 8 at ui/consts/const_let_eq_float.rs:134:9: 134:16
                                    let mut _26: Bar<[f32; 1]>; // in scope 8 at ui/consts/const_let_eq_float.rs:137:9: 137:16
                                    scope 9 {
                                        debug arr => _26; // in scope 9 at ui/consts/const_let_eq_float.rs:137:9: 137:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = (_1.0: f32);                // scope 0 at ui/consts/const_let_eq_float.rs:104:25: 104:26
        _3 = _2;                         // scope 1 at ui/consts/const_let_eq_float.rs:106:22: 106:23
        _0 = Add(move _3, const 1f32);   // scope 1 at ui/consts/const_let_eq_float.rs:106:22: 106:29
        _0 = Mul(_0, const 2f32);        // scope 2 at ui/consts/const_let_eq_float.rs:107:5: 107:13
        _4 = [const 1f32];               // scope 2 at ui/consts/const_let_eq_float.rs:111:29: 111:34
        _5 = const 0_usize;              // scope 3 at ui/consts/const_let_eq_float.rs:112:9: 112:10
        _4[_5] = Mul(_4[_5], const 2f32); // scope 3 at ui/consts/const_let_eq_float.rs:112:5: 112:18
        _7 = const 0_usize;              // scope 3 at ui/consts/const_let_eq_float.rs:113:14: 113:15
        _6 = _4[_7];                     // scope 3 at ui/consts/const_let_eq_float.rs:113:10: 113:16
        _0 = Mul(_0, move _6);           // scope 3 at ui/consts/const_let_eq_float.rs:113:5: 113:16
        _8 = const Foo::<f32>(1f32);     // scope 3 at ui/consts/const_let_eq_float.rs:117:29: 117:37
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:117:29: 117:37
                                         // + literal: Const { ty: Foo<f32>, val: Value(Scalar(0x3f800000)) }
        _9 = const Bar::<f32> {{ x: 1f32 }}; // scope 4 at ui/consts/const_let_eq_float.rs:118:29: 118:43
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:118:29: 118:43
                                         // + literal: Const { ty: Bar<f32>, val: Value(Scalar(0x3f800000)) }
        (_8.0: f32) = const 2f32;        // scope 5 at ui/consts/const_let_eq_float.rs:119:5: 119:17
        (_9.0: f32) = const 2f32;        // scope 5 at ui/consts/const_let_eq_float.rs:120:5: 120:17
        _10 = const 4f32;                // scope 5 at ui/consts/const_let_eq_float.rs:121:10: 121:23
        _0 = Mul(_0, move _10);          // scope 5 at ui/consts/const_let_eq_float.rs:121:5: 121:23
        _12 = const Foo::<f32>(1f32);    // scope 5 at ui/consts/const_let_eq_float.rs:125:35: 125:43
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:125:35: 125:43
                                         // + literal: Const { ty: Foo<f32>, val: Value(Scalar(0x3f800000)) }
        _11 = [move _12];                // scope 5 at ui/consts/const_let_eq_float.rs:125:34: 125:44
        _13 = const 0_usize;             // scope 6 at ui/consts/const_let_eq_float.rs:126:9: 126:10
        (_11[_13].0: f32) = Mul((_11[_13].0: f32), const 2f32); // scope 6 at ui/consts/const_let_eq_float.rs:126:5: 126:20
        _15 = const 0_usize;             // scope 6 at ui/consts/const_let_eq_float.rs:127:14: 127:15
        _14 = (_11[_15].0: f32);         // scope 6 at ui/consts/const_let_eq_float.rs:127:10: 127:18
        _0 = Mul(_0, move _14);          // scope 6 at ui/consts/const_let_eq_float.rs:127:5: 127:18
        _17 = const Bar::<f32> {{ x: 1f32 }}; // scope 6 at ui/consts/const_let_eq_float.rs:128:35: 128:49
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:128:35: 128:49
                                         // + literal: Const { ty: Bar<f32>, val: Value(Scalar(0x3f800000)) }
        _16 = [move _17];                // scope 6 at ui/consts/const_let_eq_float.rs:128:34: 128:50
        _18 = const 0_usize;             // scope 7 at ui/consts/const_let_eq_float.rs:129:9: 129:10
        (_16[_18].0: f32) = Mul((_16[_18].0: f32), const 2f32); // scope 7 at ui/consts/const_let_eq_float.rs:129:5: 129:20
        _20 = const 0_usize;             // scope 7 at ui/consts/const_let_eq_float.rs:130:14: 130:15
        _19 = (_16[_20].0: f32);         // scope 7 at ui/consts/const_let_eq_float.rs:130:10: 130:18
        _0 = Mul(_0, move _19);          // scope 7 at ui/consts/const_let_eq_float.rs:130:5: 130:18
        _22 = [const 1f32];              // scope 7 at ui/consts/const_let_eq_float.rs:134:38: 134:43
        _21 = Foo::<[f32; 1]>(move _22); // scope 7 at ui/consts/const_let_eq_float.rs:134:34: 134:44
        _23 = const 0_usize;             // scope 8 at ui/consts/const_let_eq_float.rs:135:13: 135:14
        (_21.0: [f32; 1])[_23] = Mul((_21.0: [f32; 1])[_23], const 2f32); // scope 8 at ui/consts/const_let_eq_float.rs:135:5: 135:22
        _25 = const 0_usize;             // scope 8 at ui/consts/const_let_eq_float.rs:136:18: 136:19
        _24 = (_21.0: [f32; 1])[_25];    // scope 8 at ui/consts/const_let_eq_float.rs:136:10: 136:20
        _0 = Mul(_0, move _24);          // scope 8 at ui/consts/const_let_eq_float.rs:136:5: 136:20
        _27 = [const 1f32];              // scope 8 at ui/consts/const_let_eq_float.rs:137:43: 137:48
        _26 = Bar::<[f32; 1]> { x: move _27 }; // scope 8 at ui/consts/const_let_eq_float.rs:137:34: 137:50
        _28 = const 0_usize;             // scope 9 at ui/consts/const_let_eq_float.rs:138:11: 138:12
        (_26.0: [f32; 1])[_28] = Mul((_26.0: [f32; 1])[_28], const 2f32); // scope 9 at ui/consts/const_let_eq_float.rs:138:5: 138:20
        _30 = const 0_usize;             // scope 9 at ui/consts/const_let_eq_float.rs:139:16: 139:17
        _29 = (_26.0: [f32; 1])[_30];    // scope 9 at ui/consts/const_let_eq_float.rs:139:10: 139:18
        _0 = Mul(_0, move _29);          // scope 9 at ui/consts/const_let_eq_float.rs:139:5: 139:18
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:143:2: 143:2
    }
}

// MIR FOR CTFE
fn mul_assign(_1: A) -> f32 {
    let mut _0: f32;                     // return place in scope 0 at ui/consts/const_let_eq_float.rs:104:36: 104:39
    let _2: f32;                         // in scope 0 at ui/consts/const_let_eq_float.rs:104:25: 104:26
    let mut _4: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:106:22: 106:23
    let _6: usize;                       // in scope 0 at ui/consts/const_let_eq_float.rs:112:9: 112:10
    let mut _7: usize;                   // in scope 0 at ui/consts/const_let_eq_float.rs:112:5: 112:11
    let mut _8: bool;                    // in scope 0 at ui/consts/const_let_eq_float.rs:112:5: 112:11
    let mut _9: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:113:10: 113:16
    let _10: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:113:14: 113:15
    let mut _11: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:113:10: 113:16
    let mut _12: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:113:10: 113:16
    let mut _15: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:121:10: 121:23
    let mut _16: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:121:10: 121:15
    let mut _17: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:121:18: 121:23
    let mut _19: Foo<f32>;               // in scope 0 at ui/consts/const_let_eq_float.rs:125:35: 125:43
    let _20: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:126:9: 126:10
    let mut _21: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:126:5: 126:11
    let mut _22: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:126:5: 126:11
    let mut _23: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:127:10: 127:18
    let _24: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:127:14: 127:15
    let mut _25: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:127:10: 127:16
    let mut _26: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:127:10: 127:16
    let mut _28: Bar<f32>;               // in scope 0 at ui/consts/const_let_eq_float.rs:128:35: 128:49
    let _29: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:129:9: 129:10
    let mut _30: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:129:5: 129:11
    let mut _31: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:129:5: 129:11
    let mut _32: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:130:10: 130:18
    let _33: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:130:14: 130:15
    let mut _34: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:130:10: 130:16
    let mut _35: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:130:10: 130:16
    let mut _37: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:134:38: 134:43
    let _38: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:135:13: 135:14
    let mut _39: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:135:5: 135:15
    let mut _40: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:135:5: 135:15
    let mut _41: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:136:10: 136:20
    let _42: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:136:18: 136:19
    let mut _43: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:136:10: 136:20
    let mut _44: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:136:10: 136:20
    let mut _46: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:137:43: 137:48
    let _47: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:138:11: 138:12
    let mut _48: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:138:5: 138:13
    let mut _49: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:138:5: 138:13
    let mut _50: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:139:10: 139:18
    let _51: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:139:16: 139:17
    let mut _52: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:139:10: 139:18
    let mut _53: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:139:10: 139:18
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq_float.rs:104:25: 104:26
        let mut _3: f32;                 // in scope 1 at ui/consts/const_let_eq_float.rs:106:9: 106:14
        scope 2 {
            debug d => _3;               // in scope 2 at ui/consts/const_let_eq_float.rs:106:9: 106:14
            let mut _5: [f32; 1];        // in scope 2 at ui/consts/const_let_eq_float.rs:111:9: 111:16
            scope 3 {
                debug arr => _5;         // in scope 3 at ui/consts/const_let_eq_float.rs:111:9: 111:16
                let mut _13: Foo<f32>;   // in scope 3 at ui/consts/const_let_eq_float.rs:117:9: 117:16
                scope 4 {
                    debug foo => _13;    // in scope 4 at ui/consts/const_let_eq_float.rs:117:9: 117:16
                    let mut _14: Bar<f32>; // in scope 4 at ui/consts/const_let_eq_float.rs:118:9: 118:16
                    scope 5 {
                        debug bar => _14; // in scope 5 at ui/consts/const_let_eq_float.rs:118:9: 118:16
                        let mut _18: [Foo<f32>; 1]; // in scope 5 at ui/consts/const_let_eq_float.rs:125:9: 125:16
                        scope 6 {
                            debug arr => _18; // in scope 6 at ui/consts/const_let_eq_float.rs:125:9: 125:16
                            let mut _27: [Bar<f32>; 1]; // in scope 6 at ui/consts/const_let_eq_float.rs:128:9: 128:16
                            scope 7 {
                                debug arr => _27; // in scope 7 at ui/consts/const_let_eq_float.rs:128:9: 128:16
                                let mut _36: Foo<[f32; 1]>; // in scope 7 at ui/consts/const_let_eq_float.rs:134:9: 134:16
                                scope 8 {
                                    debug arr => _36; // in scope 8 at ui/consts/const_let_eq_float.rs:134:9: 134:16
                                    let mut _45: Bar<[f32; 1]>; // in scope 8 at ui/consts/const_let_eq_float.rs:137:9: 137:16
                                    scope 9 {
                                        debug arr => _45; // in scope 9 at ui/consts/const_let_eq_float.rs:137:9: 137:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const_let_eq_float.rs:104:25: 104:26
        _2 = (_1.0: f32);                // scope 0 at ui/consts/const_let_eq_float.rs:104:25: 104:26
        StorageLive(_3);                 // scope 1 at ui/consts/const_let_eq_float.rs:106:9: 106:14
        StorageLive(_4);                 // scope 1 at ui/consts/const_let_eq_float.rs:106:22: 106:23
        _4 = _2;                         // scope 1 at ui/consts/const_let_eq_float.rs:106:22: 106:23
        _3 = Add(move _4, const 1f32);   // scope 1 at ui/consts/const_let_eq_float.rs:106:22: 106:29
        StorageDead(_4);                 // scope 1 at ui/consts/const_let_eq_float.rs:106:28: 106:29
        _3 = Mul(_3, const 2f32);        // scope 2 at ui/consts/const_let_eq_float.rs:107:5: 107:13
        StorageLive(_5);                 // scope 2 at ui/consts/const_let_eq_float.rs:111:9: 111:16
        _5 = [const 1f32];               // scope 2 at ui/consts/const_let_eq_float.rs:111:29: 111:34
        StorageLive(_6);                 // scope 3 at ui/consts/const_let_eq_float.rs:112:9: 112:10
        _6 = const 0_usize;              // scope 3 at ui/consts/const_let_eq_float.rs:112:9: 112:10
        _7 = Len(_5);                    // scope 3 at ui/consts/const_let_eq_float.rs:112:5: 112:11
        _8 = Lt(_6, _7);                 // scope 3 at ui/consts/const_let_eq_float.rs:112:5: 112:11
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> bb1; // scope 3 at ui/consts/const_let_eq_float.rs:112:5: 112:11
    }

    bb1: {
        _5[_6] = Mul(_5[_6], const 2f32); // scope 3 at ui/consts/const_let_eq_float.rs:112:5: 112:18
        StorageDead(_6);                 // scope 3 at ui/consts/const_let_eq_float.rs:112:18: 112:19
        StorageLive(_9);                 // scope 3 at ui/consts/const_let_eq_float.rs:113:10: 113:16
        StorageLive(_10);                // scope 3 at ui/consts/const_let_eq_float.rs:113:14: 113:15
        _10 = const 0_usize;             // scope 3 at ui/consts/const_let_eq_float.rs:113:14: 113:15
        _11 = Len(_5);                   // scope 3 at ui/consts/const_let_eq_float.rs:113:10: 113:16
        _12 = Lt(_10, _11);              // scope 3 at ui/consts/const_let_eq_float.rs:113:10: 113:16
        assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> bb2; // scope 3 at ui/consts/const_let_eq_float.rs:113:10: 113:16
    }

    bb2: {
        _9 = _5[_10];                    // scope 3 at ui/consts/const_let_eq_float.rs:113:10: 113:16
        _3 = Mul(_3, move _9);           // scope 3 at ui/consts/const_let_eq_float.rs:113:5: 113:16
        StorageDead(_9);                 // scope 3 at ui/consts/const_let_eq_float.rs:113:15: 113:16
        StorageDead(_10);                // scope 3 at ui/consts/const_let_eq_float.rs:113:16: 113:17
        StorageLive(_13);                // scope 3 at ui/consts/const_let_eq_float.rs:117:9: 117:16
        _13 = Foo::<f32>(const 1f32);    // scope 3 at ui/consts/const_let_eq_float.rs:117:29: 117:37
        StorageLive(_14);                // scope 4 at ui/consts/const_let_eq_float.rs:118:9: 118:16
        _14 = Bar::<f32> { x: const 1f32 }; // scope 4 at ui/consts/const_let_eq_float.rs:118:29: 118:43
        (_13.0: f32) = Mul((_13.0: f32), const 2f32); // scope 5 at ui/consts/const_let_eq_float.rs:119:5: 119:17
        (_14.0: f32) = Mul((_14.0: f32), const 2f32); // scope 5 at ui/consts/const_let_eq_float.rs:120:5: 120:17
        StorageLive(_15);                // scope 5 at ui/consts/const_let_eq_float.rs:121:10: 121:23
        StorageLive(_16);                // scope 5 at ui/consts/const_let_eq_float.rs:121:10: 121:15
        _16 = (_13.0: f32);              // scope 5 at ui/consts/const_let_eq_float.rs:121:10: 121:15
        StorageLive(_17);                // scope 5 at ui/consts/const_let_eq_float.rs:121:18: 121:23
        _17 = (_14.0: f32);              // scope 5 at ui/consts/const_let_eq_float.rs:121:18: 121:23
        _15 = Add(move _16, move _17);   // scope 5 at ui/consts/const_let_eq_float.rs:121:10: 121:23
        StorageDead(_17);                // scope 5 at ui/consts/const_let_eq_float.rs:121:22: 121:23
        StorageDead(_16);                // scope 5 at ui/consts/const_let_eq_float.rs:121:22: 121:23
        _3 = Mul(_3, move _15);          // scope 5 at ui/consts/const_let_eq_float.rs:121:5: 121:23
        StorageDead(_15);                // scope 5 at ui/consts/const_let_eq_float.rs:121:22: 121:23
        StorageLive(_18);                // scope 5 at ui/consts/const_let_eq_float.rs:125:9: 125:16
        StorageLive(_19);                // scope 5 at ui/consts/const_let_eq_float.rs:125:35: 125:43
        _19 = Foo::<f32>(const 1f32);    // scope 5 at ui/consts/const_let_eq_float.rs:125:35: 125:43
        _18 = [move _19];                // scope 5 at ui/consts/const_let_eq_float.rs:125:34: 125:44
        StorageDead(_19);                // scope 5 at ui/consts/const_let_eq_float.rs:125:43: 125:44
        StorageLive(_20);                // scope 6 at ui/consts/const_let_eq_float.rs:126:9: 126:10
        _20 = const 0_usize;             // scope 6 at ui/consts/const_let_eq_float.rs:126:9: 126:10
        _21 = Len(_18);                  // scope 6 at ui/consts/const_let_eq_float.rs:126:5: 126:11
        _22 = Lt(_20, _21);              // scope 6 at ui/consts/const_let_eq_float.rs:126:5: 126:11
        assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> bb3; // scope 6 at ui/consts/const_let_eq_float.rs:126:5: 126:11
    }

    bb3: {
        (_18[_20].0: f32) = Mul((_18[_20].0: f32), const 2f32); // scope 6 at ui/consts/const_let_eq_float.rs:126:5: 126:20
        StorageDead(_20);                // scope 6 at ui/consts/const_let_eq_float.rs:126:20: 126:21
        StorageLive(_23);                // scope 6 at ui/consts/const_let_eq_float.rs:127:10: 127:18
        StorageLive(_24);                // scope 6 at ui/consts/const_let_eq_float.rs:127:14: 127:15
        _24 = const 0_usize;             // scope 6 at ui/consts/const_let_eq_float.rs:127:14: 127:15
        _25 = Len(_18);                  // scope 6 at ui/consts/const_let_eq_float.rs:127:10: 127:16
        _26 = Lt(_24, _25);              // scope 6 at ui/consts/const_let_eq_float.rs:127:10: 127:16
        assert(move _26, "index out of bounds: the length is {} but the index is {}", move _25, _24) -> bb4; // scope 6 at ui/consts/const_let_eq_float.rs:127:10: 127:16
    }

    bb4: {
        _23 = (_18[_24].0: f32);         // scope 6 at ui/consts/const_let_eq_float.rs:127:10: 127:18
        _3 = Mul(_3, move _23);          // scope 6 at ui/consts/const_let_eq_float.rs:127:5: 127:18
        StorageDead(_23);                // scope 6 at ui/consts/const_let_eq_float.rs:127:17: 127:18
        StorageDead(_24);                // scope 6 at ui/consts/const_let_eq_float.rs:127:18: 127:19
        StorageLive(_27);                // scope 6 at ui/consts/const_let_eq_float.rs:128:9: 128:16
        StorageLive(_28);                // scope 6 at ui/consts/const_let_eq_float.rs:128:35: 128:49
        _28 = Bar::<f32> { x: const 1f32 }; // scope 6 at ui/consts/const_let_eq_float.rs:128:35: 128:49
        _27 = [move _28];                // scope 6 at ui/consts/const_let_eq_float.rs:128:34: 128:50
        StorageDead(_28);                // scope 6 at ui/consts/const_let_eq_float.rs:128:49: 128:50
        StorageLive(_29);                // scope 7 at ui/consts/const_let_eq_float.rs:129:9: 129:10
        _29 = const 0_usize;             // scope 7 at ui/consts/const_let_eq_float.rs:129:9: 129:10
        _30 = Len(_27);                  // scope 7 at ui/consts/const_let_eq_float.rs:129:5: 129:11
        _31 = Lt(_29, _30);              // scope 7 at ui/consts/const_let_eq_float.rs:129:5: 129:11
        assert(move _31, "index out of bounds: the length is {} but the index is {}", move _30, _29) -> bb5; // scope 7 at ui/consts/const_let_eq_float.rs:129:5: 129:11
    }

    bb5: {
        (_27[_29].0: f32) = Mul((_27[_29].0: f32), const 2f32); // scope 7 at ui/consts/const_let_eq_float.rs:129:5: 129:20
        StorageDead(_29);                // scope 7 at ui/consts/const_let_eq_float.rs:129:20: 129:21
        StorageLive(_32);                // scope 7 at ui/consts/const_let_eq_float.rs:130:10: 130:18
        StorageLive(_33);                // scope 7 at ui/consts/const_let_eq_float.rs:130:14: 130:15
        _33 = const 0_usize;             // scope 7 at ui/consts/const_let_eq_float.rs:130:14: 130:15
        _34 = Len(_27);                  // scope 7 at ui/consts/const_let_eq_float.rs:130:10: 130:16
        _35 = Lt(_33, _34);              // scope 7 at ui/consts/const_let_eq_float.rs:130:10: 130:16
        assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _33) -> bb6; // scope 7 at ui/consts/const_let_eq_float.rs:130:10: 130:16
    }

    bb6: {
        _32 = (_27[_33].0: f32);         // scope 7 at ui/consts/const_let_eq_float.rs:130:10: 130:18
        _3 = Mul(_3, move _32);          // scope 7 at ui/consts/const_let_eq_float.rs:130:5: 130:18
        StorageDead(_32);                // scope 7 at ui/consts/const_let_eq_float.rs:130:17: 130:18
        StorageDead(_33);                // scope 7 at ui/consts/const_let_eq_float.rs:130:18: 130:19
        StorageLive(_36);                // scope 7 at ui/consts/const_let_eq_float.rs:134:9: 134:16
        StorageLive(_37);                // scope 7 at ui/consts/const_let_eq_float.rs:134:38: 134:43
        _37 = [const 1f32];              // scope 7 at ui/consts/const_let_eq_float.rs:134:38: 134:43
        _36 = Foo::<[f32; 1]>(move _37); // scope 7 at ui/consts/const_let_eq_float.rs:134:34: 134:44
        StorageDead(_37);                // scope 7 at ui/consts/const_let_eq_float.rs:134:43: 134:44
        StorageLive(_38);                // scope 8 at ui/consts/const_let_eq_float.rs:135:13: 135:14
        _38 = const 0_usize;             // scope 8 at ui/consts/const_let_eq_float.rs:135:13: 135:14
        _39 = Len((_36.0: [f32; 1]));    // scope 8 at ui/consts/const_let_eq_float.rs:135:5: 135:15
        _40 = Lt(_38, _39);              // scope 8 at ui/consts/const_let_eq_float.rs:135:5: 135:15
        assert(move _40, "index out of bounds: the length is {} but the index is {}", move _39, _38) -> bb7; // scope 8 at ui/consts/const_let_eq_float.rs:135:5: 135:15
    }

    bb7: {
        (_36.0: [f32; 1])[_38] = Mul((_36.0: [f32; 1])[_38], const 2f32); // scope 8 at ui/consts/const_let_eq_float.rs:135:5: 135:22
        StorageDead(_38);                // scope 8 at ui/consts/const_let_eq_float.rs:135:22: 135:23
        StorageLive(_41);                // scope 8 at ui/consts/const_let_eq_float.rs:136:10: 136:20
        StorageLive(_42);                // scope 8 at ui/consts/const_let_eq_float.rs:136:18: 136:19
        _42 = const 0_usize;             // scope 8 at ui/consts/const_let_eq_float.rs:136:18: 136:19
        _43 = Len((_36.0: [f32; 1]));    // scope 8 at ui/consts/const_let_eq_float.rs:136:10: 136:20
        _44 = Lt(_42, _43);              // scope 8 at ui/consts/const_let_eq_float.rs:136:10: 136:20
        assert(move _44, "index out of bounds: the length is {} but the index is {}", move _43, _42) -> bb8; // scope 8 at ui/consts/const_let_eq_float.rs:136:10: 136:20
    }

    bb8: {
        _41 = (_36.0: [f32; 1])[_42];    // scope 8 at ui/consts/const_let_eq_float.rs:136:10: 136:20
        _3 = Mul(_3, move _41);          // scope 8 at ui/consts/const_let_eq_float.rs:136:5: 136:20
        StorageDead(_41);                // scope 8 at ui/consts/const_let_eq_float.rs:136:19: 136:20
        StorageDead(_42);                // scope 8 at ui/consts/const_let_eq_float.rs:136:20: 136:21
        StorageLive(_45);                // scope 8 at ui/consts/const_let_eq_float.rs:137:9: 137:16
        StorageLive(_46);                // scope 8 at ui/consts/const_let_eq_float.rs:137:43: 137:48
        _46 = [const 1f32];              // scope 8 at ui/consts/const_let_eq_float.rs:137:43: 137:48
        _45 = Bar::<[f32; 1]> { x: move _46 }; // scope 8 at ui/consts/const_let_eq_float.rs:137:34: 137:50
        StorageDead(_46);                // scope 8 at ui/consts/const_let_eq_float.rs:137:49: 137:50
        StorageLive(_47);                // scope 9 at ui/consts/const_let_eq_float.rs:138:11: 138:12
        _47 = const 0_usize;             // scope 9 at ui/consts/const_let_eq_float.rs:138:11: 138:12
        _48 = Len((_45.0: [f32; 1]));    // scope 9 at ui/consts/const_let_eq_float.rs:138:5: 138:13
        _49 = Lt(_47, _48);              // scope 9 at ui/consts/const_let_eq_float.rs:138:5: 138:13
        assert(move _49, "index out of bounds: the length is {} but the index is {}", move _48, _47) -> bb9; // scope 9 at ui/consts/const_let_eq_float.rs:138:5: 138:13
    }

    bb9: {
        (_45.0: [f32; 1])[_47] = Mul((_45.0: [f32; 1])[_47], const 2f32); // scope 9 at ui/consts/const_let_eq_float.rs:138:5: 138:20
        StorageDead(_47);                // scope 9 at ui/consts/const_let_eq_float.rs:138:20: 138:21
        StorageLive(_50);                // scope 9 at ui/consts/const_let_eq_float.rs:139:10: 139:18
        StorageLive(_51);                // scope 9 at ui/consts/const_let_eq_float.rs:139:16: 139:17
        _51 = const 0_usize;             // scope 9 at ui/consts/const_let_eq_float.rs:139:16: 139:17
        _52 = Len((_45.0: [f32; 1]));    // scope 9 at ui/consts/const_let_eq_float.rs:139:10: 139:18
        _53 = Lt(_51, _52);              // scope 9 at ui/consts/const_let_eq_float.rs:139:10: 139:18
        assert(move _53, "index out of bounds: the length is {} but the index is {}", move _52, _51) -> bb10; // scope 9 at ui/consts/const_let_eq_float.rs:139:10: 139:18
    }

    bb10: {
        _50 = (_45.0: [f32; 1])[_51];    // scope 9 at ui/consts/const_let_eq_float.rs:139:10: 139:18
        _3 = Mul(_3, move _50);          // scope 9 at ui/consts/const_let_eq_float.rs:139:5: 139:18
        StorageDead(_50);                // scope 9 at ui/consts/const_let_eq_float.rs:139:17: 139:18
        StorageDead(_51);                // scope 9 at ui/consts/const_let_eq_float.rs:139:18: 139:19
        _0 = _3;                         // scope 9 at ui/consts/const_let_eq_float.rs:142:5: 142:6
        StorageDead(_45);                // scope 8 at ui/consts/const_let_eq_float.rs:143:1: 143:2
        StorageDead(_36);                // scope 7 at ui/consts/const_let_eq_float.rs:143:1: 143:2
        StorageDead(_27);                // scope 6 at ui/consts/const_let_eq_float.rs:143:1: 143:2
        StorageDead(_18);                // scope 5 at ui/consts/const_let_eq_float.rs:143:1: 143:2
        StorageDead(_14);                // scope 4 at ui/consts/const_let_eq_float.rs:143:1: 143:2
        StorageDead(_13);                // scope 3 at ui/consts/const_let_eq_float.rs:143:1: 143:2
        StorageDead(_5);                 // scope 2 at ui/consts/const_let_eq_float.rs:143:1: 143:2
        StorageDead(_3);                 // scope 1 at ui/consts/const_let_eq_float.rs:143:1: 143:2
        StorageDead(_2);                 // scope 0 at ui/consts/const_let_eq_float.rs:143:1: 143:2
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:143:2: 143:2
    }
}

mul_assign::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:111:24: 111:25

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:111:24: 111:25
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:111:24: 111:25
    }
}

mul_assign::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:125:29: 125:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:125:29: 125:30
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:125:29: 125:30
    }
}

mul_assign::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:128:29: 128:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:128:29: 128:30
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:128:29: 128:30
    }
}

mul_assign::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:134:28: 134:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:134:28: 134:29
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:134:28: 134:29
    }
}

mul_assign::{constant#4}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:137:28: 137:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:137:28: 137:29
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:137:28: 137:29
    }
}

fn div_assign(_1: [f32; 1]) -> f32 {
    debug a => _1;                       // in scope 0 at ui/consts/const_let_eq_float.rs:145:21: 145:22
    let _2: f32;                         // in scope 0 at ui/consts/const_let_eq_float.rs:146:9: 146:10
    let _3: usize;                       // in scope 0 at ui/consts/const_let_eq_float.rs:146:15: 146:16
    let mut _4: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:148:31: 148:32
    let _6: usize;                       // in scope 0 at ui/consts/const_let_eq_float.rs:154:9: 154:10
    let mut _7: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:155:10: 155:16
    let _8: usize;                       // in scope 0 at ui/consts/const_let_eq_float.rs:155:14: 155:15
    let mut _11: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:163:10: 163:15
    let mut _12: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:164:10: 164:15
    let mut _14: Foo<f32>;               // in scope 0 at ui/consts/const_let_eq_float.rs:168:35: 168:43
    let _15: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:169:9: 169:10
    let mut _16: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:170:10: 170:18
    let _17: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:170:14: 170:15
    let mut _19: Bar<f32>;               // in scope 0 at ui/consts/const_let_eq_float.rs:171:35: 171:49
    let _20: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:172:9: 172:10
    let mut _21: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:173:10: 173:18
    let _22: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:173:14: 173:15
    let mut _24: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:177:38: 177:43
    let _25: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:178:13: 178:14
    let mut _26: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:179:10: 179:20
    let _27: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:179:18: 179:19
    let mut _29: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:180:43: 180:48
    let _30: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:181:11: 181:12
    let mut _31: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:182:10: 182:18
    let _32: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:182:16: 182:17
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq_float.rs:146:9: 146:10
        let mut _0: f32;                 // return place in scope 1 at ui/consts/const_let_eq_float.rs:148:9: 148:14
        scope 2 {
            debug d => _0;               // in scope 2 at ui/consts/const_let_eq_float.rs:148:9: 148:14
            let mut _5: [f32; 1];        // in scope 2 at ui/consts/const_let_eq_float.rs:153:9: 153:16
            scope 3 {
                debug arr => _5;         // in scope 3 at ui/consts/const_let_eq_float.rs:153:9: 153:16
                let mut _9: Foo<f32>;    // in scope 3 at ui/consts/const_let_eq_float.rs:159:9: 159:16
                scope 4 {
                    debug foo => _9;     // in scope 4 at ui/consts/const_let_eq_float.rs:159:9: 159:16
                    let mut _10: Bar<f32>; // in scope 4 at ui/consts/const_let_eq_float.rs:160:9: 160:16
                    scope 5 {
                        debug bar => _10; // in scope 5 at ui/consts/const_let_eq_float.rs:160:9: 160:16
                        let mut _13: [Foo<f32>; 1]; // in scope 5 at ui/consts/const_let_eq_float.rs:168:9: 168:16
                        scope 6 {
                            debug arr => _13; // in scope 6 at ui/consts/const_let_eq_float.rs:168:9: 168:16
                            let mut _18: [Bar<f32>; 1]; // in scope 6 at ui/consts/const_let_eq_float.rs:171:9: 171:16
                            scope 7 {
                                debug arr => _18; // in scope 7 at ui/consts/const_let_eq_float.rs:171:9: 171:16
                                let mut _23: Foo<[f32; 1]>; // in scope 7 at ui/consts/const_let_eq_float.rs:177:9: 177:16
                                scope 8 {
                                    debug arr => _23; // in scope 8 at ui/consts/const_let_eq_float.rs:177:9: 177:16
                                    let mut _28: Bar<[f32; 1]>; // in scope 8 at ui/consts/const_let_eq_float.rs:180:9: 180:16
                                    scope 9 {
                                        debug arr => _28; // in scope 9 at ui/consts/const_let_eq_float.rs:180:9: 180:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = const 0_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:146:15: 146:16
        _2 = _1[_3];                     // scope 0 at ui/consts/const_let_eq_float.rs:146:13: 146:17
        _4 = _2;                         // scope 1 at ui/consts/const_let_eq_float.rs:148:31: 148:32
        _0 = Mul(const 1024f32, move _4); // scope 1 at ui/consts/const_let_eq_float.rs:148:22: 148:32
        _0 = Div(_0, const 2f32);        // scope 2 at ui/consts/const_let_eq_float.rs:149:5: 149:13
        _5 = [const 4f32];               // scope 2 at ui/consts/const_let_eq_float.rs:153:29: 153:34
        _6 = const 0_usize;              // scope 3 at ui/consts/const_let_eq_float.rs:154:9: 154:10
        _5[_6] = Div(_5[_6], const 2f32); // scope 3 at ui/consts/const_let_eq_float.rs:154:5: 154:18
        _8 = const 0_usize;              // scope 3 at ui/consts/const_let_eq_float.rs:155:14: 155:15
        _7 = _5[_8];                     // scope 3 at ui/consts/const_let_eq_float.rs:155:10: 155:16
        _0 = Div(_0, move _7);           // scope 3 at ui/consts/const_let_eq_float.rs:155:5: 155:16
        _9 = const Foo::<f32>(4f32);     // scope 3 at ui/consts/const_let_eq_float.rs:159:29: 159:37
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:159:29: 159:37
                                         // + literal: Const { ty: Foo<f32>, val: Value(Scalar(0x40800000)) }
        _10 = const Bar::<f32> {{ x: 4f32 }}; // scope 4 at ui/consts/const_let_eq_float.rs:160:29: 160:43
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:160:29: 160:43
                                         // + literal: Const { ty: Bar<f32>, val: Value(Scalar(0x40800000)) }
        (_9.0: f32) = const 2f32;        // scope 5 at ui/consts/const_let_eq_float.rs:161:5: 161:17
        (_10.0: f32) = const 2f32;       // scope 5 at ui/consts/const_let_eq_float.rs:162:5: 162:17
        _11 = const 2f32;                // scope 5 at ui/consts/const_let_eq_float.rs:163:10: 163:15
        _0 = Div(_0, move _11);          // scope 5 at ui/consts/const_let_eq_float.rs:163:5: 163:15
        _12 = const 2f32;                // scope 5 at ui/consts/const_let_eq_float.rs:164:10: 164:15
        _0 = Div(_0, move _12);          // scope 5 at ui/consts/const_let_eq_float.rs:164:5: 164:15
        _14 = const Foo::<f32>(4f32);    // scope 5 at ui/consts/const_let_eq_float.rs:168:35: 168:43
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:168:35: 168:43
                                         // + literal: Const { ty: Foo<f32>, val: Value(Scalar(0x40800000)) }
        _13 = [move _14];                // scope 5 at ui/consts/const_let_eq_float.rs:168:34: 168:44
        _15 = const 0_usize;             // scope 6 at ui/consts/const_let_eq_float.rs:169:9: 169:10
        (_13[_15].0: f32) = Div((_13[_15].0: f32), const 2f32); // scope 6 at ui/consts/const_let_eq_float.rs:169:5: 169:20
        _17 = const 0_usize;             // scope 6 at ui/consts/const_let_eq_float.rs:170:14: 170:15
        _16 = (_13[_17].0: f32);         // scope 6 at ui/consts/const_let_eq_float.rs:170:10: 170:18
        _0 = Div(_0, move _16);          // scope 6 at ui/consts/const_let_eq_float.rs:170:5: 170:18
        _19 = const Bar::<f32> {{ x: 4f32 }}; // scope 6 at ui/consts/const_let_eq_float.rs:171:35: 171:49
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:171:35: 171:49
                                         // + literal: Const { ty: Bar<f32>, val: Value(Scalar(0x40800000)) }
        _18 = [move _19];                // scope 6 at ui/consts/const_let_eq_float.rs:171:34: 171:50
        _20 = const 0_usize;             // scope 7 at ui/consts/const_let_eq_float.rs:172:9: 172:10
        (_18[_20].0: f32) = Div((_18[_20].0: f32), const 2f32); // scope 7 at ui/consts/const_let_eq_float.rs:172:5: 172:20
        _22 = const 0_usize;             // scope 7 at ui/consts/const_let_eq_float.rs:173:14: 173:15
        _21 = (_18[_22].0: f32);         // scope 7 at ui/consts/const_let_eq_float.rs:173:10: 173:18
        _0 = Div(_0, move _21);          // scope 7 at ui/consts/const_let_eq_float.rs:173:5: 173:18
        _24 = [const 4f32];              // scope 7 at ui/consts/const_let_eq_float.rs:177:38: 177:43
        _23 = Foo::<[f32; 1]>(move _24); // scope 7 at ui/consts/const_let_eq_float.rs:177:34: 177:44
        _25 = const 0_usize;             // scope 8 at ui/consts/const_let_eq_float.rs:178:13: 178:14
        (_23.0: [f32; 1])[_25] = Div((_23.0: [f32; 1])[_25], const 2f32); // scope 8 at ui/consts/const_let_eq_float.rs:178:5: 178:22
        _27 = const 0_usize;             // scope 8 at ui/consts/const_let_eq_float.rs:179:18: 179:19
        _26 = (_23.0: [f32; 1])[_27];    // scope 8 at ui/consts/const_let_eq_float.rs:179:10: 179:20
        _0 = Div(_0, move _26);          // scope 8 at ui/consts/const_let_eq_float.rs:179:5: 179:20
        _29 = [const 4f32];              // scope 8 at ui/consts/const_let_eq_float.rs:180:43: 180:48
        _28 = Bar::<[f32; 1]> { x: move _29 }; // scope 8 at ui/consts/const_let_eq_float.rs:180:34: 180:50
        _30 = const 0_usize;             // scope 9 at ui/consts/const_let_eq_float.rs:181:11: 181:12
        (_28.0: [f32; 1])[_30] = Div((_28.0: [f32; 1])[_30], const 2f32); // scope 9 at ui/consts/const_let_eq_float.rs:181:5: 181:20
        _32 = const 0_usize;             // scope 9 at ui/consts/const_let_eq_float.rs:182:16: 182:17
        _31 = (_28.0: [f32; 1])[_32];    // scope 9 at ui/consts/const_let_eq_float.rs:182:10: 182:18
        _0 = Div(_0, move _31);          // scope 9 at ui/consts/const_let_eq_float.rs:182:5: 182:18
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:186:2: 186:2
    }
}

// MIR FOR CTFE
fn div_assign(_1: [f32; 1]) -> f32 {
    debug a => _1;                       // in scope 0 at ui/consts/const_let_eq_float.rs:145:21: 145:22
    let mut _0: f32;                     // return place in scope 0 at ui/consts/const_let_eq_float.rs:145:37: 145:40
    let _2: f32;                         // in scope 0 at ui/consts/const_let_eq_float.rs:146:9: 146:10
    let _3: usize;                       // in scope 0 at ui/consts/const_let_eq_float.rs:146:15: 146:16
    let mut _4: usize;                   // in scope 0 at ui/consts/const_let_eq_float.rs:146:13: 146:17
    let mut _5: bool;                    // in scope 0 at ui/consts/const_let_eq_float.rs:146:13: 146:17
    let mut _7: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:148:31: 148:32
    let _9: usize;                       // in scope 0 at ui/consts/const_let_eq_float.rs:154:9: 154:10
    let mut _10: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:154:5: 154:11
    let mut _11: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:154:5: 154:11
    let mut _12: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:155:10: 155:16
    let _13: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:155:14: 155:15
    let mut _14: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:155:10: 155:16
    let mut _15: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:155:10: 155:16
    let mut _18: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:163:10: 163:15
    let mut _19: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:164:10: 164:15
    let mut _21: Foo<f32>;               // in scope 0 at ui/consts/const_let_eq_float.rs:168:35: 168:43
    let _22: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:169:9: 169:10
    let mut _23: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:169:5: 169:11
    let mut _24: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:169:5: 169:11
    let mut _25: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:170:10: 170:18
    let _26: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:170:14: 170:15
    let mut _27: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:170:10: 170:16
    let mut _28: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:170:10: 170:16
    let mut _30: Bar<f32>;               // in scope 0 at ui/consts/const_let_eq_float.rs:171:35: 171:49
    let _31: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:172:9: 172:10
    let mut _32: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:172:5: 172:11
    let mut _33: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:172:5: 172:11
    let mut _34: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:173:10: 173:18
    let _35: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:173:14: 173:15
    let mut _36: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:173:10: 173:16
    let mut _37: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:173:10: 173:16
    let mut _39: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:177:38: 177:43
    let _40: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:178:13: 178:14
    let mut _41: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:178:5: 178:15
    let mut _42: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:178:5: 178:15
    let mut _43: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:179:10: 179:20
    let _44: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:179:18: 179:19
    let mut _45: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:179:10: 179:20
    let mut _46: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:179:10: 179:20
    let mut _48: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:180:43: 180:48
    let _49: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:181:11: 181:12
    let mut _50: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:181:5: 181:13
    let mut _51: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:181:5: 181:13
    let mut _52: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:182:10: 182:18
    let _53: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:182:16: 182:17
    let mut _54: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:182:10: 182:18
    let mut _55: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:182:10: 182:18
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq_float.rs:146:9: 146:10
        let mut _6: f32;                 // in scope 1 at ui/consts/const_let_eq_float.rs:148:9: 148:14
        scope 2 {
            debug d => _6;               // in scope 2 at ui/consts/const_let_eq_float.rs:148:9: 148:14
            let mut _8: [f32; 1];        // in scope 2 at ui/consts/const_let_eq_float.rs:153:9: 153:16
            scope 3 {
                debug arr => _8;         // in scope 3 at ui/consts/const_let_eq_float.rs:153:9: 153:16
                let mut _16: Foo<f32>;   // in scope 3 at ui/consts/const_let_eq_float.rs:159:9: 159:16
                scope 4 {
                    debug foo => _16;    // in scope 4 at ui/consts/const_let_eq_float.rs:159:9: 159:16
                    let mut _17: Bar<f32>; // in scope 4 at ui/consts/const_let_eq_float.rs:160:9: 160:16
                    scope 5 {
                        debug bar => _17; // in scope 5 at ui/consts/const_let_eq_float.rs:160:9: 160:16
                        let mut _20: [Foo<f32>; 1]; // in scope 5 at ui/consts/const_let_eq_float.rs:168:9: 168:16
                        scope 6 {
                            debug arr => _20; // in scope 6 at ui/consts/const_let_eq_float.rs:168:9: 168:16
                            let mut _29: [Bar<f32>; 1]; // in scope 6 at ui/consts/const_let_eq_float.rs:171:9: 171:16
                            scope 7 {
                                debug arr => _29; // in scope 7 at ui/consts/const_let_eq_float.rs:171:9: 171:16
                                let mut _38: Foo<[f32; 1]>; // in scope 7 at ui/consts/const_let_eq_float.rs:177:9: 177:16
                                scope 8 {
                                    debug arr => _38; // in scope 8 at ui/consts/const_let_eq_float.rs:177:9: 177:16
                                    let mut _47: Bar<[f32; 1]>; // in scope 8 at ui/consts/const_let_eq_float.rs:180:9: 180:16
                                    scope 9 {
                                        debug arr => _47; // in scope 9 at ui/consts/const_let_eq_float.rs:180:9: 180:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const_let_eq_float.rs:146:9: 146:10
        StorageLive(_3);                 // scope 0 at ui/consts/const_let_eq_float.rs:146:15: 146:16
        _3 = const 0_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:146:15: 146:16
        _4 = Len(_1);                    // scope 0 at ui/consts/const_let_eq_float.rs:146:13: 146:17
        _5 = Lt(_3, _4);                 // scope 0 at ui/consts/const_let_eq_float.rs:146:13: 146:17
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> bb1; // scope 0 at ui/consts/const_let_eq_float.rs:146:13: 146:17
    }

    bb1: {
        _2 = _1[_3];                     // scope 0 at ui/consts/const_let_eq_float.rs:146:13: 146:17
        StorageDead(_3);                 // scope 0 at ui/consts/const_let_eq_float.rs:146:17: 146:18
        StorageLive(_6);                 // scope 1 at ui/consts/const_let_eq_float.rs:148:9: 148:14
        StorageLive(_7);                 // scope 1 at ui/consts/const_let_eq_float.rs:148:31: 148:32
        _7 = _2;                         // scope 1 at ui/consts/const_let_eq_float.rs:148:31: 148:32
        _6 = Mul(const 1024f32, move _7); // scope 1 at ui/consts/const_let_eq_float.rs:148:22: 148:32
        StorageDead(_7);                 // scope 1 at ui/consts/const_let_eq_float.rs:148:31: 148:32
        _6 = Div(_6, const 2f32);        // scope 2 at ui/consts/const_let_eq_float.rs:149:5: 149:13
        StorageLive(_8);                 // scope 2 at ui/consts/const_let_eq_float.rs:153:9: 153:16
        _8 = [const 4f32];               // scope 2 at ui/consts/const_let_eq_float.rs:153:29: 153:34
        StorageLive(_9);                 // scope 3 at ui/consts/const_let_eq_float.rs:154:9: 154:10
        _9 = const 0_usize;              // scope 3 at ui/consts/const_let_eq_float.rs:154:9: 154:10
        _10 = Len(_8);                   // scope 3 at ui/consts/const_let_eq_float.rs:154:5: 154:11
        _11 = Lt(_9, _10);               // scope 3 at ui/consts/const_let_eq_float.rs:154:5: 154:11
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> bb2; // scope 3 at ui/consts/const_let_eq_float.rs:154:5: 154:11
    }

    bb2: {
        _8[_9] = Div(_8[_9], const 2f32); // scope 3 at ui/consts/const_let_eq_float.rs:154:5: 154:18
        StorageDead(_9);                 // scope 3 at ui/consts/const_let_eq_float.rs:154:18: 154:19
        StorageLive(_12);                // scope 3 at ui/consts/const_let_eq_float.rs:155:10: 155:16
        StorageLive(_13);                // scope 3 at ui/consts/const_let_eq_float.rs:155:14: 155:15
        _13 = const 0_usize;             // scope 3 at ui/consts/const_let_eq_float.rs:155:14: 155:15
        _14 = Len(_8);                   // scope 3 at ui/consts/const_let_eq_float.rs:155:10: 155:16
        _15 = Lt(_13, _14);              // scope 3 at ui/consts/const_let_eq_float.rs:155:10: 155:16
        assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _13) -> bb3; // scope 3 at ui/consts/const_let_eq_float.rs:155:10: 155:16
    }

    bb3: {
        _12 = _8[_13];                   // scope 3 at ui/consts/const_let_eq_float.rs:155:10: 155:16
        _6 = Div(_6, move _12);          // scope 3 at ui/consts/const_let_eq_float.rs:155:5: 155:16
        StorageDead(_12);                // scope 3 at ui/consts/const_let_eq_float.rs:155:15: 155:16
        StorageDead(_13);                // scope 3 at ui/consts/const_let_eq_float.rs:155:16: 155:17
        StorageLive(_16);                // scope 3 at ui/consts/const_let_eq_float.rs:159:9: 159:16
        _16 = Foo::<f32>(const 4f32);    // scope 3 at ui/consts/const_let_eq_float.rs:159:29: 159:37
        StorageLive(_17);                // scope 4 at ui/consts/const_let_eq_float.rs:160:9: 160:16
        _17 = Bar::<f32> { x: const 4f32 }; // scope 4 at ui/consts/const_let_eq_float.rs:160:29: 160:43
        (_16.0: f32) = Div((_16.0: f32), const 2f32); // scope 5 at ui/consts/const_let_eq_float.rs:161:5: 161:17
        (_17.0: f32) = Div((_17.0: f32), const 2f32); // scope 5 at ui/consts/const_let_eq_float.rs:162:5: 162:17
        StorageLive(_18);                // scope 5 at ui/consts/const_let_eq_float.rs:163:10: 163:15
        _18 = (_16.0: f32);              // scope 5 at ui/consts/const_let_eq_float.rs:163:10: 163:15
        _6 = Div(_6, move _18);          // scope 5 at ui/consts/const_let_eq_float.rs:163:5: 163:15
        StorageDead(_18);                // scope 5 at ui/consts/const_let_eq_float.rs:163:14: 163:15
        StorageLive(_19);                // scope 5 at ui/consts/const_let_eq_float.rs:164:10: 164:15
        _19 = (_17.0: f32);              // scope 5 at ui/consts/const_let_eq_float.rs:164:10: 164:15
        _6 = Div(_6, move _19);          // scope 5 at ui/consts/const_let_eq_float.rs:164:5: 164:15
        StorageDead(_19);                // scope 5 at ui/consts/const_let_eq_float.rs:164:14: 164:15
        StorageLive(_20);                // scope 5 at ui/consts/const_let_eq_float.rs:168:9: 168:16
        StorageLive(_21);                // scope 5 at ui/consts/const_let_eq_float.rs:168:35: 168:43
        _21 = Foo::<f32>(const 4f32);    // scope 5 at ui/consts/const_let_eq_float.rs:168:35: 168:43
        _20 = [move _21];                // scope 5 at ui/consts/const_let_eq_float.rs:168:34: 168:44
        StorageDead(_21);                // scope 5 at ui/consts/const_let_eq_float.rs:168:43: 168:44
        StorageLive(_22);                // scope 6 at ui/consts/const_let_eq_float.rs:169:9: 169:10
        _22 = const 0_usize;             // scope 6 at ui/consts/const_let_eq_float.rs:169:9: 169:10
        _23 = Len(_20);                  // scope 6 at ui/consts/const_let_eq_float.rs:169:5: 169:11
        _24 = Lt(_22, _23);              // scope 6 at ui/consts/const_let_eq_float.rs:169:5: 169:11
        assert(move _24, "index out of bounds: the length is {} but the index is {}", move _23, _22) -> bb4; // scope 6 at ui/consts/const_let_eq_float.rs:169:5: 169:11
    }

    bb4: {
        (_20[_22].0: f32) = Div((_20[_22].0: f32), const 2f32); // scope 6 at ui/consts/const_let_eq_float.rs:169:5: 169:20
        StorageDead(_22);                // scope 6 at ui/consts/const_let_eq_float.rs:169:20: 169:21
        StorageLive(_25);                // scope 6 at ui/consts/const_let_eq_float.rs:170:10: 170:18
        StorageLive(_26);                // scope 6 at ui/consts/const_let_eq_float.rs:170:14: 170:15
        _26 = const 0_usize;             // scope 6 at ui/consts/const_let_eq_float.rs:170:14: 170:15
        _27 = Len(_20);                  // scope 6 at ui/consts/const_let_eq_float.rs:170:10: 170:16
        _28 = Lt(_26, _27);              // scope 6 at ui/consts/const_let_eq_float.rs:170:10: 170:16
        assert(move _28, "index out of bounds: the length is {} but the index is {}", move _27, _26) -> bb5; // scope 6 at ui/consts/const_let_eq_float.rs:170:10: 170:16
    }

    bb5: {
        _25 = (_20[_26].0: f32);         // scope 6 at ui/consts/const_let_eq_float.rs:170:10: 170:18
        _6 = Div(_6, move _25);          // scope 6 at ui/consts/const_let_eq_float.rs:170:5: 170:18
        StorageDead(_25);                // scope 6 at ui/consts/const_let_eq_float.rs:170:17: 170:18
        StorageDead(_26);                // scope 6 at ui/consts/const_let_eq_float.rs:170:18: 170:19
        StorageLive(_29);                // scope 6 at ui/consts/const_let_eq_float.rs:171:9: 171:16
        StorageLive(_30);                // scope 6 at ui/consts/const_let_eq_float.rs:171:35: 171:49
        _30 = Bar::<f32> { x: const 4f32 }; // scope 6 at ui/consts/const_let_eq_float.rs:171:35: 171:49
        _29 = [move _30];                // scope 6 at ui/consts/const_let_eq_float.rs:171:34: 171:50
        StorageDead(_30);                // scope 6 at ui/consts/const_let_eq_float.rs:171:49: 171:50
        StorageLive(_31);                // scope 7 at ui/consts/const_let_eq_float.rs:172:9: 172:10
        _31 = const 0_usize;             // scope 7 at ui/consts/const_let_eq_float.rs:172:9: 172:10
        _32 = Len(_29);                  // scope 7 at ui/consts/const_let_eq_float.rs:172:5: 172:11
        _33 = Lt(_31, _32);              // scope 7 at ui/consts/const_let_eq_float.rs:172:5: 172:11
        assert(move _33, "index out of bounds: the length is {} but the index is {}", move _32, _31) -> bb6; // scope 7 at ui/consts/const_let_eq_float.rs:172:5: 172:11
    }

    bb6: {
        (_29[_31].0: f32) = Div((_29[_31].0: f32), const 2f32); // scope 7 at ui/consts/const_let_eq_float.rs:172:5: 172:20
        StorageDead(_31);                // scope 7 at ui/consts/const_let_eq_float.rs:172:20: 172:21
        StorageLive(_34);                // scope 7 at ui/consts/const_let_eq_float.rs:173:10: 173:18
        StorageLive(_35);                // scope 7 at ui/consts/const_let_eq_float.rs:173:14: 173:15
        _35 = const 0_usize;             // scope 7 at ui/consts/const_let_eq_float.rs:173:14: 173:15
        _36 = Len(_29);                  // scope 7 at ui/consts/const_let_eq_float.rs:173:10: 173:16
        _37 = Lt(_35, _36);              // scope 7 at ui/consts/const_let_eq_float.rs:173:10: 173:16
        assert(move _37, "index out of bounds: the length is {} but the index is {}", move _36, _35) -> bb7; // scope 7 at ui/consts/const_let_eq_float.rs:173:10: 173:16
    }

    bb7: {
        _34 = (_29[_35].0: f32);         // scope 7 at ui/consts/const_let_eq_float.rs:173:10: 173:18
        _6 = Div(_6, move _34);          // scope 7 at ui/consts/const_let_eq_float.rs:173:5: 173:18
        StorageDead(_34);                // scope 7 at ui/consts/const_let_eq_float.rs:173:17: 173:18
        StorageDead(_35);                // scope 7 at ui/consts/const_let_eq_float.rs:173:18: 173:19
        StorageLive(_38);                // scope 7 at ui/consts/const_let_eq_float.rs:177:9: 177:16
        StorageLive(_39);                // scope 7 at ui/consts/const_let_eq_float.rs:177:38: 177:43
        _39 = [const 4f32];              // scope 7 at ui/consts/const_let_eq_float.rs:177:38: 177:43
        _38 = Foo::<[f32; 1]>(move _39); // scope 7 at ui/consts/const_let_eq_float.rs:177:34: 177:44
        StorageDead(_39);                // scope 7 at ui/consts/const_let_eq_float.rs:177:43: 177:44
        StorageLive(_40);                // scope 8 at ui/consts/const_let_eq_float.rs:178:13: 178:14
        _40 = const 0_usize;             // scope 8 at ui/consts/const_let_eq_float.rs:178:13: 178:14
        _41 = Len((_38.0: [f32; 1]));    // scope 8 at ui/consts/const_let_eq_float.rs:178:5: 178:15
        _42 = Lt(_40, _41);              // scope 8 at ui/consts/const_let_eq_float.rs:178:5: 178:15
        assert(move _42, "index out of bounds: the length is {} but the index is {}", move _41, _40) -> bb8; // scope 8 at ui/consts/const_let_eq_float.rs:178:5: 178:15
    }

    bb8: {
        (_38.0: [f32; 1])[_40] = Div((_38.0: [f32; 1])[_40], const 2f32); // scope 8 at ui/consts/const_let_eq_float.rs:178:5: 178:22
        StorageDead(_40);                // scope 8 at ui/consts/const_let_eq_float.rs:178:22: 178:23
        StorageLive(_43);                // scope 8 at ui/consts/const_let_eq_float.rs:179:10: 179:20
        StorageLive(_44);                // scope 8 at ui/consts/const_let_eq_float.rs:179:18: 179:19
        _44 = const 0_usize;             // scope 8 at ui/consts/const_let_eq_float.rs:179:18: 179:19
        _45 = Len((_38.0: [f32; 1]));    // scope 8 at ui/consts/const_let_eq_float.rs:179:10: 179:20
        _46 = Lt(_44, _45);              // scope 8 at ui/consts/const_let_eq_float.rs:179:10: 179:20
        assert(move _46, "index out of bounds: the length is {} but the index is {}", move _45, _44) -> bb9; // scope 8 at ui/consts/const_let_eq_float.rs:179:10: 179:20
    }

    bb9: {
        _43 = (_38.0: [f32; 1])[_44];    // scope 8 at ui/consts/const_let_eq_float.rs:179:10: 179:20
        _6 = Div(_6, move _43);          // scope 8 at ui/consts/const_let_eq_float.rs:179:5: 179:20
        StorageDead(_43);                // scope 8 at ui/consts/const_let_eq_float.rs:179:19: 179:20
        StorageDead(_44);                // scope 8 at ui/consts/const_let_eq_float.rs:179:20: 179:21
        StorageLive(_47);                // scope 8 at ui/consts/const_let_eq_float.rs:180:9: 180:16
        StorageLive(_48);                // scope 8 at ui/consts/const_let_eq_float.rs:180:43: 180:48
        _48 = [const 4f32];              // scope 8 at ui/consts/const_let_eq_float.rs:180:43: 180:48
        _47 = Bar::<[f32; 1]> { x: move _48 }; // scope 8 at ui/consts/const_let_eq_float.rs:180:34: 180:50
        StorageDead(_48);                // scope 8 at ui/consts/const_let_eq_float.rs:180:49: 180:50
        StorageLive(_49);                // scope 9 at ui/consts/const_let_eq_float.rs:181:11: 181:12
        _49 = const 0_usize;             // scope 9 at ui/consts/const_let_eq_float.rs:181:11: 181:12
        _50 = Len((_47.0: [f32; 1]));    // scope 9 at ui/consts/const_let_eq_float.rs:181:5: 181:13
        _51 = Lt(_49, _50);              // scope 9 at ui/consts/const_let_eq_float.rs:181:5: 181:13
        assert(move _51, "index out of bounds: the length is {} but the index is {}", move _50, _49) -> bb10; // scope 9 at ui/consts/const_let_eq_float.rs:181:5: 181:13
    }

    bb10: {
        (_47.0: [f32; 1])[_49] = Div((_47.0: [f32; 1])[_49], const 2f32); // scope 9 at ui/consts/const_let_eq_float.rs:181:5: 181:20
        StorageDead(_49);                // scope 9 at ui/consts/const_let_eq_float.rs:181:20: 181:21
        StorageLive(_52);                // scope 9 at ui/consts/const_let_eq_float.rs:182:10: 182:18
        StorageLive(_53);                // scope 9 at ui/consts/const_let_eq_float.rs:182:16: 182:17
        _53 = const 0_usize;             // scope 9 at ui/consts/const_let_eq_float.rs:182:16: 182:17
        _54 = Len((_47.0: [f32; 1]));    // scope 9 at ui/consts/const_let_eq_float.rs:182:10: 182:18
        _55 = Lt(_53, _54);              // scope 9 at ui/consts/const_let_eq_float.rs:182:10: 182:18
        assert(move _55, "index out of bounds: the length is {} but the index is {}", move _54, _53) -> bb11; // scope 9 at ui/consts/const_let_eq_float.rs:182:10: 182:18
    }

    bb11: {
        _52 = (_47.0: [f32; 1])[_53];    // scope 9 at ui/consts/const_let_eq_float.rs:182:10: 182:18
        _6 = Div(_6, move _52);          // scope 9 at ui/consts/const_let_eq_float.rs:182:5: 182:18
        StorageDead(_52);                // scope 9 at ui/consts/const_let_eq_float.rs:182:17: 182:18
        StorageDead(_53);                // scope 9 at ui/consts/const_let_eq_float.rs:182:18: 182:19
        _0 = _6;                         // scope 9 at ui/consts/const_let_eq_float.rs:185:5: 185:6
        StorageDead(_47);                // scope 8 at ui/consts/const_let_eq_float.rs:186:1: 186:2
        StorageDead(_38);                // scope 7 at ui/consts/const_let_eq_float.rs:186:1: 186:2
        StorageDead(_29);                // scope 6 at ui/consts/const_let_eq_float.rs:186:1: 186:2
        StorageDead(_20);                // scope 5 at ui/consts/const_let_eq_float.rs:186:1: 186:2
        StorageDead(_17);                // scope 4 at ui/consts/const_let_eq_float.rs:186:1: 186:2
        StorageDead(_16);                // scope 3 at ui/consts/const_let_eq_float.rs:186:1: 186:2
        StorageDead(_8);                 // scope 2 at ui/consts/const_let_eq_float.rs:186:1: 186:2
        StorageDead(_6);                 // scope 1 at ui/consts/const_let_eq_float.rs:186:1: 186:2
        StorageDead(_2);                 // scope 0 at ui/consts/const_let_eq_float.rs:186:1: 186:2
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:186:2: 186:2
    }
}

div_assign::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:145:30: 145:31

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:145:30: 145:31
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:145:30: 145:31
    }
}

div_assign::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:153:24: 153:25

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:153:24: 153:25
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:153:24: 153:25
    }
}

div_assign::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:168:29: 168:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:168:29: 168:30
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:168:29: 168:30
    }
}

div_assign::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:171:29: 171:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:171:29: 171:30
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:171:29: 171:30
    }
}

div_assign::{constant#4}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:177:28: 177:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:177:28: 177:29
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:177:28: 177:29
    }
}

div_assign::{constant#5}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:180:28: 180:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:180:28: 180:29
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:180:28: 180:29
    }
}

fn rem_assign(_1: W) -> f32 {
    let _2: f32;                         // in scope 0 at ui/consts/const_let_eq_float.rs:188:23: 188:24
    let _4: usize;                       // in scope 0 at ui/consts/const_let_eq_float.rs:196:9: 196:10
    let mut _5: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:197:10: 197:22
    let mut _6: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:197:16: 197:22
    let _7: usize;                       // in scope 0 at ui/consts/const_let_eq_float.rs:197:20: 197:21
    let mut _10: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:205:10: 205:29
    let mut _12: Foo<f32>;               // in scope 0 at ui/consts/const_let_eq_float.rs:209:35: 209:43
    let _13: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:210:9: 210:10
    let mut _14: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:211:10: 211:24
    let mut _15: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:211:16: 211:24
    let _16: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:211:20: 211:21
    let mut _18: Bar<f32>;               // in scope 0 at ui/consts/const_let_eq_float.rs:213:35: 213:49
    let _19: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:214:9: 214:10
    let mut _20: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:215:10: 215:24
    let mut _21: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:215:16: 215:24
    let _22: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:215:20: 215:21
    let mut _24: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:219:38: 219:43
    let _25: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:220:13: 220:14
    let mut _26: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:221:10: 221:26
    let mut _27: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:221:16: 221:26
    let _28: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:221:24: 221:25
    let mut _30: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:222:43: 222:49
    let _31: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:223:11: 223:12
    let mut _32: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:224:10: 224:24
    let mut _33: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:224:16: 224:24
    let _34: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:224:22: 224:23
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq_float.rs:188:23: 188:24
        let mut _0: f32;                 // return place in scope 1 at ui/consts/const_let_eq_float.rs:190:9: 190:14
        scope 2 {
            debug d => _0;               // in scope 2 at ui/consts/const_let_eq_float.rs:190:9: 190:14
            let mut _3: [f32; 1];        // in scope 2 at ui/consts/const_let_eq_float.rs:195:9: 195:16
            scope 3 {
                debug arr => _3;         // in scope 3 at ui/consts/const_let_eq_float.rs:195:9: 195:16
                let mut _8: Foo<f32>;    // in scope 3 at ui/consts/const_let_eq_float.rs:201:9: 201:16
                scope 4 {
                    debug foo => _8;     // in scope 4 at ui/consts/const_let_eq_float.rs:201:9: 201:16
                    let mut _9: Bar<f32>; // in scope 4 at ui/consts/const_let_eq_float.rs:202:9: 202:16
                    scope 5 {
                        debug bar => _9; // in scope 5 at ui/consts/const_let_eq_float.rs:202:9: 202:16
                        let mut _11: [Foo<f32>; 1]; // in scope 5 at ui/consts/const_let_eq_float.rs:209:9: 209:16
                        scope 6 {
                            debug arr => _11; // in scope 6 at ui/consts/const_let_eq_float.rs:209:9: 209:16
                            let mut _17: [Bar<f32>; 1]; // in scope 6 at ui/consts/const_let_eq_float.rs:213:9: 213:16
                            scope 7 {
                                debug arr => _17; // in scope 7 at ui/consts/const_let_eq_float.rs:213:9: 213:16
                                let mut _23: Foo<[f32; 1]>; // in scope 7 at ui/consts/const_let_eq_float.rs:219:9: 219:16
                                scope 8 {
                                    debug arr => _23; // in scope 8 at ui/consts/const_let_eq_float.rs:219:9: 219:16
                                    let mut _29: Bar<[f32; 1]>; // in scope 8 at ui/consts/const_let_eq_float.rs:222:9: 222:16
                                    scope 9 {
                                        debug arr => _29; // in scope 9 at ui/consts/const_let_eq_float.rs:222:9: 222:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = (_1.0: f32);                // scope 0 at ui/consts/const_let_eq_float.rs:188:23: 188:24
        _0 = _2;                         // scope 1 at ui/consts/const_let_eq_float.rs:190:22: 190:23
        _0 = Rem(_0, const 10f32);       // scope 2 at ui/consts/const_let_eq_float.rs:191:5: 191:14
        _0 = Add(_0, const 10f32);       // scope 2 at ui/consts/const_let_eq_float.rs:192:5: 192:14
        _3 = [const 3f32];               // scope 2 at ui/consts/const_let_eq_float.rs:195:29: 195:34
        _4 = const 0_usize;              // scope 3 at ui/consts/const_let_eq_float.rs:196:9: 196:10
        _3[_4] = Rem(_3[_4], const 2f32); // scope 3 at ui/consts/const_let_eq_float.rs:196:5: 196:18
        _7 = const 0_usize;              // scope 3 at ui/consts/const_let_eq_float.rs:197:20: 197:21
        _6 = _3[_7];                     // scope 3 at ui/consts/const_let_eq_float.rs:197:16: 197:22
        _5 = Add(const 9f32, move _6);   // scope 3 at ui/consts/const_let_eq_float.rs:197:10: 197:22
        _0 = Rem(_0, move _5);           // scope 3 at ui/consts/const_let_eq_float.rs:197:5: 197:22
        _0 = Add(_0, const 10f32);       // scope 3 at ui/consts/const_let_eq_float.rs:198:5: 198:14
        _8 = const Foo::<f32>(5f32);     // scope 3 at ui/consts/const_let_eq_float.rs:201:29: 201:37
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:201:29: 201:37
                                         // + literal: Const { ty: Foo<f32>, val: Value(Scalar(0x40a00000)) }
        _9 = const Bar::<f32> {{ x: 7f32 }}; // scope 4 at ui/consts/const_let_eq_float.rs:202:29: 202:43
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:202:29: 202:43
                                         // + literal: Const { ty: Bar<f32>, val: Value(Scalar(0x40e00000)) }
        (_8.0: f32) = const 1f32;        // scope 5 at ui/consts/const_let_eq_float.rs:203:5: 203:17
        (_9.0: f32) = const 1f32;        // scope 5 at ui/consts/const_let_eq_float.rs:204:5: 204:17
        _10 = const 10f32;               // scope 5 at ui/consts/const_let_eq_float.rs:205:10: 205:29
        _0 = Rem(_0, move _10);          // scope 5 at ui/consts/const_let_eq_float.rs:205:5: 205:29
        _0 = Add(_0, const 10f32);       // scope 5 at ui/consts/const_let_eq_float.rs:206:5: 206:14
        _12 = const Foo::<f32>(4f32);    // scope 5 at ui/consts/const_let_eq_float.rs:209:35: 209:43
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:209:35: 209:43
                                         // + literal: Const { ty: Foo<f32>, val: Value(Scalar(0x40800000)) }
        _11 = [move _12];                // scope 5 at ui/consts/const_let_eq_float.rs:209:34: 209:44
        _13 = const 0_usize;             // scope 6 at ui/consts/const_let_eq_float.rs:210:9: 210:10
        (_11[_13].0: f32) = Rem((_11[_13].0: f32), const 3f32); // scope 6 at ui/consts/const_let_eq_float.rs:210:5: 210:20
        _16 = const 0_usize;             // scope 6 at ui/consts/const_let_eq_float.rs:211:20: 211:21
        _15 = (_11[_16].0: f32);         // scope 6 at ui/consts/const_let_eq_float.rs:211:16: 211:24
        _14 = Add(const 9f32, move _15); // scope 6 at ui/consts/const_let_eq_float.rs:211:10: 211:24
        _0 = Rem(_0, move _14);          // scope 6 at ui/consts/const_let_eq_float.rs:211:5: 211:24
        _0 = Add(_0, const 10f32);       // scope 6 at ui/consts/const_let_eq_float.rs:212:5: 212:14
        _18 = const Bar::<f32> {{ x: 7f32 }}; // scope 6 at ui/consts/const_let_eq_float.rs:213:35: 213:49
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:213:35: 213:49
                                         // + literal: Const { ty: Bar<f32>, val: Value(Scalar(0x40e00000)) }
        _17 = [move _18];                // scope 6 at ui/consts/const_let_eq_float.rs:213:34: 213:50
        _19 = const 0_usize;             // scope 7 at ui/consts/const_let_eq_float.rs:214:9: 214:10
        (_17[_19].0: f32) = Rem((_17[_19].0: f32), const 3f32); // scope 7 at ui/consts/const_let_eq_float.rs:214:5: 214:20
        _22 = const 0_usize;             // scope 7 at ui/consts/const_let_eq_float.rs:215:20: 215:21
        _21 = (_17[_22].0: f32);         // scope 7 at ui/consts/const_let_eq_float.rs:215:16: 215:24
        _20 = Add(const 9f32, move _21); // scope 7 at ui/consts/const_let_eq_float.rs:215:10: 215:24
        _0 = Rem(_0, move _20);          // scope 7 at ui/consts/const_let_eq_float.rs:215:5: 215:24
        _0 = Add(_0, const 10f32);       // scope 7 at ui/consts/const_let_eq_float.rs:216:5: 216:14
        _24 = [const 6f32];              // scope 7 at ui/consts/const_let_eq_float.rs:219:38: 219:43
        _23 = Foo::<[f32; 1]>(move _24); // scope 7 at ui/consts/const_let_eq_float.rs:219:34: 219:44
        _25 = const 0_usize;             // scope 8 at ui/consts/const_let_eq_float.rs:220:13: 220:14
        (_23.0: [f32; 1])[_25] = Rem((_23.0: [f32; 1])[_25], const 5f32); // scope 8 at ui/consts/const_let_eq_float.rs:220:5: 220:22
        _28 = const 0_usize;             // scope 8 at ui/consts/const_let_eq_float.rs:221:24: 221:25
        _27 = (_23.0: [f32; 1])[_28];    // scope 8 at ui/consts/const_let_eq_float.rs:221:16: 221:26
        _26 = Add(const 9f32, move _27); // scope 8 at ui/consts/const_let_eq_float.rs:221:10: 221:26
        _0 = Rem(_0, move _26);          // scope 8 at ui/consts/const_let_eq_float.rs:221:5: 221:26
        _30 = [const 11f32];             // scope 8 at ui/consts/const_let_eq_float.rs:222:43: 222:49
        _29 = Bar::<[f32; 1]> { x: move _30 }; // scope 8 at ui/consts/const_let_eq_float.rs:222:34: 222:51
        _31 = const 0_usize;             // scope 9 at ui/consts/const_let_eq_float.rs:223:11: 223:12
        (_29.0: [f32; 1])[_31] = Rem((_29.0: [f32; 1])[_31], const 5f32); // scope 9 at ui/consts/const_let_eq_float.rs:223:5: 223:20
        _34 = const 0_usize;             // scope 9 at ui/consts/const_let_eq_float.rs:224:22: 224:23
        _33 = (_29.0: [f32; 1])[_34];    // scope 9 at ui/consts/const_let_eq_float.rs:224:16: 224:24
        _32 = Add(const 9f32, move _33); // scope 9 at ui/consts/const_let_eq_float.rs:224:10: 224:24
        _0 = Rem(_0, move _32);          // scope 9 at ui/consts/const_let_eq_float.rs:224:5: 224:24
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:227:2: 227:2
    }
}

// MIR FOR CTFE
fn rem_assign(_1: W) -> f32 {
    let mut _0: f32;                     // return place in scope 0 at ui/consts/const_let_eq_float.rs:188:33: 188:36
    let _2: f32;                         // in scope 0 at ui/consts/const_let_eq_float.rs:188:23: 188:24
    let _5: usize;                       // in scope 0 at ui/consts/const_let_eq_float.rs:196:9: 196:10
    let mut _6: usize;                   // in scope 0 at ui/consts/const_let_eq_float.rs:196:5: 196:11
    let mut _7: bool;                    // in scope 0 at ui/consts/const_let_eq_float.rs:196:5: 196:11
    let mut _8: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:197:10: 197:22
    let mut _9: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:197:16: 197:22
    let _10: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:197:20: 197:21
    let mut _11: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:197:16: 197:22
    let mut _12: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:197:16: 197:22
    let mut _15: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:205:10: 205:29
    let mut _16: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:205:10: 205:21
    let mut _17: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:205:16: 205:21
    let mut _18: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:205:24: 205:29
    let mut _20: Foo<f32>;               // in scope 0 at ui/consts/const_let_eq_float.rs:209:35: 209:43
    let _21: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:210:9: 210:10
    let mut _22: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:210:5: 210:11
    let mut _23: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:210:5: 210:11
    let mut _24: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:211:10: 211:24
    let mut _25: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:211:16: 211:24
    let _26: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:211:20: 211:21
    let mut _27: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:211:16: 211:22
    let mut _28: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:211:16: 211:22
    let mut _30: Bar<f32>;               // in scope 0 at ui/consts/const_let_eq_float.rs:213:35: 213:49
    let _31: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:214:9: 214:10
    let mut _32: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:214:5: 214:11
    let mut _33: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:214:5: 214:11
    let mut _34: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:215:10: 215:24
    let mut _35: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:215:16: 215:24
    let _36: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:215:20: 215:21
    let mut _37: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:215:16: 215:22
    let mut _38: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:215:16: 215:22
    let mut _40: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:219:38: 219:43
    let _41: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:220:13: 220:14
    let mut _42: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:220:5: 220:15
    let mut _43: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:220:5: 220:15
    let mut _44: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:221:10: 221:26
    let mut _45: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:221:16: 221:26
    let _46: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:221:24: 221:25
    let mut _47: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:221:16: 221:26
    let mut _48: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:221:16: 221:26
    let mut _50: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:222:43: 222:49
    let _51: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:223:11: 223:12
    let mut _52: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:223:5: 223:13
    let mut _53: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:223:5: 223:13
    let mut _54: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:224:10: 224:24
    let mut _55: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:224:16: 224:24
    let _56: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:224:22: 224:23
    let mut _57: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:224:16: 224:24
    let mut _58: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:224:16: 224:24
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq_float.rs:188:23: 188:24
        let mut _3: f32;                 // in scope 1 at ui/consts/const_let_eq_float.rs:190:9: 190:14
        scope 2 {
            debug d => _3;               // in scope 2 at ui/consts/const_let_eq_float.rs:190:9: 190:14
            let mut _4: [f32; 1];        // in scope 2 at ui/consts/const_let_eq_float.rs:195:9: 195:16
            scope 3 {
                debug arr => _4;         // in scope 3 at ui/consts/const_let_eq_float.rs:195:9: 195:16
                let mut _13: Foo<f32>;   // in scope 3 at ui/consts/const_let_eq_float.rs:201:9: 201:16
                scope 4 {
                    debug foo => _13;    // in scope 4 at ui/consts/const_let_eq_float.rs:201:9: 201:16
                    let mut _14: Bar<f32>; // in scope 4 at ui/consts/const_let_eq_float.rs:202:9: 202:16
                    scope 5 {
                        debug bar => _14; // in scope 5 at ui/consts/const_let_eq_float.rs:202:9: 202:16
                        let mut _19: [Foo<f32>; 1]; // in scope 5 at ui/consts/const_let_eq_float.rs:209:9: 209:16
                        scope 6 {
                            debug arr => _19; // in scope 6 at ui/consts/const_let_eq_float.rs:209:9: 209:16
                            let mut _29: [Bar<f32>; 1]; // in scope 6 at ui/consts/const_let_eq_float.rs:213:9: 213:16
                            scope 7 {
                                debug arr => _29; // in scope 7 at ui/consts/const_let_eq_float.rs:213:9: 213:16
                                let mut _39: Foo<[f32; 1]>; // in scope 7 at ui/consts/const_let_eq_float.rs:219:9: 219:16
                                scope 8 {
                                    debug arr => _39; // in scope 8 at ui/consts/const_let_eq_float.rs:219:9: 219:16
                                    let mut _49: Bar<[f32; 1]>; // in scope 8 at ui/consts/const_let_eq_float.rs:222:9: 222:16
                                    scope 9 {
                                        debug arr => _49; // in scope 9 at ui/consts/const_let_eq_float.rs:222:9: 222:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const_let_eq_float.rs:188:23: 188:24
        _2 = (_1.0: f32);                // scope 0 at ui/consts/const_let_eq_float.rs:188:23: 188:24
        StorageLive(_3);                 // scope 1 at ui/consts/const_let_eq_float.rs:190:9: 190:14
        _3 = _2;                         // scope 1 at ui/consts/const_let_eq_float.rs:190:22: 190:23
        _3 = Rem(_3, const 10f32);       // scope 2 at ui/consts/const_let_eq_float.rs:191:5: 191:14
        _3 = Add(_3, const 10f32);       // scope 2 at ui/consts/const_let_eq_float.rs:192:5: 192:14
        StorageLive(_4);                 // scope 2 at ui/consts/const_let_eq_float.rs:195:9: 195:16
        _4 = [const 3f32];               // scope 2 at ui/consts/const_let_eq_float.rs:195:29: 195:34
        StorageLive(_5);                 // scope 3 at ui/consts/const_let_eq_float.rs:196:9: 196:10
        _5 = const 0_usize;              // scope 3 at ui/consts/const_let_eq_float.rs:196:9: 196:10
        _6 = Len(_4);                    // scope 3 at ui/consts/const_let_eq_float.rs:196:5: 196:11
        _7 = Lt(_5, _6);                 // scope 3 at ui/consts/const_let_eq_float.rs:196:5: 196:11
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> bb1; // scope 3 at ui/consts/const_let_eq_float.rs:196:5: 196:11
    }

    bb1: {
        _4[_5] = Rem(_4[_5], const 2f32); // scope 3 at ui/consts/const_let_eq_float.rs:196:5: 196:18
        StorageDead(_5);                 // scope 3 at ui/consts/const_let_eq_float.rs:196:18: 196:19
        StorageLive(_8);                 // scope 3 at ui/consts/const_let_eq_float.rs:197:10: 197:22
        StorageLive(_9);                 // scope 3 at ui/consts/const_let_eq_float.rs:197:16: 197:22
        StorageLive(_10);                // scope 3 at ui/consts/const_let_eq_float.rs:197:20: 197:21
        _10 = const 0_usize;             // scope 3 at ui/consts/const_let_eq_float.rs:197:20: 197:21
        _11 = Len(_4);                   // scope 3 at ui/consts/const_let_eq_float.rs:197:16: 197:22
        _12 = Lt(_10, _11);              // scope 3 at ui/consts/const_let_eq_float.rs:197:16: 197:22
        assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> bb2; // scope 3 at ui/consts/const_let_eq_float.rs:197:16: 197:22
    }

    bb2: {
        _9 = _4[_10];                    // scope 3 at ui/consts/const_let_eq_float.rs:197:16: 197:22
        _8 = Add(const 9f32, move _9);   // scope 3 at ui/consts/const_let_eq_float.rs:197:10: 197:22
        StorageDead(_9);                 // scope 3 at ui/consts/const_let_eq_float.rs:197:21: 197:22
        _3 = Rem(_3, move _8);           // scope 3 at ui/consts/const_let_eq_float.rs:197:5: 197:22
        StorageDead(_8);                 // scope 3 at ui/consts/const_let_eq_float.rs:197:21: 197:22
        StorageDead(_10);                // scope 3 at ui/consts/const_let_eq_float.rs:197:22: 197:23
        _3 = Add(_3, const 10f32);       // scope 3 at ui/consts/const_let_eq_float.rs:198:5: 198:14
        StorageLive(_13);                // scope 3 at ui/consts/const_let_eq_float.rs:201:9: 201:16
        _13 = Foo::<f32>(const 5f32);    // scope 3 at ui/consts/const_let_eq_float.rs:201:29: 201:37
        StorageLive(_14);                // scope 4 at ui/consts/const_let_eq_float.rs:202:9: 202:16
        _14 = Bar::<f32> { x: const 7f32 }; // scope 4 at ui/consts/const_let_eq_float.rs:202:29: 202:43
        (_13.0: f32) = Rem((_13.0: f32), const 2f32); // scope 5 at ui/consts/const_let_eq_float.rs:203:5: 203:17
        (_14.0: f32) = Rem((_14.0: f32), const 2f32); // scope 5 at ui/consts/const_let_eq_float.rs:204:5: 204:17
        StorageLive(_15);                // scope 5 at ui/consts/const_let_eq_float.rs:205:10: 205:29
        StorageLive(_16);                // scope 5 at ui/consts/const_let_eq_float.rs:205:10: 205:21
        StorageLive(_17);                // scope 5 at ui/consts/const_let_eq_float.rs:205:16: 205:21
        _17 = (_13.0: f32);              // scope 5 at ui/consts/const_let_eq_float.rs:205:16: 205:21
        _16 = Add(const 8f32, move _17); // scope 5 at ui/consts/const_let_eq_float.rs:205:10: 205:21
        StorageDead(_17);                // scope 5 at ui/consts/const_let_eq_float.rs:205:20: 205:21
        StorageLive(_18);                // scope 5 at ui/consts/const_let_eq_float.rs:205:24: 205:29
        _18 = (_14.0: f32);              // scope 5 at ui/consts/const_let_eq_float.rs:205:24: 205:29
        _15 = Add(move _16, move _18);   // scope 5 at ui/consts/const_let_eq_float.rs:205:10: 205:29
        StorageDead(_18);                // scope 5 at ui/consts/const_let_eq_float.rs:205:28: 205:29
        StorageDead(_16);                // scope 5 at ui/consts/const_let_eq_float.rs:205:28: 205:29
        _3 = Rem(_3, move _15);          // scope 5 at ui/consts/const_let_eq_float.rs:205:5: 205:29
        StorageDead(_15);                // scope 5 at ui/consts/const_let_eq_float.rs:205:28: 205:29
        _3 = Add(_3, const 10f32);       // scope 5 at ui/consts/const_let_eq_float.rs:206:5: 206:14
        StorageLive(_19);                // scope 5 at ui/consts/const_let_eq_float.rs:209:9: 209:16
        StorageLive(_20);                // scope 5 at ui/consts/const_let_eq_float.rs:209:35: 209:43
        _20 = Foo::<f32>(const 4f32);    // scope 5 at ui/consts/const_let_eq_float.rs:209:35: 209:43
        _19 = [move _20];                // scope 5 at ui/consts/const_let_eq_float.rs:209:34: 209:44
        StorageDead(_20);                // scope 5 at ui/consts/const_let_eq_float.rs:209:43: 209:44
        StorageLive(_21);                // scope 6 at ui/consts/const_let_eq_float.rs:210:9: 210:10
        _21 = const 0_usize;             // scope 6 at ui/consts/const_let_eq_float.rs:210:9: 210:10
        _22 = Len(_19);                  // scope 6 at ui/consts/const_let_eq_float.rs:210:5: 210:11
        _23 = Lt(_21, _22);              // scope 6 at ui/consts/const_let_eq_float.rs:210:5: 210:11
        assert(move _23, "index out of bounds: the length is {} but the index is {}", move _22, _21) -> bb3; // scope 6 at ui/consts/const_let_eq_float.rs:210:5: 210:11
    }

    bb3: {
        (_19[_21].0: f32) = Rem((_19[_21].0: f32), const 3f32); // scope 6 at ui/consts/const_let_eq_float.rs:210:5: 210:20
        StorageDead(_21);                // scope 6 at ui/consts/const_let_eq_float.rs:210:20: 210:21
        StorageLive(_24);                // scope 6 at ui/consts/const_let_eq_float.rs:211:10: 211:24
        StorageLive(_25);                // scope 6 at ui/consts/const_let_eq_float.rs:211:16: 211:24
        StorageLive(_26);                // scope 6 at ui/consts/const_let_eq_float.rs:211:20: 211:21
        _26 = const 0_usize;             // scope 6 at ui/consts/const_let_eq_float.rs:211:20: 211:21
        _27 = Len(_19);                  // scope 6 at ui/consts/const_let_eq_float.rs:211:16: 211:22
        _28 = Lt(_26, _27);              // scope 6 at ui/consts/const_let_eq_float.rs:211:16: 211:22
        assert(move _28, "index out of bounds: the length is {} but the index is {}", move _27, _26) -> bb4; // scope 6 at ui/consts/const_let_eq_float.rs:211:16: 211:22
    }

    bb4: {
        _25 = (_19[_26].0: f32);         // scope 6 at ui/consts/const_let_eq_float.rs:211:16: 211:24
        _24 = Add(const 9f32, move _25); // scope 6 at ui/consts/const_let_eq_float.rs:211:10: 211:24
        StorageDead(_25);                // scope 6 at ui/consts/const_let_eq_float.rs:211:23: 211:24
        _3 = Rem(_3, move _24);          // scope 6 at ui/consts/const_let_eq_float.rs:211:5: 211:24
        StorageDead(_24);                // scope 6 at ui/consts/const_let_eq_float.rs:211:23: 211:24
        StorageDead(_26);                // scope 6 at ui/consts/const_let_eq_float.rs:211:24: 211:25
        _3 = Add(_3, const 10f32);       // scope 6 at ui/consts/const_let_eq_float.rs:212:5: 212:14
        StorageLive(_29);                // scope 6 at ui/consts/const_let_eq_float.rs:213:9: 213:16
        StorageLive(_30);                // scope 6 at ui/consts/const_let_eq_float.rs:213:35: 213:49
        _30 = Bar::<f32> { x: const 7f32 }; // scope 6 at ui/consts/const_let_eq_float.rs:213:35: 213:49
        _29 = [move _30];                // scope 6 at ui/consts/const_let_eq_float.rs:213:34: 213:50
        StorageDead(_30);                // scope 6 at ui/consts/const_let_eq_float.rs:213:49: 213:50
        StorageLive(_31);                // scope 7 at ui/consts/const_let_eq_float.rs:214:9: 214:10
        _31 = const 0_usize;             // scope 7 at ui/consts/const_let_eq_float.rs:214:9: 214:10
        _32 = Len(_29);                  // scope 7 at ui/consts/const_let_eq_float.rs:214:5: 214:11
        _33 = Lt(_31, _32);              // scope 7 at ui/consts/const_let_eq_float.rs:214:5: 214:11
        assert(move _33, "index out of bounds: the length is {} but the index is {}", move _32, _31) -> bb5; // scope 7 at ui/consts/const_let_eq_float.rs:214:5: 214:11
    }

    bb5: {
        (_29[_31].0: f32) = Rem((_29[_31].0: f32), const 3f32); // scope 7 at ui/consts/const_let_eq_float.rs:214:5: 214:20
        StorageDead(_31);                // scope 7 at ui/consts/const_let_eq_float.rs:214:20: 214:21
        StorageLive(_34);                // scope 7 at ui/consts/const_let_eq_float.rs:215:10: 215:24
        StorageLive(_35);                // scope 7 at ui/consts/const_let_eq_float.rs:215:16: 215:24
        StorageLive(_36);                // scope 7 at ui/consts/const_let_eq_float.rs:215:20: 215:21
        _36 = const 0_usize;             // scope 7 at ui/consts/const_let_eq_float.rs:215:20: 215:21
        _37 = Len(_29);                  // scope 7 at ui/consts/const_let_eq_float.rs:215:16: 215:22
        _38 = Lt(_36, _37);              // scope 7 at ui/consts/const_let_eq_float.rs:215:16: 215:22
        assert(move _38, "index out of bounds: the length is {} but the index is {}", move _37, _36) -> bb6; // scope 7 at ui/consts/const_let_eq_float.rs:215:16: 215:22
    }

    bb6: {
        _35 = (_29[_36].0: f32);         // scope 7 at ui/consts/const_let_eq_float.rs:215:16: 215:24
        _34 = Add(const 9f32, move _35); // scope 7 at ui/consts/const_let_eq_float.rs:215:10: 215:24
        StorageDead(_35);                // scope 7 at ui/consts/const_let_eq_float.rs:215:23: 215:24
        _3 = Rem(_3, move _34);          // scope 7 at ui/consts/const_let_eq_float.rs:215:5: 215:24
        StorageDead(_34);                // scope 7 at ui/consts/const_let_eq_float.rs:215:23: 215:24
        StorageDead(_36);                // scope 7 at ui/consts/const_let_eq_float.rs:215:24: 215:25
        _3 = Add(_3, const 10f32);       // scope 7 at ui/consts/const_let_eq_float.rs:216:5: 216:14
        StorageLive(_39);                // scope 7 at ui/consts/const_let_eq_float.rs:219:9: 219:16
        StorageLive(_40);                // scope 7 at ui/consts/const_let_eq_float.rs:219:38: 219:43
        _40 = [const 6f32];              // scope 7 at ui/consts/const_let_eq_float.rs:219:38: 219:43
        _39 = Foo::<[f32; 1]>(move _40); // scope 7 at ui/consts/const_let_eq_float.rs:219:34: 219:44
        StorageDead(_40);                // scope 7 at ui/consts/const_let_eq_float.rs:219:43: 219:44
        StorageLive(_41);                // scope 8 at ui/consts/const_let_eq_float.rs:220:13: 220:14
        _41 = const 0_usize;             // scope 8 at ui/consts/const_let_eq_float.rs:220:13: 220:14
        _42 = Len((_39.0: [f32; 1]));    // scope 8 at ui/consts/const_let_eq_float.rs:220:5: 220:15
        _43 = Lt(_41, _42);              // scope 8 at ui/consts/const_let_eq_float.rs:220:5: 220:15
        assert(move _43, "index out of bounds: the length is {} but the index is {}", move _42, _41) -> bb7; // scope 8 at ui/consts/const_let_eq_float.rs:220:5: 220:15
    }

    bb7: {
        (_39.0: [f32; 1])[_41] = Rem((_39.0: [f32; 1])[_41], const 5f32); // scope 8 at ui/consts/const_let_eq_float.rs:220:5: 220:22
        StorageDead(_41);                // scope 8 at ui/consts/const_let_eq_float.rs:220:22: 220:23
        StorageLive(_44);                // scope 8 at ui/consts/const_let_eq_float.rs:221:10: 221:26
        StorageLive(_45);                // scope 8 at ui/consts/const_let_eq_float.rs:221:16: 221:26
        StorageLive(_46);                // scope 8 at ui/consts/const_let_eq_float.rs:221:24: 221:25
        _46 = const 0_usize;             // scope 8 at ui/consts/const_let_eq_float.rs:221:24: 221:25
        _47 = Len((_39.0: [f32; 1]));    // scope 8 at ui/consts/const_let_eq_float.rs:221:16: 221:26
        _48 = Lt(_46, _47);              // scope 8 at ui/consts/const_let_eq_float.rs:221:16: 221:26
        assert(move _48, "index out of bounds: the length is {} but the index is {}", move _47, _46) -> bb8; // scope 8 at ui/consts/const_let_eq_float.rs:221:16: 221:26
    }

    bb8: {
        _45 = (_39.0: [f32; 1])[_46];    // scope 8 at ui/consts/const_let_eq_float.rs:221:16: 221:26
        _44 = Add(const 9f32, move _45); // scope 8 at ui/consts/const_let_eq_float.rs:221:10: 221:26
        StorageDead(_45);                // scope 8 at ui/consts/const_let_eq_float.rs:221:25: 221:26
        _3 = Rem(_3, move _44);          // scope 8 at ui/consts/const_let_eq_float.rs:221:5: 221:26
        StorageDead(_44);                // scope 8 at ui/consts/const_let_eq_float.rs:221:25: 221:26
        StorageDead(_46);                // scope 8 at ui/consts/const_let_eq_float.rs:221:26: 221:27
        StorageLive(_49);                // scope 8 at ui/consts/const_let_eq_float.rs:222:9: 222:16
        StorageLive(_50);                // scope 8 at ui/consts/const_let_eq_float.rs:222:43: 222:49
        _50 = [const 11f32];             // scope 8 at ui/consts/const_let_eq_float.rs:222:43: 222:49
        _49 = Bar::<[f32; 1]> { x: move _50 }; // scope 8 at ui/consts/const_let_eq_float.rs:222:34: 222:51
        StorageDead(_50);                // scope 8 at ui/consts/const_let_eq_float.rs:222:50: 222:51
        StorageLive(_51);                // scope 9 at ui/consts/const_let_eq_float.rs:223:11: 223:12
        _51 = const 0_usize;             // scope 9 at ui/consts/const_let_eq_float.rs:223:11: 223:12
        _52 = Len((_49.0: [f32; 1]));    // scope 9 at ui/consts/const_let_eq_float.rs:223:5: 223:13
        _53 = Lt(_51, _52);              // scope 9 at ui/consts/const_let_eq_float.rs:223:5: 223:13
        assert(move _53, "index out of bounds: the length is {} but the index is {}", move _52, _51) -> bb9; // scope 9 at ui/consts/const_let_eq_float.rs:223:5: 223:13
    }

    bb9: {
        (_49.0: [f32; 1])[_51] = Rem((_49.0: [f32; 1])[_51], const 5f32); // scope 9 at ui/consts/const_let_eq_float.rs:223:5: 223:20
        StorageDead(_51);                // scope 9 at ui/consts/const_let_eq_float.rs:223:20: 223:21
        StorageLive(_54);                // scope 9 at ui/consts/const_let_eq_float.rs:224:10: 224:24
        StorageLive(_55);                // scope 9 at ui/consts/const_let_eq_float.rs:224:16: 224:24
        StorageLive(_56);                // scope 9 at ui/consts/const_let_eq_float.rs:224:22: 224:23
        _56 = const 0_usize;             // scope 9 at ui/consts/const_let_eq_float.rs:224:22: 224:23
        _57 = Len((_49.0: [f32; 1]));    // scope 9 at ui/consts/const_let_eq_float.rs:224:16: 224:24
        _58 = Lt(_56, _57);              // scope 9 at ui/consts/const_let_eq_float.rs:224:16: 224:24
        assert(move _58, "index out of bounds: the length is {} but the index is {}", move _57, _56) -> bb10; // scope 9 at ui/consts/const_let_eq_float.rs:224:16: 224:24
    }

    bb10: {
        _55 = (_49.0: [f32; 1])[_56];    // scope 9 at ui/consts/const_let_eq_float.rs:224:16: 224:24
        _54 = Add(const 9f32, move _55); // scope 9 at ui/consts/const_let_eq_float.rs:224:10: 224:24
        StorageDead(_55);                // scope 9 at ui/consts/const_let_eq_float.rs:224:23: 224:24
        _3 = Rem(_3, move _54);          // scope 9 at ui/consts/const_let_eq_float.rs:224:5: 224:24
        StorageDead(_54);                // scope 9 at ui/consts/const_let_eq_float.rs:224:23: 224:24
        StorageDead(_56);                // scope 9 at ui/consts/const_let_eq_float.rs:224:24: 224:25
        _0 = _3;                         // scope 9 at ui/consts/const_let_eq_float.rs:226:5: 226:6
        StorageDead(_49);                // scope 8 at ui/consts/const_let_eq_float.rs:227:1: 227:2
        StorageDead(_39);                // scope 7 at ui/consts/const_let_eq_float.rs:227:1: 227:2
        StorageDead(_29);                // scope 6 at ui/consts/const_let_eq_float.rs:227:1: 227:2
        StorageDead(_19);                // scope 5 at ui/consts/const_let_eq_float.rs:227:1: 227:2
        StorageDead(_14);                // scope 4 at ui/consts/const_let_eq_float.rs:227:1: 227:2
        StorageDead(_13);                // scope 3 at ui/consts/const_let_eq_float.rs:227:1: 227:2
        StorageDead(_4);                 // scope 2 at ui/consts/const_let_eq_float.rs:227:1: 227:2
        StorageDead(_3);                 // scope 1 at ui/consts/const_let_eq_float.rs:227:1: 227:2
        StorageDead(_2);                 // scope 0 at ui/consts/const_let_eq_float.rs:227:1: 227:2
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:227:2: 227:2
    }
}

rem_assign::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:195:24: 195:25

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:195:24: 195:25
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:195:24: 195:25
    }
}

rem_assign::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:209:29: 209:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:209:29: 209:30
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:209:29: 209:30
    }
}

rem_assign::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:213:29: 213:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:213:29: 213:30
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:213:29: 213:30
    }
}

rem_assign::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:219:28: 219:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:219:28: 219:29
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:219:28: 219:29
    }
}

rem_assign::{constant#4}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:222:28: 222:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:222:28: 222:29
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:222:28: 222:29
    }
}

fn sub_assign(_1: W) -> f32 {
    let _2: f32;                         // in scope 0 at ui/consts/const_let_eq_float.rs:229:23: 229:24
    let _4: usize;                       // in scope 0 at ui/consts/const_let_eq_float.rs:236:9: 236:10
    let mut _5: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:237:10: 237:16
    let _6: usize;                       // in scope 0 at ui/consts/const_let_eq_float.rs:237:14: 237:15
    let mut _9: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:244:10: 244:23
    let mut _11: Foo<f32>;               // in scope 0 at ui/consts/const_let_eq_float.rs:247:35: 247:43
    let _12: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:248:9: 248:10
    let mut _13: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:249:10: 249:18
    let _14: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:249:14: 249:15
    let mut _16: Bar<f32>;               // in scope 0 at ui/consts/const_let_eq_float.rs:250:35: 250:49
    let _17: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:251:9: 251:10
    let mut _18: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:252:10: 252:18
    let _19: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:252:14: 252:15
    let mut _21: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:255:38: 255:43
    let _22: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:256:13: 256:14
    let mut _23: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:257:10: 257:20
    let _24: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:257:18: 257:19
    let mut _26: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:258:43: 258:48
    let _27: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:259:11: 259:12
    let mut _28: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:260:10: 260:18
    let _29: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:260:16: 260:17
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq_float.rs:229:23: 229:24
        let mut _0: f32;                 // return place in scope 1 at ui/consts/const_let_eq_float.rs:231:9: 231:14
        scope 2 {
            debug d => _0;               // in scope 2 at ui/consts/const_let_eq_float.rs:231:9: 231:14
            let mut _3: [f32; 1];        // in scope 2 at ui/consts/const_let_eq_float.rs:235:9: 235:16
            scope 3 {
                debug arr => _3;         // in scope 3 at ui/consts/const_let_eq_float.rs:235:9: 235:16
                let mut _7: Foo<f32>;    // in scope 3 at ui/consts/const_let_eq_float.rs:240:9: 240:16
                scope 4 {
                    debug foo => _7;     // in scope 4 at ui/consts/const_let_eq_float.rs:240:9: 240:16
                    let mut _8: Bar<f32>; // in scope 4 at ui/consts/const_let_eq_float.rs:241:9: 241:16
                    scope 5 {
                        debug bar => _8; // in scope 5 at ui/consts/const_let_eq_float.rs:241:9: 241:16
                        let mut _10: [Foo<f32>; 1]; // in scope 5 at ui/consts/const_let_eq_float.rs:247:9: 247:16
                        scope 6 {
                            debug arr => _10; // in scope 6 at ui/consts/const_let_eq_float.rs:247:9: 247:16
                            let mut _15: [Bar<f32>; 1]; // in scope 6 at ui/consts/const_let_eq_float.rs:250:9: 250:16
                            scope 7 {
                                debug arr => _15; // in scope 7 at ui/consts/const_let_eq_float.rs:250:9: 250:16
                                let mut _20: Foo<[f32; 1]>; // in scope 7 at ui/consts/const_let_eq_float.rs:255:9: 255:16
                                scope 8 {
                                    debug arr => _20; // in scope 8 at ui/consts/const_let_eq_float.rs:255:9: 255:16
                                    let mut _25: Bar<[f32; 1]>; // in scope 8 at ui/consts/const_let_eq_float.rs:258:9: 258:16
                                    scope 9 {
                                        debug arr => _25; // in scope 9 at ui/consts/const_let_eq_float.rs:258:9: 258:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = (_1.0: f32);                // scope 0 at ui/consts/const_let_eq_float.rs:229:23: 229:24
        _0 = _2;                         // scope 1 at ui/consts/const_let_eq_float.rs:231:22: 231:23
        _0 = Sub(_0, const 1f32);        // scope 2 at ui/consts/const_let_eq_float.rs:232:5: 232:13
        _3 = [const 2f32];               // scope 2 at ui/consts/const_let_eq_float.rs:235:29: 235:34
        _4 = const 0_usize;              // scope 3 at ui/consts/const_let_eq_float.rs:236:9: 236:10
        _3[_4] = Sub(_3[_4], const 1f32); // scope 3 at ui/consts/const_let_eq_float.rs:236:5: 236:18
        _6 = const 0_usize;              // scope 3 at ui/consts/const_let_eq_float.rs:237:14: 237:15
        _5 = _3[_6];                     // scope 3 at ui/consts/const_let_eq_float.rs:237:10: 237:16
        _0 = Sub(_0, move _5);           // scope 3 at ui/consts/const_let_eq_float.rs:237:5: 237:16
        _7 = const Foo::<f32>(2f32);     // scope 3 at ui/consts/const_let_eq_float.rs:240:29: 240:37
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:240:29: 240:37
                                         // + literal: Const { ty: Foo<f32>, val: Value(Scalar(0x40000000)) }
        _8 = const Bar::<f32> {{ x: 2f32 }}; // scope 4 at ui/consts/const_let_eq_float.rs:241:29: 241:43
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:241:29: 241:43
                                         // + literal: Const { ty: Bar<f32>, val: Value(Scalar(0x40000000)) }
        (_7.0: f32) = const 1f32;        // scope 5 at ui/consts/const_let_eq_float.rs:242:5: 242:17
        (_8.0: f32) = const 1f32;        // scope 5 at ui/consts/const_let_eq_float.rs:243:5: 243:17
        _9 = const 2f32;                 // scope 5 at ui/consts/const_let_eq_float.rs:244:10: 244:23
        _0 = Sub(_0, move _9);           // scope 5 at ui/consts/const_let_eq_float.rs:244:5: 244:23
        _11 = const Foo::<f32>(2f32);    // scope 5 at ui/consts/const_let_eq_float.rs:247:35: 247:43
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:247:35: 247:43
                                         // + literal: Const { ty: Foo<f32>, val: Value(Scalar(0x40000000)) }
        _10 = [move _11];                // scope 5 at ui/consts/const_let_eq_float.rs:247:34: 247:44
        _12 = const 0_usize;             // scope 6 at ui/consts/const_let_eq_float.rs:248:9: 248:10
        (_10[_12].0: f32) = Sub((_10[_12].0: f32), const 1f32); // scope 6 at ui/consts/const_let_eq_float.rs:248:5: 248:20
        _14 = const 0_usize;             // scope 6 at ui/consts/const_let_eq_float.rs:249:14: 249:15
        _13 = (_10[_14].0: f32);         // scope 6 at ui/consts/const_let_eq_float.rs:249:10: 249:18
        _0 = Sub(_0, move _13);          // scope 6 at ui/consts/const_let_eq_float.rs:249:5: 249:18
        _16 = const Bar::<f32> {{ x: 2f32 }}; // scope 6 at ui/consts/const_let_eq_float.rs:250:35: 250:49
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:250:35: 250:49
                                         // + literal: Const { ty: Bar<f32>, val: Value(Scalar(0x40000000)) }
        _15 = [move _16];                // scope 6 at ui/consts/const_let_eq_float.rs:250:34: 250:50
        _17 = const 0_usize;             // scope 7 at ui/consts/const_let_eq_float.rs:251:9: 251:10
        (_15[_17].0: f32) = Sub((_15[_17].0: f32), const 1f32); // scope 7 at ui/consts/const_let_eq_float.rs:251:5: 251:20
        _19 = const 0_usize;             // scope 7 at ui/consts/const_let_eq_float.rs:252:14: 252:15
        _18 = (_15[_19].0: f32);         // scope 7 at ui/consts/const_let_eq_float.rs:252:10: 252:18
        _0 = Sub(_0, move _18);          // scope 7 at ui/consts/const_let_eq_float.rs:252:5: 252:18
        _21 = [const 2f32];              // scope 7 at ui/consts/const_let_eq_float.rs:255:38: 255:43
        _20 = Foo::<[f32; 1]>(move _21); // scope 7 at ui/consts/const_let_eq_float.rs:255:34: 255:44
        _22 = const 0_usize;             // scope 8 at ui/consts/const_let_eq_float.rs:256:13: 256:14
        (_20.0: [f32; 1])[_22] = Sub((_20.0: [f32; 1])[_22], const 1f32); // scope 8 at ui/consts/const_let_eq_float.rs:256:5: 256:22
        _24 = const 0_usize;             // scope 8 at ui/consts/const_let_eq_float.rs:257:18: 257:19
        _23 = (_20.0: [f32; 1])[_24];    // scope 8 at ui/consts/const_let_eq_float.rs:257:10: 257:20
        _0 = Sub(_0, move _23);          // scope 8 at ui/consts/const_let_eq_float.rs:257:5: 257:20
        _26 = [const 2f32];              // scope 8 at ui/consts/const_let_eq_float.rs:258:43: 258:48
        _25 = Bar::<[f32; 1]> { x: move _26 }; // scope 8 at ui/consts/const_let_eq_float.rs:258:34: 258:50
        _27 = const 0_usize;             // scope 9 at ui/consts/const_let_eq_float.rs:259:11: 259:12
        (_25.0: [f32; 1])[_27] = Sub((_25.0: [f32; 1])[_27], const 1f32); // scope 9 at ui/consts/const_let_eq_float.rs:259:5: 259:20
        _29 = const 0_usize;             // scope 9 at ui/consts/const_let_eq_float.rs:260:16: 260:17
        _28 = (_25.0: [f32; 1])[_29];    // scope 9 at ui/consts/const_let_eq_float.rs:260:10: 260:18
        _0 = Sub(_0, move _28);          // scope 9 at ui/consts/const_let_eq_float.rs:260:5: 260:18
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:263:2: 263:2
    }
}

// MIR FOR CTFE
fn sub_assign(_1: W) -> f32 {
    let mut _0: f32;                     // return place in scope 0 at ui/consts/const_let_eq_float.rs:229:33: 229:36
    let _2: f32;                         // in scope 0 at ui/consts/const_let_eq_float.rs:229:23: 229:24
    let _5: usize;                       // in scope 0 at ui/consts/const_let_eq_float.rs:236:9: 236:10
    let mut _6: usize;                   // in scope 0 at ui/consts/const_let_eq_float.rs:236:5: 236:11
    let mut _7: bool;                    // in scope 0 at ui/consts/const_let_eq_float.rs:236:5: 236:11
    let mut _8: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:237:10: 237:16
    let _9: usize;                       // in scope 0 at ui/consts/const_let_eq_float.rs:237:14: 237:15
    let mut _10: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:237:10: 237:16
    let mut _11: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:237:10: 237:16
    let mut _14: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:244:10: 244:23
    let mut _15: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:244:10: 244:15
    let mut _16: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:244:18: 244:23
    let mut _18: Foo<f32>;               // in scope 0 at ui/consts/const_let_eq_float.rs:247:35: 247:43
    let _19: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:248:9: 248:10
    let mut _20: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:248:5: 248:11
    let mut _21: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:248:5: 248:11
    let mut _22: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:249:10: 249:18
    let _23: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:249:14: 249:15
    let mut _24: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:249:10: 249:16
    let mut _25: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:249:10: 249:16
    let mut _27: Bar<f32>;               // in scope 0 at ui/consts/const_let_eq_float.rs:250:35: 250:49
    let _28: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:251:9: 251:10
    let mut _29: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:251:5: 251:11
    let mut _30: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:251:5: 251:11
    let mut _31: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:252:10: 252:18
    let _32: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:252:14: 252:15
    let mut _33: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:252:10: 252:16
    let mut _34: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:252:10: 252:16
    let mut _36: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:255:38: 255:43
    let _37: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:256:13: 256:14
    let mut _38: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:256:5: 256:15
    let mut _39: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:256:5: 256:15
    let mut _40: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:257:10: 257:20
    let _41: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:257:18: 257:19
    let mut _42: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:257:10: 257:20
    let mut _43: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:257:10: 257:20
    let mut _45: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:258:43: 258:48
    let _46: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:259:11: 259:12
    let mut _47: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:259:5: 259:13
    let mut _48: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:259:5: 259:13
    let mut _49: f32;                    // in scope 0 at ui/consts/const_let_eq_float.rs:260:10: 260:18
    let _50: usize;                      // in scope 0 at ui/consts/const_let_eq_float.rs:260:16: 260:17
    let mut _51: usize;                  // in scope 0 at ui/consts/const_let_eq_float.rs:260:10: 260:18
    let mut _52: bool;                   // in scope 0 at ui/consts/const_let_eq_float.rs:260:10: 260:18
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const_let_eq_float.rs:229:23: 229:24
        let mut _3: f32;                 // in scope 1 at ui/consts/const_let_eq_float.rs:231:9: 231:14
        scope 2 {
            debug d => _3;               // in scope 2 at ui/consts/const_let_eq_float.rs:231:9: 231:14
            let mut _4: [f32; 1];        // in scope 2 at ui/consts/const_let_eq_float.rs:235:9: 235:16
            scope 3 {
                debug arr => _4;         // in scope 3 at ui/consts/const_let_eq_float.rs:235:9: 235:16
                let mut _12: Foo<f32>;   // in scope 3 at ui/consts/const_let_eq_float.rs:240:9: 240:16
                scope 4 {
                    debug foo => _12;    // in scope 4 at ui/consts/const_let_eq_float.rs:240:9: 240:16
                    let mut _13: Bar<f32>; // in scope 4 at ui/consts/const_let_eq_float.rs:241:9: 241:16
                    scope 5 {
                        debug bar => _13; // in scope 5 at ui/consts/const_let_eq_float.rs:241:9: 241:16
                        let mut _17: [Foo<f32>; 1]; // in scope 5 at ui/consts/const_let_eq_float.rs:247:9: 247:16
                        scope 6 {
                            debug arr => _17; // in scope 6 at ui/consts/const_let_eq_float.rs:247:9: 247:16
                            let mut _26: [Bar<f32>; 1]; // in scope 6 at ui/consts/const_let_eq_float.rs:250:9: 250:16
                            scope 7 {
                                debug arr => _26; // in scope 7 at ui/consts/const_let_eq_float.rs:250:9: 250:16
                                let mut _35: Foo<[f32; 1]>; // in scope 7 at ui/consts/const_let_eq_float.rs:255:9: 255:16
                                scope 8 {
                                    debug arr => _35; // in scope 8 at ui/consts/const_let_eq_float.rs:255:9: 255:16
                                    let mut _44: Bar<[f32; 1]>; // in scope 8 at ui/consts/const_let_eq_float.rs:258:9: 258:16
                                    scope 9 {
                                        debug arr => _44; // in scope 9 at ui/consts/const_let_eq_float.rs:258:9: 258:16
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const_let_eq_float.rs:229:23: 229:24
        _2 = (_1.0: f32);                // scope 0 at ui/consts/const_let_eq_float.rs:229:23: 229:24
        StorageLive(_3);                 // scope 1 at ui/consts/const_let_eq_float.rs:231:9: 231:14
        _3 = _2;                         // scope 1 at ui/consts/const_let_eq_float.rs:231:22: 231:23
        _3 = Sub(_3, const 1f32);        // scope 2 at ui/consts/const_let_eq_float.rs:232:5: 232:13
        StorageLive(_4);                 // scope 2 at ui/consts/const_let_eq_float.rs:235:9: 235:16
        _4 = [const 2f32];               // scope 2 at ui/consts/const_let_eq_float.rs:235:29: 235:34
        StorageLive(_5);                 // scope 3 at ui/consts/const_let_eq_float.rs:236:9: 236:10
        _5 = const 0_usize;              // scope 3 at ui/consts/const_let_eq_float.rs:236:9: 236:10
        _6 = Len(_4);                    // scope 3 at ui/consts/const_let_eq_float.rs:236:5: 236:11
        _7 = Lt(_5, _6);                 // scope 3 at ui/consts/const_let_eq_float.rs:236:5: 236:11
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> bb1; // scope 3 at ui/consts/const_let_eq_float.rs:236:5: 236:11
    }

    bb1: {
        _4[_5] = Sub(_4[_5], const 1f32); // scope 3 at ui/consts/const_let_eq_float.rs:236:5: 236:18
        StorageDead(_5);                 // scope 3 at ui/consts/const_let_eq_float.rs:236:18: 236:19
        StorageLive(_8);                 // scope 3 at ui/consts/const_let_eq_float.rs:237:10: 237:16
        StorageLive(_9);                 // scope 3 at ui/consts/const_let_eq_float.rs:237:14: 237:15
        _9 = const 0_usize;              // scope 3 at ui/consts/const_let_eq_float.rs:237:14: 237:15
        _10 = Len(_4);                   // scope 3 at ui/consts/const_let_eq_float.rs:237:10: 237:16
        _11 = Lt(_9, _10);               // scope 3 at ui/consts/const_let_eq_float.rs:237:10: 237:16
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> bb2; // scope 3 at ui/consts/const_let_eq_float.rs:237:10: 237:16
    }

    bb2: {
        _8 = _4[_9];                     // scope 3 at ui/consts/const_let_eq_float.rs:237:10: 237:16
        _3 = Sub(_3, move _8);           // scope 3 at ui/consts/const_let_eq_float.rs:237:5: 237:16
        StorageDead(_8);                 // scope 3 at ui/consts/const_let_eq_float.rs:237:15: 237:16
        StorageDead(_9);                 // scope 3 at ui/consts/const_let_eq_float.rs:237:16: 237:17
        StorageLive(_12);                // scope 3 at ui/consts/const_let_eq_float.rs:240:9: 240:16
        _12 = Foo::<f32>(const 2f32);    // scope 3 at ui/consts/const_let_eq_float.rs:240:29: 240:37
        StorageLive(_13);                // scope 4 at ui/consts/const_let_eq_float.rs:241:9: 241:16
        _13 = Bar::<f32> { x: const 2f32 }; // scope 4 at ui/consts/const_let_eq_float.rs:241:29: 241:43
        (_12.0: f32) = Sub((_12.0: f32), const 1f32); // scope 5 at ui/consts/const_let_eq_float.rs:242:5: 242:17
        (_13.0: f32) = Sub((_13.0: f32), const 1f32); // scope 5 at ui/consts/const_let_eq_float.rs:243:5: 243:17
        StorageLive(_14);                // scope 5 at ui/consts/const_let_eq_float.rs:244:10: 244:23
        StorageLive(_15);                // scope 5 at ui/consts/const_let_eq_float.rs:244:10: 244:15
        _15 = (_12.0: f32);              // scope 5 at ui/consts/const_let_eq_float.rs:244:10: 244:15
        StorageLive(_16);                // scope 5 at ui/consts/const_let_eq_float.rs:244:18: 244:23
        _16 = (_13.0: f32);              // scope 5 at ui/consts/const_let_eq_float.rs:244:18: 244:23
        _14 = Add(move _15, move _16);   // scope 5 at ui/consts/const_let_eq_float.rs:244:10: 244:23
        StorageDead(_16);                // scope 5 at ui/consts/const_let_eq_float.rs:244:22: 244:23
        StorageDead(_15);                // scope 5 at ui/consts/const_let_eq_float.rs:244:22: 244:23
        _3 = Sub(_3, move _14);          // scope 5 at ui/consts/const_let_eq_float.rs:244:5: 244:23
        StorageDead(_14);                // scope 5 at ui/consts/const_let_eq_float.rs:244:22: 244:23
        StorageLive(_17);                // scope 5 at ui/consts/const_let_eq_float.rs:247:9: 247:16
        StorageLive(_18);                // scope 5 at ui/consts/const_let_eq_float.rs:247:35: 247:43
        _18 = Foo::<f32>(const 2f32);    // scope 5 at ui/consts/const_let_eq_float.rs:247:35: 247:43
        _17 = [move _18];                // scope 5 at ui/consts/const_let_eq_float.rs:247:34: 247:44
        StorageDead(_18);                // scope 5 at ui/consts/const_let_eq_float.rs:247:43: 247:44
        StorageLive(_19);                // scope 6 at ui/consts/const_let_eq_float.rs:248:9: 248:10
        _19 = const 0_usize;             // scope 6 at ui/consts/const_let_eq_float.rs:248:9: 248:10
        _20 = Len(_17);                  // scope 6 at ui/consts/const_let_eq_float.rs:248:5: 248:11
        _21 = Lt(_19, _20);              // scope 6 at ui/consts/const_let_eq_float.rs:248:5: 248:11
        assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _19) -> bb3; // scope 6 at ui/consts/const_let_eq_float.rs:248:5: 248:11
    }

    bb3: {
        (_17[_19].0: f32) = Sub((_17[_19].0: f32), const 1f32); // scope 6 at ui/consts/const_let_eq_float.rs:248:5: 248:20
        StorageDead(_19);                // scope 6 at ui/consts/const_let_eq_float.rs:248:20: 248:21
        StorageLive(_22);                // scope 6 at ui/consts/const_let_eq_float.rs:249:10: 249:18
        StorageLive(_23);                // scope 6 at ui/consts/const_let_eq_float.rs:249:14: 249:15
        _23 = const 0_usize;             // scope 6 at ui/consts/const_let_eq_float.rs:249:14: 249:15
        _24 = Len(_17);                  // scope 6 at ui/consts/const_let_eq_float.rs:249:10: 249:16
        _25 = Lt(_23, _24);              // scope 6 at ui/consts/const_let_eq_float.rs:249:10: 249:16
        assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _23) -> bb4; // scope 6 at ui/consts/const_let_eq_float.rs:249:10: 249:16
    }

    bb4: {
        _22 = (_17[_23].0: f32);         // scope 6 at ui/consts/const_let_eq_float.rs:249:10: 249:18
        _3 = Sub(_3, move _22);          // scope 6 at ui/consts/const_let_eq_float.rs:249:5: 249:18
        StorageDead(_22);                // scope 6 at ui/consts/const_let_eq_float.rs:249:17: 249:18
        StorageDead(_23);                // scope 6 at ui/consts/const_let_eq_float.rs:249:18: 249:19
        StorageLive(_26);                // scope 6 at ui/consts/const_let_eq_float.rs:250:9: 250:16
        StorageLive(_27);                // scope 6 at ui/consts/const_let_eq_float.rs:250:35: 250:49
        _27 = Bar::<f32> { x: const 2f32 }; // scope 6 at ui/consts/const_let_eq_float.rs:250:35: 250:49
        _26 = [move _27];                // scope 6 at ui/consts/const_let_eq_float.rs:250:34: 250:50
        StorageDead(_27);                // scope 6 at ui/consts/const_let_eq_float.rs:250:49: 250:50
        StorageLive(_28);                // scope 7 at ui/consts/const_let_eq_float.rs:251:9: 251:10
        _28 = const 0_usize;             // scope 7 at ui/consts/const_let_eq_float.rs:251:9: 251:10
        _29 = Len(_26);                  // scope 7 at ui/consts/const_let_eq_float.rs:251:5: 251:11
        _30 = Lt(_28, _29);              // scope 7 at ui/consts/const_let_eq_float.rs:251:5: 251:11
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> bb5; // scope 7 at ui/consts/const_let_eq_float.rs:251:5: 251:11
    }

    bb5: {
        (_26[_28].0: f32) = Sub((_26[_28].0: f32), const 1f32); // scope 7 at ui/consts/const_let_eq_float.rs:251:5: 251:20
        StorageDead(_28);                // scope 7 at ui/consts/const_let_eq_float.rs:251:20: 251:21
        StorageLive(_31);                // scope 7 at ui/consts/const_let_eq_float.rs:252:10: 252:18
        StorageLive(_32);                // scope 7 at ui/consts/const_let_eq_float.rs:252:14: 252:15
        _32 = const 0_usize;             // scope 7 at ui/consts/const_let_eq_float.rs:252:14: 252:15
        _33 = Len(_26);                  // scope 7 at ui/consts/const_let_eq_float.rs:252:10: 252:16
        _34 = Lt(_32, _33);              // scope 7 at ui/consts/const_let_eq_float.rs:252:10: 252:16
        assert(move _34, "index out of bounds: the length is {} but the index is {}", move _33, _32) -> bb6; // scope 7 at ui/consts/const_let_eq_float.rs:252:10: 252:16
    }

    bb6: {
        _31 = (_26[_32].0: f32);         // scope 7 at ui/consts/const_let_eq_float.rs:252:10: 252:18
        _3 = Sub(_3, move _31);          // scope 7 at ui/consts/const_let_eq_float.rs:252:5: 252:18
        StorageDead(_31);                // scope 7 at ui/consts/const_let_eq_float.rs:252:17: 252:18
        StorageDead(_32);                // scope 7 at ui/consts/const_let_eq_float.rs:252:18: 252:19
        StorageLive(_35);                // scope 7 at ui/consts/const_let_eq_float.rs:255:9: 255:16
        StorageLive(_36);                // scope 7 at ui/consts/const_let_eq_float.rs:255:38: 255:43
        _36 = [const 2f32];              // scope 7 at ui/consts/const_let_eq_float.rs:255:38: 255:43
        _35 = Foo::<[f32; 1]>(move _36); // scope 7 at ui/consts/const_let_eq_float.rs:255:34: 255:44
        StorageDead(_36);                // scope 7 at ui/consts/const_let_eq_float.rs:255:43: 255:44
        StorageLive(_37);                // scope 8 at ui/consts/const_let_eq_float.rs:256:13: 256:14
        _37 = const 0_usize;             // scope 8 at ui/consts/const_let_eq_float.rs:256:13: 256:14
        _38 = Len((_35.0: [f32; 1]));    // scope 8 at ui/consts/const_let_eq_float.rs:256:5: 256:15
        _39 = Lt(_37, _38);              // scope 8 at ui/consts/const_let_eq_float.rs:256:5: 256:15
        assert(move _39, "index out of bounds: the length is {} but the index is {}", move _38, _37) -> bb7; // scope 8 at ui/consts/const_let_eq_float.rs:256:5: 256:15
    }

    bb7: {
        (_35.0: [f32; 1])[_37] = Sub((_35.0: [f32; 1])[_37], const 1f32); // scope 8 at ui/consts/const_let_eq_float.rs:256:5: 256:22
        StorageDead(_37);                // scope 8 at ui/consts/const_let_eq_float.rs:256:22: 256:23
        StorageLive(_40);                // scope 8 at ui/consts/const_let_eq_float.rs:257:10: 257:20
        StorageLive(_41);                // scope 8 at ui/consts/const_let_eq_float.rs:257:18: 257:19
        _41 = const 0_usize;             // scope 8 at ui/consts/const_let_eq_float.rs:257:18: 257:19
        _42 = Len((_35.0: [f32; 1]));    // scope 8 at ui/consts/const_let_eq_float.rs:257:10: 257:20
        _43 = Lt(_41, _42);              // scope 8 at ui/consts/const_let_eq_float.rs:257:10: 257:20
        assert(move _43, "index out of bounds: the length is {} but the index is {}", move _42, _41) -> bb8; // scope 8 at ui/consts/const_let_eq_float.rs:257:10: 257:20
    }

    bb8: {
        _40 = (_35.0: [f32; 1])[_41];    // scope 8 at ui/consts/const_let_eq_float.rs:257:10: 257:20
        _3 = Sub(_3, move _40);          // scope 8 at ui/consts/const_let_eq_float.rs:257:5: 257:20
        StorageDead(_40);                // scope 8 at ui/consts/const_let_eq_float.rs:257:19: 257:20
        StorageDead(_41);                // scope 8 at ui/consts/const_let_eq_float.rs:257:20: 257:21
        StorageLive(_44);                // scope 8 at ui/consts/const_let_eq_float.rs:258:9: 258:16
        StorageLive(_45);                // scope 8 at ui/consts/const_let_eq_float.rs:258:43: 258:48
        _45 = [const 2f32];              // scope 8 at ui/consts/const_let_eq_float.rs:258:43: 258:48
        _44 = Bar::<[f32; 1]> { x: move _45 }; // scope 8 at ui/consts/const_let_eq_float.rs:258:34: 258:50
        StorageDead(_45);                // scope 8 at ui/consts/const_let_eq_float.rs:258:49: 258:50
        StorageLive(_46);                // scope 9 at ui/consts/const_let_eq_float.rs:259:11: 259:12
        _46 = const 0_usize;             // scope 9 at ui/consts/const_let_eq_float.rs:259:11: 259:12
        _47 = Len((_44.0: [f32; 1]));    // scope 9 at ui/consts/const_let_eq_float.rs:259:5: 259:13
        _48 = Lt(_46, _47);              // scope 9 at ui/consts/const_let_eq_float.rs:259:5: 259:13
        assert(move _48, "index out of bounds: the length is {} but the index is {}", move _47, _46) -> bb9; // scope 9 at ui/consts/const_let_eq_float.rs:259:5: 259:13
    }

    bb9: {
        (_44.0: [f32; 1])[_46] = Sub((_44.0: [f32; 1])[_46], const 1f32); // scope 9 at ui/consts/const_let_eq_float.rs:259:5: 259:20
        StorageDead(_46);                // scope 9 at ui/consts/const_let_eq_float.rs:259:20: 259:21
        StorageLive(_49);                // scope 9 at ui/consts/const_let_eq_float.rs:260:10: 260:18
        StorageLive(_50);                // scope 9 at ui/consts/const_let_eq_float.rs:260:16: 260:17
        _50 = const 0_usize;             // scope 9 at ui/consts/const_let_eq_float.rs:260:16: 260:17
        _51 = Len((_44.0: [f32; 1]));    // scope 9 at ui/consts/const_let_eq_float.rs:260:10: 260:18
        _52 = Lt(_50, _51);              // scope 9 at ui/consts/const_let_eq_float.rs:260:10: 260:18
        assert(move _52, "index out of bounds: the length is {} but the index is {}", move _51, _50) -> bb10; // scope 9 at ui/consts/const_let_eq_float.rs:260:10: 260:18
    }

    bb10: {
        _49 = (_44.0: [f32; 1])[_50];    // scope 9 at ui/consts/const_let_eq_float.rs:260:10: 260:18
        _3 = Sub(_3, move _49);          // scope 9 at ui/consts/const_let_eq_float.rs:260:5: 260:18
        StorageDead(_49);                // scope 9 at ui/consts/const_let_eq_float.rs:260:17: 260:18
        StorageDead(_50);                // scope 9 at ui/consts/const_let_eq_float.rs:260:18: 260:19
        _0 = _3;                         // scope 9 at ui/consts/const_let_eq_float.rs:262:5: 262:6
        StorageDead(_44);                // scope 8 at ui/consts/const_let_eq_float.rs:263:1: 263:2
        StorageDead(_35);                // scope 7 at ui/consts/const_let_eq_float.rs:263:1: 263:2
        StorageDead(_26);                // scope 6 at ui/consts/const_let_eq_float.rs:263:1: 263:2
        StorageDead(_17);                // scope 5 at ui/consts/const_let_eq_float.rs:263:1: 263:2
        StorageDead(_13);                // scope 4 at ui/consts/const_let_eq_float.rs:263:1: 263:2
        StorageDead(_12);                // scope 3 at ui/consts/const_let_eq_float.rs:263:1: 263:2
        StorageDead(_4);                 // scope 2 at ui/consts/const_let_eq_float.rs:263:1: 263:2
        StorageDead(_3);                 // scope 1 at ui/consts/const_let_eq_float.rs:263:1: 263:2
        StorageDead(_2);                 // scope 0 at ui/consts/const_let_eq_float.rs:263:1: 263:2
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:263:2: 263:2
    }
}

sub_assign::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:235:24: 235:25

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:235:24: 235:25
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:235:24: 235:25
    }
}

sub_assign::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:247:29: 247:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:247:29: 247:30
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:247:29: 247:30
    }
}

sub_assign::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:250:29: 250:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:250:29: 250:30
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:250:29: 250:30
    }
}

sub_assign::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:255:28: 255:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:255:28: 255:29
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:255:28: 255:29
    }
}

sub_assign::{constant#4}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_let_eq_float.rs:258:28: 258:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_let_eq_float.rs:258:28: 258:29
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:258:28: 258:29
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_let_eq_float.rs:273:11: 273:11
    let mut _1: (&f32, &f32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &f32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &f32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: &f32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _5: &f32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: (&f32, &f32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &f32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _9: f32;                         // in scope 0 at ui/consts/const_let_eq_float.rs:274:19: 274:33
    let mut _10: (f32,);                 // in scope 0 at ui/consts/const_let_eq_float.rs:274:26: 274:32
    let mut _11: &f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _12: &f32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _13: &f32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: f32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: f32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &f32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &f32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _26: (&f32, &f32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _27: &f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _28: &f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _29: &f32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _30: &f32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _32: (&f32, &f32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _33: &f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _34: f32;                        // in scope 0 at ui/consts/const_let_eq_float.rs:275:16: 275:34
    let mut _35: W;                      // in scope 0 at ui/consts/const_let_eq_float.rs:275:27: 275:33
    let mut _36: &f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _37: &f32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _38: &f32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _39: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _40: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _41: f32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _42: f32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _44: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _45: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _46: &f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _47: &f32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _48: &f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _49: &f32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _51: (&f32, &f32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _52: &f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _53: &f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _54: &f32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _55: &f32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _57: (&f32, &f32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _58: &f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _59: f32;                        // in scope 0 at ui/consts/const_let_eq_float.rs:276:16: 276:40
    let mut _60: A;                      // in scope 0 at ui/consts/const_let_eq_float.rs:276:27: 276:39
    let mut _61: &f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _62: &f32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _63: &f32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _64: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _65: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _66: f32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _67: f32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _69: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _70: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _71: &f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _72: &f32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _73: &f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _74: &f32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _76: (&f32, &f32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _77: &f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _78: &f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _79: &f32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _80: &f32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _82: (&f32, &f32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _83: &f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _84: f32;                        // in scope 0 at ui/consts/const_let_eq_float.rs:277:16: 277:33
    let mut _85: [f32; 1];               // in scope 0 at ui/consts/const_let_eq_float.rs:277:27: 277:32
    let mut _86: &f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _87: &f32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _88: &f32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _89: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _90: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _91: f32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _92: f32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _94: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _95: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _96: &f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _97: &f32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _98: &f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _99: &f32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _100: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _101: (&f32, &f32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _102: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _103: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _104: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _105: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _107: (&f32, &f32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _108: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _109: f32;                       // in scope 0 at ui/consts/const_let_eq_float.rs:278:16: 278:34
    let mut _110: W;                     // in scope 0 at ui/consts/const_let_eq_float.rs:278:27: 278:33
    let mut _111: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _112: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _113: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _114: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _115: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _116: f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _117: f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _119: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _120: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _121: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _122: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _123: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _124: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _125: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _126: (&f32, &f32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _127: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _128: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _129: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _130: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _132: (&f32, &f32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _133: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _134: f32;                       // in scope 0 at ui/consts/const_let_eq_float.rs:279:16: 279:34
    let mut _135: W;                     // in scope 0 at ui/consts/const_let_eq_float.rs:279:27: 279:33
    let mut _136: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _137: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _138: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _139: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _140: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _141: f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _142: f32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _144: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _145: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _146: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _147: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _148: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _149: &f32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _150: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _151: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _152: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _153: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _154: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _155: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _156: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _157: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _158: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _159: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _160: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _161: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _162: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _163: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _164: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _165: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _166: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _167: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _168: &f32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _4;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _5;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _6: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _6;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _12;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _13;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _18: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _18;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _29;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _30;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _31: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _31;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug left_val => _37;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _38;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _43: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 8 {
            debug kind => _43;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 9 {
        debug left_val => _54;           // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _55;          // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _56: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 10 {
            debug kind => _56;           // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 11 {
        debug left_val => _62;           // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _63;          // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _68: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 12 {
            debug kind => _68;           // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 13 {
        debug left_val => _79;           // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _80;          // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _81: core::panicking::AssertKind; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 14 {
            debug kind => _81;           // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 15 {
        debug left_val => _87;           // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _88;          // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _93: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 16 {
            debug kind => _93;           // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 17 {
        debug left_val => _104;          // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _105;         // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _106: core::panicking::AssertKind; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 18 {
            debug kind => _106;          // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 19 {
        debug left_val => _112;          // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _113;         // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _118: core::panicking::AssertKind; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 20 {
            debug kind => _118;          // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 21 {
        debug left_val => _129;          // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _130;         // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _131: core::panicking::AssertKind; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 22 {
            debug kind => _131;          // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 23 {
        debug left_val => _137;          // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _138;         // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _143: core::panicking::AssertKind; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 24 {
            debug kind => _143;          // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _168 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &f32, val: Unevaluated(main, [], Some(promoted[17])) }
        _2 = _168;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _167 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &f32, val: Unevaluated(main, [], Some(promoted[16])) }
        _3 = _167;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _4 = (_1.0: &f32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _5 = (_1.1: &f32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = const (2f32,);             // scope 0 at ui/consts/const_let_eq_float.rs:274:26: 274:32
        _9 = basics(move _10) -> bb1;    // scope 0 at ui/consts/const_let_eq_float.rs:274:19: 274:33
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:274:19: 274:25
                                         // + literal: Const { ty: fn((f32,)) -> f32 {basics}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _166 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &f32, val: Unevaluated(main, [], Some(promoted[15])) }
        _11 = _166;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _11);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_7.0: &f32);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_7.1: &f32);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = (*_12);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = const 13f32;               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = Eq(move _16, move _17);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _14 = Not(move _15);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _18 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<f32, f32>(move _20, move _21, move _23, move _25); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a f32, &'b f32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<f32, f32>}, val: Value(<ZST>) }
    }

    bb3: {
        _165 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &f32, val: Unevaluated(main, [], Some(promoted[14])) }
        _27 = _165;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _164 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &f32, val: Unevaluated(main, [], Some(promoted[13])) }
        _28 = _164;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _26 = (move _27, move _28);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _29 = (_26.0: &f32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _30 = (_26.1: &f32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _35 = const W(1f32);             // scope 0 at ui/consts/const_let_eq_float.rs:275:27: 275:33
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:275:27: 275:33
                                         // + literal: Const { ty: W, val: Value(Scalar(0x3f800000)) }
        _34 = add_assign(move _35) -> bb4; // scope 0 at ui/consts/const_let_eq_float.rs:275:16: 275:34
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:275:16: 275:26
                                         // + literal: Const { ty: fn(W) -> f32 {add_assign}, val: Value(<ZST>) }
    }

    bb4: {
        _33 = &_34;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _163 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &f32, val: Unevaluated(main, [], Some(promoted[12])) }
        _36 = _163;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _32 = (move _33, move _36);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _37 = (_32.0: &f32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _38 = (_32.1: &f32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _41 = (*_37);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _42 = const 10f32;               // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _40 = Eq(move _41, move _42);    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _39 = Not(move _40);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _39) -> [0: bb6, otherwise: bb5]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _43 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _45 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _47 = _37;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _46 = _47;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _49 = _38;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _48 = _49;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _50 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _44 = core::panicking::assert_failed::<f32, f32>(move _45, move _46, move _48, move _50); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a f32, &'b f32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<f32, f32>}, val: Value(<ZST>) }
    }

    bb6: {
        _162 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &f32, val: Unevaluated(main, [], Some(promoted[11])) }
        _52 = _162;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _161 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &f32, val: Unevaluated(main, [], Some(promoted[10])) }
        _53 = _161;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _51 = (move _52, move _53);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _54 = (_51.0: &f32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _55 = (_51.1: &f32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _60 = const A {{ a: 0f32 }};     // scope 0 at ui/consts/const_let_eq_float.rs:276:27: 276:39
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:276:27: 276:39
                                         // + literal: Const { ty: A, val: Value(Scalar(0x00000000)) }
        _59 = mul_assign(move _60) -> bb7; // scope 0 at ui/consts/const_let_eq_float.rs:276:16: 276:40
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:276:16: 276:26
                                         // + literal: Const { ty: fn(A) -> f32 {mul_assign}, val: Value(<ZST>) }
    }

    bb7: {
        _58 = &_59;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _160 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &f32, val: Unevaluated(main, [], Some(promoted[9])) }
        _61 = _160;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _57 = (move _58, move _61);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _62 = (_57.0: &f32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _63 = (_57.1: &f32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _66 = (*_62);                    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _67 = const 256f32;              // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _65 = Eq(move _66, move _67);    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _64 = Not(move _65);             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _64) -> [0: bb9, otherwise: bb8]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _68 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _70 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _72 = _62;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _71 = _72;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _74 = _63;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _73 = _74;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _75 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _69 = core::panicking::assert_failed::<f32, f32>(move _70, move _71, move _73, move _75); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a f32, &'b f32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<f32, f32>}, val: Value(<ZST>) }
    }

    bb9: {
        _159 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &f32, val: Unevaluated(main, [], Some(promoted[8])) }
        _77 = _159;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _158 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &f32, val: Unevaluated(main, [], Some(promoted[7])) }
        _78 = _158;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _76 = (move _77, move _78);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _79 = (_76.0: &f32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _80 = (_76.1: &f32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _85 = [const 1f32];              // scope 0 at ui/consts/const_let_eq_float.rs:277:27: 277:32
        _84 = div_assign(move _85) -> bb10; // scope 0 at ui/consts/const_let_eq_float.rs:277:16: 277:33
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:277:16: 277:26
                                         // + literal: Const { ty: fn([f32; 1]) -> f32 {div_assign}, val: Value(<ZST>) }
    }

    bb10: {
        _83 = &_84;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _157 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &f32, val: Unevaluated(main, [], Some(promoted[6])) }
        _86 = _157;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _82 = (move _83, move _86);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _87 = (_82.0: &f32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _88 = (_82.1: &f32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _91 = (*_87);                    // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _92 = const 4f32;                // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _90 = Eq(move _91, move _92);    // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _89 = Not(move _90);             // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _89) -> [0: bb12, otherwise: bb11]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _93 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _95 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _97 = _87;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _96 = _97;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _99 = _88;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _98 = _99;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _100 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _94 = core::panicking::assert_failed::<f32, f32>(move _95, move _96, move _98, move _100); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a f32, &'b f32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<f32, f32>}, val: Value(<ZST>) }
    }

    bb12: {
        _156 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &f32, val: Unevaluated(main, [], Some(promoted[5])) }
        _102 = _156;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _155 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &f32, val: Unevaluated(main, [], Some(promoted[4])) }
        _103 = _155;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _101 = (move _102, move _103);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _104 = (_101.0: &f32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _105 = (_101.1: &f32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _110 = const W(5f32);            // scope 0 at ui/consts/const_let_eq_float.rs:278:27: 278:33
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:278:27: 278:33
                                         // + literal: Const { ty: W, val: Value(Scalar(0x40a00000)) }
        _109 = rem_assign(move _110) -> bb13; // scope 0 at ui/consts/const_let_eq_float.rs:278:16: 278:34
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:278:16: 278:26
                                         // + literal: Const { ty: fn(W) -> f32 {rem_assign}, val: Value(<ZST>) }
    }

    bb13: {
        _108 = &_109;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _154 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &f32, val: Unevaluated(main, [], Some(promoted[3])) }
        _111 = _154;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _107 = (move _108, move _111);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _112 = (_107.0: &f32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _113 = (_107.1: &f32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _116 = (*_112);                  // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _117 = const 5f32;               // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _115 = Eq(move _116, move _117); // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _114 = Not(move _115);           // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _114) -> [0: bb15, otherwise: bb14]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb14: {
        _118 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _120 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _122 = _112;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _121 = _122;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _124 = _113;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _123 = _124;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _125 = Option::<Arguments<'_>>::None; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _119 = core::panicking::assert_failed::<f32, f32>(move _120, move _121, move _123, move _125); // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a f32, &'b f32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<f32, f32>}, val: Value(<ZST>) }
    }

    bb15: {
        _153 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &f32, val: Unevaluated(main, [], Some(promoted[2])) }
        _127 = _153;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _152 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &f32, val: Unevaluated(main, [], Some(promoted[1])) }
        _128 = _152;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _126 = (move _127, move _128);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _129 = (_126.0: &f32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _130 = (_126.1: &f32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _135 = const W(8f32);            // scope 0 at ui/consts/const_let_eq_float.rs:279:27: 279:33
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:279:27: 279:33
                                         // + literal: Const { ty: W, val: Value(Scalar(0x41000000)) }
        _134 = sub_assign(move _135) -> bb16; // scope 0 at ui/consts/const_let_eq_float.rs:279:16: 279:34
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:279:16: 279:26
                                         // + literal: Const { ty: fn(W) -> f32 {sub_assign}, val: Value(<ZST>) }
    }

    bb16: {
        _133 = &_134;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _151 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &f32, val: Unevaluated(main, [], Some(promoted[0])) }
        _136 = _151;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _132 = (move _133, move _136);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _137 = (_132.0: &f32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _138 = (_132.1: &f32);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _141 = (*_137);                  // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _142 = const 0f32;               // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _140 = Eq(move _141, move _142); // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _139 = Not(move _140);           // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _139) -> [0: bb18, otherwise: bb17]; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb17: {
        _143 = const core::panicking::AssertKind::Eq; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _145 = const core::panicking::AssertKind::Eq; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _147 = _137;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _146 = _147;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _149 = _138;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _148 = _149;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _150 = Option::<Arguments<'_>>::None; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _144 = core::panicking::assert_failed::<f32, f32>(move _145, move _146, move _148, move _150); // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a f32, &'b f32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<f32, f32>}, val: Value(<ZST>) }
    }

    bb18: {
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:280:2: 280:2
    }
}

promoted[0] in main: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:279:36: 279:39

    bb0: {
        _1 = const 0f32;                 // scope 0 at ui/consts/const_let_eq_float.rs:279:36: 279:39
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:279:36: 279:39

    bb0: {
        _1 = const 0f32;                 // scope 0 at ui/consts/const_let_eq_float.rs:279:36: 279:39
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:268:20: 268:22

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_let_eq_float.rs:268:20: 268:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[3] in main: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:278:36: 278:39

    bb0: {
        _1 = const 5f32;                 // scope 0 at ui/consts/const_let_eq_float.rs:278:36: 278:39
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:278:36: 278:39

    bb0: {
        _1 = const 5f32;                 // scope 0 at ui/consts/const_let_eq_float.rs:278:36: 278:39
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in main: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:268:20: 268:22

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_let_eq_float.rs:268:20: 268:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[6] in main: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:277:35: 277:38

    bb0: {
        _1 = const 4f32;                 // scope 0 at ui/consts/const_let_eq_float.rs:277:35: 277:38
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[7] in main: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:277:35: 277:38

    bb0: {
        _1 = const 4f32;                 // scope 0 at ui/consts/const_let_eq_float.rs:277:35: 277:38
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[8] in main: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:268:20: 268:22

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_let_eq_float.rs:268:20: 268:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[9] in main: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:276:42: 276:47

    bb0: {
        _1 = const 256f32;               // scope 0 at ui/consts/const_let_eq_float.rs:276:42: 276:47
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[10] in main: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:276:42: 276:47

    bb0: {
        _1 = const 256f32;               // scope 0 at ui/consts/const_let_eq_float.rs:276:42: 276:47
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[11] in main: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:268:20: 268:22

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_let_eq_float.rs:268:20: 268:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[12] in main: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:275:36: 275:40

    bb0: {
        _1 = const 10f32;                // scope 0 at ui/consts/const_let_eq_float.rs:275:36: 275:40
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[13] in main: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:275:36: 275:40

    bb0: {
        _1 = const 10f32;                // scope 0 at ui/consts/const_let_eq_float.rs:275:36: 275:40
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[14] in main: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:268:20: 268:22

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_let_eq_float.rs:268:20: 268:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[15] in main: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:274:35: 274:39

    bb0: {
        _1 = const 13f32;                // scope 0 at ui/consts/const_let_eq_float.rs:274:35: 274:39
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[16] in main: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:274:35: 274:39

    bb0: {
        _1 = const 13f32;                // scope 0 at ui/consts/const_let_eq_float.rs:274:35: 274:39
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[17] in main: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: f32;                     // in scope 0 at ui/consts/const_let_eq_float.rs:268:20: 268:22

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const_let_eq_float.rs:268:20: 268:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

const BASICS: f32 = {
    let mut _0: f32;                     // return place in scope 0 at ui/consts/const_let_eq_float.rs:267:19: 267:22
    let mut _1: (f32,);                  // in scope 0 at ui/consts/const_let_eq_float.rs:274:26: 274:32

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_let_eq_float.rs:274:26: 274:32
        _1 = (const 2f32,);              // scope 0 at ui/consts/const_let_eq_float.rs:274:26: 274:32
        ConstEvalCounter;                // scope 0 at ui/consts/const_let_eq_float.rs:274:19: 274:33
        _0 = basics(move _1) -> bb1;     // scope 0 at ui/consts/const_let_eq_float.rs:274:19: 274:33
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:274:19: 274:25
                                         // + literal: Const { ty: fn((f32,)) -> f32 {basics}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/consts/const_let_eq_float.rs:274:32: 274:33
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:267:9: 267:28
    }
}

const ADD: f32 = {
    let mut _0: f32;                     // return place in scope 0 at ui/consts/const_let_eq_float.rs:267:19: 267:22
    let mut _1: W;                       // in scope 0 at ui/consts/const_let_eq_float.rs:275:27: 275:33

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_let_eq_float.rs:275:27: 275:33
        _1 = W(const 1f32);              // scope 0 at ui/consts/const_let_eq_float.rs:275:27: 275:33
        ConstEvalCounter;                // scope 0 at ui/consts/const_let_eq_float.rs:275:16: 275:34
        _0 = add_assign(move _1) -> bb1; // scope 0 at ui/consts/const_let_eq_float.rs:275:16: 275:34
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:275:16: 275:26
                                         // + literal: Const { ty: fn(W) -> f32 {add_assign}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/consts/const_let_eq_float.rs:275:33: 275:34
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:267:9: 267:28
    }
}

const MUL: f32 = {
    let mut _0: f32;                     // return place in scope 0 at ui/consts/const_let_eq_float.rs:267:19: 267:22
    let mut _1: A;                       // in scope 0 at ui/consts/const_let_eq_float.rs:276:27: 276:39

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_let_eq_float.rs:276:27: 276:39
        _1 = A { a: const 0f32 };        // scope 0 at ui/consts/const_let_eq_float.rs:276:27: 276:39
        ConstEvalCounter;                // scope 0 at ui/consts/const_let_eq_float.rs:276:16: 276:40
        _0 = mul_assign(move _1) -> bb1; // scope 0 at ui/consts/const_let_eq_float.rs:276:16: 276:40
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:276:16: 276:26
                                         // + literal: Const { ty: fn(A) -> f32 {mul_assign}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/consts/const_let_eq_float.rs:276:39: 276:40
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:267:9: 267:28
    }
}

const DIV: f32 = {
    let mut _0: f32;                     // return place in scope 0 at ui/consts/const_let_eq_float.rs:267:19: 267:22
    let mut _1: [f32; 1];                // in scope 0 at ui/consts/const_let_eq_float.rs:277:27: 277:32

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_let_eq_float.rs:277:27: 277:32
        _1 = [const 1f32];               // scope 0 at ui/consts/const_let_eq_float.rs:277:27: 277:32
        ConstEvalCounter;                // scope 0 at ui/consts/const_let_eq_float.rs:277:16: 277:33
        _0 = div_assign(move _1) -> bb1; // scope 0 at ui/consts/const_let_eq_float.rs:277:16: 277:33
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:277:16: 277:26
                                         // + literal: Const { ty: fn([f32; 1]) -> f32 {div_assign}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/consts/const_let_eq_float.rs:277:32: 277:33
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:267:9: 267:28
    }
}

const REM: f32 = {
    let mut _0: f32;                     // return place in scope 0 at ui/consts/const_let_eq_float.rs:267:19: 267:22
    let mut _1: W;                       // in scope 0 at ui/consts/const_let_eq_float.rs:278:27: 278:33

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_let_eq_float.rs:278:27: 278:33
        _1 = W(const 5f32);              // scope 0 at ui/consts/const_let_eq_float.rs:278:27: 278:33
        ConstEvalCounter;                // scope 0 at ui/consts/const_let_eq_float.rs:278:16: 278:34
        _0 = rem_assign(move _1) -> bb1; // scope 0 at ui/consts/const_let_eq_float.rs:278:16: 278:34
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:278:16: 278:26
                                         // + literal: Const { ty: fn(W) -> f32 {rem_assign}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/consts/const_let_eq_float.rs:278:33: 278:34
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:267:9: 267:28
    }
}

const SUB: f32 = {
    let mut _0: f32;                     // return place in scope 0 at ui/consts/const_let_eq_float.rs:267:19: 267:22
    let mut _1: W;                       // in scope 0 at ui/consts/const_let_eq_float.rs:279:27: 279:33

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_let_eq_float.rs:279:27: 279:33
        _1 = W(const 8f32);              // scope 0 at ui/consts/const_let_eq_float.rs:279:27: 279:33
        ConstEvalCounter;                // scope 0 at ui/consts/const_let_eq_float.rs:279:16: 279:34
        _0 = sub_assign(move _1) -> bb1; // scope 0 at ui/consts/const_let_eq_float.rs:279:16: 279:34
                                         // mir::Constant
                                         // + span: ui/consts/const_let_eq_float.rs:279:16: 279:26
                                         // + literal: Const { ty: fn(W) -> f32 {sub_assign}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/consts/const_let_eq_float.rs:279:33: 279:34
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:267:9: 267:28
    }
}

fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;                  // return place in scope 0 at ui/consts/const_let_eq_float.rs:5:1: 5:14

    bb0: {
        _0 = Foo::<T>(move _1);          // scope 0 at ui/consts/const_let_eq_float.rs:5:1: 5:14
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:5:1: 5:14
    }
}

// MIR FOR CTFE
fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;                  // return place in scope 0 at ui/consts/const_let_eq_float.rs:5:1: 5:14

    bb0: {
        _0 = Foo::<T>(move _1);          // scope 0 at ui/consts/const_let_eq_float.rs:5:1: 5:14
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:5:1: 5:14
    }
}

fn W(_1: f32) -> W {
    let mut _0: W;                       // return place in scope 0 at ui/consts/const_let_eq_float.rs:7:1: 7:9

    bb0: {
        _0 = W(move _1);                 // scope 0 at ui/consts/const_let_eq_float.rs:7:1: 7:9
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:7:1: 7:9
    }
}

// MIR FOR CTFE
fn W(_1: f32) -> W {
    let mut _0: W;                       // return place in scope 0 at ui/consts/const_let_eq_float.rs:7:1: 7:9

    bb0: {
        _0 = W(move _1);                 // scope 0 at ui/consts/const_let_eq_float.rs:7:1: 7:9
        return;                          // scope 0 at ui/consts/const_let_eq_float.rs:7:1: 7:9
    }
}
