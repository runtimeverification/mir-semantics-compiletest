// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/match-const-fn-structs.rs:6:10: 6:12>::assert_receiver_is_total_eq(_1: &A) -> () {
    debug self => _1;                    // in scope 0 at ui/consts/match-const-fn-structs.rs:6:10: 6:12
    let mut _0: ();                      // return place in scope 0 at ui/consts/match-const-fn-structs.rs:6:10: 6:12
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/consts/match-const-fn-structs.rs:6:12: 6:12
    }
}

fn <impl at ui/consts/match-const-fn-structs.rs:6:14: 6:23>::eq(_1: &A, _2: &A) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/match-const-fn-structs.rs:6:14: 6:23
    debug other => _2;                   // in scope 0 at ui/consts/match-const-fn-structs.rs:6:14: 6:23
    let mut _0: bool;                    // return place in scope 0 at ui/consts/match-const-fn-structs.rs:6:14: 6:23
    let mut _3: u32;                     // in scope 0 at ui/consts/match-const-fn-structs.rs:7:12: 7:22
    let mut _4: u32;                     // in scope 0 at ui/consts/match-const-fn-structs.rs:7:12: 7:22

    bb0: {
        _3 = ((*_1).0: u32);             // scope 0 at ui/consts/match-const-fn-structs.rs:7:12: 7:22
        _4 = ((*_2).0: u32);             // scope 0 at ui/consts/match-const-fn-structs.rs:7:12: 7:22
        _0 = Eq(move _3, move _4);       // scope 0 at ui/consts/match-const-fn-structs.rs:7:12: 7:22
        return;                          // scope 0 at ui/consts/match-const-fn-structs.rs:6:23: 6:23
    }
}

fn new(_1: u32) -> A {
    debug value => _1;                   // in scope 0 at ui/consts/match-const-fn-structs.rs:9:14: 9:19
    let mut _0: A;                       // return place in scope 0 at ui/consts/match-const-fn-structs.rs:9:29: 9:30
    let mut _2: u32;                     // in scope 0 at ui/consts/match-const-fn-structs.rs:10:9: 10:14

    bb0: {
        _2 = _1;                         // scope 0 at ui/consts/match-const-fn-structs.rs:10:9: 10:14
        _0 = A { value: move _2 };       // scope 0 at ui/consts/match-const-fn-structs.rs:10:5: 10:16
        return;                          // scope 0 at ui/consts/match-const-fn-structs.rs:11:2: 11:2
    }
}

// MIR FOR CTFE
fn new(_1: u32) -> A {
    debug value => _1;                   // in scope 0 at ui/consts/match-const-fn-structs.rs:9:14: 9:19
    let mut _0: A;                       // return place in scope 0 at ui/consts/match-const-fn-structs.rs:9:29: 9:30
    let mut _2: u32;                     // in scope 0 at ui/consts/match-const-fn-structs.rs:10:9: 10:14

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/match-const-fn-structs.rs:10:9: 10:14
        _2 = _1;                         // scope 0 at ui/consts/match-const-fn-structs.rs:10:9: 10:14
        _0 = A { value: move _2 };       // scope 0 at ui/consts/match-const-fn-structs.rs:10:5: 10:16
        StorageDead(_2);                 // scope 0 at ui/consts/match-const-fn-structs.rs:10:15: 10:16
        return;                          // scope 0 at ui/consts/match-const-fn-structs.rs:11:2: 11:2
    }
}

const A_1: A = {
    let mut _0: A;                       // return place in scope 0 at ui/consts/match-const-fn-structs.rs:13:12: 13:13

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/match-const-fn-structs.rs:13:16: 13:22
        _0 = new(const 1_u32) -> bb1;    // scope 0 at ui/consts/match-const-fn-structs.rs:13:16: 13:22
                                         // mir::Constant
                                         // + span: ui/consts/match-const-fn-structs.rs:13:16: 13:19
                                         // + literal: Const { ty: fn(u32) -> A {new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/match-const-fn-structs.rs:13:1: 13:23
    }
}

const A_2: A = {
    let mut _0: A;                       // return place in scope 0 at ui/consts/match-const-fn-structs.rs:14:12: 14:13

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/match-const-fn-structs.rs:14:16: 14:22
        _0 = new(const 2_u32) -> bb1;    // scope 0 at ui/consts/match-const-fn-structs.rs:14:16: 14:22
                                         // mir::Constant
                                         // + span: ui/consts/match-const-fn-structs.rs:14:16: 14:19
                                         // + literal: Const { ty: fn(u32) -> A {new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/match-const-fn-structs.rs:14:1: 14:23
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/match-const-fn-structs.rs:16:11: 16:11
    let _1: &str;                        // in scope 0 at ui/consts/match-const-fn-structs.rs:17:9: 17:14
    let mut _2: A;                       // in scope 0 at ui/consts/match-const-fn-structs.rs:17:23: 17:30
    let _3: &str;                        // in scope 0 at ui/consts/match-const-fn-structs.rs:19:16: 19:21
    let _4: &str;                        // in scope 0 at ui/consts/match-const-fn-structs.rs:20:14: 20:25
    scope 1 {
        debug a_str => _1;               // in scope 1 at ui/consts/match-const-fn-structs.rs:17:9: 17:14
    }

    bb0: {
        _2 = new(const 42_u32) -> bb1;   // scope 0 at ui/consts/match-const-fn-structs.rs:17:23: 17:30
                                         // mir::Constant
                                         // + span: ui/consts/match-const-fn-structs.rs:17:23: 17:26
                                         // + literal: Const { ty: fn(u32) -> A {new}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt((_2.0: u32)) -> [1: bb3, 2: bb4, otherwise: bb2]; // scope 0 at ui/consts/match-const-fn-structs.rs:17:17: 17:30
    }

    bb2: {
        _4 = const "Unknown A";          // scope 0 at ui/consts/match-const-fn-structs.rs:20:14: 20:25
                                         // mir::Constant
                                         // + span: ui/consts/match-const-fn-structs.rs:20:14: 20:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1 = _4;                         // scope 0 at ui/consts/match-const-fn-structs.rs:20:14: 20:25
        goto -> bb5;                     // scope 0 at ui/consts/match-const-fn-structs.rs:20:24: 20:25
    }

    bb3: {
        _1 = const "A 1";                // scope 0 at ui/consts/match-const-fn-structs.rs:18:16: 18:21
                                         // mir::Constant
                                         // + span: ui/consts/match-const-fn-structs.rs:18:16: 18:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb5;                     // scope 0 at ui/consts/match-const-fn-structs.rs:18:16: 18:21
    }

    bb4: {
        _3 = const "A 2";                // scope 0 at ui/consts/match-const-fn-structs.rs:19:16: 19:21
                                         // mir::Constant
                                         // + span: ui/consts/match-const-fn-structs.rs:19:16: 19:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1 = _3;                         // scope 0 at ui/consts/match-const-fn-structs.rs:19:16: 19:21
        goto -> bb5;                     // scope 0 at ui/consts/match-const-fn-structs.rs:19:20: 19:21
    }

    bb5: {
        return;                          // scope 0 at ui/consts/match-const-fn-structs.rs:22:2: 22:2
    }
}
