// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const DANGLING: NonNull<u32> = {
    let mut _0: std::ptr::NonNull<u32>;

    bb0: {
        ConstEvalCounter;
        _0 = NonNull::<u32>::dangling() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const CASTED: NonNull<u32> = {
    let mut _0: std::ptr::NonNull<u32>;
    let mut _1: std::ptr::NonNull<i32>;

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = NonNull::<i32>::dangling() -> [return: bb1, unwind continue];
    }

    bb1: {
        ConstEvalCounter;
        _0 = NonNull::<i32>::cast::<u32>(move _1) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::ptr::NonNull<u32>, &std::ptr::NonNull<u32>);
    let mut _2: &std::ptr::NonNull<u32>;
    let _3: std::ptr::NonNull<u32>;
    let mut _4: fn() -> std::ptr::NonNull<u32>;
    let mut _5: fn() -> std::ptr::NonNull<u32>;
    let _6: &std::ptr::NonNull<u32>;
    let _7: &std::ptr::NonNull<u32>;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&std::ptr::NonNull<u32>, &std::ptr::NonNull<u32>);
    let mut _14: &std::ptr::NonNull<u32>;
    let _15: std::ptr::NonNull<u32>;
    let mut _16: fn() -> std::ptr::NonNull<u32>;
    let mut _17: fn() -> std::ptr::NonNull<u32>;
    let _18: &std::ptr::NonNull<u32>;
    let _19: &std::ptr::NonNull<u32>;
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: &std::ptr::NonNull<u32>;
    let mut _26: &std::ptr::NonNull<u32>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }

    bb0: {
        _26 = const _;
        _5 = NonNull::<u32>::dangling as fn() -> std::ptr::NonNull<u32> (Pointer(ReifyFnPointer));
        _4 = test::black_box::<fn() -> NonNull<u32>>(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = move _4() -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = &_3;
        _1 = (_26, move _2);
        _6 = (_1.0: &std::ptr::NonNull<u32>);
        _7 = (_1.1: &std::ptr::NonNull<u32>);
        _9 = <NonNull<u32> as PartialEq>::eq(_6, _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<NonNull<u32>, NonNull<u32>>(move _10, _6, _7, move _12) -> unwind continue;
    }

    bb5: {
        _25 = const _;
        _17 = NonNull::<u32>::dangling as fn() -> std::ptr::NonNull<u32> (Pointer(ReifyFnPointer));
        _16 = test::black_box::<fn() -> NonNull<u32>>(move _17) -> [return: bb6, unwind continue];
    }

    bb6: {
        _15 = move _16() -> [return: bb7, unwind continue];
    }

    bb7: {
        _14 = &_15;
        _13 = (_25, move _14);
        _18 = (_13.0: &std::ptr::NonNull<u32>);
        _19 = (_13.1: &std::ptr::NonNull<u32>);
        _21 = <NonNull<u32> as PartialEq>::eq(_18, _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<NonNull<u32>, NonNull<u32>>(move _22, _18, _19, move _24) -> unwind continue;
    }

    bb10: {
        return;
    }
}

promoted[0] in main: &NonNull<u32> = {
    let mut _0: &std::ptr::NonNull<u32>;
    let mut _1: std::ptr::NonNull<u32>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &NonNull<u32> = {
    let mut _0: &std::ptr::NonNull<u32>;
    let mut _1: std::ptr::NonNull<u32>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}
