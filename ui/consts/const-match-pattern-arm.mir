// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const _: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-match-pattern-arm.rs:3:10: 3:14
    let mut _1: std::option::Option<bool>; // in scope 0 at ui/consts/const-match-pattern-arm.rs:3:23: 3:33
    let mut _2: isize;                   // in scope 0 at ui/consts/const-match-pattern-arm.rs:4:5: 4:16
    let _3: bool;                        // in scope 0 at ui/consts/const-match-pattern-arm.rs:4:10: 4:15
    scope 1 {
        debug value => _3;               // in scope 1 at ui/consts/const-match-pattern-arm.rs:4:10: 4:15
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-match-pattern-arm.rs:3:23: 3:33
        _1 = Option::<bool>::Some(const true); // scope 0 at ui/consts/const-match-pattern-arm.rs:3:23: 3:33
        _2 = discriminant(_1);           // scope 0 at ui/consts/const-match-pattern-arm.rs:3:23: 3:33
        switchInt(move _2) -> [1: bb2, otherwise: bb1]; // scope 0 at ui/consts/const-match-pattern-arm.rs:3:17: 3:33
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/consts/const-match-pattern-arm.rs:5:10: 5:15
        goto -> bb3;                     // scope 0 at ui/consts/const-match-pattern-arm.rs:5:10: 5:15
    }

    bb2: {
        StorageLive(_3);                 // scope 0 at ui/consts/const-match-pattern-arm.rs:4:10: 4:15
        _3 = ((_1 as Some).0: bool);     // scope 0 at ui/consts/const-match-pattern-arm.rs:4:10: 4:15
        _0 = const true;                 // scope 1 at ui/consts/const-match-pattern-arm.rs:4:20: 4:24
        StorageDead(_3);                 // scope 0 at ui/consts/const-match-pattern-arm.rs:4:23: 4:24
        goto -> bb3;                     // scope 0 at ui/consts/const-match-pattern-arm.rs:4:23: 4:24
    }

    bb3: {
        StorageDead(_1);                 // scope 0 at ui/consts/const-match-pattern-arm.rs:6:1: 6:2
        return;                          // scope 0 at ui/consts/const-match-pattern-arm.rs:3:1: 6:3
    }
}

const _: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-match-pattern-arm.rs:8:10: 8:14
    let mut _1: std::option::Option<bool>; // in scope 0 at ui/consts/const-match-pattern-arm.rs:9:11: 9:21
    let mut _2: isize;                   // in scope 0 at ui/consts/const-match-pattern-arm.rs:10:9: 10:20
    let _3: bool;                        // in scope 0 at ui/consts/const-match-pattern-arm.rs:10:14: 10:19
    scope 1 {
        debug value => _3;               // in scope 1 at ui/consts/const-match-pattern-arm.rs:10:14: 10:19
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-match-pattern-arm.rs:9:11: 9:21
        _1 = Option::<bool>::Some(const true); // scope 0 at ui/consts/const-match-pattern-arm.rs:9:11: 9:21
        _2 = discriminant(_1);           // scope 0 at ui/consts/const-match-pattern-arm.rs:9:11: 9:21
        switchInt(move _2) -> [1: bb2, otherwise: bb1]; // scope 0 at ui/consts/const-match-pattern-arm.rs:9:5: 9:21
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/consts/const-match-pattern-arm.rs:11:14: 11:19
        goto -> bb3;                     // scope 0 at ui/consts/const-match-pattern-arm.rs:11:14: 11:19
    }

    bb2: {
        StorageLive(_3);                 // scope 0 at ui/consts/const-match-pattern-arm.rs:10:14: 10:19
        _3 = ((_1 as Some).0: bool);     // scope 0 at ui/consts/const-match-pattern-arm.rs:10:14: 10:19
        _0 = const true;                 // scope 1 at ui/consts/const-match-pattern-arm.rs:10:24: 10:28
        StorageDead(_3);                 // scope 0 at ui/consts/const-match-pattern-arm.rs:10:27: 10:28
        goto -> bb3;                     // scope 0 at ui/consts/const-match-pattern-arm.rs:10:27: 10:28
    }

    bb3: {
        StorageDead(_1);                 // scope 0 at ui/consts/const-match-pattern-arm.rs:13:1: 13:2
        return;                          // scope 0 at ui/consts/const-match-pattern-arm.rs:8:1: 13:3
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-match-pattern-arm.rs:15:11: 15:11

    bb0: {
        return;                          // scope 0 at ui/consts/const-match-pattern-arm.rs:15:13: 15:13
    }
}
