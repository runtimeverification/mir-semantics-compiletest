// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static PLUS_ONE: &dyn Fn(i32) -> i32 + Sync = {
    let mut _0: &dyn std::ops::Fn(i32) -> i32 + std::marker::Sync; // return place in scope 0 at ui/consts/issue-27890.rs:2:18: 2:54
    let mut _1: &dyn std::ops::Fn(i32) -> i32 + std::marker::Sync; // in scope 0 at ui/consts/issue-27890.rs:2:57: 3:44
    let _2: &dyn std::ops::Fn(i32) -> i32 + std::marker::Sync; // in scope 0 at ui/consts/issue-27890.rs:2:57: 3:44
    let mut _3: &[closure@ui/consts/issue-27890.rs:2:59: 2:67]; // in scope 0 at ui/consts/issue-27890.rs:2:57: 2:78
    let _4: &[closure@ui/consts/issue-27890.rs:2:59: 2:67]; // in scope 0 at ui/consts/issue-27890.rs:2:57: 2:78
    let _5: [closure@ui/consts/issue-27890.rs:2:59: 2:67]; // in scope 0 at ui/consts/issue-27890.rs:2:59: 2:77
    let mut _6: &[closure@ui/consts/issue-27890.rs:2:59: 2:67]; // in scope 0 at ui/consts/issue-27890.rs:2:57: 2:78

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/issue-27890.rs:2:57: 3:44
        StorageLive(_2);                 // scope 0 at ui/consts/issue-27890.rs:2:57: 3:44
        StorageLive(_3);                 // scope 0 at ui/consts/issue-27890.rs:2:57: 2:78
        StorageLive(_4);                 // scope 0 at ui/consts/issue-27890.rs:2:57: 2:78
        _6 = const _;                    // scope 0 at ui/consts/issue-27890.rs:2:57: 2:78
                                         // mir::Constant
                                         // + span: ui/consts/issue-27890.rs:2:57: 2:78
                                         // + literal: Const { ty: &[closure@ui/consts/issue-27890.rs:2:59: 2:67], val: Unevaluated(PLUS_ONE, [], Some(promoted[0])) }
        _4 = &(*_6);                     // scope 0 at ui/consts/issue-27890.rs:2:57: 2:78
        _3 = &(*_4);                     // scope 0 at ui/consts/issue-27890.rs:2:57: 2:78
        _2 = move _3 as &dyn std::ops::Fn(i32) -> i32 + std::marker::Sync (Pointer(Unsize)); // scope 0 at ui/consts/issue-27890.rs:2:57: 2:78
        StorageDead(_3);                 // scope 0 at ui/consts/issue-27890.rs:2:77: 2:78
        _1 = &(*_2);                     // scope 0 at ui/consts/issue-27890.rs:2:57: 3:44
        _0 = move _1 as &dyn std::ops::Fn(i32) -> i32 + std::marker::Sync (Pointer(Unsize)); // scope 0 at ui/consts/issue-27890.rs:2:57: 3:44
        StorageDead(_4);                 // scope 0 at ui/consts/issue-27890.rs:3:43: 3:44
        StorageDead(_2);                 // scope 0 at ui/consts/issue-27890.rs:3:43: 3:44
        StorageDead(_1);                 // scope 0 at ui/consts/issue-27890.rs:3:43: 3:44
        return;                          // scope 0 at ui/consts/issue-27890.rs:2:1: 3:45
    }
}

promoted[0] in PLUS_ONE: &[closure@ui/consts/issue-27890.rs:2:59: 2:67] = {
    let mut _0: &[closure@ui/consts/issue-27890.rs:2:59: 2:67]; // return place in scope 0 at ui/consts/issue-27890.rs:2:57: 2:78
    let mut _1: [closure@ui/consts/issue-27890.rs:2:59: 2:67]; // in scope 0 at ui/consts/issue-27890.rs:2:59: 2:77

    bb0: {
        _1 = [closure@ui/consts/issue-27890.rs:2:59: 2:67]; // scope 0 at ui/consts/issue-27890.rs:2:59: 2:77
                                         // closure
                                         // + def_id: DefId(0:4 ~ issue_27890[a28a]::PLUS_ONE::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn((i32,)) -> i32,
                                         //     (),
                                         // ]
        _0 = &_1;                        // scope 0 at ui/consts/issue-27890.rs:2:57: 2:78
        return;                          // scope 0 at ui/consts/issue-27890.rs:2:57: 2:78
    }
}

fn PLUS_ONE::{closure#0}(_1: &[closure@ui/consts/issue-27890.rs:2:59: 2:67], _2: i32) -> i32 {
    debug x => _2;                       // in scope 0 at ui/consts/issue-27890.rs:2:60: 2:61
    let mut _0: i32;                     // return place in scope 0 at ui/consts/issue-27890.rs:2:68: 2:68
    let mut _3: i32;                     // in scope 0 at ui/consts/issue-27890.rs:2:70: 2:71
    let mut _4: (i32, bool);             // in scope 0 at ui/consts/issue-27890.rs:2:70: 2:75

    bb0: {
        _3 = _2;                         // scope 0 at ui/consts/issue-27890.rs:2:70: 2:71
        _4 = CheckedAdd(_3, const 1_i32); // scope 0 at ui/consts/issue-27890.rs:2:70: 2:75
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, const 1_i32) -> bb1; // scope 0 at ui/consts/issue-27890.rs:2:70: 2:75
    }

    bb1: {
        _0 = move (_4.0: i32);           // scope 0 at ui/consts/issue-27890.rs:2:70: 2:75
        return;                          // scope 0 at ui/consts/issue-27890.rs:2:77: 2:77
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-27890.rs:5:11: 5:11
    let mut _1: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: i32;                         // in scope 0 at ui/consts/issue-27890.rs:6:16: 6:27
    let mut _4: &dyn std::ops::Fn(i32) -> i32 + std::marker::Sync; // in scope 0 at ui/consts/issue-27890.rs:6:16: 6:24
    let _5: &&dyn std::ops::Fn(i32) -> i32 + std::marker::Sync; // in scope 0 at ui/consts/issue-27890.rs:6:16: 6:24
    let mut _6: (i32,);                  // in scope 0 at ui/consts/issue-27890.rs:6:16: 6:27
    let mut _7: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _8: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _9: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _23: &dyn std::ops::Fn(i32) -> i32 + std::marker::Sync; // in scope 0 at ui/consts/issue-27890.rs:6:16: 6:24
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _5 = const {alloc1: &&dyn Fn(i32) -> i32 + Sync}; // scope 0 at ui/consts/issue-27890.rs:6:16: 6:24
                                         // mir::Constant
                                         // + span: ui/consts/issue-27890.rs:6:16: 6:24
                                         // + literal: Const { ty: &&dyn Fn(i32) -> i32 + Sync, val: Value(Scalar(alloc1)) }
        _23 = deref_copy (*_5);          // scope 0 at ui/consts/issue-27890.rs:6:16: 6:24
        _4 = _23;                        // scope 0 at ui/consts/issue-27890.rs:6:16: 6:24
        _6 = const (2_i32,);             // scope 0 at ui/consts/issue-27890.rs:6:16: 6:27
        _3 = <dyn Fn(i32) -> i32 + Sync as Fn<(i32,)>>::call(move _4, move _6) -> bb1; // scope 0 at ui/consts/issue-27890.rs:6:16: 6:27
                                         // mir::Constant
                                         // + span: ui/consts/issue-27890.rs:6:16: 6:24
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a dyn Fn(i32) -> i32 + Sync, (i32,)) -> <dyn Fn(i32) -> i32 + Sync as FnOnce<(i32,)>>::Output {<dyn Fn(i32) -> i32 + Sync as Fn<(i32,)>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _22 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _7 = _22;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _7);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_1.0: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_1.1: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = const 3_i32;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _14 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<i32, i32>(move _16, move _17, move _19, move _21); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/consts/issue-27890.rs:7:2: 7:2
    }
}

alloc1 (static: PLUS_ONE, size: 16, align: 8) {
    ╾───────alloc4────────╼ ╾───────alloc5────────╼ │ ╾──────╼╾──────╼
}

alloc4 (size: 0, align: 1) {}

alloc5 (vtable: impl Fn<(i32,)> for [closure@ui/consts/issue-27890.rs:2:59: 2:67])

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/consts/issue-27890.rs:6:29: 6:30

    bb0: {
        _1 = const 3_i32;                // scope 0 at ui/consts/issue-27890.rs:6:29: 6:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
