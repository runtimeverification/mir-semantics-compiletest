// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static PLUS_ONE: &dyn Fn(i32) -> i32 + Sync = {
    let mut _0: &dyn std::ops::Fn(i32) -> i32 + std::marker::Sync;
    let mut _1: &dyn std::ops::Fn(i32) -> i32 + std::marker::Sync;
    let _2: &dyn std::ops::Fn(i32) -> i32 + std::marker::Sync;
    let mut _3: &[closure@ui/consts/issue-27890.rs:2:59: 2:67];
    let _4: &[closure@ui/consts/issue-27890.rs:2:59: 2:67];
    let _5: [closure@ui/consts/issue-27890.rs:2:59: 2:67];
    let mut _6: &[closure@ui/consts/issue-27890.rs:2:59: 2:67];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _6 = const _;
        _4 = &(*_6);
        _3 = &(*_4);
        _2 = move _3 as &dyn std::ops::Fn(i32) -> i32 + std::marker::Sync (Pointer(Unsize));
        StorageDead(_3);
        _1 = &(*_2);
        _0 = move _1 as &dyn std::ops::Fn(i32) -> i32 + std::marker::Sync (Pointer(Unsize));
        StorageDead(_4);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in PLUS_ONE: &[closure@ui/consts/issue-27890.rs:2:59: 2:67] = {
    let mut _0: &[closure@ui/consts/issue-27890.rs:2:59: 2:67];
    let mut _1: [closure@ui/consts/issue-27890.rs:2:59: 2:67];

    bb0: {
        _1 = [closure@ui/consts/issue-27890.rs:2:59: 2:67];
        _0 = &_1;
        return;
    }
}

fn PLUS_ONE::{closure#0}(_1: &[closure@ui/consts/issue-27890.rs:2:59: 2:67], _2: i32) -> i32 {
    debug x => _2;
    let mut _0: i32;

    bb0: {
        _0 = Add(_2, const 1_i32);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let _4: &&dyn std::ops::Fn(i32) -> i32 + std::marker::Sync;
    let mut _5: (i32,);
    let _6: &i32;
    let _7: &i32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: i32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: &i32;
    let mut _16: &dyn std::ops::Fn(i32) -> i32 + std::marker::Sync;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }

    bb0: {
        _4 = const {alloc1: &&dyn Fn(i32) -> i32 + Sync};
        _16 = deref_copy (*_4);
        _5 = (const 2_i32,);
        _3 = <dyn Fn(i32) -> i32 + Sync as Fn<(i32,)>>::call(_16, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _15 = const _;
        _1 = (move _2, _15);
        _6 = (_1.0: &i32);
        _7 = (_1.1: &i32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i32, i32>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        return;
    }
}

alloc1 (static: PLUS_ONE, size: 16, align: 8) {
    ╾───────alloc6────────╼ ╾───────alloc7────────╼ │ ╾──────╼╾──────╼
}

alloc6 (size: 0, align: 1) {}

alloc7 (vtable: impl Fn<(i32,)> for [closure@ui/consts/issue-27890.rs:2:59: 2:67])

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}
