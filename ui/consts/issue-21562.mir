// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static SARRAY: [i32; 1] = {
    let mut _0: [i32; 1];                // return place in scope 0 at ui/consts/issue-21562.rs:8:16: 8:24

    bb0: {
        _0 = [const 11_i32];             // scope 0 at ui/consts/issue-21562.rs:8:27: 8:31
        return;                          // scope 0 at ui/consts/issue-21562.rs:8:1: 8:32
    }
}

SARRAY::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/issue-21562.rs:8:22: 8:23

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/issue-21562.rs:8:22: 8:23
        return;                          // scope 0 at ui/consts/issue-21562.rs:8:22: 8:23
    }
}

static mystruct: MyStruct = {
    let mut _0: MyStruct;                // return place in scope 0 at ui/consts/issue-21562.rs:15:18: 15:26
    let mut _1: *const [i32];            // in scope 0 at ui/consts/issue-21562.rs:16:10: 16:17
    let mut _2: *const [i32; 1];         // in scope 0 at ui/consts/issue-21562.rs:16:10: 16:17
    let _3: &[i32; 1];                   // in scope 0 at ui/consts/issue-21562.rs:16:10: 16:17
    let _4: &[i32; 1];                   // in scope 0 at ui/consts/issue-21562.rs:16:11: 16:17

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/issue-21562.rs:16:10: 16:17
        StorageLive(_2);                 // scope 0 at ui/consts/issue-21562.rs:16:10: 16:17
        StorageLive(_3);                 // scope 0 at ui/consts/issue-21562.rs:16:10: 16:17
        StorageLive(_4);                 // scope 0 at ui/consts/issue-21562.rs:16:11: 16:17
        _4 = const {alloc1: &[i32; 1]};  // scope 0 at ui/consts/issue-21562.rs:16:11: 16:17
                                         // mir::Constant
                                         // + span: ui/consts/issue-21562.rs:16:11: 16:17
                                         // + literal: Const { ty: &[i32; 1], val: Value(Scalar(alloc1)) }
        _3 = &(*_4);                     // scope 0 at ui/consts/issue-21562.rs:16:10: 16:17
        _2 = &raw const (*_3);           // scope 0 at ui/consts/issue-21562.rs:16:10: 16:17
        _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at ui/consts/issue-21562.rs:16:10: 16:17
        StorageDead(_2);                 // scope 0 at ui/consts/issue-21562.rs:16:16: 16:17
        _0 = MyStruct { arr: move _1 };  // scope 0 at ui/consts/issue-21562.rs:15:29: 17:2
        StorageDead(_3);                 // scope 0 at ui/consts/issue-21562.rs:17:1: 17:2
        StorageDead(_1);                 // scope 0 at ui/consts/issue-21562.rs:17:1: 17:2
        return;                          // scope 0 at ui/consts/issue-21562.rs:15:1: 17:3
    }
}

alloc1 (static: SARRAY, size: 4, align: 4) {
    0b 00 00 00                                     â”‚ ....
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-21562.rs:19:11: 19:11

    bb0: {
        return;                          // scope 0 at ui/consts/issue-21562.rs:19:13: 19:13
    }
}
