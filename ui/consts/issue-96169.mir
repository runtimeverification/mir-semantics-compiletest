// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn a() -> usize {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn bar(_1: u32) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn baz() -> *const dyn Fn(u32) {
    let mut _0: *const dyn std::ops::Fn(u32);
    let mut _1: !;

    bb0: {
        _1 = core::panicking::panic(const "not implemented") -> unwind continue;
    }
}

fn foo() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: &*const dyn std::ops::Fn(u32);
    let _3: *const dyn std::ops::Fn(u32);
    let mut _4: &*const dyn std::ops::Fn(u32);

    bb0: {
        _3 = baz() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _4 = const _;
        _1 = <*const dyn Fn(u32) as PartialEq>::eq(move _2, _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in foo: &*const dyn Fn(u32) = {
    let mut _0: &*const dyn std::ops::Fn(u32);
    let mut _1: *const dyn std::ops::Fn(u32);
    let mut _2: *const dyn std::ops::Fn(u32);
    let mut _3: &dyn std::ops::Fn(u32);
    let mut _4: &fn(u32) {bar};
    let mut _5: &fn(u32) {bar};
    let mut _6: fn(u32) {bar};

    bb0: {
        _6 = bar;
        _5 = &_6;
        _4 = &(*_5);
        _3 = move _4 as &dyn std::ops::Fn(u32) (Pointer(Unsize));
        _2 = &raw const (*_3);
        _1 = move _2 as *const dyn std::ops::Fn(u32) (Pointer(Unsize));
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
