// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:16: 13:21>::clone(_1: &NoWait) -> NoWait {
    debug self => _1;                    // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:16: 13:21
    let mut _0: NoWait;                  // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:16: 13:21
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:16: 13:21
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:21: 13:21
    }
}

fn <impl at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:23: 13:25>::assert_receiver_is_total_eq(_1: &NoWait) -> () {
    debug self => _1;                    // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:23: 13:25
    let mut _0: ();                      // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:23: 13:25
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:25: 13:25
    }
}

fn <impl at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:27: 13:36>::eq(_1: &NoWait, _2: &NoWait) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:27: 13:36
    debug other => _2;                   // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:27: 13:36
    let mut _0: bool;                    // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:27: 13:36
    let mut _3: u32;                     // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:14:15: 14:18
    let mut _4: u32;                     // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:14:15: 14:18

    bb0: {
        _3 = ((*_1).0: u32);             // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:14:15: 14:18
        _4 = ((*_2).0: u32);             // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:14:15: 14:18
        _0 = Eq(move _3, move _4);       // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:14:15: 14:18
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:36: 13:36
    }
}

fn <impl at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:38: 13:42>::hash(_1: &NoWait, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:38: 13:42
    debug state => _2;                   // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:38: 13:42
    let mut _0: ();                      // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:38: 13:42
    let mut _3: &u32;                    // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:14:15: 14:18
    let _4: &u32;                        // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:14:15: 14:18
    let mut _5: &mut __H;                // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:38: 13:42

    bb0: {
        _4 = &((*_1).0: u32);            // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:14:15: 14:18
        _3 = _4;                         // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:14:15: 14:18
        _5 = &mut (*_2);                 // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:38: 13:42
        _0 = <u32 as Hash>::hash::<__H>(move _3, move _5) -> bb1; // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:14:15: 14:18
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_libstd.rs:14:15: 14:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b mut __H) {<u32 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:42: 13:42
    }
}

fn <impl at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:44: 13:49>::fmt(_1: &NoWait, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:44: 13:49
    debug f => _2;                       // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:44: 13:49
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:44: 13:49
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:44: 13:49
    let mut _4: &str;                    // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:44: 13:49
    let _5: &str;                        // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:44: 13:49
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:14:15: 14:18
    let mut _7: &&u32;                   // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:14:15: 14:18
    let _8: &&u32;                       // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:14:15: 14:18
    let _9: &u32;                        // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:14:15: 14:18

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:44: 13:49
        _5 = const "NoWait";             // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:44: 13:49
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_libstd.rs:13:44: 13:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:44: 13:49
        _9 = &((*_1).0: u32);            // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:14:15: 14:18
        _8 = &_9;                        // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:14:15: 14:18
        _7 = _8;                         // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:14:15: 14:18
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:14:15: 14:18
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:44: 13:49
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_libstd.rs:13:44: 13:49
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:13:49: 13:49
    }
}

const CONDVAR_HAS_NO_WAITERS: NoWait = {
    let mut _0: NoWait;                  // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:16:31: 16:37

    bb0: {
        _0 = NoWait(const 42_u32);       // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:16:40: 16:50
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:16:1: 16:51
    }
}

fn <impl at ui/consts/min_const_fn/min_const_fn_libstd.rs:18:1: 18:13>::new() -> Condvar {
    let mut _0: Condvar;                 // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:19:27: 19:34
    let mut _1: std::cell::UnsafeCell<std::sync::atomic::AtomicU32>; // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:21:22: 21:79
    let mut _2: std::sync::atomic::AtomicU32; // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:21:38: 21:78
    let mut _3: u32;                     // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:21:53: 21:77

    bb0: {
        _3 = const 42_u32;               // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:21:53: 21:77
        _2 = AtomicU32::new(move _3) -> bb1; // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:21:38: 21:78
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_libstd.rs:21:38: 21:52
                                         // + literal: Const { ty: fn(u32) -> AtomicU32 {AtomicU32::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = UnsafeCell::<AtomicU32>::new(move _2) -> bb2; // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:21:22: 21:79
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_libstd.rs:21:22: 21:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(AtomicU32) -> UnsafeCell<AtomicU32> {UnsafeCell::<AtomicU32>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = Condvar { condvar: move _1 }; // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:20:9: 22:10
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:23:6: 23:6
    }
}

// MIR FOR CTFE
fn <impl at ui/consts/min_const_fn/min_const_fn_libstd.rs:18:1: 18:13>::new() -> Condvar {
    let mut _0: Condvar;                 // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:19:27: 19:34
    let mut _1: std::cell::UnsafeCell<std::sync::atomic::AtomicU32>; // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:21:22: 21:79
    let mut _2: std::sync::atomic::AtomicU32; // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:21:38: 21:78
    let mut _3: u32;                     // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:21:53: 21:77
    let mut _4: NoWait;                  // in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:21:53: 21:75

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:21:22: 21:79
        StorageLive(_2);                 // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:21:38: 21:78
        StorageLive(_3);                 // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:21:53: 21:77
        StorageLive(_4);                 // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:21:53: 21:75
        _4 = const _;                    // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:21:53: 21:75
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_libstd.rs:21:53: 21:75
                                         // + literal: Const { ty: NoWait, val: Unevaluated(CONDVAR_HAS_NO_WAITERS, [], None) }
        _3 = (_4.0: u32);                // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:21:53: 21:77
        ConstEvalCounter;                // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:21:38: 21:78
        _2 = AtomicU32::new(move _3) -> bb1; // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:21:38: 21:78
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_libstd.rs:21:38: 21:52
                                         // + literal: Const { ty: fn(u32) -> AtomicU32 {AtomicU32::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_3);                 // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:21:77: 21:78
        ConstEvalCounter;                // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:21:22: 21:79
        _1 = UnsafeCell::<AtomicU32>::new(move _2) -> bb2; // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:21:22: 21:79
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_libstd.rs:21:22: 21:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(AtomicU32) -> UnsafeCell<AtomicU32> {UnsafeCell::<AtomicU32>::new}, val: Value(<ZST>) }
    }

    bb2: {
        StorageDead(_2);                 // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:21:78: 21:79
        _0 = Condvar { condvar: move _1 }; // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:20:9: 22:10
        StorageDead(_1);                 // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:22:9: 22:10
        StorageDead(_4);                 // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:23:5: 23:6
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:23:6: 23:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:26:11: 26:11

    bb0: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:26:13: 26:13
    }
}

fn NoWait(_1: u32) -> NoWait {
    let mut _0: NoWait;                  // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:14:1: 14:14

    bb0: {
        _0 = NoWait(move _1);            // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:14:1: 14:14
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:14:1: 14:14
    }
}

// MIR FOR CTFE
fn NoWait(_1: u32) -> NoWait {
    let mut _0: NoWait;                  // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:14:1: 14:14

    bb0: {
        _0 = NoWait(move _1);            // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:14:1: 14:14
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_libstd.rs:14:1: 14:14
    }
}
