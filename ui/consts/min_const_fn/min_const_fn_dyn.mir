// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn no_inner_dyn_trait(_1: Hide) -> () {
    debug _x => _1;                      // in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:9:29: 9:31
    let mut _0: ();                      // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:9:39: 9:39

    bb0: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:9:41: 9:41
    }
}

// MIR FOR CTFE
fn no_inner_dyn_trait(_1: Hide) -> () {
    debug _x => _1;                      // in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:9:29: 9:31
    let mut _0: ();                      // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:9:39: 9:39

    bb0: {
        _0 = const ();                   // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:9:39: 9:41
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:9:41: 9:41
    }
}

fn no_inner_dyn_trait2(_1: Hide) -> () {
    debug x => _1;                       // in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:10:30: 10:31
    let mut _0: ();                      // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:10:39: 10:39

    bb0: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:12:2: 12:2
    }
}

// MIR FOR CTFE
fn no_inner_dyn_trait2(_1: Hide) -> () {
    debug x => _1;                       // in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:10:30: 10:31
    let mut _0: ();                      // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:10:39: 10:39
    let _2: &dyn std::fmt::Debug;        // in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:11:5: 11:14

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:11:5: 11:14
        _2 = ((_1.0: HasDyn).0: &dyn std::fmt::Debug); // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:11:5: 11:14
        StorageDead(_2);                 // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:11:14: 11:15
        _0 = const ();                   // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:10:39: 12:2
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:12:2: 12:2
    }
}

fn no_inner_dyn_trait_ret() -> Hide {
    let mut _0: Hide;                    // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:38: 13:42
    let mut _1: HasDyn;                  // in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:50: 13:70
    let mut _2: &dyn std::fmt::Debug;    // in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:66: 13:68
    let mut _3: &i32;                    // in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:66: 13:68
    let _4: &i32;                        // in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:66: 13:68
    let mut _5: &i32;                    // in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:66: 13:68

    bb0: {
        _5 = const _;                    // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:66: 13:68
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_dyn.rs:13:66: 13:68
                                         // + literal: Const { ty: &i32, val: Unevaluated(no_inner_dyn_trait_ret, [], Some(promoted[0])) }
        _4 = _5;                         // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:66: 13:68
        _3 = _4;                         // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:66: 13:68
        _2 = move _3 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:66: 13:68
        _1 = HasDyn { field: move _2 };  // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:50: 13:70
        _0 = Hide(move _1);              // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:45: 13:71
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:73: 13:73
    }
}

promoted[0] in no_inner_dyn_trait_ret: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:66: 13:68
    let mut _1: i32;                     // in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:67: 13:68

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:67: 13:68
        _0 = &_1;                        // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:66: 13:68
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:66: 13:68
    }
}

// MIR FOR CTFE
fn no_inner_dyn_trait_ret() -> Hide {
    let mut _0: Hide;                    // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:38: 13:42
    let mut _1: HasDyn;                  // in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:50: 13:70
    let mut _2: &dyn std::fmt::Debug;    // in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:66: 13:68
    let mut _3: &i32;                    // in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:66: 13:68
    let _4: &i32;                        // in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:66: 13:68
    let _5: i32;                         // in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:67: 13:68
    let mut _6: &i32;                    // in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:66: 13:68

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:50: 13:70
        StorageLive(_2);                 // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:66: 13:68
        StorageLive(_3);                 // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:66: 13:68
        StorageLive(_4);                 // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:66: 13:68
        _6 = const _;                    // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:66: 13:68
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_dyn.rs:13:66: 13:68
                                         // + literal: Const { ty: &i32, val: Unevaluated(no_inner_dyn_trait_ret, [], Some(promoted[0])) }
        _4 = &(*_6);                     // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:66: 13:68
        _3 = &(*_4);                     // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:66: 13:68
        _2 = move _3 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:66: 13:68
        StorageDead(_3);                 // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:67: 13:68
        _1 = HasDyn { field: move _2 };  // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:50: 13:70
        StorageDead(_2);                 // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:69: 13:70
        _0 = Hide(move _1);              // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:45: 13:71
        StorageDead(_1);                 // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:70: 13:71
        StorageDead(_4);                 // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:72: 13:73
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:13:73: 13:73
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:15:11: 15:11

    bb0: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:15:13: 15:13
    }
}

fn Hide(_1: HasDyn) -> Hide {
    let mut _0: Hide;                    // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:7:1: 7:12

    bb0: {
        _0 = Hide(move _1);              // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:7:1: 7:12
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:7:1: 7:12
    }
}

// MIR FOR CTFE
fn Hide(_1: HasDyn) -> Hide {
    let mut _0: Hide;                    // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:7:1: 7:12

    bb0: {
        _0 = Hide(move _1);              // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:7:1: 7:12
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_dyn.rs:7:1: 7:12
    }
}
