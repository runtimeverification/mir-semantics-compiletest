// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn no_inner_dyn_trait(_1: Hide) -> () {
    debug _x => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

// MIR FOR CTFE
fn no_inner_dyn_trait(_1: Hide) -> () {
    debug _x => _1;
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn no_inner_dyn_trait2(_1: Hide) -> () {
    debug x => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

// MIR FOR CTFE
fn no_inner_dyn_trait2(_1: Hide) -> () {
    debug x => _1;
    let mut _0: ();
    let _2: &dyn std::fmt::Debug;

    bb0: {
        StorageLive(_2);
        _2 = ((_1.0: HasDyn).0: &dyn std::fmt::Debug);
        StorageDead(_2);
        _0 = const ();
        return;
    }
}

fn no_inner_dyn_trait_ret() -> Hide {
    let mut _0: Hide;
    let mut _1: HasDyn;
    let mut _2: &dyn std::fmt::Debug;
    let mut _3: &i32;

    bb0: {
        _3 = const _;
        _2 = _3 as &dyn std::fmt::Debug (Pointer(Unsize));
        _1 = HasDyn { field: move _2 };
        _0 = Hide(move _1);
        return;
    }
}

promoted[0] in no_inner_dyn_trait_ret: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

// MIR FOR CTFE
fn no_inner_dyn_trait_ret() -> Hide {
    let mut _0: Hide;
    let mut _1: HasDyn;
    let mut _2: &dyn std::fmt::Debug;
    let mut _3: &i32;
    let _4: &i32;
    let _5: i32;
    let mut _6: &i32;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _6 = const _;
        _4 = &(*_6);
        _3 = &(*_4);
        _2 = move _3 as &dyn std::fmt::Debug (Pointer(Unsize));
        StorageDead(_3);
        _1 = HasDyn { field: move _2 };
        StorageDead(_2);
        _0 = Hide(move _1);
        StorageDead(_1);
        StorageDead(_4);
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Hide(_1: HasDyn) -> Hide {
    let mut _0: Hide;

    bb0: {
        _0 = Hide(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Hide(_1: HasDyn) -> Hide {
    let mut _0: Hide;

    bb0: {
        _0 = Hide(move _1);
        return;
    }
}
