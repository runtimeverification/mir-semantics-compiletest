// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn ret_i32_no_unsafe() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:3:40: 3:43

    bb0: {
        _0 = const 42_i32;               // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:3:46: 3:48
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:3:50: 3:50
    }
}

// MIR FOR CTFE
fn ret_i32_no_unsafe() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:3:40: 3:43

    bb0: {
        _0 = const 42_i32;               // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:3:46: 3:48
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:3:50: 3:50
    }
}

fn ret_null_ptr_no_unsafe() -> *const T {
    let mut _0: *const T;                // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:4:48: 4:56

    bb0: {
        _0 = null::<T>() -> bb1;         // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:4:59: 4:75
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:4:59: 4:73
                                         // + literal: Const { ty: fn() -> *const T {null::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:4:77: 4:77
    }
}

// MIR FOR CTFE
fn ret_null_ptr_no_unsafe() -> *const T {
    let mut _0: *const T;                // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:4:48: 4:56

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:4:59: 4:75
        _0 = null::<T>() -> bb1;         // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:4:59: 4:75
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:4:59: 4:73
                                         // + literal: Const { ty: fn() -> *const T {null::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:4:77: 4:77
    }
}

fn ret_null_mut_ptr_no_unsafe() -> *mut T {
    let mut _0: *mut T;                  // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:5:52: 5:58

    bb0: {
        _0 = null_mut::<T>() -> bb1;     // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:5:61: 5:81
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:5:61: 5:79
                                         // + literal: Const { ty: fn() -> *mut T {null_mut::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:5:83: 5:83
    }
}

// MIR FOR CTFE
fn ret_null_mut_ptr_no_unsafe() -> *mut T {
    let mut _0: *mut T;                  // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:5:52: 5:58

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:5:61: 5:81
        _0 = null_mut::<T>() -> bb1;     // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:5:61: 5:81
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:5:61: 5:79
                                         // + literal: Const { ty: fn() -> *mut T {null_mut::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:5:83: 5:83
    }
}

fn no_unsafe() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:6:22: 6:22
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:6:35: 6:35
    }
}

// MIR FOR CTFE
fn no_unsafe() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:6:22: 6:22
    scope 1 {
    }

    bb0: {
        _0 = const ();                   // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:6:24: 6:33
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:6:35: 6:35
    }
}

fn call_unsafe_const_fn() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:8:36: 8:39
    scope 1 {
    }

    bb0: {
        _0 = ret_i32_no_unsafe() -> bb1; // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:9:14: 9:33
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:9:14: 9:31
                                         // + literal: Const { ty: unsafe fn() -> i32 {ret_i32_no_unsafe}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:10:2: 10:2
    }
}

// MIR FOR CTFE
fn call_unsafe_const_fn() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:8:36: 8:39
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;                // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:9:14: 9:33
        _0 = ret_i32_no_unsafe() -> bb1; // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:9:14: 9:33
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:9:14: 9:31
                                         // + literal: Const { ty: unsafe fn() -> i32 {ret_i32_no_unsafe}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:10:2: 10:2
    }
}

fn call_unsafe_generic_const_fn() -> *const String {
    let mut _0: *const std::string::String; // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:11:44: 11:57
    scope 1 {
    }

    bb0: {
        _0 = ret_null_ptr_no_unsafe::<String>() -> bb1; // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:12:14: 12:48
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:12:14: 12:46
                                         // + literal: Const { ty: unsafe fn() -> *const String {ret_null_ptr_no_unsafe::<String>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:13:2: 13:2
    }
}

// MIR FOR CTFE
fn call_unsafe_generic_const_fn() -> *const String {
    let mut _0: *const std::string::String; // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:11:44: 11:57
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;                // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:12:14: 12:48
        _0 = ret_null_ptr_no_unsafe::<String>() -> bb1; // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:12:14: 12:48
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:12:14: 12:46
                                         // + literal: Const { ty: unsafe fn() -> *const String {ret_null_ptr_no_unsafe::<String>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:13:2: 13:2
    }
}

fn call_unsafe_generic_cell_const_fn() -> *const Vec<Cell<u32>> {
    let mut _0: *const std::vec::Vec<std::cell::Cell<u32>>; // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:15:8: 15:40
    let mut _1: *mut std::vec::Vec<std::cell::Cell<u32>>; // in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:17:14: 17:71
    scope 1 {
    }

    bb0: {
        _1 = ret_null_mut_ptr_no_unsafe::<Vec<Cell<u32>>>() -> bb1; // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:17:14: 17:71
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:17:14: 17:69
                                         // + literal: Const { ty: unsafe fn() -> *mut Vec<Cell<u32>> {ret_null_mut_ptr_no_unsafe::<Vec<Cell<u32>>>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = move _1 as *const std::vec::Vec<std::cell::Cell<u32>> (Pointer(MutToConstPointer)); // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:17:14: 17:71
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:18:2: 18:2
    }
}

// MIR FOR CTFE
fn call_unsafe_generic_cell_const_fn() -> *const Vec<Cell<u32>> {
    let mut _0: *const std::vec::Vec<std::cell::Cell<u32>>; // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:15:8: 15:40
    let mut _1: *mut std::vec::Vec<std::cell::Cell<u32>>; // in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:17:14: 17:71
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:17:14: 17:71
        ConstEvalCounter;                // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:17:14: 17:71
        _1 = ret_null_mut_ptr_no_unsafe::<Vec<Cell<u32>>>() -> bb1; // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:17:14: 17:71
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:17:14: 17:69
                                         // + literal: Const { ty: unsafe fn() -> *mut Vec<Cell<u32>> {ret_null_mut_ptr_no_unsafe::<Vec<Cell<u32>>>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = move _1 as *const std::vec::Vec<std::cell::Cell<u32>> (Pointer(MutToConstPointer)); // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:17:14: 17:71
        StorageDead(_1);                 // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:17:70: 17:71
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:18:2: 18:2
    }
}

fn call_unsafe_const_unsafe_fn() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:20:50: 20:53
    scope 1 {
    }

    bb0: {
        _0 = ret_i32_no_unsafe() -> bb1; // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:21:14: 21:33
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:21:14: 21:31
                                         // + literal: Const { ty: unsafe fn() -> i32 {ret_i32_no_unsafe}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:22:2: 22:2
    }
}

// MIR FOR CTFE
fn call_unsafe_const_unsafe_fn() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:20:50: 20:53
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;                // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:21:14: 21:33
        _0 = ret_i32_no_unsafe() -> bb1; // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:21:14: 21:33
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:21:14: 21:31
                                         // + literal: Const { ty: unsafe fn() -> i32 {ret_i32_no_unsafe}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:22:2: 22:2
    }
}

fn call_unsafe_generic_const_unsafe_fn() -> *const String {
    let mut _0: *const std::string::String; // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:23:58: 23:71
    scope 1 {
    }

    bb0: {
        _0 = ret_null_ptr_no_unsafe::<String>() -> bb1; // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:24:14: 24:48
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:24:14: 24:46
                                         // + literal: Const { ty: unsafe fn() -> *const String {ret_null_ptr_no_unsafe::<String>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:25:2: 25:2
    }
}

// MIR FOR CTFE
fn call_unsafe_generic_const_unsafe_fn() -> *const String {
    let mut _0: *const std::string::String; // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:23:58: 23:71
    scope 1 {
    }

    bb0: {
        ConstEvalCounter;                // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:24:14: 24:48
        _0 = ret_null_ptr_no_unsafe::<String>() -> bb1; // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:24:14: 24:48
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:24:14: 24:46
                                         // + literal: Const { ty: unsafe fn() -> *const String {ret_null_ptr_no_unsafe::<String>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:25:2: 25:2
    }
}

fn call_unsafe_generic_cell_const_unsafe_fn() -> *const Vec<Cell<u32>> {
    let mut _0: *const std::vec::Vec<std::cell::Cell<u32>>; // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:27:8: 27:40
    let mut _1: *mut std::vec::Vec<std::cell::Cell<u32>>; // in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:29:14: 29:71
    scope 1 {
    }

    bb0: {
        _1 = ret_null_mut_ptr_no_unsafe::<Vec<Cell<u32>>>() -> bb1; // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:29:14: 29:71
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:29:14: 29:69
                                         // + literal: Const { ty: unsafe fn() -> *mut Vec<Cell<u32>> {ret_null_mut_ptr_no_unsafe::<Vec<Cell<u32>>>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = move _1 as *const std::vec::Vec<std::cell::Cell<u32>> (Pointer(MutToConstPointer)); // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:29:14: 29:71
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:30:2: 30:2
    }
}

// MIR FOR CTFE
fn call_unsafe_generic_cell_const_unsafe_fn() -> *const Vec<Cell<u32>> {
    let mut _0: *const std::vec::Vec<std::cell::Cell<u32>>; // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:27:8: 27:40
    let mut _1: *mut std::vec::Vec<std::cell::Cell<u32>>; // in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:29:14: 29:71
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:29:14: 29:71
        ConstEvalCounter;                // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:29:14: 29:71
        _1 = ret_null_mut_ptr_no_unsafe::<Vec<Cell<u32>>>() -> bb1; // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:29:14: 29:71
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:29:14: 29:69
                                         // + literal: Const { ty: unsafe fn() -> *mut Vec<Cell<u32>> {ret_null_mut_ptr_no_unsafe::<Vec<Cell<u32>>>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = move _1 as *const std::vec::Vec<std::cell::Cell<u32>> (Pointer(MutToConstPointer)); // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:29:14: 29:71
        StorageDead(_1);                 // scope 1 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:29:70: 29:71
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:30:2: 30:2
    }
}

fn call_unsafe_const_unsafe_fn_immediate() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:32:60: 32:63

    bb0: {
        _0 = ret_i32_no_unsafe() -> bb1; // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:33:5: 33:24
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:33:5: 33:22
                                         // + literal: Const { ty: unsafe fn() -> i32 {ret_i32_no_unsafe}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:34:2: 34:2
    }
}

// MIR FOR CTFE
fn call_unsafe_const_unsafe_fn_immediate() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:32:60: 32:63

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:33:5: 33:24
        _0 = ret_i32_no_unsafe() -> bb1; // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:33:5: 33:24
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:33:5: 33:22
                                         // + literal: Const { ty: unsafe fn() -> i32 {ret_i32_no_unsafe}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:34:2: 34:2
    }
}

fn call_unsafe_generic_const_unsafe_fn_immediate() -> *const String {
    let mut _0: *const std::string::String; // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:35:68: 35:81

    bb0: {
        _0 = ret_null_ptr_no_unsafe::<String>() -> bb1; // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:36:5: 36:39
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:36:5: 36:37
                                         // + literal: Const { ty: unsafe fn() -> *const String {ret_null_ptr_no_unsafe::<String>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:37:2: 37:2
    }
}

// MIR FOR CTFE
fn call_unsafe_generic_const_unsafe_fn_immediate() -> *const String {
    let mut _0: *const std::string::String; // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:35:68: 35:81

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:36:5: 36:39
        _0 = ret_null_ptr_no_unsafe::<String>() -> bb1; // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:36:5: 36:39
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:36:5: 36:37
                                         // + literal: Const { ty: unsafe fn() -> *const String {ret_null_ptr_no_unsafe::<String>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:37:2: 37:2
    }
}

fn call_unsafe_generic_cell_const_unsafe_fn_immediate() -> *const Vec<Cell<u32>> {
    let mut _0: *const std::vec::Vec<std::cell::Cell<u32>>; // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:39:8: 39:40
    let mut _1: *mut std::vec::Vec<std::cell::Cell<u32>>; // in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:41:5: 41:62

    bb0: {
        _1 = ret_null_mut_ptr_no_unsafe::<Vec<Cell<u32>>>() -> bb1; // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:41:5: 41:62
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:41:5: 41:60
                                         // + literal: Const { ty: unsafe fn() -> *mut Vec<Cell<u32>> {ret_null_mut_ptr_no_unsafe::<Vec<Cell<u32>>>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = move _1 as *const std::vec::Vec<std::cell::Cell<u32>> (Pointer(MutToConstPointer)); // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:41:5: 41:62
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:42:2: 42:2
    }
}

// MIR FOR CTFE
fn call_unsafe_generic_cell_const_unsafe_fn_immediate() -> *const Vec<Cell<u32>> {
    let mut _0: *const std::vec::Vec<std::cell::Cell<u32>>; // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:39:8: 39:40
    let mut _1: *mut std::vec::Vec<std::cell::Cell<u32>>; // in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:41:5: 41:62

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:41:5: 41:62
        ConstEvalCounter;                // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:41:5: 41:62
        _1 = ret_null_mut_ptr_no_unsafe::<Vec<Cell<u32>>>() -> bb1; // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:41:5: 41:62
                                         // mir::Constant
                                         // + span: ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:41:5: 41:60
                                         // + literal: Const { ty: unsafe fn() -> *mut Vec<Cell<u32>> {ret_null_mut_ptr_no_unsafe::<Vec<Cell<u32>>>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = move _1 as *const std::vec::Vec<std::cell::Cell<u32>> (Pointer(MutToConstPointer)); // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:41:5: 41:62
        StorageDead(_1);                 // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:41:61: 41:62
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:42:2: 42:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:44:11: 44:11

    bb0: {
        return;                          // scope 0 at ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs:44:13: 44:13
    }
}
