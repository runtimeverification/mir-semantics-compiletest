// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/packed_pattern2.rs:3:10: 3:19>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/packed_pattern2.rs:3:10: 3:19
    debug other => _2;                   // in scope 0 at ui/consts/packed_pattern2.rs:3:10: 3:19
    let mut _0: bool;                    // return place in scope 0 at ui/consts/packed_pattern2.rs:3:10: 3:19
    let mut _3: &(u8, u16);              // in scope 0 at ui/consts/packed_pattern2.rs:6:5: 6:21
    let _4: (u8, u16);                   // in scope 0 at ui/consts/packed_pattern2.rs:6:5: 6:21
    let mut _5: &(u8, u16);              // in scope 0 at ui/consts/packed_pattern2.rs:6:5: 6:21
    let _6: (u8, u16);                   // in scope 0 at ui/consts/packed_pattern2.rs:6:5: 6:21

    bb0: {
        _4 = ((*_1).0: (u8, u16));       // scope 0 at ui/consts/packed_pattern2.rs:6:5: 6:21
        _3 = &_4;                        // scope 0 at ui/consts/packed_pattern2.rs:6:5: 6:21
        _6 = ((*_2).0: (u8, u16));       // scope 0 at ui/consts/packed_pattern2.rs:6:5: 6:21
        _5 = &_6;                        // scope 0 at ui/consts/packed_pattern2.rs:6:5: 6:21
        _0 = <(u8, u16) as PartialEq>::eq(move _3, move _5) -> bb1; // scope 0 at ui/consts/packed_pattern2.rs:6:5: 6:21
                                         // mir::Constant
                                         // + span: ui/consts/packed_pattern2.rs:6:5: 6:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (u8, u16), &'b (u8, u16)) -> bool {<(u8, u16) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/packed_pattern2.rs:3:19: 3:19
    }
}

fn <impl at ui/consts/packed_pattern2.rs:3:21: 3:23>::assert_receiver_is_total_eq(_1: &Foo) -> () {
    debug self => _1;                    // in scope 0 at ui/consts/packed_pattern2.rs:3:21: 3:23
    let mut _0: ();                      // return place in scope 0 at ui/consts/packed_pattern2.rs:3:21: 3:23
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/consts/packed_pattern2.rs:3:23: 3:23
    }
}

fn <impl at ui/consts/packed_pattern2.rs:3:31: 3:36>::clone(_1: &Foo) -> Foo {
    debug self => _1;                    // in scope 0 at ui/consts/packed_pattern2.rs:3:31: 3:36
    let mut _0: Foo;                     // return place in scope 0 at ui/consts/packed_pattern2.rs:3:31: 3:36
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/consts/packed_pattern2.rs:3:31: 3:36
        return;                          // scope 0 at ui/consts/packed_pattern2.rs:3:36: 3:36
    }
}

fn <impl at ui/consts/packed_pattern2.rs:9:10: 9:19>::eq(_1: &Bar, _2: &Bar) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/packed_pattern2.rs:9:10: 9:19
    debug other => _2;                   // in scope 0 at ui/consts/packed_pattern2.rs:9:10: 9:19
    let mut _0: bool;                    // return place in scope 0 at ui/consts/packed_pattern2.rs:9:10: 9:19
    let mut _3: &Foo;                    // in scope 0 at ui/consts/packed_pattern2.rs:12:5: 12:11
    let mut _4: &Foo;                    // in scope 0 at ui/consts/packed_pattern2.rs:12:5: 12:11

    bb0: {
        _3 = &((*_1).0: Foo);            // scope 0 at ui/consts/packed_pattern2.rs:12:5: 12:11
        _4 = &((*_2).0: Foo);            // scope 0 at ui/consts/packed_pattern2.rs:12:5: 12:11
        _0 = <Foo as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/consts/packed_pattern2.rs:12:5: 12:11
                                         // mir::Constant
                                         // + span: ui/consts/packed_pattern2.rs:12:5: 12:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/packed_pattern2.rs:9:19: 9:19
    }
}

fn <impl at ui/consts/packed_pattern2.rs:9:21: 9:23>::assert_receiver_is_total_eq(_1: &Bar) -> () {
    debug self => _1;                    // in scope 0 at ui/consts/packed_pattern2.rs:9:21: 9:23
    let mut _0: ();                      // return place in scope 0 at ui/consts/packed_pattern2.rs:9:21: 9:23
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/consts/packed_pattern2.rs:9:23: 9:23
    }
}

fn <impl at ui/consts/packed_pattern2.rs:9:31: 9:36>::clone(_1: &Bar) -> Bar {
    debug self => _1;                    // in scope 0 at ui/consts/packed_pattern2.rs:9:31: 9:36
    let mut _0: Bar;                     // return place in scope 0 at ui/consts/packed_pattern2.rs:9:31: 9:36
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/consts/packed_pattern2.rs:9:31: 9:36
        return;                          // scope 0 at ui/consts/packed_pattern2.rs:9:36: 9:36
    }
}

const FOO: Bar = {
    let mut _0: Bar;                     // return place in scope 0 at ui/consts/packed_pattern2.rs:15:12: 15:15
    let mut _1: Foo;                     // in scope 0 at ui/consts/packed_pattern2.rs:16:8: 18:6
    let mut _2: (u8, u16);               // in scope 0 at ui/consts/packed_pattern2.rs:17:16: 17:22

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/packed_pattern2.rs:16:8: 18:6
        StorageLive(_2);                 // scope 0 at ui/consts/packed_pattern2.rs:17:16: 17:22
        _2 = (const 5_u8, const 6_u16);  // scope 0 at ui/consts/packed_pattern2.rs:17:16: 17:22
        _1 = Foo { field: move _2 };     // scope 0 at ui/consts/packed_pattern2.rs:16:8: 18:6
        StorageDead(_2);                 // scope 0 at ui/consts/packed_pattern2.rs:18:5: 18:6
        _0 = Bar { a: move _1 };         // scope 0 at ui/consts/packed_pattern2.rs:15:18: 19:2
        StorageDead(_1);                 // scope 0 at ui/consts/packed_pattern2.rs:19:1: 19:2
        return;                          // scope 0 at ui/consts/packed_pattern2.rs:15:1: 19:3
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/packed_pattern2.rs:21:11: 21:11

    bb0: {
        return;                          // scope 0 at ui/consts/packed_pattern2.rs:27:2: 27:2
    }
}
