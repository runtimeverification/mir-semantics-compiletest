// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const IS_POWER_OF_TWO_A: bool = {
    let mut _0: bool;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::is_power_of_two(const 0_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const IS_POWER_OF_TWO_B: bool = {
    let mut _0: bool;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::is_power_of_two(const 32_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const IS_POWER_OF_TWO_C: bool = {
    let mut _0: bool;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::is_power_of_two(const 33_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const POW: u8 = {
    let mut _0: u8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u8>::pow(const 3_u8, const 5_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const CHECKED_POW_OK: Option<u8> = {
    let mut _0: std::option::Option<u8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u8>::checked_pow(const 3_u8, const 5_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const CHECKED_POW_OVERFLOW: Option<u8> = {
    let mut _0: std::option::Option<u8>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u8>::checked_pow(const 3_u8, const 6_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const WRAPPING_POW: u8 = {
    let mut _0: u8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u8>::wrapping_pow(const 3_u8, const 6_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const OVERFLOWING_POW: (u8, bool) = {
    let mut _0: (u8, bool);

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u8>::overflowing_pow(const 3_u8, const 6_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const SATURATING_POW: u8 = {
    let mut _0: u8;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u8>::saturating_pow(const 3_u8, const 6_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const NEXT_POWER_OF_TWO: u32 = {
    let mut _0: u32;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::next_power_of_two(const 3_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const CHECKED_NEXT_POWER_OF_TWO_OK: Option<u32> = {
    let mut _0: std::option::Option<u32>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::checked_next_power_of_two(const 3_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const CHECKED_NEXT_POWER_OF_TWO_OVERFLOW: Option<u32> = {
    let mut _0: std::option::Option<u32>;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::checked_next_power_of_two(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const WRAPPING_NEXT_POWER_OF_TWO: u32 = {
    let mut _0: u32;

    bb0: {
        ConstEvalCounter;
        _0 = core::num::<impl u32>::wrapping_next_power_of_two(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: !;
    let mut _4: bool;
    let mut _5: !;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: !;
    let mut _9: (&u8, &u8);
    let _10: &u8;
    let _11: &u8;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: u8;
    let mut _15: u8;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: (&std::option::Option<u8>, &std::option::Option<u8>);
    let _20: &std::option::Option<u8>;
    let _21: &std::option::Option<u8>;
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&std::option::Option<u8>, &std::option::Option<u8>);
    let _28: &std::option::Option<u8>;
    let _29: &std::option::Option<u8>;
    let mut _30: bool;
    let mut _31: bool;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: (&u8, &u8);
    let _36: &u8;
    let _37: &u8;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: u8;
    let mut _41: u8;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&(u8, bool), &(u8, bool));
    let _46: &(u8, bool);
    let _47: &(u8, bool);
    let mut _48: bool;
    let mut _49: bool;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&u8, &u8);
    let _54: &u8;
    let _55: &u8;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: u8;
    let mut _59: u8;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: (&u32, &u32);
    let _64: &u32;
    let _65: &u32;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: u32;
    let mut _69: u32;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&std::option::Option<u32>, &std::option::Option<u32>);
    let _74: &std::option::Option<u32>;
    let _75: &std::option::Option<u32>;
    let mut _76: bool;
    let mut _77: bool;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _81: (&std::option::Option<u32>, &std::option::Option<u32>);
    let _82: &std::option::Option<u32>;
    let _83: &std::option::Option<u32>;
    let mut _84: bool;
    let mut _85: bool;
    let _87: !;
    let mut _88: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _89: (&u32, &u32);
    let _90: &u32;
    let _91: &u32;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: u32;
    let mut _95: u32;
    let _97: !;
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _99: &u32;
    let mut _100: &u32;
    let mut _101: &std::option::Option<u32>;
    let mut _102: &std::option::Option<u32>;
    let mut _103: &std::option::Option<u32>;
    let mut _104: &std::option::Option<u32>;
    let mut _105: &u32;
    let mut _106: &u32;
    let mut _107: &u8;
    let mut _108: &u8;
    let mut _109: &(u8, bool);
    let mut _110: &(u8, bool);
    let mut _111: &u8;
    let mut _112: &u8;
    let mut _113: &std::option::Option<u8>;
    let mut _114: &std::option::Option<u8>;
    let mut _115: &std::option::Option<u8>;
    let mut _116: &std::option::Option<u8>;
    let mut _117: &u8;
    let mut _118: &u8;
    scope 1 {
        debug left_val => _10;
        debug right_val => _11;
        let _16: core::panicking::AssertKind;
        scope 2 {
            debug kind => _16;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }
    scope 5 {
        debug left_val => _28;
        debug right_val => _29;
        let _32: core::panicking::AssertKind;
        scope 6 {
            debug kind => _32;
        }
    }
    scope 7 {
        debug left_val => _36;
        debug right_val => _37;
        let _42: core::panicking::AssertKind;
        scope 8 {
            debug kind => _42;
        }
    }
    scope 9 {
        debug left_val => _46;
        debug right_val => _47;
        let _50: core::panicking::AssertKind;
        scope 10 {
            debug kind => _50;
        }
    }
    scope 11 {
        debug left_val => _54;
        debug right_val => _55;
        let _60: core::panicking::AssertKind;
        scope 12 {
            debug kind => _60;
        }
    }
    scope 13 {
        debug left_val => _64;
        debug right_val => _65;
        let _70: core::panicking::AssertKind;
        scope 14 {
            debug kind => _70;
        }
    }
    scope 15 {
        debug left_val => _74;
        debug right_val => _75;
        let _78: core::panicking::AssertKind;
        scope 16 {
            debug kind => _78;
        }
    }
    scope 17 {
        debug left_val => _82;
        debug right_val => _83;
        let _86: core::panicking::AssertKind;
        scope 18 {
            debug kind => _86;
        }
    }
    scope 19 {
        debug left_val => _90;
        debug right_val => _91;
        let _96: core::panicking::AssertKind;
        scope 20 {
            debug kind => _96;
        }
    }

    bb0: {
        _2 = Not(const _);
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = core::panicking::panic(const "assertion failed: !IS_POWER_OF_TWO_A") -> unwind continue;
    }

    bb2: {
        _4 = Not(const _);
        switchInt(move _4) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _5 = core::panicking::panic(const "assertion failed: IS_POWER_OF_TWO_B") -> unwind continue;
    }

    bb4: {
        _7 = Not(const _);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _8 = core::panicking::panic(const "assertion failed: !IS_POWER_OF_TWO_C") -> unwind continue;
    }

    bb6: {
        _118 = const _;
        _117 = const _;
        _9 = (_118, _117);
        _10 = (_9.0: &u8);
        _11 = (_9.1: &u8);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<u8, u8>(move _16, _10, _11, move _18) -> unwind continue;
    }

    bb8: {
        _116 = const _;
        _115 = const _;
        _19 = (_116, _115);
        _20 = (_19.0: &std::option::Option<u8>);
        _21 = (_19.1: &std::option::Option<u8>);
        _23 = <Option<u8> as PartialEq>::eq(_20, _21) -> [return: bb9, unwind continue];
    }

    bb9: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _24, _20, _21, move _26) -> unwind continue;
    }

    bb11: {
        _114 = const _;
        _113 = const _;
        _27 = (_114, _113);
        _28 = (_27.0: &std::option::Option<u8>);
        _29 = (_27.1: &std::option::Option<u8>);
        _31 = <Option<u8> as PartialEq>::eq(_28, _29) -> [return: bb12, unwind continue];
    }

    bb12: {
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _32, _28, _29, move _34) -> unwind continue;
    }

    bb14: {
        _112 = const _;
        _111 = const _;
        _35 = (_112, _111);
        _36 = (_35.0: &u8);
        _37 = (_35.1: &u8);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<u8, u8>(move _42, _36, _37, move _44) -> unwind continue;
    }

    bb16: {
        _110 = const _;
        _109 = const _;
        _45 = (_110, _109);
        _46 = (_45.0: &(u8, bool));
        _47 = (_45.1: &(u8, bool));
        _49 = <(u8, bool) as PartialEq>::eq(_46, _47) -> [return: bb17, unwind continue];
    }

    bb17: {
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<(u8, bool), (u8, bool)>(move _50, _46, _47, move _52) -> unwind continue;
    }

    bb19: {
        _108 = const _;
        _107 = const _;
        _53 = (_108, _107);
        _54 = (_53.0: &u8);
        _55 = (_53.1: &u8);
        _58 = (*_54);
        _59 = (*_55);
        _57 = Eq(move _58, move _59);
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<u8, u8>(move _60, _54, _55, move _62) -> unwind continue;
    }

    bb21: {
        _106 = const _;
        _105 = const _;
        _63 = (_106, _105);
        _64 = (_63.0: &u32);
        _65 = (_63.1: &u32);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<u32, u32>(move _70, _64, _65, move _72) -> unwind continue;
    }

    bb23: {
        _104 = const _;
        _103 = const _;
        _73 = (_104, _103);
        _74 = (_73.0: &std::option::Option<u32>);
        _75 = (_73.1: &std::option::Option<u32>);
        _77 = <Option<u32> as PartialEq>::eq(_74, _75) -> [return: bb24, unwind continue];
    }

    bb24: {
        _76 = Not(move _77);
        switchInt(move _76) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<Option<u32>, Option<u32>>(move _78, _74, _75, move _80) -> unwind continue;
    }

    bb26: {
        _102 = const _;
        _101 = const _;
        _81 = (_102, _101);
        _82 = (_81.0: &std::option::Option<u32>);
        _83 = (_81.1: &std::option::Option<u32>);
        _85 = <Option<u32> as PartialEq>::eq(_82, _83) -> [return: bb27, unwind continue];
    }

    bb27: {
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _86 = core::panicking::AssertKind::Eq;
        _88 = Option::<Arguments<'_>>::None;
        _87 = core::panicking::assert_failed::<Option<u32>, Option<u32>>(move _86, _82, _83, move _88) -> unwind continue;
    }

    bb29: {
        _100 = const _;
        _99 = const _;
        _89 = (_100, _99);
        _90 = (_89.0: &u32);
        _91 = (_89.1: &u32);
        _94 = (*_90);
        _95 = (*_91);
        _93 = Eq(move _94, move _95);
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        _96 = core::panicking::AssertKind::Eq;
        _98 = Option::<Arguments<'_>>::None;
        _97 = core::panicking::assert_failed::<u32, u32>(move _96, _90, _91, move _98) -> unwind continue;
    }

    bb31: {
        return;
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 0_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &Option<u32> = {
    let mut _0: &std::option::Option<u32>;
    let mut _1: std::option::Option<u32>;

    bb0: {
        _1 = Option::<u32>::None;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &Option<u32> = {
    let mut _0: &std::option::Option<u32>;
    let mut _1: std::option::Option<u32>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &Option<u32> = {
    let mut _0: &std::option::Option<u32>;
    let mut _1: std::option::Option<u32>;

    bb0: {
        _1 = Option::<u32>::Some(const 4_u32);
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &Option<u32> = {
    let mut _0: &std::option::Option<u32>;
    let mut _1: std::option::Option<u32>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 4_u32;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &(u8, bool) = {
    let mut _0: &(u8, bool);
    let mut _1: (u8, bool);

    bb0: {
        _1 = (const 217_u8, const true);
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &(u8, bool) = {
    let mut _0: &(u8, bool);
    let mut _1: (u8, bool);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 217_u8;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>;
    let mut _1: std::option::Option<u8>;

    bb0: {
        _1 = Option::<u8>::None;
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>;
    let mut _1: std::option::Option<u8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>;
    let mut _1: std::option::Option<u8>;

    bb0: {
        _1 = Option::<u8>::Some(const 243_u8);
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>;
    let mut _1: std::option::Option<u8>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 243_u8;
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}
