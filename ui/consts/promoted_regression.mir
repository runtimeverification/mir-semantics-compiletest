// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/promoted_regression.rs:3:11: 3:11
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/consts/promoted_regression.rs:5:2: 5:2
    }
}

promoted[0] in main: &[(&str, &str); 3] = {
    let mut _0: &[(&str, &str); 3];      // return place in scope 0 at ui/consts/promoted_regression.rs:4:13: 4:27
    let mut _1: [(&str, &str); 3];       // in scope 0 at ui/consts/promoted_regression.rs:4:14: 4:27
    let mut _2: (&str, &str);            // in scope 0 at ui/consts/promoted_regression.rs:4:15: 4:23

    bb0: {
        _2 = (const "", const "");       // scope 0 at ui/consts/promoted_regression.rs:4:15: 4:23
                                         // mir::Constant
                                         // + span: ui/consts/promoted_regression.rs:4:16: 4:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/consts/promoted_regression.rs:4:20: 4:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1 = [move _2; 3];               // scope 0 at ui/consts/promoted_regression.rs:4:14: 4:27
        _0 = &_1;                        // scope 0 at ui/consts/promoted_regression.rs:4:13: 4:27
        return;                          // scope 0 at ui/consts/promoted_regression.rs:4:13: 4:27
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/promoted_regression.rs:4:25: 4:26

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/consts/promoted_regression.rs:4:25: 4:26
        return;                          // scope 0 at ui/consts/promoted_regression.rs:4:25: 4:26
    }
}

const FOO: &[(&str, &str)] = {
    let mut _0: &[(&str, &str)];         // return place in scope 0 at ui/consts/promoted_regression.rs:7:12: 7:27
    let mut _1: &[(&str, &str); 3];      // in scope 0 at ui/consts/promoted_regression.rs:7:30: 7:44
    let _2: &[(&str, &str); 3];          // in scope 0 at ui/consts/promoted_regression.rs:7:30: 7:44
    let _3: [(&str, &str); 3];           // in scope 0 at ui/consts/promoted_regression.rs:7:31: 7:44
    let mut _4: (&str, &str);            // in scope 0 at ui/consts/promoted_regression.rs:7:32: 7:40
    let mut _5: &[(&str, &str); 3];      // in scope 0 at ui/consts/promoted_regression.rs:7:30: 7:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/promoted_regression.rs:7:30: 7:44
        StorageLive(_2);                 // scope 0 at ui/consts/promoted_regression.rs:7:30: 7:44
        _5 = const _;                    // scope 0 at ui/consts/promoted_regression.rs:7:30: 7:44
                                         // mir::Constant
                                         // + span: ui/consts/promoted_regression.rs:7:30: 7:44
                                         // + literal: Const { ty: &[(&str, &str); 3], val: Unevaluated(FOO, [], Some(promoted[0])) }
        _2 = &(*_5);                     // scope 0 at ui/consts/promoted_regression.rs:7:30: 7:44
        _1 = &(*_2);                     // scope 0 at ui/consts/promoted_regression.rs:7:30: 7:44
        _0 = move _1 as &[(&str, &str)] (Pointer(Unsize)); // scope 0 at ui/consts/promoted_regression.rs:7:30: 7:44
        StorageDead(_2);                 // scope 0 at ui/consts/promoted_regression.rs:7:43: 7:44
        StorageDead(_1);                 // scope 0 at ui/consts/promoted_regression.rs:7:43: 7:44
        return;                          // scope 0 at ui/consts/promoted_regression.rs:7:1: 7:45
    }
}

promoted[0] in FOO: &[(&str, &str); 3] = {
    let mut _0: &[(&str, &str); 3];      // return place in scope 0 at ui/consts/promoted_regression.rs:7:30: 7:44
    let mut _1: [(&str, &str); 3];       // in scope 0 at ui/consts/promoted_regression.rs:7:31: 7:44
    let mut _2: (&str, &str);            // in scope 0 at ui/consts/promoted_regression.rs:7:32: 7:40

    bb0: {
        _2 = (const "", const "");       // scope 0 at ui/consts/promoted_regression.rs:7:32: 7:40
                                         // mir::Constant
                                         // + span: ui/consts/promoted_regression.rs:7:33: 7:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/consts/promoted_regression.rs:7:37: 7:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1 = [move _2; 3];               // scope 0 at ui/consts/promoted_regression.rs:7:31: 7:44
        _0 = &_1;                        // scope 0 at ui/consts/promoted_regression.rs:7:30: 7:44
        return;                          // scope 0 at ui/consts/promoted_regression.rs:7:30: 7:44
    }
}

FOO::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/promoted_regression.rs:7:42: 7:43

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/consts/promoted_regression.rs:7:42: 7:43
        return;                          // scope 0 at ui/consts/promoted_regression.rs:7:42: 7:43
    }
}

const BAR: &[(&str, &str); 5] = {
    let mut _0: &[(&str, &str); 5];      // return place in scope 0 at ui/consts/promoted_regression.rs:8:12: 8:30
    let _1: &[(&str, &str); 5];          // in scope 0 at ui/consts/promoted_regression.rs:8:33: 8:47
    let _2: [(&str, &str); 5];           // in scope 0 at ui/consts/promoted_regression.rs:8:34: 8:47
    let mut _3: (&str, &str);            // in scope 0 at ui/consts/promoted_regression.rs:8:35: 8:43
    let mut _4: &[(&str, &str); 5];      // in scope 0 at ui/consts/promoted_regression.rs:8:33: 8:47

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/promoted_regression.rs:8:33: 8:47
        _4 = const _;                    // scope 0 at ui/consts/promoted_regression.rs:8:33: 8:47
                                         // mir::Constant
                                         // + span: ui/consts/promoted_regression.rs:8:33: 8:47
                                         // + literal: Const { ty: &[(&str, &str); 5], val: Unevaluated(BAR, [], Some(promoted[0])) }
        _1 = &(*_4);                     // scope 0 at ui/consts/promoted_regression.rs:8:33: 8:47
        _0 = &(*_1);                     // scope 0 at ui/consts/promoted_regression.rs:8:33: 8:47
        StorageDead(_1);                 // scope 0 at ui/consts/promoted_regression.rs:8:46: 8:47
        return;                          // scope 0 at ui/consts/promoted_regression.rs:8:1: 8:48
    }
}

promoted[0] in BAR: &[(&str, &str); 5] = {
    let mut _0: &[(&str, &str); 5];      // return place in scope 0 at ui/consts/promoted_regression.rs:8:33: 8:47
    let mut _1: [(&str, &str); 5];       // in scope 0 at ui/consts/promoted_regression.rs:8:34: 8:47
    let mut _2: (&str, &str);            // in scope 0 at ui/consts/promoted_regression.rs:8:35: 8:43

    bb0: {
        _2 = (const "", const "");       // scope 0 at ui/consts/promoted_regression.rs:8:35: 8:43
                                         // mir::Constant
                                         // + span: ui/consts/promoted_regression.rs:8:36: 8:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/consts/promoted_regression.rs:8:40: 8:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1 = [move _2; 5];               // scope 0 at ui/consts/promoted_regression.rs:8:34: 8:47
        _0 = &_1;                        // scope 0 at ui/consts/promoted_regression.rs:8:33: 8:47
        return;                          // scope 0 at ui/consts/promoted_regression.rs:8:33: 8:47
    }
}

BAR::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/promoted_regression.rs:8:28: 8:29

    bb0: {
        _0 = const 5_usize;              // scope 0 at ui/consts/promoted_regression.rs:8:28: 8:29
        return;                          // scope 0 at ui/consts/promoted_regression.rs:8:28: 8:29
    }
}

BAR::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/promoted_regression.rs:8:45: 8:46

    bb0: {
        _0 = const 5_usize;              // scope 0 at ui/consts/promoted_regression.rs:8:45: 8:46
        return;                          // scope 0 at ui/consts/promoted_regression.rs:8:45: 8:46
    }
}

const BAA: &[[&str; 12]; 11] = {
    let mut _0: &[[&str; 12]; 11];       // return place in scope 0 at ui/consts/promoted_regression.rs:9:12: 9:29
    let _1: &[[&str; 12]; 11];           // in scope 0 at ui/consts/promoted_regression.rs:9:32: 9:47
    let _2: [[&str; 12]; 11];            // in scope 0 at ui/consts/promoted_regression.rs:9:33: 9:47
    let mut _3: [&str; 12];              // in scope 0 at ui/consts/promoted_regression.rs:9:34: 9:42
    let mut _4: &[[&str; 12]; 11];       // in scope 0 at ui/consts/promoted_regression.rs:9:32: 9:47

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/promoted_regression.rs:9:32: 9:47
        _4 = const _;                    // scope 0 at ui/consts/promoted_regression.rs:9:32: 9:47
                                         // mir::Constant
                                         // + span: ui/consts/promoted_regression.rs:9:32: 9:47
                                         // + literal: Const { ty: &[[&str; 12]; 11], val: Unevaluated(BAA, [], Some(promoted[0])) }
        _1 = &(*_4);                     // scope 0 at ui/consts/promoted_regression.rs:9:32: 9:47
        _0 = &(*_1);                     // scope 0 at ui/consts/promoted_regression.rs:9:32: 9:47
        StorageDead(_1);                 // scope 0 at ui/consts/promoted_regression.rs:9:46: 9:47
        return;                          // scope 0 at ui/consts/promoted_regression.rs:9:1: 9:48
    }
}

promoted[0] in BAA: &[[&str; 12]; 11] = {
    let mut _0: &[[&str; 12]; 11];       // return place in scope 0 at ui/consts/promoted_regression.rs:9:32: 9:47
    let mut _1: [[&str; 12]; 11];        // in scope 0 at ui/consts/promoted_regression.rs:9:33: 9:47
    let mut _2: [&str; 12];              // in scope 0 at ui/consts/promoted_regression.rs:9:34: 9:42

    bb0: {
        _2 = [const ""; 12];             // scope 0 at ui/consts/promoted_regression.rs:9:34: 9:42
                                         // mir::Constant
                                         // + span: ui/consts/promoted_regression.rs:9:35: 9:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1 = [move _2; 11];              // scope 0 at ui/consts/promoted_regression.rs:9:33: 9:47
        _0 = &_1;                        // scope 0 at ui/consts/promoted_regression.rs:9:32: 9:47
        return;                          // scope 0 at ui/consts/promoted_regression.rs:9:32: 9:47
    }
}

BAA::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/promoted_regression.rs:9:21: 9:23

    bb0: {
        _0 = const 12_usize;             // scope 0 at ui/consts/promoted_regression.rs:9:21: 9:23
        return;                          // scope 0 at ui/consts/promoted_regression.rs:9:21: 9:23
    }
}

BAA::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/promoted_regression.rs:9:26: 9:28

    bb0: {
        _0 = const 11_usize;             // scope 0 at ui/consts/promoted_regression.rs:9:26: 9:28
        return;                          // scope 0 at ui/consts/promoted_regression.rs:9:26: 9:28
    }
}

BAA::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/promoted_regression.rs:9:39: 9:41

    bb0: {
        _0 = const 12_usize;             // scope 0 at ui/consts/promoted_regression.rs:9:39: 9:41
        return;                          // scope 0 at ui/consts/promoted_regression.rs:9:39: 9:41
    }
}

BAA::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/promoted_regression.rs:9:44: 9:46

    bb0: {
        _0 = const 11_usize;             // scope 0 at ui/consts/promoted_regression.rs:9:44: 9:46
        return;                          // scope 0 at ui/consts/promoted_regression.rs:9:44: 9:46
    }
}
