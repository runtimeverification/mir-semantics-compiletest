// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: T) -> T {
    debug a => _1;
    let mut _0: T;

    bb0: {
        _0 = move _1;
        return;
    }
}

static BLOCK_INTEGRAL: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

static BLOCK_EXPLICIT_UNIT: () = {
    let mut _0: ();

    bb0: {
        _0 = ();
        return;
    }
}

static BLOCK_IMPLICIT_UNIT: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

static BLOCK_FLOAT: f64 = {
    let mut _0: f64;

    bb0: {
        _0 = const 1f64;
        return;
    }
}

static BLOCK_ENUM: Option<usize> = {
    let mut _0: std::option::Option<usize>;

    bb0: {
        _0 = Option::<usize>::Some(const 100_usize);
        return;
    }
}

static BLOCK_STRUCT: Foo = {
    let mut _0: Foo;
    let mut _1: *const ();

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = null::<()>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Foo { a: const 12_usize, b: move _1 };
        StorageDead(_1);
        return;
    }
}

static BLOCK_UNSAFE: usize = {
    let mut _0: usize;
    scope 1 {
    }

    bb0: {
        _0 = const 1000_usize;
        return;
    }
}

static BLOCK_FN_INFERRED: fn(usize) -> usize = {
    let mut _0: fn(usize) -> usize;

    bb0: {
        _0 = foo::<usize> as fn(usize) -> usize (Pointer(ReifyFnPointer));
        return;
    }
}

static BLOCK_FN: fn(usize) -> usize = {
    let mut _0: fn(usize) -> usize;

    bb0: {
        _0 = foo::<usize> as fn(usize) -> usize (Pointer(ReifyFnPointer));
        return;
    }
}

static BLOCK_ENUM_CONSTRUCTOR: fn(usize) -> Option<usize> = {
    let mut _0: fn(usize) -> std::option::Option<usize>;

    bb0: {
        _0 = Option::<usize>::Some as fn(usize) -> std::option::Option<usize> (Pointer(ReifyFnPointer));
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let _2: &usize;
    let _3: &usize;
    let _4: &usize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: usize;
    let mut _8: usize;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _12: (&(), &());
    let _13: &();
    let _14: &();
    let _15: &();
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&(), &());
    let _22: &();
    let _23: &();
    let _24: &();
    let mut _25: bool;
    let mut _26: bool;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: (&f64, &f64);
    let _31: &f64;
    let _32: &f64;
    let _33: &f64;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: f64;
    let mut _37: f64;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&usize, &usize);
    let mut _42: &usize;
    let _43: &Foo;
    let _44: &usize;
    let _45: &usize;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: usize;
    let mut _49: usize;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&*const (), &*const ());
    let mut _54: &*const ();
    let _55: &Foo;
    let _56: &*const ();
    let _57: &*const ();
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: *const ();
    let mut _61: *const ();
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: (&std::option::Option<usize>, &std::option::Option<usize>);
    let _66: &std::option::Option<usize>;
    let _67: &std::option::Option<usize>;
    let _68: &std::option::Option<usize>;
    let mut _69: bool;
    let mut _70: bool;
    let _72: !;
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _74: (&usize, &usize);
    let _75: &usize;
    let _76: &usize;
    let _77: &usize;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: usize;
    let mut _81: usize;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: (&usize, &usize);
    let mut _86: &usize;
    let _87: usize;
    let mut _88: fn(usize) -> usize;
    let mut _89: &fn(usize) -> usize;
    let _90: &usize;
    let _91: &usize;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: usize;
    let mut _95: usize;
    let _97: !;
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _99: (&usize, &usize);
    let mut _100: &usize;
    let _101: usize;
    let mut _102: fn(usize) -> usize;
    let mut _103: &fn(usize) -> usize;
    let _104: &usize;
    let _105: &usize;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: usize;
    let mut _109: usize;
    let _111: !;
    let mut _112: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _113: (&std::option::Option<usize>, &std::option::Option<usize>);
    let mut _114: &std::option::Option<usize>;
    let _115: std::option::Option<usize>;
    let mut _116: fn(usize) -> std::option::Option<usize>;
    let mut _117: &fn(usize) -> std::option::Option<usize>;
    let _118: &std::option::Option<usize>;
    let _119: &std::option::Option<usize>;
    let mut _120: bool;
    let mut _121: bool;
    let _123: !;
    let mut _124: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _125: &std::option::Option<usize>;
    let mut _126: &usize;
    let mut _127: &usize;
    let mut _128: &usize;
    let mut _129: &std::option::Option<usize>;
    let mut _130: &*const ();
    let mut _131: &usize;
    let mut _132: &f64;
    let mut _133: &();
    let mut _134: &();
    let mut _135: &usize;
    scope 1 {
        debug left_val => _3;
        debug right_val => _4;
        let _9: core::panicking::AssertKind;
        scope 2 {
            debug kind => _9;
        }
    }
    scope 3 {
        debug left_val => _14;
        debug right_val => _15;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug left_val => _23;
        debug right_val => _24;
        let _27: core::panicking::AssertKind;
        scope 6 {
            debug kind => _27;
        }
    }
    scope 7 {
        debug left_val => _32;
        debug right_val => _33;
        let _38: core::panicking::AssertKind;
        scope 8 {
            debug kind => _38;
        }
    }
    scope 9 {
        debug left_val => _44;
        debug right_val => _45;
        let _50: core::panicking::AssertKind;
        scope 10 {
            debug kind => _50;
        }
    }
    scope 11 {
        debug left_val => _56;
        debug right_val => _57;
        let _62: core::panicking::AssertKind;
        scope 12 {
            debug kind => _62;
        }
    }
    scope 13 {
        debug left_val => _67;
        debug right_val => _68;
        let _71: core::panicking::AssertKind;
        scope 14 {
            debug kind => _71;
        }
    }
    scope 15 {
        debug left_val => _76;
        debug right_val => _77;
        let _82: core::panicking::AssertKind;
        scope 16 {
            debug kind => _82;
        }
    }
    scope 17 {
        debug left_val => _90;
        debug right_val => _91;
        let _96: core::panicking::AssertKind;
        scope 18 {
            debug kind => _96;
        }
    }
    scope 19 {
        debug left_val => _104;
        debug right_val => _105;
        let _110: core::panicking::AssertKind;
        scope 20 {
            debug kind => _110;
        }
    }
    scope 21 {
        debug left_val => _118;
        debug right_val => _119;
        let _122: core::panicking::AssertKind;
        scope 22 {
            debug kind => _122;
        }
    }

    bb0: {
        _2 = const {alloc1: &usize};
        _135 = const _;
        _1 = (_2, _135);
        _3 = (_1.0: &usize);
        _4 = (_1.1: &usize);
        _7 = (*_3);
        _8 = (*_4);
        _6 = Eq(move _7, move _8);
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<usize, usize>(move _9, _3, _4, move _11) -> unwind continue;
    }

    bb2: {
        _13 = const {alloc2: &()};
        _134 = const _;
        _12 = (_13, _134);
        _14 = (_12.0: &());
        _15 = (_12.1: &());
        _17 = <() as PartialEq>::eq(_14, _15) -> [return: bb3, unwind continue];
    }

    bb3: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<(), ()>(move _18, _14, _15, move _20) -> unwind continue;
    }

    bb5: {
        _22 = const {alloc3: &()};
        _133 = const _;
        _21 = (_22, _133);
        _23 = (_21.0: &());
        _24 = (_21.1: &());
        _26 = <() as PartialEq>::eq(_23, _24) -> [return: bb6, unwind continue];
    }

    bb6: {
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<(), ()>(move _27, _23, _24, move _29) -> unwind continue;
    }

    bb8: {
        _31 = const {alloc4: &f64};
        _132 = const _;
        _30 = (_31, _132);
        _32 = (_30.0: &f64);
        _33 = (_30.1: &f64);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<f64, f64>(move _38, _32, _33, move _40) -> unwind continue;
    }

    bb10: {
        _43 = const {alloc5: &Foo};
        _42 = &((*_43).0: usize);
        _131 = const _;
        _41 = (move _42, _131);
        _44 = (_41.0: &usize);
        _45 = (_41.1: &usize);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<usize, usize>(move _50, _44, _45, move _52) -> unwind continue;
    }

    bb12: {
        _55 = const {alloc5: &Foo};
        _54 = &((*_55).1: *const ());
        _130 = const _;
        _53 = (move _54, _130);
        _56 = (_53.0: &*const ());
        _57 = (_53.1: &*const ());
        _60 = (*_56);
        _61 = (*_57);
        _59 = Eq(move _60, move _61);
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<*const (), *const ()>(move _62, _56, _57, move _64) -> unwind continue;
    }

    bb14: {
        _66 = const {alloc6: &Option<usize>};
        _129 = const _;
        _65 = (_66, _129);
        _67 = (_65.0: &std::option::Option<usize>);
        _68 = (_65.1: &std::option::Option<usize>);
        _70 = <Option<usize> as PartialEq>::eq(_67, _68) -> [return: bb15, unwind continue];
    }

    bb15: {
        _69 = Not(move _70);
        switchInt(move _69) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _71 = core::panicking::AssertKind::Eq;
        _73 = Option::<Arguments<'_>>::None;
        _72 = core::panicking::assert_failed::<Option<usize>, Option<usize>>(move _71, _67, _68, move _73) -> unwind continue;
    }

    bb17: {
        _75 = const {alloc7: &usize};
        _128 = const _;
        _74 = (_75, _128);
        _76 = (_74.0: &usize);
        _77 = (_74.1: &usize);
        _80 = (*_76);
        _81 = (*_77);
        _79 = Eq(move _80, move _81);
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<usize, usize>(move _82, _76, _77, move _84) -> unwind continue;
    }

    bb19: {
        _89 = const {alloc8: &fn(usize) -> usize};
        _88 = (*_89);
        _87 = move _88(const 300_usize) -> [return: bb20, unwind continue];
    }

    bb20: {
        _86 = &_87;
        _127 = const _;
        _85 = (move _86, _127);
        _90 = (_85.0: &usize);
        _91 = (_85.1: &usize);
        _94 = (*_90);
        _95 = (*_91);
        _93 = Eq(move _94, move _95);
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _96 = core::panicking::AssertKind::Eq;
        _98 = Option::<Arguments<'_>>::None;
        _97 = core::panicking::assert_failed::<usize, usize>(move _96, _90, _91, move _98) -> unwind continue;
    }

    bb22: {
        _103 = const {alloc9: &fn(usize) -> usize};
        _102 = (*_103);
        _101 = move _102(const 300_usize) -> [return: bb23, unwind continue];
    }

    bb23: {
        _100 = &_101;
        _126 = const _;
        _99 = (move _100, _126);
        _104 = (_99.0: &usize);
        _105 = (_99.1: &usize);
        _108 = (*_104);
        _109 = (*_105);
        _107 = Eq(move _108, move _109);
        _106 = Not(move _107);
        switchInt(move _106) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _110 = core::panicking::AssertKind::Eq;
        _112 = Option::<Arguments<'_>>::None;
        _111 = core::panicking::assert_failed::<usize, usize>(move _110, _104, _105, move _112) -> unwind continue;
    }

    bb25: {
        _117 = const {alloc10: &fn(usize) -> Option<usize>};
        _116 = (*_117);
        _115 = move _116(const 200_usize) -> [return: bb26, unwind continue];
    }

    bb26: {
        _114 = &_115;
        _125 = const _;
        _113 = (move _114, _125);
        _118 = (_113.0: &std::option::Option<usize>);
        _119 = (_113.1: &std::option::Option<usize>);
        _121 = <Option<usize> as PartialEq>::eq(_118, _119) -> [return: bb27, unwind continue];
    }

    bb27: {
        _120 = Not(move _121);
        switchInt(move _120) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _122 = core::panicking::AssertKind::Eq;
        _124 = Option::<Arguments<'_>>::None;
        _123 = core::panicking::assert_failed::<Option<usize>, Option<usize>>(move _122, _118, _119, move _124) -> unwind continue;
    }

    bb29: {
        return;
    }
}

alloc10 (static: BLOCK_ENUM_CONSTRUCTOR, size: 8, align: 8) {
    ╾───────alloc71───────╼                         │ ╾──────╼
}

alloc71 (fn: Option::<usize>::Some)

alloc9 (static: BLOCK_FN, size: 8, align: 8) {
    ╾───────alloc64───────╼                         │ ╾──────╼
}

alloc64 (fn: foo::<usize>)

alloc8 (static: BLOCK_FN_INFERRED, size: 8, align: 8) {
    ╾───────alloc57───────╼                         │ ╾──────╼
}

alloc57 (fn: foo::<usize>)

alloc7 (static: BLOCK_UNSAFE, size: 8, align: 8) {
    e8 03 00 00 00 00 00 00                         │ ........
}

alloc6 (static: BLOCK_ENUM, size: 16, align: 8) {
    01 00 00 00 00 00 00 00 64 00 00 00 00 00 00 00 │ ........d.......
}

alloc5 (static: BLOCK_STRUCT, size: 16, align: 8) {
    0c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
}

alloc4 (static: BLOCK_FLOAT, size: 8, align: 8) {
    00 00 00 00 00 00 f0 3f                         │ .......?
}

alloc3 (static: BLOCK_IMPLICIT_UNIT, size: 0, align: 1) {}

alloc2 (static: BLOCK_EXPLICIT_UNIT, size: 0, align: 1) {}

alloc1 (static: BLOCK_INTEGRAL, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in main: &Option<usize> = {
    let mut _0: &std::option::Option<usize>;
    let mut _1: std::option::Option<usize>;

    bb0: {
        _1 = Option::<usize>::Some(const 200_usize);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 300_usize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 300_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1000_usize;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &Option<usize> = {
    let mut _0: &std::option::Option<usize>;
    let mut _1: std::option::Option<usize>;

    bb0: {
        _1 = Option::<usize>::Some(const 100_usize);
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &*const () = {
    let mut _0: &*const ();
    let mut _1: *const ();

    bb0: {
        _1 = null::<()>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 12_usize;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 1f64;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}
