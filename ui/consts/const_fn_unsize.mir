// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_fn_unsize.rs:7:17: 7:17
    let _1: std::ptr::NonNull<[i32]>;    // in scope 0 at ui/consts/const_fn_unsize.rs:8:9: 8:11
    let mut _2: std::ptr::NonNull<[i32; 0]>; // in scope 0 at ui/consts/const_fn_unsize.rs:8:14: 8:45
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/consts/const_fn_unsize.rs:8:9: 8:11
    }

    bb0: {
        _2 = NonNull::<[i32; 0]>::dangling() -> bb1; // scope 0 at ui/consts/const_fn_unsize.rs:8:14: 8:45
                                         // mir::Constant
                                         // + span: ui/consts/const_fn_unsize.rs:8:14: 8:43
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> NonNull<[i32; 0]> {NonNull::<[i32; 0]>::dangling}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = move _2 as std::ptr::NonNull<[i32]> (Pointer(Unsize)); // scope 0 at ui/consts/const_fn_unsize.rs:8:14: 8:45
        return;                          // scope 0 at ui/consts/const_fn_unsize.rs:9:2: 9:2
    }
}

// MIR FOR CTFE
fn test() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_fn_unsize.rs:7:17: 7:17
    let _1: std::ptr::NonNull<[i32]>;    // in scope 0 at ui/consts/const_fn_unsize.rs:8:9: 8:11
    let mut _2: std::ptr::NonNull<[i32; 0]>; // in scope 0 at ui/consts/const_fn_unsize.rs:8:14: 8:45
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/consts/const_fn_unsize.rs:8:9: 8:11
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_fn_unsize.rs:8:9: 8:11
        StorageLive(_2);                 // scope 0 at ui/consts/const_fn_unsize.rs:8:14: 8:45
        ConstEvalCounter;                // scope 0 at ui/consts/const_fn_unsize.rs:8:14: 8:45
        _2 = NonNull::<[i32; 0]>::dangling() -> bb1; // scope 0 at ui/consts/const_fn_unsize.rs:8:14: 8:45
                                         // mir::Constant
                                         // + span: ui/consts/const_fn_unsize.rs:8:14: 8:43
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> NonNull<[i32; 0]> {NonNull::<[i32; 0]>::dangling}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = move _2 as std::ptr::NonNull<[i32]> (Pointer(Unsize)); // scope 0 at ui/consts/const_fn_unsize.rs:8:14: 8:45
        StorageDead(_2);                 // scope 0 at ui/consts/const_fn_unsize.rs:8:44: 8:45
        _0 = const ();                   // scope 0 at ui/consts/const_fn_unsize.rs:7:17: 9:2
        StorageDead(_1);                 // scope 0 at ui/consts/const_fn_unsize.rs:9:1: 9:2
        return;                          // scope 0 at ui/consts/const_fn_unsize.rs:9:2: 9:2
    }
}

test::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_fn_unsize.rs:8:30: 8:31

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/const_fn_unsize.rs:8:30: 8:31
        return;                          // scope 0 at ui/consts/const_fn_unsize.rs:8:30: 8:31
    }
}

fn dangling_slice() -> NonNull<[T]> {
    let mut _0: std::ptr::NonNull<[T]>;  // return place in scope 0 at ui/consts/const_fn_unsize.rs:12:37: 12:49
    let mut _1: std::ptr::NonNull<[T; 1]>; // in scope 0 at ui/consts/const_fn_unsize.rs:13:5: 13:34

    bb0: {
        _1 = NonNull::<[T; 1]>::dangling() -> bb1; // scope 0 at ui/consts/const_fn_unsize.rs:13:5: 13:34
                                         // mir::Constant
                                         // + span: ui/consts/const_fn_unsize.rs:13:5: 13:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> NonNull<[T; 1]> {NonNull::<[T; 1]>::dangling}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = move _1 as std::ptr::NonNull<[T]> (Pointer(Unsize)); // scope 0 at ui/consts/const_fn_unsize.rs:13:5: 13:34
        return;                          // scope 0 at ui/consts/const_fn_unsize.rs:14:2: 14:2
    }
}

// MIR FOR CTFE
fn dangling_slice() -> NonNull<[T]> {
    let mut _0: std::ptr::NonNull<[T]>;  // return place in scope 0 at ui/consts/const_fn_unsize.rs:12:37: 12:49
    let mut _1: std::ptr::NonNull<[T; 1]>; // in scope 0 at ui/consts/const_fn_unsize.rs:13:5: 13:34

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const_fn_unsize.rs:13:5: 13:34
        ConstEvalCounter;                // scope 0 at ui/consts/const_fn_unsize.rs:13:5: 13:34
        _1 = NonNull::<[T; 1]>::dangling() -> bb1; // scope 0 at ui/consts/const_fn_unsize.rs:13:5: 13:34
                                         // mir::Constant
                                         // + span: ui/consts/const_fn_unsize.rs:13:5: 13:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> NonNull<[T; 1]> {NonNull::<[T; 1]>::dangling}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = move _1 as std::ptr::NonNull<[T]> (Pointer(Unsize)); // scope 0 at ui/consts/const_fn_unsize.rs:13:5: 13:34
        StorageDead(_1);                 // scope 0 at ui/consts/const_fn_unsize.rs:13:33: 13:34
        return;                          // scope 0 at ui/consts/const_fn_unsize.rs:14:2: 14:2
    }
}

dangling_slice::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_fn_unsize.rs:13:19: 13:20

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_fn_unsize.rs:13:19: 13:20
        return;                          // scope 0 at ui/consts/const_fn_unsize.rs:13:19: 13:20
    }
}

const C: NonNull<[i32]> = {
    let mut _0: std::ptr::NonNull<[i32]>; // return place in scope 0 at ui/consts/const_fn_unsize.rs:16:10: 16:24

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const_fn_unsize.rs:16:27: 16:43
        _0 = dangling_slice::<i32>() -> bb1; // scope 0 at ui/consts/const_fn_unsize.rs:16:27: 16:43
                                         // mir::Constant
                                         // + span: ui/consts/const_fn_unsize.rs:16:27: 16:41
                                         // + literal: Const { ty: fn() -> NonNull<[i32]> {dangling_slice::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const_fn_unsize.rs:16:1: 16:44
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const_fn_unsize.rs:18:11: 18:11
    let mut _1: (&*mut [i32], &*mut [i32]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &*mut [i32];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: *mut [i32];                  // in scope 0 at ui/consts/const_fn_unsize.rs:19:16: 19:26
    let mut _4: &*mut [i32];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: *mut [i32];                  // in scope 0 at ui/consts/const_fn_unsize.rs:19:28: 19:78
    let mut _6: *mut [i32; 1];           // in scope 0 at ui/consts/const_fn_unsize.rs:19:28: 19:68
    let mut _7: std::ptr::NonNull<[i32; 1]>; // in scope 0 at ui/consts/const_fn_unsize.rs:19:28: 19:59
    let _8: &*mut [i32];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _9: &*mut [i32];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: *mut [i32];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: *mut [i32];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &*mut [i32];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &*mut [i32];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &*mut [i32];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &*mut [i32];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _23: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _24: usize;                      // in scope 0 at ui/consts/const_fn_unsize.rs:20:16: 20:32
    let mut _25: *mut [i32];             // in scope 0 at ui/consts/const_fn_unsize.rs:20:16: 20:26
    let mut _26: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _27: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _28: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _29: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _31: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _32: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _34: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _35: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _36: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _37: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _38: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _39: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _41: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _27;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _28;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _33: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _33;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = NonNull::<[i32]>::as_ptr(const _) -> bb1; // scope 0 at ui/consts/const_fn_unsize.rs:19:16: 19:26
                                         // mir::Constant
                                         // + span: ui/consts/const_fn_unsize.rs:19:18: 19:24
                                         // + literal: Const { ty: fn(NonNull<[i32]>) -> *mut [i32] {NonNull::<[i32]>::as_ptr}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/consts/const_fn_unsize.rs:19:16: 19:17
                                         // + literal: Const { ty: NonNull<[i32]>, val: Unevaluated(C, [], None) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _7 = NonNull::<[i32; 1]>::dangling() -> bb2; // scope 0 at ui/consts/const_fn_unsize.rs:19:28: 19:59
                                         // mir::Constant
                                         // + span: ui/consts/const_fn_unsize.rs:19:28: 19:57
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> NonNull<[i32; 1]> {NonNull::<[i32; 1]>::dangling}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = NonNull::<[i32; 1]>::as_ptr(move _7) -> bb3; // scope 0 at ui/consts/const_fn_unsize.rs:19:28: 19:68
                                         // mir::Constant
                                         // + span: ui/consts/const_fn_unsize.rs:19:60: 19:66
                                         // + literal: Const { ty: fn(NonNull<[i32; 1]>) -> *mut [i32; 1] {NonNull::<[i32; 1]>::as_ptr}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = move _6 as *mut [i32] (Pointer(Unsize)); // scope 0 at ui/consts/const_fn_unsize.rs:19:28: 19:68
        _4 = &_5;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_1.0: &*mut [i32]);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_1.1: &*mut [i32]);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = (*_9);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb5, otherwise: bb4]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _14 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<*mut [i32], *mut [i32]>(move _16, move _17, move _19, move _21); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a *mut [i32], &'b *mut [i32], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<*mut [i32], *mut [i32]>}, val: Value(<ZST>) }
    }

    bb5: {
        _25 = NonNull::<[i32]>::as_ptr(const _) -> bb6; // scope 0 at ui/consts/const_fn_unsize.rs:20:16: 20:26
                                         // mir::Constant
                                         // + span: ui/consts/const_fn_unsize.rs:20:18: 20:24
                                         // + literal: Const { ty: fn(NonNull<[i32]>) -> *mut [i32] {NonNull::<[i32]>::as_ptr}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/consts/const_fn_unsize.rs:20:16: 20:17
                                         // + literal: Const { ty: NonNull<[i32]>, val: Unevaluated(C, [], None) }
    }

    bb6: {
        _24 = ptr::mut_ptr::<impl *mut [i32]>::len(move _25) -> bb7; // scope 0 at ui/consts/const_fn_unsize.rs:20:16: 20:32
                                         // mir::Constant
                                         // + span: ui/consts/const_fn_unsize.rs:20:27: 20:30
                                         // + literal: Const { ty: fn(*mut [i32]) -> usize {ptr::mut_ptr::<impl *mut [i32]>::len}, val: Value(<ZST>) }
    }

    bb7: {
        _23 = &_24;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _41 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _26 = _41;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _22 = (move _23, move _26);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _27 = (_22.0: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _28 = (_22.1: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _31 = (*_27);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _32 = const 1_usize;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _30 = Eq(move _31, move _32);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _29 = Not(move _30);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _29) -> [0: bb9, otherwise: bb8]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _33 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = _27;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _36 = _37;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _39 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = _39;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _34 = core::panicking::assert_failed::<usize, usize>(move _35, move _36, move _38, move _40); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/consts/const_fn_unsize.rs:21:2: 21:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/consts/const_fn_unsize.rs:20:34: 20:35

    bb0: {
        _1 = const 1_usize;              // scope 0 at ui/consts/const_fn_unsize.rs:20:34: 20:35
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const_fn_unsize.rs:19:44: 19:45

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const_fn_unsize.rs:19:44: 19:45
        return;                          // scope 0 at ui/consts/const_fn_unsize.rs:19:44: 19:45
    }
}
