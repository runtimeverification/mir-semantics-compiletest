// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test() -> () {
    let mut _0: ();
    let _1: std::ptr::NonNull<[i32]>;
    let mut _2: std::ptr::NonNull<[i32; 0]>;
    scope 1 {
        debug _x => _1;
    }

    bb0: {
        _2 = NonNull::<[i32; 0]>::dangling() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = move _2 as std::ptr::NonNull<[i32]> (Pointer(Unsize));
        return;
    }
}

// MIR FOR CTFE
fn test() -> () {
    let mut _0: ();
    let _1: std::ptr::NonNull<[i32]>;
    let mut _2: std::ptr::NonNull<[i32; 0]>;
    scope 1 {
        debug _x => _1;
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        ConstEvalCounter;
        _2 = NonNull::<[i32; 0]>::dangling() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = move _2 as std::ptr::NonNull<[i32]> (Pointer(Unsize));
        StorageDead(_2);
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

test::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn dangling_slice() -> NonNull<[T]> {
    let mut _0: std::ptr::NonNull<[T]>;
    let mut _1: std::ptr::NonNull<[T; 1]>;

    bb0: {
        _1 = NonNull::<[T; 1]>::dangling() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = move _1 as std::ptr::NonNull<[T]> (Pointer(Unsize));
        return;
    }
}

// MIR FOR CTFE
fn dangling_slice() -> NonNull<[T]> {
    let mut _0: std::ptr::NonNull<[T]>;
    let mut _1: std::ptr::NonNull<[T; 1]>;

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = NonNull::<[T; 1]>::dangling() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = move _1 as std::ptr::NonNull<[T]> (Pointer(Unsize));
        StorageDead(_1);
        return;
    }
}

dangling_slice::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

const C: NonNull<[i32]> = {
    let mut _0: std::ptr::NonNull<[i32]>;

    bb0: {
        ConstEvalCounter;
        _0 = dangling_slice::<i32>() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&*mut [i32], &*mut [i32]);
    let mut _2: &*mut [i32];
    let _3: *mut [i32];
    let mut _4: &*mut [i32];
    let _5: *mut [i32];
    let mut _6: *mut [i32; 1];
    let mut _7: std::ptr::NonNull<[i32; 1]>;
    let _8: &*mut [i32];
    let _9: &*mut [i32];
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: *mut [i32];
    let mut _13: *mut [i32];
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&usize, &usize);
    let mut _18: &usize;
    let _19: usize;
    let mut _20: *mut [i32];
    let _21: &usize;
    let _22: &usize;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: usize;
    let mut _26: usize;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: &usize;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }
    scope 3 {
        debug left_val => _21;
        debug right_val => _22;
        let _27: core::panicking::AssertKind;
        scope 4 {
            debug kind => _27;
        }
    }

    bb0: {
        _3 = NonNull::<[i32]>::as_ptr(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _7 = NonNull::<[i32; 1]>::dangling() -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = NonNull::<[i32; 1]>::as_ptr(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = move _6 as *mut [i32] (Pointer(Unsize));
        _4 = &_5;
        _1 = (move _2, move _4);
        _8 = (_1.0: &*mut [i32]);
        _9 = (_1.1: &*mut [i32]);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<*mut [i32], *mut [i32]>(move _14, _8, _9, move _16) -> unwind continue;
    }

    bb5: {
        _20 = NonNull::<[i32]>::as_ptr(const _) -> [return: bb6, unwind continue];
    }

    bb6: {
        _19 = ptr::mut_ptr::<impl *mut [i32]>::len(move _20) -> [return: bb7, unwind continue];
    }

    bb7: {
        _18 = &_19;
        _30 = const _;
        _17 = (move _18, _30);
        _21 = (_17.0: &usize);
        _22 = (_17.1: &usize);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<usize, usize>(move _27, _21, _22, move _29) -> unwind continue;
    }

    bb9: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}
