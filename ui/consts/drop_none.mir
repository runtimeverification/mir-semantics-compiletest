// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/drop_none.rs:4:1: 4:16>::drop(_1: &mut A) -> () {
    debug self => _1;                    // in scope 0 at ui/consts/drop_none.rs:5:13: 5:22
    let mut _0: ();                      // return place in scope 0 at ui/consts/drop_none.rs:5:24: 5:24

    bb0: {
        return;                          // scope 0 at ui/consts/drop_none.rs:5:26: 5:26
    }
}

const FOO: Option<A> = {
    let mut _0: std::option::Option<A>;  // return place in scope 0 at ui/consts/drop_none.rs:8:12: 8:21

    bb0: {
        _0 = Option::<A>::None;          // scope 0 at ui/consts/drop_none.rs:8:24: 8:28
        return;                          // scope 0 at ui/consts/drop_none.rs:8:1: 8:29
    }
}

const BAR: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/drop_none.rs:10:12: 10:14
    let mut _1: (std::option::Option<A>, ()); // in scope 0 at ui/consts/drop_none.rs:10:17: 10:26
    let mut _2: std::option::Option<A>;  // in scope 0 at ui/consts/drop_none.rs:10:18: 10:21
    let mut _3: ();                      // in scope 0 at ui/consts/drop_none.rs:10:23: 10:25

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/drop_none.rs:10:17: 10:26
        StorageLive(_2);                 // scope 0 at ui/consts/drop_none.rs:10:18: 10:21
        _2 = const _;                    // scope 0 at ui/consts/drop_none.rs:10:18: 10:21
                                         // mir::Constant
                                         // + span: ui/consts/drop_none.rs:10:18: 10:21
                                         // + literal: Const { ty: Option<A>, val: Unevaluated(FOO, [], None) }
        StorageLive(_3);                 // scope 0 at ui/consts/drop_none.rs:10:23: 10:25
        _3 = ();                         // scope 0 at ui/consts/drop_none.rs:10:23: 10:25
        _1 = (move _2, move _3);         // scope 0 at ui/consts/drop_none.rs:10:17: 10:26
        StorageDead(_3);                 // scope 0 at ui/consts/drop_none.rs:10:25: 10:26
        StorageDead(_2);                 // scope 0 at ui/consts/drop_none.rs:10:25: 10:26
        _0 = (_1.1: ());                 // scope 0 at ui/consts/drop_none.rs:10:17: 10:28
        drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at ui/consts/drop_none.rs:10:27: 10:28
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/consts/drop_none.rs:10:27: 10:28
        return;                          // scope 0 at ui/consts/drop_none.rs:10:1: 10:29
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at ui/consts/drop_none.rs:10:1: 10:29
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/drop_none.rs:13:11: 13:11

    bb0: {
        return;                          // scope 0 at ui/consts/drop_none.rs:13:13: 13:13
    }
}
