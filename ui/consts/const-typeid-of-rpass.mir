// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static ID_ISIZE: TypeId = {
    let mut _0: std::any::TypeId;        // return place in scope 0 at ui/consts/const-typeid-of-rpass.rs:9:18: 9:24

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-typeid-of-rpass.rs:9:27: 9:48
        _0 = TypeId::of::<isize>() -> bb1; // scope 0 at ui/consts/const-typeid-of-rpass.rs:9:27: 9:48
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:9:27: 9:46
                                         // + literal: Const { ty: fn() -> TypeId {TypeId::of::<isize>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-typeid-of-rpass.rs:9:1: 9:49
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-typeid-of-rpass.rs:11:15: 11:15
    let mut _1: (&std::any::TypeId, &std::any::TypeId); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::any::TypeId;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: &std::any::TypeId;           // in scope 0 at ui/consts/const-typeid-of-rpass.rs:12:16: 12:24
    let mut _4: &std::any::TypeId;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: std::any::TypeId;            // in scope 0 at ui/consts/const-typeid-of-rpass.rs:12:26: 12:47
    let _6: &std::any::TypeId;           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _7: &std::any::TypeId;           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: &std::any::TypeId;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: &std::any::TypeId;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &std::any::TypeId;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &std::any::TypeId;          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &std::any::TypeId;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &std::any::TypeId;          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _20: std::any::TypeId;           // in scope 0 at ui/consts/const-typeid-of-rpass.rs:18:10: 18:11
    let _21: std::any::TypeId;           // in scope 0 at ui/consts/const-typeid-of-rpass.rs:18:13: 18:14
    let _22: std::any::TypeId;           // in scope 0 at ui/consts/const-typeid-of-rpass.rs:18:16: 18:17
    let mut _23: (std::any::TypeId, std::any::TypeId, std::any::TypeId); // in scope 0 at ui/consts/const-typeid-of-rpass.rs:18:21: 19:40
    let mut _24: std::any::TypeId;       // in scope 0 at ui/consts/const-typeid-of-rpass.rs:18:22: 18:43
    let mut _25: std::any::TypeId;       // in scope 0 at ui/consts/const-typeid-of-rpass.rs:18:45: 18:73
    let mut _26: std::any::TypeId;       // in scope 0 at ui/consts/const-typeid-of-rpass.rs:19:22: 19:39
    let mut _27: bool;                   // in scope 0 at ui/consts/const-typeid-of-rpass.rs:21:5: 21:24
    let mut _28: bool;                   // in scope 0 at ui/consts/const-typeid-of-rpass.rs:21:13: 21:23
    let mut _29: &std::any::TypeId;      // in scope 0 at ui/consts/const-typeid-of-rpass.rs:21:13: 21:16
    let mut _30: &std::any::TypeId;      // in scope 0 at ui/consts/const-typeid-of-rpass.rs:21:20: 21:23
    let mut _31: !;                      // in scope 0 at ui/consts/const-typeid-of-rpass.rs:21:5: 21:24
    let mut _32: bool;                   // in scope 0 at ui/consts/const-typeid-of-rpass.rs:22:5: 22:24
    let mut _33: bool;                   // in scope 0 at ui/consts/const-typeid-of-rpass.rs:22:13: 22:23
    let mut _34: &std::any::TypeId;      // in scope 0 at ui/consts/const-typeid-of-rpass.rs:22:13: 22:16
    let mut _35: &std::any::TypeId;      // in scope 0 at ui/consts/const-typeid-of-rpass.rs:22:20: 22:23
    let mut _36: !;                      // in scope 0 at ui/consts/const-typeid-of-rpass.rs:22:5: 22:24
    let mut _37: bool;                   // in scope 0 at ui/consts/const-typeid-of-rpass.rs:23:5: 23:24
    let mut _38: bool;                   // in scope 0 at ui/consts/const-typeid-of-rpass.rs:23:13: 23:23
    let mut _39: &std::any::TypeId;      // in scope 0 at ui/consts/const-typeid-of-rpass.rs:23:13: 23:16
    let mut _40: &std::any::TypeId;      // in scope 0 at ui/consts/const-typeid-of-rpass.rs:23:20: 23:23
    let mut _41: !;                      // in scope 0 at ui/consts/const-typeid-of-rpass.rs:23:5: 23:24
    let mut _42: (&std::any::TypeId, &std::any::TypeId); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _43: &std::any::TypeId;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _44: &std::any::TypeId;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _47: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _48: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _49: &std::any::TypeId;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _50: &std::any::TypeId;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _52: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _53: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _54: &std::any::TypeId;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _55: &std::any::TypeId;          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _56: &std::any::TypeId;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _57: &std::any::TypeId;          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _59: (&std::any::TypeId, &std::any::TypeId); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _60: &std::any::TypeId;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _61: &std::any::TypeId;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _64: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _65: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _66: &std::any::TypeId;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _67: &std::any::TypeId;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _69: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _70: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _71: &std::any::TypeId;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _72: &std::any::TypeId;          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _73: &std::any::TypeId;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _74: &std::any::TypeId;          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _76: (&std::any::TypeId, &std::any::TypeId); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _77: &std::any::TypeId;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _78: &std::any::TypeId;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _81: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _82: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _83: &std::any::TypeId;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _84: &std::any::TypeId;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _86: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _87: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _88: &std::any::TypeId;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _89: &std::any::TypeId;          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _90: &std::any::TypeId;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _91: &std::any::TypeId;          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _92: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _93: bool;                   // in scope 0 at ui/consts/const-typeid-of-rpass.rs:33:5: 33:24
    let mut _94: bool;                   // in scope 0 at ui/consts/const-typeid-of-rpass.rs:33:13: 33:23
    let mut _95: &std::any::TypeId;      // in scope 0 at ui/consts/const-typeid-of-rpass.rs:33:13: 33:16
    let mut _96: &std::any::TypeId;      // in scope 0 at ui/consts/const-typeid-of-rpass.rs:33:20: 33:23
    let mut _97: !;                      // in scope 0 at ui/consts/const-typeid-of-rpass.rs:33:5: 33:24
    scope 1 {
        debug left_val => _6;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _7;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _12: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _12;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug d => _20;                  // in scope 3 at ui/consts/const-typeid-of-rpass.rs:18:10: 18:11
        debug e => _21;                  // in scope 3 at ui/consts/const-typeid-of-rpass.rs:18:13: 18:14
        debug f => _22;                  // in scope 3 at ui/consts/const-typeid-of-rpass.rs:18:16: 18:17
        let _45: &std::any::TypeId;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _46: &std::any::TypeId;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _62: &std::any::TypeId;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _63: &std::any::TypeId;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _79: &std::any::TypeId;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _80: &std::any::TypeId;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _98: &(std::any::TypeId, std::any::TypeId); // in scope 3 at ui/consts/const-typeid-of-rpass.rs:33:20: 33:23
        let mut _99: &(std::any::TypeId, std::any::TypeId); // in scope 3 at ui/consts/const-typeid-of-rpass.rs:33:13: 33:16
        let mut _100: &(std::any::TypeId, std::any::TypeId, std::any::TypeId); // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        let mut _101: &(std::any::TypeId, std::any::TypeId, std::any::TypeId); // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        let mut _102: &(std::any::TypeId, std::any::TypeId, std::any::TypeId); // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        let mut _103: &(std::any::TypeId, std::any::TypeId, std::any::TypeId); // in scope 3 at ui/consts/const-typeid-of-rpass.rs:23:20: 23:23
        let mut _104: &(std::any::TypeId, std::any::TypeId, std::any::TypeId); // in scope 3 at ui/consts/const-typeid-of-rpass.rs:23:13: 23:16
        let mut _105: &(std::any::TypeId, std::any::TypeId, std::any::TypeId); // in scope 3 at ui/consts/const-typeid-of-rpass.rs:22:20: 22:23
        let mut _106: &(std::any::TypeId, std::any::TypeId, std::any::TypeId); // in scope 3 at ui/consts/const-typeid-of-rpass.rs:22:13: 22:16
        let mut _107: &(std::any::TypeId, std::any::TypeId, std::any::TypeId); // in scope 3 at ui/consts/const-typeid-of-rpass.rs:21:20: 21:23
        let mut _108: &(std::any::TypeId, std::any::TypeId, std::any::TypeId); // in scope 3 at ui/consts/const-typeid-of-rpass.rs:21:13: 21:16
        scope 4 {
            debug left_val => _45;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _46;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _51: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _51;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 6 {
            debug left_val => _62;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _63;      // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _68: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 7 {
                debug kind => _68;       // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 8 {
            debug left_val => _79;       // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _80;      // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _85: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 9 {
                debug kind => _85;       // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _3 = const {alloc1: &TypeId};    // scope 0 at ui/consts/const-typeid-of-rpass.rs:12:16: 12:24
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:12:16: 12:24
                                         // + literal: Const { ty: &TypeId, val: Value(Scalar(alloc1)) }
        _2 = _3;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _5 = TypeId::of::<isize>() -> bb1; // scope 0 at ui/consts/const-typeid-of-rpass.rs:12:26: 12:47
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:12:26: 12:45
                                         // + literal: Const { ty: fn() -> TypeId {TypeId::of::<isize>}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_1.0: &std::any::TypeId);  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_1.1: &std::any::TypeId);  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = _7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = <TypeId as PartialEq>::eq(move _10, move _11) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a TypeId, &'b TypeId) -> bool {<TypeId as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = Not(move _9);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _12 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<TypeId, TypeId>(move _14, move _15, move _17, move _19); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a TypeId, &'b TypeId, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<TypeId, TypeId>}, val: Value(<ZST>) }
    }

    bb4: {
        _24 = TypeId::of::<usize>() -> bb5; // scope 0 at ui/consts/const-typeid-of-rpass.rs:18:22: 18:43
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:18:22: 18:41
                                         // + literal: Const { ty: fn() -> TypeId {TypeId::of::<usize>}, val: Value(<ZST>) }
    }

    bb5: {
        _25 = TypeId::of::<&str>() -> bb6; // scope 0 at ui/consts/const-typeid-of-rpass.rs:18:45: 18:73
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:18:45: 18:71
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> TypeId {TypeId::of::<&str>}, val: Value(<ZST>) }
    }

    bb6: {
        _26 = TypeId::of::<A>() -> bb7;  // scope 0 at ui/consts/const-typeid-of-rpass.rs:19:22: 19:39
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:19:22: 19:37
                                         // + literal: Const { ty: fn() -> TypeId {TypeId::of::<A>}, val: Value(<ZST>) }
    }

    bb7: {
        _23 = (move _24, move _25, move _26); // scope 0 at ui/consts/const-typeid-of-rpass.rs:18:21: 19:40
        _20 = (_23.0: std::any::TypeId); // scope 0 at ui/consts/const-typeid-of-rpass.rs:18:10: 18:11
        _21 = (_23.1: std::any::TypeId); // scope 0 at ui/consts/const-typeid-of-rpass.rs:18:13: 18:14
        _22 = (_23.2: std::any::TypeId); // scope 0 at ui/consts/const-typeid-of-rpass.rs:18:16: 18:17
        _108 = const _;                  // scope 3 at ui/consts/const-typeid-of-rpass.rs:21:13: 21:16
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:21:13: 21:16
                                         // + literal: Const { ty: &(TypeId, TypeId, TypeId), val: Unevaluated(main, [], Some(promoted[10])) }
        _29 = &((*_108).0: std::any::TypeId); // scope 3 at ui/consts/const-typeid-of-rpass.rs:21:13: 21:16
        _107 = const _;                  // scope 3 at ui/consts/const-typeid-of-rpass.rs:21:20: 21:23
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:21:20: 21:23
                                         // + literal: Const { ty: &(TypeId, TypeId, TypeId), val: Unevaluated(main, [], Some(promoted[9])) }
        _30 = &((*_107).1: std::any::TypeId); // scope 3 at ui/consts/const-typeid-of-rpass.rs:21:20: 21:23
        _28 = <TypeId as PartialEq>::ne(move _29, move _30) -> bb8; // scope 3 at ui/consts/const-typeid-of-rpass.rs:21:13: 21:23
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:21:13: 21:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a TypeId, &'b TypeId) -> bool {<TypeId as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb8: {
        _27 = Not(move _28);             // scope 3 at ui/consts/const-typeid-of-rpass.rs:21:5: 21:24
        switchInt(move _27) -> [0: bb10, otherwise: bb9]; // scope 3 at ui/consts/const-typeid-of-rpass.rs:21:5: 21:24
    }

    bb9: {
        _31 = core::panicking::panic(const "assertion failed: T.0 != T.1"); // scope 3 at ui/consts/const-typeid-of-rpass.rs:21:5: 21:24
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:21:5: 21:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        _106 = const _;                  // scope 3 at ui/consts/const-typeid-of-rpass.rs:22:13: 22:16
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:22:13: 22:16
                                         // + literal: Const { ty: &(TypeId, TypeId, TypeId), val: Unevaluated(main, [], Some(promoted[8])) }
        _34 = &((*_106).0: std::any::TypeId); // scope 3 at ui/consts/const-typeid-of-rpass.rs:22:13: 22:16
        _105 = const _;                  // scope 3 at ui/consts/const-typeid-of-rpass.rs:22:20: 22:23
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:22:20: 22:23
                                         // + literal: Const { ty: &(TypeId, TypeId, TypeId), val: Unevaluated(main, [], Some(promoted[7])) }
        _35 = &((*_105).2: std::any::TypeId); // scope 3 at ui/consts/const-typeid-of-rpass.rs:22:20: 22:23
        _33 = <TypeId as PartialEq>::ne(move _34, move _35) -> bb11; // scope 3 at ui/consts/const-typeid-of-rpass.rs:22:13: 22:23
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:22:13: 22:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a TypeId, &'b TypeId) -> bool {<TypeId as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb11: {
        _32 = Not(move _33);             // scope 3 at ui/consts/const-typeid-of-rpass.rs:22:5: 22:24
        switchInt(move _32) -> [0: bb13, otherwise: bb12]; // scope 3 at ui/consts/const-typeid-of-rpass.rs:22:5: 22:24
    }

    bb12: {
        _36 = core::panicking::panic(const "assertion failed: T.0 != T.2"); // scope 3 at ui/consts/const-typeid-of-rpass.rs:22:5: 22:24
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:22:5: 22:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        _104 = const _;                  // scope 3 at ui/consts/const-typeid-of-rpass.rs:23:13: 23:16
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:23:13: 23:16
                                         // + literal: Const { ty: &(TypeId, TypeId, TypeId), val: Unevaluated(main, [], Some(promoted[6])) }
        _39 = &((*_104).1: std::any::TypeId); // scope 3 at ui/consts/const-typeid-of-rpass.rs:23:13: 23:16
        _103 = const _;                  // scope 3 at ui/consts/const-typeid-of-rpass.rs:23:20: 23:23
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:23:20: 23:23
                                         // + literal: Const { ty: &(TypeId, TypeId, TypeId), val: Unevaluated(main, [], Some(promoted[5])) }
        _40 = &((*_103).2: std::any::TypeId); // scope 3 at ui/consts/const-typeid-of-rpass.rs:23:20: 23:23
        _38 = <TypeId as PartialEq>::ne(move _39, move _40) -> bb14; // scope 3 at ui/consts/const-typeid-of-rpass.rs:23:13: 23:23
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:23:13: 23:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a TypeId, &'b TypeId) -> bool {<TypeId as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb14: {
        _37 = Not(move _38);             // scope 3 at ui/consts/const-typeid-of-rpass.rs:23:5: 23:24
        switchInt(move _37) -> [0: bb16, otherwise: bb15]; // scope 3 at ui/consts/const-typeid-of-rpass.rs:23:5: 23:24
    }

    bb15: {
        _41 = core::panicking::panic(const "assertion failed: T.1 != T.2"); // scope 3 at ui/consts/const-typeid-of-rpass.rs:23:5: 23:24
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:23:5: 23:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb16: {
        _102 = const _;                  // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &(TypeId, TypeId, TypeId), val: Unevaluated(main, [], Some(promoted[4])) }
        _43 = &((*_102).0: std::any::TypeId); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _44 = &_20;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _42 = (move _43, move _44);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _45 = (_42.0: &std::any::TypeId); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _46 = (_42.1: &std::any::TypeId); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _49 = _45;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _50 = _46;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _48 = <TypeId as PartialEq>::eq(move _49, move _50) -> bb17; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a TypeId, &'b TypeId) -> bool {<TypeId as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb17: {
        _47 = Not(move _48);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _47) -> [0: bb19, otherwise: bb18]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb18: {
        _51 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _53 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _55 = _45;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _54 = _55;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _46;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _56 = _57;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _58 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _52 = core::panicking::assert_failed::<TypeId, TypeId>(move _53, move _54, move _56, move _58); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a TypeId, &'b TypeId, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<TypeId, TypeId>}, val: Value(<ZST>) }
    }

    bb19: {
        _101 = const _;                  // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &(TypeId, TypeId, TypeId), val: Unevaluated(main, [], Some(promoted[3])) }
        _60 = &((*_101).1: std::any::TypeId); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _61 = &_21;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _59 = (move _60, move _61);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _62 = (_59.0: &std::any::TypeId); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _63 = (_59.1: &std::any::TypeId); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _66 = _62;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _67 = _63;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _65 = <TypeId as PartialEq>::eq(move _66, move _67) -> bb20; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a TypeId, &'b TypeId) -> bool {<TypeId as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb20: {
        _64 = Not(move _65);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _64) -> [0: bb22, otherwise: bb21]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb21: {
        _68 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _70 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _72 = _62;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _71 = _72;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _74 = _63;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _73 = _74;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _75 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _69 = core::panicking::assert_failed::<TypeId, TypeId>(move _70, move _71, move _73, move _75); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a TypeId, &'b TypeId, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<TypeId, TypeId>}, val: Value(<ZST>) }
    }

    bb22: {
        _100 = const _;                  // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &(TypeId, TypeId, TypeId), val: Unevaluated(main, [], Some(promoted[2])) }
        _77 = &((*_100).2: std::any::TypeId); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _78 = &_22;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _76 = (move _77, move _78);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _79 = (_76.0: &std::any::TypeId); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _80 = (_76.1: &std::any::TypeId); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _83 = _79;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _84 = _80;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _82 = <TypeId as PartialEq>::eq(move _83, move _84) -> bb23; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a TypeId, &'b TypeId) -> bool {<TypeId as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb23: {
        _81 = Not(move _82);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _81) -> [0: bb25, otherwise: bb24]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb24: {
        _85 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _87 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _89 = _79;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _88 = _89;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _91 = _80;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _90 = _91;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _92 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _86 = core::panicking::assert_failed::<TypeId, TypeId>(move _87, move _88, move _90, move _92); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a TypeId, &'b TypeId, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<TypeId, TypeId>}, val: Value(<ZST>) }
    }

    bb25: {
        _99 = const _;                   // scope 3 at ui/consts/const-typeid-of-rpass.rs:33:13: 33:16
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:33:13: 33:16
                                         // + literal: Const { ty: &(TypeId, TypeId), val: Unevaluated(main, [], Some(promoted[1])) }
        _95 = &((*_99).0: std::any::TypeId); // scope 3 at ui/consts/const-typeid-of-rpass.rs:33:13: 33:16
        _98 = const _;                   // scope 3 at ui/consts/const-typeid-of-rpass.rs:33:20: 33:23
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:33:20: 33:23
                                         // + literal: Const { ty: &(TypeId, TypeId), val: Unevaluated(main, [], Some(promoted[0])) }
        _96 = &((*_98).1: std::any::TypeId); // scope 3 at ui/consts/const-typeid-of-rpass.rs:33:20: 33:23
        _94 = <TypeId as PartialEq>::ne(move _95, move _96) -> bb26; // scope 3 at ui/consts/const-typeid-of-rpass.rs:33:13: 33:23
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:33:13: 33:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a TypeId, &'b TypeId) -> bool {<TypeId as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb26: {
        _93 = Not(move _94);             // scope 3 at ui/consts/const-typeid-of-rpass.rs:33:5: 33:24
        switchInt(move _93) -> [0: bb28, otherwise: bb27]; // scope 3 at ui/consts/const-typeid-of-rpass.rs:33:5: 33:24
    }

    bb27: {
        _97 = core::panicking::panic(const "assertion failed: F.0 != F.1"); // scope 3 at ui/consts/const-typeid-of-rpass.rs:33:5: 33:24
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:33:5: 33:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb28: {
        return;                          // scope 0 at ui/consts/const-typeid-of-rpass.rs:34:2: 34:2
    }
}

alloc1 (static: ID_ISIZE, size: 8, align: 8) {
    c9 8d a5 53 b3 19 32 1a                         │ ...S..2.
}

promoted[0] in main: &(TypeId, TypeId) = {
    let mut _0: &(std::any::TypeId, std::any::TypeId); // return place in scope 0 at ui/consts/const-typeid-of-rpass.rs:33:20: 33:23
    let mut _1: (std::any::TypeId, std::any::TypeId); // in scope 0 at ui/consts/const-typeid-of-rpass.rs:33:20: 33:21

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-typeid-of-rpass.rs:33:20: 33:21
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:33:20: 33:21
                                         // + literal: Const { ty: (TypeId, TypeId), val: Unevaluated(F, [], None) }
        _0 = &_1;                        // scope 0 at ui/consts/const-typeid-of-rpass.rs:33:20: 33:23
        return;                          // scope 0 at ui/consts/const-typeid-of-rpass.rs:33:20: 33:23
    }
}

promoted[1] in main: &(TypeId, TypeId) = {
    let mut _0: &(std::any::TypeId, std::any::TypeId); // return place in scope 0 at ui/consts/const-typeid-of-rpass.rs:33:13: 33:16
    let mut _1: (std::any::TypeId, std::any::TypeId); // in scope 0 at ui/consts/const-typeid-of-rpass.rs:33:13: 33:14

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-typeid-of-rpass.rs:33:13: 33:14
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:33:13: 33:14
                                         // + literal: Const { ty: (TypeId, TypeId), val: Unevaluated(F, [], None) }
        _0 = &_1;                        // scope 0 at ui/consts/const-typeid-of-rpass.rs:33:13: 33:16
        return;                          // scope 0 at ui/consts/const-typeid-of-rpass.rs:33:13: 33:16
    }
}

promoted[2] in main: &(TypeId, TypeId, TypeId) = {
    let mut _0: &(std::any::TypeId, std::any::TypeId, std::any::TypeId); // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: (std::any::TypeId, std::any::TypeId, std::any::TypeId); // in scope 0 at ui/consts/const-typeid-of-rpass.rs:27:16: 27:17

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-typeid-of-rpass.rs:27:16: 27:17
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:27:16: 27:17
                                         // + literal: Const { ty: (TypeId, TypeId, TypeId), val: Unevaluated(T, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[3] in main: &(TypeId, TypeId, TypeId) = {
    let mut _0: &(std::any::TypeId, std::any::TypeId, std::any::TypeId); // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: (std::any::TypeId, std::any::TypeId, std::any::TypeId); // in scope 0 at ui/consts/const-typeid-of-rpass.rs:26:16: 26:17

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-typeid-of-rpass.rs:26:16: 26:17
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:26:16: 26:17
                                         // + literal: Const { ty: (TypeId, TypeId, TypeId), val: Unevaluated(T, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[4] in main: &(TypeId, TypeId, TypeId) = {
    let mut _0: &(std::any::TypeId, std::any::TypeId, std::any::TypeId); // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: (std::any::TypeId, std::any::TypeId, std::any::TypeId); // in scope 0 at ui/consts/const-typeid-of-rpass.rs:25:16: 25:17

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-typeid-of-rpass.rs:25:16: 25:17
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:25:16: 25:17
                                         // + literal: Const { ty: (TypeId, TypeId, TypeId), val: Unevaluated(T, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[5] in main: &(TypeId, TypeId, TypeId) = {
    let mut _0: &(std::any::TypeId, std::any::TypeId, std::any::TypeId); // return place in scope 0 at ui/consts/const-typeid-of-rpass.rs:23:20: 23:23
    let mut _1: (std::any::TypeId, std::any::TypeId, std::any::TypeId); // in scope 0 at ui/consts/const-typeid-of-rpass.rs:23:20: 23:21

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-typeid-of-rpass.rs:23:20: 23:21
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:23:20: 23:21
                                         // + literal: Const { ty: (TypeId, TypeId, TypeId), val: Unevaluated(T, [], None) }
        _0 = &_1;                        // scope 0 at ui/consts/const-typeid-of-rpass.rs:23:20: 23:23
        return;                          // scope 0 at ui/consts/const-typeid-of-rpass.rs:23:20: 23:23
    }
}

promoted[6] in main: &(TypeId, TypeId, TypeId) = {
    let mut _0: &(std::any::TypeId, std::any::TypeId, std::any::TypeId); // return place in scope 0 at ui/consts/const-typeid-of-rpass.rs:23:13: 23:16
    let mut _1: (std::any::TypeId, std::any::TypeId, std::any::TypeId); // in scope 0 at ui/consts/const-typeid-of-rpass.rs:23:13: 23:14

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-typeid-of-rpass.rs:23:13: 23:14
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:23:13: 23:14
                                         // + literal: Const { ty: (TypeId, TypeId, TypeId), val: Unevaluated(T, [], None) }
        _0 = &_1;                        // scope 0 at ui/consts/const-typeid-of-rpass.rs:23:13: 23:16
        return;                          // scope 0 at ui/consts/const-typeid-of-rpass.rs:23:13: 23:16
    }
}

promoted[7] in main: &(TypeId, TypeId, TypeId) = {
    let mut _0: &(std::any::TypeId, std::any::TypeId, std::any::TypeId); // return place in scope 0 at ui/consts/const-typeid-of-rpass.rs:22:20: 22:23
    let mut _1: (std::any::TypeId, std::any::TypeId, std::any::TypeId); // in scope 0 at ui/consts/const-typeid-of-rpass.rs:22:20: 22:21

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-typeid-of-rpass.rs:22:20: 22:21
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:22:20: 22:21
                                         // + literal: Const { ty: (TypeId, TypeId, TypeId), val: Unevaluated(T, [], None) }
        _0 = &_1;                        // scope 0 at ui/consts/const-typeid-of-rpass.rs:22:20: 22:23
        return;                          // scope 0 at ui/consts/const-typeid-of-rpass.rs:22:20: 22:23
    }
}

promoted[8] in main: &(TypeId, TypeId, TypeId) = {
    let mut _0: &(std::any::TypeId, std::any::TypeId, std::any::TypeId); // return place in scope 0 at ui/consts/const-typeid-of-rpass.rs:22:13: 22:16
    let mut _1: (std::any::TypeId, std::any::TypeId, std::any::TypeId); // in scope 0 at ui/consts/const-typeid-of-rpass.rs:22:13: 22:14

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-typeid-of-rpass.rs:22:13: 22:14
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:22:13: 22:14
                                         // + literal: Const { ty: (TypeId, TypeId, TypeId), val: Unevaluated(T, [], None) }
        _0 = &_1;                        // scope 0 at ui/consts/const-typeid-of-rpass.rs:22:13: 22:16
        return;                          // scope 0 at ui/consts/const-typeid-of-rpass.rs:22:13: 22:16
    }
}

promoted[9] in main: &(TypeId, TypeId, TypeId) = {
    let mut _0: &(std::any::TypeId, std::any::TypeId, std::any::TypeId); // return place in scope 0 at ui/consts/const-typeid-of-rpass.rs:21:20: 21:23
    let mut _1: (std::any::TypeId, std::any::TypeId, std::any::TypeId); // in scope 0 at ui/consts/const-typeid-of-rpass.rs:21:20: 21:21

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-typeid-of-rpass.rs:21:20: 21:21
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:21:20: 21:21
                                         // + literal: Const { ty: (TypeId, TypeId, TypeId), val: Unevaluated(T, [], None) }
        _0 = &_1;                        // scope 0 at ui/consts/const-typeid-of-rpass.rs:21:20: 21:23
        return;                          // scope 0 at ui/consts/const-typeid-of-rpass.rs:21:20: 21:23
    }
}

promoted[10] in main: &(TypeId, TypeId, TypeId) = {
    let mut _0: &(std::any::TypeId, std::any::TypeId, std::any::TypeId); // return place in scope 0 at ui/consts/const-typeid-of-rpass.rs:21:13: 21:16
    let mut _1: (std::any::TypeId, std::any::TypeId, std::any::TypeId); // in scope 0 at ui/consts/const-typeid-of-rpass.rs:21:13: 21:14

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-typeid-of-rpass.rs:21:13: 21:14
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:21:13: 21:14
                                         // + literal: Const { ty: (TypeId, TypeId, TypeId), val: Unevaluated(T, [], None) }
        _0 = &_1;                        // scope 0 at ui/consts/const-typeid-of-rpass.rs:21:13: 21:16
        return;                          // scope 0 at ui/consts/const-typeid-of-rpass.rs:21:13: 21:16
    }
}

const T: (TypeId, TypeId, TypeId) = {
    let mut _0: (std::any::TypeId, std::any::TypeId, std::any::TypeId); // return place in scope 0 at ui/consts/const-typeid-of-rpass.rs:15:14: 15:38
    let mut _1: std::any::TypeId;        // in scope 0 at ui/consts/const-typeid-of-rpass.rs:15:42: 15:63
    let mut _2: std::any::TypeId;        // in scope 0 at ui/consts/const-typeid-of-rpass.rs:16:22: 16:50
    let mut _3: std::any::TypeId;        // in scope 0 at ui/consts/const-typeid-of-rpass.rs:17:22: 17:39

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-typeid-of-rpass.rs:15:42: 15:63
        ConstEvalCounter;                // scope 0 at ui/consts/const-typeid-of-rpass.rs:15:42: 15:63
        _1 = TypeId::of::<usize>() -> bb1; // scope 0 at ui/consts/const-typeid-of-rpass.rs:15:42: 15:63
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:15:42: 15:61
                                         // + literal: Const { ty: fn() -> TypeId {TypeId::of::<usize>}, val: Value(<ZST>) }
    }

    bb1: {
        StorageLive(_2);                 // scope 0 at ui/consts/const-typeid-of-rpass.rs:16:22: 16:50
        ConstEvalCounter;                // scope 0 at ui/consts/const-typeid-of-rpass.rs:16:22: 16:50
        _2 = TypeId::of::<&str>() -> bb2; // scope 0 at ui/consts/const-typeid-of-rpass.rs:16:22: 16:50
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:16:22: 16:48
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> TypeId {TypeId::of::<&str>}, val: Value(<ZST>) }
    }

    bb2: {
        StorageLive(_3);                 // scope 0 at ui/consts/const-typeid-of-rpass.rs:17:22: 17:39
        ConstEvalCounter;                // scope 0 at ui/consts/const-typeid-of-rpass.rs:17:22: 17:39
        _3 = TypeId::of::<A>() -> bb3;   // scope 0 at ui/consts/const-typeid-of-rpass.rs:17:22: 17:39
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:17:22: 17:37
                                         // + literal: Const { ty: fn() -> TypeId {TypeId::of::<A>}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = (move _1, move _2, move _3); // scope 0 at ui/consts/const-typeid-of-rpass.rs:15:41: 17:40
        StorageDead(_3);                 // scope 0 at ui/consts/const-typeid-of-rpass.rs:17:39: 17:40
        StorageDead(_2);                 // scope 0 at ui/consts/const-typeid-of-rpass.rs:17:39: 17:40
        StorageDead(_1);                 // scope 0 at ui/consts/const-typeid-of-rpass.rs:17:39: 17:40
        return;                          // scope 0 at ui/consts/const-typeid-of-rpass.rs:15:5: 17:41
    }
}

const F: (TypeId, TypeId) = {
    let mut _0: (std::any::TypeId, std::any::TypeId); // return place in scope 0 at ui/consts/const-typeid-of-rpass.rs:30:14: 30:30
    let mut _1: std::any::TypeId;        // in scope 0 at ui/consts/const-typeid-of-rpass.rs:30:34: 30:69
    let mut _2: std::any::TypeId;        // in scope 0 at ui/consts/const-typeid-of-rpass.rs:31:13: 31:50

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-typeid-of-rpass.rs:30:34: 30:69
        ConstEvalCounter;                // scope 0 at ui/consts/const-typeid-of-rpass.rs:30:34: 30:69
        _1 = TypeId::of::<fn(fn(A) -> A) -> A>() -> bb1; // scope 0 at ui/consts/const-typeid-of-rpass.rs:30:34: 30:69
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:30:34: 30:67
                                         // + literal: Const { ty: fn() -> TypeId {TypeId::of::<fn(fn(A) -> A) -> A>}, val: Value(<ZST>) }
    }

    bb1: {
        StorageLive(_2);                 // scope 0 at ui/consts/const-typeid-of-rpass.rs:31:13: 31:50
        ConstEvalCounter;                // scope 0 at ui/consts/const-typeid-of-rpass.rs:31:13: 31:50
        _2 = TypeId::of::<fn(fn() -> A, A) -> A>() -> bb2; // scope 0 at ui/consts/const-typeid-of-rpass.rs:31:13: 31:50
                                         // mir::Constant
                                         // + span: ui/consts/const-typeid-of-rpass.rs:31:13: 31:48
                                         // + literal: Const { ty: fn() -> TypeId {TypeId::of::<fn(fn() -> A, A) -> A>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = (move _1, move _2);         // scope 0 at ui/consts/const-typeid-of-rpass.rs:30:33: 31:51
        StorageDead(_2);                 // scope 0 at ui/consts/const-typeid-of-rpass.rs:31:50: 31:51
        StorageDead(_1);                 // scope 0 at ui/consts/const-typeid-of-rpass.rs:31:50: 31:51
        return;                          // scope 0 at ui/consts/const-typeid-of-rpass.rs:30:5: 31:52
    }
}
