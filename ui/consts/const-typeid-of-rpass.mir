// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static ID_ISIZE: TypeId = {
    let mut _0: std::any::TypeId;

    bb0: {
        ConstEvalCounter;
        _0 = TypeId::of::<isize>() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::any::TypeId, &std::any::TypeId);
    let _2: &std::any::TypeId;
    let mut _3: &std::any::TypeId;
    let _4: std::any::TypeId;
    let _5: &std::any::TypeId;
    let _6: &std::any::TypeId;
    let mut _7: bool;
    let mut _8: bool;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    let _12: std::any::TypeId;
    let _13: std::any::TypeId;
    let _14: std::any::TypeId;
    let mut _15: (std::any::TypeId, std::any::TypeId, std::any::TypeId);
    let mut _16: std::any::TypeId;
    let mut _17: std::any::TypeId;
    let mut _18: std::any::TypeId;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: &std::any::TypeId;
    let mut _22: &std::any::TypeId;
    let mut _23: !;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: &std::any::TypeId;
    let mut _27: &std::any::TypeId;
    let mut _28: !;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: &std::any::TypeId;
    let mut _32: &std::any::TypeId;
    let mut _33: !;
    let mut _34: (&std::any::TypeId, &std::any::TypeId);
    let mut _35: &std::any::TypeId;
    let mut _36: &std::any::TypeId;
    let mut _39: bool;
    let mut _40: bool;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _44: (&std::any::TypeId, &std::any::TypeId);
    let mut _45: &std::any::TypeId;
    let mut _46: &std::any::TypeId;
    let mut _49: bool;
    let mut _50: bool;
    let _52: !;
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _54: (&std::any::TypeId, &std::any::TypeId);
    let mut _55: &std::any::TypeId;
    let mut _56: &std::any::TypeId;
    let mut _59: bool;
    let mut _60: bool;
    let _62: !;
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: &std::any::TypeId;
    let mut _67: &std::any::TypeId;
    let mut _68: !;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _9: core::panicking::AssertKind;
        scope 2 {
            debug kind => _9;
        }
    }
    scope 3 {
        debug d => _12;
        debug e => _13;
        debug f => _14;
        let _37: &std::any::TypeId;
        let _38: &std::any::TypeId;
        let _47: &std::any::TypeId;
        let _48: &std::any::TypeId;
        let _57: &std::any::TypeId;
        let _58: &std::any::TypeId;
        let mut _69: &(std::any::TypeId, std::any::TypeId);
        let mut _70: &(std::any::TypeId, std::any::TypeId);
        let mut _71: &(std::any::TypeId, std::any::TypeId, std::any::TypeId);
        let mut _72: &(std::any::TypeId, std::any::TypeId, std::any::TypeId);
        let mut _73: &(std::any::TypeId, std::any::TypeId, std::any::TypeId);
        let mut _74: &(std::any::TypeId, std::any::TypeId, std::any::TypeId);
        let mut _75: &(std::any::TypeId, std::any::TypeId, std::any::TypeId);
        let mut _76: &(std::any::TypeId, std::any::TypeId, std::any::TypeId);
        let mut _77: &(std::any::TypeId, std::any::TypeId, std::any::TypeId);
        let mut _78: &(std::any::TypeId, std::any::TypeId, std::any::TypeId);
        let mut _79: &(std::any::TypeId, std::any::TypeId, std::any::TypeId);
        scope 4 {
            debug left_val => _37;
            debug right_val => _38;
            let _41: core::panicking::AssertKind;
            scope 5 {
                debug kind => _41;
            }
        }
        scope 6 {
            debug left_val => _47;
            debug right_val => _48;
            let _51: core::panicking::AssertKind;
            scope 7 {
                debug kind => _51;
            }
        }
        scope 8 {
            debug left_val => _57;
            debug right_val => _58;
            let _61: core::panicking::AssertKind;
            scope 9 {
                debug kind => _61;
            }
        }
    }

    bb0: {
        _2 = const {alloc1: &TypeId};
        _4 = TypeId::of::<isize>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _1 = (_2, move _3);
        _5 = (_1.0: &std::any::TypeId);
        _6 = (_1.1: &std::any::TypeId);
        _8 = <TypeId as PartialEq>::eq(_5, _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<TypeId, TypeId>(move _9, _5, _6, move _11) -> unwind continue;
    }

    bb4: {
        _16 = TypeId::of::<usize>() -> [return: bb5, unwind continue];
    }

    bb5: {
        _17 = TypeId::of::<&str>() -> [return: bb6, unwind continue];
    }

    bb6: {
        _18 = TypeId::of::<A>() -> [return: bb7, unwind continue];
    }

    bb7: {
        _15 = (move _16, move _17, move _18);
        _12 = (_15.0: std::any::TypeId);
        _13 = (_15.1: std::any::TypeId);
        _14 = (_15.2: std::any::TypeId);
        _79 = const _;
        _21 = &((*_79).0: std::any::TypeId);
        _78 = const _;
        _22 = &((*_78).1: std::any::TypeId);
        _20 = <TypeId as PartialEq>::ne(move _21, move _22) -> [return: bb8, unwind continue];
    }

    bb8: {
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _23 = core::panicking::panic(const "assertion failed: T.0 != T.1") -> unwind continue;
    }

    bb10: {
        _77 = const _;
        _26 = &((*_77).0: std::any::TypeId);
        _76 = const _;
        _27 = &((*_76).2: std::any::TypeId);
        _25 = <TypeId as PartialEq>::ne(move _26, move _27) -> [return: bb11, unwind continue];
    }

    bb11: {
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _28 = core::panicking::panic(const "assertion failed: T.0 != T.2") -> unwind continue;
    }

    bb13: {
        _75 = const _;
        _31 = &((*_75).1: std::any::TypeId);
        _74 = const _;
        _32 = &((*_74).2: std::any::TypeId);
        _30 = <TypeId as PartialEq>::ne(move _31, move _32) -> [return: bb14, unwind continue];
    }

    bb14: {
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _33 = core::panicking::panic(const "assertion failed: T.1 != T.2") -> unwind continue;
    }

    bb16: {
        _73 = const _;
        _35 = &((*_73).0: std::any::TypeId);
        _36 = &_12;
        _34 = (move _35, move _36);
        _37 = (_34.0: &std::any::TypeId);
        _38 = (_34.1: &std::any::TypeId);
        _40 = <TypeId as PartialEq>::eq(_37, _38) -> [return: bb17, unwind continue];
    }

    bb17: {
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<TypeId, TypeId>(move _41, _37, _38, move _43) -> unwind continue;
    }

    bb19: {
        _72 = const _;
        _45 = &((*_72).1: std::any::TypeId);
        _46 = &_13;
        _44 = (move _45, move _46);
        _47 = (_44.0: &std::any::TypeId);
        _48 = (_44.1: &std::any::TypeId);
        _50 = <TypeId as PartialEq>::eq(_47, _48) -> [return: bb20, unwind continue];
    }

    bb20: {
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _51 = core::panicking::AssertKind::Eq;
        _53 = Option::<Arguments<'_>>::None;
        _52 = core::panicking::assert_failed::<TypeId, TypeId>(move _51, _47, _48, move _53) -> unwind continue;
    }

    bb22: {
        _71 = const _;
        _55 = &((*_71).2: std::any::TypeId);
        _56 = &_14;
        _54 = (move _55, move _56);
        _57 = (_54.0: &std::any::TypeId);
        _58 = (_54.1: &std::any::TypeId);
        _60 = <TypeId as PartialEq>::eq(_57, _58) -> [return: bb23, unwind continue];
    }

    bb23: {
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _61 = core::panicking::AssertKind::Eq;
        _63 = Option::<Arguments<'_>>::None;
        _62 = core::panicking::assert_failed::<TypeId, TypeId>(move _61, _57, _58, move _63) -> unwind continue;
    }

    bb25: {
        _70 = const _;
        _66 = &((*_70).0: std::any::TypeId);
        _69 = const _;
        _67 = &((*_69).1: std::any::TypeId);
        _65 = <TypeId as PartialEq>::ne(move _66, move _67) -> [return: bb26, unwind continue];
    }

    bb26: {
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _68 = core::panicking::panic(const "assertion failed: F.0 != F.1") -> unwind continue;
    }

    bb28: {
        return;
    }
}

alloc1 (static: ID_ISIZE, size: 16, align: 8) {
    b0 60 2e a2 80 b9 58 86 ac 0a 56 1c 83 92 5f 1e â”‚ .`....X...V..._.
}

promoted[0] in main: &(TypeId, TypeId) = {
    let mut _0: &(std::any::TypeId, std::any::TypeId);
    let mut _1: (std::any::TypeId, std::any::TypeId);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &(TypeId, TypeId) = {
    let mut _0: &(std::any::TypeId, std::any::TypeId);
    let mut _1: (std::any::TypeId, std::any::TypeId);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &(TypeId, TypeId, TypeId) = {
    let mut _0: &(std::any::TypeId, std::any::TypeId, std::any::TypeId);
    let mut _1: (std::any::TypeId, std::any::TypeId, std::any::TypeId);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &(TypeId, TypeId, TypeId) = {
    let mut _0: &(std::any::TypeId, std::any::TypeId, std::any::TypeId);
    let mut _1: (std::any::TypeId, std::any::TypeId, std::any::TypeId);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &(TypeId, TypeId, TypeId) = {
    let mut _0: &(std::any::TypeId, std::any::TypeId, std::any::TypeId);
    let mut _1: (std::any::TypeId, std::any::TypeId, std::any::TypeId);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &(TypeId, TypeId, TypeId) = {
    let mut _0: &(std::any::TypeId, std::any::TypeId, std::any::TypeId);
    let mut _1: (std::any::TypeId, std::any::TypeId, std::any::TypeId);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &(TypeId, TypeId, TypeId) = {
    let mut _0: &(std::any::TypeId, std::any::TypeId, std::any::TypeId);
    let mut _1: (std::any::TypeId, std::any::TypeId, std::any::TypeId);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &(TypeId, TypeId, TypeId) = {
    let mut _0: &(std::any::TypeId, std::any::TypeId, std::any::TypeId);
    let mut _1: (std::any::TypeId, std::any::TypeId, std::any::TypeId);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &(TypeId, TypeId, TypeId) = {
    let mut _0: &(std::any::TypeId, std::any::TypeId, std::any::TypeId);
    let mut _1: (std::any::TypeId, std::any::TypeId, std::any::TypeId);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &(TypeId, TypeId, TypeId) = {
    let mut _0: &(std::any::TypeId, std::any::TypeId, std::any::TypeId);
    let mut _1: (std::any::TypeId, std::any::TypeId, std::any::TypeId);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &(TypeId, TypeId, TypeId) = {
    let mut _0: &(std::any::TypeId, std::any::TypeId, std::any::TypeId);
    let mut _1: (std::any::TypeId, std::any::TypeId, std::any::TypeId);

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

const T: (TypeId, TypeId, TypeId) = {
    let mut _0: (std::any::TypeId, std::any::TypeId, std::any::TypeId);
    let mut _1: std::any::TypeId;
    let mut _2: std::any::TypeId;
    let mut _3: std::any::TypeId;

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = TypeId::of::<usize>() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_2);
        ConstEvalCounter;
        _2 = TypeId::of::<&str>() -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageLive(_3);
        ConstEvalCounter;
        _3 = TypeId::of::<A>() -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = (move _1, move _2, move _3);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const F: (TypeId, TypeId) = {
    let mut _0: (std::any::TypeId, std::any::TypeId);
    let mut _1: std::any::TypeId;
    let mut _2: std::any::TypeId;

    bb0: {
        StorageLive(_1);
        ConstEvalCounter;
        _1 = TypeId::of::<fn(fn(A) -> A) -> A>() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_2);
        ConstEvalCounter;
        _2 = TypeId::of::<fn(fn() -> A, A) -> A>() -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = (move _1, move _2);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
