// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
B::a::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/issue-67641.rs:8:34: 8:35

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/consts/issue-67641.rs:8:34: 8:35
        return;                          // scope 0 at ui/consts/issue-67641.rs:8:34: 8:35
    }
}

fn <impl at ui/consts/issue-67641.rs:6:10: 6:15>::fmt(_1: &B<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/consts/issue-67641.rs:6:10: 6:15
    debug f => _2;                       // in scope 0 at ui/consts/issue-67641.rs:6:10: 6:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/consts/issue-67641.rs:6:10: 6:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/consts/issue-67641.rs:6:10: 6:15
    let mut _4: &str;                    // in scope 0 at ui/consts/issue-67641.rs:6:10: 6:15
    let _5: &str;                        // in scope 0 at ui/consts/issue-67641.rs:6:10: 6:15
    let mut _6: &str;                    // in scope 0 at ui/consts/issue-67641.rs:8:5: 8:36
    let _7: &str;                        // in scope 0 at ui/consts/issue-67641.rs:8:5: 8:36
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/consts/issue-67641.rs:8:5: 8:36
    let mut _9: &&[std::cell::Cell<std::option::Option<&B<'_>>>; 2]; // in scope 0 at ui/consts/issue-67641.rs:8:5: 8:36
    let _10: &&[std::cell::Cell<std::option::Option<&B<'_>>>; 2]; // in scope 0 at ui/consts/issue-67641.rs:8:5: 8:36
    let _11: &[std::cell::Cell<std::option::Option<&B<'_>>>; 2]; // in scope 0 at ui/consts/issue-67641.rs:8:5: 8:36

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/consts/issue-67641.rs:6:10: 6:15
        _5 = const "B";                  // scope 0 at ui/consts/issue-67641.rs:6:10: 6:15
                                         // mir::Constant
                                         // + span: ui/consts/issue-67641.rs:6:10: 6:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/consts/issue-67641.rs:6:10: 6:15
        _7 = const "a";                  // scope 0 at ui/consts/issue-67641.rs:8:5: 8:36
                                         // mir::Constant
                                         // + span: ui/consts/issue-67641.rs:8:5: 8:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/consts/issue-67641.rs:8:5: 8:36
        _11 = &((*_1).0: [std::cell::Cell<std::option::Option<&B<'_>>>; 2]); // scope 0 at ui/consts/issue-67641.rs:8:5: 8:36
        _10 = &_11;                      // scope 0 at ui/consts/issue-67641.rs:8:5: 8:36
        _9 = _10;                        // scope 0 at ui/consts/issue-67641.rs:8:5: 8:36
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/consts/issue-67641.rs:8:5: 8:36
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _3, move _4, move _6, move _8) -> bb1; // scope 0 at ui/consts/issue-67641.rs:6:10: 6:15
                                         // mir::Constant
                                         // + span: ui/consts/issue-67641.rs:6:10: 6:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/issue-67641.rs:6:15: 6:15
    }
}

fn <impl at ui/consts/issue-67641.rs:11:1: 11:15>::new() -> B<'_> {
    let mut _0: B<'_>;                   // return place in scope 0 at ui/consts/issue-67641.rs:12:17: 12:22
    let mut _1: [std::cell::Cell<std::option::Option<&B<'_>>>; 2]; // in scope 0 at ui/consts/issue-67641.rs:13:16: 13:50
    let mut _2: std::cell::Cell<std::option::Option<&B<'_>>>; // in scope 0 at ui/consts/issue-67641.rs:13:17: 13:32
    let mut _3: std::option::Option<&B<'_>>; // in scope 0 at ui/consts/issue-67641.rs:13:27: 13:31
    let mut _4: std::cell::Cell<std::option::Option<&B<'_>>>; // in scope 0 at ui/consts/issue-67641.rs:13:34: 13:49
    let mut _5: std::option::Option<&B<'_>>; // in scope 0 at ui/consts/issue-67641.rs:13:44: 13:48

    bb0: {
        _3 = const Option::<&B<'_>>::None; // scope 0 at ui/consts/issue-67641.rs:13:27: 13:31
                                         // mir::Constant
                                         // + span: ui/consts/issue-67641.rs:13:27: 13:31
                                         // + literal: Const { ty: Option<&B<'_>>, val: Value(Scalar(0x0000000000000000)) }
        _2 = Cell::<Option<&B<'_>>>::new(move _3) -> bb1; // scope 0 at ui/consts/issue-67641.rs:13:17: 13:32
                                         // mir::Constant
                                         // + span: ui/consts/issue-67641.rs:13:17: 13:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Option<&B<'_>>) -> Cell<Option<&B<'_>>> {Cell::<Option<&B<'_>>>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = const Option::<&B<'_>>::None; // scope 0 at ui/consts/issue-67641.rs:13:44: 13:48
                                         // mir::Constant
                                         // + span: ui/consts/issue-67641.rs:13:44: 13:48
                                         // + literal: Const { ty: Option<&B<'_>>, val: Value(Scalar(0x0000000000000000)) }
        _4 = Cell::<Option<&B<'_>>>::new(move _5) -> bb2; // scope 0 at ui/consts/issue-67641.rs:13:34: 13:49
                                         // mir::Constant
                                         // + span: ui/consts/issue-67641.rs:13:34: 13:43
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Option<&B<'_>>) -> Cell<Option<&B<'_>>> {Cell::<Option<&B<'_>>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = [move _2, move _4];         // scope 0 at ui/consts/issue-67641.rs:13:16: 13:50
        _0 = B::<'_> { a: move _1 };     // scope 0 at ui/consts/issue-67641.rs:13:9: 13:52
        return;                          // scope 0 at ui/consts/issue-67641.rs:14:6: 14:6
    }
}

fn f() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-67641.rs:17:8: 17:8
    let _1: B<'_>;                       // in scope 0 at ui/consts/issue-67641.rs:18:9: 18:11
    let _2: ();                          // in scope 0 at ui/consts/issue-67641.rs:19:5: 19:27
    let mut _3: &std::cell::Cell<std::option::Option<&B<'_>>>; // in scope 0 at ui/consts/issue-67641.rs:19:5: 19:27
    let _4: usize;                       // in scope 0 at ui/consts/issue-67641.rs:19:10: 19:11
    let mut _5: std::option::Option<&B<'_>>; // in scope 0 at ui/consts/issue-67641.rs:19:17: 19:26
    let mut _6: &B<'_>;                  // in scope 0 at ui/consts/issue-67641.rs:19:22: 19:25
    let _7: &B<'_>;                      // in scope 0 at ui/consts/issue-67641.rs:19:22: 19:25
    scope 1 {
        debug b2 => _1;                  // in scope 1 at ui/consts/issue-67641.rs:18:9: 18:11
    }

    bb0: {
        _1 = B::<'_>::new() -> bb1;      // scope 0 at ui/consts/issue-67641.rs:18:14: 18:22
                                         // mir::Constant
                                         // + span: ui/consts/issue-67641.rs:18:14: 18:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> B<'_> {B::<'_>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = const 0_usize;              // scope 1 at ui/consts/issue-67641.rs:19:10: 19:11
        _3 = &(_1.0: [std::cell::Cell<std::option::Option<&B<'_>>>; 2])[_4]; // scope 1 at ui/consts/issue-67641.rs:19:5: 19:27
        _7 = &_1;                        // scope 1 at ui/consts/issue-67641.rs:19:22: 19:25
        _6 = _7;                         // scope 1 at ui/consts/issue-67641.rs:19:22: 19:25
        _5 = Option::<&B<'_>>::Some(move _6); // scope 1 at ui/consts/issue-67641.rs:19:17: 19:26
        _2 = Cell::<Option<&B<'_>>>::set(move _3, move _5) -> bb2; // scope 1 at ui/consts/issue-67641.rs:19:5: 19:27
                                         // mir::Constant
                                         // + span: ui/consts/issue-67641.rs:19:13: 19:16
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&B<'_>>>, Option<&B<'_>>) {Cell::<Option<&B<'_>>>::set}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/consts/issue-67641.rs:20:2: 20:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-67641.rs:22:11: 22:11
    let _1: ();                          // in scope 0 at ui/consts/issue-67641.rs:23:5: 23:8

    bb0: {
        _1 = f() -> bb1;                 // scope 0 at ui/consts/issue-67641.rs:23:5: 23:8
                                         // mir::Constant
                                         // + span: ui/consts/issue-67641.rs:23:5: 23:6
                                         // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/issue-67641.rs:24:2: 24:2
    }
}
