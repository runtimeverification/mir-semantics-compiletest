// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const-block-item-macro-codegen.rs:13:1: 13:12>::eval(_1: &MyType, _2: usize) -> usize {
    debug self => _1;                    // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:14:13: 14:18
    debug a => _2;                       // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:14:20: 14:21
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-block-item-macro-codegen.rs:14:33: 14:38
    let mut _3: fn(usize, usize) -> usize; // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:15:9: 15:20
    let mut _4: usize;                   // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:15:21: 15:30
    let mut _5: usize;                   // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:15:32: 15:33

    bb0: {
        _3 = ((*_1).2: fn(usize, usize) -> usize); // scope 0 at ui/consts/const-block-item-macro-codegen.rs:15:9: 15:20
        _4 = ((*_1).1: usize);           // scope 0 at ui/consts/const-block-item-macro-codegen.rs:15:21: 15:30
        _5 = _2;                         // scope 0 at ui/consts/const-block-item-macro-codegen.rs:15:32: 15:33
        _0 = move _3(move _4, move _5) -> bb1; // scope 0 at ui/consts/const-block-item-macro-codegen.rs:15:9: 15:34
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-block-item-macro-codegen.rs:16:6: 16:6
    }
}

static GENERATED_CODE_1: MyType = {
    let mut _0: MyType;                  // return place in scope 0 at ui/consts/const-block-item-macro-codegen.rs:34:26: 34:32
    let mut _1: fn(usize, usize) -> usize; // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:28:23: 28:32

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-block-item-macro-codegen.rs:28:23: 28:32
        _1 = GENERATED_CODE_1::generated as fn(usize, usize) -> usize (Pointer(ReifyFnPointer)); // scope 0 at ui/consts/const-block-item-macro-codegen.rs:28:23: 28:32
                                         // mir::Constant
                                         // + span: ui/consts/const-block-item-macro-codegen.rs:28:23: 28:32
                                         // + literal: Const { ty: fn(usize, usize) -> usize {GENERATED_CODE_1::generated}, val: Value(<ZST>) }
        _0 = MyType { desc: const "test", data: const 100_usize, code: move _1 }; // scope 0 at ui/consts/const-block-item-macro-codegen.rs:25:13: 29:14
                                         // mir::Constant
                                         // + span: ui/consts/const-block-item-macro-codegen.rs:26:23: 26:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageDead(_1);                 // scope 0 at ui/consts/const-block-item-macro-codegen.rs:29:13: 29:14
        return;                          // scope 0 at ui/consts/const-block-item-macro-codegen.rs:34:1: 34:52
    }
}

fn GENERATED_CODE_1::generated(_1: usize, _2: usize) -> usize {
    debug a => _1;                       // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:22:26: 22:27
    debug b => _2;                       // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:22:36: 22:37
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-block-item-macro-codegen.rs:22:49: 22:54
    let mut _3: usize;                   // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:17: 23:18
    let mut _4: usize;                   // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:21: 23:29
    let mut _5: usize;                   // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:27: 23:28
    let mut _6: (usize, bool);           // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:21: 23:29
    let mut _7: (usize, bool);           // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:17: 23:29

    bb0: {
        _3 = _1;                         // scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:17: 23:18
        _5 = _2;                         // scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:27: 23:28
        _6 = CheckedMul(const 2_usize, _5); // scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:21: 23:29
        assert(!move (_6.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _5) -> bb1; // scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:21: 23:29
    }

    bb1: {
        _4 = move (_6.0: usize);         // scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:21: 23:29
        _7 = CheckedSub(_3, _4);         // scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:17: 23:29
        assert(!move (_7.1: bool), "attempt to compute `{} - {}`, which would overflow", move _3, move _4) -> bb2; // scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:17: 23:29
    }

    bb2: {
        _0 = move (_7.0: usize);         // scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:17: 23:29
        return;                          // scope 0 at ui/consts/const-block-item-macro-codegen.rs:24:14: 24:14
    }
}

static GENERATED_CODE_2: MyType = {
    let mut _0: MyType;                  // return place in scope 0 at ui/consts/const-block-item-macro-codegen.rs:35:26: 35:32
    let mut _1: fn(usize, usize) -> usize; // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:28:23: 28:32

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-block-item-macro-codegen.rs:28:23: 28:32
        _1 = GENERATED_CODE_2::generated as fn(usize, usize) -> usize (Pointer(ReifyFnPointer)); // scope 0 at ui/consts/const-block-item-macro-codegen.rs:28:23: 28:32
                                         // mir::Constant
                                         // + span: ui/consts/const-block-item-macro-codegen.rs:28:23: 28:32
                                         // + literal: Const { ty: fn(usize, usize) -> usize {GENERATED_CODE_2::generated}, val: Value(<ZST>) }
        _0 = MyType { desc: const "test", data: const 1000_usize, code: move _1 }; // scope 0 at ui/consts/const-block-item-macro-codegen.rs:25:13: 29:14
                                         // mir::Constant
                                         // + span: ui/consts/const-block-item-macro-codegen.rs:26:23: 26:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageDead(_1);                 // scope 0 at ui/consts/const-block-item-macro-codegen.rs:29:13: 29:14
        return;                          // scope 0 at ui/consts/const-block-item-macro-codegen.rs:35:1: 35:53
    }
}

fn GENERATED_CODE_2::generated(_1: usize, _2: usize) -> usize {
    debug a => _1;                       // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:22:26: 22:27
    debug b => _2;                       // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:22:36: 22:37
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-block-item-macro-codegen.rs:22:49: 22:54
    let mut _3: usize;                   // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:17: 23:18
    let mut _4: usize;                   // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:21: 23:29
    let mut _5: usize;                   // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:27: 23:28
    let mut _6: (usize, bool);           // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:21: 23:29
    let mut _7: (usize, bool);           // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:17: 23:29

    bb0: {
        _3 = _1;                         // scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:17: 23:18
        _5 = _2;                         // scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:27: 23:28
        _6 = CheckedMul(const 5_usize, _5); // scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:21: 23:29
        assert(!move (_6.1: bool), "attempt to compute `{} * {}`, which would overflow", const 5_usize, move _5) -> bb1; // scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:21: 23:29
    }

    bb1: {
        _4 = move (_6.0: usize);         // scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:21: 23:29
        _7 = CheckedSub(_3, _4);         // scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:17: 23:29
        assert(!move (_7.1: bool), "attempt to compute `{} - {}`, which would overflow", move _3, move _4) -> bb2; // scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:17: 23:29
    }

    bb2: {
        _0 = move (_7.0: usize);         // scope 0 at ui/consts/const-block-item-macro-codegen.rs:23:17: 23:29
        return;                          // scope 0 at ui/consts/const-block-item-macro-codegen.rs:24:14: 24:14
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-block-item-macro-codegen.rs:37:15: 37:15
    let mut _1: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: usize;                       // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:38:16: 38:41
    let mut _4: &MyType;                 // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:38:16: 38:41
    let _5: &MyType;                     // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:38:16: 38:32
    let mut _6: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _7: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _8: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _21: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _22: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _23: usize;                      // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:39:16: 39:42
    let mut _24: &MyType;                // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:39:16: 39:42
    let _25: &MyType;                    // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:39:16: 39:32
    let mut _26: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _27: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _28: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _29: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _31: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _32: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _34: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _35: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _36: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _37: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _38: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _39: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _41: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _42: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _7;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _8;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _13: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _13;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _27;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _28;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _33: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _33;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _5 = const {alloc1: &MyType};    // scope 0 at ui/consts/const-block-item-macro-codegen.rs:38:16: 38:32
                                         // mir::Constant
                                         // + span: ui/consts/const-block-item-macro-codegen.rs:38:16: 38:32
                                         // + literal: Const { ty: &MyType, val: Value(Scalar(alloc1)) }
        _4 = _5;                         // scope 0 at ui/consts/const-block-item-macro-codegen.rs:38:16: 38:41
        _3 = MyType::eval(move _4, const 10_usize) -> bb1; // scope 0 at ui/consts/const-block-item-macro-codegen.rs:38:16: 38:41
                                         // mir::Constant
                                         // + span: ui/consts/const-block-item-macro-codegen.rs:38:33: 38:37
                                         // + literal: Const { ty: for<'a> fn(&'a MyType, usize) -> usize {MyType::eval}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _42 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[1])) }
        _6 = _42;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _6);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_1.0: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_1.1: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = const 80_usize;            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _13 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<usize, usize>(move _15, move _16, move _18, move _20); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb3: {
        _25 = const {alloc2: &MyType};   // scope 0 at ui/consts/const-block-item-macro-codegen.rs:39:16: 39:32
                                         // mir::Constant
                                         // + span: ui/consts/const-block-item-macro-codegen.rs:39:16: 39:32
                                         // + literal: Const { ty: &MyType, val: Value(Scalar(alloc2)) }
        _24 = _25;                       // scope 0 at ui/consts/const-block-item-macro-codegen.rs:39:16: 39:42
        _23 = MyType::eval(move _24, const 100_usize) -> bb4; // scope 0 at ui/consts/const-block-item-macro-codegen.rs:39:16: 39:42
                                         // mir::Constant
                                         // + span: ui/consts/const-block-item-macro-codegen.rs:39:33: 39:37
                                         // + literal: Const { ty: for<'a> fn(&'a MyType, usize) -> usize {MyType::eval}, val: Value(<ZST>) }
    }

    bb4: {
        _22 = &_23;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _41 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _26 = _41;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _21 = (move _22, move _26);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _27 = (_21.0: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _28 = (_21.1: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _31 = (*_27);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _32 = const 500_usize;           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _30 = Eq(move _31, move _32);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _29 = Not(move _30);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _29) -> [0: bb6, otherwise: bb5]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _33 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = _27;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _36 = _37;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _39 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = _39;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _34 = core::panicking::assert_failed::<usize, usize>(move _35, move _36, move _38, move _40); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/consts/const-block-item-macro-codegen.rs:40:2: 40:2
    }
}

alloc2 (static: GENERATED_CODE_2, size: 32, align: 8) {
    0x00 │ ╾───────alloc10───────╼ 04 00 00 00 00 00 00 00 │ ╾──────╼........
    0x10 │ e8 03 00 00 00 00 00 00 ╾───────alloc8────────╼ │ ........╾──────╼
}

alloc10 (size: 4, align: 1) {
    74 65 73 74                                     │ test
}

alloc8 (fn: GENERATED_CODE_2::generated)

alloc1 (static: GENERATED_CODE_1, size: 32, align: 8) {
    0x00 │ ╾───────alloc6────────╼ 04 00 00 00 00 00 00 00 │ ╾──────╼........
    0x10 │ 64 00 00 00 00 00 00 00 ╾───────alloc4────────╼ │ d.......╾──────╼
}

alloc6 (size: 4, align: 1) {
    74 65 73 74                                     │ test
}

alloc4 (fn: GENERATED_CODE_1::generated)

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:39:44: 39:47

    bb0: {
        _1 = const 500_usize;            // scope 0 at ui/consts/const-block-item-macro-codegen.rs:39:44: 39:47
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/consts/const-block-item-macro-codegen.rs:38:43: 38:45

    bb0: {
        _1 = const 80_usize;             // scope 0 at ui/consts/const-block-item-macro-codegen.rs:38:43: 38:45
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
