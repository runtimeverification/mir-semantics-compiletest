// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const-block-item-macro-codegen.rs:13:1: 13:12>::eval(_1: &MyType, _2: usize) -> usize {
    debug self => _1;
    debug a => _2;
    let mut _0: usize;
    let mut _3: fn(usize, usize) -> usize;
    let mut _4: usize;

    bb0: {
        _3 = ((*_1).2: fn(usize, usize) -> usize);
        _4 = ((*_1).1: usize);
        _0 = move _3(move _4, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

static GENERATED_CODE_1: MyType = {
    let mut _0: MyType;
    let mut _1: fn(usize, usize) -> usize;

    bb0: {
        StorageLive(_1);
        _1 = GENERATED_CODE_1::generated as fn(usize, usize) -> usize (Pointer(ReifyFnPointer));
        _0 = MyType { desc: const "test", data: const 100_usize, code: move _1 };
        StorageDead(_1);
        return;
    }
}

fn GENERATED_CODE_1::generated(_1: usize, _2: usize) -> usize {
    debug a => _1;
    debug b => _2;
    let mut _0: usize;
    let mut _3: usize;

    bb0: {
        _3 = Mul(const 2_usize, _2);
        _0 = Sub(_1, move _3);
        return;
    }
}

static GENERATED_CODE_2: MyType = {
    let mut _0: MyType;
    let mut _1: fn(usize, usize) -> usize;

    bb0: {
        StorageLive(_1);
        _1 = GENERATED_CODE_2::generated as fn(usize, usize) -> usize (Pointer(ReifyFnPointer));
        _0 = MyType { desc: const "test", data: const 1000_usize, code: move _1 };
        StorageDead(_1);
        return;
    }
}

fn GENERATED_CODE_2::generated(_1: usize, _2: usize) -> usize {
    debug a => _1;
    debug b => _2;
    let mut _0: usize;
    let mut _3: usize;

    bb0: {
        _3 = Mul(const 5_usize, _2);
        _0 = Sub(_1, move _3);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let _4: &MyType;
    let _5: &usize;
    let _6: &usize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&usize, &usize);
    let mut _15: &usize;
    let _16: usize;
    let _17: &MyType;
    let _18: &usize;
    let _19: &usize;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: usize;
    let mut _23: usize;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: &usize;
    let mut _28: &usize;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }

    bb0: {
        _4 = const {alloc1: &MyType};
        _3 = MyType::eval(_4, const 10_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _28 = const _;
        _1 = (move _2, _28);
        _5 = (_1.0: &usize);
        _6 = (_1.1: &usize);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<usize, usize>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb3: {
        _17 = const {alloc2: &MyType};
        _16 = MyType::eval(_17, const 100_usize) -> [return: bb4, unwind continue];
    }

    bb4: {
        _15 = &_16;
        _27 = const _;
        _14 = (move _15, _27);
        _18 = (_14.0: &usize);
        _19 = (_14.1: &usize);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<usize, usize>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb6: {
        return;
    }
}

alloc2 (static: GENERATED_CODE_2, size: 32, align: 8) {
    0x00 │ ╾───────alloc24───────╼ 04 00 00 00 00 00 00 00 │ ╾──────╼........
    0x10 │ ╾───────alloc22───────╼ e8 03 00 00 00 00 00 00 │ ╾──────╼........
}

alloc24 (size: 4, align: 1) {
    74 65 73 74                                     │ test
}

alloc22 (fn: GENERATED_CODE_2::generated)

alloc1 (static: GENERATED_CODE_1, size: 32, align: 8) {
    0x00 │ ╾───────alloc20───────╼ 04 00 00 00 00 00 00 00 │ ╾──────╼........
    0x10 │ ╾───────alloc18───────╼ 64 00 00 00 00 00 00 00 │ ╾──────╼d.......
}

alloc20 (size: 4, align: 1) {
    74 65 73 74                                     │ test
}

alloc18 (fn: GENERATED_CODE_1::generated)

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 500_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 80_usize;
        _0 = &_1;
        return;
    }
}
