// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn type_name_wrapper(_1: &T) -> &str {
    let mut _0: &str;                    // return place in scope 0 at ui/consts/const-fn-type-name.rs:7:41: 7:53

    bb0: {
        _0 = std::intrinsics::type_name::<T>() -> bb1; // scope 0 at ui/consts/const-fn-type-name.rs:8:5: 8:39
                                         // mir::Constant
                                         // + span: ui/consts/const-fn-type-name.rs:8:5: 8:37
                                         // + literal: Const { ty: extern "rust-intrinsic" fn() -> &'static str {std::intrinsics::type_name::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-fn-type-name.rs:9:2: 9:2
    }
}

// MIR FOR CTFE
fn type_name_wrapper(_1: &T) -> &str {
    let mut _0: &str;                    // return place in scope 0 at ui/consts/const-fn-type-name.rs:7:41: 7:53

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-fn-type-name.rs:8:5: 8:39
        _0 = std::intrinsics::type_name::<T>() -> bb1; // scope 0 at ui/consts/const-fn-type-name.rs:8:5: 8:39
                                         // mir::Constant
                                         // + span: ui/consts/const-fn-type-name.rs:8:5: 8:37
                                         // + literal: Const { ty: extern "rust-intrinsic" fn() -> &'static str {std::intrinsics::type_name::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-fn-type-name.rs:9:2: 9:2
    }
}

const CONST_STRUCT: Struct<i8, f64, bool> = {
    let mut _0: Struct<i8, f64, bool>;   // return place in scope 0 at ui/consts/const-fn-type-name.rs:19:21: 19:40

    bb0: {
        _0 = Struct::<i8, f64, bool> { a: const 12_i8, b: const 13.699999999999999f64, c: const false }; // scope 0 at ui/consts/const-fn-type-name.rs:19:43: 23:2
        return;                          // scope 0 at ui/consts/const-fn-type-name.rs:19:1: 23:3
    }
}

const CONST_STRUCT_NAME: &str = {
    let mut _0: &str;                    // return place in scope 0 at ui/consts/const-fn-type-name.rs:25:26: 25:38
    let mut _1: &Struct<i8, f64, bool>;  // in scope 0 at ui/consts/const-fn-type-name.rs:25:59: 25:72
    let _2: &Struct<i8, f64, bool>;      // in scope 0 at ui/consts/const-fn-type-name.rs:25:59: 25:72
    let _3: Struct<i8, f64, bool>;       // in scope 0 at ui/consts/const-fn-type-name.rs:25:60: 25:72
    let mut _4: &Struct<i8, f64, bool>;  // in scope 0 at ui/consts/const-fn-type-name.rs:25:59: 25:72

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-fn-type-name.rs:25:59: 25:72
        StorageLive(_2);                 // scope 0 at ui/consts/const-fn-type-name.rs:25:59: 25:72
        _4 = const _;                    // scope 0 at ui/consts/const-fn-type-name.rs:25:59: 25:72
                                         // mir::Constant
                                         // + span: ui/consts/const-fn-type-name.rs:25:59: 25:72
                                         // + literal: Const { ty: &Struct<i8, f64, bool>, val: Unevaluated(CONST_STRUCT_NAME, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at ui/consts/const-fn-type-name.rs:25:59: 25:72
        _1 = &(*_2);                     // scope 0 at ui/consts/const-fn-type-name.rs:25:59: 25:72
        ConstEvalCounter;                // scope 0 at ui/consts/const-fn-type-name.rs:25:41: 25:73
        _0 = type_name_wrapper::<Struct<i8, f64, bool>>(move _1) -> bb1; // scope 0 at ui/consts/const-fn-type-name.rs:25:41: 25:73
                                         // mir::Constant
                                         // + span: ui/consts/const-fn-type-name.rs:25:41: 25:58
                                         // + literal: Const { ty: for<'a> fn(&'a Struct<i8, f64, bool>) -> &'static str {type_name_wrapper::<Struct<i8, f64, bool>>}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/consts/const-fn-type-name.rs:25:72: 25:73
        StorageDead(_1);                 // scope 0 at ui/consts/const-fn-type-name.rs:25:72: 25:73
        return;                          // scope 0 at ui/consts/const-fn-type-name.rs:25:1: 25:74
    }
}

promoted[0] in CONST_STRUCT_NAME: &Struct<i8, f64, bool> = {
    let mut _0: &Struct<i8, f64, bool>;  // return place in scope 0 at ui/consts/const-fn-type-name.rs:25:59: 25:72
    let mut _1: Struct<i8, f64, bool>;   // in scope 0 at ui/consts/const-fn-type-name.rs:25:60: 25:72

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-fn-type-name.rs:25:60: 25:72
                                         // mir::Constant
                                         // + span: ui/consts/const-fn-type-name.rs:25:60: 25:72
                                         // + literal: Const { ty: Struct<i8, f64, bool>, val: Unevaluated(CONST_STRUCT, [], None) }
        _0 = &_1;                        // scope 0 at ui/consts/const-fn-type-name.rs:25:59: 25:72
        return;                          // scope 0 at ui/consts/const-fn-type-name.rs:25:59: 25:72
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-fn-type-name.rs:27:11: 27:11
    let _1: Struct<i8, f64, bool>;       // in scope 0 at ui/consts/const-fn-type-name.rs:28:9: 28:25
    let mut _3: &Struct<i8, f64, bool>;  // in scope 0 at ui/consts/const-fn-type-name.rs:34:51: 34:68
    let _4: &Struct<i8, f64, bool>;      // in scope 0 at ui/consts/const-fn-type-name.rs:34:51: 34:68
    let mut _5: (&&str, &&str);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _6: &&str;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _7: &&str;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug non_const_struct => _1;    // in scope 1 at ui/consts/const-fn-type-name.rs:28:9: 28:25
        let _2: &str;                    // in scope 1 at ui/consts/const-fn-type-name.rs:34:9: 34:30
        scope 2 {
            debug non_const_struct_name => _2; // in scope 2 at ui/consts/const-fn-type-name.rs:34:9: 34:30
            let _8: &&str;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _9: &&str;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _22: &&str;          // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
            scope 3 {
                debug left_val => _8;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _9;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _14: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _14;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = Struct::<i8, f64, bool> { a: const 87_i8, b: const 65.989999999999995f64, c: const true }; // scope 0 at ui/consts/const-fn-type-name.rs:28:28: 32:6
        _4 = &_1;                        // scope 1 at ui/consts/const-fn-type-name.rs:34:51: 34:68
        _3 = _4;                         // scope 1 at ui/consts/const-fn-type-name.rs:34:51: 34:68
        _2 = type_name_wrapper::<Struct<i8, f64, bool>>(move _3) -> bb1; // scope 1 at ui/consts/const-fn-type-name.rs:34:33: 34:69
                                         // mir::Constant
                                         // + span: ui/consts/const-fn-type-name.rs:34:33: 34:50
                                         // + literal: Const { ty: for<'a> fn(&'a Struct<i8, f64, bool>) -> &'static str {type_name_wrapper::<Struct<i8, f64, bool>>}, val: Value(<ZST>) }
    }

    bb1: {
        _22 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[0])) }
        _6 = _22;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _7 = &_2;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _5 = (move _6, move _7);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_5.0: &&str);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_5.1: &&str);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = _8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = <&str as PartialEq>::eq(move _12, move _13) -> bb2; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = Not(move _11);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb4, otherwise: bb3]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _14 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = assert_failed::<&str, &str>(move _16, move _17, move _19, move _21); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/consts/const-fn-type-name.rs:37:2: 37:2
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &str;                    // in scope 0 at ui/consts/const-fn-type-name.rs:36:16: 36:33

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-fn-type-name.rs:36:16: 36:33
                                         // mir::Constant
                                         // + span: ui/consts/const-fn-type-name.rs:36:16: 36:33
                                         // + literal: Const { ty: &str, val: Unevaluated(CONST_STRUCT_NAME, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}
