// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const CONST_U8: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-needs_drop.rs:11:17: 11:21

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-needs_drop.rs:11:24: 11:47
        _0 = std::mem::needs_drop::<u8>() -> bb1; // scope 0 at ui/consts/const-needs_drop.rs:11:24: 11:47
                                         // mir::Constant
                                         // + span: ui/consts/const-needs_drop.rs:11:24: 11:45
                                         // + literal: Const { ty: fn() -> bool {std::mem::needs_drop::<u8>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-needs_drop.rs:11:1: 11:48
    }
}

const CONST_STRING: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-needs_drop.rs:12:21: 12:25

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-needs_drop.rs:12:28: 12:55
        _0 = std::mem::needs_drop::<String>() -> bb1; // scope 0 at ui/consts/const-needs_drop.rs:12:28: 12:55
                                         // mir::Constant
                                         // + span: ui/consts/const-needs_drop.rs:12:28: 12:53
                                         // + literal: Const { ty: fn() -> bool {std::mem::needs_drop::<String>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-needs_drop.rs:12:1: 12:56
    }
}

const CONST_TRIVIAL: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-needs_drop.rs:13:22: 13:26

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-needs_drop.rs:13:29: 13:57
        _0 = std::mem::needs_drop::<Trivial>() -> bb1; // scope 0 at ui/consts/const-needs_drop.rs:13:29: 13:57
                                         // mir::Constant
                                         // + span: ui/consts/const-needs_drop.rs:13:29: 13:55
                                         // + literal: Const { ty: fn() -> bool {std::mem::needs_drop::<Trivial>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-needs_drop.rs:13:1: 13:58
    }
}

const CONST_NON_TRIVIAL: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-needs_drop.rs:14:26: 14:30

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-needs_drop.rs:14:33: 14:64
        _0 = std::mem::needs_drop::<NonTrivial>() -> bb1; // scope 0 at ui/consts/const-needs_drop.rs:14:33: 14:64
                                         // mir::Constant
                                         // + span: ui/consts/const-needs_drop.rs:14:33: 14:62
                                         // + literal: Const { ty: fn() -> bool {std::mem::needs_drop::<NonTrivial>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-needs_drop.rs:14:1: 14:65
    }
}

static STATIC_U8: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-needs_drop.rs:16:19: 16:23

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-needs_drop.rs:16:26: 16:49
        _0 = std::mem::needs_drop::<u8>() -> bb1; // scope 0 at ui/consts/const-needs_drop.rs:16:26: 16:49
                                         // mir::Constant
                                         // + span: ui/consts/const-needs_drop.rs:16:26: 16:47
                                         // + literal: Const { ty: fn() -> bool {std::mem::needs_drop::<u8>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-needs_drop.rs:16:1: 16:50
    }
}

static STATIC_STRING: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-needs_drop.rs:17:23: 17:27

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-needs_drop.rs:17:30: 17:57
        _0 = std::mem::needs_drop::<String>() -> bb1; // scope 0 at ui/consts/const-needs_drop.rs:17:30: 17:57
                                         // mir::Constant
                                         // + span: ui/consts/const-needs_drop.rs:17:30: 17:55
                                         // + literal: Const { ty: fn() -> bool {std::mem::needs_drop::<String>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-needs_drop.rs:17:1: 17:58
    }
}

static STATIC_TRIVIAL: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-needs_drop.rs:18:24: 18:28

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-needs_drop.rs:18:31: 18:59
        _0 = std::mem::needs_drop::<Trivial>() -> bb1; // scope 0 at ui/consts/const-needs_drop.rs:18:31: 18:59
                                         // mir::Constant
                                         // + span: ui/consts/const-needs_drop.rs:18:31: 18:57
                                         // + literal: Const { ty: fn() -> bool {std::mem::needs_drop::<Trivial>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-needs_drop.rs:18:1: 18:60
    }
}

static STATIC_NON_TRIVIAL: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-needs_drop.rs:19:28: 19:32

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-needs_drop.rs:19:35: 19:66
        _0 = std::mem::needs_drop::<NonTrivial>() -> bb1; // scope 0 at ui/consts/const-needs_drop.rs:19:35: 19:66
                                         // mir::Constant
                                         // + span: ui/consts/const-needs_drop.rs:19:35: 19:64
                                         // + literal: Const { ty: fn() -> bool {std::mem::needs_drop::<NonTrivial>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-needs_drop.rs:19:1: 19:67
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-needs_drop.rs:21:11: 21:11

    bb0: {
        return;                          // scope 0 at ui/consts/const-needs_drop.rs:31:2: 31:2
    }
}

fn Trivial(_1: u8, _2: f32) -> Trivial {
    let mut _0: Trivial;                 // return place in scope 0 at ui/consts/const-needs_drop.rs:6:1: 6:15

    bb0: {
        _0 = Trivial(move _1, move _2);  // scope 0 at ui/consts/const-needs_drop.rs:6:1: 6:15
        return;                          // scope 0 at ui/consts/const-needs_drop.rs:6:1: 6:15
    }
}

// MIR FOR CTFE
fn Trivial(_1: u8, _2: f32) -> Trivial {
    let mut _0: Trivial;                 // return place in scope 0 at ui/consts/const-needs_drop.rs:6:1: 6:15

    bb0: {
        _0 = Trivial(move _1, move _2);  // scope 0 at ui/consts/const-needs_drop.rs:6:1: 6:15
        return;                          // scope 0 at ui/consts/const-needs_drop.rs:6:1: 6:15
    }
}

fn NonTrivial(_1: u8, _2: String) -> NonTrivial {
    let mut _0: NonTrivial;              // return place in scope 0 at ui/consts/const-needs_drop.rs:9:1: 9:18

    bb0: {
        _0 = NonTrivial(move _1, move _2); // scope 0 at ui/consts/const-needs_drop.rs:9:1: 9:18
        return;                          // scope 0 at ui/consts/const-needs_drop.rs:9:1: 9:18
    }
}

// MIR FOR CTFE
fn NonTrivial(_1: u8, _2: String) -> NonTrivial {
    let mut _0: NonTrivial;              // return place in scope 0 at ui/consts/const-needs_drop.rs:9:1: 9:18

    bb0: {
        _0 = NonTrivial(move _1, move _2); // scope 0 at ui/consts/const-needs_drop.rs:9:1: 9:18
        return;                          // scope 0 at ui/consts/const-needs_drop.rs:9:1: 9:18
    }
}
