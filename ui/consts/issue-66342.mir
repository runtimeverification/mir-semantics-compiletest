// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> [u8; 4398046511104] {
    let mut _0: [u8; 4398046511104];     // return place in scope 0 at ui/consts/issue-66342.rs:6:13: 6:48
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52

    bb0: {
        _1 = core::panicking::panic(const "not implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/issue-66342.rs:6:18: 6:47
    let mut _1: usize;                   // in scope 0 at ui/consts/issue-66342.rs:6:18: 6:40
    let mut _2: usize;                   // in scope 0 at ui/consts/issue-66342.rs:6:18: 6:33
    let mut _3: usize;                   // in scope 0 at ui/consts/issue-66342.rs:6:18: 6:26
    let mut _4: (usize, bool);           // in scope 0 at ui/consts/issue-66342.rs:6:18: 6:26
    let mut _5: (usize, bool);           // in scope 0 at ui/consts/issue-66342.rs:6:18: 6:33
    let mut _6: (usize, bool);           // in scope 0 at ui/consts/issue-66342.rs:6:18: 6:40
    let mut _7: (usize, bool);           // in scope 0 at ui/consts/issue-66342.rs:6:18: 6:47

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/issue-66342.rs:6:18: 6:40
        StorageLive(_2);                 // scope 0 at ui/consts/issue-66342.rs:6:18: 6:33
        StorageLive(_3);                 // scope 0 at ui/consts/issue-66342.rs:6:18: 6:26
        _4 = CheckedMul(const 4_usize, const 1024_usize); // scope 0 at ui/consts/issue-66342.rs:6:18: 6:26
        assert(!move (_4.1: bool), "attempt to compute `{} * {}`, which would overflow", const 4_usize, const 1024_usize) -> bb1; // scope 0 at ui/consts/issue-66342.rs:6:18: 6:26
    }

    bb1: {
        _3 = move (_4.0: usize);         // scope 0 at ui/consts/issue-66342.rs:6:18: 6:26
        _5 = CheckedMul(_3, const 1024_usize); // scope 0 at ui/consts/issue-66342.rs:6:18: 6:33
        assert(!move (_5.1: bool), "attempt to compute `{} * {}`, which would overflow", move _3, const 1024_usize) -> bb2; // scope 0 at ui/consts/issue-66342.rs:6:18: 6:33
    }

    bb2: {
        _2 = move (_5.0: usize);         // scope 0 at ui/consts/issue-66342.rs:6:18: 6:33
        StorageDead(_3);                 // scope 0 at ui/consts/issue-66342.rs:6:32: 6:33
        _6 = CheckedMul(_2, const 1024_usize); // scope 0 at ui/consts/issue-66342.rs:6:18: 6:40
        assert(!move (_6.1: bool), "attempt to compute `{} * {}`, which would overflow", move _2, const 1024_usize) -> bb3; // scope 0 at ui/consts/issue-66342.rs:6:18: 6:40
    }

    bb3: {
        _1 = move (_6.0: usize);         // scope 0 at ui/consts/issue-66342.rs:6:18: 6:40
        StorageDead(_2);                 // scope 0 at ui/consts/issue-66342.rs:6:39: 6:40
        _7 = CheckedMul(_1, const 1024_usize); // scope 0 at ui/consts/issue-66342.rs:6:18: 6:47
        assert(!move (_7.1: bool), "attempt to compute `{} * {}`, which would overflow", move _1, const 1024_usize) -> bb4; // scope 0 at ui/consts/issue-66342.rs:6:18: 6:47
    }

    bb4: {
        _0 = move (_7.0: usize);         // scope 0 at ui/consts/issue-66342.rs:6:18: 6:47
        StorageDead(_1);                 // scope 0 at ui/consts/issue-66342.rs:6:46: 6:47
        return;                          // scope 0 at ui/consts/issue-66342.rs:6:18: 6:47
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-66342.rs:10:11: 10:11
    let _1: [u8; 4398046511104];         // in scope 0 at ui/consts/issue-66342.rs:11:5: 11:10

    bb0: {
        _1 = foo() -> bb1;               // scope 0 at ui/consts/issue-66342.rs:11:5: 11:10
                                         // mir::Constant
                                         // + span: ui/consts/issue-66342.rs:11:5: 11:8
                                         // + literal: Const { ty: fn() -> [u8; 4 * 1024 * 1024 * 1024 * 1024] {foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/issue-66342.rs:12:2: 12:2
    }
}
