// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static C: E = {
    let mut _0: E;

    bb0: {
        _0 = E::S1 { u: const 23_usize };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: &E;
    let mut _2: isize;
    let mut _3: !;
    let _4: usize;
    let mut _5: (&usize, &usize);
    let mut _6: &usize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: usize;
    let mut _12: usize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug u => _4;
        let _7: &usize;
        let _8: &usize;
        let mut _16: &usize;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
    }

    bb0: {
        _1 = const {alloc1: &E};
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _4 = (((*_1) as S1).0: usize);
        _6 = &_4;
        _16 = const _;
        _5 = (move _6, _16);
        _7 = (_5.0: &usize);
        _8 = (_5.1: &usize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb5, otherwise: bb4];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb4: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<usize, usize>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb5: {
        return;
    }
}

alloc1 (static: C, size: 24, align: 8) {
    0x00 │ 00 00 00 00 00 00 00 00 17 00 00 00 00 00 00 00 │ ................
    0x10 │ __ __ __ __ __ __ __ __                         │ ░░░░░░░░
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 23_usize;
        _0 = &_1;
        return;
    }
}
