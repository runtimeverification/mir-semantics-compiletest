// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const count: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/issue-17756.rs:5:15: 5:20

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/consts/issue-17756.rs:5:23: 5:24
        return;                          // scope 0 at ui/consts/issue-17756.rs:5:1: 5:34
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-17756.rs:6:11: 6:11
    let _1: [usize; 4];                  // in scope 0 at ui/consts/issue-17756.rs:7:9: 7:15
    scope 1 {
        debug larger => _1;              // in scope 1 at ui/consts/issue-17756.rs:7:9: 7:15
    }

    bb0: {
        return;                          // scope 0 at ui/consts/issue-17756.rs:8:2: 8:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/issue-17756.rs:7:26: 7:33
    let mut _1: (usize, bool);           // in scope 0 at ui/consts/issue-17756.rs:7:26: 7:33

    bb0: {
        _1 = CheckedMul(const _, const 2_usize); // scope 0 at ui/consts/issue-17756.rs:7:26: 7:33
        assert(!move (_1.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, const 2_usize) -> bb1; // scope 0 at ui/consts/issue-17756.rs:7:26: 7:33
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/consts/issue-17756.rs:7:26: 7:33
        return;                          // scope 0 at ui/consts/issue-17756.rs:7:26: 7:33
    }
}
