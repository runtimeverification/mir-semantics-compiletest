// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const INVALID_BOOL: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:8:21: 8:23
    scope 1 {
        let _1: bool;                    // in scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:9:9: 9:11
        scope 2 {
            debug _x => _1;              // in scope 2 at ui/consts/extra-const-ub/detect-extra-ub.rs:9:9: 9:11
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:9:9: 9:11
        ConstEvalCounter;                // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:9:20: 9:34
        _1 = transmute::<u8, bool>(const 3_u8) -> bb1; // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:9:20: 9:34
                                         // mir::Constant
                                         // + span: ui/consts/extra-const-ub/detect-extra-ub.rs:9:20: 9:29
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(u8) -> bool {transmute::<u8, bool>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const ();                   // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:8:26: 12:2
        StorageDead(_1);                 // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:12:1: 12:2
        return;                          // scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:8:1: 12:3
    }
}

const INVALID_PTR_IN_INT: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:14:27: 14:29
    let mut _2: &u8;                     // in scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:15:31: 15:35
    let _3: u8;                          // in scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:15:32: 15:35
    scope 1 {
        let _1: usize;                   // in scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:15:9: 15:11
        let mut _4: &u8;                 // in scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:15:31: 15:35
        scope 2 {
            debug _x => _1;              // in scope 2 at ui/consts/extra-const-ub/detect-extra-ub.rs:15:9: 15:11
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:15:9: 15:11
        StorageLive(_2);                 // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:15:31: 15:35
        _4 = const _;                    // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:15:31: 15:35
                                         // mir::Constant
                                         // + span: ui/consts/extra-const-ub/detect-extra-ub.rs:15:31: 15:35
                                         // + literal: Const { ty: &u8, val: Unevaluated(INVALID_PTR_IN_INT, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:15:31: 15:35
        ConstEvalCounter;                // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:15:21: 15:36
        _1 = transmute::<&u8, usize>(move _2) -> bb1; // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:15:21: 15:36
                                         // mir::Constant
                                         // + span: ui/consts/extra-const-ub/detect-extra-ub.rs:15:21: 15:30
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&u8) -> usize {transmute::<&u8, usize>}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:15:35: 15:36
        _0 = const ();                   // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:14:32: 17:2
        StorageDead(_1);                 // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:17:1: 17:2
        return;                          // scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:14:1: 17:3
    }
}

promoted[0] in INVALID_PTR_IN_INT: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:15:31: 15:35
    let mut _1: u8;                      // in scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:15:32: 15:35

    bb0: {
        _1 = const 3_u8;                 // scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:15:32: 15:35
        _0 = &_1;                        // scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:15:31: 15:35
        return;                          // scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:15:31: 15:35
    }
}

const INVALID_SLICE_TO_USIZE_TRANSMUTE: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:19:41: 19:43
    let mut _2: &[u8; 32];               // in scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:20:20: 20:28
    let _3: &[u8; 32];                   // in scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:20:20: 20:28
    let _4: [u8; 32];                    // in scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:20:21: 20:28
    let mut _6: &[u8];                   // in scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:21:40: 21:41
    scope 1 {
        let _1: &[u8];                   // in scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:20:9: 20:10
        let mut _7: &[u8; 32];           // in scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:20:20: 20:28
        scope 2 {
            debug x => _1;               // in scope 2 at ui/consts/extra-const-ub/detect-extra-ub.rs:20:9: 20:10
            let _5: (usize, usize);      // in scope 2 at ui/consts/extra-const-ub/detect-extra-ub.rs:21:9: 21:11
            scope 3 {
                debug _x => _5;          // in scope 3 at ui/consts/extra-const-ub/detect-extra-ub.rs:21:9: 21:11
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:20:9: 20:10
        StorageLive(_2);                 // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:20:20: 20:28
        StorageLive(_3);                 // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:20:20: 20:28
        _7 = const _;                    // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:20:20: 20:28
                                         // mir::Constant
                                         // + span: ui/consts/extra-const-ub/detect-extra-ub.rs:20:20: 20:28
                                         // + literal: Const { ty: &[u8; 32], val: Unevaluated(INVALID_SLICE_TO_USIZE_TRANSMUTE, [], Some(promoted[0])) }
        _3 = &(*_7);                     // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:20:20: 20:28
        _2 = &(*_3);                     // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:20:20: 20:28
        _1 = move _2 as &[u8] (Pointer(Unsize)); // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:20:20: 20:28
        StorageDead(_2);                 // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:20:27: 20:28
        StorageDead(_3);                 // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:20:28: 20:29
        StorageLive(_5);                 // scope 2 at ui/consts/extra-const-ub/detect-extra-ub.rs:21:9: 21:11
        StorageLive(_6);                 // scope 2 at ui/consts/extra-const-ub/detect-extra-ub.rs:21:40: 21:41
        _6 = _1;                         // scope 2 at ui/consts/extra-const-ub/detect-extra-ub.rs:21:40: 21:41
        ConstEvalCounter;                // scope 2 at ui/consts/extra-const-ub/detect-extra-ub.rs:21:30: 21:42
        _5 = transmute::<&[u8], (usize, usize)>(move _6) -> bb1; // scope 2 at ui/consts/extra-const-ub/detect-extra-ub.rs:21:30: 21:42
                                         // mir::Constant
                                         // + span: ui/consts/extra-const-ub/detect-extra-ub.rs:21:30: 21:39
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8]) -> (usize, usize) {transmute::<&[u8], (usize, usize)>}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_6);                 // scope 2 at ui/consts/extra-const-ub/detect-extra-ub.rs:21:41: 21:42
        _0 = const ();                   // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:19:46: 23:2
        StorageDead(_5);                 // scope 2 at ui/consts/extra-const-ub/detect-extra-ub.rs:23:1: 23:2
        StorageDead(_1);                 // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:23:1: 23:2
        return;                          // scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:19:1: 23:3
    }
}

promoted[0] in INVALID_SLICE_TO_USIZE_TRANSMUTE: &[u8; 32] = {
    let mut _0: &[u8; 32];               // return place in scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:20:20: 20:28
    let mut _1: [u8; 32];                // in scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:20:21: 20:28

    bb0: {
        _1 = [const 0_u8; 32];           // scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:20:21: 20:28
        _0 = &_1;                        // scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:20:20: 20:28
        return;                          // scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:20:20: 20:28
    }
}

INVALID_SLICE_TO_USIZE_TRANSMUTE::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:20:25: 20:27

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:20:25: 20:27
        return;                          // scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:20:25: 20:27
    }
}

const UNALIGNED_PTR: () = {
    let mut _0: ();                      // return place in scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:25:22: 25:24
    let mut _2: &[u8; 4];                // in scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:26:30: 26:39
    let _3: [u8; 4];                     // in scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:26:31: 26:39
    scope 1 {
        let _1: &u32;                    // in scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:26:9: 26:11
        let mut _4: &[u8; 4];            // in scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:26:30: 26:39
        scope 2 {
            debug _x => _1;              // in scope 2 at ui/consts/extra-const-ub/detect-extra-ub.rs:26:9: 26:11
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:26:9: 26:11
        StorageLive(_2);                 // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:26:30: 26:39
        _4 = const _;                    // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:26:30: 26:39
                                         // mir::Constant
                                         // + span: ui/consts/extra-const-ub/detect-extra-ub.rs:26:30: 26:39
                                         // + literal: Const { ty: &[u8; 4], val: Unevaluated(UNALIGNED_PTR, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:26:30: 26:39
        ConstEvalCounter;                // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:26:20: 26:40
        _1 = transmute::<&[u8; 4], &u32>(move _2) -> bb1; // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:26:20: 26:40
                                         // mir::Constant
                                         // + span: ui/consts/extra-const-ub/detect-extra-ub.rs:26:20: 26:29
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&[u8; 4]) -> &u32 {transmute::<&[u8; 4], &u32>}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:26:39: 26:40
        _0 = const ();                   // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:25:27: 29:2
        StorageDead(_1);                 // scope 1 at ui/consts/extra-const-ub/detect-extra-ub.rs:29:1: 29:2
        return;                          // scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:25:1: 29:3
    }
}

promoted[0] in UNALIGNED_PTR: &[u8; 4] = {
    let mut _0: &[u8; 4];                // return place in scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:26:30: 26:39
    let mut _1: [u8; 4];                 // in scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:26:31: 26:39

    bb0: {
        _1 = [const 0_u8; 4];            // scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:26:31: 26:39
        _0 = &_1;                        // scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:26:30: 26:39
        return;                          // scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:26:30: 26:39
    }
}

UNALIGNED_PTR::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:26:37: 26:38

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:26:37: 26:38
        return;                          // scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:26:37: 26:38
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:31:11: 31:11

    bb0: {
        return;                          // scope 0 at ui/consts/extra-const-ub/detect-extra-ub.rs:31:13: 31:13
    }
}
