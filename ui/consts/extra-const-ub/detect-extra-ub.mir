// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const INVALID_BOOL: () = {
    let mut _0: ();
    scope 1 {
        let _1: bool;
        scope 2 {
            debug _x => _1;
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = const 3_u8 as bool (Transmute);
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

const INVALID_PTR_IN_INT: () = {
    let mut _0: ();
    let mut _2: &u8;
    let _3: u8;
    scope 1 {
        let _1: usize;
        let mut _4: &u8;
        scope 2 {
            debug _x => _1;
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = move _2 as usize (Transmute);
        StorageDead(_2);
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

promoted[0] in INVALID_PTR_IN_INT: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 3_u8;
        _0 = &_1;
        return;
    }
}

const INVALID_SLICE_TO_USIZE_TRANSMUTE: () = {
    let mut _0: ();
    let mut _2: &[u8; 32];
    let _3: &[u8; 32];
    let _4: [u8; 32];
    let mut _6: &[u8];
    scope 1 {
        let _1: &[u8];
        let mut _7: &[u8; 32];
        scope 2 {
            debug x => _1;
            let _5: (usize, usize);
            scope 3 {
                debug _x => _5;
            }
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _7 = const _;
        _3 = &(*_7);
        _2 = &(*_3);
        _1 = move _2 as &[u8] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _1;
        _5 = move _6 as (usize, usize) (Transmute);
        StorageDead(_6);
        _0 = const ();
        StorageDead(_5);
        StorageDead(_1);
        return;
    }
}

promoted[0] in INVALID_SLICE_TO_USIZE_TRANSMUTE: &[u8; 32] = {
    let mut _0: &[u8; 32];
    let mut _1: [u8; 32];

    bb0: {
        _1 = [const 0_u8; 32];
        _0 = &_1;
        return;
    }
}

INVALID_SLICE_TO_USIZE_TRANSMUTE::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 32_usize;
        return;
    }
}

const UNALIGNED_PTR: () = {
    let mut _0: ();
    let mut _2: &[u8; 4];
    let _3: [u8; 4];
    scope 1 {
        let _1: &u32;
        let mut _4: &[u8; 4];
        scope 2 {
            debug _x => _1;
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = move _2 as &u32 (Transmute);
        StorageDead(_2);
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

promoted[0] in UNALIGNED_PTR: &[u8; 4] = {
    let mut _0: &[u8; 4];
    let mut _1: [u8; 4];

    bb0: {
        _1 = [const 0_u8; 4];
        _0 = &_1;
        return;
    }
}

UNALIGNED_PTR::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
