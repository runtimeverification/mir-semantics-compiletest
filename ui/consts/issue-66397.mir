// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-66397.rs:6:11: 6:11

    bb0: {
        return;                          // scope 0 at ui/consts/issue-66397.rs:8:2: 8:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/issue-66397.rs:7:9: 7:38
    let mut _1: usize;                   // in scope 0 at ui/consts/issue-66397.rs:7:9: 7:31
    let mut _2: usize;                   // in scope 0 at ui/consts/issue-66397.rs:7:9: 7:24
    let mut _3: usize;                   // in scope 0 at ui/consts/issue-66397.rs:7:9: 7:17
    let mut _4: (usize, bool);           // in scope 0 at ui/consts/issue-66397.rs:7:9: 7:17
    let mut _5: (usize, bool);           // in scope 0 at ui/consts/issue-66397.rs:7:9: 7:24
    let mut _6: (usize, bool);           // in scope 0 at ui/consts/issue-66397.rs:7:9: 7:31
    let mut _7: (usize, bool);           // in scope 0 at ui/consts/issue-66397.rs:7:9: 7:38

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/issue-66397.rs:7:9: 7:31
        StorageLive(_2);                 // scope 0 at ui/consts/issue-66397.rs:7:9: 7:24
        StorageLive(_3);                 // scope 0 at ui/consts/issue-66397.rs:7:9: 7:17
        _4 = CheckedMul(const 4_usize, const 1024_usize); // scope 0 at ui/consts/issue-66397.rs:7:9: 7:17
        assert(!move (_4.1: bool), "attempt to compute `{} * {}`, which would overflow", const 4_usize, const 1024_usize) -> bb1; // scope 0 at ui/consts/issue-66397.rs:7:9: 7:17
    }

    bb1: {
        _3 = move (_4.0: usize);         // scope 0 at ui/consts/issue-66397.rs:7:9: 7:17
        _5 = CheckedMul(_3, const 1024_usize); // scope 0 at ui/consts/issue-66397.rs:7:9: 7:24
        assert(!move (_5.1: bool), "attempt to compute `{} * {}`, which would overflow", move _3, const 1024_usize) -> bb2; // scope 0 at ui/consts/issue-66397.rs:7:9: 7:24
    }

    bb2: {
        _2 = move (_5.0: usize);         // scope 0 at ui/consts/issue-66397.rs:7:9: 7:24
        StorageDead(_3);                 // scope 0 at ui/consts/issue-66397.rs:7:23: 7:24
        _6 = CheckedMul(_2, const 1024_usize); // scope 0 at ui/consts/issue-66397.rs:7:9: 7:31
        assert(!move (_6.1: bool), "attempt to compute `{} * {}`, which would overflow", move _2, const 1024_usize) -> bb3; // scope 0 at ui/consts/issue-66397.rs:7:9: 7:31
    }

    bb3: {
        _1 = move (_6.0: usize);         // scope 0 at ui/consts/issue-66397.rs:7:9: 7:31
        StorageDead(_2);                 // scope 0 at ui/consts/issue-66397.rs:7:30: 7:31
        _7 = CheckedMul(_1, const 1024_usize); // scope 0 at ui/consts/issue-66397.rs:7:9: 7:38
        assert(!move (_7.1: bool), "attempt to compute `{} * {}`, which would overflow", move _1, const 1024_usize) -> bb4; // scope 0 at ui/consts/issue-66397.rs:7:9: 7:38
    }

    bb4: {
        _0 = move (_7.0: usize);         // scope 0 at ui/consts/issue-66397.rs:7:9: 7:38
        StorageDead(_1);                 // scope 0 at ui/consts/issue-66397.rs:7:37: 7:38
        return;                          // scope 0 at ui/consts/issue-66397.rs:7:9: 7:38
    }
}
