// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/promoted-validation-55454.rs:4:10: 4:19>::eq(_1: &This<T>, _2: &This<T>) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: &T;
    let mut _4: &T;

    bb0: {
        _3 = &((*_1).0: T);
        _4 = &((*_2).0: T);
        _0 = <T as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: bool;
    let mut _2: &This<std::option::Option<&i32>>;
    let mut _3: &This<std::option::Option<&i32>>;

    bb0: {
        _3 = const _;
        _2 = const _;
        _1 = <This<Option<&i32>> as PartialEq>::eq(_3, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in main: &This<Option<&i32>> = {
    let mut _0: &This<std::option::Option<&i32>>;
    let mut _1: This<std::option::Option<&i32>>;
    let mut _2: std::option::Option<&i32>;
    let mut _3: &i32;
    let mut _4: &i32;
    let mut _5: i32;

    bb0: {
        _5 = const 1_i32;
        _4 = &_5;
        _3 = &(*_4);
        _2 = Option::<&i32>::Some(move _3);
        _1 = This::<Option<&i32>>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &This<Option<&i32>> = {
    let mut _0: &This<std::option::Option<&i32>>;
    let mut _1: This<std::option::Option<&i32>>;
    let mut _2: std::option::Option<&i32>;
    let mut _3: &i32;
    let mut _4: i32;

    bb0: {
        _4 = const 1_i32;
        _3 = &_4;
        _2 = Option::<&i32>::Some(move _3);
        _1 = This::<Option<&i32>>(move _2);
        _0 = &_1;
        return;
    }
}

fn This(_1: T) -> This<T> {
    let mut _0: This<T>;

    bb0: {
        _0 = This::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn This(_1: T) -> This<T> {
    let mut _0: This<T>;

    bb0: {
        _0 = This::<T>(move _1);
        return;
    }
}
