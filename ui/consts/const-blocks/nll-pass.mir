// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn constants::no_impl_copy_empty_value_no_elements() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:10:47: 10:47

    bb0: {
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:13:6: 13:6
    }
}

const constants::no_impl_copy_empty_value_no_elements::FOO: Option<Bar> = {
    let mut _0: std::option::Option<Bar>; // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:11:20: 11:31

    bb0: {
        _0 = Option::<Bar>::None;        // scope 0 at ui/consts/const-blocks/nll-pass.rs:11:34: 11:38
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:11:9: 11:39
    }
}

const constants::no_impl_copy_empty_value_no_elements::ARR: [Option<Bar>; 0] = {
    let mut _0: [std::option::Option<Bar>; 0]; // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:12:20: 12:36

    bb0: {
        _0 = [];                         // scope 0 at ui/consts/const-blocks/nll-pass.rs:12:39: 12:47
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:12:9: 12:48
    }
}

constants::no_impl_copy_empty_value_no_elements::ARR::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:12:34: 12:35

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:12:34: 12:35
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:12:34: 12:35
    }
}

constants::no_impl_copy_empty_value_no_elements::ARR::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:12:45: 12:46

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:12:45: 12:46
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:12:45: 12:46
    }
}

fn constants::no_impl_copy_empty_value_single_element() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:15:50: 15:50

    bb0: {
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:18:6: 18:6
    }
}

const constants::no_impl_copy_empty_value_single_element::FOO: Option<Bar> = {
    let mut _0: std::option::Option<Bar>; // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:16:20: 16:31

    bb0: {
        _0 = Option::<Bar>::None;        // scope 0 at ui/consts/const-blocks/nll-pass.rs:16:34: 16:38
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:16:9: 16:39
    }
}

const constants::no_impl_copy_empty_value_single_element::ARR: [Option<Bar>; 1] = {
    let mut _0: [std::option::Option<Bar>; 1]; // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:17:20: 17:36

    bb0: {
        _0 = [const _; 1];               // scope 0 at ui/consts/const-blocks/nll-pass.rs:17:39: 17:47
                                         // mir::Constant
                                         // + span: ui/consts/const-blocks/nll-pass.rs:17:40: 17:43
                                         // + literal: Const { ty: Option<Bar>, val: Unevaluated(constants::no_impl_copy_empty_value_single_element::FOO, [], None) }
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:17:9: 17:48
    }
}

constants::no_impl_copy_empty_value_single_element::ARR::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:17:34: 17:35

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:17:34: 17:35
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:17:34: 17:35
    }
}

constants::no_impl_copy_empty_value_single_element::ARR::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:17:45: 17:46

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:17:45: 17:46
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:17:45: 17:46
    }
}

fn no_impl_copy_empty_value_multiple_elements() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:20:53: 20:53

    bb0: {
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:23:6: 23:6
    }
}

const no_impl_copy_empty_value_multiple_elements::FOO: Option<Bar> = {
    let mut _0: std::option::Option<Bar>; // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:21:20: 21:31

    bb0: {
        _0 = Option::<Bar>::None;        // scope 0 at ui/consts/const-blocks/nll-pass.rs:21:34: 21:38
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:21:9: 21:39
    }
}

const no_impl_copy_empty_value_multiple_elements::ARR: [Option<Bar>; 2] = {
    let mut _0: [std::option::Option<Bar>; 2]; // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:22:20: 22:36

    bb0: {
        _0 = [const _; 2];               // scope 0 at ui/consts/const-blocks/nll-pass.rs:22:39: 22:47
                                         // mir::Constant
                                         // + span: ui/consts/const-blocks/nll-pass.rs:22:40: 22:43
                                         // + literal: Const { ty: Option<Bar>, val: Unevaluated(no_impl_copy_empty_value_multiple_elements::FOO, [], None) }
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:22:9: 22:48
    }
}

no_impl_copy_empty_value_multiple_elements::ARR::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:22:34: 22:35

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:22:34: 22:35
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:22:34: 22:35
    }
}

no_impl_copy_empty_value_multiple_elements::ARR::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:22:45: 22:46

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:22:45: 22:46
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:22:45: 22:46
    }
}

fn constants::no_impl_copy_value_no_elements() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:25:41: 25:41

    bb0: {
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:28:6: 28:6
    }
}

const constants::no_impl_copy_value_no_elements::FOO: Option<Bar> = {
    let mut _0: std::option::Option<Bar>; // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:26:20: 26:31
    let mut _1: Bar;                     // in scope 0 at ui/consts/const-blocks/nll-pass.rs:26:39: 26:42

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-blocks/nll-pass.rs:26:39: 26:42
        _1 = Bar;                        // scope 0 at ui/consts/const-blocks/nll-pass.rs:26:39: 26:42
        _0 = Option::<Bar>::Some(move _1); // scope 0 at ui/consts/const-blocks/nll-pass.rs:26:34: 26:43
        StorageDead(_1);                 // scope 0 at ui/consts/const-blocks/nll-pass.rs:26:42: 26:43
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:26:9: 26:44
    }
}

const constants::no_impl_copy_value_no_elements::ARR: [Option<Bar>; 0] = {
    let mut _0: [std::option::Option<Bar>; 0]; // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:27:20: 27:36

    bb0: {
        _0 = [];                         // scope 0 at ui/consts/const-blocks/nll-pass.rs:27:39: 27:47
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:27:9: 27:48
    }
}

constants::no_impl_copy_value_no_elements::ARR::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:27:34: 27:35

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:27:34: 27:35
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:27:34: 27:35
    }
}

constants::no_impl_copy_value_no_elements::ARR::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:27:45: 27:46

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:27:45: 27:46
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:27:45: 27:46
    }
}

fn constants::no_impl_copy_value_single_element() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:30:44: 30:44

    bb0: {
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:33:6: 33:6
    }
}

const constants::no_impl_copy_value_single_element::FOO: Option<Bar> = {
    let mut _0: std::option::Option<Bar>; // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:31:20: 31:31
    let mut _1: Bar;                     // in scope 0 at ui/consts/const-blocks/nll-pass.rs:31:39: 31:42

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-blocks/nll-pass.rs:31:39: 31:42
        _1 = Bar;                        // scope 0 at ui/consts/const-blocks/nll-pass.rs:31:39: 31:42
        _0 = Option::<Bar>::Some(move _1); // scope 0 at ui/consts/const-blocks/nll-pass.rs:31:34: 31:43
        StorageDead(_1);                 // scope 0 at ui/consts/const-blocks/nll-pass.rs:31:42: 31:43
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:31:9: 31:44
    }
}

const constants::no_impl_copy_value_single_element::ARR: [Option<Bar>; 1] = {
    let mut _0: [std::option::Option<Bar>; 1]; // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:32:20: 32:36

    bb0: {
        _0 = [const _; 1];               // scope 0 at ui/consts/const-blocks/nll-pass.rs:32:39: 32:47
                                         // mir::Constant
                                         // + span: ui/consts/const-blocks/nll-pass.rs:32:40: 32:43
                                         // + literal: Const { ty: Option<Bar>, val: Unevaluated(constants::no_impl_copy_value_single_element::FOO, [], None) }
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:32:9: 32:48
    }
}

constants::no_impl_copy_value_single_element::ARR::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:32:34: 32:35

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:32:34: 32:35
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:32:34: 32:35
    }
}

constants::no_impl_copy_value_single_element::ARR::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:32:45: 32:46

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:32:45: 32:46
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:32:45: 32:46
    }
}

fn no_impl_copy_value_multiple_elements() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:35:47: 35:47

    bb0: {
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:38:6: 38:6
    }
}

const no_impl_copy_value_multiple_elements::FOO: Option<Bar> = {
    let mut _0: std::option::Option<Bar>; // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:36:20: 36:31
    let mut _1: Bar;                     // in scope 0 at ui/consts/const-blocks/nll-pass.rs:36:39: 36:42

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/const-blocks/nll-pass.rs:36:39: 36:42
        _1 = Bar;                        // scope 0 at ui/consts/const-blocks/nll-pass.rs:36:39: 36:42
        _0 = Option::<Bar>::Some(move _1); // scope 0 at ui/consts/const-blocks/nll-pass.rs:36:34: 36:43
        StorageDead(_1);                 // scope 0 at ui/consts/const-blocks/nll-pass.rs:36:42: 36:43
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:36:9: 36:44
    }
}

const no_impl_copy_value_multiple_elements::ARR: [Option<Bar>; 2] = {
    let mut _0: [std::option::Option<Bar>; 2]; // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:37:20: 37:36

    bb0: {
        _0 = [const _; 2];               // scope 0 at ui/consts/const-blocks/nll-pass.rs:37:39: 37:47
                                         // mir::Constant
                                         // + span: ui/consts/const-blocks/nll-pass.rs:37:40: 37:43
                                         // + literal: Const { ty: Option<Bar>, val: Unevaluated(no_impl_copy_value_multiple_elements::FOO, [], None) }
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:37:9: 37:48
    }
}

no_impl_copy_value_multiple_elements::ARR::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:37:34: 37:35

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:37:34: 37:35
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:37:34: 37:35
    }
}

no_impl_copy_value_multiple_elements::ARR::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:37:45: 37:46

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:37:45: 37:46
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:37:45: 37:46
    }
}

fn constants::impl_copy_empty_value_no_elements() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:40:44: 40:44

    bb0: {
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:43:6: 43:6
    }
}

const constants::impl_copy_empty_value_no_elements::FOO: Option<u32> = {
    let mut _0: std::option::Option<u32>; // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:41:20: 41:31

    bb0: {
        _0 = Option::<u32>::None;        // scope 0 at ui/consts/const-blocks/nll-pass.rs:41:34: 41:38
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:41:9: 41:39
    }
}

const constants::impl_copy_empty_value_no_elements::ARR: [Option<u32>; 0] = {
    let mut _0: [std::option::Option<u32>; 0]; // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:42:20: 42:36

    bb0: {
        _0 = [];                         // scope 0 at ui/consts/const-blocks/nll-pass.rs:42:39: 42:47
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:42:9: 42:48
    }
}

constants::impl_copy_empty_value_no_elements::ARR::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:42:34: 42:35

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:42:34: 42:35
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:42:34: 42:35
    }
}

constants::impl_copy_empty_value_no_elements::ARR::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:42:45: 42:46

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:42:45: 42:46
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:42:45: 42:46
    }
}

fn constants::impl_copy_empty_value_one_element() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:45:44: 45:44

    bb0: {
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:48:6: 48:6
    }
}

const constants::impl_copy_empty_value_one_element::FOO: Option<u32> = {
    let mut _0: std::option::Option<u32>; // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:46:20: 46:31

    bb0: {
        _0 = Option::<u32>::None;        // scope 0 at ui/consts/const-blocks/nll-pass.rs:46:34: 46:38
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:46:9: 46:39
    }
}

const constants::impl_copy_empty_value_one_element::ARR: [Option<u32>; 1] = {
    let mut _0: [std::option::Option<u32>; 1]; // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:47:20: 47:36

    bb0: {
        _0 = [const _; 1];               // scope 0 at ui/consts/const-blocks/nll-pass.rs:47:39: 47:47
                                         // mir::Constant
                                         // + span: ui/consts/const-blocks/nll-pass.rs:47:40: 47:43
                                         // + literal: Const { ty: Option<u32>, val: Unevaluated(constants::impl_copy_empty_value_one_element::FOO, [], None) }
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:47:9: 47:48
    }
}

constants::impl_copy_empty_value_one_element::ARR::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:47:34: 47:35

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:47:34: 47:35
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:47:34: 47:35
    }
}

constants::impl_copy_empty_value_one_element::ARR::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:47:45: 47:46

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:47:45: 47:46
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:47:45: 47:46
    }
}

fn constants::impl_copy_empty_value_multiple_elements() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:50:50: 50:50

    bb0: {
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:53:6: 53:6
    }
}

const constants::impl_copy_empty_value_multiple_elements::FOO: Option<u32> = {
    let mut _0: std::option::Option<u32>; // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:51:20: 51:31

    bb0: {
        _0 = Option::<u32>::None;        // scope 0 at ui/consts/const-blocks/nll-pass.rs:51:34: 51:38
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:51:9: 51:39
    }
}

const constants::impl_copy_empty_value_multiple_elements::ARR: [Option<u32>; 2] = {
    let mut _0: [std::option::Option<u32>; 2]; // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:52:20: 52:36

    bb0: {
        _0 = [const _; 2];               // scope 0 at ui/consts/const-blocks/nll-pass.rs:52:39: 52:47
                                         // mir::Constant
                                         // + span: ui/consts/const-blocks/nll-pass.rs:52:40: 52:43
                                         // + literal: Const { ty: Option<u32>, val: Unevaluated(constants::impl_copy_empty_value_multiple_elements::FOO, [], None) }
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:52:9: 52:48
    }
}

constants::impl_copy_empty_value_multiple_elements::ARR::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:52:34: 52:35

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:52:34: 52:35
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:52:34: 52:35
    }
}

constants::impl_copy_empty_value_multiple_elements::ARR::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:52:45: 52:46

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:52:45: 52:46
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:52:45: 52:46
    }
}

fn constants::impl_copy_value_no_elements() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:55:38: 55:38

    bb0: {
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:58:6: 58:6
    }
}

const constants::impl_copy_value_no_elements::FOO: Option<u32> = {
    let mut _0: std::option::Option<u32>; // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:56:20: 56:31

    bb0: {
        _0 = Option::<u32>::Some(const 4_u32); // scope 0 at ui/consts/const-blocks/nll-pass.rs:56:34: 56:41
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:56:9: 56:42
    }
}

const constants::impl_copy_value_no_elements::ARR: [Option<u32>; 0] = {
    let mut _0: [std::option::Option<u32>; 0]; // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:57:20: 57:36

    bb0: {
        _0 = [];                         // scope 0 at ui/consts/const-blocks/nll-pass.rs:57:39: 57:47
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:57:9: 57:48
    }
}

constants::impl_copy_value_no_elements::ARR::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:57:34: 57:35

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:57:34: 57:35
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:57:34: 57:35
    }
}

constants::impl_copy_value_no_elements::ARR::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:57:45: 57:46

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:57:45: 57:46
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:57:45: 57:46
    }
}

fn constants::impl_copy_value_one_element() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:60:38: 60:38

    bb0: {
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:63:6: 63:6
    }
}

const constants::impl_copy_value_one_element::FOO: Option<u32> = {
    let mut _0: std::option::Option<u32>; // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:61:20: 61:31

    bb0: {
        _0 = Option::<u32>::Some(const 4_u32); // scope 0 at ui/consts/const-blocks/nll-pass.rs:61:34: 61:41
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:61:9: 61:42
    }
}

const constants::impl_copy_value_one_element::ARR: [Option<u32>; 1] = {
    let mut _0: [std::option::Option<u32>; 1]; // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:62:20: 62:36

    bb0: {
        _0 = [const _; 1];               // scope 0 at ui/consts/const-blocks/nll-pass.rs:62:39: 62:47
                                         // mir::Constant
                                         // + span: ui/consts/const-blocks/nll-pass.rs:62:40: 62:43
                                         // + literal: Const { ty: Option<u32>, val: Unevaluated(constants::impl_copy_value_one_element::FOO, [], None) }
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:62:9: 62:48
    }
}

constants::impl_copy_value_one_element::ARR::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:62:34: 62:35

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:62:34: 62:35
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:62:34: 62:35
    }
}

constants::impl_copy_value_one_element::ARR::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:62:45: 62:46

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:62:45: 62:46
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:62:45: 62:46
    }
}

fn constants::impl_copy_value_multiple_elements() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:65:44: 65:44

    bb0: {
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:68:6: 68:6
    }
}

const constants::impl_copy_value_multiple_elements::FOO: Option<u32> = {
    let mut _0: std::option::Option<u32>; // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:66:20: 66:31

    bb0: {
        _0 = Option::<u32>::Some(const 4_u32); // scope 0 at ui/consts/const-blocks/nll-pass.rs:66:34: 66:41
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:66:9: 66:42
    }
}

const constants::impl_copy_value_multiple_elements::ARR: [Option<u32>; 2] = {
    let mut _0: [std::option::Option<u32>; 2]; // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:67:20: 67:36

    bb0: {
        _0 = [const _; 2];               // scope 0 at ui/consts/const-blocks/nll-pass.rs:67:39: 67:47
                                         // mir::Constant
                                         // + span: ui/consts/const-blocks/nll-pass.rs:67:40: 67:43
                                         // + literal: Const { ty: Option<u32>, val: Unevaluated(constants::impl_copy_value_multiple_elements::FOO, [], None) }
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:67:9: 67:48
    }
}

constants::impl_copy_value_multiple_elements::ARR::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:67:34: 67:35

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:67:34: 67:35
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:67:34: 67:35
    }
}

constants::impl_copy_value_multiple_elements::ARR::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:67:45: 67:46

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:67:45: 67:46
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:67:45: 67:46
    }
}

fn non_constants::no_impl_copy_empty_value_no_elements() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:74:47: 74:47
    let _1: std::option::Option<Bar>;    // in scope 0 at ui/consts/const-blocks/nll-pass.rs:75:13: 75:14
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/const-blocks/nll-pass.rs:75:13: 75:14
        let _2: [std::option::Option<Bar>; 0]; // in scope 1 at ui/consts/const-blocks/nll-pass.rs:76:13: 76:16
        scope 2 {
            debug arr => _2;             // in scope 2 at ui/consts/const-blocks/nll-pass.rs:76:13: 76:16
        }
    }

    bb0: {
        _1 = const Option::<Bar>::None;  // scope 0 at ui/consts/const-blocks/nll-pass.rs:75:17: 75:21
                                         // mir::Constant
                                         // + span: ui/consts/const-blocks/nll-pass.rs:75:17: 75:21
                                         // + literal: Const { ty: Option<Bar>, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:77:6: 77:6
    }
}

non_constants::no_impl_copy_empty_value_no_elements::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:76:41: 76:42

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:76:41: 76:42
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:76:41: 76:42
    }
}

non_constants::no_impl_copy_empty_value_no_elements::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:76:32: 76:33

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:76:32: 76:33
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:76:32: 76:33
    }
}

fn non_constants::no_impl_copy_empty_value_single_element() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:79:50: 79:50
    let _1: std::option::Option<Bar>;    // in scope 0 at ui/consts/const-blocks/nll-pass.rs:80:13: 80:14
    let mut _3: std::option::Option<Bar>; // in scope 0 at ui/consts/const-blocks/nll-pass.rs:81:38: 81:39
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/const-blocks/nll-pass.rs:80:13: 80:14
        let _2: [std::option::Option<Bar>; 1]; // in scope 1 at ui/consts/const-blocks/nll-pass.rs:81:13: 81:16
        scope 2 {
            debug arr => _2;             // in scope 2 at ui/consts/const-blocks/nll-pass.rs:81:13: 81:16
        }
    }

    bb0: {
        _1 = const Option::<Bar>::None;  // scope 0 at ui/consts/const-blocks/nll-pass.rs:80:17: 80:21
                                         // mir::Constant
                                         // + span: ui/consts/const-blocks/nll-pass.rs:80:17: 80:21
                                         // + literal: Const { ty: Option<Bar>, val: Value(Scalar(0x00)) }
        _3 = const Option::<Bar>::None;  // scope 1 at ui/consts/const-blocks/nll-pass.rs:81:38: 81:39
                                         // mir::Constant
                                         // + span: ui/consts/const-blocks/nll-pass.rs:81:38: 81:39
                                         // + literal: Const { ty: Option<Bar>, val: Value(Scalar(0x00)) }
        _2 = [move _3; 1];               // scope 1 at ui/consts/const-blocks/nll-pass.rs:81:37: 81:43
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:82:6: 82:6
    }
}

non_constants::no_impl_copy_empty_value_single_element::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:81:41: 81:42

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:81:41: 81:42
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:81:41: 81:42
    }
}

non_constants::no_impl_copy_empty_value_single_element::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:81:32: 81:33

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:81:32: 81:33
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:81:32: 81:33
    }
}

fn non_constants::no_impl_copy_value_no_elements() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:84:41: 84:41
    let _1: std::option::Option<Bar>;    // in scope 0 at ui/consts/const-blocks/nll-pass.rs:85:13: 85:14
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/const-blocks/nll-pass.rs:85:13: 85:14
        let _2: [std::option::Option<Bar>; 0]; // in scope 1 at ui/consts/const-blocks/nll-pass.rs:86:13: 86:16
        scope 2 {
            debug arr => _2;             // in scope 2 at ui/consts/const-blocks/nll-pass.rs:86:13: 86:16
        }
    }

    bb0: {
        _1 = const Option::<Bar>::Some(Bar); // scope 0 at ui/consts/const-blocks/nll-pass.rs:85:17: 85:26
                                         // mir::Constant
                                         // + span: ui/consts/const-blocks/nll-pass.rs:85:17: 85:26
                                         // + literal: Const { ty: Option<Bar>, val: Value(Scalar(0x01)) }
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:87:6: 87:6
    }
}

non_constants::no_impl_copy_value_no_elements::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:86:41: 86:42

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:86:41: 86:42
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:86:41: 86:42
    }
}

non_constants::no_impl_copy_value_no_elements::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:86:32: 86:33

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:86:32: 86:33
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:86:32: 86:33
    }
}

fn non_constants::no_impl_copy_value_single_element() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:89:44: 89:44
    let _1: std::option::Option<Bar>;    // in scope 0 at ui/consts/const-blocks/nll-pass.rs:90:13: 90:14
    let mut _3: std::option::Option<Bar>; // in scope 0 at ui/consts/const-blocks/nll-pass.rs:91:38: 91:39
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/const-blocks/nll-pass.rs:90:13: 90:14
        let _2: [std::option::Option<Bar>; 1]; // in scope 1 at ui/consts/const-blocks/nll-pass.rs:91:13: 91:16
        scope 2 {
            debug arr => _2;             // in scope 2 at ui/consts/const-blocks/nll-pass.rs:91:13: 91:16
        }
    }

    bb0: {
        _1 = const Option::<Bar>::Some(Bar); // scope 0 at ui/consts/const-blocks/nll-pass.rs:90:17: 90:26
                                         // mir::Constant
                                         // + span: ui/consts/const-blocks/nll-pass.rs:90:17: 90:26
                                         // + literal: Const { ty: Option<Bar>, val: Value(Scalar(0x01)) }
        _3 = const Option::<Bar>::Some(Bar); // scope 1 at ui/consts/const-blocks/nll-pass.rs:91:38: 91:39
                                         // mir::Constant
                                         // + span: ui/consts/const-blocks/nll-pass.rs:91:38: 91:39
                                         // + literal: Const { ty: Option<Bar>, val: Value(Scalar(0x01)) }
        _2 = [move _3; 1];               // scope 1 at ui/consts/const-blocks/nll-pass.rs:91:37: 91:43
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:92:6: 92:6
    }
}

non_constants::no_impl_copy_value_single_element::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:91:41: 91:42

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:91:41: 91:42
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:91:41: 91:42
    }
}

non_constants::no_impl_copy_value_single_element::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:91:32: 91:33

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:91:32: 91:33
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:91:32: 91:33
    }
}

fn non_constants::impl_copy_empty_value_no_elements() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:94:44: 94:44
    let _1: std::option::Option<u32>;    // in scope 0 at ui/consts/const-blocks/nll-pass.rs:95:13: 95:14
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/const-blocks/nll-pass.rs:95:13: 95:14
        let _2: [std::option::Option<u32>; 0]; // in scope 1 at ui/consts/const-blocks/nll-pass.rs:96:13: 96:16
        scope 2 {
            debug arr => _2;             // in scope 2 at ui/consts/const-blocks/nll-pass.rs:96:13: 96:16
        }
    }

    bb0: {
        _1 = Option::<u32>::None;        // scope 0 at ui/consts/const-blocks/nll-pass.rs:95:30: 95:34
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:97:6: 97:6
    }
}

non_constants::impl_copy_empty_value_no_elements::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:96:41: 96:42

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:96:41: 96:42
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:96:41: 96:42
    }
}

non_constants::impl_copy_empty_value_no_elements::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:96:32: 96:33

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:96:32: 96:33
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:96:32: 96:33
    }
}

fn non_constants::impl_copy_empty_value_one_element() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:99:44: 99:44
    let _1: std::option::Option<u32>;    // in scope 0 at ui/consts/const-blocks/nll-pass.rs:100:13: 100:14
    let mut _3: std::option::Option<u32>; // in scope 0 at ui/consts/const-blocks/nll-pass.rs:101:38: 101:39
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/const-blocks/nll-pass.rs:100:13: 100:14
        let _2: [std::option::Option<u32>; 1]; // in scope 1 at ui/consts/const-blocks/nll-pass.rs:101:13: 101:16
        scope 2 {
            debug arr => _2;             // in scope 2 at ui/consts/const-blocks/nll-pass.rs:101:13: 101:16
        }
    }

    bb0: {
        _1 = Option::<u32>::None;        // scope 0 at ui/consts/const-blocks/nll-pass.rs:100:30: 100:34
        _3 = _1;                         // scope 1 at ui/consts/const-blocks/nll-pass.rs:101:38: 101:39
        _2 = [move _3; 1];               // scope 1 at ui/consts/const-blocks/nll-pass.rs:101:37: 101:43
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:102:6: 102:6
    }
}

non_constants::impl_copy_empty_value_one_element::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:101:41: 101:42

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:101:41: 101:42
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:101:41: 101:42
    }
}

non_constants::impl_copy_empty_value_one_element::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:101:32: 101:33

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:101:32: 101:33
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:101:32: 101:33
    }
}

fn non_constants::impl_copy_empty_value_multiple_elements() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:104:50: 104:50
    let _1: std::option::Option<u32>;    // in scope 0 at ui/consts/const-blocks/nll-pass.rs:105:13: 105:14
    let mut _3: std::option::Option<u32>; // in scope 0 at ui/consts/const-blocks/nll-pass.rs:106:38: 106:39
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/const-blocks/nll-pass.rs:105:13: 105:14
        let _2: [std::option::Option<u32>; 2]; // in scope 1 at ui/consts/const-blocks/nll-pass.rs:106:13: 106:16
        scope 2 {
            debug arr => _2;             // in scope 2 at ui/consts/const-blocks/nll-pass.rs:106:13: 106:16
        }
    }

    bb0: {
        _1 = Option::<u32>::None;        // scope 0 at ui/consts/const-blocks/nll-pass.rs:105:30: 105:34
        _3 = _1;                         // scope 1 at ui/consts/const-blocks/nll-pass.rs:106:38: 106:39
        _2 = [move _3; 2];               // scope 1 at ui/consts/const-blocks/nll-pass.rs:106:37: 106:43
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:107:6: 107:6
    }
}

non_constants::impl_copy_empty_value_multiple_elements::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:106:41: 106:42

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:106:41: 106:42
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:106:41: 106:42
    }
}

non_constants::impl_copy_empty_value_multiple_elements::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:106:32: 106:33

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:106:32: 106:33
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:106:32: 106:33
    }
}

fn non_constants::impl_copy_value_no_elements() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:109:38: 109:38
    let _1: std::option::Option<u32>;    // in scope 0 at ui/consts/const-blocks/nll-pass.rs:110:13: 110:14
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/const-blocks/nll-pass.rs:110:13: 110:14
        let _2: [std::option::Option<u32>; 0]; // in scope 1 at ui/consts/const-blocks/nll-pass.rs:111:13: 111:16
        scope 2 {
            debug arr => _2;             // in scope 2 at ui/consts/const-blocks/nll-pass.rs:111:13: 111:16
        }
    }

    bb0: {
        _1 = Option::<u32>::Some(const 4_u32); // scope 0 at ui/consts/const-blocks/nll-pass.rs:110:30: 110:37
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:112:6: 112:6
    }
}

non_constants::impl_copy_value_no_elements::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:111:41: 111:42

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:111:41: 111:42
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:111:41: 111:42
    }
}

non_constants::impl_copy_value_no_elements::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:111:32: 111:33

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:111:32: 111:33
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:111:32: 111:33
    }
}

fn non_constants::impl_copy_value_one_element() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:114:38: 114:38
    let _1: std::option::Option<u32>;    // in scope 0 at ui/consts/const-blocks/nll-pass.rs:115:13: 115:14
    let mut _3: std::option::Option<u32>; // in scope 0 at ui/consts/const-blocks/nll-pass.rs:116:38: 116:39
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/const-blocks/nll-pass.rs:115:13: 115:14
        let _2: [std::option::Option<u32>; 1]; // in scope 1 at ui/consts/const-blocks/nll-pass.rs:116:13: 116:16
        scope 2 {
            debug arr => _2;             // in scope 2 at ui/consts/const-blocks/nll-pass.rs:116:13: 116:16
        }
    }

    bb0: {
        _1 = Option::<u32>::Some(const 4_u32); // scope 0 at ui/consts/const-blocks/nll-pass.rs:115:30: 115:37
        _3 = _1;                         // scope 1 at ui/consts/const-blocks/nll-pass.rs:116:38: 116:39
        _2 = [move _3; 1];               // scope 1 at ui/consts/const-blocks/nll-pass.rs:116:37: 116:43
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:117:6: 117:6
    }
}

non_constants::impl_copy_value_one_element::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:116:41: 116:42

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:116:41: 116:42
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:116:41: 116:42
    }
}

non_constants::impl_copy_value_one_element::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:116:32: 116:33

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:116:32: 116:33
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:116:32: 116:33
    }
}

fn non_constants::impl_copy_value_multiple_elements() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:119:44: 119:44
    let _1: std::option::Option<u32>;    // in scope 0 at ui/consts/const-blocks/nll-pass.rs:120:13: 120:14
    let mut _3: std::option::Option<u32>; // in scope 0 at ui/consts/const-blocks/nll-pass.rs:121:38: 121:39
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/consts/const-blocks/nll-pass.rs:120:13: 120:14
        let _2: [std::option::Option<u32>; 2]; // in scope 1 at ui/consts/const-blocks/nll-pass.rs:121:13: 121:16
        scope 2 {
            debug arr => _2;             // in scope 2 at ui/consts/const-blocks/nll-pass.rs:121:13: 121:16
        }
    }

    bb0: {
        _1 = Option::<u32>::Some(const 4_u32); // scope 0 at ui/consts/const-blocks/nll-pass.rs:120:30: 120:37
        _3 = _1;                         // scope 1 at ui/consts/const-blocks/nll-pass.rs:121:38: 121:39
        _2 = [move _3; 2];               // scope 1 at ui/consts/const-blocks/nll-pass.rs:121:37: 121:43
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:122:6: 122:6
    }
}

non_constants::impl_copy_value_multiple_elements::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:121:41: 121:42

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:121:41: 121:42
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:121:41: 121:42
    }
}

non_constants::impl_copy_value_multiple_elements::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:121:32: 121:33

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/consts/const-blocks/nll-pass.rs:121:32: 121:33
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:121:32: 121:33
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/nll-pass.rs:125:11: 125:11

    bb0: {
        return;                          // scope 0 at ui/consts/const-blocks/nll-pass.rs:125:13: 125:13
    }
}
