// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const EMPTY: Vec<i32> = {
    let mut _0: std::vec::Vec<i32>;      // return place in scope 0 at ui/consts/const-blocks/const-repeat.rs:5:14: 5:22

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/consts/const-blocks/const-repeat.rs:5:25: 5:35
        _0 = Vec::<i32>::new() -> bb1;   // scope 0 at ui/consts/const-blocks/const-repeat.rs:5:25: 5:35
                                         // mir::Constant
                                         // + span: ui/consts/const-blocks/const-repeat.rs:5:25: 5:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<i32> {Vec::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-blocks/const-repeat.rs:5:1: 5:36
    }
}

fn bar() -> [Vec<i32>; 2] {
    let mut _0: [std::vec::Vec<i32>; 2]; // return place in scope 0 at ui/consts/const-blocks/const-repeat.rs:7:17: 7:30

    bb0: {
        _0 = [const _; 2];               // scope 0 at ui/consts/const-blocks/const-repeat.rs:8:5: 8:15
                                         // mir::Constant
                                         // + span: ui/consts/const-blocks/const-repeat.rs:8:6: 8:11
                                         // + literal: Const { ty: Vec<i32>, val: Unevaluated(EMPTY, [], None) }
        return;                          // scope 0 at ui/consts/const-blocks/const-repeat.rs:9:2: 9:2
    }
}

bar::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/const-repeat.rs:7:28: 7:29

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/consts/const-blocks/const-repeat.rs:7:28: 7:29
        return;                          // scope 0 at ui/consts/const-blocks/const-repeat.rs:7:28: 7:29
    }
}

bar::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/const-repeat.rs:8:13: 8:14

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/consts/const-blocks/const-repeat.rs:8:13: 8:14
        return;                          // scope 0 at ui/consts/const-blocks/const-repeat.rs:8:13: 8:14
    }
}

fn <impl at ui/consts/const-blocks/const-repeat.rs:13:1: 13:19>::drop(_1: &mut Bomb) -> () {
    debug self => _1;                    // in scope 0 at ui/consts/const-blocks/const-repeat.rs:14:13: 14:22
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/const-repeat.rs:14:24: 14:24
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38

    bb0: {
        _2 = begin_panic::<&str>(const "BOOM!"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/consts/const-blocks/const-repeat.rs:15:16: 15:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

const BOOM: Bomb = {
    let mut _0: Bomb;                    // return place in scope 0 at ui/consts/const-blocks/const-repeat.rs:19:13: 19:17

    bb0: {
        _0 = Bomb;                       // scope 0 at ui/consts/const-blocks/const-repeat.rs:19:20: 19:24
        return;                          // scope 0 at ui/consts/const-blocks/const-repeat.rs:19:1: 19:25
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/const-repeat.rs:21:11: 21:11
    let _1: [std::vec::Vec<i32>; 2];     // in scope 0 at ui/consts/const-blocks/const-repeat.rs:22:9: 22:11
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/consts/const-blocks/const-repeat.rs:22:9: 22:11
        let _2: [Bomb; 0];               // in scope 1 at ui/consts/const-blocks/const-repeat.rs:26:9: 26:11
        scope 2 {
            debug _x => _2;              // in scope 2 at ui/consts/const-blocks/const-repeat.rs:26:9: 26:11
        }
    }

    bb0: {
        _1 = bar() -> bb1;               // scope 0 at ui/consts/const-blocks/const-repeat.rs:22:14: 22:19
                                         // mir::Constant
                                         // + span: ui/consts/const-blocks/const-repeat.rs:22:14: 22:17
                                         // + literal: Const { ty: fn() -> [Vec<i32>; 2] {bar}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/consts/const-blocks/const-repeat.rs:27:1: 27:2
    }

    bb2: {
        return;                          // scope 0 at ui/consts/const-blocks/const-repeat.rs:27:2: 27:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/const-repeat.rs:26:21: 26:22

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/consts/const-blocks/const-repeat.rs:26:21: 26:22
        return;                          // scope 0 at ui/consts/const-blocks/const-repeat.rs:26:21: 26:22
    }
}
