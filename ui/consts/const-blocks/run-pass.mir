// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/consts/const-blocks/run-pass.rs:3:10: 3:15>::fmt(_1: &Bar, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/consts/const-blocks/run-pass.rs:3:10: 3:15
    debug f => _2;                       // in scope 0 at ui/consts/const-blocks/run-pass.rs:3:10: 3:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/consts/const-blocks/run-pass.rs:3:10: 3:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/consts/const-blocks/run-pass.rs:3:10: 3:15
    let mut _4: &str;                    // in scope 0 at ui/consts/const-blocks/run-pass.rs:3:10: 3:15
    let _5: &str;                        // in scope 0 at ui/consts/const-blocks/run-pass.rs:3:10: 3:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/consts/const-blocks/run-pass.rs:3:10: 3:15
        _5 = const "Bar";                // scope 0 at ui/consts/const-blocks/run-pass.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: ui/consts/const-blocks/run-pass.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/consts/const-blocks/run-pass.rs:3:10: 3:15
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/consts/const-blocks/run-pass.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: ui/consts/const-blocks/run-pass.rs:3:10: 3:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/consts/const-blocks/run-pass.rs:3:15: 3:15
    }
}

fn <impl at ui/consts/const-blocks/run-pass.rs:3:17: 3:19>::assert_receiver_is_total_eq(_1: &Bar) -> () {
    debug self => _1;                    // in scope 0 at ui/consts/const-blocks/run-pass.rs:3:17: 3:19
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/run-pass.rs:3:17: 3:19

    bb0: {
        return;                          // scope 0 at ui/consts/const-blocks/run-pass.rs:3:19: 3:19
    }
}

fn <impl at ui/consts/const-blocks/run-pass.rs:3:21: 3:30>::eq(_1: &Bar, _2: &Bar) -> bool {
    debug self => _1;                    // in scope 0 at ui/consts/const-blocks/run-pass.rs:3:21: 3:30
    debug other => _2;                   // in scope 0 at ui/consts/const-blocks/run-pass.rs:3:21: 3:30
    let mut _0: bool;                    // return place in scope 0 at ui/consts/const-blocks/run-pass.rs:3:21: 3:30

    bb0: {
        _0 = const true;                 // scope 0 at ui/consts/const-blocks/run-pass.rs:3:21: 3:30
        return;                          // scope 0 at ui/consts/const-blocks/run-pass.rs:3:30: 3:30
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-blocks/run-pass.rs:6:11: 6:11
    let mut _1: (&[std::option::Option<Bar>; 2], &[std::option::Option<Bar>; 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &[std::option::Option<Bar>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &[std::option::Option<Bar>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: &[std::option::Option<Bar>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _5: &[std::option::Option<Bar>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _6: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _8: &[std::option::Option<Bar>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _9: &[std::option::Option<Bar>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _11: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _12: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _13: &[std::option::Option<Bar>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _14: &[std::option::Option<Bar>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _15: &[std::option::Option<Bar>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _16: &[std::option::Option<Bar>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _18: &[std::option::Option<Bar>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _19: &[std::option::Option<Bar>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _4;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _5;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _10: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _10;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _19 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &[Option<Bar>; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _2 = _19;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _18 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[Option<Bar>; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _18;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _4 = (_1.0: &[std::option::Option<Bar>; 2]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _5 = (_1.1: &[std::option::Option<Bar>; 2]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _8 = _4;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _9 = _5;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _7 = <[Option<Bar>; 2] as PartialEq>::eq(move _8, move _9) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [Option<Bar>; 2], &'b [Option<Bar>; 2]) -> bool {<[Option<Bar>; 2] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = Not(move _7);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _6) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _10 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _12 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = _4;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _13 = _14;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _11 = core::panicking::assert_failed::<[Option<Bar>; 2], [Option<Bar>; 2]>(move _12, move _13, move _15, move _17); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [Option<Bar>; 2], &'b [Option<Bar>; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[Option<Bar>; 2], [Option<Bar>; 2]>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/consts/const-blocks/run-pass.rs:11:2: 11:2
    }
}

promoted[0] in main: &[Option<Bar>; 2] = {
    let mut _0: &[std::option::Option<Bar>; 2]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [std::option::Option<Bar>; 2]; // in scope 0 at ui/consts/const-blocks/run-pass.rs:10:21: 10:47
    let mut _2: std::option::Option<Bar>; // in scope 0 at ui/consts/const-blocks/run-pass.rs:10:22: 10:33
    let mut _3: std::option::Option<Bar>; // in scope 0 at ui/consts/const-blocks/run-pass.rs:10:35: 10:46

    bb0: {
        _2 = Option::<Bar>::None;        // scope 0 at ui/consts/const-blocks/run-pass.rs:10:22: 10:33
        _3 = Option::<Bar>::None;        // scope 0 at ui/consts/const-blocks/run-pass.rs:10:35: 10:46
        _1 = [move _2, move _3];         // scope 0 at ui/consts/const-blocks/run-pass.rs:10:21: 10:47
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &[Option<Bar>; 2] = {
    let mut _0: &[std::option::Option<Bar>; 2]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: [std::option::Option<Bar>; 2]; // in scope 0 at ui/consts/const-blocks/run-pass.rs:10:16: 10:19

    bb0: {
        _1 = const _;                    // scope 0 at ui/consts/const-blocks/run-pass.rs:10:16: 10:19
                                         // mir::Constant
                                         // + span: ui/consts/const-blocks/run-pass.rs:10:16: 10:19
                                         // + literal: Const { ty: [Option<Bar>; 2], val: Unevaluated(ARR, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

const FOO: Option<Bar> = {
    let mut _0: std::option::Option<Bar>; // return place in scope 0 at ui/consts/const-blocks/run-pass.rs:7:16: 7:27

    bb0: {
        _0 = Option::<Bar>::None;        // scope 0 at ui/consts/const-blocks/run-pass.rs:7:30: 7:34
        return;                          // scope 0 at ui/consts/const-blocks/run-pass.rs:7:5: 7:35
    }
}

const ARR: [Option<Bar>; 2] = {
    let mut _0: [std::option::Option<Bar>; 2]; // return place in scope 0 at ui/consts/const-blocks/run-pass.rs:8:16: 8:32

    bb0: {
        _0 = [const _; 2];               // scope 0 at ui/consts/const-blocks/run-pass.rs:8:35: 8:43
                                         // mir::Constant
                                         // + span: ui/consts/const-blocks/run-pass.rs:8:36: 8:39
                                         // + literal: Const { ty: Option<Bar>, val: Unevaluated(FOO, [], None) }
        return;                          // scope 0 at ui/consts/const-blocks/run-pass.rs:8:5: 8:44
    }
}

ARR::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/run-pass.rs:8:30: 8:31

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/consts/const-blocks/run-pass.rs:8:30: 8:31
        return;                          // scope 0 at ui/consts/const-blocks/run-pass.rs:8:30: 8:31
    }
}

ARR::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/const-blocks/run-pass.rs:8:41: 8:42

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/consts/const-blocks/run-pass.rs:8:41: 8:42
        return;                          // scope 0 at ui/consts/const-blocks/run-pass.rs:8:41: 8:42
    }
}
