// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const <impl at ui/consts/issue-65348.rs:5:1: 5:19>::ARRAY: [T; 0] = {
    let mut _0: [T; 0];

    bb0: {
        _0 = [];
        return;
    }
}

<impl at ui/consts/issue-65348.rs:5:1: 5:19>::ARRAY::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

const <impl at ui/consts/issue-65348.rs:5:1: 5:19>::NEWTYPE_ARRAY: Generic<[T; 0]> = {
    let mut _0: Generic<[T; 0]>;
    let mut _1: [T; 0];

    bb0: {
        StorageLive(_1);
        _1 = [];
        _0 = Generic::<[T; 0]>(move _1);
        StorageDead(_1);
        return;
    }
}

<impl at ui/consts/issue-65348.rs:5:1: 5:19>::NEWTYPE_ARRAY::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

const <impl at ui/consts/issue-65348.rs:5:1: 5:19>::ARRAY_FIELD: Generic<(i32, [T; 0])> = {
    let mut _0: Generic<(i32, [T; 0])>;
    let mut _1: (i32, [T; 0]);
    let mut _2: [T; 0];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = [];
        _1 = (const 0_i32, move _2);
        StorageDead(_2);
        _0 = Generic::<(i32, [T; 0])>(move _1);
        StorageDead(_1);
        return;
    }
}

<impl at ui/consts/issue-65348.rs:5:1: 5:19>::ARRAY_FIELD::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn array() -> &T {
    let mut _0: &T;
    let _1: usize;
    let mut _2: usize;
    let mut _3: bool;
    let mut _4: &[T; 0];

    bb0: {
        _1 = const 0_usize;
        _2 = const 0_usize;
        _3 = Lt(_1, _2);
        assert(move _3, "index out of bounds: the length is {} but the index is {}", move _2, _1) -> [success: bb1, unwind continue];
    }

    bb1: {
        _4 = const _;
        _0 = &(*_4)[_1];
        return;
    }
}

promoted[0] in array: &[T; 0] = {
    let mut _0: &[T; 0];
    let mut _1: [T; 0];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

// MIR FOR CTFE
fn array() -> &T {
    let mut _0: &T;
    let _1: &T;
    let _2: [T; 0];
    let _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: &[T; 0];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const _;
        StorageLive(_3);
        _3 = const 0_usize;
        _4 = Len(_2);
        _5 = Lt(_3, _4);
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> [success: bb1, unwind continue];
    }

    bb1: {
        _6 = const _;
        _1 = &(*_6)[_3];
        _0 = &(*_1);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn newtype_array() -> &T {
    let mut _0: &T;
    let _1: usize;
    let mut _2: usize;
    let mut _3: bool;
    let mut _4: &Generic<[T; 0]>;

    bb0: {
        _1 = const 0_usize;
        _2 = const 0_usize;
        _3 = Lt(_1, _2);
        assert(move _3, "index out of bounds: the length is {} but the index is {}", move _2, _1) -> [success: bb1, unwind continue];
    }

    bb1: {
        _4 = const _;
        _0 = &((*_4).0: [T; 0])[_1];
        return;
    }
}

promoted[0] in newtype_array: &Generic<[T; 0]> = {
    let mut _0: &Generic<[T; 0]>;
    let mut _1: Generic<[T; 0]>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

// MIR FOR CTFE
fn newtype_array() -> &T {
    let mut _0: &T;
    let _1: &T;
    let _2: Generic<[T; 0]>;
    let _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: &Generic<[T; 0]>;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const _;
        StorageLive(_3);
        _3 = const 0_usize;
        _4 = Len((_2.0: [T; 0]));
        _5 = Lt(_3, _4);
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> [success: bb1, unwind continue];
    }

    bb1: {
        _6 = const _;
        _1 = &((*_6).0: [T; 0])[_3];
        _0 = &(*_1);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn array_field() -> &T {
    let mut _0: &T;
    let _1: usize;
    let mut _2: usize;
    let mut _3: bool;
    let mut _4: &Generic<(i32, [T; 0])>;

    bb0: {
        _1 = const 0_usize;
        _2 = const 0_usize;
        _3 = Lt(_1, _2);
        assert(move _3, "index out of bounds: the length is {} but the index is {}", move _2, _1) -> [success: bb1, unwind continue];
    }

    bb1: {
        _4 = const _;
        _0 = &(((*_4).0: (i32, [T; 0])).1: [T; 0])[_1];
        return;
    }
}

promoted[0] in array_field: &Generic<(i32, [T; 0])> = {
    let mut _0: &Generic<(i32, [T; 0])>;
    let mut _1: Generic<(i32, [T; 0])>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

// MIR FOR CTFE
fn array_field() -> &T {
    let mut _0: &T;
    let _1: &T;
    let _2: Generic<(i32, [T; 0])>;
    let _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: &Generic<(i32, [T; 0])>;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const _;
        StorageLive(_3);
        _3 = const 0_usize;
        _4 = Len(((_2.0: (i32, [T; 0])).1: [T; 0]));
        _5 = Lt(_3, _4);
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> [success: bb1, unwind continue];
    }

    bb1: {
        _6 = const _;
        _1 = &(((*_6).0: (i32, [T; 0])).1: [T; 0])[_3];
        _0 = &(*_1);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Generic(_1: T) -> Generic<T> {
    let mut _0: Generic<T>;

    bb0: {
        _0 = Generic::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Generic(_1: T) -> Generic<T> {
    let mut _0: Generic<T>;

    bb0: {
        _0 = Generic::<T>(move _1);
        return;
    }
}
