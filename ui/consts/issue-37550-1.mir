// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn x() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-37550-1.rs:3:14: 3:14
    let _1: bool;                        // in scope 0 at ui/consts/issue-37550-1.rs:4:9: 4:10
    let mut _3: &bool;                   // in scope 0 at ui/consts/issue-37550-1.rs:5:13: 5:17
    scope 1 {
        debug t => _1;                   // in scope 1 at ui/consts/issue-37550-1.rs:4:9: 4:10
        let _2: [closure@ui/consts/issue-37550-1.rs:5:13: 5:15]; // in scope 1 at ui/consts/issue-37550-1.rs:5:9: 5:10
        scope 2 {
            debug x => _2;               // in scope 2 at ui/consts/issue-37550-1.rs:5:9: 5:10
        }
    }

    bb0: {
        _1 = const true;                 // scope 0 at ui/consts/issue-37550-1.rs:4:13: 4:17
        _3 = &_1;                        // scope 1 at ui/consts/issue-37550-1.rs:5:13: 5:17
        _2 = [closure@ui/consts/issue-37550-1.rs:5:13: 5:15] { t: move _3 }; // scope 1 at ui/consts/issue-37550-1.rs:5:13: 5:17
                                         // closure
                                         // + def_id: DefId(0:4 ~ issue_37550_1[a2ad]::x::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> bool,
                                         //     (&bool,),
                                         // ]
        return;                          // scope 0 at ui/consts/issue-37550-1.rs:6:2: 6:2
    }
}

// MIR FOR CTFE
fn x() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-37550-1.rs:3:14: 3:14
    let _1: bool;                        // in scope 0 at ui/consts/issue-37550-1.rs:4:9: 4:10
    let mut _3: &bool;                   // in scope 0 at ui/consts/issue-37550-1.rs:5:13: 5:17
    scope 1 {
        debug t => _1;                   // in scope 1 at ui/consts/issue-37550-1.rs:4:9: 4:10
        let _2: [closure@ui/consts/issue-37550-1.rs:5:13: 5:15]; // in scope 1 at ui/consts/issue-37550-1.rs:5:9: 5:10
        scope 2 {
            debug x => _2;               // in scope 2 at ui/consts/issue-37550-1.rs:5:9: 5:10
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/issue-37550-1.rs:4:9: 4:10
        _1 = const true;                 // scope 0 at ui/consts/issue-37550-1.rs:4:13: 4:17
        StorageLive(_2);                 // scope 1 at ui/consts/issue-37550-1.rs:5:9: 5:10
        StorageLive(_3);                 // scope 1 at ui/consts/issue-37550-1.rs:5:13: 5:17
        _3 = &_1;                        // scope 1 at ui/consts/issue-37550-1.rs:5:13: 5:17
        _2 = [closure@ui/consts/issue-37550-1.rs:5:13: 5:15] { t: move _3 }; // scope 1 at ui/consts/issue-37550-1.rs:5:13: 5:17
                                         // closure
                                         // + def_id: DefId(0:4 ~ issue_37550_1[a2ad]::x::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> bool,
                                         //     (&bool,),
                                         // ]
        StorageDead(_3);                 // scope 1 at ui/consts/issue-37550-1.rs:5:14: 5:15
        _0 = const ();                   // scope 0 at ui/consts/issue-37550-1.rs:3:14: 6:2
        StorageDead(_2);                 // scope 1 at ui/consts/issue-37550-1.rs:6:1: 6:2
        StorageDead(_1);                 // scope 0 at ui/consts/issue-37550-1.rs:6:1: 6:2
        return;                          // scope 0 at ui/consts/issue-37550-1.rs:6:2: 6:2
    }
}

fn x::{closure#0}(_1: &[closure@ui/consts/issue-37550-1.rs:5:13: 5:15]) -> bool {
    debug t => (*((*_1).0: &bool));      // in scope 0 at ui/consts/issue-37550-1.rs:4:9: 4:10
    let mut _0: bool;                    // return place in scope 0 at ui/consts/issue-37550-1.rs:5:16: 5:16
    let mut _2: &bool;                   // in scope 0 at ui/consts/issue-37550-1.rs:5:13: 5:17

    bb0: {
        _2 = deref_copy ((*_1).0: &bool); // scope 0 at ui/consts/issue-37550-1.rs:5:16: 5:17
        _0 = (*_2);                      // scope 0 at ui/consts/issue-37550-1.rs:5:16: 5:17
        return;                          // scope 0 at ui/consts/issue-37550-1.rs:5:17: 5:17
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-37550-1.rs:8:11: 8:11

    bb0: {
        return;                          // scope 0 at ui/consts/issue-37550-1.rs:8:13: 8:13
    }
}
