// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const C: *const u8 = {
    let mut _0: *const u8;               // return place in scope 0 at ui/consts/issue-34784.rs:5:10: 5:19
    let _1: &u8;                         // in scope 0 at ui/consts/issue-34784.rs:5:22: 5:24
    let _2: u8;                          // in scope 0 at ui/consts/issue-34784.rs:5:23: 5:24
    let mut _3: &u8;                     // in scope 0 at ui/consts/issue-34784.rs:5:22: 5:24

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/issue-34784.rs:5:22: 5:24
        _3 = const _;                    // scope 0 at ui/consts/issue-34784.rs:5:22: 5:24
                                         // mir::Constant
                                         // + span: ui/consts/issue-34784.rs:5:22: 5:24
                                         // + literal: Const { ty: &u8, val: Unevaluated(C, [], Some(promoted[0])) }
        _1 = &(*_3);                     // scope 0 at ui/consts/issue-34784.rs:5:22: 5:24
        _0 = &raw const (*_1);           // scope 0 at ui/consts/issue-34784.rs:5:22: 5:24
        StorageDead(_1);                 // scope 0 at ui/consts/issue-34784.rs:5:23: 5:24
        return;                          // scope 0 at ui/consts/issue-34784.rs:5:1: 5:25
    }
}

promoted[0] in C: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/consts/issue-34784.rs:5:22: 5:24
    let mut _1: u8;                      // in scope 0 at ui/consts/issue-34784.rs:5:23: 5:24

    bb0: {
        _1 = const 0_u8;                 // scope 0 at ui/consts/issue-34784.rs:5:23: 5:24
        _0 = &_1;                        // scope 0 at ui/consts/issue-34784.rs:5:22: 5:24
        return;                          // scope 0 at ui/consts/issue-34784.rs:5:22: 5:24
    }
}

fn foo(_1: *const u8) -> () {
    debug x => _1;                       // in scope 0 at ui/consts/issue-34784.rs:7:8: 7:9
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-34784.rs:7:22: 7:22

    bb0: {
        return;                          // scope 0 at ui/consts/issue-34784.rs:12:2: 12:2
    }
}

const D: *const [u8; 4] = {
    let mut _0: *const [u8; 4];          // return place in scope 0 at ui/consts/issue-34784.rs:14:10: 14:24
    let _1: &[u8; 4];                    // in scope 0 at ui/consts/issue-34784.rs:14:27: 14:34

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/consts/issue-34784.rs:14:27: 14:34
        _1 = const b"abcd";              // scope 0 at ui/consts/issue-34784.rs:14:27: 14:34
                                         // mir::Constant
                                         // + span: ui/consts/issue-34784.rs:14:27: 14:34
                                         // + literal: Const { ty: &[u8; 4], val: Value(Scalar(alloc4)) }
        _0 = &raw const (*_1);           // scope 0 at ui/consts/issue-34784.rs:14:27: 14:34
        StorageDead(_1);                 // scope 0 at ui/consts/issue-34784.rs:14:33: 14:34
        return;                          // scope 0 at ui/consts/issue-34784.rs:14:1: 14:35
    }
}

alloc4 (size: 4, align: 1) {
    61 62 63 64                                     â”‚ abcd
}

D::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/consts/issue-34784.rs:14:22: 14:23

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/consts/issue-34784.rs:14:22: 14:23
        return;                          // scope 0 at ui/consts/issue-34784.rs:14:22: 14:23
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/issue-34784.rs:16:11: 16:11

    bb0: {
        return;                          // scope 0 at ui/consts/issue-34784.rs:21:2: 21:2
    }
}
