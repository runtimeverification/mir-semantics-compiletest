// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn i(_1: (u32, u32)) -> u32 {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const-fn-destructuring-arg.rs:3:35: 3:38
    let _2: u32;                         // in scope 0 at ui/consts/const-fn-destructuring-arg.rs:3:13: 3:14
    let _3: u32;                         // in scope 0 at ui/consts/const-fn-destructuring-arg.rs:3:16: 3:17
    let mut _4: u32;                     // in scope 0 at ui/consts/const-fn-destructuring-arg.rs:4:5: 4:6
    let mut _5: u32;                     // in scope 0 at ui/consts/const-fn-destructuring-arg.rs:4:9: 4:10
    let mut _6: (u32, bool);             // in scope 0 at ui/consts/const-fn-destructuring-arg.rs:4:5: 4:10
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const-fn-destructuring-arg.rs:3:13: 3:14
        debug b => _3;                   // in scope 1 at ui/consts/const-fn-destructuring-arg.rs:3:16: 3:17
    }

    bb0: {
        _2 = (_1.0: u32);                // scope 0 at ui/consts/const-fn-destructuring-arg.rs:3:13: 3:14
        _3 = (_1.1: u32);                // scope 0 at ui/consts/const-fn-destructuring-arg.rs:3:16: 3:17
        _4 = _2;                         // scope 1 at ui/consts/const-fn-destructuring-arg.rs:4:5: 4:6
        _5 = _3;                         // scope 1 at ui/consts/const-fn-destructuring-arg.rs:4:9: 4:10
        _6 = CheckedAdd(_4, _5);         // scope 1 at ui/consts/const-fn-destructuring-arg.rs:4:5: 4:10
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> bb1; // scope 1 at ui/consts/const-fn-destructuring-arg.rs:4:5: 4:10
    }

    bb1: {
        _0 = move (_6.0: u32);           // scope 1 at ui/consts/const-fn-destructuring-arg.rs:4:5: 4:10
        return;                          // scope 0 at ui/consts/const-fn-destructuring-arg.rs:5:2: 5:2
    }
}

// MIR FOR CTFE
fn i(_1: (u32, u32)) -> u32 {
    let mut _0: u32;                     // return place in scope 0 at ui/consts/const-fn-destructuring-arg.rs:3:35: 3:38
    let _2: u32;                         // in scope 0 at ui/consts/const-fn-destructuring-arg.rs:3:13: 3:14
    let _3: u32;                         // in scope 0 at ui/consts/const-fn-destructuring-arg.rs:3:16: 3:17
    let mut _4: u32;                     // in scope 0 at ui/consts/const-fn-destructuring-arg.rs:4:5: 4:6
    let mut _5: u32;                     // in scope 0 at ui/consts/const-fn-destructuring-arg.rs:4:9: 4:10
    let mut _6: (u32, bool);             // in scope 0 at ui/consts/const-fn-destructuring-arg.rs:4:5: 4:10
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/consts/const-fn-destructuring-arg.rs:3:13: 3:14
        debug b => _3;                   // in scope 1 at ui/consts/const-fn-destructuring-arg.rs:3:16: 3:17
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/consts/const-fn-destructuring-arg.rs:3:13: 3:14
        _2 = (_1.0: u32);                // scope 0 at ui/consts/const-fn-destructuring-arg.rs:3:13: 3:14
        StorageLive(_3);                 // scope 0 at ui/consts/const-fn-destructuring-arg.rs:3:16: 3:17
        _3 = (_1.1: u32);                // scope 0 at ui/consts/const-fn-destructuring-arg.rs:3:16: 3:17
        StorageLive(_4);                 // scope 1 at ui/consts/const-fn-destructuring-arg.rs:4:5: 4:6
        _4 = _2;                         // scope 1 at ui/consts/const-fn-destructuring-arg.rs:4:5: 4:6
        StorageLive(_5);                 // scope 1 at ui/consts/const-fn-destructuring-arg.rs:4:9: 4:10
        _5 = _3;                         // scope 1 at ui/consts/const-fn-destructuring-arg.rs:4:9: 4:10
        _6 = CheckedAdd(_4, _5);         // scope 1 at ui/consts/const-fn-destructuring-arg.rs:4:5: 4:10
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> bb1; // scope 1 at ui/consts/const-fn-destructuring-arg.rs:4:5: 4:10
    }

    bb1: {
        _0 = move (_6.0: u32);           // scope 1 at ui/consts/const-fn-destructuring-arg.rs:4:5: 4:10
        StorageDead(_5);                 // scope 1 at ui/consts/const-fn-destructuring-arg.rs:4:9: 4:10
        StorageDead(_4);                 // scope 1 at ui/consts/const-fn-destructuring-arg.rs:4:9: 4:10
        StorageDead(_3);                 // scope 0 at ui/consts/const-fn-destructuring-arg.rs:5:1: 5:2
        StorageDead(_2);                 // scope 0 at ui/consts/const-fn-destructuring-arg.rs:5:1: 5:2
        return;                          // scope 0 at ui/consts/const-fn-destructuring-arg.rs:5:2: 5:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/consts/const-fn-destructuring-arg.rs:7:11: 7:11

    bb0: {
        return;                          // scope 0 at ui/consts/const-fn-destructuring-arg.rs:7:13: 7:13
    }
}
