// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: isize) -> isize {
    debug x => _1;                       // in scope 0 at ui/fact.rs:3:6: 3:7
    let mut _0: isize;                   // return place in scope 0 at ui/fact.rs:3:19: 3:24
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/fact.rs:6:14: 6:18
    let mut _5: &[&str; 2];              // in scope 0 at ui/fact.rs:6:14: 6:18
    let _6: &[&str; 2];                  // in scope 0 at ui/fact.rs:6:14: 6:18
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fact.rs:6:20: 6:21
    let mut _12: &isize;                 // in scope 0 at ui/fact.rs:6:20: 6:21
    let _13: &isize;                     // in scope 0 at ui/fact.rs:6:20: 6:21
    let mut _14: isize;                  // in scope 0 at ui/fact.rs:7:8: 7:9
    let _15: isize;                      // in scope 0 at ui/fact.rs:14:13: 14:14
    let mut _16: isize;                  // in scope 0 at ui/fact.rs:14:24: 14:25
    let mut _17: isize;                  // in scope 0 at ui/fact.rs:14:28: 14:36
    let mut _18: isize;                  // in scope 0 at ui/fact.rs:14:30: 14:35
    let mut _19: isize;                  // in scope 0 at ui/fact.rs:14:30: 14:31
    let mut _20: (isize, bool);          // in scope 0 at ui/fact.rs:14:30: 14:35
    let mut _21: (isize, bool);          // in scope 0 at ui/fact.rs:14:24: 14:36
    let _22: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _23: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _24: &[&str];                // in scope 0 at ui/fact.rs:17:18: 17:22
    let mut _25: &[&str; 2];             // in scope 0 at ui/fact.rs:17:18: 17:22
    let _26: &[&str; 2];                 // in scope 0 at ui/fact.rs:17:18: 17:22
    let mut _27: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _28: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _29: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _30: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _31: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/fact.rs:17:24: 17:25
    let mut _32: &isize;                 // in scope 0 at ui/fact.rs:17:24: 17:25
    let _33: &isize;                     // in scope 0 at ui/fact.rs:17:24: 17:25
    let mut _35: &[&str; 2];             // in scope 0 at ui/fact.rs:6:14: 6:18
    scope 1 {
        debug y => _15;                  // in scope 1 at ui/fact.rs:14:13: 14:14
        let mut _34: &[&str; 2];         // in scope 1 at ui/fact.rs:17:18: 17:22
    }

    bb0: {
        _35 = const _;                   // scope 0 at ui/fact.rs:6:14: 6:18
                                         // mir::Constant
                                         // + span: ui/fact.rs:6:14: 6:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(f, [], Some(promoted[1])) }
        _6 = _35;                        // scope 0 at ui/fact.rs:6:14: 6:18
        _5 = _6;                         // scope 0 at ui/fact.rs:6:14: 6:18
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/fact.rs:6:14: 6:18
        _13 = &_1;                       // scope 0 at ui/fact.rs:6:20: 6:21
        _12 = _13;                       // scope 0 at ui/fact.rs:6:20: 6:21
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _12) -> bb1; // scope 0 at ui/fact.rs:6:20: 6:21
                                         // mir::Constant
                                         // + span: ui/fact.rs:6:20: 6:21
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = [move _11];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _print(move _3) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = _1;                        // scope 0 at ui/fact.rs:7:8: 7:9
        switchInt(move _14) -> [1: bb4, otherwise: bb5]; // scope 0 at ui/fact.rs:7:8: 7:14
    }

    bb4: {
        _0 = const 1_isize;              // scope 0 at ui/fact.rs:10:16: 10:17
        goto -> bb12;                    // scope 0 at ui/fact.rs:10:9: 10:17
    }

    bb5: {
        _16 = _1;                        // scope 0 at ui/fact.rs:14:24: 14:25
        _19 = _1;                        // scope 0 at ui/fact.rs:14:30: 14:31
        _20 = CheckedSub(_19, const 1_isize); // scope 0 at ui/fact.rs:14:30: 14:35
        assert(!move (_20.1: bool), "attempt to compute `{} - {}`, which would overflow", move _19, const 1_isize) -> bb6; // scope 0 at ui/fact.rs:14:30: 14:35
    }

    bb6: {
        _18 = move (_20.0: isize);       // scope 0 at ui/fact.rs:14:30: 14:35
        _17 = f(move _18) -> bb7;        // scope 0 at ui/fact.rs:14:28: 14:36
                                         // mir::Constant
                                         // + span: ui/fact.rs:14:28: 14:29
                                         // + literal: Const { ty: fn(isize) -> isize {f}, val: Value(<ZST>) }
    }

    bb7: {
        _21 = CheckedMul(_16, _17);      // scope 0 at ui/fact.rs:14:24: 14:36
        assert(!move (_21.1: bool), "attempt to compute `{} * {}`, which would overflow", move _16, move _17) -> bb8; // scope 0 at ui/fact.rs:14:24: 14:36
    }

    bb8: {
        _15 = move (_21.0: isize);       // scope 0 at ui/fact.rs:14:24: 14:36
        _34 = const _;                   // scope 1 at ui/fact.rs:17:18: 17:22
                                         // mir::Constant
                                         // + span: ui/fact.rs:17:18: 17:22
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(f, [], Some(promoted[0])) }
        _26 = _34;                       // scope 1 at ui/fact.rs:17:18: 17:22
        _25 = _26;                       // scope 1 at ui/fact.rs:17:18: 17:22
        _24 = move _25 as &[&str] (Pointer(Unsize)); // scope 1 at ui/fact.rs:17:18: 17:22
        _33 = &_15;                      // scope 1 at ui/fact.rs:17:24: 17:25
        _32 = _33;                       // scope 1 at ui/fact.rs:17:24: 17:25
        _31 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _32) -> bb9; // scope 1 at ui/fact.rs:17:24: 17:25
                                         // mir::Constant
                                         // + span: ui/fact.rs:17:24: 17:25
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb9: {
        _30 = [move _31];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _29 = &_30;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _28 = _29;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _27 = move _28 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _23 = Arguments::<'_>::new_v1(move _24, move _27) -> bb10; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb10: {
        _22 = _print(move _23) -> bb11;  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb11: {
        _0 = _15;                        // scope 1 at ui/fact.rs:18:16: 18:17
        goto -> bb12;                    // scope 0 at no-location
    }

    bb12: {
        return;                          // scope 0 at ui/fact.rs:20:2: 20:2
    }
}

promoted[0] in f: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/fact.rs:17:18: 17:22
    let mut _1: [&str; 2];               // in scope 0 at ui/fact.rs:17:18: 17:22

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/fact.rs:17:18: 17:22
                                         // mir::Constant
                                         // + span: ui/fact.rs:17:18: 17:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/fact.rs:17:18: 17:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/fact.rs:17:18: 17:22
        return;                          // scope 0 at ui/fact.rs:17:18: 17:22
    }
}

promoted[1] in f: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/fact.rs:6:14: 6:18
    let mut _1: [&str; 2];               // in scope 0 at ui/fact.rs:6:14: 6:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/fact.rs:6:14: 6:18
                                         // mir::Constant
                                         // + span: ui/fact.rs:6:14: 6:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/fact.rs:6:14: 6:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/fact.rs:6:14: 6:18
        return;                          // scope 0 at ui/fact.rs:6:14: 6:18
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/fact.rs:22:15: 22:15
    let mut _1: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: isize;                       // in scope 0 at ui/fact.rs:23:16: 23:20
    let mut _4: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: &isize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &isize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: isize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = f(const 5_isize) -> bb1;    // scope 0 at ui/fact.rs:23:16: 23:20
                                         // mir::Constant
                                         // + span: ui/fact.rs:23:16: 23:17
                                         // + literal: Const { ty: fn(isize) -> isize {f}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _19 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _4 = _19;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_1.0: &isize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_1.1: &isize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = (*_5);                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = const 120_isize;           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = Eq(move _9, move _10);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _7 = Not(move _8);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _11 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<isize, isize>(move _13, move _14, move _16, move _18); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/fact.rs:26:2: 26:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/fact.rs:23:22: 23:25

    bb0: {
        _1 = const 120_isize;            // scope 0 at ui/fact.rs:23:22: 23:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
