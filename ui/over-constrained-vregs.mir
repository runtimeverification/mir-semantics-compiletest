// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/over-constrained-vregs.rs:5:15: 5:15
    let mut _1: usize;                   // in scope 0 at ui/over-constrained-vregs.rs:6:9: 6:14
    let mut _2: bool;                    // in scope 0 at ui/over-constrained-vregs.rs:7:11: 7:43
    let mut _3: usize;                   // in scope 0 at ui/over-constrained-vregs.rs:7:11: 7:12
    let mut _4: usize;                   // in scope 0 at ui/over-constrained-vregs.rs:7:15: 7:43
    let mut _5: usize;                   // in scope 0 at ui/over-constrained-vregs.rs:8:20: 8:21
    let mut _6: (usize, bool);           // in scope 0 at ui/over-constrained-vregs.rs:8:9: 8:21
    let mut _7: (usize, bool);           // in scope 0 at ui/over-constrained-vregs.rs:9:9: 9:22
    let _8: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _9: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[&str];                // in scope 0 at ui/over-constrained-vregs.rs:10:18: 10:22
    let mut _11: &[&str; 2];             // in scope 0 at ui/over-constrained-vregs.rs:10:18: 10:22
    let _12: &[&str; 2];                 // in scope 0 at ui/over-constrained-vregs.rs:10:18: 10:22
    let mut _13: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _14: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _16: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _17: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/over-constrained-vregs.rs:10:24: 10:25
    let mut _18: &usize;                 // in scope 0 at ui/over-constrained-vregs.rs:10:24: 10:25
    let _19: &usize;                     // in scope 0 at ui/over-constrained-vregs.rs:10:24: 10:25
    scope 1 {
        debug b => _1;                   // in scope 1 at ui/over-constrained-vregs.rs:6:9: 6:14
        let mut _20: &[&str; 2];         // in scope 1 at ui/over-constrained-vregs.rs:10:18: 10:22
    }

    bb0: {
        _1 = const 1_usize;              // scope 0 at ui/over-constrained-vregs.rs:6:24: 6:31
        goto -> bb1;                     // scope 1 at ui/over-constrained-vregs.rs:7:5: 11:6
    }

    bb1: {
        _3 = _1;                         // scope 1 at ui/over-constrained-vregs.rs:7:11: 7:12
        _4 = std::mem::size_of::<usize>() -> bb2; // scope 1 at ui/over-constrained-vregs.rs:7:15: 7:43
                                         // mir::Constant
                                         // + span: ui/over-constrained-vregs.rs:7:15: 7:41
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<usize>}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = Lt(move _3, move _4);       // scope 1 at ui/over-constrained-vregs.rs:7:11: 7:43
        switchInt(move _2) -> [0: bb8, otherwise: bb3]; // scope 1 at ui/over-constrained-vregs.rs:7:11: 7:43
    }

    bb3: {
        _5 = _1;                         // scope 1 at ui/over-constrained-vregs.rs:8:20: 8:21
        _6 = CheckedShl(const 0_usize, _5); // scope 1 at ui/over-constrained-vregs.rs:8:9: 8:21
        assert(!move (_6.1: bool), "attempt to shift left by `{}`, which would overflow", move _5) -> bb4; // scope 1 at ui/over-constrained-vregs.rs:8:9: 8:21
    }

    bb4: {
        _7 = CheckedShl(_1, const 1_usize); // scope 1 at ui/over-constrained-vregs.rs:9:9: 9:22
        assert(!move (_7.1: bool), "attempt to shift left by `{}`, which would overflow", const 1_usize) -> bb5; // scope 1 at ui/over-constrained-vregs.rs:9:9: 9:22
    }

    bb5: {
        _1 = move (_7.0: usize);         // scope 1 at ui/over-constrained-vregs.rs:9:9: 9:22
        _20 = const _;                   // scope 1 at ui/over-constrained-vregs.rs:10:18: 10:22
                                         // mir::Constant
                                         // + span: ui/over-constrained-vregs.rs:10:18: 10:22
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _12 = _20;                       // scope 1 at ui/over-constrained-vregs.rs:10:18: 10:22
        _11 = _12;                       // scope 1 at ui/over-constrained-vregs.rs:10:18: 10:22
        _10 = move _11 as &[&str] (Pointer(Unsize)); // scope 1 at ui/over-constrained-vregs.rs:10:18: 10:22
        _19 = &_1;                       // scope 1 at ui/over-constrained-vregs.rs:10:24: 10:25
        _18 = _19;                       // scope 1 at ui/over-constrained-vregs.rs:10:24: 10:25
        _17 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(move _18) -> bb6; // scope 1 at ui/over-constrained-vregs.rs:10:24: 10:25
                                         // mir::Constant
                                         // + span: ui/over-constrained-vregs.rs:10:24: 10:25
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb6: {
        _16 = [move _17];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _15 = &_16;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _14 = _15;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _13 = move _14 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = Arguments::<'_>::new_v1(move _10, move _13) -> bb7; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb7: {
        _8 = _print(move _9) -> bb1;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/over-constrained-vregs.rs:12:2: 12:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/over-constrained-vregs.rs:10:18: 10:22
    let mut _1: [&str; 2];               // in scope 0 at ui/over-constrained-vregs.rs:10:18: 10:22

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/over-constrained-vregs.rs:10:18: 10:22
                                         // mir::Constant
                                         // + span: ui/over-constrained-vregs.rs:10:18: 10:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/over-constrained-vregs.rs:10:18: 10:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/over-constrained-vregs.rs:10:18: 10:22
        return;                          // scope 0 at ui/over-constrained-vregs.rs:10:18: 10:22
    }
}
