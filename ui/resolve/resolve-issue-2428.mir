// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const foo: isize = {
    let mut _0: isize;
    let mut _1: u32;
    let mut _2: bool;

    bb0: {
        _1 = const 1_i32 as u32 (IntToInt);
        _2 = Lt(move _1, const 64_u32);
        assert(move _2, "attempt to shift right by `{}`, which would overflow", const 1_i32) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Shr(const 4_isize, const 1_i32);
        return;
    }
}

bs::thing::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let _2: &isize;
    let _3: &isize;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: isize;
    let mut _7: isize;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: &isize;
    let mut _12: &isize;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }

    bb0: {
        _12 = const _;
        _11 = const _;
        _1 = (_12, _11);
        _2 = (_1.0: &isize);
        _3 = (_1.1: &isize);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<isize, isize>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;
    let mut _2: isize;

    bb0: {
        _2 = Add(const _, const 0_isize);
        _1 = move _2 as isize (IntToInt);
        _0 = &_1;
        return;
    }
}
