// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test() -> Option<i32> {
    let mut _0: core::option::Option<i32>; // return place in scope 0 at ui/resolve/no-std-3.rs:8:22: 8:33

    bb0: {
        _0 = Option::<i32>::Some(const 2_i32); // scope 0 at ui/resolve/no-std-3.rs:9:9: 9:16
        return;                          // scope 0 at ui/resolve/no-std-3.rs:10:6: 10:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/resolve/no-std-3.rs:13:11: 13:11
    let _1: core::option::Option<&str>;  // in scope 0 at ui/resolve/no-std-3.rs:14:9: 14:10
    let _2: &str;                        // in scope 0 at ui/resolve/no-std-3.rs:15:5: 15:15
    let mut _3: core::option::Option<&str>; // in scope 0 at ui/resolve/no-std-3.rs:15:5: 15:6
    let _4: i32;                         // in scope 0 at ui/resolve/no-std-3.rs:16:5: 16:25
    let mut _5: core::option::Option<i32>; // in scope 0 at ui/resolve/no-std-3.rs:16:5: 16:16
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/resolve/no-std-3.rs:14:9: 14:10
    }

    bb0: {
        _1 = Option::<&str>::Some(const "foo"); // scope 0 at ui/resolve/no-std-3.rs:14:13: 14:46
                                         // mir::Constant
                                         // + span: ui/resolve/no-std-3.rs:14:40: 14:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _1;                         // scope 1 at ui/resolve/no-std-3.rs:15:5: 15:6
        _2 = Option::<&str>::unwrap(move _3) -> bb1; // scope 1 at ui/resolve/no-std-3.rs:15:5: 15:15
                                         // mir::Constant
                                         // + span: ui/resolve/no-std-3.rs:15:7: 15:13
                                         // + literal: Const { ty: fn(Option<&str>) -> &str {Option::<&str>::unwrap}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = test() -> bb2;              // scope 1 at ui/resolve/no-std-3.rs:16:5: 16:16
                                         // mir::Constant
                                         // + span: ui/resolve/no-std-3.rs:16:5: 16:14
                                         // + literal: Const { ty: fn() -> Option<i32> {test}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = Option::<i32>::unwrap(move _5) -> bb3; // scope 1 at ui/resolve/no-std-3.rs:16:5: 16:25
                                         // mir::Constant
                                         // + span: ui/resolve/no-std-3.rs:16:17: 16:23
                                         // + literal: Const { ty: fn(Option<i32>) -> i32 {Option::<i32>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/resolve/no-std-3.rs:17:2: 17:2
    }
}
