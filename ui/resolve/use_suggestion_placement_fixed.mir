// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const A: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/resolve/use_suggestion_placement_fixed.rs:13:18: 13:21

    bb0: {
        _0 = const 0_i32;                // scope 0 at ui/resolve/use_suggestion_placement_fixed.rs:13:24: 13:25
        return;                          // scope 0 at ui/resolve/use_suggestion_placement_fixed.rs:13:5: 13:26
    }
}

fn foo::<impl at ui/resolve/use_suggestion_placement_fixed.rs:19:10: 19:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/resolve/use_suggestion_placement_fixed.rs:19:10: 19:15
    debug f => _2;                       // in scope 0 at ui/resolve/use_suggestion_placement_fixed.rs:19:10: 19:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/resolve/use_suggestion_placement_fixed.rs:19:10: 19:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/resolve/use_suggestion_placement_fixed.rs:19:10: 19:15
    let mut _4: &str;                    // in scope 0 at ui/resolve/use_suggestion_placement_fixed.rs:19:10: 19:15
    let _5: &str;                        // in scope 0 at ui/resolve/use_suggestion_placement_fixed.rs:19:10: 19:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/resolve/use_suggestion_placement_fixed.rs:19:10: 19:15
        _5 = const "Foo";                // scope 0 at ui/resolve/use_suggestion_placement_fixed.rs:19:10: 19:15
                                         // mir::Constant
                                         // + span: ui/resolve/use_suggestion_placement_fixed.rs:19:10: 19:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/resolve/use_suggestion_placement_fixed.rs:19:10: 19:15
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/resolve/use_suggestion_placement_fixed.rs:19:10: 19:15
                                         // mir::Constant
                                         // + span: ui/resolve/use_suggestion_placement_fixed.rs:19:10: 19:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/resolve/use_suggestion_placement_fixed.rs:19:15: 19:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/resolve/use_suggestion_placement_fixed.rs:27:11: 27:11
    let _1: ();                          // in scope 0 at ui/resolve/use_suggestion_placement_fixed.rs:30:5: 30:10
    scope 1 {
    }

    bb0: {
        _1 = foo() -> bb1;               // scope 1 at ui/resolve/use_suggestion_placement_fixed.rs:30:5: 30:10
                                         // mir::Constant
                                         // + span: ui/resolve/use_suggestion_placement_fixed.rs:30:5: 30:8
                                         // + literal: Const { ty: fn() {foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/resolve/use_suggestion_placement_fixed.rs:31:2: 31:2
    }
}

fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/resolve/use_suggestion_placement_fixed.rs:33:10: 33:10

    bb0: {
        return;                          // scope 0 at ui/resolve/use_suggestion_placement_fixed.rs:35:2: 35:2
    }
}
