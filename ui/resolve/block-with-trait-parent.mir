// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Trait::method(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at ui/resolve/block-with-trait-parent.rs:4:15: 4:20
    let mut _0: ();                      // return place in scope 0 at ui/resolve/block-with-trait-parent.rs:4:22: 4:22
    let _2: ();                          // in scope 0 at ui/resolve/block-with-trait-parent.rs:10:9: 10:19
    let mut _3: &Trait::method::S;       // in scope 0 at ui/resolve/block-with-trait-parent.rs:10:9: 10:19
    let mut _4: &Trait::method::S;       // in scope 0 at ui/resolve/block-with-trait-parent.rs:10:9: 10:19

    bb0: {
        _4 = const _;                    // scope 0 at ui/resolve/block-with-trait-parent.rs:10:9: 10:19
                                         // mir::Constant
                                         // + span: ui/resolve/block-with-trait-parent.rs:10:9: 10:19
                                         // + literal: Const { ty: &S, val: Unevaluated(Trait::method, [Self], Some(promoted[0])) }
        _3 = _4;                         // scope 0 at ui/resolve/block-with-trait-parent.rs:10:9: 10:19
        _2 = <S as Trait>::method(move _3) -> bb1; // scope 0 at ui/resolve/block-with-trait-parent.rs:10:9: 10:19
                                         // mir::Constant
                                         // + span: ui/resolve/block-with-trait-parent.rs:10:11: 10:17
                                         // + literal: Const { ty: for<'a> fn(&'a S) {<S as Trait>::method}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/resolve/block-with-trait-parent.rs:11:6: 11:6
    }
}

promoted[0] in Trait::method: &S = {
    let mut _0: &Trait::method::S;       // return place in scope 0 at ui/resolve/block-with-trait-parent.rs:10:9: 10:19
    let mut _1: Trait::method::S;        // in scope 0 at ui/resolve/block-with-trait-parent.rs:10:9: 10:10

    bb0: {
        _1 = S;                          // scope 0 at ui/resolve/block-with-trait-parent.rs:10:9: 10:10
        _0 = &_1;                        // scope 0 at ui/resolve/block-with-trait-parent.rs:10:9: 10:19
        return;                          // scope 0 at ui/resolve/block-with-trait-parent.rs:10:9: 10:19
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/resolve/block-with-trait-parent.rs:14:11: 14:11

    bb0: {
        return;                          // scope 0 at ui/resolve/block-with-trait-parent.rs:14:13: 14:13
    }
}
