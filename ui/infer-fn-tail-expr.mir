// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f() -> Vec<isize> {
    let mut _0: std::vec::Vec<isize>;    // return place in scope 0 at ui/infer-fn-tail-expr.rs:9:11: 9:21

    bb0: {
        _0 = Vec::<isize>::new() -> bb1; // scope 0 at ui/infer-fn-tail-expr.rs:9:24: 9:34
                                         // mir::Constant
                                         // + span: ui/infer-fn-tail-expr.rs:9:24: 9:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<isize> {Vec::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/infer-fn-tail-expr.rs:9:36: 9:36
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/infer-fn-tail-expr.rs:11:15: 11:15

    bb0: {
        return;                          // scope 0 at ui/infer-fn-tail-expr.rs:11:18: 11:18
    }
}
