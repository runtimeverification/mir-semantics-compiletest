// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/defaults-well-formedness.rs:27:11: 27:11

    bb0: {
        return;                          // scope 0 at ui/defaults-well-formedness.rs:27:13: 27:13
    }
}

fn Foo(_1: U, _2: V) -> Foo<U, V> {
    let mut _0: Foo<U, V>;               // return place in scope 0 at ui/defaults-well-formedness.rs:5:1: 5:21

    bb0: {
        _0 = Foo::<U, V>(move _1, move _2); // scope 0 at ui/defaults-well-formedness.rs:5:1: 5:21
        return;                          // scope 0 at ui/defaults-well-formedness.rs:5:1: 5:21
    }
}

// MIR FOR CTFE
fn Foo(_1: U, _2: V) -> Foo<U, V> {
    let mut _0: Foo<U, V>;               // return place in scope 0 at ui/defaults-well-formedness.rs:5:1: 5:21

    bb0: {
        _0 = Foo::<U, V>(move _1, move _2); // scope 0 at ui/defaults-well-formedness.rs:5:1: 5:21
        return;                          // scope 0 at ui/defaults-well-formedness.rs:5:1: 5:21
    }
}

fn TwoParams(_1: T, _2: U) -> TwoParams<T, U> {
    let mut _0: TwoParams<T, U>;         // return place in scope 0 at ui/defaults-well-formedness.rs:8:1: 8:23

    bb0: {
        _0 = TwoParams::<T, U>(move _1, move _2); // scope 0 at ui/defaults-well-formedness.rs:8:1: 8:23
        return;                          // scope 0 at ui/defaults-well-formedness.rs:8:1: 8:23
    }
}

// MIR FOR CTFE
fn TwoParams(_1: T, _2: U) -> TwoParams<T, U> {
    let mut _0: TwoParams<T, U>;         // return place in scope 0 at ui/defaults-well-formedness.rs:8:1: 8:23

    bb0: {
        _0 = TwoParams::<T, U>(move _1, move _2); // scope 0 at ui/defaults-well-formedness.rs:8:1: 8:23
        return;                          // scope 0 at ui/defaults-well-formedness.rs:8:1: 8:23
    }
}

fn IndividuallyBogus(_1: TwoParams<T, U>) -> IndividuallyBogus<T, U> {
    let mut _0: IndividuallyBogus<T, U>; // return place in scope 0 at ui/defaults-well-formedness.rs:12:1: 12:43

    bb0: {
        _0 = IndividuallyBogus::<T, U>(move _1); // scope 0 at ui/defaults-well-formedness.rs:12:1: 12:43
        return;                          // scope 0 at ui/defaults-well-formedness.rs:12:1: 12:43
    }
}

// MIR FOR CTFE
fn IndividuallyBogus(_1: TwoParams<T, U>) -> IndividuallyBogus<T, U> {
    let mut _0: IndividuallyBogus<T, U>; // return place in scope 0 at ui/defaults-well-formedness.rs:12:1: 12:43

    bb0: {
        _0 = IndividuallyBogus::<T, U>(move _1); // scope 0 at ui/defaults-well-formedness.rs:12:1: 12:43
        return;                          // scope 0 at ui/defaults-well-formedness.rs:12:1: 12:43
    }
}

fn BogusTogether(_1: T, _2: U) -> BogusTogether<T, U> {
    let mut _0: BogusTogether<T, U>;     // return place in scope 0 at ui/defaults-well-formedness.rs:13:1: 13:39

    bb0: {
        _0 = BogusTogether::<T, U>(move _1, move _2); // scope 0 at ui/defaults-well-formedness.rs:13:1: 13:39
        return;                          // scope 0 at ui/defaults-well-formedness.rs:13:1: 13:39
    }
}

// MIR FOR CTFE
fn BogusTogether(_1: T, _2: U) -> BogusTogether<T, U> {
    let mut _0: BogusTogether<T, U>;     // return place in scope 0 at ui/defaults-well-formedness.rs:13:1: 13:39

    bb0: {
        _0 = BogusTogether::<T, U>(move _1, move _2); // scope 0 at ui/defaults-well-formedness.rs:13:1: 13:39
        return;                          // scope 0 at ui/defaults-well-formedness.rs:13:1: 13:39
    }
}

fn NonDefaultedInClause(_1: TwoParams<T, U>) -> NonDefaultedInClause<T, U> {
    let mut _0: NonDefaultedInClause<T, U>; // return place in scope 0 at ui/defaults-well-formedness.rs:15:1: 15:40

    bb0: {
        _0 = NonDefaultedInClause::<T, U>(move _1); // scope 0 at ui/defaults-well-formedness.rs:15:1: 15:40
        return;                          // scope 0 at ui/defaults-well-formedness.rs:15:1: 15:40
    }
}

// MIR FOR CTFE
fn NonDefaultedInClause(_1: TwoParams<T, U>) -> NonDefaultedInClause<T, U> {
    let mut _0: NonDefaultedInClause<T, U>; // return place in scope 0 at ui/defaults-well-formedness.rs:15:1: 15:40

    bb0: {
        _0 = NonDefaultedInClause::<T, U>(move _1); // scope 0 at ui/defaults-well-formedness.rs:15:1: 15:40
        return;                          // scope 0 at ui/defaults-well-formedness.rs:15:1: 15:40
    }
}

fn DefaultedLhs(_1: U, _2: V) -> DefaultedLhs<U, V> {
    let mut _0: DefaultedLhs<U, V>;      // return place in scope 0 at ui/defaults-well-formedness.rs:16:1: 16:30

    bb0: {
        _0 = DefaultedLhs::<U, V>(move _1, move _2); // scope 0 at ui/defaults-well-formedness.rs:16:1: 16:30
        return;                          // scope 0 at ui/defaults-well-formedness.rs:16:1: 16:30
    }
}

// MIR FOR CTFE
fn DefaultedLhs(_1: U, _2: V) -> DefaultedLhs<U, V> {
    let mut _0: DefaultedLhs<U, V>;      // return place in scope 0 at ui/defaults-well-formedness.rs:16:1: 16:30

    bb0: {
        _0 = DefaultedLhs::<U, V>(move _1, move _2); // scope 0 at ui/defaults-well-formedness.rs:16:1: 16:30
        return;                          // scope 0 at ui/defaults-well-formedness.rs:16:1: 16:30
    }
}

fn Dependent(_1: T, _2: U) -> Dependent<T, U> {
    let mut _0: Dependent<T, U>;         // return place in scope 0 at ui/defaults-well-formedness.rs:18:1: 18:27

    bb0: {
        _0 = Dependent::<T, U>(move _1, move _2); // scope 0 at ui/defaults-well-formedness.rs:18:1: 18:27
        return;                          // scope 0 at ui/defaults-well-formedness.rs:18:1: 18:27
    }
}

// MIR FOR CTFE
fn Dependent(_1: T, _2: U) -> Dependent<T, U> {
    let mut _0: Dependent<T, U>;         // return place in scope 0 at ui/defaults-well-formedness.rs:18:1: 18:27

    bb0: {
        _0 = Dependent::<T, U>(move _1, move _2); // scope 0 at ui/defaults-well-formedness.rs:18:1: 18:27
        return;                          // scope 0 at ui/defaults-well-formedness.rs:18:1: 18:27
    }
}

fn WellFormedProjection(_1: A, _2: T) -> WellFormedProjection<A, T> {
    let mut _0: WellFormedProjection<A, T>; // return place in scope 0 at ui/defaults-well-formedness.rs:21:1: 21:56

    bb0: {
        _0 = WellFormedProjection::<A, T>(move _1, move _2); // scope 0 at ui/defaults-well-formedness.rs:21:1: 21:56
        return;                          // scope 0 at ui/defaults-well-formedness.rs:21:1: 21:56
    }
}

// MIR FOR CTFE
fn WellFormedProjection(_1: A, _2: T) -> WellFormedProjection<A, T> {
    let mut _0: WellFormedProjection<A, T>; // return place in scope 0 at ui/defaults-well-formedness.rs:21:1: 21:56

    bb0: {
        _0 = WellFormedProjection::<A, T>(move _1, move _2); // scope 0 at ui/defaults-well-formedness.rs:21:1: 21:56
        return;                          // scope 0 at ui/defaults-well-formedness.rs:21:1: 21:56
    }
}

fn Request(_1: S, _2: &()) -> Request<'_, S> {
    let mut _0: Request<'_, S>;          // return place in scope 0 at ui/defaults-well-formedness.rs:25:1: 25:39

    bb0: {
        _0 = Request::<'_, S>(move _1, move _2); // scope 0 at ui/defaults-well-formedness.rs:25:1: 25:39
        return;                          // scope 0 at ui/defaults-well-formedness.rs:25:1: 25:39
    }
}

// MIR FOR CTFE
fn Request(_1: S, _2: &()) -> Request<'_, S> {
    let mut _0: Request<'_, S>;          // return place in scope 0 at ui/defaults-well-formedness.rs:25:1: 25:39

    bb0: {
        _0 = Request::<'_, S>(move _1, move _2); // scope 0 at ui/defaults-well-formedness.rs:25:1: 25:39
        return;                          // scope 0 at ui/defaults-well-formedness.rs:25:1: 25:39
    }
}
