// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_assign() -> () {
    let mut _0: ();
    let mut _1: isize;
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: isize;
    let mut _10: isize;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&(), &());
    let mut _15: &();
    let mut _18: bool;
    let mut _19: bool;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _24: (&isize, &isize);
    let mut _25: &isize;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: isize;
    let mut _31: isize;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: (&(), &());
    let mut _36: &();
    let mut _39: bool;
    let mut _40: bool;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _44: (&isize, &isize);
    let mut _45: &isize;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: isize;
    let mut _51: isize;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _55: (&(), &());
    let mut _56: &();
    let mut _59: bool;
    let mut _60: bool;
    let _62: !;
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: ();
        scope 2 {
            debug y => const ();
            let _5: &isize;
            let _6: &isize;
            let _16: &();
            let _17: &();
            let mut _23: ();
            let mut _68: &();
            let mut _69: &isize;
            scope 3 {
                debug left_val => _5;
                debug right_val => _6;
                let _11: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _11;
                }
            }
            scope 5 {
                debug left_val => _16;
                debug right_val => _17;
                let _20: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _20;
                }
            }
            scope 7 {
                debug z => const ();
                let _26: &isize;
                let _27: &isize;
                let _37: &();
                let _38: &();
                let _46: &isize;
                let _47: &isize;
                let _57: &();
                let _58: &();
                let mut _64: &();
                let mut _65: &isize;
                let mut _66: &();
                let mut _67: &isize;
                scope 8 {
                    debug left_val => _26;
                    debug right_val => _27;
                    let _32: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _32;
                    }
                }
                scope 10 {
                    debug left_val => _37;
                    debug right_val => _38;
                    let _41: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _41;
                    }
                }
                scope 12 {
                    debug left_val => _46;
                    debug right_val => _47;
                    let _52: core::panicking::AssertKind;
                    scope 13 {
                        debug kind => _52;
                    }
                }
                scope 14 {
                    debug left_val => _57;
                    debug right_val => _58;
                    let _61: core::panicking::AssertKind;
                    scope 15 {
                        debug kind => _61;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 10_isize;
        _4 = &_1;
        _69 = const _;
        _3 = (move _4, _69);
        _5 = (_3.0: &isize);
        _6 = (_3.1: &isize);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<isize, isize>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb2: {
        _15 = &_2;
        _68 = const _;
        _14 = (move _15, _68);
        _16 = (_14.0: &());
        _17 = (_14.1: &());
        _19 = <() as PartialEq>::eq(_16, _17) -> [return: bb3, unwind continue];
    }

    bb3: {
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<(), ()>(move _20, _16, _17, move _22) -> unwind continue;
    }

    bb5: {
        _1 = const 11_isize;
        _25 = &_1;
        _67 = const _;
        _24 = (move _25, _67);
        _26 = (_24.0: &isize);
        _27 = (_24.1: &isize);
        _30 = (*_26);
        _31 = (*_27);
        _29 = Eq(move _30, move _31);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<isize, isize>(move _32, _26, _27, move _34) -> unwind continue;
    }

    bb7: {
        _36 = &_23;
        _66 = const _;
        _35 = (move _36, _66);
        _37 = (_35.0: &());
        _38 = (_35.1: &());
        _40 = <() as PartialEq>::eq(_37, _38) -> [return: bb8, unwind continue];
    }

    bb8: {
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<(), ()>(move _41, _37, _38, move _43) -> unwind continue;
    }

    bb10: {
        _1 = const 12_isize;
        _45 = &_1;
        _65 = const _;
        _44 = (move _45, _65);
        _46 = (_44.0: &isize);
        _47 = (_44.1: &isize);
        _50 = (*_46);
        _51 = (*_47);
        _49 = Eq(move _50, move _51);
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<isize, isize>(move _52, _46, _47, move _54) -> unwind continue;
    }

    bb12: {
        _56 = &_23;
        _64 = const _;
        _55 = (move _56, _64);
        _57 = (_55.0: &());
        _58 = (_55.1: &());
        _60 = <() as PartialEq>::eq(_57, _58) -> [return: bb13, unwind continue];
    }

    bb13: {
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _61 = core::panicking::AssertKind::Eq;
        _63 = Option::<Arguments<'_>>::None;
        _62 = core::panicking::assert_failed::<(), ()>(move _61, _57, _58, move _63) -> unwind continue;
    }

    bb15: {
        return;
    }
}

promoted[0] in test_assign: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[1] in test_assign: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 12_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in test_assign: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[3] in test_assign: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 11_isize;
        _0 = &_1;
        return;
    }
}

promoted[4] in test_assign: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[5] in test_assign: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 10_isize;
        _0 = &_1;
        return;
    }
}

fn test_assign_op() -> () {
    let mut _0: ();
    let mut _1: isize;
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: isize;
    let mut _10: isize;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&(), &());
    let mut _15: &();
    let mut _18: bool;
    let mut _19: bool;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _24: (&isize, &isize);
    let mut _25: &isize;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: isize;
    let mut _31: isize;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: (&(), &());
    let mut _36: &();
    let mut _39: bool;
    let mut _40: bool;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _44: (&isize, &isize);
    let mut _45: &isize;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: isize;
    let mut _51: isize;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _55: (&(), &());
    let mut _56: &();
    let mut _59: bool;
    let mut _60: bool;
    let _62: !;
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: ();
        scope 2 {
            debug y => const ();
            let _5: &isize;
            let _6: &isize;
            let _16: &();
            let _17: &();
            let mut _23: ();
            let mut _68: &();
            let mut _69: &isize;
            scope 3 {
                debug left_val => _5;
                debug right_val => _6;
                let _11: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _11;
                }
            }
            scope 5 {
                debug left_val => _16;
                debug right_val => _17;
                let _20: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _20;
                }
            }
            scope 7 {
                debug z => const ();
                let _26: &isize;
                let _27: &isize;
                let _37: &();
                let _38: &();
                let _46: &isize;
                let _47: &isize;
                let _57: &();
                let _58: &();
                let mut _64: &();
                let mut _65: &isize;
                let mut _66: &();
                let mut _67: &isize;
                scope 8 {
                    debug left_val => _26;
                    debug right_val => _27;
                    let _32: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _32;
                    }
                }
                scope 10 {
                    debug left_val => _37;
                    debug right_val => _38;
                    let _41: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _41;
                    }
                }
                scope 12 {
                    debug left_val => _46;
                    debug right_val => _47;
                    let _52: core::panicking::AssertKind;
                    scope 13 {
                        debug kind => _52;
                    }
                }
                scope 14 {
                    debug left_val => _57;
                    debug right_val => _58;
                    let _61: core::panicking::AssertKind;
                    scope 15 {
                        debug kind => _61;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 0_isize;
        _1 = Add(_1, const 10_isize);
        _4 = &_1;
        _69 = const _;
        _3 = (move _4, _69);
        _5 = (_3.0: &isize);
        _6 = (_3.1: &isize);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<isize, isize>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb2: {
        _15 = &_2;
        _68 = const _;
        _14 = (move _15, _68);
        _16 = (_14.0: &());
        _17 = (_14.1: &());
        _19 = <() as PartialEq>::eq(_16, _17) -> [return: bb3, unwind continue];
    }

    bb3: {
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<(), ()>(move _20, _16, _17, move _22) -> unwind continue;
    }

    bb5: {
        _1 = Add(_1, const 11_isize);
        _25 = &_1;
        _67 = const _;
        _24 = (move _25, _67);
        _26 = (_24.0: &isize);
        _27 = (_24.1: &isize);
        _30 = (*_26);
        _31 = (*_27);
        _29 = Eq(move _30, move _31);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<isize, isize>(move _32, _26, _27, move _34) -> unwind continue;
    }

    bb7: {
        _36 = &_23;
        _66 = const _;
        _35 = (move _36, _66);
        _37 = (_35.0: &());
        _38 = (_35.1: &());
        _40 = <() as PartialEq>::eq(_37, _38) -> [return: bb8, unwind continue];
    }

    bb8: {
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<(), ()>(move _41, _37, _38, move _43) -> unwind continue;
    }

    bb10: {
        _1 = Add(_1, const 12_isize);
        _45 = &_1;
        _65 = const _;
        _44 = (move _45, _65);
        _46 = (_44.0: &isize);
        _47 = (_44.1: &isize);
        _50 = (*_46);
        _51 = (*_47);
        _49 = Eq(move _50, move _51);
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<isize, isize>(move _52, _46, _47, move _54) -> unwind continue;
    }

    bb12: {
        _56 = &_23;
        _64 = const _;
        _55 = (move _56, _64);
        _57 = (_55.0: &());
        _58 = (_55.1: &());
        _60 = <() as PartialEq>::eq(_57, _58) -> [return: bb13, unwind continue];
    }

    bb13: {
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _61 = core::panicking::AssertKind::Eq;
        _63 = Option::<Arguments<'_>>::None;
        _62 = core::panicking::assert_failed::<(), ()>(move _61, _57, _58, move _63) -> unwind continue;
    }

    bb15: {
        return;
    }
}

promoted[0] in test_assign_op: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[1] in test_assign_op: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 33_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in test_assign_op: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[3] in test_assign_op: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 21_isize;
        _0 = &_1;
        return;
    }
}

promoted[4] in test_assign_op: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[5] in test_assign_op: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 10_isize;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = test_assign() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = test_assign_op() -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}
