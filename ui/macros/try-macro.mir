// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _2: &std::result::Result<i32, std::num::ParseIntError>;
    let _3: std::result::Result<i32, std::num::ParseIntError>;
    let _4: &std::result::Result<i32, std::num::ParseIntError>;
    let _5: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _6: bool;
    let mut _7: bool;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _12: &std::result::Result<i32, std::num::ParseIntError>;
    let _13: std::result::Result<i32, std::num::ParseIntError>;
    let _14: &std::result::Result<i32, std::num::ParseIntError>;
    let _15: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&std::result::Result<f32, Error>, &std::result::Result<f32, Error>);
    let mut _22: &std::result::Result<f32, Error>;
    let _23: std::result::Result<f32, Error>;
    let _24: &std::result::Result<f32, Error>;
    let _25: &std::result::Result<f32, Error>;
    let mut _26: bool;
    let mut _27: bool;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&std::result::Result<f32, Error>, &std::result::Result<f32, Error>);
    let mut _32: &std::result::Result<f32, Error>;
    let _33: std::result::Result<f32, Error>;
    let _34: &std::result::Result<f32, Error>;
    let _35: &std::result::Result<f32, Error>;
    let mut _36: bool;
    let mut _37: bool;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&std::result::Result<f32, Error>, &std::result::Result<f32, Error>);
    let mut _42: &std::result::Result<f32, Error>;
    let _43: std::result::Result<f32, Error>;
    let _44: &std::result::Result<f32, Error>;
    let _45: &std::result::Result<f32, Error>;
    let mut _46: bool;
    let mut _47: bool;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: &std::result::Result<f32, Error>;
    let mut _52: &std::result::Result<f32, Error>;
    let mut _53: &std::result::Result<f32, Error>;
    let mut _54: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _55: &std::result::Result<i32, std::num::ParseIntError>;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _14;
        debug right_val => _15;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug left_val => _24;
        debug right_val => _25;
        let _28: core::panicking::AssertKind;
        scope 6 {
            debug kind => _28;
        }
    }
    scope 7 {
        debug left_val => _34;
        debug right_val => _35;
        let _38: core::panicking::AssertKind;
        scope 8 {
            debug kind => _38;
        }
    }
    scope 9 {
        debug left_val => _44;
        debug right_val => _45;
        let _48: core::panicking::AssertKind;
        scope 10 {
            debug kind => _48;
        }
    }

    bb0: {
        _3 = simple() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _55 = const _;
        _1 = (move _2, _55);
        _4 = (_1.0: &std::result::Result<i32, std::num::ParseIntError>);
        _5 = (_1.1: &std::result::Result<i32, std::num::ParseIntError>);
        _7 = <Result<i32, ParseIntError> as PartialEq>::eq(_4, _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _8, _4, _5, move _10) -> unwind continue;
    }

    bb4: {
        _13 = nested() -> [return: bb5, unwind continue];
    }

    bb5: {
        _12 = &_13;
        _54 = const _;
        _11 = (move _12, _54);
        _14 = (_11.0: &std::result::Result<i32, std::num::ParseIntError>);
        _15 = (_11.1: &std::result::Result<i32, std::num::ParseIntError>);
        _17 = <Result<i32, ParseIntError> as PartialEq>::eq(_14, _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _18, _14, _15, move _20) -> unwind continue;
    }

    bb8: {
        _23 = merge_ok() -> [return: bb9, unwind continue];
    }

    bb9: {
        _22 = &_23;
        _53 = const _;
        _21 = (move _22, _53);
        _24 = (_21.0: &std::result::Result<f32, Error>);
        _25 = (_21.1: &std::result::Result<f32, Error>);
        _27 = <Result<f32, Error> as PartialEq>::eq(_24, _25) -> [return: bb10, unwind continue];
    }

    bb10: {
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<Result<f32, Error>, Result<f32, Error>>(move _28, _24, _25, move _30) -> unwind continue;
    }

    bb12: {
        _33 = merge_int_err() -> [return: bb13, unwind continue];
    }

    bb13: {
        _32 = &_33;
        _52 = const _;
        _31 = (move _32, _52);
        _34 = (_31.0: &std::result::Result<f32, Error>);
        _35 = (_31.1: &std::result::Result<f32, Error>);
        _37 = <Result<f32, Error> as PartialEq>::eq(_34, _35) -> [return: bb14, unwind continue];
    }

    bb14: {
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<Result<f32, Error>, Result<f32, Error>>(move _38, _34, _35, move _40) -> unwind continue;
    }

    bb16: {
        _43 = merge_float_err() -> [return: bb17, unwind continue];
    }

    bb17: {
        _42 = &_43;
        _51 = const _;
        _41 = (move _42, _51);
        _44 = (_41.0: &std::result::Result<f32, Error>);
        _45 = (_41.1: &std::result::Result<f32, Error>);
        _47 = <Result<f32, Error> as PartialEq>::eq(_44, _45) -> [return: bb18, unwind continue];
    }

    bb18: {
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<Result<f32, Error>, Result<f32, Error>>(move _48, _44, _45, move _50) -> unwind continue;
    }

    bb20: {
        return;
    }
}

promoted[0] in main: &Result<f32, Error> = {
    let mut _0: &std::result::Result<f32, Error>;
    let mut _1: std::result::Result<f32, Error>;
    let mut _2: Error;

    bb0: {
        _2 = Error::Float;
        _1 = Result::<f32, Error>::Err(move _2);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Result<f32, Error> = {
    let mut _0: &std::result::Result<f32, Error>;
    let mut _1: std::result::Result<f32, Error>;
    let mut _2: Error;

    bb0: {
        _2 = Error::Int;
        _1 = Result::<f32, Error>::Err(move _2);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &Result<f32, Error> = {
    let mut _0: &std::result::Result<f32, Error>;
    let mut _1: std::result::Result<f32, Error>;

    bb0: {
        _1 = Result::<f32, Error>::Ok(const 3f32);
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::result::Result<i32, std::num::ParseIntError>;

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 2_i32);
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::result::Result<i32, std::num::ParseIntError>;

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 1_i32);
        _0 = &_1;
        return;
    }
}

fn simple() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::result::Result<i32, std::num::ParseIntError>;
    let _2: &str;
    let mut _3: isize;
    let _4: i32;
    let _5: std::num::ParseIntError;
    let mut _6: std::num::ParseIntError;
    scope 1 {
        debug val => _4;
    }
    scope 2 {
        debug err => _5;
    }

    bb0: {
        _2 = const "1";
        _1 = core::str::<impl str>::parse::<i32>(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _5 = move ((_1 as Err).0: std::num::ParseIntError);
        _6 = <ParseIntError as From<ParseIntError>>::from(move _5) -> [return: bb5, unwind continue];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _4 = ((_1 as Ok).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_4);
        goto -> bb6;
    }

    bb5: {
        _0 = Result::<i32, ParseIntError>::Err(move _6);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

fn nested() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::result::Result<i32, std::num::ParseIntError>;
    let mut _2: &str;
    let _3: &str;
    let mut _4: &std::string::String;
    let _5: std::string::String;
    let mut _6: &i32;
    let _7: i32;
    let mut _8: std::result::Result<i32, std::num::ParseIntError>;
    let _9: &str;
    let mut _10: isize;
    let _11: i32;
    let _12: std::num::ParseIntError;
    let mut _13: std::num::ParseIntError;
    let mut _14: isize;
    let _15: i32;
    let _16: std::num::ParseIntError;
    let mut _17: std::num::ParseIntError;
    scope 1 {
        debug val => _11;
    }
    scope 2 {
        debug err => _12;
    }
    scope 3 {
        debug val => _15;
    }
    scope 4 {
        debug err => _16;
    }

    bb0: {
        _9 = const "2";
        _8 = core::str::<impl str>::parse::<i32>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _12 = move ((_8 as Err).0: std::num::ParseIntError);
        _13 = <ParseIntError as From<ParseIntError>>::from(move _12) -> [return: bb5, unwind continue];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _11 = ((_8 as Ok).0: i32);
        _7 = _11;
        _6 = &_7;
        _5 = <i32 as ToString>::to_string(move _6) -> [return: bb6, unwind continue];
    }

    bb5: {
        _0 = Result::<i32, ParseIntError>::Err(move _13);
        goto -> bb12;
    }

    bb6: {
        _4 = &_5;
        _3 = <String as Deref>::deref(move _4) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _2 = _3;
        _1 = core::str::<impl str>::parse::<i32>(move _2) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _14 = discriminant(_1);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_1 as Err).0: std::num::ParseIntError);
        _17 = <ParseIntError as From<ParseIntError>>::from(move _16) -> [return: bb11, unwind: bb13];
    }

    bb10: {
        _15 = ((_1 as Ok).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_15);
        drop(_5) -> [return: bb12, unwind continue];
    }

    bb11: {
        _0 = Result::<i32, ParseIntError>::Err(move _17);
        drop(_5) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_5) -> [return: bb14, unwind terminate];
    }

    bb14 (cleanup): {
        resume;
    }
}

fn merge_ok() -> Result<f32, Error> {
    let mut _0: std::result::Result<f32, Error>;
    let mut _1: f32;
    let mut _2: f32;
    let mut _3: std::result::Result<i32, std::num::ParseIntError>;
    let _4: &str;
    let mut _5: isize;
    let _6: i32;
    let _7: std::num::ParseIntError;
    let mut _8: Error;
    let mut _9: std::result::Result<f32, std::num::ParseFloatError>;
    let _10: &str;
    let mut _11: isize;
    let _12: f32;
    let _13: std::num::ParseFloatError;
    let mut _14: Error;
    scope 1 {
        debug val => _6;
    }
    scope 2 {
        debug err => _7;
    }
    scope 3 {
        debug val => _12;
    }
    scope 4 {
        debug err => _13;
    }

    bb0: {
        _4 = const "1";
        _3 = core::str::<impl str>::parse::<i32>(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: std::num::ParseIntError);
        _8 = <Error as From<ParseIntError>>::from(move _7) -> [return: bb5, unwind continue];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: i32);
        _2 = _6 as f32 (IntToFloat);
        _10 = const "2.0";
        _9 = core::str::<impl str>::parse::<f32>(_10) -> [return: bb6, unwind continue];
    }

    bb5: {
        _0 = Result::<f32, Error>::Err(move _8);
        goto -> bb10;
    }

    bb6: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb8, 1: bb7, otherwise: bb3];
    }

    bb7: {
        _13 = move ((_9 as Err).0: std::num::ParseFloatError);
        _14 = <Error as From<ParseFloatError>>::from(move _13) -> [return: bb9, unwind continue];
    }

    bb8: {
        _12 = ((_9 as Ok).0: f32);
        _1 = Add(move _2, _12);
        _0 = Result::<f32, Error>::Ok(move _1);
        goto -> bb10;
    }

    bb9: {
        _0 = Result::<f32, Error>::Err(move _14);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

fn merge_int_err() -> Result<f32, Error> {
    let mut _0: std::result::Result<f32, Error>;
    let mut _1: f32;
    let mut _2: f32;
    let mut _3: std::result::Result<i32, std::num::ParseIntError>;
    let _4: &str;
    let mut _5: isize;
    let _6: i32;
    let _7: std::num::ParseIntError;
    let mut _8: Error;
    let mut _9: std::result::Result<f32, std::num::ParseFloatError>;
    let _10: &str;
    let mut _11: isize;
    let _12: f32;
    let _13: std::num::ParseFloatError;
    let mut _14: Error;
    scope 1 {
        debug val => _6;
    }
    scope 2 {
        debug err => _7;
    }
    scope 3 {
        debug val => _12;
    }
    scope 4 {
        debug err => _13;
    }

    bb0: {
        _4 = const "a";
        _3 = core::str::<impl str>::parse::<i32>(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: std::num::ParseIntError);
        _8 = <Error as From<ParseIntError>>::from(move _7) -> [return: bb5, unwind continue];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: i32);
        _2 = _6 as f32 (IntToFloat);
        _10 = const "2.0";
        _9 = core::str::<impl str>::parse::<f32>(_10) -> [return: bb6, unwind continue];
    }

    bb5: {
        _0 = Result::<f32, Error>::Err(move _8);
        goto -> bb10;
    }

    bb6: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb8, 1: bb7, otherwise: bb3];
    }

    bb7: {
        _13 = move ((_9 as Err).0: std::num::ParseFloatError);
        _14 = <Error as From<ParseFloatError>>::from(move _13) -> [return: bb9, unwind continue];
    }

    bb8: {
        _12 = ((_9 as Ok).0: f32);
        _1 = Add(move _2, _12);
        _0 = Result::<f32, Error>::Ok(move _1);
        goto -> bb10;
    }

    bb9: {
        _0 = Result::<f32, Error>::Err(move _14);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

fn merge_float_err() -> Result<f32, Error> {
    let mut _0: std::result::Result<f32, Error>;
    let mut _1: f32;
    let mut _2: f32;
    let mut _3: std::result::Result<i32, std::num::ParseIntError>;
    let _4: &str;
    let mut _5: isize;
    let _6: i32;
    let _7: std::num::ParseIntError;
    let mut _8: Error;
    let mut _9: std::result::Result<f32, std::num::ParseFloatError>;
    let _10: &str;
    let mut _11: isize;
    let _12: f32;
    let _13: std::num::ParseFloatError;
    let mut _14: Error;
    scope 1 {
        debug val => _6;
    }
    scope 2 {
        debug err => _7;
    }
    scope 3 {
        debug val => _12;
    }
    scope 4 {
        debug err => _13;
    }

    bb0: {
        _4 = const "1";
        _3 = core::str::<impl str>::parse::<i32>(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: std::num::ParseIntError);
        _8 = <Error as From<ParseIntError>>::from(move _7) -> [return: bb5, unwind continue];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: i32);
        _2 = _6 as f32 (IntToFloat);
        _10 = const "b";
        _9 = core::str::<impl str>::parse::<f32>(_10) -> [return: bb6, unwind continue];
    }

    bb5: {
        _0 = Result::<f32, Error>::Err(move _8);
        goto -> bb10;
    }

    bb6: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb8, 1: bb7, otherwise: bb3];
    }

    bb7: {
        _13 = move ((_9 as Err).0: std::num::ParseFloatError);
        _14 = <Error as From<ParseFloatError>>::from(move _13) -> [return: bb9, unwind continue];
    }

    bb8: {
        _12 = ((_9 as Ok).0: f32);
        _1 = Add(move _2, _12);
        _0 = Result::<f32, Error>::Ok(move _1);
        goto -> bb10;
    }

    bb9: {
        _0 = Result::<f32, Error>::Err(move _14);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

fn <impl at ui/macros/try-macro.rs:33:10: 33:15>::fmt(_1: &Error, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _6 = const "Float";
        _3 = _6;
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Int";
        _3 = _5;
        goto -> bb4;
    }

    bb4: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn <impl at ui/macros/try-macro.rs:33:17: 33:26>::eq(_1: &Error, _2: &Error) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn <impl at ui/macros/try-macro.rs:39:1: 39:35>::from(_1: ParseIntError) -> Error {
    let mut _0: Error;

    bb0: {
        _0 = Error::Int;
        return;
    }
}

fn <impl at ui/macros/try-macro.rs:45:1: 45:37>::from(_1: ParseFloatError) -> Error {
    let mut _0: Error;

    bb0: {
        _0 = Error::Float;
        return;
    }
}
