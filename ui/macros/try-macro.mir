// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/macros/try-macro.rs:5:11: 5:11
    let mut _1: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/macros/try-macro.rs:6:16: 6:24
    let mut _4: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _20: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _21: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/macros/try-macro.rs:7:16: 7:24
    let mut _22: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _23: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _24: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _26: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _27: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _28: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _30: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _31: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _32: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _33: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _34: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _35: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _37: (&std::result::Result<f32, Error>, &std::result::Result<f32, Error>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _38: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _39: std::result::Result<f32, Error>; // in scope 0 at ui/macros/try-macro.rs:8:16: 8:26
    let mut _40: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _41: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _42: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _43: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _44: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _45: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _46: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _48: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _49: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _50: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _51: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _52: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _53: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _55: (&std::result::Result<f32, Error>, &std::result::Result<f32, Error>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _56: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _57: std::result::Result<f32, Error>; // in scope 0 at ui/macros/try-macro.rs:9:16: 9:31
    let mut _58: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _59: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _60: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _61: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _62: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _63: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _64: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _66: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _67: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _68: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _69: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _70: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _71: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _73: (&std::result::Result<f32, Error>, &std::result::Result<f32, Error>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _74: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _75: std::result::Result<f32, Error>; // in scope 0 at ui/macros/try-macro.rs:10:16: 10:33
    let mut _76: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _77: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _78: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _79: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _80: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _81: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _82: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _84: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _85: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _86: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _87: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _88: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _89: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _90: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _91: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _92: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _93: &std::result::Result<f32, Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _94: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _95: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _23;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _24;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _29: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _29;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _41;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _42;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _47: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _47;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug left_val => _59;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _60;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _65: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 8 {
            debug kind => _65;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 9 {
        debug left_val => _77;           // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _78;          // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _83: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 10 {
            debug kind => _83;           // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = simple() -> bb1;            // scope 0 at ui/macros/try-macro.rs:6:16: 6:24
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:6:16: 6:22
                                         // + literal: Const { ty: fn() -> Result<i32, ParseIntError> {simple}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _95 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Result<i32, ParseIntError>, val: Unevaluated(main, [], Some(promoted[4])) }
        _4 = _95;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_1.0: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_1.1: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = _5;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = <Result<i32, ParseIntError> as PartialEq>::eq(move _9, move _10) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>) -> bool {<Result<i32, ParseIntError> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = Not(move _8);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _11 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _13, move _14, move _16, move _18); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = nested() -> bb5;           // scope 0 at ui/macros/try-macro.rs:7:16: 7:24
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:7:16: 7:22
                                         // + literal: Const { ty: fn() -> Result<i32, ParseIntError> {nested}, val: Value(<ZST>) }
    }

    bb5: {
        _20 = &_21;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _94 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Result<i32, ParseIntError>, val: Unevaluated(main, [], Some(promoted[3])) }
        _22 = _94;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _19 = (move _20, move _22);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _23 = (_19.0: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _24 = (_19.1: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _27 = _23;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _28 = _24;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _26 = <Result<i32, ParseIntError> as PartialEq>::eq(move _27, move _28) -> bb6; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>) -> bool {<Result<i32, ParseIntError> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        _25 = Not(move _26);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _25) -> [0: bb8, otherwise: bb7]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _29 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _31 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _32 = _33;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _35 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _34 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _30 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _31, move _32, move _34, move _36); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>}, val: Value(<ZST>) }
    }

    bb8: {
        _39 = merge_ok() -> bb9;         // scope 0 at ui/macros/try-macro.rs:8:16: 8:26
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:8:16: 8:24
                                         // + literal: Const { ty: fn() -> Result<f32, Error> {merge_ok}, val: Value(<ZST>) }
    }

    bb9: {
        _38 = &_39;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _93 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Result<f32, Error>, val: Unevaluated(main, [], Some(promoted[2])) }
        _40 = _93;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _37 = (move _38, move _40);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _41 = (_37.0: &std::result::Result<f32, Error>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _42 = (_37.1: &std::result::Result<f32, Error>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _45 = _41;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _46 = _42;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _44 = <Result<f32, Error> as PartialEq>::eq(move _45, move _46) -> bb10; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<f32, Error>, &'b Result<f32, Error>) -> bool {<Result<f32, Error> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb10: {
        _43 = Not(move _44);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _43) -> [0: bb12, otherwise: bb11]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _47 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _49 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _51 = _41;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _50 = _51;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _53 = _42;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _52 = _53;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _54 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _48 = core::panicking::assert_failed::<Result<f32, Error>, Result<f32, Error>>(move _49, move _50, move _52, move _54); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<f32, Error>, &'b Result<f32, Error>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<f32, Error>, Result<f32, Error>>}, val: Value(<ZST>) }
    }

    bb12: {
        _57 = merge_int_err() -> bb13;   // scope 0 at ui/macros/try-macro.rs:9:16: 9:31
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:9:16: 9:29
                                         // + literal: Const { ty: fn() -> Result<f32, Error> {merge_int_err}, val: Value(<ZST>) }
    }

    bb13: {
        _56 = &_57;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _92 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Result<f32, Error>, val: Unevaluated(main, [], Some(promoted[1])) }
        _58 = _92;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _55 = (move _56, move _58);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _59 = (_55.0: &std::result::Result<f32, Error>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _60 = (_55.1: &std::result::Result<f32, Error>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _63 = _59;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _64 = _60;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _62 = <Result<f32, Error> as PartialEq>::eq(move _63, move _64) -> bb14; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<f32, Error>, &'b Result<f32, Error>) -> bool {<Result<f32, Error> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb14: {
        _61 = Not(move _62);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _61) -> [0: bb16, otherwise: bb15]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _65 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _67 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _69 = _59;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _68 = _69;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _71 = _60;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _70 = _71;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _72 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _66 = core::panicking::assert_failed::<Result<f32, Error>, Result<f32, Error>>(move _67, move _68, move _70, move _72); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<f32, Error>, &'b Result<f32, Error>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<f32, Error>, Result<f32, Error>>}, val: Value(<ZST>) }
    }

    bb16: {
        _75 = merge_float_err() -> bb17; // scope 0 at ui/macros/try-macro.rs:10:16: 10:33
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:10:16: 10:31
                                         // + literal: Const { ty: fn() -> Result<f32, Error> {merge_float_err}, val: Value(<ZST>) }
    }

    bb17: {
        _74 = &_75;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _91 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Result<f32, Error>, val: Unevaluated(main, [], Some(promoted[0])) }
        _76 = _91;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _73 = (move _74, move _76);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _77 = (_73.0: &std::result::Result<f32, Error>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _78 = (_73.1: &std::result::Result<f32, Error>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _81 = _77;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _82 = _78;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _80 = <Result<f32, Error> as PartialEq>::eq(move _81, move _82) -> bb18; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<f32, Error>, &'b Result<f32, Error>) -> bool {<Result<f32, Error> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb18: {
        _79 = Not(move _80);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _79) -> [0: bb20, otherwise: bb19]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb19: {
        _83 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _85 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _87 = _77;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _86 = _87;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _89 = _78;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _88 = _89;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _90 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _84 = core::panicking::assert_failed::<Result<f32, Error>, Result<f32, Error>>(move _85, move _86, move _88, move _90); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<f32, Error>, &'b Result<f32, Error>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<f32, Error>, Result<f32, Error>>}, val: Value(<ZST>) }
    }

    bb20: {
        return;                          // scope 0 at ui/macros/try-macro.rs:11:2: 11:2
    }
}

promoted[0] in main: &Result<f32, Error> = {
    let mut _0: &std::result::Result<f32, Error>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::result::Result<f32, Error>; // in scope 0 at ui/macros/try-macro.rs:10:35: 10:52
    let mut _2: Error;                   // in scope 0 at ui/macros/try-macro.rs:10:39: 10:51

    bb0: {
        _2 = Error::Float;               // scope 0 at ui/macros/try-macro.rs:10:39: 10:51
        _1 = Result::<f32, Error>::Err(move _2); // scope 0 at ui/macros/try-macro.rs:10:35: 10:52
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &Result<f32, Error> = {
    let mut _0: &std::result::Result<f32, Error>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::result::Result<f32, Error>; // in scope 0 at ui/macros/try-macro.rs:9:33: 9:48
    let mut _2: Error;                   // in scope 0 at ui/macros/try-macro.rs:9:37: 9:47

    bb0: {
        _2 = Error::Int;                 // scope 0 at ui/macros/try-macro.rs:9:37: 9:47
        _1 = Result::<f32, Error>::Err(move _2); // scope 0 at ui/macros/try-macro.rs:9:33: 9:48
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &Result<f32, Error> = {
    let mut _0: &std::result::Result<f32, Error>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::result::Result<f32, Error>; // in scope 0 at ui/macros/try-macro.rs:8:28: 8:35

    bb0: {
        _1 = Result::<f32, Error>::Ok(const 3f32); // scope 0 at ui/macros/try-macro.rs:8:28: 8:35
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/macros/try-macro.rs:7:26: 7:31

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 2_i32); // scope 0 at ui/macros/try-macro.rs:7:26: 7:31
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/macros/try-macro.rs:6:26: 6:31

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 1_i32); // scope 0 at ui/macros/try-macro.rs:6:26: 6:31
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn simple() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at ui/macros/try-macro.rs:13:16: 13:42
    let mut _1: i32;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:419:9: 424:10
    let mut _2: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/macros/try-macro.rs:14:13: 14:24
    let mut _3: &str;                    // in scope 0 at ui/macros/try-macro.rs:14:13: 14:24
    let _4: &str;                        // in scope 0 at ui/macros/try-macro.rs:14:13: 14:16
    let mut _5: isize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:13: 420:44
    let _6: i32;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
    let _7: std::num::ParseIntError;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
    let mut _8: std::num::ParseIntError; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:84
    let mut _9: std::num::ParseIntError; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:80: 422:83
    scope 1 {
        debug val => _6;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
    }
    scope 2 {
        debug err => _7;                 // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
    }

    bb0: {
        _4 = const "1";                  // scope 0 at ui/macros/try-macro.rs:14:13: 14:16
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:14:13: 14:16
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/macros/try-macro.rs:14:13: 14:24
        _2 = core::str::<impl str>::parse::<i32>(move _3) -> bb1; // scope 0 at ui/macros/try-macro.rs:14:13: 14:24
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:14:17: 14:22
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = discriminant(_2);           // scope 0 at ui/macros/try-macro.rs:14:13: 14:24
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:419:9: 419:9
    }

    bb2: {
        _7 = move ((_2 as Err).0: std::num::ParseIntError); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
        _9 = move _7;                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:80: 422:83
        _8 = <ParseIntError as From<ParseIntError>>::from(move _9) -> bb5; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:84
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:79
                                         // + literal: Const { ty: fn(ParseIntError) -> ParseIntError {<ParseIntError as From<ParseIntError>>::from}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at ui/macros/try-macro.rs:14:13: 14:24
    }

    bb4: {
        _6 = ((_2 as Ok).0: i32);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
        _1 = _6;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:48: 420:51
        _0 = Result::<i32, ParseIntError>::Ok(move _1); // scope 0 at ui/macros/try-macro.rs:14:5: 14:26
        goto -> bb6;                     // scope 0 at ui/macros/try-macro.rs:15:2: 15:2
    }

    bb5: {
        _0 = Result::<i32, ParseIntError>::Err(move _8); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:24: 422:85
        goto -> bb6;                     // scope 0 at ui/macros/try-macro.rs:15:2: 15:2
    }

    bb6: {
        return;                          // scope 0 at ui/macros/try-macro.rs:15:2: 15:2
    }
}

fn nested() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at ui/macros/try-macro.rs:17:16: 17:42
    let mut _1: i32;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:419:9: 424:10
    let mut _2: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/macros/try-macro.rs:18:13: 18:64
    let mut _3: &str;                    // in scope 0 at ui/macros/try-macro.rs:18:13: 18:64
    let _4: &str;                        // in scope 0 at ui/macros/try-macro.rs:18:13: 18:64
    let mut _5: &std::string::String;    // in scope 0 at ui/macros/try-macro.rs:18:13: 18:64
    let _6: std::string::String;         // in scope 0 at ui/macros/try-macro.rs:18:13: 18:49
    let mut _7: &i32;                    // in scope 0 at ui/macros/try-macro.rs:18:13: 18:49
    let _8: i32;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:419:9: 424:10
    let mut _9: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/macros/try-macro.rs:18:18: 18:36
    let mut _10: &str;                   // in scope 0 at ui/macros/try-macro.rs:18:18: 18:36
    let _11: &str;                       // in scope 0 at ui/macros/try-macro.rs:18:18: 18:21
    let mut _12: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:13: 420:44
    let _13: i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
    let _14: std::num::ParseIntError;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
    let mut _15: std::num::ParseIntError; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:84
    let mut _16: std::num::ParseIntError; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:80: 422:83
    let mut _17: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:13: 420:44
    let _18: i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
    let _19: std::num::ParseIntError;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
    let mut _20: std::num::ParseIntError; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:84
    let mut _21: std::num::ParseIntError; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:80: 422:83
    scope 1 {
        debug val => _13;                // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
    }
    scope 2 {
        debug err => _14;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
    }
    scope 3 {
        debug val => _18;                // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
    }
    scope 4 {
        debug err => _19;                // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
    }

    bb0: {
        _11 = const "2";                 // scope 0 at ui/macros/try-macro.rs:18:18: 18:21
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:18:18: 18:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = _11;                       // scope 0 at ui/macros/try-macro.rs:18:18: 18:36
        _9 = core::str::<impl str>::parse::<i32>(move _10) -> bb1; // scope 0 at ui/macros/try-macro.rs:18:18: 18:36
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:18:22: 18:27
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = discriminant(_9);          // scope 0 at ui/macros/try-macro.rs:18:18: 18:36
        switchInt(move _12) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:419:9: 419:9
    }

    bb2: {
        _14 = move ((_9 as Err).0: std::num::ParseIntError); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
        _16 = move _14;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:80: 422:83
        _15 = <ParseIntError as From<ParseIntError>>::from(move _16) -> bb5; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:84
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:79
                                         // + literal: Const { ty: fn(ParseIntError) -> ParseIntError {<ParseIntError as From<ParseIntError>>::from}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at ui/macros/try-macro.rs:18:18: 18:36
    }

    bb4: {
        _13 = ((_9 as Ok).0: i32);       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
        _8 = _13;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:48: 420:51
        _7 = &_8;                        // scope 0 at ui/macros/try-macro.rs:18:13: 18:49
        _6 = <i32 as ToString>::to_string(move _7) -> bb6; // scope 0 at ui/macros/try-macro.rs:18:13: 18:49
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:18:38: 18:47
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> String {<i32 as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = Result::<i32, ParseIntError>::Err(move _15); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:24: 422:85
        goto -> bb13;                    // scope 0 at no-location
    }

    bb6: {
        _5 = &_6;                        // scope 0 at ui/macros/try-macro.rs:18:13: 18:64
        _4 = <String as Deref>::deref(move _5) -> [return: bb7, unwind: bb14]; // scope 0 at ui/macros/try-macro.rs:18:13: 18:64
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:18:13: 18:64
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb7: {
        _3 = _4;                         // scope 0 at ui/macros/try-macro.rs:18:13: 18:64
        _2 = core::str::<impl str>::parse::<i32>(move _3) -> [return: bb8, unwind: bb14]; // scope 0 at ui/macros/try-macro.rs:18:13: 18:64
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:18:50: 18:55
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb8: {
        _17 = discriminant(_2);          // scope 0 at ui/macros/try-macro.rs:18:13: 18:64
        switchInt(move _17) -> [0: bb11, 1: bb9, otherwise: bb10]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:419:9: 419:9
    }

    bb9: {
        _19 = move ((_2 as Err).0: std::num::ParseIntError); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
        _21 = move _19;                  // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:80: 422:83
        _20 = <ParseIntError as From<ParseIntError>>::from(move _21) -> [return: bb12, unwind: bb14]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:84
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:79
                                         // + literal: Const { ty: fn(ParseIntError) -> ParseIntError {<ParseIntError as From<ParseIntError>>::from}, val: Value(<ZST>) }
    }

    bb10: {
        unreachable;                     // scope 0 at ui/macros/try-macro.rs:18:13: 18:64
    }

    bb11: {
        _18 = ((_2 as Ok).0: i32);       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
        _1 = _18;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:48: 420:51
        _0 = Result::<i32, ParseIntError>::Ok(move _1); // scope 0 at ui/macros/try-macro.rs:18:5: 18:66
        drop(_6) -> bb13;                // scope 0 at ui/macros/try-macro.rs:19:1: 19:2
    }

    bb12: {
        _0 = Result::<i32, ParseIntError>::Err(move _20); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:24: 422:85
        drop(_6) -> bb13;                // scope 0 at ui/macros/try-macro.rs:19:1: 19:2
    }

    bb13: {
        return;                          // scope 0 at ui/macros/try-macro.rs:19:2: 19:2
    }

    bb14 (cleanup): {
        drop(_6) -> bb15;                // scope 0 at ui/macros/try-macro.rs:19:1: 19:2
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at ui/macros/try-macro.rs:17:1: 19:2
    }
}

fn merge_ok() -> Result<f32, Error> {
    let mut _0: std::result::Result<f32, Error>; // return place in scope 0 at ui/macros/try-macro.rs:21:18: 21:36
    let mut _1: f32;                     // in scope 0 at ui/macros/try-macro.rs:22:8: 22:68
    let mut _2: f32;                     // in scope 0 at ui/macros/try-macro.rs:22:8: 22:39
    let mut _3: i32;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:419:9: 424:10
    let mut _4: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/macros/try-macro.rs:22:13: 22:31
    let mut _5: &str;                    // in scope 0 at ui/macros/try-macro.rs:22:13: 22:31
    let _6: &str;                        // in scope 0 at ui/macros/try-macro.rs:22:13: 22:16
    let mut _7: isize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:13: 420:44
    let _8: i32;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
    let _9: std::num::ParseIntError;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
    let mut _10: Error;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:84
    let mut _11: std::num::ParseIntError; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:80: 422:83
    let mut _12: f32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:419:9: 424:10
    let mut _13: std::result::Result<f32, std::num::ParseFloatError>; // in scope 0 at ui/macros/try-macro.rs:22:47: 22:67
    let mut _14: &str;                   // in scope 0 at ui/macros/try-macro.rs:22:47: 22:67
    let _15: &str;                       // in scope 0 at ui/macros/try-macro.rs:22:47: 22:52
    let mut _16: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:13: 420:44
    let _17: f32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
    let _18: std::num::ParseFloatError;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
    let mut _19: Error;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:84
    let mut _20: std::num::ParseFloatError; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:80: 422:83
    scope 1 {
        debug val => _8;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
    }
    scope 2 {
        debug err => _9;                 // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
    }
    scope 3 {
        debug val => _17;                // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
    }
    scope 4 {
        debug err => _18;                // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
    }

    bb0: {
        _6 = const "1";                  // scope 0 at ui/macros/try-macro.rs:22:13: 22:16
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:22:13: 22:16
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 0 at ui/macros/try-macro.rs:22:13: 22:31
        _4 = core::str::<impl str>::parse::<i32>(move _5) -> bb1; // scope 0 at ui/macros/try-macro.rs:22:13: 22:31
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:22:17: 22:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = discriminant(_4);           // scope 0 at ui/macros/try-macro.rs:22:13: 22:31
        switchInt(move _7) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:419:9: 419:9
    }

    bb2: {
        _9 = move ((_4 as Err).0: std::num::ParseIntError); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
        _11 = move _9;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:80: 422:83
        _10 = <Error as From<ParseIntError>>::from(move _11) -> bb5; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:84
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:79
                                         // + literal: Const { ty: fn(ParseIntError) -> Error {<Error as From<ParseIntError>>::from}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at ui/macros/try-macro.rs:22:13: 22:31
    }

    bb4: {
        _8 = ((_4 as Ok).0: i32);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
        _3 = _8;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:48: 420:51
        _2 = move _3 as f32 (IntToFloat); // scope 0 at ui/macros/try-macro.rs:22:8: 22:39
        _15 = const "2.0";               // scope 0 at ui/macros/try-macro.rs:22:47: 22:52
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:22:47: 22:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _14 = _15;                       // scope 0 at ui/macros/try-macro.rs:22:47: 22:67
        _13 = core::str::<impl str>::parse::<f32>(move _14) -> bb6; // scope 0 at ui/macros/try-macro.rs:22:47: 22:67
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:22:53: 22:58
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<f32, <f32 as FromStr>::Err> {core::str::<impl str>::parse::<f32>}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = Result::<f32, Error>::Err(move _10); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:24: 422:85
        goto -> bb11;                    // scope 0 at no-location
    }

    bb6: {
        _16 = discriminant(_13);         // scope 0 at ui/macros/try-macro.rs:22:47: 22:67
        switchInt(move _16) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:419:9: 419:9
    }

    bb7: {
        _18 = move ((_13 as Err).0: std::num::ParseFloatError); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
        _20 = move _18;                  // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:80: 422:83
        _19 = <Error as From<ParseFloatError>>::from(move _20) -> bb10; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:84
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:79
                                         // + literal: Const { ty: fn(ParseFloatError) -> Error {<Error as From<ParseFloatError>>::from}, val: Value(<ZST>) }
    }

    bb8: {
        unreachable;                     // scope 0 at ui/macros/try-macro.rs:22:47: 22:67
    }

    bb9: {
        _17 = ((_13 as Ok).0: f32);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
        _12 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:48: 420:51
        _1 = Add(move _2, move _12);     // scope 0 at ui/macros/try-macro.rs:22:8: 22:68
        _0 = Result::<f32, Error>::Ok(move _1); // scope 0 at ui/macros/try-macro.rs:22:5: 22:69
        goto -> bb11;                    // scope 0 at ui/macros/try-macro.rs:23:2: 23:2
    }

    bb10: {
        _0 = Result::<f32, Error>::Err(move _19); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:24: 422:85
        goto -> bb11;                    // scope 0 at no-location
    }

    bb11: {
        return;                          // scope 0 at ui/macros/try-macro.rs:23:2: 23:2
    }
}

fn merge_int_err() -> Result<f32, Error> {
    let mut _0: std::result::Result<f32, Error>; // return place in scope 0 at ui/macros/try-macro.rs:25:23: 25:41
    let mut _1: f32;                     // in scope 0 at ui/macros/try-macro.rs:26:8: 26:68
    let mut _2: f32;                     // in scope 0 at ui/macros/try-macro.rs:26:8: 26:39
    let mut _3: i32;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:419:9: 424:10
    let mut _4: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/macros/try-macro.rs:26:13: 26:31
    let mut _5: &str;                    // in scope 0 at ui/macros/try-macro.rs:26:13: 26:31
    let _6: &str;                        // in scope 0 at ui/macros/try-macro.rs:26:13: 26:16
    let mut _7: isize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:13: 420:44
    let _8: i32;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
    let _9: std::num::ParseIntError;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
    let mut _10: Error;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:84
    let mut _11: std::num::ParseIntError; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:80: 422:83
    let mut _12: f32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:419:9: 424:10
    let mut _13: std::result::Result<f32, std::num::ParseFloatError>; // in scope 0 at ui/macros/try-macro.rs:26:47: 26:67
    let mut _14: &str;                   // in scope 0 at ui/macros/try-macro.rs:26:47: 26:67
    let _15: &str;                       // in scope 0 at ui/macros/try-macro.rs:26:47: 26:52
    let mut _16: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:13: 420:44
    let _17: f32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
    let _18: std::num::ParseFloatError;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
    let mut _19: Error;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:84
    let mut _20: std::num::ParseFloatError; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:80: 422:83
    scope 1 {
        debug val => _8;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
    }
    scope 2 {
        debug err => _9;                 // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
    }
    scope 3 {
        debug val => _17;                // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
    }
    scope 4 {
        debug err => _18;                // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
    }

    bb0: {
        _6 = const "a";                  // scope 0 at ui/macros/try-macro.rs:26:13: 26:16
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:26:13: 26:16
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 0 at ui/macros/try-macro.rs:26:13: 26:31
        _4 = core::str::<impl str>::parse::<i32>(move _5) -> bb1; // scope 0 at ui/macros/try-macro.rs:26:13: 26:31
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:26:17: 26:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = discriminant(_4);           // scope 0 at ui/macros/try-macro.rs:26:13: 26:31
        switchInt(move _7) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:419:9: 419:9
    }

    bb2: {
        _9 = move ((_4 as Err).0: std::num::ParseIntError); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
        _11 = move _9;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:80: 422:83
        _10 = <Error as From<ParseIntError>>::from(move _11) -> bb5; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:84
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:79
                                         // + literal: Const { ty: fn(ParseIntError) -> Error {<Error as From<ParseIntError>>::from}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at ui/macros/try-macro.rs:26:13: 26:31
    }

    bb4: {
        _8 = ((_4 as Ok).0: i32);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
        _3 = _8;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:48: 420:51
        _2 = move _3 as f32 (IntToFloat); // scope 0 at ui/macros/try-macro.rs:26:8: 26:39
        _15 = const "2.0";               // scope 0 at ui/macros/try-macro.rs:26:47: 26:52
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:26:47: 26:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _14 = _15;                       // scope 0 at ui/macros/try-macro.rs:26:47: 26:67
        _13 = core::str::<impl str>::parse::<f32>(move _14) -> bb6; // scope 0 at ui/macros/try-macro.rs:26:47: 26:67
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:26:53: 26:58
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<f32, <f32 as FromStr>::Err> {core::str::<impl str>::parse::<f32>}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = Result::<f32, Error>::Err(move _10); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:24: 422:85
        goto -> bb11;                    // scope 0 at no-location
    }

    bb6: {
        _16 = discriminant(_13);         // scope 0 at ui/macros/try-macro.rs:26:47: 26:67
        switchInt(move _16) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:419:9: 419:9
    }

    bb7: {
        _18 = move ((_13 as Err).0: std::num::ParseFloatError); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
        _20 = move _18;                  // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:80: 422:83
        _19 = <Error as From<ParseFloatError>>::from(move _20) -> bb10; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:84
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:79
                                         // + literal: Const { ty: fn(ParseFloatError) -> Error {<Error as From<ParseFloatError>>::from}, val: Value(<ZST>) }
    }

    bb8: {
        unreachable;                     // scope 0 at ui/macros/try-macro.rs:26:47: 26:67
    }

    bb9: {
        _17 = ((_13 as Ok).0: f32);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
        _12 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:48: 420:51
        _1 = Add(move _2, move _12);     // scope 0 at ui/macros/try-macro.rs:26:8: 26:68
        _0 = Result::<f32, Error>::Ok(move _1); // scope 0 at ui/macros/try-macro.rs:26:5: 26:69
        goto -> bb11;                    // scope 0 at ui/macros/try-macro.rs:27:2: 27:2
    }

    bb10: {
        _0 = Result::<f32, Error>::Err(move _19); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:24: 422:85
        goto -> bb11;                    // scope 0 at no-location
    }

    bb11: {
        return;                          // scope 0 at ui/macros/try-macro.rs:27:2: 27:2
    }
}

fn merge_float_err() -> Result<f32, Error> {
    let mut _0: std::result::Result<f32, Error>; // return place in scope 0 at ui/macros/try-macro.rs:29:25: 29:43
    let mut _1: f32;                     // in scope 0 at ui/macros/try-macro.rs:30:8: 30:66
    let mut _2: f32;                     // in scope 0 at ui/macros/try-macro.rs:30:8: 30:39
    let mut _3: i32;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:419:9: 424:10
    let mut _4: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/macros/try-macro.rs:30:13: 30:31
    let mut _5: &str;                    // in scope 0 at ui/macros/try-macro.rs:30:13: 30:31
    let _6: &str;                        // in scope 0 at ui/macros/try-macro.rs:30:13: 30:16
    let mut _7: isize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:13: 420:44
    let _8: i32;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
    let _9: std::num::ParseIntError;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
    let mut _10: Error;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:84
    let mut _11: std::num::ParseIntError; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:80: 422:83
    let mut _12: f32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:419:9: 424:10
    let mut _13: std::result::Result<f32, std::num::ParseFloatError>; // in scope 0 at ui/macros/try-macro.rs:30:47: 30:65
    let mut _14: &str;                   // in scope 0 at ui/macros/try-macro.rs:30:47: 30:65
    let _15: &str;                       // in scope 0 at ui/macros/try-macro.rs:30:47: 30:50
    let mut _16: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:13: 420:44
    let _17: f32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
    let _18: std::num::ParseFloatError;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
    let mut _19: Error;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:84
    let mut _20: std::num::ParseFloatError; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:80: 422:83
    scope 1 {
        debug val => _8;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
    }
    scope 2 {
        debug err => _9;                 // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
    }
    scope 3 {
        debug val => _17;                // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
    }
    scope 4 {
        debug err => _18;                // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
    }

    bb0: {
        _6 = const "1";                  // scope 0 at ui/macros/try-macro.rs:30:13: 30:16
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:30:13: 30:16
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 0 at ui/macros/try-macro.rs:30:13: 30:31
        _4 = core::str::<impl str>::parse::<i32>(move _5) -> bb1; // scope 0 at ui/macros/try-macro.rs:30:13: 30:31
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:30:17: 30:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = discriminant(_4);           // scope 0 at ui/macros/try-macro.rs:30:13: 30:31
        switchInt(move _7) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:419:9: 419:9
    }

    bb2: {
        _9 = move ((_4 as Err).0: std::num::ParseIntError); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
        _11 = move _9;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:80: 422:83
        _10 = <Error as From<ParseIntError>>::from(move _11) -> bb5; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:84
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:79
                                         // + literal: Const { ty: fn(ParseIntError) -> Error {<Error as From<ParseIntError>>::from}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at ui/macros/try-macro.rs:30:13: 30:31
    }

    bb4: {
        _8 = ((_4 as Ok).0: i32);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
        _3 = _8;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:48: 420:51
        _2 = move _3 as f32 (IntToFloat); // scope 0 at ui/macros/try-macro.rs:30:8: 30:39
        _15 = const "b";                 // scope 0 at ui/macros/try-macro.rs:30:47: 30:50
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:30:47: 30:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _14 = _15;                       // scope 0 at ui/macros/try-macro.rs:30:47: 30:65
        _13 = core::str::<impl str>::parse::<f32>(move _14) -> bb6; // scope 0 at ui/macros/try-macro.rs:30:47: 30:65
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:30:51: 30:56
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<f32, <f32 as FromStr>::Err> {core::str::<impl str>::parse::<f32>}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = Result::<f32, Error>::Err(move _10); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:24: 422:85
        goto -> bb11;                    // scope 0 at no-location
    }

    bb6: {
        _16 = discriminant(_13);         // scope 0 at ui/macros/try-macro.rs:30:47: 30:65
        switchInt(move _16) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:419:9: 419:9
    }

    bb7: {
        _18 = move ((_13 as Err).0: std::num::ParseFloatError); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:421:41: 421:44
        _20 = move _18;                  // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:80: 422:83
        _19 = <Error as From<ParseFloatError>>::from(move _20) -> bb10; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:84
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:52: 422:79
                                         // + literal: Const { ty: fn(ParseFloatError) -> Error {<Error as From<ParseFloatError>>::from}, val: Value(<ZST>) }
    }

    bb8: {
        unreachable;                     // scope 0 at ui/macros/try-macro.rs:30:47: 30:65
    }

    bb9: {
        _17 = ((_13 as Ok).0: f32);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:40: 420:43
        _12 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:420:48: 420:51
        _1 = Add(move _2, move _12);     // scope 0 at ui/macros/try-macro.rs:30:8: 30:66
        _0 = Result::<f32, Error>::Ok(move _1); // scope 0 at ui/macros/try-macro.rs:30:5: 30:67
        goto -> bb11;                    // scope 0 at ui/macros/try-macro.rs:31:2: 31:2
    }

    bb10: {
        _0 = Result::<f32, Error>::Err(move _19); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:422:24: 422:85
        goto -> bb11;                    // scope 0 at no-location
    }

    bb11: {
        return;                          // scope 0 at ui/macros/try-macro.rs:31:2: 31:2
    }
}

fn <impl at ui/macros/try-macro.rs:33:10: 33:15>::fmt(_1: &Error, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/macros/try-macro.rs:33:10: 33:15
    debug f => _2;                       // in scope 0 at ui/macros/try-macro.rs:33:10: 33:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/macros/try-macro.rs:33:10: 33:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/macros/try-macro.rs:33:10: 33:15
    let mut _4: &str;                    // in scope 0 at ui/macros/try-macro.rs:33:10: 33:15
    let mut _5: isize;                   // in scope 0 at ui/macros/try-macro.rs:33:10: 33:15
    let _6: &str;                        // in scope 0 at ui/macros/try-macro.rs:33:10: 33:15
    let _7: &str;                        // in scope 0 at ui/macros/try-macro.rs:33:10: 33:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/macros/try-macro.rs:33:10: 33:15
        _5 = discriminant((*_1));        // scope 0 at ui/macros/try-macro.rs:33:10: 33:15
        switchInt(move _5) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/macros/try-macro.rs:33:10: 33:15
    }

    bb1: {
        _7 = const "Float";              // scope 0 at ui/macros/try-macro.rs:33:10: 33:15
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:33:10: 33:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _7;                         // scope 0 at ui/macros/try-macro.rs:33:10: 33:15
        goto -> bb4;                     // scope 0 at ui/macros/try-macro.rs:33:14: 33:15
    }

    bb2: {
        unreachable;                     // scope 0 at ui/macros/try-macro.rs:33:10: 33:15
    }

    bb3: {
        _6 = const "Int";                // scope 0 at ui/macros/try-macro.rs:33:10: 33:15
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:33:10: 33:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _6;                         // scope 0 at ui/macros/try-macro.rs:33:10: 33:15
        goto -> bb4;                     // scope 0 at ui/macros/try-macro.rs:33:14: 33:15
    }

    bb4: {
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb5; // scope 0 at ui/macros/try-macro.rs:33:10: 33:15
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:33:10: 33:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/macros/try-macro.rs:33:15: 33:15
    }
}

fn <impl at ui/macros/try-macro.rs:33:17: 33:26>::eq(_1: &Error, _2: &Error) -> bool {
    debug self => _1;                    // in scope 0 at ui/macros/try-macro.rs:33:17: 33:26
    debug other => _2;                   // in scope 0 at ui/macros/try-macro.rs:33:17: 33:26
    let mut _0: bool;                    // return place in scope 0 at ui/macros/try-macro.rs:33:17: 33:26
    let _3: isize;                       // in scope 0 at ui/macros/try-macro.rs:33:17: 33:26
    let mut _4: &Error;                  // in scope 0 at ui/macros/try-macro.rs:33:17: 33:26
    let mut _6: &Error;                  // in scope 0 at ui/macros/try-macro.rs:33:17: 33:26
    let mut _7: isize;                   // in scope 0 at ui/macros/try-macro.rs:33:17: 33:26
    let mut _8: isize;                   // in scope 0 at ui/macros/try-macro.rs:33:17: 33:26
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/macros/try-macro.rs:33:17: 33:26
        let _5: isize;                   // in scope 1 at ui/macros/try-macro.rs:33:17: 33:26
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/macros/try-macro.rs:33:17: 33:26
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/macros/try-macro.rs:33:17: 33:26
        _3 = discriminant((*_4));        // scope 0 at ui/macros/try-macro.rs:33:17: 33:26
        _6 = _2;                         // scope 1 at ui/macros/try-macro.rs:33:17: 33:26
        _5 = discriminant((*_6));        // scope 1 at ui/macros/try-macro.rs:33:17: 33:26
        _7 = _3;                         // scope 2 at ui/macros/try-macro.rs:33:17: 33:26
        _8 = _5;                         // scope 2 at ui/macros/try-macro.rs:33:17: 33:26
        _0 = Eq(move _7, move _8);       // scope 2 at ui/macros/try-macro.rs:33:17: 33:26
        return;                          // scope 0 at ui/macros/try-macro.rs:33:26: 33:26
    }
}

fn <impl at ui/macros/try-macro.rs:39:1: 39:35>::from(_1: ParseIntError) -> Error {
    let mut _0: Error;                   // return place in scope 0 at ui/macros/try-macro.rs:40:34: 40:39

    bb0: {
        _0 = const Error::Int;           // scope 0 at ui/macros/try-macro.rs:41:9: 41:19
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:41:9: 41:19
                                         // + literal: Const { ty: Error, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/macros/try-macro.rs:42:6: 42:6
    }
}

fn <impl at ui/macros/try-macro.rs:45:1: 45:37>::from(_1: ParseFloatError) -> Error {
    let mut _0: Error;                   // return place in scope 0 at ui/macros/try-macro.rs:46:36: 46:41

    bb0: {
        _0 = const Error::Float;         // scope 0 at ui/macros/try-macro.rs:47:9: 47:21
                                         // mir::Constant
                                         // + span: ui/macros/try-macro.rs:47:9: 47:21
                                         // + literal: Const { ty: Error, val: Value(Scalar(0x01)) }
        return;                          // scope 0 at ui/macros/try-macro.rs:48:6: 48:6
    }
}
