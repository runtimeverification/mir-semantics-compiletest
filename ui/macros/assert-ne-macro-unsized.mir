// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/macros/assert-ne-macro-unsized.rs:2:15: 2:15
    let mut _1: (&[i32], &[i32]);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:15: 88:32
    let mut _2: &[i32];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
    let _3: &[i32];                      // in scope 0 at ui/macros/assert-ne-macro-unsized.rs:3:16: 3:29
    let mut _4: &[i32; 3];               // in scope 0 at ui/macros/assert-ne-macro-unsized.rs:3:16: 3:25
    let mut _5: std::ops::RangeFull;     // in scope 0 at ui/macros/assert-ne-macro-unsized.rs:3:26: 3:28
    let mut _6: &[i32];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
    let _7: &[i32];                      // in scope 0 at ui/macros/assert-ne-macro-unsized.rs:3:31: 3:48
    let mut _8: &std::vec::Vec<i32>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let _9: std::vec::Vec<i32>;          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _10: std::boxed::Box<[i32]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _11: std::boxed::Box<[i32; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _12: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _13: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _14: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _15: std::boxed::Box<[i32; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _16: std::ops::RangeFull;    // in scope 0 at ui/macros/assert-ne-macro-unsized.rs:3:45: 3:47
    let _17: &[i32];                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
    let _18: &[i32];                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
    let mut _19: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
    let mut _20: &[i32];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:29
    let mut _21: &[i32];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:33: 90:43
    let _23: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:114
    let mut _24: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
    let mut _25: &[i32];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
    let _26: &[i32];                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
    let mut _27: &[i32];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
    let _28: &[i32];                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:85: 95:113
    let mut _30: &[i32; 3];              // in scope 0 at ui/macros/assert-ne-macro-unsized.rs:3:16: 3:25
    let mut _31: *const [i32; 3];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
    }
    scope 2 {
        debug left_val => _17;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
        debug right_val => _18;          // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
        let _22: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:25: 91:29
        scope 3 {
            debug kind => _22;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:25: 91:29
        }
    }

    bb0: {
        _30 = const _;                   // scope 0 at ui/macros/assert-ne-macro-unsized.rs:3:16: 3:25
                                         // mir::Constant
                                         // + span: ui/macros/assert-ne-macro-unsized.rs:3:16: 3:25
                                         // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }
        _4 = _30;                        // scope 0 at ui/macros/assert-ne-macro-unsized.rs:3:16: 3:25
        _3 = <[i32; 3] as Index<RangeFull>>::index(move _4, move _5) -> bb1; // scope 0 at ui/macros/assert-ne-macro-unsized.rs:3:16: 3:29
                                         // mir::Constant
                                         // + span: ui/macros/assert-ne-macro-unsized.rs:3:16: 3:29
                                         // + literal: Const { ty: for<'a> fn(&'a [i32; 3], RangeFull) -> &'a <[i32; 3] as Index<RangeFull>>::Output {<[i32; 3] as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _3;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
        _12 = const 12_usize;            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _13 = const 4_usize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _14 = alloc::alloc::exchange_malloc(move _12, move _13) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb2: {
        _15 = ShallowInitBox(move _14, [i32; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _31 = (((_15.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_31) = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _11 = move _15;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _10 = move _11 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _10) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
        _7 = <Vec<i32> as Index<RangeFull>>::index(move _8, move _16) -> [return: bb4, unwind: bb9]; // scope 0 at ui/macros/assert-ne-macro-unsized.rs:3:31: 3:48
                                         // mir::Constant
                                         // + span: ui/macros/assert-ne-macro-unsized.rs:3:31: 3:48
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>, RangeFull) -> &'a <Vec<i32> as Index<RangeFull>>::Output {<Vec<i32> as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = _7;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
        _1 = (move _2, move _6);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:15: 88:32
        _17 = (_1.0: &[i32]);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
        _18 = (_1.1: &[i32]);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
        _20 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:29
        _21 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:33: 90:43
        _19 = <[i32] as PartialEq>::eq(move _20, move _21) -> [return: bb5, unwind: bb9]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [i32], &'b [i32]) -> bool {<[i32] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        switchInt(move _19) -> [0: bb7, otherwise: bb6]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
    }

    bb6: {
        _22 = const core::panicking::AssertKind::Ne; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:32: 91:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:32: 91:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x01)) }
        _24 = const core::panicking::AssertKind::Ne; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x01)) }
        _26 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
        _25 = _26;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
        _28 = _18;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
        _27 = _28;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
        _29 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:85: 95:113
        _23 = core::panicking::assert_failed::<[i32], [i32]>(move _24, move _25, move _27, move _29) -> bb9; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [i32], &'b [i32], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[i32], [i32]>}, val: Value(<ZST>) }
    }

    bb7: {
        drop(_9) -> bb8;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:98:9: 98:10
    }

    bb8: {
        return;                          // scope 0 at ui/macros/assert-ne-macro-unsized.rs:4:2: 4:2
    }

    bb9 (cleanup): {
        drop(_9) -> bb10;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:98:9: 98:10
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/macros/assert-ne-macro-unsized.rs:2:1: 4:2
    }
}

promoted[0] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];               // return place in scope 0 at ui/macros/assert-ne-macro-unsized.rs:3:16: 3:25
    let mut _1: [i32; 3];                // in scope 0 at ui/macros/assert-ne-macro-unsized.rs:3:16: 3:25

    bb0: {
        _1 = [const 6_i32, const 6_i32, const 6_i32]; // scope 0 at ui/macros/assert-ne-macro-unsized.rs:3:16: 3:25
        _0 = &_1;                        // scope 0 at ui/macros/assert-ne-macro-unsized.rs:3:16: 3:25
        return;                          // scope 0 at ui/macros/assert-ne-macro-unsized.rs:3:16: 3:25
    }
}
