// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 0];
    let _6: [core::fmt::rt::Argument<'_>; 0];
    let _7: ();
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let _10: ();
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let _14: &[core::fmt::rt::Argument<'_>; 0];
    let _15: [core::fmt::rt::Argument<'_>; 0];
    let _16: ();
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let _19: ();
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let _23: &[core::fmt::rt::Argument<'_>; 0];
    let _24: [core::fmt::rt::Argument<'_>; 0];
    let _25: ();
    let mut _26: std::fmt::Arguments<'_>;
    let mut _27: &[&str];
    let _28: ();
    let mut _29: std::fmt::Arguments<'_>;
    let mut _30: &[&str];
    let mut _31: &[core::fmt::rt::Argument<'_>];
    let _32: &[core::fmt::rt::Argument<'_>; 0];
    let _33: [core::fmt::rt::Argument<'_>; 0];
    let _34: ();
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let _37: ();
    let mut _38: std::fmt::Arguments<'_>;
    let mut _39: &[&str];
    let mut _40: &[&str; 1];
    let mut _41: &[&str; 1];
    let mut _42: &[&str; 1];
    let mut _43: &[&str; 1];
    let mut _44: &[&str; 1];
    let mut _45: &[&str; 1];
    let mut _46: &[&str; 1];
    let mut _47: &[&str; 1];
    let mut _48: &[&str; 1];

    bb0: {
        _48 = const _;
        _3 = _48 as &[&str] (Pointer(Unsize));
        _6 = core::fmt::rt::Argument::<'_>::none() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = _print(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _47 = const _;
        _9 = _47 as &[&str] (Pointer(Unsize));
        _8 = Arguments::<'_>::new_const(move _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = _print(move _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        _46 = const _;
        _12 = _46 as &[&str] (Pointer(Unsize));
        _15 = core::fmt::rt::Argument::<'_>::none() -> [return: bb6, unwind continue];
    }

    bb6: {
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _11 = Arguments::<'_>::new_v1(move _12, move _13) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = _print(move _11) -> [return: bb8, unwind continue];
    }

    bb8: {
        _45 = const _;
        _18 = _45 as &[&str] (Pointer(Unsize));
        _17 = Arguments::<'_>::new_const(move _18) -> [return: bb9, unwind continue];
    }

    bb9: {
        _16 = _print(move _17) -> [return: bb10, unwind continue];
    }

    bb10: {
        _44 = const _;
        _21 = _44 as &[&str] (Pointer(Unsize));
        _24 = core::fmt::rt::Argument::<'_>::none() -> [return: bb11, unwind continue];
    }

    bb11: {
        _23 = &_24;
        _22 = _23 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _20 = Arguments::<'_>::new_v1(move _21, move _22) -> [return: bb12, unwind continue];
    }

    bb12: {
        _19 = _print(move _20) -> [return: bb13, unwind continue];
    }

    bb13: {
        _43 = const _;
        _27 = _43 as &[&str] (Pointer(Unsize));
        _26 = Arguments::<'_>::new_const(move _27) -> [return: bb14, unwind continue];
    }

    bb14: {
        _25 = _print(move _26) -> [return: bb15, unwind continue];
    }

    bb15: {
        _42 = const _;
        _30 = _42 as &[&str] (Pointer(Unsize));
        _33 = core::fmt::rt::Argument::<'_>::none() -> [return: bb16, unwind continue];
    }

    bb16: {
        _32 = &_33;
        _31 = _32 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _29 = Arguments::<'_>::new_v1(move _30, move _31) -> [return: bb17, unwind continue];
    }

    bb17: {
        _28 = _print(move _29) -> [return: bb18, unwind continue];
    }

    bb18: {
        _41 = const _;
        _36 = _41 as &[&str] (Pointer(Unsize));
        _35 = Arguments::<'_>::new_const(move _36) -> [return: bb19, unwind continue];
    }

    bb19: {
        _34 = _print(move _35) -> [return: bb20, unwind continue];
    }

    bb20: {
        _40 = const _;
        _39 = _40 as &[&str] (Pointer(Unsize));
        _38 = Arguments::<'_>::new_const(move _39) -> [return: bb21, unwind continue];
    }

    bb21: {
        _37 = _print(move _38) -> [return: bb22, unwind continue];
    }

    bb22: {
        return;
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "]\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ", "];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "w"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ", "];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "z"];
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ", "];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "y"];
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "::["];
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "x"];
        _0 = &_1;
        return;
    }
}
