// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::string::String;
    let _2: std::result::Result<(), std::fmt::Error>;
    let mut _3: &mut std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 0];
    let _8: [core::fmt::rt::Argument<'_>; 0];
    scope 1 {
        debug example => _1;
        let mut _9: &[&str; 1];
    }

    bb0: {
        _1 = String::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &mut _1;
        _9 = const _;
        _5 = _9 as &[&str] (Pointer(Unsize));
        _8 = core::fmt::rt::Argument::<'_>::none() -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _2 = <String as std::fmt::Write>::write_fmt(_3, move _4) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_1) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "42"];
        _0 = &_1;
        return;
    }
}
