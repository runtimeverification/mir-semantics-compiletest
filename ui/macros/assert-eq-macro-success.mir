// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/macros/assert-eq-macro-success.rs:2:10: 2:19>::eq(_1: &Point, _2: &Point) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: isize;
    let mut _4: isize;

    bb0: {
        _3 = ((*_1).0: isize);
        _4 = ((*_2).0: isize);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn <impl at ui/macros/assert-eq-macro-success.rs:2:21: 2:26>::fmt(_1: &Point, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&isize;
    let _7: &isize;

    bb0: {
        _3 = const "Point";
        _4 = const "x";
        _7 = &((*_1).0: isize);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let _2: &i32;
    let _3: &i32;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: i32;
    let mut _7: i32;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&std::string::String, &std::string::String);
    let mut _12: &std::string::String;
    let _13: std::string::String;
    let _14: &str;
    let mut _15: &std::string::String;
    let _16: std::string::String;
    let _17: &str;
    let _18: &std::string::String;
    let _19: &std::string::String;
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&std::boxed::Box<Point>, &std::boxed::Box<Point>);
    let mut _26: &std::boxed::Box<Point>;
    let _27: std::boxed::Box<Point>;
    let mut _28: Point;
    let mut _29: &std::boxed::Box<Point>;
    let _30: std::boxed::Box<Point>;
    let mut _31: Point;
    let _32: &std::boxed::Box<Point>;
    let _33: &std::boxed::Box<Point>;
    let mut _34: bool;
    let mut _35: bool;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: (&&Point, &&Point);
    let _40: &&Point;
    let _41: &&Point;
    let mut _42: bool;
    let mut _43: bool;
    let _45: !;
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _47: (&i32, &i32);
    let _48: &i32;
    let _49: &i32;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: i32;
    let mut _53: i32;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: std::fmt::Arguments<'_>;
    let mut _58: &[&str];
    let mut _59: (&i32, &i32);
    let _60: &i32;
    let _61: &i32;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: i32;
    let mut _65: i32;
    let _67: !;
    let mut _68: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _69: std::fmt::Arguments<'_>;
    let mut _70: &[&str];
    let mut _71: &[core::fmt::rt::Argument<'_>];
    let _72: &[core::fmt::rt::Argument<'_>; 0];
    let _73: [core::fmt::rt::Argument<'_>; 0];
    let mut _74: (&i32, &i32);
    let _75: &i32;
    let _76: &i32;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: i32;
    let mut _80: i32;
    let _82: !;
    let mut _83: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _84: std::fmt::Arguments<'_>;
    let mut _85: &[&str];
    let mut _86: &[core::fmt::rt::Argument<'_>];
    let _87: &[core::fmt::rt::Argument<'_>; 0];
    let _88: [core::fmt::rt::Argument<'_>; 0];
    let mut _92: &i32;
    let mut _93: &i32;
    let mut _94: &i32;
    let mut _95: &i32;
    let mut _96: &i32;
    let mut _97: &i32;
    let mut _98: &&Point;
    let mut _99: &&Point;
    let mut _100: &i32;
    let mut _101: &i32;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }
    scope 5 {
        debug left_val => _32;
        debug right_val => _33;
        let _36: core::panicking::AssertKind;
        scope 6 {
            debug kind => _36;
        }
    }
    scope 7 {
        debug left_val => _40;
        debug right_val => _41;
        let _44: core::panicking::AssertKind;
        scope 8 {
            debug kind => _44;
        }
    }
    scope 9 {
        debug left_val => _48;
        debug right_val => _49;
        let _54: core::panicking::AssertKind;
        scope 10 {
            debug kind => _54;
            let mut _89: &[&str; 1];
        }
    }
    scope 11 {
        debug left_val => _60;
        debug right_val => _61;
        let _66: core::panicking::AssertKind;
        scope 12 {
            debug kind => _66;
            let mut _90: &[&str; 1];
        }
    }
    scope 13 {
        debug left_val => _75;
        debug right_val => _76;
        let _81: core::panicking::AssertKind;
        scope 14 {
            debug kind => _81;
            let mut _91: &[&str; 1];
        }
    }

    bb0: {
        _101 = const _;
        _100 = const _;
        _1 = (_101, _100);
        _2 = (_1.0: &i32);
        _3 = (_1.1: &i32);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<i32, i32>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        _14 = const "abc";
        _13 = <str as ToString>::to_string(_14) -> [return: bb3, unwind continue];
    }

    bb3: {
        _12 = &_13;
        _17 = const "abc";
        _16 = <str as ToString>::to_string(_17) -> [return: bb4, unwind: bb34];
    }

    bb4: {
        _15 = &_16;
        _11 = (move _12, move _15);
        _18 = (_11.0: &std::string::String);
        _19 = (_11.1: &std::string::String);
        _21 = <String as PartialEq>::eq(_18, _19) -> [return: bb5, unwind: bb33];
    }

    bb5: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<String, String>(move _22, _18, _19, move _24) -> bb33;
    }

    bb7: {
        drop(_16) -> [return: bb8, unwind: bb34];
    }

    bb8: {
        drop(_13) -> [return: bb9, unwind continue];
    }

    bb9: {
        _28 = Point { x: const 34_isize };
        _27 = Box::<Point>::new(move _28) -> [return: bb10, unwind continue];
    }

    bb10: {
        _26 = &_27;
        _31 = Point { x: const 34_isize };
        _30 = Box::<Point>::new(move _31) -> [return: bb11, unwind: bb32];
    }

    bb11: {
        _29 = &_30;
        _25 = (move _26, move _29);
        _32 = (_25.0: &std::boxed::Box<Point>);
        _33 = (_25.1: &std::boxed::Box<Point>);
        _35 = <Box<Point> as PartialEq>::eq(_32, _33) -> [return: bb12, unwind: bb31];
    }

    bb12: {
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<Box<Point>, Box<Point>>(move _36, _32, _33, move _38) -> bb31;
    }

    bb14: {
        drop(_30) -> [return: bb15, unwind: bb32];
    }

    bb15: {
        drop(_27) -> [return: bb16, unwind continue];
    }

    bb16: {
        _99 = const _;
        _98 = const _;
        _39 = (_99, _98);
        _40 = (_39.0: &&Point);
        _41 = (_39.1: &&Point);
        _43 = <&Point as PartialEq>::eq(_40, _41) -> [return: bb17, unwind continue];
    }

    bb17: {
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _44 = core::panicking::AssertKind::Eq;
        _46 = Option::<Arguments<'_>>::None;
        _45 = core::panicking::assert_failed::<&Point, &Point>(move _44, _40, _41, move _46) -> unwind continue;
    }

    bb19: {
        _97 = const _;
        _96 = const _;
        _47 = (_97, _96);
        _48 = (_47.0: &i32);
        _49 = (_47.1: &i32);
        _52 = (*_48);
        _53 = (*_49);
        _51 = Eq(move _52, move _53);
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _54 = core::panicking::AssertKind::Eq;
        _89 = const _;
        _58 = _89 as &[&str] (Pointer(Unsize));
        _57 = Arguments::<'_>::new_const(move _58) -> [return: bb22, unwind continue];
    }

    bb21: {
        _95 = const _;
        _94 = const _;
        _59 = (_95, _94);
        _60 = (_59.0: &i32);
        _61 = (_59.1: &i32);
        _64 = (*_60);
        _65 = (*_61);
        _63 = Eq(move _64, move _65);
        _62 = Not(move _63);
        switchInt(move _62) -> [0: bb24, otherwise: bb23];
    }

    bb22: {
        _56 = Option::<Arguments<'_>>::Some(move _57);
        _55 = core::panicking::assert_failed::<i32, i32>(move _54, _48, _49, move _56) -> unwind continue;
    }

    bb23: {
        _66 = core::panicking::AssertKind::Eq;
        _90 = const _;
        _70 = _90 as &[&str] (Pointer(Unsize));
        _73 = core::fmt::rt::Argument::<'_>::none() -> [return: bb25, unwind continue];
    }

    bb24: {
        _93 = const _;
        _92 = const _;
        _74 = (_93, _92);
        _75 = (_74.0: &i32);
        _76 = (_74.1: &i32);
        _79 = (*_75);
        _80 = (*_76);
        _78 = Eq(move _79, move _80);
        _77 = Not(move _78);
        switchInt(move _77) -> [0: bb28, otherwise: bb27];
    }

    bb25: {
        _72 = &_73;
        _71 = _72 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _69 = Arguments::<'_>::new_v1(move _70, move _71) -> [return: bb26, unwind continue];
    }

    bb26: {
        _68 = Option::<Arguments<'_>>::Some(move _69);
        _67 = core::panicking::assert_failed::<i32, i32>(move _66, _60, _61, move _68) -> unwind continue;
    }

    bb27: {
        _81 = core::panicking::AssertKind::Eq;
        _91 = const _;
        _85 = _91 as &[&str] (Pointer(Unsize));
        _88 = core::fmt::rt::Argument::<'_>::none() -> [return: bb29, unwind continue];
    }

    bb28: {
        return;
    }

    bb29: {
        _87 = &_88;
        _86 = _87 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _84 = Arguments::<'_>::new_v1(move _85, move _86) -> [return: bb30, unwind continue];
    }

    bb30: {
        _83 = Option::<Arguments<'_>>::Some(move _84);
        _82 = core::panicking::assert_failed::<i32, i32>(move _81, _75, _76, move _83) -> unwind continue;
    }

    bb31 (cleanup): {
        drop(_30) -> [return: bb32, unwind terminate];
    }

    bb32 (cleanup): {
        drop(_27) -> [return: bb35, unwind terminate];
    }

    bb33 (cleanup): {
        drop(_16) -> [return: bb34, unwind terminate];
    }

    bb34 (cleanup): {
        drop(_13) -> [return: bb35, unwind terminate];
    }

    bb35 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "foo bar"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "a b c"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "1, 2, 3"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 42_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 42_i32;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 42_i32;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 42_i32;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 42_i32;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 42_i32;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &&Point = {
    let mut _0: &&Point;
    let mut _1: &Point;
    let mut _2: Point;

    bb0: {
        _2 = Point { x: const 34_isize };
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &&Point = {
    let mut _0: &&Point;
    let mut _1: &Point;
    let mut _2: Point;

    bb0: {
        _2 = Point { x: const 34_isize };
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 14_i32;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 14_i32;
        _0 = &_1;
        return;
    }
}
