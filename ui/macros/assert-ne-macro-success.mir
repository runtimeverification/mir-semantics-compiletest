// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/macros/assert-ne-macro-success.rs:2:10: 2:19>::eq(_1: &Point, _2: &Point) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: isize;
    let mut _4: isize;

    bb0: {
        _3 = ((*_1).0: isize);
        _4 = ((*_2).0: isize);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn <impl at ui/macros/assert-ne-macro-success.rs:2:21: 2:26>::fmt(_1: &Point, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&isize;
    let _7: &isize;

    bb0: {
        _3 = const "Point";
        _4 = const "x";
        _7 = &((*_1).0: isize);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let _2: &i32;
    let _3: &i32;
    let mut _4: bool;
    let mut _5: i32;
    let mut _6: i32;
    let _8: !;
    let mut _9: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _10: (&std::string::String, &std::string::String);
    let mut _11: &std::string::String;
    let _12: std::string::String;
    let _13: &str;
    let mut _14: &std::string::String;
    let _15: std::string::String;
    let _16: &str;
    let _17: &std::string::String;
    let _18: &std::string::String;
    let mut _19: bool;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: (&std::boxed::Box<Point>, &std::boxed::Box<Point>);
    let mut _24: &std::boxed::Box<Point>;
    let _25: std::boxed::Box<Point>;
    let mut _26: Point;
    let mut _27: &std::boxed::Box<Point>;
    let _28: std::boxed::Box<Point>;
    let mut _29: Point;
    let _30: &std::boxed::Box<Point>;
    let _31: &std::boxed::Box<Point>;
    let mut _32: bool;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: (&&Point, &&Point);
    let _37: &&Point;
    let _38: &&Point;
    let mut _39: bool;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&i32, &i32);
    let _44: &i32;
    let _45: &i32;
    let mut _46: bool;
    let mut _47: i32;
    let mut _48: i32;
    let _50: !;
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _52: std::fmt::Arguments<'_>;
    let mut _53: &[&str];
    let mut _54: (&i32, &i32);
    let _55: &i32;
    let _56: &i32;
    let mut _57: bool;
    let mut _58: i32;
    let mut _59: i32;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: std::fmt::Arguments<'_>;
    let mut _64: &[&str];
    let mut _65: &[core::fmt::rt::Argument<'_>];
    let _66: &[core::fmt::rt::Argument<'_>; 0];
    let _67: [core::fmt::rt::Argument<'_>; 0];
    let mut _68: (&i32, &i32);
    let _69: &i32;
    let _70: &i32;
    let mut _71: bool;
    let mut _72: i32;
    let mut _73: i32;
    let _75: !;
    let mut _76: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _77: std::fmt::Arguments<'_>;
    let mut _78: &[&str];
    let mut _79: &[core::fmt::rt::Argument<'_>];
    let _80: &[core::fmt::rt::Argument<'_>; 0];
    let _81: [core::fmt::rt::Argument<'_>; 0];
    let mut _85: &i32;
    let mut _86: &i32;
    let mut _87: &i32;
    let mut _88: &i32;
    let mut _89: &i32;
    let mut _90: &i32;
    let mut _91: &&Point;
    let mut _92: &&Point;
    let mut _93: &i32;
    let mut _94: &i32;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _7: core::panicking::AssertKind;
        scope 2 {
            debug kind => _7;
        }
    }
    scope 3 {
        debug left_val => _17;
        debug right_val => _18;
        let _20: core::panicking::AssertKind;
        scope 4 {
            debug kind => _20;
        }
    }
    scope 5 {
        debug left_val => _30;
        debug right_val => _31;
        let _33: core::panicking::AssertKind;
        scope 6 {
            debug kind => _33;
        }
    }
    scope 7 {
        debug left_val => _37;
        debug right_val => _38;
        let _40: core::panicking::AssertKind;
        scope 8 {
            debug kind => _40;
        }
    }
    scope 9 {
        debug left_val => _44;
        debug right_val => _45;
        let _49: core::panicking::AssertKind;
        scope 10 {
            debug kind => _49;
            let mut _82: &[&str; 1];
        }
    }
    scope 11 {
        debug left_val => _55;
        debug right_val => _56;
        let _60: core::panicking::AssertKind;
        scope 12 {
            debug kind => _60;
            let mut _83: &[&str; 1];
        }
    }
    scope 13 {
        debug left_val => _69;
        debug right_val => _70;
        let _74: core::panicking::AssertKind;
        scope 14 {
            debug kind => _74;
            let mut _84: &[&str; 1];
        }
    }

    bb0: {
        _94 = const _;
        _93 = const _;
        _1 = (_94, _93);
        _2 = (_1.0: &i32);
        _3 = (_1.1: &i32);
        _5 = (*_2);
        _6 = (*_3);
        _4 = Eq(move _5, move _6);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _7 = core::panicking::AssertKind::Ne;
        _9 = Option::<Arguments<'_>>::None;
        _8 = core::panicking::assert_failed::<i32, i32>(move _7, _2, _3, move _9) -> unwind continue;
    }

    bb2: {
        _13 = const "666";
        _12 = <str as ToString>::to_string(_13) -> [return: bb3, unwind continue];
    }

    bb3: {
        _11 = &_12;
        _16 = const "abc";
        _15 = <str as ToString>::to_string(_16) -> [return: bb4, unwind: bb34];
    }

    bb4: {
        _14 = &_15;
        _10 = (move _11, move _14);
        _17 = (_10.0: &std::string::String);
        _18 = (_10.1: &std::string::String);
        _19 = <String as PartialEq>::eq(_17, _18) -> [return: bb5, unwind: bb33];
    }

    bb5: {
        switchInt(move _19) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _20 = core::panicking::AssertKind::Ne;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<String, String>(move _20, _17, _18, move _22) -> bb33;
    }

    bb7: {
        drop(_15) -> [return: bb8, unwind: bb34];
    }

    bb8: {
        drop(_12) -> [return: bb9, unwind continue];
    }

    bb9: {
        _26 = Point { x: const 666_isize };
        _25 = Box::<Point>::new(move _26) -> [return: bb10, unwind continue];
    }

    bb10: {
        _24 = &_25;
        _29 = Point { x: const 34_isize };
        _28 = Box::<Point>::new(move _29) -> [return: bb11, unwind: bb32];
    }

    bb11: {
        _27 = &_28;
        _23 = (move _24, move _27);
        _30 = (_23.0: &std::boxed::Box<Point>);
        _31 = (_23.1: &std::boxed::Box<Point>);
        _32 = <Box<Point> as PartialEq>::eq(_30, _31) -> [return: bb12, unwind: bb31];
    }

    bb12: {
        switchInt(move _32) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _33 = core::panicking::AssertKind::Ne;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<Box<Point>, Box<Point>>(move _33, _30, _31, move _35) -> bb31;
    }

    bb14: {
        drop(_28) -> [return: bb15, unwind: bb32];
    }

    bb15: {
        drop(_25) -> [return: bb16, unwind continue];
    }

    bb16: {
        _92 = const _;
        _91 = const _;
        _36 = (_92, _91);
        _37 = (_36.0: &&Point);
        _38 = (_36.1: &&Point);
        _39 = <&Point as PartialEq>::eq(_37, _38) -> [return: bb17, unwind continue];
    }

    bb17: {
        switchInt(move _39) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _40 = core::panicking::AssertKind::Ne;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<&Point, &Point>(move _40, _37, _38, move _42) -> unwind continue;
    }

    bb19: {
        _90 = const _;
        _89 = const _;
        _43 = (_90, _89);
        _44 = (_43.0: &i32);
        _45 = (_43.1: &i32);
        _47 = (*_44);
        _48 = (*_45);
        _46 = Eq(move _47, move _48);
        switchInt(move _46) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _49 = core::panicking::AssertKind::Ne;
        _82 = const _;
        _53 = _82 as &[&str] (Pointer(Unsize));
        _52 = Arguments::<'_>::new_const(move _53) -> [return: bb22, unwind continue];
    }

    bb21: {
        _88 = const _;
        _87 = const _;
        _54 = (_88, _87);
        _55 = (_54.0: &i32);
        _56 = (_54.1: &i32);
        _58 = (*_55);
        _59 = (*_56);
        _57 = Eq(move _58, move _59);
        switchInt(move _57) -> [0: bb24, otherwise: bb23];
    }

    bb22: {
        _51 = Option::<Arguments<'_>>::Some(move _52);
        _50 = core::panicking::assert_failed::<i32, i32>(move _49, _44, _45, move _51) -> unwind continue;
    }

    bb23: {
        _60 = core::panicking::AssertKind::Ne;
        _83 = const _;
        _64 = _83 as &[&str] (Pointer(Unsize));
        _67 = core::fmt::rt::Argument::<'_>::none() -> [return: bb25, unwind continue];
    }

    bb24: {
        _86 = const _;
        _85 = const _;
        _68 = (_86, _85);
        _69 = (_68.0: &i32);
        _70 = (_68.1: &i32);
        _72 = (*_69);
        _73 = (*_70);
        _71 = Eq(move _72, move _73);
        switchInt(move _71) -> [0: bb28, otherwise: bb27];
    }

    bb25: {
        _66 = &_67;
        _65 = _66 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _63 = Arguments::<'_>::new_v1(move _64, move _65) -> [return: bb26, unwind continue];
    }

    bb26: {
        _62 = Option::<Arguments<'_>>::Some(move _63);
        _61 = core::panicking::assert_failed::<i32, i32>(move _60, _55, _56, move _62) -> unwind continue;
    }

    bb27: {
        _74 = core::panicking::AssertKind::Ne;
        _84 = const _;
        _78 = _84 as &[&str] (Pointer(Unsize));
        _81 = core::fmt::rt::Argument::<'_>::none() -> [return: bb29, unwind continue];
    }

    bb28: {
        return;
    }

    bb29: {
        _80 = &_81;
        _79 = _80 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _77 = Arguments::<'_>::new_v1(move _78, move _79) -> [return: bb30, unwind continue];
    }

    bb30: {
        _76 = Option::<Arguments<'_>>::Some(move _77);
        _75 = core::panicking::assert_failed::<i32, i32>(move _74, _69, _70, move _76) -> unwind continue;
    }

    bb31 (cleanup): {
        drop(_28) -> [return: bb32, unwind terminate];
    }

    bb32 (cleanup): {
        drop(_25) -> [return: bb35, unwind terminate];
    }

    bb33 (cleanup): {
        drop(_15) -> [return: bb34, unwind terminate];
    }

    bb34 (cleanup): {
        drop(_12) -> [return: bb35, unwind terminate];
    }

    bb35 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "no gods no masters"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "6 6 6"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "6, 6, 6"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 42_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 666_i32;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 42_i32;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 666_i32;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 42_i32;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 666_i32;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &&Point = {
    let mut _0: &&Point;
    let mut _1: &Point;
    let mut _2: Point;

    bb0: {
        _2 = Point { x: const 34_isize };
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &&Point = {
    let mut _0: &&Point;
    let mut _1: &Point;
    let mut _2: Point;

    bb0: {
        _2 = Point { x: const 666_isize };
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 14_i32;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 666_i32;
        _0 = &_1;
        return;
    }
}
