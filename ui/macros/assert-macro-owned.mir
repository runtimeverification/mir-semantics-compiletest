// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/macros/assert-macro-owned.rs:7:11: 7:11
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _2: std::string::String;     // in scope 0 at ui/macros/assert-macro-owned.rs:8:20: 8:51
    let mut _3: &str;                    // in scope 0 at ui/macros/assert-macro-owned.rs:8:20: 8:51
    let _4: &str;                        // in scope 0 at ui/macros/assert-macro-owned.rs:8:20: 8:39

    bb0: {
        _4 = const "test-assert-owned";  // scope 0 at ui/macros/assert-macro-owned.rs:8:20: 8:39
                                         // mir::Constant
                                         // + span: ui/macros/assert-macro-owned.rs:8:20: 8:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/macros/assert-macro-owned.rs:8:20: 8:51
        _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at ui/macros/assert-macro-owned.rs:8:20: 8:51
                                         // mir::Constant
                                         // + span: ui/macros/assert-macro-owned.rs:8:40: 8:49
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = begin_panic::<String>(move _2); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(String) -> ! {begin_panic::<String>}, val: Value(<ZST>) }
    }
}
