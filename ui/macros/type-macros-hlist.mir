// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/macros/type-macros-hlist.rs:6:16: 6:21>::clone(_1: &Nil) -> Nil {
    debug self => _1;                    // in scope 0 at ui/macros/type-macros-hlist.rs:6:16: 6:21
    let mut _0: Nil;                     // return place in scope 0 at ui/macros/type-macros-hlist.rs:6:16: 6:21

    bb0: {
        return;                          // scope 0 at ui/macros/type-macros-hlist.rs:6:21: 6:21
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:6:23: 6:28>::fmt(_1: &Nil, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/macros/type-macros-hlist.rs:6:23: 6:28
    debug f => _2;                       // in scope 0 at ui/macros/type-macros-hlist.rs:6:23: 6:28
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/macros/type-macros-hlist.rs:6:23: 6:28
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/macros/type-macros-hlist.rs:6:23: 6:28
    let mut _4: &str;                    // in scope 0 at ui/macros/type-macros-hlist.rs:6:23: 6:28
    let _5: &str;                        // in scope 0 at ui/macros/type-macros-hlist.rs:6:23: 6:28

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/macros/type-macros-hlist.rs:6:23: 6:28
        _5 = const "Nil";                // scope 0 at ui/macros/type-macros-hlist.rs:6:23: 6:28
                                         // mir::Constant
                                         // + span: ui/macros/type-macros-hlist.rs:6:23: 6:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/macros/type-macros-hlist.rs:6:23: 6:28
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/macros/type-macros-hlist.rs:6:23: 6:28
                                         // mir::Constant
                                         // + span: ui/macros/type-macros-hlist.rs:6:23: 6:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/macros/type-macros-hlist.rs:6:28: 6:28
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:6:30: 6:32>::assert_receiver_is_total_eq(_1: &Nil) -> () {
    debug self => _1;                    // in scope 0 at ui/macros/type-macros-hlist.rs:6:30: 6:32
    let mut _0: ();                      // return place in scope 0 at ui/macros/type-macros-hlist.rs:6:30: 6:32

    bb0: {
        return;                          // scope 0 at ui/macros/type-macros-hlist.rs:6:32: 6:32
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:6:34: 6:37>::cmp(_1: &Nil, _2: &Nil) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/macros/type-macros-hlist.rs:6:34: 6:37
    debug other => _2;                   // in scope 0 at ui/macros/type-macros-hlist.rs:6:34: 6:37
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/macros/type-macros-hlist.rs:6:34: 6:37

    bb0: {
        _0 = const Equal;                // scope 0 at ui/macros/type-macros-hlist.rs:6:34: 6:37
                                         // mir::Constant
                                         // + span: ui/macros/type-macros-hlist.rs:6:34: 6:37
                                         // + literal: Const { ty: std::cmp::Ordering, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/macros/type-macros-hlist.rs:6:37: 6:37
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:6:39: 6:48>::eq(_1: &Nil, _2: &Nil) -> bool {
    debug self => _1;                    // in scope 0 at ui/macros/type-macros-hlist.rs:6:39: 6:48
    debug other => _2;                   // in scope 0 at ui/macros/type-macros-hlist.rs:6:39: 6:48
    let mut _0: bool;                    // return place in scope 0 at ui/macros/type-macros-hlist.rs:6:39: 6:48

    bb0: {
        _0 = const true;                 // scope 0 at ui/macros/type-macros-hlist.rs:6:39: 6:48
        return;                          // scope 0 at ui/macros/type-macros-hlist.rs:6:48: 6:48
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:6:50: 6:60>::partial_cmp(_1: &Nil, _2: &Nil) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/macros/type-macros-hlist.rs:6:50: 6:60
    debug other => _2;                   // in scope 0 at ui/macros/type-macros-hlist.rs:6:50: 6:60
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/macros/type-macros-hlist.rs:6:50: 6:60

    bb0: {
        _0 = const Option::<std::cmp::Ordering>::Some(Equal); // scope 0 at ui/macros/type-macros-hlist.rs:6:50: 6:60
                                         // mir::Constant
                                         // + span: ui/macros/type-macros-hlist.rs:6:50: 6:60
                                         // + literal: Const { ty: Option<std::cmp::Ordering>, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/macros/type-macros-hlist.rs:6:60: 6:60
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:9:16: 9:21>::clone(_1: &Cons<H, T>) -> Cons<H, T> {
    debug self => _1;                    // in scope 0 at ui/macros/type-macros-hlist.rs:9:16: 9:21
    let mut _0: Cons<H, T>;              // return place in scope 0 at ui/macros/type-macros-hlist.rs:9:16: 9:21
    let mut _2: H;                       // in scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    let mut _3: &H;                      // in scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    let _4: &H;                          // in scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    let mut _5: T;                       // in scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
    let mut _6: &T;                      // in scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
    let _7: &T;                          // in scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30

    bb0: {
        _4 = &((*_1).0: H);              // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
        _3 = _4;                         // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
        _2 = <H as Clone>::clone(move _3) -> bb1; // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
                                         // mir::Constant
                                         // + span: ui/macros/type-macros-hlist.rs:10:26: 10:27
                                         // + literal: Const { ty: for<'a> fn(&'a H) -> H {<H as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &((*_1).1: T);              // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
        _6 = _7;                         // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
        _5 = <T as Clone>::clone(move _6) -> [return: bb2, unwind: bb3]; // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
                                         // mir::Constant
                                         // + span: ui/macros/type-macros-hlist.rs:10:29: 10:30
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = Cons::<H, T>(move _2, move _5); // scope 0 at ui/macros/type-macros-hlist.rs:9:16: 9:21
        return;                          // scope 0 at ui/macros/type-macros-hlist.rs:9:21: 9:21
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/macros/type-macros-hlist.rs:9:20: 9:21
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/macros/type-macros-hlist.rs:9:16: 9:21
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:9:23: 9:28>::fmt(_1: &Cons<H, T>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/macros/type-macros-hlist.rs:9:23: 9:28
    debug f => _2;                       // in scope 0 at ui/macros/type-macros-hlist.rs:9:23: 9:28
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/macros/type-macros-hlist.rs:9:23: 9:28
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/macros/type-macros-hlist.rs:9:23: 9:28
    let mut _4: &str;                    // in scope 0 at ui/macros/type-macros-hlist.rs:9:23: 9:28
    let _5: &str;                        // in scope 0 at ui/macros/type-macros-hlist.rs:9:23: 9:28
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    let mut _7: &H;                      // in scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    let _8: &H;                          // in scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    let mut _9: &dyn std::fmt::Debug;    // in scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
    let mut _10: &&T;                    // in scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
    let _11: &&T;                        // in scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
    let _12: &T;                         // in scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/macros/type-macros-hlist.rs:9:23: 9:28
        _5 = const "Cons";               // scope 0 at ui/macros/type-macros-hlist.rs:9:23: 9:28
                                         // mir::Constant
                                         // + span: ui/macros/type-macros-hlist.rs:9:23: 9:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/macros/type-macros-hlist.rs:9:23: 9:28
        _8 = &((*_1).0: H);              // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
        _7 = _8;                         // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
        _12 = &((*_1).1: T);             // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
        _11 = &_12;                      // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
        _10 = _11;                       // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
        _9 = move _10 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
        _0 = Formatter::<'_>::debug_tuple_field2_finish(move _3, move _4, move _6, move _9) -> bb1; // scope 0 at ui/macros/type-macros-hlist.rs:9:23: 9:28
                                         // mir::Constant
                                         // + span: ui/macros/type-macros-hlist.rs:9:23: 9:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c), &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/macros/type-macros-hlist.rs:9:28: 9:28
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:9:30: 9:32>::assert_receiver_is_total_eq(_1: &Cons<H, T>) -> () {
    debug self => _1;                    // in scope 0 at ui/macros/type-macros-hlist.rs:9:30: 9:32
    let mut _0: ();                      // return place in scope 0 at ui/macros/type-macros-hlist.rs:9:30: 9:32
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;                          // scope 0 at ui/macros/type-macros-hlist.rs:9:32: 9:32
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:9:34: 9:37>::cmp(_1: &Cons<H, T>, _2: &Cons<H, T>) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/macros/type-macros-hlist.rs:9:34: 9:37
    debug other => _2;                   // in scope 0 at ui/macros/type-macros-hlist.rs:9:34: 9:37
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/macros/type-macros-hlist.rs:9:34: 9:37
    let mut _3: std::cmp::Ordering;      // in scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    let mut _4: &H;                      // in scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    let _5: &H;                          // in scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    let mut _6: &H;                      // in scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    let _7: &H;                          // in scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    let mut _8: i8;                      // in scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    let mut _9: &T;                      // in scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
    let _10: &T;                         // in scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
    let mut _11: &T;                     // in scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
    let _12: &T;                         // in scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
    let _13: std::cmp::Ordering;         // in scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    scope 1 {
        debug cmp => _13;                // in scope 1 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    }

    bb0: {
        _5 = &((*_1).0: H);              // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
        _4 = _5;                         // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
        _7 = &((*_2).0: H);              // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
        _6 = _7;                         // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
        _3 = <H as Ord>::cmp(move _4, move _6) -> bb1; // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
                                         // mir::Constant
                                         // + span: ui/macros/type-macros-hlist.rs:10:26: 10:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H, &'b H) -> std::cmp::Ordering {<H as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = discriminant(_3);           // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    }

    bb2: {
        _13 = _3;                        // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
        _0 = _13;                        // scope 1 at ui/macros/type-macros-hlist.rs:10:26: 10:27
        goto -> bb4;                     // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    }

    bb3: {
        _10 = &((*_1).1: T);             // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
        _9 = _10;                        // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
        _12 = &((*_2).1: T);             // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
        _11 = _12;                       // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
        _0 = <T as Ord>::cmp(move _9, move _11) -> bb4; // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
                                         // mir::Constant
                                         // + span: ui/macros/type-macros-hlist.rs:10:29: 10:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> std::cmp::Ordering {<T as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/macros/type-macros-hlist.rs:9:37: 9:37
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:9:39: 9:48>::eq(_1: &Cons<H, T>, _2: &Cons<H, T>) -> bool {
    debug self => _1;                    // in scope 0 at ui/macros/type-macros-hlist.rs:9:39: 9:48
    debug other => _2;                   // in scope 0 at ui/macros/type-macros-hlist.rs:9:39: 9:48
    let mut _0: bool;                    // return place in scope 0 at ui/macros/type-macros-hlist.rs:9:39: 9:48
    let mut _3: bool;                    // in scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    let mut _4: &H;                      // in scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    let mut _5: &H;                      // in scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    let mut _6: bool;                    // in scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
    let mut _7: &T;                      // in scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
    let mut _8: &T;                      // in scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30

    bb0: {
        _4 = &((*_1).0: H);              // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
        _5 = &((*_2).0: H);              // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
        _3 = <H as PartialEq>::eq(move _4, move _5) -> bb4; // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
                                         // mir::Constant
                                         // + span: ui/macros/type-macros-hlist.rs:10:26: 10:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H, &'b H) -> bool {<H as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
        goto -> bb3;                     // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
    }

    bb2: {
        _7 = &((*_1).1: T);              // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
        _8 = &((*_2).1: T);              // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
        _6 = <T as PartialEq>::eq(move _7, move _8) -> bb5; // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
                                         // mir::Constant
                                         // + span: ui/macros/type-macros-hlist.rs:10:29: 10:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/macros/type-macros-hlist.rs:9:48: 9:48
    }

    bb4: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
    }

    bb5: {
        _0 = move _6;                    // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
        goto -> bb3;                     // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:9:50: 9:60>::partial_cmp(_1: &Cons<H, T>, _2: &Cons<H, T>) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/macros/type-macros-hlist.rs:9:50: 9:60
    debug other => _2;                   // in scope 0 at ui/macros/type-macros-hlist.rs:9:50: 9:60
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/macros/type-macros-hlist.rs:9:50: 9:60
    let mut _3: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    let mut _4: &H;                      // in scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    let _5: &H;                          // in scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    let mut _6: &H;                      // in scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    let _7: &H;                          // in scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    let mut _8: i8;                      // in scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    let mut _9: isize;                   // in scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    let mut _10: &T;                     // in scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
    let _11: &T;                         // in scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
    let mut _12: &T;                     // in scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
    let _13: &T;                         // in scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
    let _14: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    scope 1 {
        debug cmp => _14;                // in scope 1 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    }

    bb0: {
        _5 = &((*_1).0: H);              // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
        _4 = _5;                         // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
        _7 = &((*_2).0: H);              // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
        _6 = _7;                         // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
        _3 = <H as PartialOrd>::partial_cmp(move _4, move _6) -> bb1; // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
                                         // mir::Constant
                                         // + span: ui/macros/type-macros-hlist.rs:10:26: 10:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H, &'b H) -> Option<std::cmp::Ordering> {<H as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = discriminant(_3);           // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
        switchInt(move _9) -> [1: bb3, otherwise: bb2]; // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    }

    bb2: {
        _14 = _3;                        // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
        _0 = _14;                        // scope 1 at ui/macros/type-macros-hlist.rs:10:26: 10:27
        goto -> bb5;                     // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    }

    bb3: {
        _8 = discriminant(((_3 as Some).0: std::cmp::Ordering)); // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
        switchInt(move _8) -> [0: bb4, otherwise: bb2]; // scope 0 at ui/macros/type-macros-hlist.rs:10:26: 10:27
    }

    bb4: {
        _11 = &((*_1).1: T);             // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
        _10 = _11;                       // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
        _13 = &((*_2).1: T);             // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
        _12 = _13;                       // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
        _0 = <T as PartialOrd>::partial_cmp(move _10, move _12) -> bb5; // scope 0 at ui/macros/type-macros-hlist.rs:10:29: 10:30
                                         // mir::Constant
                                         // + span: ui/macros/type-macros-hlist.rs:10:29: 10:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> Option<std::cmp::Ordering> {<T as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/macros/type-macros-hlist.rs:9:60: 9:60
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:31:1: 31:33>::add(_1: Nil, _2: Ys) -> Ys {
    debug self => _1;                    // in scope 0 at ui/macros/type-macros-hlist.rs:37:12: 37:16
    debug rhs => _2;                     // in scope 0 at ui/macros/type-macros-hlist.rs:37:18: 37:21
    let mut _0: Ys;                      // return place in scope 0 at ui/macros/type-macros-hlist.rs:37:30: 37:32

    bb0: {
        _0 = move _2;                    // scope 0 at ui/macros/type-macros-hlist.rs:37:35: 37:38
        return;                          // scope 0 at ui/macros/type-macros-hlist.rs:37:40: 37:40
    }
}

fn <impl at ui/macros/type-macros-hlist.rs:41:1: 41:75>::add(_1: Cons<X, Xs>, _2: Ys) -> Cons<X, Rec> {
    debug self => _1;                    // in scope 0 at ui/macros/type-macros-hlist.rs:48:12: 48:16
    debug rhs => _2;                     // in scope 0 at ui/macros/type-macros-hlist.rs:48:18: 48:21
    let mut _0: Cons<X, Rec>;            // return place in scope 0 at ui/macros/type-macros-hlist.rs:48:30: 48:42
    let mut _3: X;                       // in scope 0 at ui/macros/type-macros-hlist.rs:48:50: 48:56
    let mut _4: Rec;                     // in scope 0 at ui/macros/type-macros-hlist.rs:48:58: 48:70
    let mut _5: Xs;                      // in scope 0 at ui/macros/type-macros-hlist.rs:48:58: 48:64
    let mut _6: Ys;                      // in scope 0 at ui/macros/type-macros-hlist.rs:48:67: 48:70

    bb0: {
        _3 = move (_1.0: X);             // scope 0 at ui/macros/type-macros-hlist.rs:48:50: 48:56
        _5 = move (_1.1: Xs);            // scope 0 at ui/macros/type-macros-hlist.rs:48:58: 48:64
        _6 = move _2;                    // scope 0 at ui/macros/type-macros-hlist.rs:48:67: 48:70
        _4 = <Xs as std::ops::Add<Ys>>::add(move _5, move _6) -> [return: bb1, unwind: bb2]; // scope 0 at ui/macros/type-macros-hlist.rs:48:58: 48:70
                                         // mir::Constant
                                         // + span: ui/macros/type-macros-hlist.rs:48:58: 48:70
                                         // + literal: Const { ty: fn(Xs, Ys) -> <Xs as std::ops::Add<Ys>>::Output {<Xs as std::ops::Add<Ys>>::add}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Cons::<X, Rec>(move _3, move _4); // scope 0 at ui/macros/type-macros-hlist.rs:48:45: 48:71
        return;                          // scope 0 at ui/macros/type-macros-hlist.rs:48:73: 48:73
    }

    bb2 (cleanup): {
        drop(_3) -> bb3;                 // scope 0 at ui/macros/type-macros-hlist.rs:48:70: 48:71
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at ui/macros/type-macros-hlist.rs:48:5: 48:73
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/macros/type-macros-hlist.rs:61:11: 61:11
    let _1: Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Nil>>>; // in scope 0 at ui/macros/type-macros-hlist.rs:67:9: 67:11
    let mut _2: &str;                    // in scope 0 at ui/macros/type-macros-hlist.rs:68:16: 68:21
    let _3: &str;                        // in scope 0 at ui/macros/type-macros-hlist.rs:68:16: 68:21
    let mut _4: Cons<bool, Cons<std::vec::Vec<u64>, Nil>>; // in scope 0 at ui/macros/type-macros-hlist.rs:22:20: 22:66
    let mut _5: Cons<std::vec::Vec<u64>, Nil>; // in scope 0 at ui/macros/type-macros-hlist.rs:20:20: 20:41
    let mut _6: std::vec::Vec<u64>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
    let mut _7: Nil;                     // in scope 0 at ui/macros/type-macros-hlist.rs:20:36: 20:39
    let mut _9: Cons<[u8; 3], Cons<(), Nil>>; // in scope 0 at ui/macros/type-macros-hlist.rs:22:20: 22:66
    let mut _10: [u8; 3];                // in scope 0 at ui/macros/type-macros-hlist.rs:70:20: 70:33
    let mut _11: Cons<(), Nil>;          // in scope 0 at ui/macros/type-macros-hlist.rs:20:20: 20:41
    let mut _13: Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Nil>>>; // in scope 0 at ui/macros/type-macros-hlist.rs:77:39: 77:41
    let mut _14: Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>; // in scope 0 at ui/macros/type-macros-hlist.rs:77:43: 77:45
    let mut _15: (&Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>, &Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _16: &Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _17: &Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _18: Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>; // in scope 0 at ui/macros/type-macros-hlist.rs:22:20: 22:66
    let mut _19: Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>; // in scope 0 at ui/macros/type-macros-hlist.rs:22:20: 22:66
    let mut _20: Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>; // in scope 0 at ui/macros/type-macros-hlist.rs:22:20: 22:66
    let mut _21: std::vec::Vec<u64>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
    let mut _22: Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>; // in scope 0 at ui/macros/type-macros-hlist.rs:22:20: 22:66
    let mut _23: Cons<[u8; 3], Cons<(), Nil>>; // in scope 0 at ui/macros/type-macros-hlist.rs:22:20: 22:66
    let mut _24: [u8; 3];                // in scope 0 at ui/macros/type-macros-hlist.rs:79:49: 79:62
    let mut _25: Cons<(), Nil>;          // in scope 0 at ui/macros/type-macros-hlist.rs:20:20: 20:41
    let mut _28: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _29: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _30: &Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _31: &Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _33: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _34: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _35: &Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _36: &Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _37: &Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _38: &Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug xs => _1;                  // in scope 1 at ui/macros/type-macros-hlist.rs:67:9: 67:11
        let _8: Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>; // in scope 1 at ui/macros/type-macros-hlist.rs:69:9: 69:11
        scope 2 {
            debug ys => _8;              // in scope 2 at ui/macros/type-macros-hlist.rs:69:9: 69:11
            let _12: Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>; // in scope 2 at ui/macros/type-macros-hlist.rs:73:9: 73:11
            scope 3 {
                debug zs => _12;         // in scope 3 at ui/macros/type-macros-hlist.rs:73:9: 73:11
                let _26: &Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _27: &Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                scope 4 {
                    debug left_val => _26; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _27; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _32: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _32; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _3 = const "foo";                // scope 0 at ui/macros/type-macros-hlist.rs:68:16: 68:21
                                         // mir::Constant
                                         // + span: ui/macros/type-macros-hlist.rs:68:16: 68:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at ui/macros/type-macros-hlist.rs:68:16: 68:21
        _6 = Vec::<u64>::new() -> bb1;   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> Vec<u64> {Vec::<u64>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = Cons::<Vec<u64>, Nil>(move _6, move _7); // scope 0 at ui/macros/type-macros-hlist.rs:20:20: 20:41
        _4 = Cons::<bool, Cons<Vec<u64>, Nil>>(const false, move _5); // scope 0 at ui/macros/type-macros-hlist.rs:22:20: 22:66
        _1 = Cons::<&str, Cons<bool, Cons<Vec<u64>, Nil>>>(move _2, move _4); // scope 0 at ui/macros/type-macros-hlist.rs:22:20: 22:66
        _10 = [const 0_u8, const 1_u8, const 2_u8]; // scope 1 at ui/macros/type-macros-hlist.rs:70:20: 70:33
        _9 = Cons::<[u8; 3], Cons<(), Nil>>(move _10, move _11); // scope 1 at ui/macros/type-macros-hlist.rs:22:20: 22:66
        _8 = Cons::<u64, Cons<[u8; 3], Cons<(), Nil>>>(const 0_u64, move _9); // scope 1 at ui/macros/type-macros-hlist.rs:22:20: 22:66
        _13 = move _1;                   // scope 2 at ui/macros/type-macros-hlist.rs:77:39: 77:41
        _14 = _8;                        // scope 2 at ui/macros/type-macros-hlist.rs:77:43: 77:45
        _12 = aux::<Cons<&str, Cons<bool, Cons<Vec<u64>, Nil>>>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>(move _13, move _14) -> bb2; // scope 2 at ui/macros/type-macros-hlist.rs:77:35: 77:46
                                         // mir::Constant
                                         // + span: ui/macros/type-macros-hlist.rs:77:35: 77:38
                                         // + literal: Const { ty: fn(Cons<&str, Cons<bool, Cons<Vec<u64>, Nil>>>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>) -> <Cons<&str, Cons<bool, Cons<Vec<u64>, Nil>>> as std::ops::Add<Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>::Output {aux::<Cons<&str, Cons<bool, Cons<Vec<u64>, Nil>>>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>}, val: Value(<ZST>) }
    }

    bb2: {
        _16 = &_12;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _21 = Vec::<u64>::new() -> [return: bb3, unwind: bb11]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn() -> Vec<u64> {Vec::<u64>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _24 = [const 0_u8, const 1_u8, const 2_u8]; // scope 3 at ui/macros/type-macros-hlist.rs:79:49: 79:62
        _23 = Cons::<[u8; 3], Cons<(), Nil>>(move _24, move _25); // scope 3 at ui/macros/type-macros-hlist.rs:22:20: 22:66
        _22 = Cons::<u64, Cons<[u8; 3], Cons<(), Nil>>>(const 0_u64, move _23); // scope 3 at ui/macros/type-macros-hlist.rs:22:20: 22:66
        _20 = Cons::<Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>(move _21, move _22); // scope 3 at ui/macros/type-macros-hlist.rs:22:20: 22:66
        _19 = Cons::<bool, Cons<Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>(const false, move _20); // scope 3 at ui/macros/type-macros-hlist.rs:22:20: 22:66
        _18 = Cons::<&str, Cons<bool, Cons<Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>(const "foo", move _19); // scope 3 at ui/macros/type-macros-hlist.rs:22:20: 22:66
                                         // mir::Constant
                                         // + span: ui/macros/type-macros-hlist.rs:79:16: 79:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _17 = &_18;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _15 = (move _16, move _17);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _26 = (_15.0: &Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _27 = (_15.1: &Cons<&str, Cons<bool, Cons<std::vec::Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _30 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _31 = _27;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _29 = <Cons<&str, Cons<bool, Cons<Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>> as PartialEq>::eq(move _30, move _31) -> [return: bb4, unwind: bb9]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Cons<&str, Cons<bool, Cons<Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>, &'b Cons<&str, Cons<bool, Cons<Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>) -> bool {<Cons<&str, Cons<bool, Cons<Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _28 = Not(move _29);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _28) -> [0: bb6, otherwise: bb5]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _32 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _34 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _36 = _26;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _35 = _36;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _27;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _37 = _38;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _33 = core::panicking::assert_failed::<Cons<&str, Cons<bool, Cons<Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>, Cons<&str, Cons<bool, Cons<Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>>(move _34, move _35, move _37, move _39) -> bb9; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Cons<&str, Cons<bool, Cons<Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>, &'b Cons<&str, Cons<bool, Cons<Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Cons<&str, Cons<bool, Cons<Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>, Cons<&str, Cons<bool, Cons<Vec<u64>, Cons<u64, Cons<[u8; 3], Cons<(), Nil>>>>>>>}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_12) -> [return: bb7, unwind: bb10]; // scope 2 at ui/macros/type-macros-hlist.rs:80:1: 80:2
    }

    bb7: {
        drop(_18) -> bb8;                // scope 0 at ui/macros/type-macros-hlist.rs:80:1: 80:2
    }

    bb8: {
        return;                          // scope 0 at ui/macros/type-macros-hlist.rs:80:2: 80:2
    }

    bb9 (cleanup): {
        drop(_12) -> bb10;               // scope 2 at ui/macros/type-macros-hlist.rs:80:1: 80:2
    }

    bb10 (cleanup): {
        drop(_18) -> bb12;               // scope 0 at ui/macros/type-macros-hlist.rs:80:1: 80:2
    }

    bb11 (cleanup): {
        drop(_12) -> bb12;               // scope 2 at ui/macros/type-macros-hlist.rs:80:1: 80:2
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at ui/macros/type-macros-hlist.rs:61:1: 80:2
    }
}

fn aux(_1: Xs, _2: Ys) -> <Xs as std::ops::Add<Ys>>::Output {
    debug xs => _1;                      // in scope 0 at ui/macros/type-macros-hlist.rs:62:34: 62:36
    debug ys => _2;                      // in scope 0 at ui/macros/type-macros-hlist.rs:62:42: 62:44
    let mut _0: <Xs as std::ops::Add<Ys>>::Output; // return place in scope 0 at ui/macros/type-macros-hlist.rs:57:19: 58:25
    let mut _3: Xs;                      // in scope 0 at ui/macros/type-macros-hlist.rs:64:9: 64:11
    let mut _4: Ys;                      // in scope 0 at ui/macros/type-macros-hlist.rs:64:14: 64:16

    bb0: {
        _3 = move _1;                    // scope 0 at ui/macros/type-macros-hlist.rs:64:9: 64:11
        _4 = move _2;                    // scope 0 at ui/macros/type-macros-hlist.rs:64:14: 64:16
        _0 = <Xs as std::ops::Add<Ys>>::add(move _3, move _4) -> bb1; // scope 0 at ui/macros/type-macros-hlist.rs:64:9: 64:16
                                         // mir::Constant
                                         // + span: ui/macros/type-macros-hlist.rs:64:9: 64:16
                                         // + literal: Const { ty: fn(Xs, Ys) -> <Xs as std::ops::Add<Ys>>::Output {<Xs as std::ops::Add<Ys>>::add}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/macros/type-macros-hlist.rs:65:6: 65:6
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/macros/type-macros-hlist.rs:69:33: 69:34

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/macros/type-macros-hlist.rs:69:33: 69:34
        return;                          // scope 0 at ui/macros/type-macros-hlist.rs:69:33: 69:34
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/macros/type-macros-hlist.rs:76:62: 76:63

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/macros/type-macros-hlist.rs:76:62: 76:63
        return;                          // scope 0 at ui/macros/type-macros-hlist.rs:76:62: 76:63
    }
}

fn Cons(_1: H, _2: T) -> Cons<H, T> {
    let mut _0: Cons<H, T>;              // return place in scope 0 at ui/macros/type-macros-hlist.rs:10:1: 10:25

    bb0: {
        _0 = Cons::<H, T>(move _1, move _2); // scope 0 at ui/macros/type-macros-hlist.rs:10:1: 10:25
        return;                          // scope 0 at ui/macros/type-macros-hlist.rs:10:1: 10:25
    }
}

// MIR FOR CTFE
fn Cons(_1: H, _2: T) -> Cons<H, T> {
    let mut _0: Cons<H, T>;              // return place in scope 0 at ui/macros/type-macros-hlist.rs:10:1: 10:25

    bb0: {
        _0 = Cons::<H, T>(move _1, move _2); // scope 0 at ui/macros/type-macros-hlist.rs:10:1: 10:25
        return;                          // scope 0 at ui/macros/type-macros-hlist.rs:10:1: 10:25
    }
}
