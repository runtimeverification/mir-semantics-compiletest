// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/macros/macro-interpolation.rs:27:15: 27:15
    let mut _1: bool;                    // in scope 0 at ui/macros/macro-interpolation.rs:31:5: 32:58
    let mut _2: bool;                    // in scope 0 at ui/macros/macro-interpolation.rs:31:13: 32:57
    let mut _3: usize;                   // in scope 0 at ui/macros/macro-interpolation.rs:5:6: 13:6
    let mut _4: std::option::Option<std::option::Option<usize>>; // in scope 0 at ui/macros/macro-interpolation.rs:7:15: 7:28
    let mut _5: std::option::Option<usize>; // in scope 0 at ui/macros/macro-interpolation.rs:32:32: 32:39
    let mut _6: isize;                   // in scope 0 at ui/macros/macro-interpolation.rs:32:41: 32:48
    let mut _7: isize;                   // in scope 0 at ui/macros/macro-interpolation.rs:8:11: 8:21
    let mut _9: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _10: !;                      // in scope 0 at ui/macros/macro-interpolation.rs:31:5: 32:58
    scope 1 {
        scope 2 {
            let _8: usize;               // in scope 2 at ui/macros/macro-interpolation.rs:32:46: 32:47
            scope 3 {
                debug y => _8;           // in scope 3 at ui/macros/macro-interpolation.rs:32:46: 32:47
            }
        }
    }

    bb0: {
        _5 = Option::<usize>::Some(const 8_usize); // scope 2 at ui/macros/macro-interpolation.rs:32:32: 32:39
        _4 = f(move _5) -> bb1;          // scope 2 at ui/macros/macro-interpolation.rs:7:15: 7:28
                                         // mir::Constant
                                         // + span: ui/macros/macro-interpolation.rs:7:15: 7:22
                                         // + literal: Const { ty: fn(Option<usize>) -> Option<Option<usize>> {f}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = discriminant(_4);           // scope 2 at ui/macros/macro-interpolation.rs:7:15: 7:28
        switchInt(move _7) -> [1: bb3, otherwise: bb2]; // scope 2 at ui/macros/macro-interpolation.rs:7:9: 7:28
    }

    bb2: {
        _9 = begin_panic::<&str>(const "explicit panic"); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _6 = discriminant(((_4 as Some).0: std::option::Option<usize>)); // scope 2 at ui/macros/macro-interpolation.rs:7:15: 7:28
        switchInt(move _6) -> [1: bb4, otherwise: bb2]; // scope 2 at ui/macros/macro-interpolation.rs:7:9: 7:28
    }

    bb4: {
        _8 = ((((_4 as Some).0: std::option::Option<usize>) as Some).0: usize); // scope 2 at ui/macros/macro-interpolation.rs:32:46: 32:47
        _3 = _8;                         // scope 3 at ui/macros/macro-interpolation.rs:9:13: 9:17
        _2 = Eq(move _3, const 8_usize); // scope 2 at ui/macros/macro-interpolation.rs:31:13: 32:57
        _1 = Not(move _2);               // scope 2 at ui/macros/macro-interpolation.rs:31:5: 32:58
        switchInt(move _1) -> [0: bb6, otherwise: bb5]; // scope 2 at ui/macros/macro-interpolation.rs:31:5: 32:58
    }

    bb5: {
        _10 = core::panicking::panic(const "assertion failed: overly_complicated!(f, x, Option < usize >, { return Some(x) ; }, Some(8),\\n        Some(y), y) == 8"); // scope 2 at ui/macros/macro-interpolation.rs:31:5: 32:58
                                         // mir::Constant
                                         // + span: ui/macros/macro-interpolation.rs:31:5: 32:58
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        return;                          // scope 0 at ui/macros/macro-interpolation.rs:33:2: 33:2
    }
}

fn f(_1: Option<usize>) -> Option<Option<usize>> {
    debug x => _1;                       // in scope 0 at ui/macros/macro-interpolation.rs:6:20: 6:24
    let mut _0: std::option::Option<std::option::Option<usize>>; // return place in scope 0 at ui/macros/macro-interpolation.rs:6:34: 6:45
    let mut _2: std::option::Option<usize>; // in scope 0 at ui/macros/macro-interpolation.rs:31:68: 31:69

    bb0: {
        _2 = _1;                         // scope 0 at ui/macros/macro-interpolation.rs:31:68: 31:69
        _0 = Option::<Option<usize>>::Some(move _2); // scope 0 at ui/macros/macro-interpolation.rs:31:63: 31:70
        return;                          // scope 0 at ui/macros/macro-interpolation.rs:6:51: 6:51
    }
}
