// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&&std::string::String, &&str);
    let mut _2: &&std::string::String;
    let _3: &std::string::String;
    let _4: std::string::String;
    let _5: std::string::String;
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 0];
    let _10: [core::fmt::rt::Argument<'_>; 0];
    let _11: &&std::string::String;
    let _12: &&str;
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&&std::string::String, &&str);
    let mut _19: &&std::string::String;
    let _20: &std::string::String;
    let _21: std::string::String;
    let _22: std::string::String;
    let mut _23: std::fmt::Arguments<'_>;
    let mut _24: &[&str];
    let mut _25: &[core::fmt::rt::Argument<'_>];
    let _26: &[core::fmt::rt::Argument<'_>; 0];
    let _27: [core::fmt::rt::Argument<'_>; 0];
    let _28: &&std::string::String;
    let _29: &&str;
    let mut _30: bool;
    let mut _31: bool;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: (&&std::string::String, &&str);
    let mut _36: &&std::string::String;
    let _37: &std::string::String;
    let _38: std::string::String;
    let _39: std::string::String;
    let mut _40: std::fmt::Arguments<'_>;
    let mut _41: &[&str];
    let mut _42: &[core::fmt::rt::Argument<'_>];
    let _43: &[core::fmt::rt::Argument<'_>; 1];
    let _44: [core::fmt::rt::Argument<'_>; 1];
    let mut _45: core::fmt::rt::Argument<'_>;
    let _46: &&std::string::String;
    let _47: &&str;
    let mut _48: bool;
    let mut _49: bool;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&&std::string::String, &&str);
    let mut _54: &&std::string::String;
    let _55: &std::string::String;
    let _56: std::string::String;
    let _57: std::string::String;
    let mut _58: std::fmt::Arguments<'_>;
    let mut _59: &[&str];
    let mut _60: &[core::fmt::rt::Argument<'_>];
    let _61: &[core::fmt::rt::Argument<'_>; 0];
    let _62: [core::fmt::rt::Argument<'_>; 0];
    let _63: &&std::string::String;
    let _64: &&str;
    let mut _65: bool;
    let mut _66: bool;
    let _68: !;
    let mut _69: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _70: (&&std::string::String, &&str);
    let mut _71: &&std::string::String;
    let _72: &std::string::String;
    let _73: std::string::String;
    let _74: std::string::String;
    let mut _75: std::fmt::Arguments<'_>;
    let mut _76: &[&str];
    let mut _77: &[core::fmt::rt::Argument<'_>];
    let _78: &[core::fmt::rt::Argument<'_>; 0];
    let _79: [core::fmt::rt::Argument<'_>; 0];
    let _80: &&std::string::String;
    let _81: &&str;
    let mut _82: bool;
    let mut _83: bool;
    let _85: !;
    let mut _86: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _87: (&&std::string::String, &&str);
    let mut _88: &&std::string::String;
    let _89: &std::string::String;
    let _90: std::string::String;
    let _91: std::string::String;
    let mut _92: std::fmt::Arguments<'_>;
    let mut _93: &[&str];
    let mut _94: &[core::fmt::rt::Argument<'_>];
    let _95: &[core::fmt::rt::Argument<'_>; 1];
    let _96: [core::fmt::rt::Argument<'_>; 1];
    let mut _97: core::fmt::rt::Argument<'_>;
    let _98: &&std::string::String;
    let _99: &&str;
    let mut _100: bool;
    let mut _101: bool;
    let _103: !;
    let mut _104: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _105: (&&std::string::String, &&str);
    let mut _106: &&std::string::String;
    let _107: &std::string::String;
    let _108: std::string::String;
    let _109: std::string::String;
    let mut _110: std::fmt::Arguments<'_>;
    let mut _111: &[&str];
    let mut _112: &[core::fmt::rt::Argument<'_>];
    let _113: &[core::fmt::rt::Argument<'_>; 1];
    let _114: [core::fmt::rt::Argument<'_>; 1];
    let mut _115: core::fmt::rt::Argument<'_>;
    let _116: &&std::string::String;
    let _117: &&str;
    let mut _118: bool;
    let mut _119: bool;
    let _121: !;
    let mut _122: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _123: (&&std::string::String, &&str);
    let mut _124: &&std::string::String;
    let _125: &std::string::String;
    let _126: std::string::String;
    let _127: std::string::String;
    let mut _128: std::fmt::Arguments<'_>;
    let mut _129: &[&str];
    let mut _130: &[core::fmt::rt::Argument<'_>];
    let _131: &[core::fmt::rt::Argument<'_>; 2];
    let _132: [core::fmt::rt::Argument<'_>; 2];
    let mut _133: core::fmt::rt::Argument<'_>;
    let mut _134: core::fmt::rt::Argument<'_>;
    let _135: &&std::string::String;
    let _136: &&str;
    let mut _137: bool;
    let mut _138: bool;
    let _140: !;
    let mut _141: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _142: (&&std::string::String, &&str);
    let mut _143: &&std::string::String;
    let _144: &std::string::String;
    let _145: std::string::String;
    let _146: std::string::String;
    let mut _147: std::fmt::Arguments<'_>;
    let mut _148: &[&str];
    let mut _149: &[core::fmt::rt::Argument<'_>];
    let _150: &[core::fmt::rt::Argument<'_>; 0];
    let _151: [core::fmt::rt::Argument<'_>; 0];
    let _152: &&std::string::String;
    let _153: &&str;
    let mut _154: bool;
    let mut _155: bool;
    let _157: !;
    let mut _158: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _159: (&&str, &&str);
    let _160: &&str;
    let _161: &&str;
    let mut _162: bool;
    let mut _163: bool;
    let _165: !;
    let mut _166: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _167: (&&str, &&str);
    let mut _168: std::vec::Vec<i32>;
    let mut _169: std::ops::Range<i32>;
    let mut _170: std::ops::Range<i32>;
    let mut _172: std::option::Option<i32>;
    let mut _173: &mut std::ops::Range<i32>;
    let mut _174: isize;
    let _176: ();
    let mut _177: &mut std::vec::Vec<i32>;
    let _178: &&str;
    let _179: &&str;
    let mut _180: bool;
    let mut _181: bool;
    let _183: !;
    let mut _184: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _185: (&&std::string::String, &&str);
    let mut _186: &&std::string::String;
    let _187: &std::string::String;
    let _188: std::string::String;
    let _189: std::string::String;
    let mut _190: std::fmt::Arguments<'_>;
    let mut _191: &[&str];
    let mut _192: &[core::fmt::rt::Argument<'_>];
    let _193: &[core::fmt::rt::Argument<'_>; 1];
    let _194: [core::fmt::rt::Argument<'_>; 1];
    let mut _195: core::fmt::rt::Argument<'_>;
    let _196: &&std::string::String;
    let _197: &&str;
    let mut _198: bool;
    let mut _199: bool;
    let _201: !;
    let mut _202: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _203: (&&std::string::String, &&str);
    let mut _204: &&std::string::String;
    let _205: &std::string::String;
    let _206: std::string::String;
    let _207: std::string::String;
    let mut _208: std::fmt::Arguments<'_>;
    let mut _209: &[&str];
    let mut _210: &[core::fmt::rt::Argument<'_>];
    let _211: &[core::fmt::rt::Argument<'_>; 1];
    let _212: [core::fmt::rt::Argument<'_>; 1];
    let mut _213: core::fmt::rt::Argument<'_>;
    let _214: &&std::string::String;
    let _215: &&str;
    let mut _216: bool;
    let mut _217: bool;
    let _219: !;
    let mut _220: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _221: (&&str, &&str);
    let mut _222: &&str;
    let _223: &str;
    let mut _224: i32;
    let mut _225: bool;
    let mut _226: bool;
    let _227: &str;
    let mut _230: bool;
    let mut _231: bool;
    let _233: !;
    let mut _234: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _235: (&&str, &&str);
    let mut _236: &&str;
    let _237: &str;
    let mut _238: i32;
    let mut _239: bool;
    let mut _240: bool;
    let _241: &str;
    let mut _244: bool;
    let mut _245: bool;
    let _247: !;
    let mut _248: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _249: (&&std::string::String, &&str);
    let mut _250: &&std::string::String;
    let _251: &std::string::String;
    let _252: std::string::String;
    let mut _254: std::fmt::Arguments<'_>;
    let mut _255: &[&str];
    let mut _256: &[core::fmt::rt::Argument<'_>];
    let _257: &[core::fmt::rt::Argument<'_>; 1];
    let _258: [core::fmt::rt::Argument<'_>; 1];
    let mut _259: core::fmt::rt::Argument<'_>;
    let mut _262: bool;
    let mut _263: bool;
    let _265: !;
    let mut _266: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _267: (&&std::string::String, &&str);
    let mut _268: &&std::string::String;
    let _269: &std::string::String;
    let _270: std::string::String;
    let mut _272: std::fmt::Arguments<'_>;
    let mut _273: &[&str];
    let mut _274: &[core::fmt::rt::Argument<'_>];
    let _275: &[core::fmt::rt::Argument<'_>; 1];
    let _276: [core::fmt::rt::Argument<'_>; 1];
    let mut _277: core::fmt::rt::Argument<'_>;
    let mut _280: bool;
    let mut _281: bool;
    let _283: !;
    let mut _284: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _285: (&&std::string::String, &&str);
    let mut _286: &&std::string::String;
    let _287: &std::string::String;
    let _288: std::string::String;
    let mut _290: std::fmt::Arguments<'_>;
    let mut _291: &[&str];
    let mut _292: &[core::fmt::rt::Argument<'_>];
    let _293: &[core::fmt::rt::Argument<'_>; 1];
    let _294: [core::fmt::rt::Argument<'_>; 1];
    let mut _295: core::fmt::rt::Argument<'_>;
    let mut _298: bool;
    let mut _299: bool;
    let _301: !;
    let mut _302: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _303: (&&std::string::String, &&str);
    let mut _304: &&std::string::String;
    let _305: &std::string::String;
    let _306: std::string::String;
    let mut _308: std::fmt::Arguments<'_>;
    let mut _309: &[&str];
    let mut _310: &[core::fmt::rt::Argument<'_>];
    let _311: &[core::fmt::rt::Argument<'_>; 1];
    let _312: [core::fmt::rt::Argument<'_>; 1];
    let mut _313: core::fmt::rt::Argument<'_>;
    let mut _316: bool;
    let mut _317: bool;
    let _319: !;
    let mut _320: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _321: (&&std::string::String, &&str);
    let mut _322: &&std::string::String;
    let _323: &std::string::String;
    let _324: std::string::String;
    let mut _326: std::fmt::Arguments<'_>;
    let mut _327: &[&str];
    let mut _328: &[core::fmt::rt::Argument<'_>];
    let _329: &[core::fmt::rt::Argument<'_>; 2];
    let _330: [core::fmt::rt::Argument<'_>; 2];
    let mut _331: core::fmt::rt::Argument<'_>;
    let mut _332: core::fmt::rt::Argument<'_>;
    let mut _335: bool;
    let mut _336: bool;
    let _338: !;
    let mut _339: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _340: (&&str, &&str);
    let mut _343: bool;
    let mut _344: bool;
    let _346: !;
    let mut _347: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _348: (&&str, &&str);
    let mut _350: std::ops::Range<i32>;
    let mut _351: std::ops::Range<i32>;
    let mut _352: i32;
    let mut _354: std::option::Option<i32>;
    let mut _355: &mut std::ops::Range<i32>;
    let mut _356: isize;
    let _358: ();
    let mut _359: &mut std::vec::Vec<i32>;
    let mut _362: bool;
    let mut _363: bool;
    let _365: !;
    let mut _366: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _367: (&&str, &&str);
    let mut _368: &&str;
    let _369: &str;
    let mut _370: i32;
    let _371: &str;
    let mut _374: bool;
    let mut _375: bool;
    let _377: !;
    let mut _378: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _379: (&&str, &&str);
    let mut _380: &&str;
    let _381: &str;
    let mut _382: i32;
    let _383: &str;
    let mut _386: bool;
    let mut _387: bool;
    let _389: !;
    let mut _390: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _415: &&str;
    let mut _416: &bool;
    let mut _417: &[&str; 1];
    let mut _418: &&str;
    let mut _419: &bool;
    let mut _420: &[&str; 1];
    let mut _421: &&str;
    let mut _422: &&str;
    let mut _423: &&str;
    let mut _424: &&str;
    let mut _425: &&str;
    let mut _426: &[&str; 1];
    let mut _427: &&str;
    let mut _428: &i32;
    let mut _429: &i32;
    let mut _430: &[&str; 2];
    let mut _431: &&str;
    let mut _432: &f64;
    let mut _433: &[&str; 1];
    let mut _434: &&str;
    let mut _435: &char;
    let mut _436: &[&str; 1];
    let mut _437: &&str;
    let mut _438: &[&str; 1];
    let mut _439: &&str;
    let mut _440: &[&str; 1];
    let mut _441: &&str;
    let mut _442: &f64;
    let mut _443: &[&str; 1];
    let mut _444: &&str;
    let mut _445: &[&str; 1];
    let mut _446: &&str;
    let mut _447: &[&str; 1];
    scope 1 {
        debug res => _5;
    }
    scope 2 {
        debug left_val => _11;
        debug right_val => _12;
        let _15: core::panicking::AssertKind;
        scope 3 {
            debug kind => _15;
        }
    }
    scope 4 {
        debug res => _22;
    }
    scope 5 {
        debug left_val => _28;
        debug right_val => _29;
        let _32: core::panicking::AssertKind;
        scope 6 {
            debug kind => _32;
        }
    }
    scope 7 {
        debug res => _39;
    }
    scope 8 {
        debug left_val => _46;
        debug right_val => _47;
        let _50: core::panicking::AssertKind;
        scope 9 {
            debug kind => _50;
        }
    }
    scope 10 {
        debug res => _57;
    }
    scope 11 {
        debug left_val => _63;
        debug right_val => _64;
        let _67: core::panicking::AssertKind;
        scope 12 {
            debug kind => _67;
        }
    }
    scope 13 {
        debug res => _74;
    }
    scope 14 {
        debug left_val => _80;
        debug right_val => _81;
        let _84: core::panicking::AssertKind;
        scope 15 {
            debug kind => _84;
        }
    }
    scope 16 {
        debug res => _91;
    }
    scope 17 {
        debug left_val => _98;
        debug right_val => _99;
        let _102: core::panicking::AssertKind;
        scope 18 {
            debug kind => _102;
        }
    }
    scope 19 {
        debug res => _109;
    }
    scope 20 {
        debug left_val => _116;
        debug right_val => _117;
        let _120: core::panicking::AssertKind;
        scope 21 {
            debug kind => _120;
        }
    }
    scope 22 {
        debug res => _127;
    }
    scope 23 {
        debug left_val => _135;
        debug right_val => _136;
        let _139: core::panicking::AssertKind;
        scope 24 {
            debug kind => _139;
        }
    }
    scope 25 {
        debug res => _146;
    }
    scope 26 {
        debug left_val => _152;
        debug right_val => _153;
        let _156: core::panicking::AssertKind;
        scope 27 {
            debug kind => _156;
        }
    }
    scope 28 {
        debug left_val => _160;
        debug right_val => _161;
        let _164: core::panicking::AssertKind;
        scope 29 {
            debug kind => _164;
        }
    }
    scope 30 {
        debug v => _168;
        let mut _171: std::ops::Range<i32>;
        scope 31 {
            debug iter => _171;
            let _175: i32;
            scope 32 {
                debug i => _175;
            }
        }
    }
    scope 33 {
        debug left_val => _178;
        debug right_val => _179;
        let _182: core::panicking::AssertKind;
        scope 34 {
            debug kind => _182;
        }
    }
    scope 35 {
        debug res => _189;
    }
    scope 36 {
        debug left_val => _196;
        debug right_val => _197;
        let _200: core::panicking::AssertKind;
        scope 37 {
            debug kind => _200;
        }
    }
    scope 38 {
        debug res => _207;
    }
    scope 39 {
        debug left_val => _214;
        debug right_val => _215;
        let _218: core::panicking::AssertKind;
        scope 40 {
            debug kind => _218;
        }
    }
    scope 41 {
        debug _a => const LiteralProduced;
        let _228: &&str;
        let _229: &&str;
        let _242: &&str;
        let _243: &&str;
        let _253: std::string::String;
        let _260: &&std::string::String;
        let _261: &&str;
        let _271: std::string::String;
        let _278: &&std::string::String;
        let _279: &&str;
        let _289: std::string::String;
        let _296: &&std::string::String;
        let _297: &&str;
        let _307: std::string::String;
        let _314: &&std::string::String;
        let _315: &&str;
        let _325: std::string::String;
        let _333: &&std::string::String;
        let _334: &&str;
        let _341: &&str;
        let _342: &&str;
        let mut _349: std::vec::Vec<i32>;
        let _360: &&str;
        let _361: &&str;
        let mut _393: &&str;
        let mut _394: &&str;
        let mut _395: &&str;
        let mut _396: &&str;
        let mut _397: &&str;
        let mut _398: &i32;
        let mut _399: &i32;
        let mut _400: &[&str; 2];
        let mut _401: &&str;
        let mut _402: &();
        let mut _403: &[&str; 1];
        let mut _404: &&str;
        let mut _405: &i32;
        let mut _406: &[&str; 1];
        let mut _407: &&str;
        let mut _408: &f64;
        let mut _409: &[&str; 1];
        let mut _410: &&str;
        let mut _411: &f64;
        let mut _412: &[&str; 1];
        let mut _413: &&str;
        let mut _414: &&str;
        scope 42 {
            debug left_val => _228;
            debug right_val => _229;
            let _232: core::panicking::AssertKind;
            scope 43 {
                debug kind => _232;
            }
        }
        scope 44 {
            debug left_val => _242;
            debug right_val => _243;
            let _246: core::panicking::AssertKind;
            scope 45 {
                debug kind => _246;
            }
        }
        scope 46 {
            debug res => _253;
        }
        scope 47 {
            debug left_val => _260;
            debug right_val => _261;
            let _264: core::panicking::AssertKind;
            scope 48 {
                debug kind => _264;
            }
        }
        scope 49 {
            debug res => _271;
        }
        scope 50 {
            debug left_val => _278;
            debug right_val => _279;
            let _282: core::panicking::AssertKind;
            scope 51 {
                debug kind => _282;
            }
        }
        scope 52 {
            debug res => _289;
        }
        scope 53 {
            debug left_val => _296;
            debug right_val => _297;
            let _300: core::panicking::AssertKind;
            scope 54 {
                debug kind => _300;
            }
        }
        scope 55 {
            debug res => _307;
        }
        scope 56 {
            debug left_val => _314;
            debug right_val => _315;
            let _318: core::panicking::AssertKind;
            scope 57 {
                debug kind => _318;
            }
        }
        scope 58 {
            debug res => _325;
        }
        scope 59 {
            debug left_val => _333;
            debug right_val => _334;
            let _337: core::panicking::AssertKind;
            scope 60 {
                debug kind => _337;
            }
        }
        scope 61 {
            debug left_val => _341;
            debug right_val => _342;
            let _345: core::panicking::AssertKind;
            scope 62 {
                debug kind => _345;
            }
        }
        scope 63 {
            debug v => _349;
            let mut _353: std::ops::Range<i32>;
            scope 64 {
                debug iter => _353;
                let _357: i32;
                scope 65 {
                    debug i => _357;
                }
            }
        }
        scope 66 {
            debug left_val => _360;
            debug right_val => _361;
            let _364: core::panicking::AssertKind;
            scope 67 {
                debug kind => _364;
            }
        }
        scope 68 {
            debug _b => const ExprProduced;
            let _372: &&str;
            let _373: &&str;
            let _384: &&str;
            let _385: &&str;
            let mut _391: &&str;
            let mut _392: &&str;
            scope 69 {
                debug left_val => _372;
                debug right_val => _373;
                let _376: core::panicking::AssertKind;
                scope 70 {
                    debug kind => _376;
                }
            }
            scope 71 {
                debug left_val => _384;
                debug right_val => _385;
                let _388: core::panicking::AssertKind;
                scope 72 {
                    debug kind => _388;
                }
            }
        }
    }

    bb0: {
        _447 = const _;
        _7 = _447 as &[&str] (Pointer(Unsize));
        _10 = core::fmt::rt::Argument::<'_>::none() -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = format(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = move _5;
        _3 = &_4;
        _2 = &_3;
        _446 = const _;
        _1 = (move _2, _446);
        _11 = (_1.0: &&std::string::String);
        _12 = (_1.1: &&str);
        _14 = <&String as PartialEq<&str>>::eq(_11, _12) -> [return: bb4, unwind: bb185];
    }

    bb4: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<&String, &str>(move _15, _11, _12, move _17) -> bb185;
    }

    bb6: {
        drop(_4) -> [return: bb7, unwind continue];
    }

    bb7: {
        _445 = const _;
        _24 = _445 as &[&str] (Pointer(Unsize));
        _27 = core::fmt::rt::Argument::<'_>::none() -> [return: bb8, unwind continue];
    }

    bb8: {
        _26 = &_27;
        _25 = _26 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _23 = Arguments::<'_>::new_v1(move _24, move _25) -> [return: bb9, unwind continue];
    }

    bb9: {
        _22 = format(move _23) -> [return: bb10, unwind continue];
    }

    bb10: {
        _21 = move _22;
        _20 = &_21;
        _19 = &_20;
        _444 = const _;
        _18 = (move _19, _444);
        _28 = (_18.0: &&std::string::String);
        _29 = (_18.1: &&str);
        _31 = <&String as PartialEq<&str>>::eq(_28, _29) -> [return: bb11, unwind: bb184];
    }

    bb11: {
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<&String, &str>(move _32, _28, _29, move _34) -> bb184;
    }

    bb13: {
        drop(_21) -> [return: bb14, unwind continue];
    }

    bb14: {
        _443 = const _;
        _41 = _443 as &[&str] (Pointer(Unsize));
        _442 = const _;
        _45 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_442) -> [return: bb15, unwind continue];
    }

    bb15: {
        _44 = [move _45];
        _43 = &_44;
        _42 = _43 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _40 = Arguments::<'_>::new_v1(move _41, move _42) -> [return: bb16, unwind continue];
    }

    bb16: {
        _39 = format(move _40) -> [return: bb17, unwind continue];
    }

    bb17: {
        _38 = move _39;
        _37 = &_38;
        _36 = &_37;
        _441 = const _;
        _35 = (move _36, _441);
        _46 = (_35.0: &&std::string::String);
        _47 = (_35.1: &&str);
        _49 = <&String as PartialEq<&str>>::eq(_46, _47) -> [return: bb18, unwind: bb183];
    }

    bb18: {
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<&String, &str>(move _50, _46, _47, move _52) -> bb183;
    }

    bb20: {
        drop(_38) -> [return: bb21, unwind continue];
    }

    bb21: {
        _440 = const _;
        _59 = _440 as &[&str] (Pointer(Unsize));
        _62 = core::fmt::rt::Argument::<'_>::none() -> [return: bb22, unwind continue];
    }

    bb22: {
        _61 = &_62;
        _60 = _61 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _58 = Arguments::<'_>::new_v1(move _59, move _60) -> [return: bb23, unwind continue];
    }

    bb23: {
        _57 = format(move _58) -> [return: bb24, unwind continue];
    }

    bb24: {
        _56 = move _57;
        _55 = &_56;
        _54 = &_55;
        _439 = const _;
        _53 = (move _54, _439);
        _63 = (_53.0: &&std::string::String);
        _64 = (_53.1: &&str);
        _66 = <&String as PartialEq<&str>>::eq(_63, _64) -> [return: bb25, unwind: bb182];
    }

    bb25: {
        _65 = Not(move _66);
        switchInt(move _65) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _67 = core::panicking::AssertKind::Eq;
        _69 = Option::<Arguments<'_>>::None;
        _68 = core::panicking::assert_failed::<&String, &str>(move _67, _63, _64, move _69) -> bb182;
    }

    bb27: {
        drop(_56) -> [return: bb28, unwind continue];
    }

    bb28: {
        _438 = const _;
        _76 = _438 as &[&str] (Pointer(Unsize));
        _79 = core::fmt::rt::Argument::<'_>::none() -> [return: bb29, unwind continue];
    }

    bb29: {
        _78 = &_79;
        _77 = _78 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _75 = Arguments::<'_>::new_v1(move _76, move _77) -> [return: bb30, unwind continue];
    }

    bb30: {
        _74 = format(move _75) -> [return: bb31, unwind continue];
    }

    bb31: {
        _73 = move _74;
        _72 = &_73;
        _71 = &_72;
        _437 = const _;
        _70 = (move _71, _437);
        _80 = (_70.0: &&std::string::String);
        _81 = (_70.1: &&str);
        _83 = <&String as PartialEq<&str>>::eq(_80, _81) -> [return: bb32, unwind: bb181];
    }

    bb32: {
        _82 = Not(move _83);
        switchInt(move _82) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _84 = core::panicking::AssertKind::Eq;
        _86 = Option::<Arguments<'_>>::None;
        _85 = core::panicking::assert_failed::<&String, &str>(move _84, _80, _81, move _86) -> bb181;
    }

    bb34: {
        drop(_73) -> [return: bb35, unwind continue];
    }

    bb35: {
        _436 = const _;
        _93 = _436 as &[&str] (Pointer(Unsize));
        _435 = const _;
        _97 = core::fmt::rt::Argument::<'_>::new_display::<char>(_435) -> [return: bb36, unwind continue];
    }

    bb36: {
        _96 = [move _97];
        _95 = &_96;
        _94 = _95 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _92 = Arguments::<'_>::new_v1(move _93, move _94) -> [return: bb37, unwind continue];
    }

    bb37: {
        _91 = format(move _92) -> [return: bb38, unwind continue];
    }

    bb38: {
        _90 = move _91;
        _89 = &_90;
        _88 = &_89;
        _434 = const _;
        _87 = (move _88, _434);
        _98 = (_87.0: &&std::string::String);
        _99 = (_87.1: &&str);
        _101 = <&String as PartialEq<&str>>::eq(_98, _99) -> [return: bb39, unwind: bb180];
    }

    bb39: {
        _100 = Not(move _101);
        switchInt(move _100) -> [0: bb41, otherwise: bb40];
    }

    bb40: {
        _102 = core::panicking::AssertKind::Eq;
        _104 = Option::<Arguments<'_>>::None;
        _103 = core::panicking::assert_failed::<&String, &str>(move _102, _98, _99, move _104) -> bb180;
    }

    bb41: {
        drop(_90) -> [return: bb42, unwind continue];
    }

    bb42: {
        _433 = const _;
        _111 = _433 as &[&str] (Pointer(Unsize));
        _432 = const _;
        _115 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_432) -> [return: bb43, unwind continue];
    }

    bb43: {
        _114 = [move _115];
        _113 = &_114;
        _112 = _113 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _110 = Arguments::<'_>::new_v1(move _111, move _112) -> [return: bb44, unwind continue];
    }

    bb44: {
        _109 = format(move _110) -> [return: bb45, unwind continue];
    }

    bb45: {
        _108 = move _109;
        _107 = &_108;
        _106 = &_107;
        _431 = const _;
        _105 = (move _106, _431);
        _116 = (_105.0: &&std::string::String);
        _117 = (_105.1: &&str);
        _119 = <&String as PartialEq<&str>>::eq(_116, _117) -> [return: bb46, unwind: bb179];
    }

    bb46: {
        _118 = Not(move _119);
        switchInt(move _118) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _120 = core::panicking::AssertKind::Eq;
        _122 = Option::<Arguments<'_>>::None;
        _121 = core::panicking::assert_failed::<&String, &str>(move _120, _116, _117, move _122) -> bb179;
    }

    bb48: {
        drop(_108) -> [return: bb49, unwind continue];
    }

    bb49: {
        _430 = const _;
        _129 = _430 as &[&str] (Pointer(Unsize));
        _429 = const _;
        _133 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_429) -> [return: bb50, unwind continue];
    }

    bb50: {
        _428 = const _;
        _134 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_428) -> [return: bb51, unwind continue];
    }

    bb51: {
        _132 = [move _133, move _134];
        _131 = &_132;
        _130 = _131 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _128 = Arguments::<'_>::new_v1(move _129, move _130) -> [return: bb52, unwind continue];
    }

    bb52: {
        _127 = format(move _128) -> [return: bb53, unwind continue];
    }

    bb53: {
        _126 = move _127;
        _125 = &_126;
        _124 = &_125;
        _427 = const _;
        _123 = (move _124, _427);
        _135 = (_123.0: &&std::string::String);
        _136 = (_123.1: &&str);
        _138 = <&String as PartialEq<&str>>::eq(_135, _136) -> [return: bb54, unwind: bb178];
    }

    bb54: {
        _137 = Not(move _138);
        switchInt(move _137) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _139 = core::panicking::AssertKind::Eq;
        _141 = Option::<Arguments<'_>>::None;
        _140 = core::panicking::assert_failed::<&String, &str>(move _139, _135, _136, move _141) -> bb178;
    }

    bb56: {
        drop(_126) -> [return: bb57, unwind continue];
    }

    bb57: {
        _426 = const _;
        _148 = _426 as &[&str] (Pointer(Unsize));
        _151 = core::fmt::rt::Argument::<'_>::none() -> [return: bb58, unwind continue];
    }

    bb58: {
        _150 = &_151;
        _149 = _150 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _147 = Arguments::<'_>::new_v1(move _148, move _149) -> [return: bb59, unwind continue];
    }

    bb59: {
        _146 = format(move _147) -> [return: bb60, unwind continue];
    }

    bb60: {
        _145 = move _146;
        _144 = &_145;
        _143 = &_144;
        _425 = const _;
        _142 = (move _143, _425);
        _152 = (_142.0: &&std::string::String);
        _153 = (_142.1: &&str);
        _155 = <&String as PartialEq<&str>>::eq(_152, _153) -> [return: bb61, unwind: bb177];
    }

    bb61: {
        _154 = Not(move _155);
        switchInt(move _154) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _156 = core::panicking::AssertKind::Eq;
        _158 = Option::<Arguments<'_>>::None;
        _157 = core::panicking::assert_failed::<&String, &str>(move _156, _152, _153, move _158) -> bb177;
    }

    bb63: {
        drop(_145) -> [return: bb64, unwind continue];
    }

    bb64: {
        _424 = const _;
        _423 = const _;
        _159 = (_424, _423);
        _160 = (_159.0: &&str);
        _161 = (_159.1: &&str);
        _163 = <&str as PartialEq>::eq(_160, _161) -> [return: bb65, unwind continue];
    }

    bb65: {
        _162 = Not(move _163);
        switchInt(move _162) -> [0: bb67, otherwise: bb66];
    }

    bb66: {
        _164 = core::panicking::AssertKind::Eq;
        _166 = Option::<Arguments<'_>>::None;
        _165 = core::panicking::assert_failed::<&str, &str>(move _164, _160, _161, move _166) -> unwind continue;
    }

    bb67: {
        _168 = Vec::<i32>::new() -> [return: bb68, unwind continue];
    }

    bb68: {
        _170 = std::ops::Range::<i32> { start: const 10_i32, end: const 20_i32 };
        _169 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _170) -> [return: bb69, unwind: bb176];
    }

    bb69: {
        _171 = move _169;
        goto -> bb70;
    }

    bb70: {
        _173 = &mut _171;
        _172 = <std::ops::Range<i32> as Iterator>::next(_173) -> [return: bb71, unwind: bb176];
    }

    bb71: {
        _174 = discriminant(_172);
        switchInt(move _174) -> [0: bb74, 1: bb72, otherwise: bb73];
    }

    bb72: {
        _175 = ((_172 as Some).0: i32);
        _177 = &mut _168;
        _176 = Vec::<i32>::push(move _177, _175) -> [return: bb187, unwind: bb176];
    }

    bb73: {
        unreachable;
    }

    bb74: {
        drop(_168) -> [return: bb75, unwind continue];
    }

    bb75: {
        _422 = const _;
        _421 = const _;
        _167 = (_422, _421);
        _178 = (_167.0: &&str);
        _179 = (_167.1: &&str);
        _181 = <&str as PartialEq>::eq(_178, _179) -> [return: bb76, unwind continue];
    }

    bb76: {
        _180 = Not(move _181);
        switchInt(move _180) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        _182 = core::panicking::AssertKind::Eq;
        _184 = Option::<Arguments<'_>>::None;
        _183 = core::panicking::assert_failed::<&str, &str>(move _182, _178, _179, move _184) -> unwind continue;
    }

    bb78: {
        _420 = const _;
        _191 = _420 as &[&str] (Pointer(Unsize));
        _419 = const _;
        _195 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_419) -> [return: bb79, unwind continue];
    }

    bb79: {
        _194 = [move _195];
        _193 = &_194;
        _192 = _193 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _190 = Arguments::<'_>::new_v1(move _191, move _192) -> [return: bb80, unwind continue];
    }

    bb80: {
        _189 = format(move _190) -> [return: bb81, unwind continue];
    }

    bb81: {
        _188 = move _189;
        _187 = &_188;
        _186 = &_187;
        _418 = const _;
        _185 = (move _186, _418);
        _196 = (_185.0: &&std::string::String);
        _197 = (_185.1: &&str);
        _199 = <&String as PartialEq<&str>>::eq(_196, _197) -> [return: bb82, unwind: bb175];
    }

    bb82: {
        _198 = Not(move _199);
        switchInt(move _198) -> [0: bb84, otherwise: bb83];
    }

    bb83: {
        _200 = core::panicking::AssertKind::Eq;
        _202 = Option::<Arguments<'_>>::None;
        _201 = core::panicking::assert_failed::<&String, &str>(move _200, _196, _197, move _202) -> bb175;
    }

    bb84: {
        drop(_188) -> [return: bb85, unwind continue];
    }

    bb85: {
        _417 = const _;
        _209 = _417 as &[&str] (Pointer(Unsize));
        _416 = const _;
        _213 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_416) -> [return: bb86, unwind continue];
    }

    bb86: {
        _212 = [move _213];
        _211 = &_212;
        _210 = _211 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _208 = Arguments::<'_>::new_v1(move _209, move _210) -> [return: bb87, unwind continue];
    }

    bb87: {
        _207 = format(move _208) -> [return: bb88, unwind continue];
    }

    bb88: {
        _206 = move _207;
        _205 = &_206;
        _204 = &_205;
        _415 = const _;
        _203 = (move _204, _415);
        _214 = (_203.0: &&std::string::String);
        _215 = (_203.1: &&str);
        _217 = <&String as PartialEq<&str>>::eq(_214, _215) -> [return: bb89, unwind: bb174];
    }

    bb89: {
        _216 = Not(move _217);
        switchInt(move _216) -> [0: bb91, otherwise: bb90];
    }

    bb90: {
        _218 = core::panicking::AssertKind::Eq;
        _220 = Option::<Arguments<'_>>::None;
        _219 = core::panicking::assert_failed::<&String, &str>(move _218, _214, _215, move _220) -> bb174;
    }

    bb91: {
        drop(_206) -> [return: bb92, unwind continue];
    }

    bb92: {
        _224 = const 3_i32;
        _225 = Le(const 1_i32, _224);
        switchInt(move _225) -> [0: bb94, otherwise: bb93];
    }

    bb93: {
        _226 = Le(_224, const 3_i32);
        switchInt(move _226) -> [0: bb94, otherwise: bb95];
    }

    bb94: {
        _227 = const "literal, other";
        _223 = _227;
        goto -> bb96;
    }

    bb95: {
        _223 = const "literal, in range";
        goto -> bb96;
    }

    bb96: {
        _222 = &_223;
        _414 = const _;
        _221 = (move _222, _414);
        _228 = (_221.0: &&str);
        _229 = (_221.1: &&str);
        _231 = <&str as PartialEq>::eq(_228, _229) -> [return: bb97, unwind continue];
    }

    bb97: {
        _230 = Not(move _231);
        switchInt(move _230) -> [0: bb99, otherwise: bb98];
    }

    bb98: {
        _232 = core::panicking::AssertKind::Eq;
        _234 = Option::<Arguments<'_>>::None;
        _233 = core::panicking::assert_failed::<&str, &str>(move _232, _228, _229, move _234) -> unwind continue;
    }

    bb99: {
        _238 = const 3_i32;
        _239 = Le(const 4_i32, _238);
        switchInt(move _239) -> [0: bb101, otherwise: bb100];
    }

    bb100: {
        _240 = Le(_238, const 6_i32);
        switchInt(move _240) -> [0: bb101, otherwise: bb102];
    }

    bb101: {
        _241 = const "literal, other";
        _237 = _241;
        goto -> bb103;
    }

    bb102: {
        _237 = const "literal, in range";
        goto -> bb103;
    }

    bb103: {
        _236 = &_237;
        _413 = const _;
        _235 = (move _236, _413);
        _242 = (_235.0: &&str);
        _243 = (_235.1: &&str);
        _245 = <&str as PartialEq>::eq(_242, _243) -> [return: bb104, unwind continue];
    }

    bb104: {
        _244 = Not(move _245);
        switchInt(move _244) -> [0: bb106, otherwise: bb105];
    }

    bb105: {
        _246 = core::panicking::AssertKind::Eq;
        _248 = Option::<Arguments<'_>>::None;
        _247 = core::panicking::assert_failed::<&str, &str>(move _246, _242, _243, move _248) -> unwind continue;
    }

    bb106: {
        _412 = const _;
        _255 = _412 as &[&str] (Pointer(Unsize));
        _411 = const _;
        _259 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_411) -> [return: bb107, unwind continue];
    }

    bb107: {
        _258 = [move _259];
        _257 = &_258;
        _256 = _257 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _254 = Arguments::<'_>::new_v1(move _255, move _256) -> [return: bb108, unwind continue];
    }

    bb108: {
        _253 = format(move _254) -> [return: bb109, unwind continue];
    }

    bb109: {
        _252 = move _253;
        _251 = &_252;
        _250 = &_251;
        _410 = const _;
        _249 = (move _250, _410);
        _260 = (_249.0: &&std::string::String);
        _261 = (_249.1: &&str);
        _263 = <&String as PartialEq<&str>>::eq(_260, _261) -> [return: bb110, unwind: bb173];
    }

    bb110: {
        _262 = Not(move _263);
        switchInt(move _262) -> [0: bb112, otherwise: bb111];
    }

    bb111: {
        _264 = core::panicking::AssertKind::Eq;
        _266 = Option::<Arguments<'_>>::None;
        _265 = core::panicking::assert_failed::<&String, &str>(move _264, _260, _261, move _266) -> bb173;
    }

    bb112: {
        drop(_252) -> [return: bb113, unwind continue];
    }

    bb113: {
        _409 = const _;
        _273 = _409 as &[&str] (Pointer(Unsize));
        _408 = const _;
        _277 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_408) -> [return: bb114, unwind continue];
    }

    bb114: {
        _276 = [move _277];
        _275 = &_276;
        _274 = _275 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _272 = Arguments::<'_>::new_v1(move _273, move _274) -> [return: bb115, unwind continue];
    }

    bb115: {
        _271 = format(move _272) -> [return: bb116, unwind continue];
    }

    bb116: {
        _270 = move _271;
        _269 = &_270;
        _268 = &_269;
        _407 = const _;
        _267 = (move _268, _407);
        _278 = (_267.0: &&std::string::String);
        _279 = (_267.1: &&str);
        _281 = <&String as PartialEq<&str>>::eq(_278, _279) -> [return: bb117, unwind: bb172];
    }

    bb117: {
        _280 = Not(move _281);
        switchInt(move _280) -> [0: bb119, otherwise: bb118];
    }

    bb118: {
        _282 = core::panicking::AssertKind::Eq;
        _284 = Option::<Arguments<'_>>::None;
        _283 = core::panicking::assert_failed::<&String, &str>(move _282, _278, _279, move _284) -> bb172;
    }

    bb119: {
        drop(_270) -> [return: bb120, unwind continue];
    }

    bb120: {
        _406 = const _;
        _291 = _406 as &[&str] (Pointer(Unsize));
        _405 = const _;
        _295 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_405) -> [return: bb121, unwind continue];
    }

    bb121: {
        _294 = [move _295];
        _293 = &_294;
        _292 = _293 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _290 = Arguments::<'_>::new_v1(move _291, move _292) -> [return: bb122, unwind continue];
    }

    bb122: {
        _289 = format(move _290) -> [return: bb123, unwind continue];
    }

    bb123: {
        _288 = move _289;
        _287 = &_288;
        _286 = &_287;
        _404 = const _;
        _285 = (move _286, _404);
        _296 = (_285.0: &&std::string::String);
        _297 = (_285.1: &&str);
        _299 = <&String as PartialEq<&str>>::eq(_296, _297) -> [return: bb124, unwind: bb171];
    }

    bb124: {
        _298 = Not(move _299);
        switchInt(move _298) -> [0: bb126, otherwise: bb125];
    }

    bb125: {
        _300 = core::panicking::AssertKind::Eq;
        _302 = Option::<Arguments<'_>>::None;
        _301 = core::panicking::assert_failed::<&String, &str>(move _300, _296, _297, move _302) -> bb171;
    }

    bb126: {
        drop(_288) -> [return: bb127, unwind continue];
    }

    bb127: {
        _403 = const _;
        _309 = _403 as &[&str] (Pointer(Unsize));
        _402 = const _;
        _313 = core::fmt::rt::Argument::<'_>::new_debug::<()>(_402) -> [return: bb128, unwind continue];
    }

    bb128: {
        _312 = [move _313];
        _311 = &_312;
        _310 = _311 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _308 = Arguments::<'_>::new_v1(move _309, move _310) -> [return: bb129, unwind continue];
    }

    bb129: {
        _307 = format(move _308) -> [return: bb130, unwind continue];
    }

    bb130: {
        _306 = move _307;
        _305 = &_306;
        _304 = &_305;
        _401 = const _;
        _303 = (move _304, _401);
        _314 = (_303.0: &&std::string::String);
        _315 = (_303.1: &&str);
        _317 = <&String as PartialEq<&str>>::eq(_314, _315) -> [return: bb131, unwind: bb170];
    }

    bb131: {
        _316 = Not(move _317);
        switchInt(move _316) -> [0: bb133, otherwise: bb132];
    }

    bb132: {
        _318 = core::panicking::AssertKind::Eq;
        _320 = Option::<Arguments<'_>>::None;
        _319 = core::panicking::assert_failed::<&String, &str>(move _318, _314, _315, move _320) -> bb170;
    }

    bb133: {
        drop(_306) -> [return: bb134, unwind continue];
    }

    bb134: {
        _400 = const _;
        _327 = _400 as &[&str] (Pointer(Unsize));
        _399 = const _;
        _331 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_399) -> [return: bb135, unwind continue];
    }

    bb135: {
        _398 = const _;
        _332 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_398) -> [return: bb136, unwind continue];
    }

    bb136: {
        _330 = [move _331, move _332];
        _329 = &_330;
        _328 = _329 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _326 = Arguments::<'_>::new_v1(move _327, move _328) -> [return: bb137, unwind continue];
    }

    bb137: {
        _325 = format(move _326) -> [return: bb138, unwind continue];
    }

    bb138: {
        _324 = move _325;
        _323 = &_324;
        _322 = &_323;
        _397 = const _;
        _321 = (move _322, _397);
        _333 = (_321.0: &&std::string::String);
        _334 = (_321.1: &&str);
        _336 = <&String as PartialEq<&str>>::eq(_333, _334) -> [return: bb139, unwind: bb169];
    }

    bb139: {
        _335 = Not(move _336);
        switchInt(move _335) -> [0: bb141, otherwise: bb140];
    }

    bb140: {
        _337 = core::panicking::AssertKind::Eq;
        _339 = Option::<Arguments<'_>>::None;
        _338 = core::panicking::assert_failed::<&String, &str>(move _337, _333, _334, move _339) -> bb169;
    }

    bb141: {
        drop(_324) -> [return: bb142, unwind continue];
    }

    bb142: {
        _396 = const _;
        _395 = const _;
        _340 = (_396, _395);
        _341 = (_340.0: &&str);
        _342 = (_340.1: &&str);
        _344 = <&str as PartialEq>::eq(_341, _342) -> [return: bb143, unwind continue];
    }

    bb143: {
        _343 = Not(move _344);
        switchInt(move _343) -> [0: bb145, otherwise: bb144];
    }

    bb144: {
        _345 = core::panicking::AssertKind::Eq;
        _347 = Option::<Arguments<'_>>::None;
        _346 = core::panicking::assert_failed::<&str, &str>(move _345, _341, _342, move _347) -> unwind continue;
    }

    bb145: {
        _349 = Vec::<i32>::new() -> [return: bb146, unwind continue];
    }

    bb146: {
        _352 = Add(const 20_i32, const 2_i32);
        _351 = std::ops::Range::<i32> { start: const 10_i32, end: move _352 };
        _350 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _351) -> [return: bb147, unwind: bb168];
    }

    bb147: {
        _353 = move _350;
        goto -> bb148;
    }

    bb148: {
        _355 = &mut _353;
        _354 = <std::ops::Range<i32> as Iterator>::next(_355) -> [return: bb149, unwind: bb168];
    }

    bb149: {
        _356 = discriminant(_354);
        switchInt(move _356) -> [0: bb151, 1: bb150, otherwise: bb73];
    }

    bb150: {
        _357 = ((_354 as Some).0: i32);
        _359 = &mut _349;
        _358 = Vec::<i32>::push(move _359, _357) -> [return: bb188, unwind: bb168];
    }

    bb151: {
        drop(_349) -> [return: bb152, unwind continue];
    }

    bb152: {
        _394 = const _;
        _393 = const _;
        _348 = (_394, _393);
        _360 = (_348.0: &&str);
        _361 = (_348.1: &&str);
        _363 = <&str as PartialEq>::eq(_360, _361) -> [return: bb153, unwind continue];
    }

    bb153: {
        _362 = Not(move _363);
        switchInt(move _362) -> [0: bb155, otherwise: bb154];
    }

    bb154: {
        _364 = core::panicking::AssertKind::Eq;
        _366 = Option::<Arguments<'_>>::None;
        _365 = core::panicking::assert_failed::<&str, &str>(move _364, _360, _361, move _366) -> unwind continue;
    }

    bb155: {
        _370 = const 3_i32;
        switchInt(_370) -> [3: bb157, otherwise: bb156];
    }

    bb156: {
        _371 = const "pat, other";
        _369 = _371;
        goto -> bb158;
    }

    bb157: {
        _369 = const "pat, single";
        goto -> bb158;
    }

    bb158: {
        _368 = &_369;
        _392 = const _;
        _367 = (move _368, _392);
        _372 = (_367.0: &&str);
        _373 = (_367.1: &&str);
        _375 = <&str as PartialEq>::eq(_372, _373) -> [return: bb159, unwind continue];
    }

    bb159: {
        _374 = Not(move _375);
        switchInt(move _374) -> [0: bb161, otherwise: bb160];
    }

    bb160: {
        _376 = core::panicking::AssertKind::Eq;
        _378 = Option::<Arguments<'_>>::None;
        _377 = core::panicking::assert_failed::<&str, &str>(move _376, _372, _373, move _378) -> unwind continue;
    }

    bb161: {
        _382 = const 3_i32;
        switchInt(_382) -> [6: bb163, otherwise: bb162];
    }

    bb162: {
        _383 = const "pat, other";
        _381 = _383;
        goto -> bb164;
    }

    bb163: {
        _381 = const "pat, single";
        goto -> bb164;
    }

    bb164: {
        _380 = &_381;
        _391 = const _;
        _379 = (move _380, _391);
        _384 = (_379.0: &&str);
        _385 = (_379.1: &&str);
        _387 = <&str as PartialEq>::eq(_384, _385) -> [return: bb165, unwind continue];
    }

    bb165: {
        _386 = Not(move _387);
        switchInt(move _386) -> [0: bb167, otherwise: bb166];
    }

    bb166: {
        _388 = core::panicking::AssertKind::Eq;
        _390 = Option::<Arguments<'_>>::None;
        _389 = core::panicking::assert_failed::<&str, &str>(move _388, _384, _385, move _390) -> unwind continue;
    }

    bb167: {
        return;
    }

    bb168 (cleanup): {
        drop(_349) -> [return: bb186, unwind terminate];
    }

    bb169 (cleanup): {
        drop(_324) -> [return: bb186, unwind terminate];
    }

    bb170 (cleanup): {
        drop(_306) -> [return: bb186, unwind terminate];
    }

    bb171 (cleanup): {
        drop(_288) -> [return: bb186, unwind terminate];
    }

    bb172 (cleanup): {
        drop(_270) -> [return: bb186, unwind terminate];
    }

    bb173 (cleanup): {
        drop(_252) -> [return: bb186, unwind terminate];
    }

    bb174 (cleanup): {
        drop(_206) -> [return: bb186, unwind terminate];
    }

    bb175 (cleanup): {
        drop(_188) -> [return: bb186, unwind terminate];
    }

    bb176 (cleanup): {
        drop(_168) -> [return: bb186, unwind terminate];
    }

    bb177 (cleanup): {
        drop(_145) -> [return: bb186, unwind terminate];
    }

    bb178 (cleanup): {
        drop(_126) -> [return: bb186, unwind terminate];
    }

    bb179 (cleanup): {
        drop(_108) -> [return: bb186, unwind terminate];
    }

    bb180 (cleanup): {
        drop(_90) -> [return: bb186, unwind terminate];
    }

    bb181 (cleanup): {
        drop(_73) -> [return: bb186, unwind terminate];
    }

    bb182 (cleanup): {
        drop(_56) -> [return: bb186, unwind terminate];
    }

    bb183 (cleanup): {
        drop(_38) -> [return: bb186, unwind terminate];
    }

    bb184 (cleanup): {
        drop(_21) -> [return: bb186, unwind terminate];
    }

    bb185 (cleanup): {
        drop(_4) -> [return: bb186, unwind terminate];
    }

    bb186 (cleanup): {
        resume;
    }

    bb187: {
        goto -> bb70;
    }

    bb188: {
        goto -> bb148;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "pat, other";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "pat, single";
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "expr";
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "expr";
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "attr matched expr";
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "attr matched expr";
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "macro caught expr: 2 ..= 4";
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = Add(const 2_i32, const 2_i32);
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = Add(const 1_i32, const 1_i32);
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "macro caught expr: ", const " ..= "];
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "macro caught expr: ()";
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "macro caught expr: "];
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "macro caught expr: 4";
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = Add(const 1_i32, const 3_i32);
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "macro caught expr: "];
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "macro caught expr: -1.2";
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const -1.2f64;
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "macro caught expr: "];
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "macro caught expr: -1.2";
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const -1.2f64;
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "macro caught expr: "];
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "literal, other";
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "literal, in range";
        _0 = &_1;
        return;
    }
}

promoted[24] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "macro caught literal: true";
        _0 = &_1;
        return;
    }
}

promoted[25] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[26] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "macro caught literal: "];
        _0 = &_1;
        return;
    }
}

promoted[27] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "macro caught literal: false";
        _0 = &_1;
        return;
    }
}

promoted[28] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const false;
        _0 = &_1;
        return;
    }
}

promoted[29] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "macro caught literal: "];
        _0 = &_1;
        return;
    }
}

promoted[30] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "literal";
        _0 = &_1;
        return;
    }
}

promoted[31] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "literal";
        _0 = &_1;
        return;
    }
}

promoted[32] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "attr matched literal";
        _0 = &_1;
        return;
    }
}

promoted[33] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "attr matched literal";
        _0 = &_1;
        return;
    }
}

promoted[34] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "macro caught literal: 2 ..= 3";
        _0 = &_1;
        return;
    }
}

promoted[35] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "macro caught literal: 2 ..= 3"];
        _0 = &_1;
        return;
    }
}

promoted[36] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "macro caught literals: -2, -3";
        _0 = &_1;
        return;
    }
}

promoted[37] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const -3_i32;
        _0 = &_1;
        return;
    }
}

promoted[38] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const -2_i32;
        _0 = &_1;
        return;
    }
}

promoted[39] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "macro caught literals: ", const ", "];
        _0 = &_1;
        return;
    }
}

promoted[40] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "macro caught literal: -1.2";
        _0 = &_1;
        return;
    }
}

promoted[41] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const -1.2f64;
        _0 = &_1;
        return;
    }
}

promoted[42] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "macro caught literal: "];
        _0 = &_1;
        return;
    }
}

promoted[43] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "macro caught literal: c";
        _0 = &_1;
        return;
    }
}

promoted[44] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 'c';
        _0 = &_1;
        return;
    }
}

promoted[45] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "macro caught literal: "];
        _0 = &_1;
        return;
    }
}

promoted[46] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "macro caught literal: 50";
        _0 = &_1;
        return;
    }
}

promoted[47] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "macro caught literal: 50"];
        _0 = &_1;
        return;
    }
}

promoted[48] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "macro caught literal: 1";
        _0 = &_1;
        return;
    }
}

promoted[49] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "macro caught literal: 1"];
        _0 = &_1;
        return;
    }
}

promoted[50] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "macro caught literal: 2.2";
        _0 = &_1;
        return;
    }
}

promoted[51] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 2.2000000000000002f64;
        _0 = &_1;
        return;
    }
}

promoted[52] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "macro caught literal: "];
        _0 = &_1;
        return;
    }
}

promoted[53] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "macro caught literal: 2";
        _0 = &_1;
        return;
    }
}

promoted[54] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "macro caught literal: 2"];
        _0 = &_1;
        return;
    }
}

promoted[55] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "macro caught literal: str";
        _0 = &_1;
        return;
    }
}

promoted[56] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "macro caught literal: str"];
        _0 = &_1;
        return;
    }
}
