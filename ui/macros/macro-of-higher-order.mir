// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: (usize, &str);
    let mut _2: usize;
    let mut _3: (&(usize, &str), &(usize, &str));
    let mut _4: &(usize, &str);
    let mut _7: bool;
    let mut _8: bool;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _12: (&i32, &i32);
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: i32;
    let mut _18: i32;
    let _20: !;
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug val => _1;
        let _5: &(usize, &str);
        let _6: &(usize, &str);
        let _13: &i32;
        let _14: &i32;
        let mut _22: &i32;
        let mut _23: &i32;
        let mut _24: &(usize, &str);
        scope 2 {
            debug left_val => _5;
            debug right_val => _6;
            let _9: core::panicking::AssertKind;
            scope 3 {
                debug kind => _9;
            }
        }
        scope 4 {
            debug left_val => _13;
            debug right_val => _14;
            let _19: core::panicking::AssertKind;
            scope 5 {
                debug kind => _19;
            }
        }
    }

    bb0: {
        _2 = Add(const 1_usize, const 2_usize);
        _1 = (move _2, const "foo");
        _4 = &_1;
        _24 = const _;
        _3 = (move _4, _24);
        _5 = (_3.0: &(usize, &str));
        _6 = (_3.1: &(usize, &str));
        _8 = <(usize, &str) as PartialEq>::eq(_5, _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<(usize, &str), (usize, &str)>(move _9, _5, _6, move _11) -> unwind continue;
    }

    bb3: {
        _23 = const _;
        _22 = const _;
        _12 = (_23, _22);
        _13 = (_12.0: &i32);
        _14 = (_12.1: &i32);
        _17 = (*_13);
        _18 = (*_14);
        _16 = Eq(move _17, move _18);
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _19 = core::panicking::AssertKind::Eq;
        _21 = Option::<Arguments<'_>>::None;
        _20 = core::panicking::assert_failed::<i32, i32>(move _19, _13, _14, move _21) -> unwind continue;
    }

    bb5: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 5_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = Add(const 2_i32, const 3_i32);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &(usize, &str) = {
    let mut _0: &(usize, &str);
    let mut _1: (usize, &str);

    bb0: {
        _1 = (const 3_usize, const "foo");
        _0 = &_1;
        return;
    }
}
