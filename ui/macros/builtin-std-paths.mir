// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/macros/builtin-std-paths.rs:4:5: 4:23>::clone(_1: &Core) -> Core {
    debug self => _1;                    // in scope 0 at ui/macros/builtin-std-paths.rs:4:5: 4:23
    let mut _0: Core;                    // return place in scope 0 at ui/macros/builtin-std-paths.rs:4:5: 4:23

    bb0: {
        return;                          // scope 0 at ui/macros/builtin-std-paths.rs:4:23: 4:23
    }
}

fn <impl at ui/macros/builtin-std-paths.rs:6:5: 6:21>::fmt(_1: &Core, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/macros/builtin-std-paths.rs:6:5: 6:21
    debug f => _2;                       // in scope 0 at ui/macros/builtin-std-paths.rs:6:5: 6:21
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/macros/builtin-std-paths.rs:6:5: 6:21
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/macros/builtin-std-paths.rs:6:5: 6:21
    let mut _4: &str;                    // in scope 0 at ui/macros/builtin-std-paths.rs:6:5: 6:21
    let _5: &str;                        // in scope 0 at ui/macros/builtin-std-paths.rs:6:5: 6:21

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/macros/builtin-std-paths.rs:6:5: 6:21
        _5 = const "Core";               // scope 0 at ui/macros/builtin-std-paths.rs:6:5: 6:21
                                         // mir::Constant
                                         // + span: ui/macros/builtin-std-paths.rs:6:5: 6:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/macros/builtin-std-paths.rs:6:5: 6:21
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/macros/builtin-std-paths.rs:6:5: 6:21
                                         // mir::Constant
                                         // + span: ui/macros/builtin-std-paths.rs:6:5: 6:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/macros/builtin-std-paths.rs:6:21: 6:21
    }
}

fn <impl at ui/macros/builtin-std-paths.rs:7:5: 7:27>::default() -> Core {
    let mut _0: Core;                    // return place in scope 0 at ui/macros/builtin-std-paths.rs:7:5: 7:27

    bb0: {
        return;                          // scope 0 at ui/macros/builtin-std-paths.rs:7:27: 7:27
    }
}

fn <impl at ui/macros/builtin-std-paths.rs:8:5: 8:18>::assert_receiver_is_total_eq(_1: &Core) -> () {
    debug self => _1;                    // in scope 0 at ui/macros/builtin-std-paths.rs:8:5: 8:18
    let mut _0: ();                      // return place in scope 0 at ui/macros/builtin-std-paths.rs:8:5: 8:18

    bb0: {
        return;                          // scope 0 at ui/macros/builtin-std-paths.rs:8:18: 8:18
    }
}

fn <impl at ui/macros/builtin-std-paths.rs:9:5: 9:21>::hash(_1: &Core, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/macros/builtin-std-paths.rs:9:5: 9:21
    debug state => _2;                   // in scope 0 at ui/macros/builtin-std-paths.rs:9:5: 9:21
    let mut _0: ();                      // return place in scope 0 at ui/macros/builtin-std-paths.rs:9:5: 9:21

    bb0: {
        return;                          // scope 0 at ui/macros/builtin-std-paths.rs:9:21: 9:21
    }
}

fn <impl at ui/macros/builtin-std-paths.rs:10:5: 10:19>::cmp(_1: &Core, _2: &Core) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/macros/builtin-std-paths.rs:10:5: 10:19
    debug other => _2;                   // in scope 0 at ui/macros/builtin-std-paths.rs:10:5: 10:19
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/macros/builtin-std-paths.rs:10:5: 10:19

    bb0: {
        _0 = const Equal;                // scope 0 at ui/macros/builtin-std-paths.rs:10:5: 10:19
                                         // mir::Constant
                                         // + span: ui/macros/builtin-std-paths.rs:10:5: 10:19
                                         // + literal: Const { ty: std::cmp::Ordering, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/macros/builtin-std-paths.rs:10:19: 10:19
    }
}

fn <impl at ui/macros/builtin-std-paths.rs:11:5: 11:25>::eq(_1: &Core, _2: &Core) -> bool {
    debug self => _1;                    // in scope 0 at ui/macros/builtin-std-paths.rs:11:5: 11:25
    debug other => _2;                   // in scope 0 at ui/macros/builtin-std-paths.rs:11:5: 11:25
    let mut _0: bool;                    // return place in scope 0 at ui/macros/builtin-std-paths.rs:11:5: 11:25

    bb0: {
        _0 = const true;                 // scope 0 at ui/macros/builtin-std-paths.rs:11:5: 11:25
        return;                          // scope 0 at ui/macros/builtin-std-paths.rs:11:25: 11:25
    }
}

fn <impl at ui/macros/builtin-std-paths.rs:12:5: 12:26>::partial_cmp(_1: &Core, _2: &Core) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/macros/builtin-std-paths.rs:12:5: 12:26
    debug other => _2;                   // in scope 0 at ui/macros/builtin-std-paths.rs:12:5: 12:26
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/macros/builtin-std-paths.rs:12:5: 12:26

    bb0: {
        _0 = const Option::<std::cmp::Ordering>::Some(Equal); // scope 0 at ui/macros/builtin-std-paths.rs:12:5: 12:26
                                         // mir::Constant
                                         // + span: ui/macros/builtin-std-paths.rs:12:5: 12:26
                                         // + literal: Const { ty: Option<std::cmp::Ordering>, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/macros/builtin-std-paths.rs:12:26: 12:26
    }
}

fn <impl at ui/macros/builtin-std-paths.rs:17:5: 17:22>::clone(_1: &Std) -> Std {
    debug self => _1;                    // in scope 0 at ui/macros/builtin-std-paths.rs:17:5: 17:22
    let mut _0: Std;                     // return place in scope 0 at ui/macros/builtin-std-paths.rs:17:5: 17:22

    bb0: {
        return;                          // scope 0 at ui/macros/builtin-std-paths.rs:17:22: 17:22
    }
}

fn <impl at ui/macros/builtin-std-paths.rs:19:5: 19:20>::fmt(_1: &Std, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/macros/builtin-std-paths.rs:19:5: 19:20
    debug f => _2;                       // in scope 0 at ui/macros/builtin-std-paths.rs:19:5: 19:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/macros/builtin-std-paths.rs:19:5: 19:20
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/macros/builtin-std-paths.rs:19:5: 19:20
    let mut _4: &str;                    // in scope 0 at ui/macros/builtin-std-paths.rs:19:5: 19:20
    let _5: &str;                        // in scope 0 at ui/macros/builtin-std-paths.rs:19:5: 19:20

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/macros/builtin-std-paths.rs:19:5: 19:20
        _5 = const "Std";                // scope 0 at ui/macros/builtin-std-paths.rs:19:5: 19:20
                                         // mir::Constant
                                         // + span: ui/macros/builtin-std-paths.rs:19:5: 19:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/macros/builtin-std-paths.rs:19:5: 19:20
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/macros/builtin-std-paths.rs:19:5: 19:20
                                         // mir::Constant
                                         // + span: ui/macros/builtin-std-paths.rs:19:5: 19:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/macros/builtin-std-paths.rs:19:20: 19:20
    }
}

fn <impl at ui/macros/builtin-std-paths.rs:20:5: 20:26>::default() -> Std {
    let mut _0: Std;                     // return place in scope 0 at ui/macros/builtin-std-paths.rs:20:5: 20:26

    bb0: {
        return;                          // scope 0 at ui/macros/builtin-std-paths.rs:20:26: 20:26
    }
}

fn <impl at ui/macros/builtin-std-paths.rs:21:5: 21:17>::assert_receiver_is_total_eq(_1: &Std) -> () {
    debug self => _1;                    // in scope 0 at ui/macros/builtin-std-paths.rs:21:5: 21:17
    let mut _0: ();                      // return place in scope 0 at ui/macros/builtin-std-paths.rs:21:5: 21:17

    bb0: {
        return;                          // scope 0 at ui/macros/builtin-std-paths.rs:21:17: 21:17
    }
}

fn <impl at ui/macros/builtin-std-paths.rs:22:5: 22:20>::hash(_1: &Std, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/macros/builtin-std-paths.rs:22:5: 22:20
    debug state => _2;                   // in scope 0 at ui/macros/builtin-std-paths.rs:22:5: 22:20
    let mut _0: ();                      // return place in scope 0 at ui/macros/builtin-std-paths.rs:22:5: 22:20

    bb0: {
        return;                          // scope 0 at ui/macros/builtin-std-paths.rs:22:20: 22:20
    }
}

fn <impl at ui/macros/builtin-std-paths.rs:23:5: 23:18>::cmp(_1: &Std, _2: &Std) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/macros/builtin-std-paths.rs:23:5: 23:18
    debug other => _2;                   // in scope 0 at ui/macros/builtin-std-paths.rs:23:5: 23:18
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/macros/builtin-std-paths.rs:23:5: 23:18

    bb0: {
        _0 = const Equal;                // scope 0 at ui/macros/builtin-std-paths.rs:23:5: 23:18
                                         // mir::Constant
                                         // + span: ui/macros/builtin-std-paths.rs:23:5: 23:18
                                         // + literal: Const { ty: std::cmp::Ordering, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/macros/builtin-std-paths.rs:23:18: 23:18
    }
}

fn <impl at ui/macros/builtin-std-paths.rs:24:5: 24:24>::eq(_1: &Std, _2: &Std) -> bool {
    debug self => _1;                    // in scope 0 at ui/macros/builtin-std-paths.rs:24:5: 24:24
    debug other => _2;                   // in scope 0 at ui/macros/builtin-std-paths.rs:24:5: 24:24
    let mut _0: bool;                    // return place in scope 0 at ui/macros/builtin-std-paths.rs:24:5: 24:24

    bb0: {
        _0 = const true;                 // scope 0 at ui/macros/builtin-std-paths.rs:24:5: 24:24
        return;                          // scope 0 at ui/macros/builtin-std-paths.rs:24:24: 24:24
    }
}

fn <impl at ui/macros/builtin-std-paths.rs:25:5: 25:25>::partial_cmp(_1: &Std, _2: &Std) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/macros/builtin-std-paths.rs:25:5: 25:25
    debug other => _2;                   // in scope 0 at ui/macros/builtin-std-paths.rs:25:5: 25:25
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/macros/builtin-std-paths.rs:25:5: 25:25

    bb0: {
        _0 = const Option::<std::cmp::Ordering>::Some(Equal); // scope 0 at ui/macros/builtin-std-paths.rs:25:5: 25:25
                                         // mir::Constant
                                         // + span: ui/macros/builtin-std-paths.rs:25:5: 25:25
                                         // + literal: Const { ty: Option<std::cmp::Ordering>, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/macros/builtin-std-paths.rs:25:25: 25:25
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/macros/builtin-std-paths.rs:29:11: 29:11

    bb0: {
        return;                          // scope 0 at ui/macros/builtin-std-paths.rs:32:2: 32:2
    }
}
