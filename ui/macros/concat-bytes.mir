// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&&[u8; 0], &&[u8; 0]);
    let _2: &&[u8; 0];
    let _3: &&[u8; 0];
    let mut _4: bool;
    let mut _5: bool;
    let _7: !;
    let mut _8: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _9: (&&[u8; 12], &&[u8; 12]);
    let _10: &&[u8; 12];
    let _11: &&[u8; 12];
    let mut _12: bool;
    let mut _13: bool;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&&[u8; 8], &&[u8; 8]);
    let _18: &&[u8; 8];
    let _19: &&[u8; 8];
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: &&[u8; 8];
    let mut _26: &&[u8; 8];
    let mut _27: &&[u8; 12];
    let mut _28: &&[u8; 12];
    let mut _29: &&[u8; 0];
    let mut _30: &&[u8; 0];
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _6: core::panicking::AssertKind;
        scope 2 {
            debug kind => _6;
        }
    }
    scope 3 {
        debug left_val => _10;
        debug right_val => _11;
        let _14: core::panicking::AssertKind;
        scope 4 {
            debug kind => _14;
        }
    }
    scope 5 {
        debug left_val => _18;
        debug right_val => _19;
        let _22: core::panicking::AssertKind;
        scope 6 {
            debug kind => _22;
        }
    }

    bb0: {
        _30 = const _;
        _29 = const _;
        _1 = (_30, _29);
        _2 = (_1.0: &&[u8; 0]);
        _3 = (_1.1: &&[u8; 0]);
        _5 = <&[u8; 0] as PartialEq>::eq(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = core::panicking::AssertKind::Eq;
        _8 = Option::<Arguments<'_>>::None;
        _7 = core::panicking::assert_failed::<&[u8; 0], &[u8; 0]>(move _6, _2, _3, move _8) -> unwind continue;
    }

    bb3: {
        _28 = const _;
        _27 = const _;
        _9 = (_28, _27);
        _10 = (_9.0: &&[u8; 12]);
        _11 = (_9.1: &&[u8; 12]);
        _13 = <&[u8; 12] as PartialEq>::eq(_10, _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<&[u8; 12], &[u8; 12]>(move _14, _10, _11, move _16) -> unwind continue;
    }

    bb6: {
        _26 = const _;
        _25 = const _;
        _17 = (_26, _25);
        _18 = (_17.0: &&[u8; 8]);
        _19 = (_17.1: &&[u8; 8]);
        _21 = <&[u8; 8] as PartialEq>::eq(_18, _19) -> [return: bb7, unwind continue];
    }

    bb7: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<&[u8; 8], &[u8; 8]>(move _22, _18, _19, move _24) -> unwind continue;
    }

    bb9: {
        return;
    }
}

promoted[0] in main: &&[u8; 8] = {
    let mut _0: &&[u8; 8];
    let mut _1: &[u8; 8];

    bb0: {
        _1 = const b"ABCDEFGH";
        _0 = &_1;
        return;
    }
}

alloc5 (size: 8, align: 1) {
    41 42 43 44 45 46 47 48                         │ ABCDEFGH
}

promoted[1] in main: &&[u8; 8] = {
    let mut _0: &&[u8; 8];
    let mut _1: &[u8; 8];

    bb0: {
        _1 = const b"ABCDEFGH";
        _0 = &_1;
        return;
    }
}

alloc4 (size: 8, align: 1) {
    41 42 43 44 45 46 47 48                         │ ABCDEFGH
}

promoted[2] in main: &&[u8; 12] = {
    let mut _0: &&[u8; 12];
    let mut _1: &[u8; 12];

    bb0: {
        _1 = const b"ABCDEFGHHIII";
        _0 = &_1;
        return;
    }
}

alloc3 (size: 12, align: 1) {
    41 42 43 44 45 46 47 48 48 49 49 49             │ ABCDEFGHHIII
}

promoted[3] in main: &&[u8; 12] = {
    let mut _0: &&[u8; 12];
    let mut _1: &[u8; 12];

    bb0: {
        _1 = const b"ABCDEFGHHIII";
        _0 = &_1;
        return;
    }
}

alloc2 (size: 12, align: 1) {
    41 42 43 44 45 46 47 48 48 49 49 49             │ ABCDEFGHHIII
}

promoted[4] in main: &&[u8; 0] = {
    let mut _0: &&[u8; 0];
    let mut _1: &[u8; 0];
    let mut _2: [u8; 0];

    bb0: {
        _2 = [];
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &&[u8; 0] = {
    let mut _0: &&[u8; 0];
    let mut _1: &[u8; 0];

    bb0: {
        _1 = const b"";
        _0 = &_1;
        return;
    }
}

alloc1 (size: 0, align: 1) {}
