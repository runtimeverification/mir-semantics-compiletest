// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn add(_1: isize, _2: isize) -> isize {
    debug a => _1;
    debug b => _2;
    let mut _0: isize;

    bb0: {
        _0 = Add(_1, _2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _2: (&i32, &i32);
    let mut _3: &i32;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: i32;
    let mut _9: i32;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&isize, &isize);
    let mut _14: &isize;
    let _15: isize;
    let mut _16: isize;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: isize;
    let mut _22: isize;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _26: (&i32, &i32);
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: i32;
    let mut _32: i32;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug y => _1;
        let _4: &i32;
        let _5: &i32;
        let _17: &isize;
        let _18: &isize;
        let _27: &i32;
        let _28: &i32;
        let mut _36: &i32;
        let mut _37: &i32;
        let mut _38: &isize;
        let mut _39: &i32;
        scope 2 {
            debug left_val => _4;
            debug right_val => _5;
            let _10: core::panicking::AssertKind;
            scope 3 {
                debug kind => _10;
            }
        }
        scope 4 {
            debug left_val => _17;
            debug right_val => _18;
            let _23: core::panicking::AssertKind;
            scope 5 {
                debug kind => _23;
            }
        }
        scope 6 {
            debug left_val => _27;
            debug right_val => _28;
            let _33: core::panicking::AssertKind;
            scope 7 {
                debug kind => _33;
            }
        }
    }

    bb0: {
        _1 = Mul(const 8_i32, const 2_i32);
        _3 = &_1;
        _39 = const _;
        _2 = (move _3, _39);
        _4 = (_2.0: &i32);
        _5 = (_2.1: &i32);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<i32, i32>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb2: {
        _16 = add(const 4_isize, const 4_isize) -> [return: bb3, unwind continue];
    }

    bb3: {
        _15 = mult(const 2_isize, move _16) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = &_15;
        _38 = const _;
        _13 = (move _14, _38);
        _17 = (_13.0: &isize);
        _18 = (_13.1: &isize);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<isize, isize>(move _23, _17, _18, move _25) -> unwind continue;
    }

    bb6: {
        _37 = const _;
        _36 = const _;
        _26 = (_37, _36);
        _27 = (_26.0: &i32);
        _28 = (_26.1: &i32);
        _31 = (*_27);
        _32 = (*_28);
        _30 = Eq(move _31, move _32);
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<i32, i32>(move _33, _27, _28, move _35) -> unwind continue;
    }

    bb8: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 16_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 16_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 16_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 16_i32;
        _0 = &_1;
        return;
    }
}

fn mult(_1: isize, _2: isize) -> isize {
    debug a => _1;
    debug b => _2;
    let mut _0: isize;

    bb0: {
        _0 = Mul(_1, _2);
        return;
    }
}
