// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: Option<char>) -> usize {
    debug c => _1;
    let mut _0: usize;
    let mut _2: isize;

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [1: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = const 3_usize;
        goto -> bb5;
    }

    bb2: {
        switchInt(((_1 as Some).0: char)) -> [120: bb3, 121: bb4, otherwise: bb1];
    }

    bb3: {
        _0 = const 1_usize;
        goto -> bb5;
    }

    bb4: {
        _0 = const 2_usize;
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let mut _4: std::option::Option<char>;
    let _5: &usize;
    let _6: &usize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&usize, &usize);
    let mut _15: &usize;
    let _16: usize;
    let mut _17: std::option::Option<char>;
    let _18: &usize;
    let _19: &usize;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: usize;
    let mut _23: usize;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&usize, &usize);
    let mut _28: &usize;
    let _29: usize;
    let mut _30: std::option::Option<char>;
    let _31: &usize;
    let _32: &usize;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: usize;
    let mut _36: usize;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&i32, &i32);
    let mut _41: &i32;
    let _42: i32;
    let mut _43: std::option::Option<char>;
    let mut _44: isize;
    let _45: &i32;
    let _46: &i32;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: i32;
    let mut _50: i32;
    let _52: !;
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _54: (&i32, &i32);
    let mut _55: &i32;
    let _56: i32;
    let mut _57: std::option::Option<char>;
    let mut _58: isize;
    let _59: &i32;
    let _60: &i32;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: i32;
    let mut _64: i32;
    let _66: !;
    let mut _67: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _68: (&i32, &i32);
    let mut _69: &i32;
    let _70: i32;
    let mut _71: std::option::Option<char>;
    let mut _72: isize;
    let _73: &i32;
    let _74: &i32;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: i32;
    let mut _78: i32;
    let _80: !;
    let mut _81: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _82: (&i32, &i32);
    let mut _83: &i32;
    let _84: i32;
    let _85: i32;
    let _86: &i32;
    let _87: &i32;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: i32;
    let mut _91: i32;
    let _93: !;
    let mut _94: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _95: &i32;
    let mut _96: &i32;
    let mut _97: &i32;
    let mut _98: &i32;
    let mut _99: &usize;
    let mut _100: &usize;
    let mut _101: &usize;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }
    scope 5 {
        debug left_val => _31;
        debug right_val => _32;
        let _37: core::panicking::AssertKind;
        scope 6 {
            debug kind => _37;
        }
    }
    scope 7 {
        debug left_val => _45;
        debug right_val => _46;
        let _51: core::panicking::AssertKind;
        scope 8 {
            debug kind => _51;
        }
    }
    scope 9 {
        debug left_val => _59;
        debug right_val => _60;
        let _65: core::panicking::AssertKind;
        scope 10 {
            debug kind => _65;
        }
    }
    scope 11 {
        debug left_val => _73;
        debug right_val => _74;
        let _79: core::panicking::AssertKind;
        scope 12 {
            debug kind => _79;
        }
    }
    scope 13 {
        debug x => const 2_i32;
    }
    scope 14 {
        debug left_val => _86;
        debug right_val => _87;
        let _92: core::panicking::AssertKind;
        scope 15 {
            debug kind => _92;
        }
    }

    bb0: {
        _101 = const _;
        _4 = Option::<char>::Some(const 'x');
        _3 = f(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _1 = (_101, move _2);
        _5 = (_1.0: &usize);
        _6 = (_1.1: &usize);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<usize, usize>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb3: {
        _100 = const _;
        _17 = Option::<char>::Some(const 'y');
        _16 = f(move _17) -> [return: bb4, unwind continue];
    }

    bb4: {
        _15 = &_16;
        _14 = (_100, move _15);
        _18 = (_14.0: &usize);
        _19 = (_14.1: &usize);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<usize, usize>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb6: {
        _99 = const _;
        _30 = Option::<char>::None;
        _29 = f(move _30) -> [return: bb7, unwind continue];
    }

    bb7: {
        _28 = &_29;
        _27 = (_99, move _28);
        _31 = (_27.0: &usize);
        _32 = (_27.1: &usize);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<usize, usize>(move _37, _31, _32, move _39) -> unwind continue;
    }

    bb9: {
        _98 = const _;
        _43 = Option::<char>::Some(const 'x');
        _44 = discriminant(_43);
        switchInt(move _44) -> [1: bb11, otherwise: bb10];
    }

    bb10: {
        _42 = const 2_i32;
        goto -> bb13;
    }

    bb11: {
        switchInt(((_43 as Some).0: char)) -> [120: bb12, otherwise: bb10];
    }

    bb12: {
        _42 = const 1_i32;
        goto -> bb13;
    }

    bb13: {
        _41 = &_42;
        _40 = (_98, move _41);
        _45 = (_40.0: &i32);
        _46 = (_40.1: &i32);
        _49 = (*_45);
        _50 = (*_46);
        _48 = Eq(move _49, move _50);
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _51 = core::panicking::AssertKind::Eq;
        _53 = Option::<Arguments<'_>>::None;
        _52 = core::panicking::assert_failed::<i32, i32>(move _51, _45, _46, move _53) -> unwind continue;
    }

    bb15: {
        _97 = const _;
        _57 = Option::<char>::Some(const 'x');
        _58 = discriminant(_57);
        switchInt(move _58) -> [1: bb17, otherwise: bb16];
    }

    bb16: {
        _56 = const 2_i32;
        goto -> bb19;
    }

    bb17: {
        switchInt(((_57 as Some).0: char)) -> [120: bb18, otherwise: bb16];
    }

    bb18: {
        _56 = const 1_i32;
        goto -> bb19;
    }

    bb19: {
        _55 = &_56;
        _54 = (_97, move _55);
        _59 = (_54.0: &i32);
        _60 = (_54.1: &i32);
        _63 = (*_59);
        _64 = (*_60);
        _62 = Eq(move _63, move _64);
        _61 = Not(move _62);
        switchInt(move _61) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _65 = core::panicking::AssertKind::Eq;
        _67 = Option::<Arguments<'_>>::None;
        _66 = core::panicking::assert_failed::<i32, i32>(move _65, _59, _60, move _67) -> unwind continue;
    }

    bb21: {
        _96 = const _;
        _71 = Option::<char>::Some(const 'x');
        _72 = discriminant(_71);
        switchInt(move _72) -> [1: bb23, otherwise: bb22];
    }

    bb22: {
        _70 = const 2_i32;
        goto -> bb25;
    }

    bb23: {
        switchInt(((_71 as Some).0: char)) -> [120: bb24, otherwise: bb22];
    }

    bb24: {
        _70 = const 1_i32;
        goto -> bb25;
    }

    bb25: {
        _69 = &_70;
        _68 = (_96, move _69);
        _73 = (_68.0: &i32);
        _74 = (_68.1: &i32);
        _77 = (*_73);
        _78 = (*_74);
        _76 = Eq(move _77, move _78);
        _75 = Not(move _76);
        switchInt(move _75) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _79 = core::panicking::AssertKind::Eq;
        _81 = Option::<Arguments<'_>>::None;
        _80 = core::panicking::assert_failed::<i32, i32>(move _79, _73, _74, move _81) -> unwind continue;
    }

    bb27: {
        _95 = const _;
        _85 = const 2_i32;
        _84 = Add(_85, const 1_i32);
        _83 = &_84;
        _82 = (_95, move _83);
        _86 = (_82.0: &i32);
        _87 = (_82.1: &i32);
        _90 = (*_86);
        _91 = (*_87);
        _89 = Eq(move _90, move _91);
        _88 = Not(move _89);
        switchInt(move _88) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _92 = core::panicking::AssertKind::Eq;
        _94 = Option::<Arguments<'_>>::None;
        _93 = core::panicking::assert_failed::<i32, i32>(move _92, _86, _87, move _94) -> unwind continue;
    }

    bb29: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}
