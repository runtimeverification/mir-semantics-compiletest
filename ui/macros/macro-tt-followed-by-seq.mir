// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15>::fmt(_1: &Join<A, B>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &A;
    let _5: &B;
    let _6: &str;
    let mut _7: &dyn std::fmt::Debug;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&B;
    let _10: &A;
    let _11: &B;
    let _12: &str;
    let mut _13: &dyn std::fmt::Debug;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &&B;
    scope 1 {
        debug __self_0 => _4;
        debug __self_1 => _5;
    }
    scope 2 {
        debug __self_0 => _10;
        debug __self_1 => _11;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _10 = &(((*_1) as Skip).0: A);
        _11 = &(((*_1) as Skip).1: B);
        _12 = const "Skip";
        _13 = _10 as &dyn std::fmt::Debug (Pointer(Unsize));
        _15 = &_11;
        _14 = _15 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field2_finish(_2, _12, move _13, move _14) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Keep).0: A);
        _5 = &(((*_1) as Keep).1: B);
        _6 = const "Keep";
        _7 = _4 as &dyn std::fmt::Debug (Pointer(Unsize));
        _9 = &_5;
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field2_finish(_2, _6, move _7, move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Join<i32, Join<i32, Join<i32, Join<i32, ()>>>>;
    let mut _2: Join<i32, Join<i32, Join<i32, ()>>>;
    let mut _3: Join<i32, Join<i32, ()>>;
    let mut _4: Join<i32, ()>;
    let mut _5: (&&str, &std::string::String);
    let mut _6: &std::string::String;
    let _7: std::string::String;
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: [core::fmt::rt::Argument<'_>; 1];
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &Join<i32, Join<i32, Join<i32, Join<i32, ()>>>>;
    let mut _18: bool;
    let mut _19: bool;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug list => _1;
        let _8: std::string::String;
        let _16: &&str;
        let _17: &std::string::String;
        let mut _23: &[&str; 1];
        let mut _24: &&str;
        scope 2 {
            debug res => _8;
        }
        scope 3 {
            debug left_val => _16;
            debug right_val => _17;
            let _20: core::panicking::AssertKind;
            scope 4 {
                debug kind => _20;
            }
        }
    }

    bb0: {
        _4 = Join::<i32, ()>::Skip(const 4_i32, const ());
        _3 = Join::<i32, Join<i32, ()>>::Keep(const 3_i32, move _4);
        _2 = Join::<i32, Join<i32, Join<i32, ()>>>::Skip(const 2_i32, move _3);
        _1 = Join::<i32, Join<i32, Join<i32, Join<i32, ()>>>>::Keep(const 1_i32, move _2);
        _24 = const _;
        _23 = const _;
        _10 = _23 as &[&str] (Pointer(Unsize));
        _15 = &_1;
        _14 = core::fmt::rt::Argument::<'_>::new_debug::<Join<i32, Join<i32, Join<i32, Join<i32, ()>>>>>(_15) -> [return: bb1, unwind continue];
    }

    bb1: {
        _13 = [move _14];
        _12 = &_13;
        _11 = _12 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = format(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = move _8;
        _6 = &_7;
        _5 = (_24, move _6);
        _16 = (_5.0: &&str);
        _17 = (_5.1: &std::string::String);
        _19 = <&str as PartialEq<String>>::eq(_16, _17) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<&str, String>(move _20, _16, _17, move _22) -> bb8;
    }

    bb6: {
        drop(_7) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_7) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Keep(1, Skip(2, Keep(3, Skip(4, ()))))";
        _0 = &_1;
        return;
    }
}

fn Join::Keep(_1: A, _2: B) -> Join<A, B> {
    let mut _0: Join<A, B>;

    bb0: {
        _0 = Join::<A, B>::Keep(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Join::Keep(_1: A, _2: B) -> Join<A, B> {
    let mut _0: Join<A, B>;

    bb0: {
        _0 = Join::<A, B>::Keep(move _1, move _2);
        return;
    }
}

fn Join::Skip(_1: A, _2: B) -> Join<A, B> {
    let mut _0: Join<A, B>;

    bb0: {
        _0 = Join::<A, B>::Skip(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Join::Skip(_1: A, _2: B) -> Join<A, B> {
    let mut _0: Join<A, B>;

    bb0: {
        _0 = Join::<A, B>::Skip(move _1, move _2);
        return;
    }
}
