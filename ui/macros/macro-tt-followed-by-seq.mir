// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15>::fmt(_1: &Join<A, B>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
    debug f => _2;                       // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
    let mut _3: isize;                   // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
    let _4: &A;                          // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:10:8: 10:9
    let _5: &B;                          // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:10:10: 10:11
    let mut _6: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
    let mut _7: &str;                    // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
    let _8: &str;                        // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
    let mut _9: &dyn std::fmt::Debug;    // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:10:8: 10:9
    let mut _10: &A;                     // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:10:8: 10:9
    let mut _11: &dyn std::fmt::Debug;   // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:10:10: 10:11
    let mut _12: &&B;                    // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:10:10: 10:11
    let _13: &&B;                        // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:10:10: 10:11
    let _14: &A;                         // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:11:8: 11:9
    let _15: &B;                         // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:11:10: 11:11
    let mut _16: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
    let mut _17: &str;                   // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
    let _18: &str;                       // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
    let mut _19: &dyn std::fmt::Debug;   // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:11:8: 11:9
    let mut _20: &A;                     // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:11:8: 11:9
    let mut _21: &dyn std::fmt::Debug;   // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:11:10: 11:11
    let mut _22: &&B;                    // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:11:10: 11:11
    let _23: &&B;                        // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:11:10: 11:11
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/macros/macro-tt-followed-by-seq.rs:10:8: 10:9
        debug __self_1 => _5;            // in scope 1 at ui/macros/macro-tt-followed-by-seq.rs:10:10: 10:11
    }
    scope 2 {
        debug __self_0 => _14;           // in scope 2 at ui/macros/macro-tt-followed-by-seq.rs:11:8: 11:9
        debug __self_1 => _15;           // in scope 2 at ui/macros/macro-tt-followed-by-seq.rs:11:10: 11:11
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
    }

    bb1: {
        _14 = &(((*_1) as Skip).0: A);   // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:11:8: 11:9
        _15 = &(((*_1) as Skip).1: B);   // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:11:10: 11:11
        _16 = &mut (*_2);                // scope 2 at ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
        _18 = const "Skip";              // scope 2 at ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _17 = _18;                       // scope 2 at ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
        _20 = _14;                       // scope 2 at ui/macros/macro-tt-followed-by-seq.rs:11:8: 11:9
        _19 = move _20 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/macros/macro-tt-followed-by-seq.rs:11:8: 11:9
        _23 = &_15;                      // scope 2 at ui/macros/macro-tt-followed-by-seq.rs:11:10: 11:11
        _22 = _23;                       // scope 2 at ui/macros/macro-tt-followed-by-seq.rs:11:10: 11:11
        _21 = move _22 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/macros/macro-tt-followed-by-seq.rs:11:10: 11:11
        _0 = Formatter::<'_>::debug_tuple_field2_finish(move _16, move _17, move _19, move _21) -> bb4; // scope 2 at ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c), &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field2_finish}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
    }

    bb3: {
        _4 = &(((*_1) as Keep).0: A);    // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:10:8: 10:9
        _5 = &(((*_1) as Keep).1: B);    // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:10:10: 10:11
        _6 = &mut (*_2);                 // scope 1 at ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
        _8 = const "Keep";               // scope 1 at ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 1 at ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
        _10 = _4;                        // scope 1 at ui/macros/macro-tt-followed-by-seq.rs:10:8: 10:9
        _9 = move _10 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/macros/macro-tt-followed-by-seq.rs:10:8: 10:9
        _13 = &_5;                       // scope 1 at ui/macros/macro-tt-followed-by-seq.rs:10:10: 10:11
        _12 = _13;                       // scope 1 at ui/macros/macro-tt-followed-by-seq.rs:10:10: 10:11
        _11 = move _12 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/macros/macro-tt-followed-by-seq.rs:10:10: 10:11
        _0 = Formatter::<'_>::debug_tuple_field2_finish(move _6, move _7, move _9, move _11) -> bb4; // scope 1 at ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/macros/macro-tt-followed-by-seq.rs:7:10: 7:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c), &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field2_finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:7:15: 7:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:24:11: 24:11
    let _1: Join<i32, Join<i32, Join<i32, Join<i32, ()>>>>; // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:25:9: 25:13
    let mut _2: Join<i32, Join<i32, Join<i32, ()>>>; // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:16:28: 16:70
    let mut _3: Join<i32, Join<i32, ()>>; // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:15:35: 15:76
    let mut _4: Join<i32, ()>;           // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:16:28: 16:70
    let mut _5: ();                      // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:17:12: 17:14
    let mut _6: (&&str, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _7: &&str;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _8: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _9: std::string::String;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let mut _11: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _12: &[&str];                // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:27:24: 27:30
    let mut _13: &[&str; 1];             // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:27:24: 27:30
    let _14: &[&str; 1];                 // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:27:24: 27:30
    let mut _15: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _16: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _17: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _18: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _19: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:27:32: 27:36
    let mut _20: &Join<i32, Join<i32, Join<i32, Join<i32, ()>>>>; // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:27:32: 27:36
    let _21: &Join<i32, Join<i32, Join<i32, Join<i32, ()>>>>; // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:27:32: 27:36
    let mut _24: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _26: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _27: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _29: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _30: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _31: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _32: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _33: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _34: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug list => _1;                // in scope 1 at ui/macros/macro-tt-followed-by-seq.rs:25:9: 25:13
        let _10: std::string::String;    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
        let _22: &&str;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _23: &std::string::String;   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _36: &[&str; 1];         // in scope 1 at ui/macros/macro-tt-followed-by-seq.rs:27:24: 27:30
        let mut _37: &&str;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 2 {
            debug res => _10;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
        }
        scope 3 {
            debug left_val => _22;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _23;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _28: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 4 {
                debug kind => _28;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _4 = Join::<i32, ()>::Skip(const 4_i32, move _5); // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:16:28: 16:70
        _3 = Join::<i32, Join<i32, ()>>::Keep(const 3_i32, move _4); // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:15:35: 15:76
        _2 = Join::<i32, Join<i32, Join<i32, ()>>>::Skip(const 2_i32, move _3); // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:16:28: 16:70
        _1 = Join::<i32, Join<i32, Join<i32, Join<i32, ()>>>>::Keep(const 1_i32, move _2); // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:15:35: 15:76
        _37 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[1])) }
        _7 = _37;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _36 = const _;                   // scope 1 at ui/macros/macro-tt-followed-by-seq.rs:27:24: 27:30
                                         // mir::Constant
                                         // + span: ui/macros/macro-tt-followed-by-seq.rs:27:24: 27:30
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[0])) }
        _14 = _36;                       // scope 1 at ui/macros/macro-tt-followed-by-seq.rs:27:24: 27:30
        _13 = _14;                       // scope 1 at ui/macros/macro-tt-followed-by-seq.rs:27:24: 27:30
        _12 = move _13 as &[&str] (Pointer(Unsize)); // scope 1 at ui/macros/macro-tt-followed-by-seq.rs:27:24: 27:30
        _21 = &_1;                       // scope 1 at ui/macros/macro-tt-followed-by-seq.rs:27:32: 27:36
        _20 = _21;                       // scope 1 at ui/macros/macro-tt-followed-by-seq.rs:27:32: 27:36
        _19 = core::fmt::ArgumentV1::<'_>::new_debug::<Join<i32, Join<i32, Join<i32, Join<i32, ()>>>>>(move _20) -> bb1; // scope 1 at ui/macros/macro-tt-followed-by-seq.rs:27:32: 27:36
                                         // mir::Constant
                                         // + span: ui/macros/macro-tt-followed-by-seq.rs:27:32: 27:36
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b Join<i32, Join<i32, Join<i32, Join<i32, ()>>>>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Join<i32, Join<i32, Join<i32, Join<i32, ()>>>>>}, val: Value(<ZST>) }
    }

    bb1: {
        _18 = [move _19];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _17 = &_18;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _16 = _17;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _15 = move _16 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _11 = Arguments::<'_>::new_v1(move _12, move _15) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = format(move _11) -> bb3;   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = move _10;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _8 = &_9;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _6 = (move _7, move _8);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _22 = (_6.0: &&str);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _23 = (_6.1: &std::string::String); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _26 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _27 = _23;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _25 = <&str as PartialEq<String>>::eq(move _26, move _27) -> [return: bb4, unwind: bb8]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b String) -> bool {<&str as PartialEq<String>>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _24 = Not(move _25);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _24) -> [0: bb6, otherwise: bb5]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _28 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _30 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _32 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _31 = _32;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _33 = _34;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _35 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _29 = core::panicking::assert_failed::<&str, String>(move _30, move _31, move _33, move _35) -> bb8; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, String>}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_9) -> bb7;                 // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb7: {
        return;                          // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:28:2: 28:2
    }

    bb8 (cleanup): {
        drop(_9) -> bb9;                 // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:24:1: 28:2
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:27:24: 27:30
    let mut _1: [&str; 1];               // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:27:24: 27:30

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:27:24: 27:30
                                         // mir::Constant
                                         // + span: ui/macros/macro-tt-followed-by-seq.rs:27:24: 27:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:27:24: 27:30
        return;                          // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:27:24: 27:30
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &str;                    // in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:26:16: 26:56

    bb0: {
        _1 = const "Keep(1, Skip(2, Keep(3, Skip(4, ()))))"; // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:26:16: 26:56
                                         // mir::Constant
                                         // + span: ui/macros/macro-tt-followed-by-seq.rs:26:16: 26:56
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

fn Join::Keep(_1: A, _2: B) -> Join<A, B> {
    let mut _0: Join<A, B>;              // return place in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:10:3: 10:7

    bb0: {
        _0 = Join::<A, B>::Keep(move _1, move _2); // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:10:3: 10:7
        return;                          // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:10:3: 10:7
    }
}

// MIR FOR CTFE
fn Join::Keep(_1: A, _2: B) -> Join<A, B> {
    let mut _0: Join<A, B>;              // return place in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:10:3: 10:7

    bb0: {
        _0 = Join::<A, B>::Keep(move _1, move _2); // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:10:3: 10:7
        return;                          // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:10:3: 10:7
    }
}

fn Join::Skip(_1: A, _2: B) -> Join<A, B> {
    let mut _0: Join<A, B>;              // return place in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:11:3: 11:7

    bb0: {
        _0 = Join::<A, B>::Skip(move _1, move _2); // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:11:3: 11:7
        return;                          // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:11:3: 11:7
    }
}

// MIR FOR CTFE
fn Join::Skip(_1: A, _2: B) -> Join<A, B> {
    let mut _0: Join<A, B>;              // return place in scope 0 at ui/macros/macro-tt-followed-by-seq.rs:11:3: 11:7

    bb0: {
        _0 = Join::<A, B>::Skip(move _1, move _2); // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:11:3: 11:7
        return;                          // scope 0 at ui/macros/macro-tt-followed-by-seq.rs:11:3: 11:7
    }
}
