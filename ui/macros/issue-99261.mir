// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: f64;
    let mut _5: usize;
    let mut _6: usize;
    let _7: ();
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 3];
    let _12: [core::fmt::rt::Argument<'_>; 3];
    let mut _13: (&f64, &usize, &usize);
    let mut _14: &f64;
    let mut _15: &usize;
    let mut _16: &usize;
    let mut _17: core::fmt::rt::Argument<'_>;
    let mut _18: core::fmt::rt::Argument<'_>;
    let mut _19: core::fmt::rt::Argument<'_>;
    let mut _20: &[core::fmt::rt::Placeholder];
    let _21: &[core::fmt::rt::Placeholder; 1];
    let _22: [core::fmt::rt::Placeholder; 1];
    let mut _23: core::fmt::rt::Placeholder;
    let mut _24: core::fmt::rt::Alignment;
    let mut _25: core::fmt::rt::Count;
    let mut _26: core::fmt::rt::Count;
    let mut _27: core::fmt::rt::UnsafeArg;
    let mut _29: &f64;
    let mut _30: &usize;
    let mut _31: &usize;
    scope 1 {
        debug value => const 314.15926000000002f64;
        let _2: usize;
        scope 2 {
            debug digits_before_decimal => const 1_usize;
            let _3: usize;
            scope 3 {
                debug digits_after_decimal => const 2_usize;
                let _4: usize;
                scope 4 {
                    debug width => _4;
                    let mut _28: &[&str; 2];
                    scope 5 {
                        debug args => _13;
                    }
                    scope 6 {
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 314.15926000000002f64;
        _2 = const 1_usize;
        _3 = const 2_usize;
        _5 = Add(_2, const 1_usize);
        _6 = _3;
        _4 = Add(move _5, move _6);
        _28 = const _;
        _9 = _28 as &[&str] (Pointer(Unsize));
        _14 = &_1;
        _15 = &_4;
        _16 = &_3;
        _13 = (move _14, move _15, move _16);
        _29 = deref_copy (_13.0: &f64);
        _17 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_29) -> [return: bb1, unwind continue];
    }

    bb1: {
        _30 = deref_copy (_13.2: &usize);
        _18 = core::fmt::rt::Argument::<'_>::from_usize(_30) -> [return: bb2, unwind continue];
    }

    bb2: {
        _31 = deref_copy (_13.1: &usize);
        _19 = core::fmt::rt::Argument::<'_>::from_usize(_31) -> [return: bb3, unwind continue];
    }

    bb3: {
        _12 = [move _17, move _18, move _19];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _24 = core::fmt::rt::Alignment::Right;
        _25 = core::fmt::rt::Count::Param(const 1_usize) -> [return: bb4, unwind continue];
    }

    bb4: {
        _26 = core::fmt::rt::Count::Param(const 2_usize) -> [return: bb5, unwind continue];
    }

    bb5: {
        _23 = core::fmt::rt::Placeholder::new(const 0_usize, const '0', move _24, const 0_u32, move _25, move _26) -> [return: bb6, unwind continue];
    }

    bb6: {
        _22 = [move _23];
        _21 = &_22;
        _20 = _21 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _27 = core::fmt::rt::UnsafeArg::new() -> [return: bb7, unwind continue];
    }

    bb7: {
        _8 = Arguments::<'_>::new_v1_formatted(move _9, move _10, move _20, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb8, unwind continue];
    }

    bb8: {
        _7 = _print(move _8) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
