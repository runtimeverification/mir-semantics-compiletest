// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let _2: !;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 0];
    let _7: [core::fmt::rt::Argument<'_>; 0];
    let mut _8: &[&str; 1];

    bb0: {
        _1 = Not(const false);
        switchInt(move _1) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        _8 = const _;
        _4 = _8 as &[&str] (Pointer(Unsize));
        _7 = core::fmt::rt::Argument::<'_>::none() -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _2 = panic_fmt(move _3) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "test-assert-fmt 42 rust"];
        _0 = &_1;
        return;
    }
}
