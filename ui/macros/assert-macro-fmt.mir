// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/macros/assert-macro-fmt.rs:5:11: 5:11
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _3: &[&str];                 // in scope 0 at ui/macros/assert-macro-fmt.rs:6:20: 6:43
    let mut _4: &[&str; 2];              // in scope 0 at ui/macros/assert-macro-fmt.rs:6:20: 6:43
    let _5: &[&str; 2];                  // in scope 0 at ui/macros/assert-macro-fmt.rs:6:20: 6:43
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _7: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _8: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _9: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _10: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/macros/assert-macro-fmt.rs:6:45: 6:47
    let mut _11: &i32;                   // in scope 0 at ui/macros/assert-macro-fmt.rs:6:45: 6:47
    let _12: &i32;                       // in scope 0 at ui/macros/assert-macro-fmt.rs:6:45: 6:47
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/macros/assert-macro-fmt.rs:6:49: 6:55
    let mut _14: &&str;                  // in scope 0 at ui/macros/assert-macro-fmt.rs:6:49: 6:55
    let _15: &&str;                      // in scope 0 at ui/macros/assert-macro-fmt.rs:6:49: 6:55
    let mut _16: &&str;                  // in scope 0 at ui/macros/assert-macro-fmt.rs:6:49: 6:55
    let mut _17: &i32;                   // in scope 0 at ui/macros/assert-macro-fmt.rs:6:45: 6:47
    let mut _18: &[&str; 2];             // in scope 0 at ui/macros/assert-macro-fmt.rs:6:20: 6:43

    bb0: {
        _18 = const _;                   // scope 0 at ui/macros/assert-macro-fmt.rs:6:20: 6:43
                                         // mir::Constant
                                         // + span: ui/macros/assert-macro-fmt.rs:6:20: 6:43
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[2])) }
        _5 = _18;                        // scope 0 at ui/macros/assert-macro-fmt.rs:6:20: 6:43
        _4 = _5;                         // scope 0 at ui/macros/assert-macro-fmt.rs:6:20: 6:43
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at ui/macros/assert-macro-fmt.rs:6:20: 6:43
        _17 = const _;                   // scope 0 at ui/macros/assert-macro-fmt.rs:6:45: 6:47
                                         // mir::Constant
                                         // + span: ui/macros/assert-macro-fmt.rs:6:45: 6:47
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _12 = _17;                       // scope 0 at ui/macros/assert-macro-fmt.rs:6:45: 6:47
        _11 = _12;                       // scope 0 at ui/macros/assert-macro-fmt.rs:6:45: 6:47
        _10 = core::fmt::ArgumentV1::<'_>::new_display::<i32>(move _11) -> bb1; // scope 0 at ui/macros/assert-macro-fmt.rs:6:45: 6:47
                                         // mir::Constant
                                         // + span: ui/macros/assert-macro-fmt.rs:6:45: 6:47
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b i32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _16 = const _;                   // scope 0 at ui/macros/assert-macro-fmt.rs:6:49: 6:55
                                         // mir::Constant
                                         // + span: ui/macros/assert-macro-fmt.rs:6:49: 6:55
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[0])) }
        _15 = _16;                       // scope 0 at ui/macros/assert-macro-fmt.rs:6:49: 6:55
        _14 = _15;                       // scope 0 at ui/macros/assert-macro-fmt.rs:6:49: 6:55
        _13 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _14) -> bb2; // scope 0 at ui/macros/assert-macro-fmt.rs:6:49: 6:55
                                         // mir::Constant
                                         // + span: ui/macros/assert-macro-fmt.rs:6:49: 6:55
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = [move _10, move _13];       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = panic_fmt(move _2);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/macros/assert-macro-fmt.rs:6:49: 6:55
    let mut _1: &str;                    // in scope 0 at ui/macros/assert-macro-fmt.rs:6:49: 6:55

    bb0: {
        _1 = const "rust";               // scope 0 at ui/macros/assert-macro-fmt.rs:6:49: 6:55
                                         // mir::Constant
                                         // + span: ui/macros/assert-macro-fmt.rs:6:49: 6:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/macros/assert-macro-fmt.rs:6:49: 6:55
        return;                          // scope 0 at ui/macros/assert-macro-fmt.rs:6:49: 6:55
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/macros/assert-macro-fmt.rs:6:45: 6:47
    let mut _1: i32;                     // in scope 0 at ui/macros/assert-macro-fmt.rs:6:45: 6:47

    bb0: {
        _1 = const 42_i32;               // scope 0 at ui/macros/assert-macro-fmt.rs:6:45: 6:47
        _0 = &_1;                        // scope 0 at ui/macros/assert-macro-fmt.rs:6:45: 6:47
        return;                          // scope 0 at ui/macros/assert-macro-fmt.rs:6:45: 6:47
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/macros/assert-macro-fmt.rs:6:20: 6:43
    let mut _1: [&str; 2];               // in scope 0 at ui/macros/assert-macro-fmt.rs:6:20: 6:43

    bb0: {
        _1 = [const "test-assert-fmt ", const " "]; // scope 0 at ui/macros/assert-macro-fmt.rs:6:20: 6:43
                                         // mir::Constant
                                         // + span: ui/macros/assert-macro-fmt.rs:6:20: 6:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/macros/assert-macro-fmt.rs:6:20: 6:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/macros/assert-macro-fmt.rs:6:20: 6:43
        return;                          // scope 0 at ui/macros/assert-macro-fmt.rs:6:20: 6:43
    }
}
