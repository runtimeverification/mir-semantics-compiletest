// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [closure@ui/macros/issue-26322.rs:18:19: 18:21];
    let mut _3: std::option::Option<i32>;
    let mut _4: isize;
    let mut _6: (&(u32, u32), &(u32, u32));
    let mut _7: &(u32, u32);
    let _8: (u32, u32);
    let mut _9: &[closure@ui/macros/issue-26322.rs:18:19: 18:21];
    let mut _12: bool;
    let mut _13: bool;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&(u32, u32), &(u32, u32));
    let mut _18: &(u32, u32);
    let mut _21: bool;
    let mut _22: bool;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _26: (&(u32, u32), &(u32, u32));
    let mut _27: &(u32, u32);
    let mut _30: bool;
    let mut _31: bool;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: (&(u32, u32), &(u32, u32));
    let mut _37: &(u32, u32);
    let mut _40: bool;
    let mut _41: bool;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug closure => const ZeroSized: [closure@ui/macros/issue-26322.rs:18:19: 18:21];
        let _2: (u32, u32);
        scope 2 {
            debug iflet => _2;
            let _5: (u32, u32);
            scope 4 {
                debug cl => _5;
                let _10: &(u32, u32);
                let _11: &(u32, u32);
                let _19: &(u32, u32);
                let _20: &(u32, u32);
                let _28: &(u32, u32);
                let _29: &(u32, u32);
                let _35: (u32, u32);
                let mut _46: &[closure@ui/macros/issue-26322.rs:13:10: 13:12];
                let mut _47: &(u32, u32);
                let mut _48: &(u32, u32);
                let mut _49: &(u32, u32);
                scope 5 {
                    debug left_val => _10;
                    debug right_val => _11;
                    let _14: core::panicking::AssertKind;
                    scope 6 {
                        debug kind => _14;
                    }
                }
                scope 7 {
                    debug left_val => _19;
                    debug right_val => _20;
                    let _23: core::panicking::AssertKind;
                    scope 8 {
                        debug kind => _23;
                    }
                }
                scope 9 {
                    debug left_val => _28;
                    debug right_val => _29;
                    let _32: core::panicking::AssertKind;
                    scope 10 {
                        debug kind => _32;
                    }
                }
                scope 11 {
                    debug indirect => _35;
                    let _38: &(u32, u32);
                    let _39: &(u32, u32);
                    let mut _45: &(u32, u32);
                    scope 12 {
                        debug left_val => _38;
                        debug right_val => _39;
                        let _42: core::panicking::AssertKind;
                        scope 13 {
                            debug kind => _42;
                        }
                    }
                }
            }
        }
        scope 3 {
        }
    }

    bb0: {
        _3 = Option::<i32>::Some(const 0_i32);
        _4 = discriminant(_3);
        switchInt(move _4) -> [1: bb1, otherwise: bb2];
    }

    bb1: {
        _2 = (const 9_u32, const 22_u32);
        goto -> bb3;
    }

    bb2: {
        _2 = (const 0_u32, const 0_u32);
        goto -> bb3;
    }

    bb3: {
        _5 = (const 14_u32, const 24_u32);
        _9 = &_1;
        _8 = <[closure@ui/macros/issue-26322.rs:18:19: 18:21] as Fn<()>>::call(move _9, const ()) -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = &_8;
        _49 = const _;
        _6 = (move _7, _49);
        _10 = (_6.0: &(u32, u32));
        _11 = (_6.1: &(u32, u32));
        _13 = <(u32, u32) as PartialEq>::eq(_10, _11) -> [return: bb5, unwind continue];
    }

    bb5: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<(u32, u32), (u32, u32)>(move _14, _10, _11, move _16) -> unwind continue;
    }

    bb7: {
        _18 = &_2;
        _48 = const _;
        _17 = (move _18, _48);
        _19 = (_17.0: &(u32, u32));
        _20 = (_17.1: &(u32, u32));
        _22 = <(u32, u32) as PartialEq>::eq(_19, _20) -> [return: bb8, unwind continue];
    }

    bb8: {
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<(u32, u32), (u32, u32)>(move _23, _19, _20, move _25) -> unwind continue;
    }

    bb10: {
        _27 = &_5;
        _47 = const _;
        _26 = (move _27, _47);
        _28 = (_26.0: &(u32, u32));
        _29 = (_26.1: &(u32, u32));
        _31 = <(u32, u32) as PartialEq>::eq(_28, _29) -> [return: bb11, unwind continue];
    }

    bb11: {
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<(u32, u32), (u32, u32)>(move _32, _28, _29, move _34) -> unwind continue;
    }

    bb13: {
        _46 = const _;
        _35 = <[closure@ui/macros/issue-26322.rs:13:10: 13:12] as Fn<()>>::call(_46, const ()) -> [return: bb14, unwind continue];
    }

    bb14: {
        _37 = &_35;
        _45 = const _;
        _36 = (move _37, _45);
        _38 = (_36.0: &(u32, u32));
        _39 = (_36.1: &(u32, u32));
        _41 = <(u32, u32) as PartialEq>::eq(_38, _39) -> [return: bb15, unwind continue];
    }

    bb15: {
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<(u32, u32), (u32, u32)>(move _42, _38, _39, move _44) -> unwind continue;
    }

    bb17: {
        return;
    }
}

promoted[0] in main: &(u32, u32) = {
    let mut _0: &(u32, u32);
    let mut _1: (u32, u32);

    bb0: {
        _1 = (const 20_u32, const 28_u32);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[closure@ui/macros/issue-26322.rs:13:10: 13:12] = {
    let mut _0: &[closure@ui/macros/issue-26322.rs:13:10: 13:12];
    let mut _1: [closure@ui/macros/issue-26322.rs:13:10: 13:12];

    bb0: {
        _1 = [closure@ui/macros/issue-26322.rs:13:10: 13:12];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &(u32, u32) = {
    let mut _0: &(u32, u32);
    let mut _1: (u32, u32);

    bb0: {
        _1 = (const 14_u32, const 24_u32);
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &(u32, u32) = {
    let mut _0: &(u32, u32);
    let mut _1: (u32, u32);

    bb0: {
        _1 = (const 9_u32, const 22_u32);
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &(u32, u32) = {
    let mut _0: &(u32, u32);
    let mut _1: (u32, u32);

    bb0: {
        _1 = (const 9_u32, const 19_u32);
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/macros/issue-26322.rs:18:19: 18:21]) -> (u32, u32) {
    let mut _0: (u32, u32);

    bb0: {
        _0 = (const 9_u32, const 19_u32);
        return;
    }
}

fn main::{closure#1}(_1: &[closure@ui/macros/issue-26322.rs:13:10: 13:12]) -> (u32, u32) {
    let mut _0: (u32, u32);

    bb0: {
        _0 = (const 20_u32, const 28_u32);
        return;
    }
}
