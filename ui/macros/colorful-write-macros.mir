// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/macros/colorful-write-macros.rs:13:1: 13:24>::write_str(_1: &mut Bar, _2: &str) -> Result<(), std::fmt::Error> {
    debug self => _1;
    let mut _0: std::result::Result<(), std::fmt::Error>;

    bb0: {
        _0 = Result::<(), std::fmt::Error>::Ok(const ());
        return;
    }
}

fn borrowing_writer_from_struct_and_formatting_struct_field(_1: Foo<'_>) -> () {
    debug foo => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::result::Result<(), std::io::Error>;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &&str;
    let mut _11: &[&str; 1];
    let mut _12: &mut dyn std::io::Write;

    bb0: {
        _12 = deref_copy (_1.0: &mut dyn std::io::Write);
        _11 = const _;
        _5 = _11 as &[&str] (Pointer(Unsize));
        _10 = &(_1.1: &str);
        _9 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = <dyn std::io::Write as std::io::Write>::write_fmt(_12, move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _2 = Result::<(), std::io::Error>::unwrap(move _3) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in borrowing_writer_from_struct_and_formatting_struct_field: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::vec::Vec<u8>;
    let _2: ();
    let mut _3: std::result::Result<(), std::io::Error>;
    let mut _4: &mut dyn std::io::Write;
    let mut _5: &mut std::vec::Vec<u8>;
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let _8: ();
    let mut _9: std::result::Result<(), std::io::Error>;
    let mut _10: &mut std::vec::Vec<u8>;
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let _13: ();
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let _17: ();
    let mut _18: std::result::Result<(), std::fmt::Error>;
    let mut _19: &mut Bar;
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    scope 1 {
        debug w => _1;
        let mut _16: Bar;
        let mut _23: &[&str; 1];
        let mut _24: &[&str; 0];
        let mut _25: &[&str; 0];
        scope 2 {
            debug s => const Bar;
            let mut _22: &[&str; 1];
        }
    }

    bb0: {
        _1 = Vec::<u8>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &mut _1;
        _4 = _5 as &mut dyn std::io::Write (Pointer(Unsize));
        _25 = const _;
        _7 = _25 as &[&str] (Pointer(Unsize));
        _6 = Arguments::<'_>::new_const(move _7) -> [return: bb2, unwind: bb14];
    }

    bb2: {
        _3 = <dyn std::io::Write as std::io::Write>::write_fmt(_4, move _6) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _2 = Result::<(), std::io::Error>::unwrap(move _3) -> [return: bb4, unwind: bb14];
    }

    bb4: {
        _10 = &mut _1;
        _24 = const _;
        _12 = _24 as &[&str] (Pointer(Unsize));
        _11 = Arguments::<'_>::new_const(move _12) -> [return: bb5, unwind: bb14];
    }

    bb5: {
        _9 = <Vec<u8> as std::io::Write>::write_fmt(_10, move _11) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        _8 = Result::<(), std::io::Error>::unwrap(move _9) -> [return: bb7, unwind: bb14];
    }

    bb7: {
        _23 = const _;
        _15 = _23 as &[&str] (Pointer(Unsize));
        _14 = Arguments::<'_>::new_const(move _15) -> [return: bb8, unwind: bb14];
    }

    bb8: {
        _13 = _print(move _14) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _19 = &mut _16;
        _22 = const _;
        _21 = _22 as &[&str] (Pointer(Unsize));
        _20 = Arguments::<'_>::new_const(move _21) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        _18 = <Bar as std::fmt::Write>::write_fmt(_19, move _20) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        _17 = Result::<(), std::fmt::Error>::unwrap(move _18) -> [return: bb12, unwind: bb14];
    }

    bb12: {
        drop(_1) -> [return: bb13, unwind continue];
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_1) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "test"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "ok\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 0] = {
    let mut _0: &[&str; 0];
    let mut _1: [&str; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 0] = {
    let mut _0: &[&str; 0];
    let mut _1: [&str; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}
