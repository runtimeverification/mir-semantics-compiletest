// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&&str, &&str);
    let _2: &&str;
    let _3: &&str;
    let mut _4: bool;
    let mut _5: bool;
    let _7: !;
    let mut _8: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _9: (&&str, &&str);
    let _10: &&str;
    let _11: &&str;
    let mut _12: bool;
    let mut _13: bool;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&&str, &&str);
    let _18: &&str;
    let _19: &&str;
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&&str, &&str);
    let _26: &&str;
    let _27: &&str;
    let mut _28: bool;
    let mut _29: bool;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: &&str;
    let mut _34: &&str;
    let mut _35: &&str;
    let mut _36: &&str;
    let mut _37: &&str;
    let mut _38: &&str;
    let mut _39: &&str;
    let mut _40: &&str;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _6: core::panicking::AssertKind;
        scope 2 {
            debug kind => _6;
        }
    }
    scope 3 {
        debug left_val => _10;
        debug right_val => _11;
        let _14: core::panicking::AssertKind;
        scope 4 {
            debug kind => _14;
        }
    }
    scope 5 {
        debug left_val => _18;
        debug right_val => _19;
        let _22: core::panicking::AssertKind;
        scope 6 {
            debug kind => _22;
        }
    }
    scope 7 {
        debug left_val => _26;
        debug right_val => _27;
        let _30: core::panicking::AssertKind;
        scope 8 {
            debug kind => _30;
        }
    }

    bb0: {
        _40 = const _;
        _39 = const _;
        _1 = (_40, _39);
        _2 = (_1.0: &&str);
        _3 = (_1.1: &&str);
        _5 = <&str as PartialEq>::eq(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = core::panicking::AssertKind::Eq;
        _8 = Option::<Arguments<'_>>::None;
        _7 = core::panicking::assert_failed::<&str, &str>(move _6, _2, _3, move _8) -> unwind continue;
    }

    bb3: {
        _38 = const _;
        _37 = const _;
        _9 = (_38, _37);
        _10 = (_9.0: &&str);
        _11 = (_9.1: &&str);
        _13 = <&str as PartialEq>::eq(_10, _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<&str, &str>(move _14, _10, _11, move _16) -> unwind continue;
    }

    bb6: {
        _36 = const _;
        _35 = const _;
        _17 = (_36, _35);
        _18 = (_17.0: &&str);
        _19 = (_17.1: &&str);
        _21 = <&str as PartialEq>::eq(_18, _19) -> [return: bb7, unwind continue];
    }

    bb7: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<&str, &str>(move _22, _18, _19, move _24) -> unwind continue;
    }

    bb9: {
        _34 = const _;
        _33 = const _;
        _25 = (_34, _33);
        _26 = (_25.0: &&str);
        _27 = (_25.1: &&str);
        _29 = <&str as PartialEq>::eq(_26, _27) -> [return: bb10, unwind continue];
    }

    bb10: {
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<&str, &str>(move _30, _26, _27, move _32) -> unwind continue;
    }

    bb12: {
        return;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "doc = r####\" Raw string ending sequences: [\"###]\"####";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "doc = r####\" Raw string ending sequences: [\"###]\"####";
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "doc = r#\" Two quote marks: [\"\"]\"#";
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "doc = r#\" Two quote marks: [\"\"]\"#";
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "doc = r#\" One quote mark: [\"]\"#";
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "doc = r#\" One quote mark: [\"]\"#";
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "doc = r\" Madoka\"";
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "doc = r\" Madoka\"";
        _0 = &_1;
        return;
    }
}
