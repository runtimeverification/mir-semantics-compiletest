// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: usize;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 0];
    let _7: [core::fmt::rt::Argument<'_>; 0];
    let _8: ();
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: [core::fmt::rt::Argument<'_>; 1];
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &usize;
    let _16: ();
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: &[core::fmt::rt::Argument<'_>];
    let _20: &[core::fmt::rt::Argument<'_>; 1];
    let _21: [core::fmt::rt::Argument<'_>; 1];
    let mut _22: core::fmt::rt::Argument<'_>;
    let _23: &usize;
    let mut _27: std::fmt::Arguments<'_>;
    let mut _28: &[&str];
    let mut _29: &[core::fmt::rt::Argument<'_>];
    let _30: &[core::fmt::rt::Argument<'_>; 0];
    let _31: [core::fmt::rt::Argument<'_>; 0];
    let mut _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: [core::fmt::rt::Argument<'_>; 1];
    let mut _39: core::fmt::rt::Argument<'_>;
    let _40: &usize;
    let mut _43: std::fmt::Arguments<'_>;
    let mut _44: &[&str];
    let mut _45: &[core::fmt::rt::Argument<'_>];
    let _46: &[core::fmt::rt::Argument<'_>; 1];
    let _47: [core::fmt::rt::Argument<'_>; 1];
    let mut _48: core::fmt::rt::Argument<'_>;
    let _49: &usize;
    let _51: ();
    let mut _52: std::fmt::Arguments<'_>;
    let mut _53: &[&str];
    let mut _54: &[core::fmt::rt::Argument<'_>];
    let _55: &[core::fmt::rt::Argument<'_>; 2];
    let _56: [core::fmt::rt::Argument<'_>; 2];
    let mut _57: core::fmt::rt::Argument<'_>;
    let _58: &&str;
    let mut _59: core::fmt::rt::Argument<'_>;
    let _60: &usize;
    let mut _61: &[core::fmt::rt::Placeholder];
    let _62: &[core::fmt::rt::Placeholder; 1];
    let _63: [core::fmt::rt::Placeholder; 1];
    let mut _64: core::fmt::rt::Placeholder;
    let mut _65: core::fmt::rt::Alignment;
    let mut _66: core::fmt::rt::Count;
    let mut _67: core::fmt::rt::Count;
    let mut _68: core::fmt::rt::UnsafeArg;
    let _73: ();
    let mut _74: std::fmt::Arguments<'_>;
    let mut _75: &[&str];
    let mut _76: &[core::fmt::rt::Argument<'_>];
    let _77: &[core::fmt::rt::Argument<'_>; 4];
    let _78: [core::fmt::rt::Argument<'_>; 4];
    let mut _79: (&&str, &usize, &&str, &&str);
    let mut _80: &&str;
    let mut _81: &usize;
    let mut _82: &&str;
    let mut _83: &&str;
    let mut _84: core::fmt::rt::Argument<'_>;
    let mut _85: core::fmt::rt::Argument<'_>;
    let mut _86: core::fmt::rt::Argument<'_>;
    let mut _87: core::fmt::rt::Argument<'_>;
    let mut _88: &[core::fmt::rt::Placeholder];
    let _89: &[core::fmt::rt::Placeholder; 3];
    let _90: [core::fmt::rt::Placeholder; 3];
    let mut _91: core::fmt::rt::Placeholder;
    let mut _92: core::fmt::rt::Alignment;
    let mut _93: core::fmt::rt::Count;
    let mut _94: core::fmt::rt::Count;
    let mut _95: core::fmt::rt::Placeholder;
    let mut _96: core::fmt::rt::Alignment;
    let mut _97: core::fmt::rt::Count;
    let mut _98: core::fmt::rt::Count;
    let mut _99: core::fmt::rt::Placeholder;
    let mut _100: core::fmt::rt::Alignment;
    let mut _101: core::fmt::rt::Count;
    let mut _102: core::fmt::rt::Count;
    let mut _103: core::fmt::rt::UnsafeArg;
    let _104: ();
    let mut _105: std::fmt::Arguments<'_>;
    let mut _106: &[&str];
    let mut _107: &[core::fmt::rt::Argument<'_>];
    let _108: &[core::fmt::rt::Argument<'_>; 2];
    let _109: [core::fmt::rt::Argument<'_>; 2];
    let mut _110: core::fmt::rt::Argument<'_>;
    let mut _111: core::fmt::rt::Argument<'_>;
    let mut _112: &[core::fmt::rt::Placeholder];
    let _113: &[core::fmt::rt::Placeholder; 1];
    let _114: [core::fmt::rt::Placeholder; 1];
    let mut _115: core::fmt::rt::Placeholder;
    let mut _116: core::fmt::rt::Alignment;
    let mut _117: core::fmt::rt::Count;
    let mut _118: core::fmt::rt::Count;
    let mut _119: core::fmt::rt::UnsafeArg;
    let _120: ();
    let mut _121: std::fmt::Arguments<'_>;
    let mut _122: &[&str];
    let mut _123: &[core::fmt::rt::Argument<'_>];
    let _124: &[core::fmt::rt::Argument<'_>; 2];
    let _125: [core::fmt::rt::Argument<'_>; 2];
    let mut _126: core::fmt::rt::Argument<'_>;
    let mut _127: core::fmt::rt::Argument<'_>;
    let mut _128: &[core::fmt::rt::Placeholder];
    let _129: &[core::fmt::rt::Placeholder; 1];
    let _130: [core::fmt::rt::Placeholder; 1];
    let mut _131: core::fmt::rt::Placeholder;
    let mut _132: core::fmt::rt::Alignment;
    let mut _133: core::fmt::rt::Count;
    let mut _134: core::fmt::rt::Count;
    let mut _135: core::fmt::rt::UnsafeArg;
    let mut _150: &&str;
    let mut _151: &&str;
    let mut _152: &&str;
    let mut _153: &usize;
    scope 1 {
        debug _x => const 1_usize;
        let mut _24: usize;
        let mut _147: &[&str; 2];
        let mut _148: &[&str; 2];
        let mut _149: &[&str; 1];
        scope 2 {
            debug _x => const 1_usize;
            let _25: std::string::String;
            let _26: std::string::String;
            let mut _146: &[&str; 1];
            scope 3 {
                debug _f => _25;
                let _32: std::string::String;
                let _33: std::string::String;
                let mut _145: &[&str; 1];
                scope 5 {
                    debug _f => _32;
                    let _41: std::string::String;
                    let _42: std::string::String;
                    let mut _144: &[&str; 1];
                    scope 7 {
                        debug _f => _41;
                        let _50: &str;
                        scope 9 {
                            debug s => const "0.009";
                            let _69: &str;
                            let mut _143: &[&str; 2];
                            scope 10 {
                            }
                            scope 11 {
                                debug region => const "abc";
                                let _70: usize;
                                scope 12 {
                                    debug width => const 8_usize;
                                    let _71: &str;
                                    scope 13 {
                                        debug ls => const "abcde";
                                        let _72: &str;
                                        scope 14 {
                                            debug full => const "abcde";
                                            let mut _136: &usize;
                                            let mut _137: &&str;
                                            let mut _138: &[&str; 2];
                                            let mut _139: &usize;
                                            let mut _140: &&str;
                                            let mut _141: &[&str; 2];
                                            let mut _142: &[&str; 4];
                                            scope 15 {
                                                debug args => _79;
                                            }
                                            scope 16 {
                                            }
                                            scope 17 {
                                            }
                                            scope 18 {
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    scope 8 {
                        debug res => _42;
                    }
                }
                scope 6 {
                    debug res => _33;
                }
            }
            scope 4 {
                debug res => _26;
            }
        }
    }

    bb0: {
        _1 = const 1_usize;
        _149 = const _;
        _4 = _149 as &[&str] (Pointer(Unsize));
        _7 = core::fmt::rt::Argument::<'_>::none() -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _148 = const _;
        _10 = _148 as &[&str] (Pointer(Unsize));
        _15 = &_1;
        _14 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_15) -> [return: bb4, unwind continue];
    }

    bb4: {
        _13 = [move _14];
        _12 = &_13;
        _11 = _12 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _11) -> [return: bb5, unwind continue];
    }

    bb5: {
        _8 = _print(move _9) -> [return: bb6, unwind continue];
    }

    bb6: {
        _147 = const _;
        _18 = _147 as &[&str] (Pointer(Unsize));
        _23 = &_1;
        _22 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_23) -> [return: bb7, unwind continue];
    }

    bb7: {
        _21 = [move _22];
        _20 = &_21;
        _19 = _20 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _17 = Arguments::<'_>::new_v1(move _18, move _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        _16 = _print(move _17) -> [return: bb9, unwind continue];
    }

    bb9: {
        _24 = const 1_usize;
        _146 = const _;
        _28 = _146 as &[&str] (Pointer(Unsize));
        _31 = core::fmt::rt::Argument::<'_>::none() -> [return: bb10, unwind continue];
    }

    bb10: {
        _30 = &_31;
        _29 = _30 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _27 = Arguments::<'_>::new_v1(move _28, move _29) -> [return: bb11, unwind continue];
    }

    bb11: {
        _26 = format(move _27) -> [return: bb12, unwind continue];
    }

    bb12: {
        _25 = move _26;
        _145 = const _;
        _35 = _145 as &[&str] (Pointer(Unsize));
        _40 = &_24;
        _39 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_40) -> [return: bb13, unwind: bb57];
    }

    bb13: {
        _38 = [move _39];
        _37 = &_38;
        _36 = _37 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _34 = Arguments::<'_>::new_v1(move _35, move _36) -> [return: bb14, unwind: bb57];
    }

    bb14: {
        _33 = format(move _34) -> [return: bb15, unwind: bb57];
    }

    bb15: {
        _32 = move _33;
        _144 = const _;
        _44 = _144 as &[&str] (Pointer(Unsize));
        _49 = &_24;
        _48 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_49) -> [return: bb16, unwind: bb56];
    }

    bb16: {
        _47 = [move _48];
        _46 = &_47;
        _45 = _46 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _43 = Arguments::<'_>::new_v1(move _44, move _45) -> [return: bb17, unwind: bb56];
    }

    bb17: {
        _42 = format(move _43) -> [return: bb18, unwind: bb56];
    }

    bb18: {
        _41 = move _42;
        _50 = const "0.009";
        _143 = const _;
        _53 = _143 as &[&str] (Pointer(Unsize));
        _58 = &_50;
        _57 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_58) -> [return: bb19, unwind: bb55];
    }

    bb19: {
        _60 = &_24;
        _59 = core::fmt::rt::Argument::<'_>::from_usize(_60) -> [return: bb20, unwind: bb55];
    }

    bb20: {
        _56 = [move _57, move _59];
        _55 = &_56;
        _54 = _55 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _65 = core::fmt::rt::Alignment::Left;
        _66 = core::fmt::rt::Count::Implied;
        _67 = core::fmt::rt::Count::Param(const 1_usize) -> [return: bb21, unwind: bb55];
    }

    bb21: {
        _64 = core::fmt::rt::Placeholder::new(const 0_usize, const '0', move _65, const 0_u32, move _66, move _67) -> [return: bb22, unwind: bb55];
    }

    bb22: {
        _63 = [move _64];
        _62 = &_63;
        _61 = _62 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _68 = core::fmt::rt::UnsafeArg::new() -> [return: bb23, unwind: bb55];
    }

    bb23: {
        _52 = Arguments::<'_>::new_v1_formatted(move _53, move _54, move _61, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb24, unwind: bb55];
    }

    bb24: {
        _51 = _print(move _52) -> [return: bb25, unwind: bb55];
    }

    bb25: {
        _69 = const "abc";
        _70 = const 8_usize;
        _71 = const "abcde";
        _72 = const "abcde";
        _142 = const _;
        _75 = _142 as &[&str] (Pointer(Unsize));
        _80 = &_69;
        _81 = &_70;
        _82 = &_71;
        _83 = &_72;
        _79 = (move _80, move _81, move _82, move _83);
        _150 = deref_copy (_79.0: &&str);
        _84 = core::fmt::rt::Argument::<'_>::new_debug::<&str>(_150) -> [return: bb26, unwind: bb55];
    }

    bb26: {
        _151 = deref_copy (_79.2: &&str);
        _85 = core::fmt::rt::Argument::<'_>::new_debug::<&str>(_151) -> [return: bb27, unwind: bb55];
    }

    bb27: {
        _152 = deref_copy (_79.3: &&str);
        _86 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_152) -> [return: bb28, unwind: bb55];
    }

    bb28: {
        _153 = deref_copy (_79.1: &usize);
        _87 = core::fmt::rt::Argument::<'_>::from_usize(_153) -> [return: bb29, unwind: bb55];
    }

    bb29: {
        _78 = [move _84, move _85, move _86, move _87];
        _77 = &_78;
        _76 = _77 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _92 = core::fmt::rt::Alignment::Unknown;
        _93 = core::fmt::rt::Count::Implied;
        _94 = core::fmt::rt::Count::Param(const 3_usize) -> [return: bb30, unwind: bb55];
    }

    bb30: {
        _91 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _92, const 0_u32, move _93, move _94) -> [return: bb31, unwind: bb55];
    }

    bb31: {
        _96 = core::fmt::rt::Alignment::Unknown;
        _97 = core::fmt::rt::Count::Implied;
        _98 = core::fmt::rt::Count::Is(const 4_usize) -> [return: bb32, unwind: bb55];
    }

    bb32: {
        _95 = core::fmt::rt::Placeholder::new(const 1_usize, const ' ', move _96, const 0_u32, move _97, move _98) -> [return: bb33, unwind: bb55];
    }

    bb33: {
        _100 = core::fmt::rt::Alignment::Unknown;
        _101 = core::fmt::rt::Count::Implied;
        _102 = core::fmt::rt::Count::Implied;
        _99 = core::fmt::rt::Placeholder::new(const 2_usize, const ' ', move _100, const 0_u32, move _101, move _102) -> [return: bb34, unwind: bb55];
    }

    bb34: {
        _90 = [move _91, move _95, move _99];
        _89 = &_90;
        _88 = _89 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _103 = core::fmt::rt::UnsafeArg::new() -> [return: bb35, unwind: bb55];
    }

    bb35: {
        _74 = Arguments::<'_>::new_v1_formatted(move _75, move _76, move _88, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb36, unwind: bb55];
    }

    bb36: {
        _73 = _print(move _74) -> [return: bb37, unwind: bb55];
    }

    bb37: {
        _141 = const _;
        _106 = _141 as &[&str] (Pointer(Unsize));
        _140 = const _;
        _110 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_140) -> [return: bb38, unwind: bb55];
    }

    bb38: {
        _139 = const _;
        _111 = core::fmt::rt::Argument::<'_>::from_usize(_139) -> [return: bb39, unwind: bb55];
    }

    bb39: {
        _109 = [move _110, move _111];
        _108 = &_109;
        _107 = _108 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _116 = core::fmt::rt::Alignment::Unknown;
        _117 = core::fmt::rt::Count::Param(const 1_usize) -> [return: bb40, unwind: bb55];
    }

    bb40: {
        _118 = core::fmt::rt::Count::Implied;
        _115 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _116, const 0_u32, move _117, move _118) -> [return: bb41, unwind: bb55];
    }

    bb41: {
        _114 = [move _115];
        _113 = &_114;
        _112 = _113 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _119 = core::fmt::rt::UnsafeArg::new() -> [return: bb42, unwind: bb55];
    }

    bb42: {
        _105 = Arguments::<'_>::new_v1_formatted(move _106, move _107, move _112, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb43, unwind: bb55];
    }

    bb43: {
        _104 = _print(move _105) -> [return: bb44, unwind: bb55];
    }

    bb44: {
        _138 = const _;
        _122 = _138 as &[&str] (Pointer(Unsize));
        _137 = const _;
        _126 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_137) -> [return: bb45, unwind: bb55];
    }

    bb45: {
        _136 = const _;
        _127 = core::fmt::rt::Argument::<'_>::from_usize(_136) -> [return: bb46, unwind: bb55];
    }

    bb46: {
        _125 = [move _126, move _127];
        _124 = &_125;
        _123 = _124 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _132 = core::fmt::rt::Alignment::Unknown;
        _133 = core::fmt::rt::Count::Param(const 1_usize) -> [return: bb47, unwind: bb55];
    }

    bb47: {
        _134 = core::fmt::rt::Count::Implied;
        _131 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _132, const 0_u32, move _133, move _134) -> [return: bb48, unwind: bb55];
    }

    bb48: {
        _130 = [move _131];
        _129 = &_130;
        _128 = _129 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _135 = core::fmt::rt::UnsafeArg::new() -> [return: bb49, unwind: bb55];
    }

    bb49: {
        _121 = Arguments::<'_>::new_v1_formatted(move _122, move _123, move _128, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb50, unwind: bb55];
    }

    bb50: {
        _120 = _print(move _121) -> [return: bb51, unwind: bb55];
    }

    bb51: {
        drop(_41) -> [return: bb52, unwind: bb56];
    }

    bb52: {
        drop(_32) -> [return: bb53, unwind: bb57];
    }

    bb53: {
        drop(_25) -> [return: bb54, unwind continue];
    }

    bb54: {
        return;
    }

    bb55 (cleanup): {
        drop(_41) -> [return: bb56, unwind terminate];
    }

    bb56 (cleanup): {
        drop(_32) -> [return: bb57, unwind terminate];
    }

    bb57 (cleanup): {
        drop(_25) -> [return: bb58, unwind terminate];
    }

    bb58 (cleanup): {
        resume;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "aaaaaaaaaaaaaaaaaa";
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "aaaaaaaaaaaaaaaaaa";
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "| ", const " | ", const " | ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const ".", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "first positional arg 1, second positional arg 2, _x is "];
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "_x is "];
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "_x is 5"];
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "first positional arg 1, second positional arg 2, _x is ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "_x is ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "_x is 5\n"];
        _0 = &_1;
        return;
    }
}
