// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: usize;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: &[&str; 1];
    let _6: [&str; 1];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 0];
    let _9: [core::fmt::rt::Argument<'_>; 0];
    let _10: ();
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let _13: &[&str; 2];
    let _14: [&str; 2];
    let mut _15: &[core::fmt::rt::Argument<'_>];
    let _16: &[core::fmt::rt::Argument<'_>; 1];
    let _17: [core::fmt::rt::Argument<'_>; 1];
    let mut _18: core::fmt::rt::Argument<'_>;
    let _19: &usize;
    let _20: ();
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let _23: &[&str; 2];
    let _24: [&str; 2];
    let mut _25: &[core::fmt::rt::Argument<'_>];
    let _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: [core::fmt::rt::Argument<'_>; 1];
    let mut _28: core::fmt::rt::Argument<'_>;
    let _29: &usize;
    let mut _33: std::fmt::Arguments<'_>;
    let mut _34: &[&str];
    let _35: &[&str; 1];
    let _36: [&str; 1];
    let mut _37: &[core::fmt::rt::Argument<'_>];
    let _38: &[core::fmt::rt::Argument<'_>; 0];
    let _39: [core::fmt::rt::Argument<'_>; 0];
    let mut _42: std::fmt::Arguments<'_>;
    let mut _43: &[&str];
    let _44: &[&str; 1];
    let _45: [&str; 1];
    let mut _46: &[core::fmt::rt::Argument<'_>];
    let _47: &[core::fmt::rt::Argument<'_>; 1];
    let _48: [core::fmt::rt::Argument<'_>; 1];
    let mut _49: core::fmt::rt::Argument<'_>;
    let _50: &usize;
    let mut _53: std::fmt::Arguments<'_>;
    let mut _54: &[&str];
    let _55: &[&str; 1];
    let _56: [&str; 1];
    let mut _57: &[core::fmt::rt::Argument<'_>];
    let _58: &[core::fmt::rt::Argument<'_>; 1];
    let _59: [core::fmt::rt::Argument<'_>; 1];
    let mut _60: core::fmt::rt::Argument<'_>;
    let _61: &usize;
    let _63: ();
    let mut _64: std::fmt::Arguments<'_>;
    let mut _65: &[&str];
    let _66: &[&str; 2];
    let _67: [&str; 2];
    let mut _68: &[core::fmt::rt::Argument<'_>];
    let _69: &[core::fmt::rt::Argument<'_>; 2];
    let _70: [core::fmt::rt::Argument<'_>; 2];
    let mut _71: core::fmt::rt::Argument<'_>;
    let _72: &&str;
    let mut _73: core::fmt::rt::Argument<'_>;
    let _74: &usize;
    let mut _75: &[core::fmt::rt::Placeholder];
    let _76: &[core::fmt::rt::Placeholder; 1];
    let _77: [core::fmt::rt::Placeholder; 1];
    let mut _78: core::fmt::rt::Placeholder;
    let mut _79: core::fmt::rt::Alignment;
    let mut _80: core::fmt::rt::Count;
    let mut _81: core::fmt::rt::Count;
    let mut _82: core::fmt::rt::UnsafeArg;
    let _87: ();
    let mut _88: std::fmt::Arguments<'_>;
    let mut _89: &[&str];
    let _90: &[&str; 4];
    let _91: [&str; 4];
    let mut _92: &[core::fmt::rt::Argument<'_>];
    let _93: &[core::fmt::rt::Argument<'_>; 4];
    let _94: [core::fmt::rt::Argument<'_>; 4];
    let mut _95: (&&str, &usize, &&str, &&str);
    let mut _96: &&str;
    let mut _97: &usize;
    let mut _98: &&str;
    let mut _99: &&str;
    let mut _100: core::fmt::rt::Argument<'_>;
    let mut _101: core::fmt::rt::Argument<'_>;
    let mut _102: core::fmt::rt::Argument<'_>;
    let mut _103: core::fmt::rt::Argument<'_>;
    let mut _104: &[core::fmt::rt::Placeholder];
    let _105: &[core::fmt::rt::Placeholder; 3];
    let _106: [core::fmt::rt::Placeholder; 3];
    let mut _107: core::fmt::rt::Placeholder;
    let mut _108: core::fmt::rt::Alignment;
    let mut _109: core::fmt::rt::Count;
    let mut _110: core::fmt::rt::Count;
    let mut _111: core::fmt::rt::Placeholder;
    let mut _112: core::fmt::rt::Alignment;
    let mut _113: core::fmt::rt::Count;
    let mut _114: core::fmt::rt::Count;
    let mut _115: core::fmt::rt::Placeholder;
    let mut _116: core::fmt::rt::Alignment;
    let mut _117: core::fmt::rt::Count;
    let mut _118: core::fmt::rt::Count;
    let mut _119: core::fmt::rt::UnsafeArg;
    let _120: ();
    let mut _121: std::fmt::Arguments<'_>;
    let mut _122: &[&str];
    let _123: &[&str; 2];
    let _124: [&str; 2];
    let mut _125: &[core::fmt::rt::Argument<'_>];
    let _126: &[core::fmt::rt::Argument<'_>; 2];
    let _127: [core::fmt::rt::Argument<'_>; 2];
    let mut _128: core::fmt::rt::Argument<'_>;
    let _129: &&str;
    let _130: &str;
    let mut _131: core::fmt::rt::Argument<'_>;
    let _132: &usize;
    let _133: usize;
    let mut _134: &[core::fmt::rt::Placeholder];
    let _135: &[core::fmt::rt::Placeholder; 1];
    let _136: [core::fmt::rt::Placeholder; 1];
    let mut _137: core::fmt::rt::Placeholder;
    let mut _138: core::fmt::rt::Alignment;
    let mut _139: core::fmt::rt::Count;
    let mut _140: core::fmt::rt::Count;
    let mut _141: core::fmt::rt::UnsafeArg;
    let _142: ();
    let mut _143: std::fmt::Arguments<'_>;
    let mut _144: &[&str];
    let _145: &[&str; 2];
    let _146: [&str; 2];
    let mut _147: &[core::fmt::rt::Argument<'_>];
    let _148: &[core::fmt::rt::Argument<'_>; 2];
    let _149: [core::fmt::rt::Argument<'_>; 2];
    let mut _150: core::fmt::rt::Argument<'_>;
    let _151: &&str;
    let _152: &str;
    let mut _153: core::fmt::rt::Argument<'_>;
    let _154: &usize;
    let _155: usize;
    let mut _156: &[core::fmt::rt::Placeholder];
    let _157: &[core::fmt::rt::Placeholder; 1];
    let _158: [core::fmt::rt::Placeholder; 1];
    let mut _159: core::fmt::rt::Placeholder;
    let mut _160: core::fmt::rt::Alignment;
    let mut _161: core::fmt::rt::Count;
    let mut _162: core::fmt::rt::Count;
    let mut _163: core::fmt::rt::UnsafeArg;
    let mut _164: &&str;
    let mut _165: &&str;
    let mut _166: &&str;
    let mut _167: &usize;
    scope 1 {
        debug _x => _1;
        let mut _30: usize;
        scope 2 {
            debug _x => _30;
            let _31: std::string::String;
            let _32: std::string::String;
            scope 3 {
                debug _f => _31;
                let _40: std::string::String;
                let _41: std::string::String;
                scope 5 {
                    debug _f => _40;
                    let _51: std::string::String;
                    let _52: std::string::String;
                    scope 7 {
                        debug _f => _51;
                        let _62: &str;
                        scope 9 {
                            debug s => _62;
                            let _83: &str;
                            scope 10 {
                            }
                            scope 11 {
                                debug region => _83;
                                let _84: usize;
                                scope 12 {
                                    debug width => _84;
                                    let _85: &str;
                                    scope 13 {
                                        debug ls => _85;
                                        let _86: &str;
                                        scope 14 {
                                            debug full => _86;
                                            scope 15 {
                                                debug args => _95;
                                            }
                                            scope 16 {
                                            }
                                            scope 17 {
                                            }
                                            scope 18 {
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    scope 8 {
                        debug res => _52;
                    }
                }
                scope 6 {
                    debug res => _41;
                }
            }
            scope 4 {
                debug res => _32;
            }
        }
    }

    bb0: {
        _1 = const 1_usize;
        _6 = [const "_x is 5\n"];
        _5 = &_6;
        _4 = _5 as &[&str] (PointerCoercion(Unsize));
        _9 = core::fmt::rt::Argument::<'_>::none() -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _14 = [const "_x is ", const "\n"];
        _13 = &_14;
        _12 = _13 as &[&str] (PointerCoercion(Unsize));
        _19 = &_1;
        _18 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_19) -> [return: bb4, unwind continue];
    }

    bb4: {
        _17 = [move _18];
        _16 = &_17;
        _15 = _16 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _11 = Arguments::<'_>::new_v1(move _12, move _15) -> [return: bb5, unwind continue];
    }

    bb5: {
        _10 = _print(move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        _24 = [const "first positional arg 1, second positional arg 2, _x is ", const "\n"];
        _23 = &_24;
        _22 = _23 as &[&str] (PointerCoercion(Unsize));
        _29 = &_1;
        _28 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_29) -> [return: bb7, unwind continue];
    }

    bb7: {
        _27 = [move _28];
        _26 = &_27;
        _25 = _26 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _21 = Arguments::<'_>::new_v1(move _22, move _25) -> [return: bb8, unwind continue];
    }

    bb8: {
        _20 = _print(move _21) -> [return: bb9, unwind continue];
    }

    bb9: {
        _30 = const 1_usize;
        _36 = [const "_x is 5"];
        _35 = &_36;
        _34 = _35 as &[&str] (PointerCoercion(Unsize));
        _39 = core::fmt::rt::Argument::<'_>::none() -> [return: bb10, unwind continue];
    }

    bb10: {
        _38 = &_39;
        _37 = _38 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _33 = Arguments::<'_>::new_v1(move _34, move _37) -> [return: bb11, unwind continue];
    }

    bb11: {
        _32 = format(move _33) -> [return: bb12, unwind continue];
    }

    bb12: {
        _31 = move _32;
        _45 = [const "_x is "];
        _44 = &_45;
        _43 = _44 as &[&str] (PointerCoercion(Unsize));
        _50 = &_30;
        _49 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_50) -> [return: bb13, unwind: bb52];
    }

    bb13: {
        _48 = [move _49];
        _47 = &_48;
        _46 = _47 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _42 = Arguments::<'_>::new_v1(move _43, move _46) -> [return: bb14, unwind: bb52];
    }

    bb14: {
        _41 = format(move _42) -> [return: bb15, unwind: bb52];
    }

    bb15: {
        _40 = move _41;
        _56 = [const "first positional arg 1, second positional arg 2, _x is "];
        _55 = &_56;
        _54 = _55 as &[&str] (PointerCoercion(Unsize));
        _61 = &_30;
        _60 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_61) -> [return: bb16, unwind: bb51];
    }

    bb16: {
        _59 = [move _60];
        _58 = &_59;
        _57 = _58 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _53 = Arguments::<'_>::new_v1(move _54, move _57) -> [return: bb17, unwind: bb51];
    }

    bb17: {
        _52 = format(move _53) -> [return: bb18, unwind: bb51];
    }

    bb18: {
        _51 = move _52;
        _62 = const "0.009";
        _67 = [const ".", const "\n"];
        _66 = &_67;
        _65 = _66 as &[&str] (PointerCoercion(Unsize));
        _72 = &_62;
        _71 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_72) -> [return: bb19, unwind: bb50];
    }

    bb19: {
        _74 = &_30;
        _73 = core::fmt::rt::Argument::<'_>::from_usize(_74) -> [return: bb20, unwind: bb50];
    }

    bb20: {
        _70 = [move _71, move _73];
        _69 = &_70;
        _68 = _69 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _79 = core::fmt::rt::Alignment::Left;
        _80 = core::fmt::rt::Count::Implied;
        _81 = core::fmt::rt::Count::Param(const 1_usize);
        _78 = core::fmt::rt::Placeholder::new(const 0_usize, const '0', move _79, const 0_u32, move _80, move _81) -> [return: bb21, unwind: bb50];
    }

    bb21: {
        _77 = [move _78];
        _76 = &_77;
        _75 = _76 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _82 = core::fmt::rt::UnsafeArg::new() -> [return: bb22, unwind: bb50];
    }

    bb22: {
        _64 = Arguments::<'_>::new_v1_formatted(move _65, move _68, move _75, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb23, unwind: bb50];
    }

    bb23: {
        _63 = _print(move _64) -> [return: bb24, unwind: bb50];
    }

    bb24: {
        _83 = const "abc";
        _84 = const 8_usize;
        _85 = const "abcde";
        _86 = const "abcde";
        _91 = [const "| ", const " | ", const " | ", const "\n"];
        _90 = &_91;
        _89 = _90 as &[&str] (PointerCoercion(Unsize));
        _96 = &_83;
        _97 = &_84;
        _98 = &_85;
        _99 = &_86;
        _95 = (move _96, move _97, move _98, move _99);
        _164 = deref_copy (_95.0: &&str);
        _100 = core::fmt::rt::Argument::<'_>::new_debug::<&str>(_164) -> [return: bb25, unwind: bb50];
    }

    bb25: {
        _165 = deref_copy (_95.2: &&str);
        _101 = core::fmt::rt::Argument::<'_>::new_debug::<&str>(_165) -> [return: bb26, unwind: bb50];
    }

    bb26: {
        _166 = deref_copy (_95.3: &&str);
        _102 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_166) -> [return: bb27, unwind: bb50];
    }

    bb27: {
        _167 = deref_copy (_95.1: &usize);
        _103 = core::fmt::rt::Argument::<'_>::from_usize(_167) -> [return: bb28, unwind: bb50];
    }

    bb28: {
        _94 = [move _100, move _101, move _102, move _103];
        _93 = &_94;
        _92 = _93 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _108 = core::fmt::rt::Alignment::Unknown;
        _109 = core::fmt::rt::Count::Implied;
        _110 = core::fmt::rt::Count::Param(const 3_usize);
        _107 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _108, const 0_u32, move _109, move _110) -> [return: bb29, unwind: bb50];
    }

    bb29: {
        _112 = core::fmt::rt::Alignment::Unknown;
        _113 = core::fmt::rt::Count::Implied;
        _114 = core::fmt::rt::Count::Is(const 4_usize);
        _111 = core::fmt::rt::Placeholder::new(const 1_usize, const ' ', move _112, const 0_u32, move _113, move _114) -> [return: bb30, unwind: bb50];
    }

    bb30: {
        _116 = core::fmt::rt::Alignment::Unknown;
        _117 = core::fmt::rt::Count::Implied;
        _118 = core::fmt::rt::Count::Implied;
        _115 = core::fmt::rt::Placeholder::new(const 2_usize, const ' ', move _116, const 0_u32, move _117, move _118) -> [return: bb31, unwind: bb50];
    }

    bb31: {
        _106 = [move _107, move _111, move _115];
        _105 = &_106;
        _104 = _105 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _119 = core::fmt::rt::UnsafeArg::new() -> [return: bb32, unwind: bb50];
    }

    bb32: {
        _88 = Arguments::<'_>::new_v1_formatted(move _89, move _92, move _104, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb33, unwind: bb50];
    }

    bb33: {
        _87 = _print(move _88) -> [return: bb34, unwind: bb50];
    }

    bb34: {
        _124 = [const "", const "\n"];
        _123 = &_124;
        _122 = _123 as &[&str] (PointerCoercion(Unsize));
        _130 = const "aaaaaaaaaaaaaaaaaa";
        _129 = &_130;
        _128 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_129) -> [return: bb35, unwind: bb50];
    }

    bb35: {
        _133 = const 4_usize;
        _132 = &_133;
        _131 = core::fmt::rt::Argument::<'_>::from_usize(_132) -> [return: bb36, unwind: bb50];
    }

    bb36: {
        _127 = [move _128, move _131];
        _126 = &_127;
        _125 = _126 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _138 = core::fmt::rt::Alignment::Unknown;
        _139 = core::fmt::rt::Count::Param(const 1_usize);
        _140 = core::fmt::rt::Count::Implied;
        _137 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _138, const 0_u32, move _139, move _140) -> [return: bb37, unwind: bb50];
    }

    bb37: {
        _136 = [move _137];
        _135 = &_136;
        _134 = _135 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _141 = core::fmt::rt::UnsafeArg::new() -> [return: bb38, unwind: bb50];
    }

    bb38: {
        _121 = Arguments::<'_>::new_v1_formatted(move _122, move _125, move _134, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb39, unwind: bb50];
    }

    bb39: {
        _120 = _print(move _121) -> [return: bb40, unwind: bb50];
    }

    bb40: {
        _146 = [const "", const "\n"];
        _145 = &_146;
        _144 = _145 as &[&str] (PointerCoercion(Unsize));
        _152 = const "aaaaaaaaaaaaaaaaaa";
        _151 = &_152;
        _150 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_151) -> [return: bb41, unwind: bb50];
    }

    bb41: {
        _155 = const 4_usize;
        _154 = &_155;
        _153 = core::fmt::rt::Argument::<'_>::from_usize(_154) -> [return: bb42, unwind: bb50];
    }

    bb42: {
        _149 = [move _150, move _153];
        _148 = &_149;
        _147 = _148 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _160 = core::fmt::rt::Alignment::Unknown;
        _161 = core::fmt::rt::Count::Param(const 1_usize);
        _162 = core::fmt::rt::Count::Implied;
        _159 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _160, const 0_u32, move _161, move _162) -> [return: bb43, unwind: bb50];
    }

    bb43: {
        _158 = [move _159];
        _157 = &_158;
        _156 = _157 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _163 = core::fmt::rt::UnsafeArg::new() -> [return: bb44, unwind: bb50];
    }

    bb44: {
        _143 = Arguments::<'_>::new_v1_formatted(move _144, move _147, move _156, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb45, unwind: bb50];
    }

    bb45: {
        _142 = _print(move _143) -> [return: bb46, unwind: bb50];
    }

    bb46: {
        drop(_51) -> [return: bb47, unwind: bb51];
    }

    bb47: {
        drop(_40) -> [return: bb48, unwind: bb52];
    }

    bb48: {
        drop(_31) -> [return: bb49, unwind continue];
    }

    bb49: {
        return;
    }

    bb50 (cleanup): {
        drop(_51) -> [return: bb51, unwind terminate];
    }

    bb51 (cleanup): {
        drop(_40) -> [return: bb52, unwind terminate];
    }

    bb52 (cleanup): {
        drop(_31) -> [return: bb53, unwind terminate];
    }

    bb53 (cleanup): {
        resume;
    }
}
