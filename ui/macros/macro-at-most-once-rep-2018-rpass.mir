// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _3: (&i32, &i32);
    let mut _4: &i32;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: i32;
    let mut _10: i32;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&i32, &i32);
    let mut _16: &i32;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: i32;
    let mut _22: i32;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&i32, &i32);
    let mut _28: &i32;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: i32;
    let mut _34: i32;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: (&i32, &i32);
    let mut _40: &i32;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: i32;
    let mut _46: i32;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: (&i32, &i32);
    let mut _52: &i32;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: i32;
    let mut _58: i32;
    let _60: !;
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: (&i32, &i32);
    let mut _64: &i32;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: i32;
    let mut _70: i32;
    let _72: !;
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _75: (&i32, &i32);
    let mut _76: &i32;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: i32;
    let mut _82: i32;
    let _84: !;
    let mut _85: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _87: (&i32, &i32);
    let mut _88: &i32;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: i32;
    let mut _94: i32;
    let _96: !;
    let mut _97: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => const 1_i32;
        let mut _2: i32;
        scope 2 {
            debug x => const 0_i32;
            let _5: &i32;
            let _6: &i32;
            let mut _14: i32;
            let mut _105: &i32;
            scope 3 {
                debug left_val => _5;
                debug right_val => _6;
                let _11: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _11;
                }
            }
            scope 5 {
                debug x => const 0_i32;
                let _17: &i32;
                let _18: &i32;
                let mut _26: i32;
                let mut _104: &i32;
                scope 6 {
                    debug left_val => _17;
                    debug right_val => _18;
                    let _23: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _23;
                    }
                }
                scope 8 {
                    debug x => const 0_i32;
                    let _29: &i32;
                    let _30: &i32;
                    let mut _38: i32;
                    let mut _103: &i32;
                    scope 9 {
                        debug left_val => _29;
                        debug right_val => _30;
                        let _35: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _35;
                        }
                    }
                    scope 11 {
                        debug x => const 0_i32;
                        let _41: &i32;
                        let _42: &i32;
                        let mut _50: i32;
                        let mut _102: &i32;
                        scope 12 {
                            debug left_val => _41;
                            debug right_val => _42;
                            let _47: core::panicking::AssertKind;
                            scope 13 {
                                debug kind => _47;
                            }
                        }
                        scope 14 {
                            debug x => _50;
                            let _53: &i32;
                            let _54: &i32;
                            let mut _62: i32;
                            let mut _101: &i32;
                            scope 15 {
                                debug left_val => _53;
                                debug right_val => _54;
                                let _59: core::panicking::AssertKind;
                                scope 16 {
                                    debug kind => _59;
                                }
                            }
                            scope 17 {
                                debug x => _62;
                                let _65: &i32;
                                let _66: &i32;
                                let mut _74: i32;
                                let mut _100: &i32;
                                scope 18 {
                                    debug left_val => _65;
                                    debug right_val => _66;
                                    let _71: core::panicking::AssertKind;
                                    scope 19 {
                                        debug kind => _71;
                                    }
                                }
                                scope 20 {
                                    debug x => _74;
                                    let _77: &i32;
                                    let _78: &i32;
                                    let mut _86: i32;
                                    let mut _99: &i32;
                                    scope 21 {
                                        debug left_val => _77;
                                        debug right_val => _78;
                                        let _83: core::panicking::AssertKind;
                                        scope 22 {
                                            debug kind => _83;
                                        }
                                    }
                                    scope 23 {
                                        debug x => _86;
                                        let _89: &i32;
                                        let _90: &i32;
                                        let mut _98: &i32;
                                        scope 24 {
                                            debug left_val => _89;
                                            debug right_val => _90;
                                            let _95: core::panicking::AssertKind;
                                            scope 25 {
                                                debug kind => _95;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 1_i32;
        _2 = const 0_i32;
        _4 = &_2;
        _105 = const _;
        _3 = (move _4, _105);
        _5 = (_3.0: &i32);
        _6 = (_3.1: &i32);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<i32, i32>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb2: {
        _14 = const 0_i32;
        _16 = &_14;
        _104 = const _;
        _15 = (move _16, _104);
        _17 = (_15.0: &i32);
        _18 = (_15.1: &i32);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<i32, i32>(move _23, _17, _18, move _25) -> unwind continue;
    }

    bb4: {
        _26 = const 0_i32;
        _28 = &_26;
        _103 = const _;
        _27 = (move _28, _103);
        _29 = (_27.0: &i32);
        _30 = (_27.1: &i32);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<i32, i32>(move _35, _29, _30, move _37) -> unwind continue;
    }

    bb6: {
        _38 = const 0_i32;
        _40 = &_38;
        _102 = const _;
        _39 = (move _40, _102);
        _41 = (_39.0: &i32);
        _42 = (_39.1: &i32);
        _45 = (*_41);
        _46 = (*_42);
        _44 = Eq(move _45, move _46);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<i32, i32>(move _47, _41, _42, move _49) -> unwind continue;
    }

    bb8: {
        _50 = const 0_i32;
        _50 = Add(_50, _1);
        _52 = &_50;
        _101 = const _;
        _51 = (move _52, _101);
        _53 = (_51.0: &i32);
        _54 = (_51.1: &i32);
        _57 = (*_53);
        _58 = (*_54);
        _56 = Eq(move _57, move _58);
        _55 = Not(move _56);
        switchInt(move _55) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _59 = core::panicking::AssertKind::Eq;
        _61 = Option::<Arguments<'_>>::None;
        _60 = core::panicking::assert_failed::<i32, i32>(move _59, _53, _54, move _61) -> unwind continue;
    }

    bb10: {
        _62 = const 0_i32;
        _62 = Add(_62, _1);
        _64 = &_62;
        _100 = const _;
        _63 = (move _64, _100);
        _65 = (_63.0: &i32);
        _66 = (_63.1: &i32);
        _69 = (*_65);
        _70 = (*_66);
        _68 = Eq(move _69, move _70);
        _67 = Not(move _68);
        switchInt(move _67) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _71 = core::panicking::AssertKind::Eq;
        _73 = Option::<Arguments<'_>>::None;
        _72 = core::panicking::assert_failed::<i32, i32>(move _71, _65, _66, move _73) -> unwind continue;
    }

    bb12: {
        _74 = const 0_i32;
        _74 = Add(_74, _1);
        _76 = &_74;
        _99 = const _;
        _75 = (move _76, _99);
        _77 = (_75.0: &i32);
        _78 = (_75.1: &i32);
        _81 = (*_77);
        _82 = (*_78);
        _80 = Eq(move _81, move _82);
        _79 = Not(move _80);
        switchInt(move _79) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _83 = core::panicking::AssertKind::Eq;
        _85 = Option::<Arguments<'_>>::None;
        _84 = core::panicking::assert_failed::<i32, i32>(move _83, _77, _78, move _85) -> unwind continue;
    }

    bb14: {
        _86 = const 0_i32;
        _86 = Add(_86, _1);
        _88 = &_86;
        _98 = const _;
        _87 = (move _88, _98);
        _89 = (_87.0: &i32);
        _90 = (_87.1: &i32);
        _93 = (*_89);
        _94 = (*_90);
        _92 = Eq(move _93, move _94);
        _91 = Not(move _92);
        switchInt(move _91) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _95 = core::panicking::AssertKind::Eq;
        _97 = Option::<Arguments<'_>>::None;
        _96 = core::panicking::assert_failed::<i32, i32>(move _95, _89, _90, move _97) -> unwind continue;
    }

    bb16: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}
