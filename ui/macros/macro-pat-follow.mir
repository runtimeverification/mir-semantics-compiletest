// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/macros/macro-pat-follow.rs:18:11: 18:11
    let mut _1: std::ops::Range<i32>;    // in scope 0 at ui/macros/macro-pat-follow.rs:4:13: 4:21
    let mut _2: std::ops::Range<i32>;    // in scope 0 at ui/macros/macro-pat-follow.rs:19:24: 19:29
    let mut _3: std::option::Option<i32>; // in scope 0 at ui/macros/macro-pat-follow.rs:5:24: 5:35
    let mut _4: &mut std::ops::Range<i32>; // in scope 0 at ui/macros/macro-pat-follow.rs:5:24: 5:35
    let mut _5: isize;                   // in scope 0 at ui/macros/macro-pat-follow.rs:19:13: 19:20
    let _6: u8;                          // in scope 0 at ui/macros/macro-pat-follow.rs:20:18: 20:19
    let _7: &u8;                         // in scope 0 at ui/macros/macro-pat-follow.rs:20:18: 20:19
    let mut _8: bool;                    // in scope 0 at ui/macros/macro-pat-follow.rs:20:24: 20:29
    let mut _9: u8;                      // in scope 0 at ui/macros/macro-pat-follow.rs:20:24: 20:25
    let mut _10: &std::option::Option<u8>; // in scope 0 at ui/macros/macro-pat-follow.rs:20:18: 20:19
    scope 1 {
        debug iter => _1;                // in scope 1 at ui/macros/macro-pat-follow.rs:4:13: 4:21
        scope 2 {
        }
    }
    scope 3 {
        debug x => _6;                   // in scope 3 at ui/macros/macro-pat-follow.rs:20:18: 20:19
        debug x => _7;                   // in scope 3 at ui/macros/macro-pat-follow.rs:20:18: 20:19
    }

    bb0: {
        _2 = std::ops::Range::<i32> { start: const 0_i32, end: const 10_i32 }; // scope 0 at ui/macros/macro-pat-follow.rs:19:24: 19:29
        _1 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at ui/macros/macro-pat-follow.rs:4:24: 4:38
                                         // mir::Constant
                                         // + span: ui/macros/macro-pat-follow.rs:4:27: 4:36
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut _1;                    // scope 2 at ui/macros/macro-pat-follow.rs:5:24: 5:35
        _3 = <std::ops::Range<i32> as Iterator>::next(move _4) -> bb2; // scope 2 at ui/macros/macro-pat-follow.rs:5:24: 5:35
                                         // mir::Constant
                                         // + span: ui/macros/macro-pat-follow.rs:5:29: 5:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = discriminant(_3);           // scope 2 at ui/macros/macro-pat-follow.rs:19:13: 19:20
        switchInt(move _5) -> [1: bb1, otherwise: bb3]; // scope 2 at ui/macros/macro-pat-follow.rs:19:13: 19:20
    }

    bb3: {
        _10 = const _;                   // scope 0 at ui/macros/macro-pat-follow.rs:20:18: 20:19
                                         // mir::Constant
                                         // + span: ui/macros/macro-pat-follow.rs:20:18: 20:19
                                         // + literal: Const { ty: &Option<u8>, val: Unevaluated(main, [], Some(promoted[0])) }
        _7 = &(((*_10) as Some).0: u8);  // scope 0 at ui/macros/macro-pat-follow.rs:20:18: 20:19
        _9 = (*_7);                      // scope 0 at ui/macros/macro-pat-follow.rs:20:24: 20:25
        _8 = Gt(move _9, const 0_u8);    // scope 0 at ui/macros/macro-pat-follow.rs:20:24: 20:29
        switchInt(move _8) -> [0: bb5, otherwise: bb4]; // scope 0 at ui/macros/macro-pat-follow.rs:20:24: 20:29
    }

    bb4: {
        _6 = const 1_u8;                 // scope 0 at ui/macros/macro-pat-follow.rs:20:18: 20:19
        goto -> bb5;                     // scope 0 at ui/macros/macro-pat-follow.rs:12:26: 12:27
    }

    bb5: {
        return;                          // scope 0 at ui/macros/macro-pat-follow.rs:21:2: 21:2
    }
}

promoted[0] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>; // return place in scope 0 at ui/macros/macro-pat-follow.rs:20:18: 20:19
    let mut _1: std::option::Option<u8>; // in scope 0 at ui/macros/macro-pat-follow.rs:11:15: 11:24

    bb0: {
        _1 = Option::<u8>::Some(const 1_u8); // scope 0 at ui/macros/macro-pat-follow.rs:11:15: 11:24
        _0 = &_1;                        // scope 0 at ui/macros/macro-pat-follow.rs:20:18: 20:19
        return;                          // scope 0 at ui/macros/macro-pat-follow.rs:20:18: 20:19
    }
}
