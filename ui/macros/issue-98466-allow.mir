// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: usize;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 0];
    let _7: [core::fmt::rt::Argument<'_>; 0];
    let _8: ();
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: [core::fmt::rt::Argument<'_>; 1];
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &usize;
    let _16: ();
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: &[core::fmt::rt::Argument<'_>];
    let _20: &[core::fmt::rt::Argument<'_>; 1];
    let _21: [core::fmt::rt::Argument<'_>; 1];
    let mut _22: core::fmt::rt::Argument<'_>;
    let _23: &usize;
    let mut _27: std::fmt::Arguments<'_>;
    let mut _28: &[&str];
    let mut _29: &[core::fmt::rt::Argument<'_>];
    let _30: &[core::fmt::rt::Argument<'_>; 0];
    let _31: [core::fmt::rt::Argument<'_>; 0];
    let mut _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: [core::fmt::rt::Argument<'_>; 1];
    let mut _39: core::fmt::rt::Argument<'_>;
    let _40: &usize;
    let mut _43: std::fmt::Arguments<'_>;
    let mut _44: &[&str];
    let mut _45: &[core::fmt::rt::Argument<'_>];
    let _46: &[core::fmt::rt::Argument<'_>; 1];
    let _47: [core::fmt::rt::Argument<'_>; 1];
    let mut _48: core::fmt::rt::Argument<'_>;
    let _49: &usize;
    scope 1 {
        debug _x => const 1_usize;
        let mut _24: usize;
        let mut _53: &[&str; 2];
        let mut _54: &[&str; 2];
        let mut _55: &[&str; 1];
        scope 2 {
            debug _x => const 1_usize;
            let _25: std::string::String;
            let _26: std::string::String;
            let mut _52: &[&str; 1];
            scope 3 {
                debug _f => _25;
                let _32: std::string::String;
                let _33: std::string::String;
                let mut _51: &[&str; 1];
                scope 5 {
                    debug _f => _32;
                    let _41: std::string::String;
                    let _42: std::string::String;
                    let mut _50: &[&str; 1];
                    scope 7 {
                        debug _f => _41;
                    }
                    scope 8 {
                        debug res => _42;
                    }
                }
                scope 6 {
                    debug res => _33;
                }
            }
            scope 4 {
                debug res => _26;
            }
        }
    }

    bb0: {
        _1 = const 1_usize;
        _55 = const _;
        _4 = _55 as &[&str] (Pointer(Unsize));
        _7 = core::fmt::rt::Argument::<'_>::none() -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _54 = const _;
        _10 = _54 as &[&str] (Pointer(Unsize));
        _15 = &_1;
        _14 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_15) -> [return: bb4, unwind continue];
    }

    bb4: {
        _13 = [move _14];
        _12 = &_13;
        _11 = _12 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _11) -> [return: bb5, unwind continue];
    }

    bb5: {
        _8 = _print(move _9) -> [return: bb6, unwind continue];
    }

    bb6: {
        _53 = const _;
        _18 = _53 as &[&str] (Pointer(Unsize));
        _23 = &_1;
        _22 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_23) -> [return: bb7, unwind continue];
    }

    bb7: {
        _21 = [move _22];
        _20 = &_21;
        _19 = _20 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _17 = Arguments::<'_>::new_v1(move _18, move _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        _16 = _print(move _17) -> [return: bb9, unwind continue];
    }

    bb9: {
        _24 = const 1_usize;
        _52 = const _;
        _28 = _52 as &[&str] (Pointer(Unsize));
        _31 = core::fmt::rt::Argument::<'_>::none() -> [return: bb10, unwind continue];
    }

    bb10: {
        _30 = &_31;
        _29 = _30 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _27 = Arguments::<'_>::new_v1(move _28, move _29) -> [return: bb11, unwind continue];
    }

    bb11: {
        _26 = format(move _27) -> [return: bb12, unwind continue];
    }

    bb12: {
        _25 = move _26;
        _51 = const _;
        _35 = _51 as &[&str] (Pointer(Unsize));
        _40 = &_24;
        _39 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_40) -> [return: bb13, unwind: bb23];
    }

    bb13: {
        _38 = [move _39];
        _37 = &_38;
        _36 = _37 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _34 = Arguments::<'_>::new_v1(move _35, move _36) -> [return: bb14, unwind: bb23];
    }

    bb14: {
        _33 = format(move _34) -> [return: bb15, unwind: bb23];
    }

    bb15: {
        _32 = move _33;
        _50 = const _;
        _44 = _50 as &[&str] (Pointer(Unsize));
        _49 = &_24;
        _48 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_49) -> [return: bb16, unwind: bb22];
    }

    bb16: {
        _47 = [move _48];
        _46 = &_47;
        _45 = _46 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _43 = Arguments::<'_>::new_v1(move _44, move _45) -> [return: bb17, unwind: bb22];
    }

    bb17: {
        _42 = format(move _43) -> [return: bb18, unwind: bb22];
    }

    bb18: {
        _41 = move _42;
        drop(_41) -> [return: bb19, unwind: bb22];
    }

    bb19: {
        drop(_32) -> [return: bb20, unwind: bb23];
    }

    bb20: {
        drop(_25) -> [return: bb21, unwind continue];
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_32) -> [return: bb23, unwind terminate];
    }

    bb23 (cleanup): {
        drop(_25) -> [return: bb24, unwind terminate];
    }

    bb24 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "first positional arg 1, second positional arg 2, _x is "];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "_x is "];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "_x is 5"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "first positional arg 1, second positional arg 2, _x is ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "_x is ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "_x is 5\n"];
        _0 = &_1;
        return;
    }
}
