// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/macros/die-macro-expr.rs:5:11: 5:11
    let _1: isize;                       // in scope 0 at ui/macros/die-macro-expr.rs:6:9: 6:16
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    scope 1 {
        debug __isize => _1;             // in scope 1 at ui/macros/die-macro-expr.rs:6:9: 6:16
    }

    bb0: {
        _2 = begin_panic::<&str>(const "test"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/macros/die-macro-expr.rs:6:33: 6:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}
