// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let _2: &i32;
    let _3: &i32;
    let mut _4: bool;
    let mut _5: i32;
    let mut _6: i32;
    let _8: !;
    let mut _9: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _10: &i32;
    let mut _11: &i32;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _7: core::panicking::AssertKind;
        scope 2 {
            debug kind => _7;
        }
    }

    bb0: {
        _11 = const _;
        _10 = const _;
        _1 = (_11, _10);
        _2 = (_1.0: &i32);
        _3 = (_1.1: &i32);
        _5 = (*_2);
        _6 = (*_3);
        _4 = Eq(move _5, move _6);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _7 = core::panicking::AssertKind::Ne;
        _9 = Option::<Arguments<'_>>::None;
        _8 = core::panicking::assert_failed::<i32, i32>(move _7, _2, _3, move _9) -> unwind continue;
    }

    bb2: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 14_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 14_i32;
        _0 = &_1;
        return;
    }
}
