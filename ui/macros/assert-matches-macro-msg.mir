// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: i32;
    let _2: !;
    let _3: &str;
    let mut _4: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _8: &i32;
    scope 1 {
        debug left_val => const _;
        let mut _7: &[&str; 1];
    }

    bb0: {
        _1 = Add(const 1_i32, const 1_i32);
        switchInt(_1) -> [3: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = const _;
        _3 = const "3";
        _7 = const _;
        _6 = _7 as &[&str] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_const(move _6) -> [return: bb3, unwind continue];
    }

    bb2: {
        return;
    }

    bb3: {
        _4 = Option::<Arguments<'_>>::Some(move _5);
        _2 = core::panicking::assert_matches_failed::<i32>(_8, _3, move _4) -> unwind continue;
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "1 + 1 definitely should be 3"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = Add(const 1_i32, const 1_i32);
        _0 = &_1;
        return;
    }
}
