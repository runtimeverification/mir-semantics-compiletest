// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/macros/macro-first-set.rs:12:21: 12:26>::fmt(_1: &Foo40569, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Foo40569";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/macros/macro-first-set.rs:12:28: 12:37>::eq(_1: &Foo40569, _2: &Foo40569) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn test_40569() -> () {
    let mut _0: ();
    let mut _1: (&Foo40569, &Foo40569);
    let _2: &Foo40569;
    let _3: &Foo40569;
    let mut _4: bool;
    let mut _5: bool;
    let _7: !;
    let mut _8: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _9: &Foo40569;
    let mut _10: &Foo40569;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _6: core::panicking::AssertKind;
        scope 2 {
            debug kind => _6;
        }
    }

    bb0: {
        _10 = const _;
        _9 = const _;
        _1 = (_10, _9);
        _2 = (_1.0: &Foo40569);
        _3 = (_1.1: &Foo40569);
        _5 = <Foo40569 as PartialEq>::eq(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = core::panicking::AssertKind::Eq;
        _8 = Option::<Arguments<'_>>::None;
        _7 = core::panicking::assert_failed::<Foo40569, Foo40569>(move _6, _2, _3, move _8) -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in test_40569: &Foo40569 = {
    let mut _0: &Foo40569;
    let mut _1: Foo40569;

    bb0: {
        _1 = Foo40569;
        _0 = &_1;
        return;
    }
}

promoted[1] in test_40569: &Foo40569 = {
    let mut _0: &Foo40569;
    let mut _1: Foo40569;

    bb0: {
        _1 = Foo40569;
        _0 = &_1;
        return;
    }
}

fn test_26444() -> () {
    let mut _0: ();
    let mut _1: (&&str, &&str);
    let _2: &&str;
    let _3: &&str;
    let mut _4: bool;
    let mut _5: bool;
    let _7: !;
    let mut _8: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _9: (&&str, &&str);
    let _10: &&str;
    let _11: &&str;
    let mut _12: bool;
    let mut _13: bool;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: &&str;
    let mut _18: &&str;
    let mut _19: &&str;
    let mut _20: &&str;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _6: core::panicking::AssertKind;
        scope 2 {
            debug kind => _6;
        }
    }
    scope 3 {
        debug left_val => _10;
        debug right_val => _11;
        let _14: core::panicking::AssertKind;
        scope 4 {
            debug kind => _14;
        }
    }

    bb0: {
        _20 = const _;
        _19 = const _;
        _1 = (_20, _19);
        _2 = (_1.0: &&str);
        _3 = (_1.1: &&str);
        _5 = <&str as PartialEq>::eq(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = core::panicking::AssertKind::Eq;
        _8 = Option::<Arguments<'_>>::None;
        _7 = core::panicking::assert_failed::<&str, &str>(move _6, _2, _3, move _8) -> unwind continue;
    }

    bb3: {
        _18 = const _;
        _17 = const _;
        _9 = (_18, _17);
        _10 = (_9.0: &&str);
        _11 = (_9.1: &&str);
        _13 = <&str as PartialEq>::eq(_10, _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<&str, &str>(move _14, _10, _11, move _16) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in test_26444: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "f";
        _0 = &_1;
        return;
    }
}

promoted[1] in test_26444: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "f";
        _0 = &_1;
        return;
    }
}

promoted[2] in test_26444: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "a, b, c, d, e";
        _0 = &_1;
        return;
    }
}

promoted[3] in test_26444: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "a, b, c, d, e";
        _0 = &_1;
        return;
    }
}

fn test_35650() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let _2: &usize;
    let _3: &usize;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&i32, &i32);
    let _12: &i32;
    let _13: &i32;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: i32;
    let mut _17: i32;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: &i32;
    let mut _22: &i32;
    let mut _23: &usize;
    let mut _24: &usize;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _12;
        debug right_val => _13;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }

    bb0: {
        _24 = const _;
        _23 = const _;
        _1 = (_24, _23);
        _2 = (_1.0: &usize);
        _3 = (_1.1: &usize);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<usize, usize>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        _22 = const _;
        _21 = const _;
        _11 = (_22, _21);
        _12 = (_11.0: &i32);
        _13 = (_11.1: &i32);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<i32, i32>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in test_35650: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 5_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in test_35650: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 5_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in test_35650: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 8_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in test_35650: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<u64>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

fn test_24189() -> () {
    let mut _0: ();
    let mut _1: Tester;
    let mut _2: std::string::String;
    let _3: &str;
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _3 = const "";
        _2 = <str as ToOwned>::to_owned(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = Tester { name: move _2 };
        drop(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn test_51477() -> () {
    let mut _0: ();
    let mut _1: (&&str, &&str);
    let _2: &&str;
    let _3: &&str;
    let mut _4: bool;
    let mut _5: bool;
    let _7: !;
    let mut _8: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _9: (&&str, &&str);
    let _10: &&str;
    let _11: &&str;
    let mut _12: bool;
    let mut _13: bool;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&&str, &&str);
    let _18: &&str;
    let _19: &&str;
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: &&str;
    let mut _26: &&str;
    let mut _27: &&str;
    let mut _28: &&str;
    let mut _29: &&str;
    let mut _30: &&str;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _6: core::panicking::AssertKind;
        scope 2 {
            debug kind => _6;
        }
    }
    scope 3 {
        debug left_val => _10;
        debug right_val => _11;
        let _14: core::panicking::AssertKind;
        scope 4 {
            debug kind => _14;
        }
    }
    scope 5 {
        debug left_val => _18;
        debug right_val => _19;
        let _22: core::panicking::AssertKind;
        scope 6 {
            debug kind => _22;
        }
    }

    bb0: {
        _30 = const _;
        _29 = const _;
        _1 = (_30, _29);
        _2 = (_1.0: &&str);
        _3 = (_1.1: &&str);
        _5 = <&str as PartialEq>::eq(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = core::panicking::AssertKind::Eq;
        _8 = Option::<Arguments<'_>>::None;
        _7 = core::panicking::assert_failed::<&str, &str>(move _6, _2, _3, move _8) -> unwind continue;
    }

    bb3: {
        _28 = const _;
        _27 = const _;
        _9 = (_28, _27);
        _10 = (_9.0: &&str);
        _11 = (_9.1: &&str);
        _13 = <&str as PartialEq>::eq(_10, _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<&str, &str>(move _14, _10, _11, move _16) -> unwind continue;
    }

    bb6: {
        _26 = const _;
        _25 = const _;
        _17 = (_26, _25);
        _18 = (_17.0: &&str);
        _19 = (_17.1: &&str);
        _21 = <&str as PartialEq>::eq(_18, _19) -> [return: bb7, unwind continue];
    }

    bb7: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<&str, &str>(move _22, _18, _19, move _24) -> unwind continue;
    }

    bb9: {
        return;
    }
}

promoted[0] in test_51477: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "last token is lifetime";
        _0 = &_1;
        return;
    }
}

promoted[1] in test_51477: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "last token is lifetime";
        _0 = &_1;
        return;
    }
}

promoted[2] in test_51477: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "last token is other";
        _0 = &_1;
        return;
    }
}

promoted[3] in test_51477: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "last token is other";
        _0 = &_1;
        return;
    }
}

promoted[4] in test_51477: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "last token is lifetime";
        _0 = &_1;
        return;
    }
}

promoted[5] in test_51477: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "last token is lifetime";
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();
    let _5: ();

    bb0: {
        _1 = test_26444() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = test_40569() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = test_35650() -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = test_24189() -> [return: bb4, unwind continue];
    }

    bb4: {
        _5 = test_51477() -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}
