// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn a() -> i32 {
    let mut _0: i32;

    bb0: {
        _0 = const 1_i32;
        return;
    }
}

fn b() -> i32 {
    let mut _0: i32;

    bb0: {
        _0 = const 2_i32;
        return;
    }
}

fn c() -> i32 {
    let mut _0: i32;

    bb0: {
        _0 = const 3_i32;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let _2: &i32;
    let _3: &i32;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: i32;
    let mut _7: i32;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&i32, &i32);
    let _12: &i32;
    let _13: &i32;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: i32;
    let mut _17: i32;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&i32, &i32);
    let _22: &i32;
    let _23: &i32;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: i32;
    let mut _27: i32;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&i32, &i32);
    let mut _32: &i32;
    let _33: i32;
    let _34: &i32;
    let _35: &i32;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: i32;
    let mut _39: i32;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&i32, &i32);
    let mut _44: &i32;
    let _45: i32;
    let _46: &i32;
    let _47: &i32;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: i32;
    let mut _51: i32;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _55: (&i32, &i32);
    let mut _56: &i32;
    let _57: i32;
    let _58: &i32;
    let _59: &i32;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: i32;
    let mut _63: i32;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: (&i32, &i32);
    let _68: &i32;
    let _69: &i32;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: i32;
    let mut _73: i32;
    let _75: !;
    let mut _76: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _77: (&i32, &i32);
    let _78: &i32;
    let _79: &i32;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: i32;
    let mut _83: i32;
    let _85: !;
    let mut _86: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _87: &i32;
    let mut _88: &i32;
    let mut _89: &i32;
    let mut _90: &i32;
    let mut _91: &i32;
    let mut _92: &i32;
    let mut _93: &i32;
    let mut _94: &i32;
    let mut _95: &i32;
    let mut _96: &i32;
    let mut _97: &i32;
    let mut _98: &i32;
    let mut _99: &i32;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _12;
        debug right_val => _13;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 6 {
            debug kind => _28;
        }
    }
    scope 7 {
        debug left_val => _34;
        debug right_val => _35;
        let _40: core::panicking::AssertKind;
        scope 8 {
            debug kind => _40;
        }
    }
    scope 9 {
        debug left_val => _46;
        debug right_val => _47;
        let _52: core::panicking::AssertKind;
        scope 10 {
            debug kind => _52;
        }
    }
    scope 11 {
        debug left_val => _58;
        debug right_val => _59;
        let _64: core::panicking::AssertKind;
        scope 12 {
            debug kind => _64;
        }
    }
    scope 13 {
        debug left_val => _68;
        debug right_val => _69;
        let _74: core::panicking::AssertKind;
        scope 14 {
            debug kind => _74;
        }
    }
    scope 15 {
        debug left_val => _78;
        debug right_val => _79;
        let _84: core::panicking::AssertKind;
        scope 16 {
            debug kind => _84;
        }
    }

    bb0: {
        _99 = const _;
        _98 = const _;
        _1 = (_99, _98);
        _2 = (_1.0: &i32);
        _3 = (_1.1: &i32);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<i32, i32>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        _97 = const _;
        _96 = const _;
        _11 = (_97, _96);
        _12 = (_11.0: &i32);
        _13 = (_11.1: &i32);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<i32, i32>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb4: {
        _95 = const _;
        _94 = const _;
        _21 = (_95, _94);
        _22 = (_21.0: &i32);
        _23 = (_21.1: &i32);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<i32, i32>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb6: {
        _33 = a() -> [return: bb7, unwind continue];
    }

    bb7: {
        _32 = &_33;
        _93 = const _;
        _31 = (move _32, _93);
        _34 = (_31.0: &i32);
        _35 = (_31.1: &i32);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<i32, i32>(move _40, _34, _35, move _42) -> unwind continue;
    }

    bb9: {
        _45 = b() -> [return: bb10, unwind continue];
    }

    bb10: {
        _44 = &_45;
        _92 = const _;
        _43 = (move _44, _92);
        _46 = (_43.0: &i32);
        _47 = (_43.1: &i32);
        _50 = (*_46);
        _51 = (*_47);
        _49 = Eq(move _50, move _51);
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<i32, i32>(move _52, _46, _47, move _54) -> unwind continue;
    }

    bb12: {
        _57 = c() -> [return: bb13, unwind continue];
    }

    bb13: {
        _56 = &_57;
        _91 = const _;
        _55 = (move _56, _91);
        _58 = (_55.0: &i32);
        _59 = (_55.1: &i32);
        _62 = (*_58);
        _63 = (*_59);
        _61 = Eq(move _62, move _63);
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<i32, i32>(move _64, _58, _59, move _66) -> unwind continue;
    }

    bb15: {
        _90 = const _;
        _89 = const _;
        _67 = (_90, _89);
        _68 = (_67.0: &i32);
        _69 = (_67.1: &i32);
        _72 = (*_68);
        _73 = (*_69);
        _71 = Eq(move _72, move _73);
        _70 = Not(move _71);
        switchInt(move _70) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _74 = core::panicking::AssertKind::Eq;
        _76 = Option::<Arguments<'_>>::None;
        _75 = core::panicking::assert_failed::<i32, i32>(move _74, _68, _69, move _76) -> unwind continue;
    }

    bb17: {
        _88 = const _;
        _87 = const _;
        _77 = (_88, _87);
        _78 = (_77.0: &i32);
        _79 = (_77.1: &i32);
        _82 = (*_78);
        _83 = (*_79);
        _81 = Eq(move _82, move _83);
        _80 = Not(move _81);
        switchInt(move _80) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _84 = core::panicking::AssertKind::Eq;
        _86 = Option::<Arguments<'_>>::None;
        _85 = core::panicking::assert_failed::<i32, i32>(move _84, _78, _79, move _86) -> unwind continue;
    }

    bb19: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 12_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = Add(const 3_i32, const 9_i32);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 42_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 42_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}
