// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _2: std::thread::JoinHandle<()>;
    let mut _3: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _4: std::thread::JoinHandle<()>;
    scope 1 {
    }

    bb0: {
        _2 = spawn::<[closure@ui/macros/macro-with-braces-in-expr-position.rs:11:29: 11:35], ()>(const ZeroSized: [closure@ui/macros/macro-with-braces-in-expr-position.rs:11:29: 11:35]) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = JoinHandle::<()>::join(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        drop(_1) -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = spawn::<[closure@ui/macros/macro-with-braces-in-expr-position.rs:11:29: 11:35], ()>(const ZeroSized: [closure@ui/macros/macro-with-braces-in-expr-position.rs:11:29: 11:35]) -> [return: bb4, unwind continue];
    }

    bb4: {
        _3 = JoinHandle::<()>::join(move _4) -> [return: bb5, unwind continue];
    }

    bb5: {
        drop(_3) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/macros/macro-with-braces-in-expr-position.rs:11:29: 11:35]) -> () {
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[&str; 1];

    bb0: {
        _5 = const _;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = _print(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in main::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "stmt\n"];
        _0 = &_1;
        return;
    }
}

fn main::{closure#1}(_1: [closure@ui/macros/macro-with-braces-in-expr-position.rs:11:29: 11:35]) -> () {
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[&str; 1];

    bb0: {
        _5 = const _;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = _print(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in main::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expr\n"];
        _0 = &_1;
        return;
    }
}
