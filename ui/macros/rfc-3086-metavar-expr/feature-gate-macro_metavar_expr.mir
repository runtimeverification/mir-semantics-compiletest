// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let _2: &i32;
    let _3: &i32;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: i32;
    let mut _7: i32;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&i32, &i32);
    let _12: &i32;
    let _13: &i32;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: i32;
    let mut _17: i32;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&((i32, i32, i32, i32, i32), (i32, i32, i32, i32)), &((i32, i32, i32, i32, i32), (i32, i32, i32, i32)));
    let _22: &((i32, i32, i32, i32, i32), (i32, i32, i32, i32));
    let _23: &((i32, i32, i32, i32, i32), (i32, i32, i32, i32));
    let mut _24: bool;
    let mut _25: bool;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&[(i32, i32); 2], &[(i32, i32); 2]);
    let _30: &[(i32, i32); 2];
    let _31: &[(i32, i32); 2];
    let mut _32: bool;
    let mut _33: bool;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&[(i32, i32, i32, i32, &str); 7], &[(i32, i32, i32, i32, &str); 7]);
    let _38: &[(i32, i32, i32, i32, &str); 7];
    let _39: &[(i32, i32, i32, i32, &str); 7];
    let mut _40: bool;
    let mut _41: bool;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&i32, &i32);
    let _46: &i32;
    let _47: &i32;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: i32;
    let mut _51: i32;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _55: (&i32, &i32);
    let _56: &i32;
    let _57: &i32;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: i32;
    let mut _61: i32;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: (&i32, &i32);
    let _66: &i32;
    let _67: &i32;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: i32;
    let mut _71: i32;
    let _73: !;
    let mut _74: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _75: (&i32, &i32);
    let _76: &i32;
    let _77: &i32;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: i32;
    let mut _81: i32;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: &i32;
    let mut _86: &i32;
    let mut _87: &i32;
    let mut _88: &i32;
    let mut _89: &i32;
    let mut _90: &i32;
    let mut _91: &i32;
    let mut _92: &i32;
    let mut _93: &[(i32, i32, i32, i32, &str); 7];
    let mut _94: &[(i32, i32, i32, i32, &str); 7];
    let mut _95: &[(i32, i32); 2];
    let mut _96: &[(i32, i32); 2];
    let mut _97: &((i32, i32, i32, i32, i32), (i32, i32, i32, i32));
    let mut _98: &((i32, i32, i32, i32, i32), (i32, i32, i32, i32));
    let mut _99: &i32;
    let mut _100: &i32;
    let mut _101: &i32;
    let mut _102: &i32;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _12;
        debug right_val => _13;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug left_val => _22;
        debug right_val => _23;
        let _26: core::panicking::AssertKind;
        scope 6 {
            debug kind => _26;
        }
    }
    scope 7 {
        debug left_val => _30;
        debug right_val => _31;
        let _34: core::panicking::AssertKind;
        scope 8 {
            debug kind => _34;
        }
    }
    scope 9 {
        debug left_val => _38;
        debug right_val => _39;
        let _42: core::panicking::AssertKind;
        scope 10 {
            debug kind => _42;
        }
    }
    scope 11 {
        debug left_val => _46;
        debug right_val => _47;
        let _52: core::panicking::AssertKind;
        scope 12 {
            debug kind => _52;
        }
    }
    scope 13 {
        debug left_val => _56;
        debug right_val => _57;
        let _62: core::panicking::AssertKind;
        scope 14 {
            debug kind => _62;
        }
    }
    scope 15 {
        debug left_val => _66;
        debug right_val => _67;
        let _72: core::panicking::AssertKind;
        scope 16 {
            debug kind => _72;
        }
    }
    scope 17 {
        debug left_val => _76;
        debug right_val => _77;
        let _82: core::panicking::AssertKind;
        scope 18 {
            debug kind => _82;
        }
    }

    bb0: {
        _102 = const _;
        _101 = const _;
        _1 = (_102, _101);
        _2 = (_1.0: &i32);
        _3 = (_1.1: &i32);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<i32, i32>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        _100 = const _;
        _99 = const _;
        _11 = (_100, _99);
        _12 = (_11.0: &i32);
        _13 = (_11.1: &i32);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<i32, i32>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb4: {
        _98 = const _;
        _97 = const _;
        _21 = (_98, _97);
        _22 = (_21.0: &((i32, i32, i32, i32, i32), (i32, i32, i32, i32)));
        _23 = (_21.1: &((i32, i32, i32, i32, i32), (i32, i32, i32, i32)));
        _25 = <((i32, i32, i32, i32, i32), (i32, i32, i32, i32)) as PartialEq>::eq(_22, _23) -> [return: bb5, unwind continue];
    }

    bb5: {
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<((i32, i32, i32, i32, i32), (i32, i32, i32, i32)), ((i32, i32, i32, i32, i32), (i32, i32, i32, i32))>(move _26, _22, _23, move _28) -> unwind continue;
    }

    bb7: {
        _96 = const _;
        _95 = const _;
        _29 = (_96, _95);
        _30 = (_29.0: &[(i32, i32); 2]);
        _31 = (_29.1: &[(i32, i32); 2]);
        _33 = <[(i32, i32); 2] as PartialEq>::eq(_30, _31) -> [return: bb8, unwind continue];
    }

    bb8: {
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<[(i32, i32); 2], [(i32, i32); 2]>(move _34, _30, _31, move _36) -> unwind continue;
    }

    bb10: {
        _94 = const _;
        _93 = const _;
        _37 = (_94, _93);
        _38 = (_37.0: &[(i32, i32, i32, i32, &str); 7]);
        _39 = (_37.1: &[(i32, i32, i32, i32, &str); 7]);
        _41 = <[(i32, i32, i32, i32, &str); 7] as PartialEq>::eq(_38, _39) -> [return: bb11, unwind continue];
    }

    bb11: {
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<[(i32, i32, i32, i32, &str); 7], [(i32, i32, i32, i32, &str); 7]>(move _42, _38, _39, move _44) -> unwind continue;
    }

    bb13: {
        _92 = const _;
        _91 = const _;
        _45 = (_92, _91);
        _46 = (_45.0: &i32);
        _47 = (_45.1: &i32);
        _50 = (*_46);
        _51 = (*_47);
        _49 = Eq(move _50, move _51);
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<i32, i32>(move _52, _46, _47, move _54) -> unwind continue;
    }

    bb15: {
        _90 = const _;
        _89 = const _;
        _55 = (_90, _89);
        _56 = (_55.0: &i32);
        _57 = (_55.1: &i32);
        _60 = (*_56);
        _61 = (*_57);
        _59 = Eq(move _60, move _61);
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<i32, i32>(move _62, _56, _57, move _64) -> unwind continue;
    }

    bb17: {
        _88 = const _;
        _87 = const _;
        _65 = (_88, _87);
        _66 = (_65.0: &i32);
        _67 = (_65.1: &i32);
        _70 = (*_66);
        _71 = (*_67);
        _69 = Eq(move _70, move _71);
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _72 = core::panicking::AssertKind::Eq;
        _74 = Option::<Arguments<'_>>::None;
        _73 = core::panicking::assert_failed::<i32, i32>(move _72, _66, _67, move _74) -> unwind continue;
    }

    bb19: {
        _86 = const _;
        _85 = const _;
        _75 = (_86, _85);
        _76 = (_75.0: &i32);
        _77 = (_75.1: &i32);
        _80 = (*_76);
        _81 = (*_77);
        _79 = Eq(move _80, move _81);
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<i32, i32>(move _82, _76, _77, move _84) -> unwind continue;
    }

    bb21: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 7_i32;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = Add(const 5_i32, const 2_i32);
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 4_i32;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = Add(const 1_i32, const 3_i32);
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &[(i32, i32, i32, i32, &str); 7] = {
    let mut _0: &[(i32, i32, i32, i32, &str); 7];
    let mut _1: [(i32, i32, i32, i32, &str); 7];
    let mut _2: (i32, i32, i32, i32, &str);
    let mut _3: (i32, i32, i32, i32, &str);
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: (i32, i32, i32, i32, &str);
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: (i32, i32, i32, i32, &str);
    let mut _10: &str;
    let mut _11: &str;
    let mut _12: (i32, i32, i32, i32, &str);
    let mut _13: &str;
    let mut _14: &str;
    let mut _15: (i32, i32, i32, i32, &str);
    let mut _16: &str;
    let mut _17: &str;
    let mut _18: (i32, i32, i32, i32, &str);
    let mut _19: &str;
    let mut _20: &str;

    bb0: {
        _2 = (const 0_i32, const 2_i32, const 0_i32, const 3_i32, const "foo");
        _5 = const "bar";
        _4 = &(*_5);
        _3 = (const 0_i32, const 2_i32, const 1_i32, const 3_i32, move _4);
        _8 = const "baz";
        _7 = &(*_8);
        _6 = (const 0_i32, const 2_i32, const 2_i32, const 3_i32, move _7);
        _11 = const "qux";
        _10 = &(*_11);
        _9 = (const 1_i32, const 2_i32, const 0_i32, const 4_i32, move _10);
        _14 = const "quux";
        _13 = &(*_14);
        _12 = (const 1_i32, const 2_i32, const 1_i32, const 4_i32, move _13);
        _17 = const "quuz";
        _16 = &(*_17);
        _15 = (const 1_i32, const 2_i32, const 2_i32, const 4_i32, move _16);
        _20 = const "xyzzy";
        _19 = &(*_20);
        _18 = (const 1_i32, const 2_i32, const 3_i32, const 4_i32, move _19);
        _1 = [move _2, move _3, move _6, move _9, move _12, move _15, move _18];
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &[(i32, i32, i32, i32, &str); 7] = {
    let mut _0: &[(i32, i32, i32, i32, &str); 7];
    let mut _1: [(i32, i32, i32, i32, &str); 7];
    let mut _2: (i32, i32, i32, i32, &str);
    let mut _3: (i32, i32, i32, i32, &str);
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: (i32, i32, i32, i32, &str);
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: (i32, i32, i32, i32, &str);
    let mut _10: &str;
    let mut _11: &str;
    let mut _12: (i32, i32, i32, i32, &str);
    let mut _13: &str;
    let mut _14: &str;
    let mut _15: (i32, i32, i32, i32, &str);
    let mut _16: &str;
    let mut _17: &str;
    let mut _18: (i32, i32, i32, i32, &str);
    let mut _19: &str;
    let mut _20: &str;

    bb0: {
        _2 = (const 0_i32, const 2_i32, const 0_i32, const 3_i32, const "foo");
        _5 = const "bar";
        _4 = &(*_5);
        _3 = (const 0_i32, const 2_i32, const 1_i32, const 3_i32, move _4);
        _8 = const "baz";
        _7 = &(*_8);
        _6 = (const 0_i32, const 2_i32, const 2_i32, const 3_i32, move _7);
        _11 = const "qux";
        _10 = &(*_11);
        _9 = (const 1_i32, const 2_i32, const 0_i32, const 4_i32, move _10);
        _14 = const "quux";
        _13 = &(*_14);
        _12 = (const 1_i32, const 2_i32, const 1_i32, const 4_i32, move _13);
        _17 = const "quuz";
        _16 = &(*_17);
        _15 = (const 1_i32, const 2_i32, const 2_i32, const 4_i32, move _16);
        _20 = const "xyzzy";
        _19 = &(*_20);
        _18 = (const 1_i32, const 2_i32, const 3_i32, const 4_i32, move _19);
        _1 = [move _2, move _3, move _6, move _9, move _12, move _15, move _18];
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &[(i32, i32); 2] = {
    let mut _0: &[(i32, i32); 2];
    let mut _1: [(i32, i32); 2];
    let mut _2: (i32, i32);
    let mut _3: (i32, i32);

    bb0: {
        _2 = (const 0_i32, const 2_i32);
        _3 = (const 1_i32, const 2_i32);
        _1 = [move _2, move _3];
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &[(i32, i32); 2] = {
    let mut _0: &[(i32, i32); 2];
    let mut _1: [(i32, i32); 2];
    let mut _2: (i32, i32);
    let mut _3: (i32, i32);

    bb0: {
        _2 = (const 0_i32, const 2_i32);
        _3 = (const 1_i32, const 2_i32);
        _1 = [move _2, move _3];
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &((i32, i32, i32, i32, i32), (i32, i32, i32, i32)) = {
    let mut _0: &((i32, i32, i32, i32, i32), (i32, i32, i32, i32));
    let mut _1: ((i32, i32, i32, i32, i32), (i32, i32, i32, i32));
    let mut _2: (i32, i32, i32, i32, i32);
    let mut _3: (i32, i32, i32, i32);

    bb0: {
        _2 = (const 26_i32, const 2_i32, const 5_i32, const 9_i32, const 26_i32);
        _3 = (const 9_i32, const 2_i32, const 5_i32, const 9_i32);
        _1 = (move _2, move _3);
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &((i32, i32, i32, i32, i32), (i32, i32, i32, i32)) = {
    let mut _0: &((i32, i32, i32, i32, i32), (i32, i32, i32, i32));
    let mut _1: ((i32, i32, i32, i32, i32), (i32, i32, i32, i32));
    let mut _2: (i32, i32, i32, i32, i32);
    let mut _3: (i32, i32, i32, i32);

    bb0: {
        _2 = (const 26_i32, const 2_i32, const 5_i32, const 9_i32, const 26_i32);
        _3 = (const 9_i32, const 2_i32, const 5_i32, const 9_i32);
        _1 = (move _2, move _3);
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 6_i32;
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 6_i32;
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}
