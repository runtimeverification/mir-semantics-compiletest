// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/macros/rfc-3086-metavar-expr/macro-expansion.rs:5:10: 5:15>::fmt(_1: &Example<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&[(u32, u32)];
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&[u32];
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &&std::vec::Vec<Example<'_>>;
    let _13: &std::vec::Vec<Example<'_>>;

    bb0: {
        _3 = const "Example";
        _4 = const "_indexes";
        _6 = &((*_1).0: &[(u32, u32)]);
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = const "_counts";
        _9 = &((*_1).1: &[u32]);
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _10 = const "_nested";
        _13 = &((*_1).2: std::vec::Vec<Example<'_>>);
        _12 = &_13;
        _11 = _12 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

static EXPECTED: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "Example { _indexes: [], _counts: [2, 4, 13], _nested: [Example { _indexes: [(0, 2)], _counts: [3, 10], _nested: [Example { _indexes: [(0, 2), (0, 3)], _counts: [4], _nested: [Example { _indexes: [(0, 2), (0, 3), (0, 4)], _counts: [], _nested: [] }, Example { _indexes: [(0, 2), (0, 3), (1, 4)], _counts: [], _nested: [] }, Example { _indexes: [(0, 2), (0, 3), (2, 4)], _counts: [], _nested: [] }, Example { _indexes: [(0, 2), (0, 3), (3, 4)], _counts: [], _nested: [] }] }, Example { _indexes: [(0, 2), (1, 3)], _counts: [4], _nested: [Example { _indexes: [(0, 2), (1, 3), (0, 4)], _counts: [], _nested: [] }, Example { _indexes: [(0, 2), (1, 3), (1, 4)], _counts: [], _nested: [] }, Example { _indexes: [(0, 2), (1, 3), (2, 4)], _counts: [], _nested: [] }, Example { _indexes: [(0, 2), (1, 3), (3, 4)], _counts: [], _nested: [] }] }, Example { _indexes: [(0, 2), (2, 3)], _counts: [2], _nested: [Example { _indexes: [(0, 2), (2, 3), (0, 2)], _counts: [], _nested: [] }, Example { _indexes: [(0, 2), (2, 3), (1, 2)], _counts: [], _nested: [] }] }] }, Example { _indexes: [(1, 2)], _counts: [1, 3], _nested: [Example { _indexes: [(1, 2), (0, 1)], _counts: [3], _nested: [Example { _indexes: [(1, 2), (0, 1), (0, 3)], _counts: [], _nested: [] }, Example { _indexes: [(1, 2), (0, 1), (1, 3)], _counts: [], _nested: [] }, Example { _indexes: [(1, 2), (0, 1), (2, 3)], _counts: [], _nested: [] }] }] }] }";
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Example<'_>;
    let mut _2: &[(u32, u32)];
    let mut _3: &[u32];
    let mut _4: std::vec::Vec<Example<'_>>;
    let mut _5: std::boxed::Box<[Example<'_>]>;
    let mut _6: std::boxed::Box<[Example<'_>; 2]>;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: *mut u8;
    let mut _10: std::boxed::Box<[Example<'_>; 2]>;
    let mut _11: Example<'_>;
    let mut _12: &[(u32, u32)];
    let mut _13: &[u32];
    let mut _14: std::vec::Vec<Example<'_>>;
    let mut _15: std::boxed::Box<[Example<'_>]>;
    let mut _16: std::boxed::Box<[Example<'_>; 3]>;
    let mut _17: usize;
    let mut _18: usize;
    let mut _19: *mut u8;
    let mut _20: std::boxed::Box<[Example<'_>; 3]>;
    let mut _21: Example<'_>;
    let mut _22: &[(u32, u32)];
    let mut _23: &[u32];
    let mut _24: std::vec::Vec<Example<'_>>;
    let mut _25: std::boxed::Box<[Example<'_>]>;
    let mut _26: std::boxed::Box<[Example<'_>; 4]>;
    let mut _27: usize;
    let mut _28: usize;
    let mut _29: *mut u8;
    let mut _30: std::boxed::Box<[Example<'_>; 4]>;
    let mut _31: Example<'_>;
    let mut _32: &[(u32, u32)];
    let mut _33: &[u32];
    let mut _34: std::vec::Vec<Example<'_>>;
    let mut _35: Example<'_>;
    let mut _36: &[(u32, u32)];
    let mut _37: &[u32];
    let mut _38: std::vec::Vec<Example<'_>>;
    let mut _39: Example<'_>;
    let mut _40: &[(u32, u32)];
    let mut _41: &[u32];
    let mut _42: std::vec::Vec<Example<'_>>;
    let mut _43: Example<'_>;
    let mut _44: &[(u32, u32)];
    let mut _45: &[u32];
    let mut _46: std::vec::Vec<Example<'_>>;
    let mut _47: Example<'_>;
    let mut _48: &[(u32, u32)];
    let mut _49: &[u32];
    let mut _50: std::vec::Vec<Example<'_>>;
    let mut _51: std::boxed::Box<[Example<'_>]>;
    let mut _52: std::boxed::Box<[Example<'_>; 4]>;
    let mut _53: usize;
    let mut _54: usize;
    let mut _55: *mut u8;
    let mut _56: std::boxed::Box<[Example<'_>; 4]>;
    let mut _57: Example<'_>;
    let mut _58: &[(u32, u32)];
    let mut _59: &[u32];
    let mut _60: std::vec::Vec<Example<'_>>;
    let mut _61: Example<'_>;
    let mut _62: &[(u32, u32)];
    let mut _63: &[u32];
    let mut _64: std::vec::Vec<Example<'_>>;
    let mut _65: Example<'_>;
    let mut _66: &[(u32, u32)];
    let mut _67: &[u32];
    let mut _68: std::vec::Vec<Example<'_>>;
    let mut _69: Example<'_>;
    let mut _70: &[(u32, u32)];
    let mut _71: &[u32];
    let mut _72: std::vec::Vec<Example<'_>>;
    let mut _73: Example<'_>;
    let mut _74: &[(u32, u32)];
    let mut _75: &[u32];
    let mut _76: std::vec::Vec<Example<'_>>;
    let mut _77: std::boxed::Box<[Example<'_>]>;
    let mut _78: std::boxed::Box<[Example<'_>; 2]>;
    let mut _79: usize;
    let mut _80: usize;
    let mut _81: *mut u8;
    let mut _82: std::boxed::Box<[Example<'_>; 2]>;
    let mut _83: Example<'_>;
    let mut _84: &[(u32, u32)];
    let mut _85: &[u32];
    let mut _86: std::vec::Vec<Example<'_>>;
    let mut _87: Example<'_>;
    let mut _88: &[(u32, u32)];
    let mut _89: &[u32];
    let mut _90: std::vec::Vec<Example<'_>>;
    let mut _91: Example<'_>;
    let mut _92: &[(u32, u32)];
    let mut _93: &[u32];
    let mut _94: std::vec::Vec<Example<'_>>;
    let mut _95: std::boxed::Box<[Example<'_>]>;
    let mut _96: std::boxed::Box<[Example<'_>; 1]>;
    let mut _97: usize;
    let mut _98: usize;
    let mut _99: *mut u8;
    let mut _100: std::boxed::Box<[Example<'_>; 1]>;
    let mut _101: Example<'_>;
    let mut _102: &[(u32, u32)];
    let mut _103: &[u32];
    let mut _104: std::vec::Vec<Example<'_>>;
    let mut _105: std::boxed::Box<[Example<'_>]>;
    let mut _106: std::boxed::Box<[Example<'_>; 3]>;
    let mut _107: usize;
    let mut _108: usize;
    let mut _109: *mut u8;
    let mut _110: std::boxed::Box<[Example<'_>; 3]>;
    let mut _111: Example<'_>;
    let mut _112: &[(u32, u32)];
    let mut _113: &[u32];
    let mut _114: std::vec::Vec<Example<'_>>;
    let mut _115: Example<'_>;
    let mut _116: &[(u32, u32)];
    let mut _117: &[u32];
    let mut _118: std::vec::Vec<Example<'_>>;
    let mut _119: Example<'_>;
    let mut _120: &[(u32, u32)];
    let mut _121: &[u32];
    let mut _122: std::vec::Vec<Example<'_>>;
    let mut _125: std::fmt::Arguments<'_>;
    let mut _126: &[&str];
    let mut _127: &[core::fmt::rt::Argument<'_>];
    let _128: &[core::fmt::rt::Argument<'_>; 1];
    let _129: [core::fmt::rt::Argument<'_>; 1];
    let mut _130: core::fmt::rt::Argument<'_>;
    let _131: &Example<'_>;
    let mut _132: (&std::string::String, &&str);
    let mut _133: &std::string::String;
    let _134: &&str;
    let mut _137: bool;
    let mut _138: bool;
    let _140: !;
    let mut _141: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _143: &[u32; 0];
    let mut _144: &[(u32, u32); 3];
    let mut _145: &[u32; 0];
    let mut _146: &[(u32, u32); 3];
    let mut _147: &[u32; 0];
    let mut _148: &[(u32, u32); 3];
    let mut _149: &[u32; 1];
    let mut _150: &[(u32, u32); 2];
    let mut _151: &[u32; 2];
    let mut _152: &[(u32, u32); 1];
    let mut _153: &[u32; 0];
    let mut _154: &[(u32, u32); 3];
    let mut _155: &[u32; 0];
    let mut _156: &[(u32, u32); 3];
    let mut _157: &[u32; 1];
    let mut _158: &[(u32, u32); 2];
    let mut _159: &[u32; 0];
    let mut _160: &[(u32, u32); 3];
    let mut _161: &[u32; 0];
    let mut _162: &[(u32, u32); 3];
    let mut _163: &[u32; 0];
    let mut _164: &[(u32, u32); 3];
    let mut _165: &[u32; 0];
    let mut _166: &[(u32, u32); 3];
    let mut _167: &[u32; 1];
    let mut _168: &[(u32, u32); 2];
    let mut _169: &[u32; 0];
    let mut _170: &[(u32, u32); 3];
    let mut _171: &[u32; 0];
    let mut _172: &[(u32, u32); 3];
    let mut _173: &[u32; 0];
    let mut _174: &[(u32, u32); 3];
    let mut _175: &[u32; 0];
    let mut _176: &[(u32, u32); 3];
    let mut _177: &[u32; 1];
    let mut _178: &[(u32, u32); 2];
    let mut _179: &[u32; 2];
    let mut _180: &[(u32, u32); 1];
    let mut _181: &[u32; 3];
    let mut _182: &[(u32, u32); 0];
    let mut _183: &mut std::boxed::Box<[Example<'_>; 3]>;
    let mut _184: ();
    let mut _185: &mut std::boxed::Box<[Example<'_>; 1]>;
    let mut _186: ();
    let mut _187: &mut std::boxed::Box<[Example<'_>; 2]>;
    let mut _188: ();
    let mut _189: &mut std::boxed::Box<[Example<'_>; 4]>;
    let mut _190: ();
    let mut _191: &mut std::boxed::Box<[Example<'_>; 4]>;
    let mut _192: ();
    let mut _193: &mut std::boxed::Box<[Example<'_>; 3]>;
    let mut _194: ();
    let mut _195: &mut std::boxed::Box<[Example<'_>; 2]>;
    let mut _196: ();
    let mut _197: *const [Example<'_>; 4];
    let mut _198: *const [Example<'_>; 4];
    let mut _199: *const [Example<'_>; 2];
    let mut _200: *const [Example<'_>; 3];
    let mut _201: *const [Example<'_>; 3];
    let mut _202: *const [Example<'_>; 1];
    let mut _203: *const [Example<'_>; 2];
    let mut _204: *const ();
    let mut _205: usize;
    let mut _206: usize;
    let mut _207: usize;
    let mut _208: usize;
    let mut _209: bool;
    let mut _210: *const ();
    let mut _211: usize;
    let mut _212: usize;
    let mut _213: usize;
    let mut _214: usize;
    let mut _215: bool;
    let mut _216: *const ();
    let mut _217: usize;
    let mut _218: usize;
    let mut _219: usize;
    let mut _220: usize;
    let mut _221: bool;
    let mut _222: *const ();
    let mut _223: usize;
    let mut _224: usize;
    let mut _225: usize;
    let mut _226: usize;
    let mut _227: bool;
    let mut _228: *const ();
    let mut _229: usize;
    let mut _230: usize;
    let mut _231: usize;
    let mut _232: usize;
    let mut _233: bool;
    let mut _234: *const ();
    let mut _235: usize;
    let mut _236: usize;
    let mut _237: usize;
    let mut _238: usize;
    let mut _239: bool;
    let mut _240: *const ();
    let mut _241: usize;
    let mut _242: usize;
    let mut _243: usize;
    let mut _244: usize;
    let mut _245: bool;
    scope 1 {
        debug e => _1;
        let _123: std::string::String;
        let _124: std::string::String;
        let mut _142: &[&str; 1];
        scope 9 {
            debug debug => _123;
            let _135: &std::string::String;
            let _136: &&str;
            scope 11 {
                debug left_val => _135;
                debug right_val => _136;
                let _139: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _139;
                }
            }
        }
        scope 10 {
            debug res => _124;
        }
    }
    scope 2 {
    }
    scope 3 {
    }
    scope 4 {
    }
    scope 5 {
    }
    scope 6 {
    }
    scope 7 {
    }
    scope 8 {
    }

    bb0: {
        _182 = const _;
        _2 = _182 as &[(u32, u32)] (Pointer(Unsize));
        _181 = const _;
        _3 = _181 as &[u32] (Pointer(Unsize));
        _7 = SizeOf([Example<'_>; 2]);
        _8 = AlignOf([Example<'_>; 2]);
        _9 = alloc::alloc::exchange_malloc(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = ShallowInitBox(move _9, [Example<'_>; 2]);
        _180 = const _;
        _12 = _180 as &[(u32, u32)] (Pointer(Unsize));
        _179 = const _;
        _13 = _179 as &[u32] (Pointer(Unsize));
        _17 = SizeOf([Example<'_>; 3]);
        _18 = AlignOf([Example<'_>; 3]);
        _19 = alloc::alloc::exchange_malloc(move _17, move _18) -> [return: bb2, unwind: bb57];
    }

    bb2: {
        _20 = ShallowInitBox(move _19, [Example<'_>; 3]);
        _178 = const _;
        _22 = _178 as &[(u32, u32)] (Pointer(Unsize));
        _177 = const _;
        _23 = _177 as &[u32] (Pointer(Unsize));
        _27 = SizeOf([Example<'_>; 4]);
        _28 = AlignOf([Example<'_>; 4]);
        _29 = alloc::alloc::exchange_malloc(move _27, move _28) -> [return: bb3, unwind: bb56];
    }

    bb3: {
        _30 = ShallowInitBox(move _29, [Example<'_>; 4]);
        _176 = const _;
        _32 = _176 as &[(u32, u32)] (Pointer(Unsize));
        _175 = const _;
        _33 = _175 as &[u32] (Pointer(Unsize));
        _34 = Vec::<Example<'_>>::new() -> [return: bb4, unwind: bb55];
    }

    bb4: {
        _31 = Example::<'_> { _indexes: move _32, _counts: move _33, _nested: move _34 };
        _174 = const _;
        _36 = _174 as &[(u32, u32)] (Pointer(Unsize));
        _173 = const _;
        _37 = _173 as &[u32] (Pointer(Unsize));
        _38 = Vec::<Example<'_>>::new() -> [return: bb5, unwind: bb49];
    }

    bb5: {
        _35 = Example::<'_> { _indexes: move _36, _counts: move _37, _nested: move _38 };
        _172 = const _;
        _40 = _172 as &[(u32, u32)] (Pointer(Unsize));
        _171 = const _;
        _41 = _171 as &[u32] (Pointer(Unsize));
        _42 = Vec::<Example<'_>>::new() -> [return: bb6, unwind: bb48];
    }

    bb6: {
        _39 = Example::<'_> { _indexes: move _40, _counts: move _41, _nested: move _42 };
        _170 = const _;
        _44 = _170 as &[(u32, u32)] (Pointer(Unsize));
        _169 = const _;
        _45 = _169 as &[u32] (Pointer(Unsize));
        _46 = Vec::<Example<'_>>::new() -> [return: bb7, unwind: bb47];
    }

    bb7: {
        _43 = Example::<'_> { _indexes: move _44, _counts: move _45, _nested: move _46 };
        _197 = (((_30.0: std::ptr::Unique<[Example<'_>; 4]>).0: std::ptr::NonNull<[Example<'_>; 4]>).0: *const [Example<'_>; 4]);
        _240 = _197 as *const () (PtrToPtr);
        _241 = _240 as usize (Transmute);
        _242 = AlignOf(Example<'_>);
        _243 = Sub(_242, const 1_usize);
        _244 = BitAnd(_241, _243);
        _245 = Eq(_244, const 0_usize);
        assert(_245, "misaligned pointer dereference: address must be a multiple of {} but is {}", _242, _241) -> [success: bb64, unwind unreachable];
    }

    bb8: {
        _21 = Example::<'_> { _indexes: move _22, _counts: move _23, _nested: move _24 };
        _168 = const _;
        _48 = _168 as &[(u32, u32)] (Pointer(Unsize));
        _167 = const _;
        _49 = _167 as &[u32] (Pointer(Unsize));
        _53 = SizeOf([Example<'_>; 4]);
        _54 = AlignOf([Example<'_>; 4]);
        _55 = alloc::alloc::exchange_malloc(move _53, move _54) -> [return: bb9, unwind: bb46];
    }

    bb9: {
        _56 = ShallowInitBox(move _55, [Example<'_>; 4]);
        _166 = const _;
        _58 = _166 as &[(u32, u32)] (Pointer(Unsize));
        _165 = const _;
        _59 = _165 as &[u32] (Pointer(Unsize));
        _60 = Vec::<Example<'_>>::new() -> [return: bb10, unwind: bb54];
    }

    bb10: {
        _57 = Example::<'_> { _indexes: move _58, _counts: move _59, _nested: move _60 };
        _164 = const _;
        _62 = _164 as &[(u32, u32)] (Pointer(Unsize));
        _163 = const _;
        _63 = _163 as &[u32] (Pointer(Unsize));
        _64 = Vec::<Example<'_>>::new() -> [return: bb11, unwind: bb45];
    }

    bb11: {
        _61 = Example::<'_> { _indexes: move _62, _counts: move _63, _nested: move _64 };
        _162 = const _;
        _66 = _162 as &[(u32, u32)] (Pointer(Unsize));
        _161 = const _;
        _67 = _161 as &[u32] (Pointer(Unsize));
        _68 = Vec::<Example<'_>>::new() -> [return: bb12, unwind: bb44];
    }

    bb12: {
        _65 = Example::<'_> { _indexes: move _66, _counts: move _67, _nested: move _68 };
        _160 = const _;
        _70 = _160 as &[(u32, u32)] (Pointer(Unsize));
        _159 = const _;
        _71 = _159 as &[u32] (Pointer(Unsize));
        _72 = Vec::<Example<'_>>::new() -> [return: bb13, unwind: bb43];
    }

    bb13: {
        _69 = Example::<'_> { _indexes: move _70, _counts: move _71, _nested: move _72 };
        _198 = (((_56.0: std::ptr::Unique<[Example<'_>; 4]>).0: std::ptr::NonNull<[Example<'_>; 4]>).0: *const [Example<'_>; 4]);
        _234 = _198 as *const () (PtrToPtr);
        _235 = _234 as usize (Transmute);
        _236 = AlignOf(Example<'_>);
        _237 = Sub(_236, const 1_usize);
        _238 = BitAnd(_235, _237);
        _239 = Eq(_238, const 0_usize);
        assert(_239, "misaligned pointer dereference: address must be a multiple of {} but is {}", _236, _235) -> [success: bb63, unwind unreachable];
    }

    bb14: {
        _47 = Example::<'_> { _indexes: move _48, _counts: move _49, _nested: move _50 };
        _158 = const _;
        _74 = _158 as &[(u32, u32)] (Pointer(Unsize));
        _157 = const _;
        _75 = _157 as &[u32] (Pointer(Unsize));
        _79 = SizeOf([Example<'_>; 2]);
        _80 = AlignOf([Example<'_>; 2]);
        _81 = alloc::alloc::exchange_malloc(move _79, move _80) -> [return: bb15, unwind: bb42];
    }

    bb15: {
        _82 = ShallowInitBox(move _81, [Example<'_>; 2]);
        _156 = const _;
        _84 = _156 as &[(u32, u32)] (Pointer(Unsize));
        _155 = const _;
        _85 = _155 as &[u32] (Pointer(Unsize));
        _86 = Vec::<Example<'_>>::new() -> [return: bb16, unwind: bb53];
    }

    bb16: {
        _83 = Example::<'_> { _indexes: move _84, _counts: move _85, _nested: move _86 };
        _154 = const _;
        _88 = _154 as &[(u32, u32)] (Pointer(Unsize));
        _153 = const _;
        _89 = _153 as &[u32] (Pointer(Unsize));
        _90 = Vec::<Example<'_>>::new() -> [return: bb17, unwind: bb41];
    }

    bb17: {
        _87 = Example::<'_> { _indexes: move _88, _counts: move _89, _nested: move _90 };
        _199 = (((_82.0: std::ptr::Unique<[Example<'_>; 2]>).0: std::ptr::NonNull<[Example<'_>; 2]>).0: *const [Example<'_>; 2]);
        _228 = _199 as *const () (PtrToPtr);
        _229 = _228 as usize (Transmute);
        _230 = AlignOf(Example<'_>);
        _231 = Sub(_230, const 1_usize);
        _232 = BitAnd(_229, _231);
        _233 = Eq(_232, const 0_usize);
        assert(_233, "misaligned pointer dereference: address must be a multiple of {} but is {}", _230, _229) -> [success: bb62, unwind unreachable];
    }

    bb18: {
        _73 = Example::<'_> { _indexes: move _74, _counts: move _75, _nested: move _76 };
        _200 = (((_20.0: std::ptr::Unique<[Example<'_>; 3]>).0: std::ptr::NonNull<[Example<'_>; 3]>).0: *const [Example<'_>; 3]);
        _222 = _200 as *const () (PtrToPtr);
        _223 = _222 as usize (Transmute);
        _224 = AlignOf(Example<'_>);
        _225 = Sub(_224, const 1_usize);
        _226 = BitAnd(_223, _225);
        _227 = Eq(_226, const 0_usize);
        assert(_227, "misaligned pointer dereference: address must be a multiple of {} but is {}", _224, _223) -> [success: bb61, unwind unreachable];
    }

    bb19: {
        _11 = Example::<'_> { _indexes: move _12, _counts: move _13, _nested: move _14 };
        _152 = const _;
        _92 = _152 as &[(u32, u32)] (Pointer(Unsize));
        _151 = const _;
        _93 = _151 as &[u32] (Pointer(Unsize));
        _97 = SizeOf([Example<'_>; 1]);
        _98 = AlignOf([Example<'_>; 1]);
        _99 = alloc::alloc::exchange_malloc(move _97, move _98) -> [return: bb20, unwind: bb40];
    }

    bb20: {
        _100 = ShallowInitBox(move _99, [Example<'_>; 1]);
        _150 = const _;
        _102 = _150 as &[(u32, u32)] (Pointer(Unsize));
        _149 = const _;
        _103 = _149 as &[u32] (Pointer(Unsize));
        _107 = SizeOf([Example<'_>; 3]);
        _108 = AlignOf([Example<'_>; 3]);
        _109 = alloc::alloc::exchange_malloc(move _107, move _108) -> [return: bb21, unwind: bb52];
    }

    bb21: {
        _110 = ShallowInitBox(move _109, [Example<'_>; 3]);
        _148 = const _;
        _112 = _148 as &[(u32, u32)] (Pointer(Unsize));
        _147 = const _;
        _113 = _147 as &[u32] (Pointer(Unsize));
        _114 = Vec::<Example<'_>>::new() -> [return: bb22, unwind: bb51];
    }

    bb22: {
        _111 = Example::<'_> { _indexes: move _112, _counts: move _113, _nested: move _114 };
        _146 = const _;
        _116 = _146 as &[(u32, u32)] (Pointer(Unsize));
        _145 = const _;
        _117 = _145 as &[u32] (Pointer(Unsize));
        _118 = Vec::<Example<'_>>::new() -> [return: bb23, unwind: bb39];
    }

    bb23: {
        _115 = Example::<'_> { _indexes: move _116, _counts: move _117, _nested: move _118 };
        _144 = const _;
        _120 = _144 as &[(u32, u32)] (Pointer(Unsize));
        _143 = const _;
        _121 = _143 as &[u32] (Pointer(Unsize));
        _122 = Vec::<Example<'_>>::new() -> [return: bb24, unwind: bb38];
    }

    bb24: {
        _119 = Example::<'_> { _indexes: move _120, _counts: move _121, _nested: move _122 };
        _201 = (((_110.0: std::ptr::Unique<[Example<'_>; 3]>).0: std::ptr::NonNull<[Example<'_>; 3]>).0: *const [Example<'_>; 3]);
        _216 = _201 as *const () (PtrToPtr);
        _217 = _216 as usize (Transmute);
        _218 = AlignOf(Example<'_>);
        _219 = Sub(_218, const 1_usize);
        _220 = BitAnd(_217, _219);
        _221 = Eq(_220, const 0_usize);
        assert(_221, "misaligned pointer dereference: address must be a multiple of {} but is {}", _218, _217) -> [success: bb60, unwind unreachable];
    }

    bb25: {
        _101 = Example::<'_> { _indexes: move _102, _counts: move _103, _nested: move _104 };
        _202 = (((_100.0: std::ptr::Unique<[Example<'_>; 1]>).0: std::ptr::NonNull<[Example<'_>; 1]>).0: *const [Example<'_>; 1]);
        _210 = _202 as *const () (PtrToPtr);
        _211 = _210 as usize (Transmute);
        _212 = AlignOf(Example<'_>);
        _213 = Sub(_212, const 1_usize);
        _214 = BitAnd(_211, _213);
        _215 = Eq(_214, const 0_usize);
        assert(_215, "misaligned pointer dereference: address must be a multiple of {} but is {}", _212, _211) -> [success: bb59, unwind unreachable];
    }

    bb26: {
        _91 = Example::<'_> { _indexes: move _92, _counts: move _93, _nested: move _94 };
        _203 = (((_10.0: std::ptr::Unique<[Example<'_>; 2]>).0: std::ptr::NonNull<[Example<'_>; 2]>).0: *const [Example<'_>; 2]);
        _204 = _203 as *const () (PtrToPtr);
        _205 = _204 as usize (Transmute);
        _206 = AlignOf(Example<'_>);
        _207 = Sub(_206, const 1_usize);
        _208 = BitAnd(_205, _207);
        _209 = Eq(_208, const 0_usize);
        assert(_209, "misaligned pointer dereference: address must be a multiple of {} but is {}", _206, _205) -> [success: bb58, unwind unreachable];
    }

    bb27: {
        _1 = Example::<'_> { _indexes: move _2, _counts: move _3, _nested: move _4 };
        _142 = const _;
        _126 = _142 as &[&str] (Pointer(Unsize));
        _131 = &_1;
        _130 = core::fmt::rt::Argument::<'_>::new_debug::<Example<'_>>(_131) -> [return: bb28, unwind: bb37];
    }

    bb28: {
        _129 = [move _130];
        _128 = &_129;
        _127 = _128 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _125 = Arguments::<'_>::new_v1(move _126, move _127) -> [return: bb29, unwind: bb37];
    }

    bb29: {
        _124 = format(move _125) -> [return: bb30, unwind: bb37];
    }

    bb30: {
        _123 = move _124;
        _133 = &_123;
        _134 = const {alloc1: &&str};
        _132 = (move _133, _134);
        _135 = (_132.0: &std::string::String);
        _136 = (_132.1: &&str);
        _138 = <String as PartialEq<&str>>::eq(_135, _136) -> [return: bb31, unwind: bb36];
    }

    bb31: {
        _137 = Not(move _138);
        switchInt(move _137) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _139 = core::panicking::AssertKind::Eq;
        _141 = Option::<Arguments<'_>>::None;
        _140 = core::panicking::assert_failed::<String, &str>(move _139, _135, _136, move _141) -> bb36;
    }

    bb33: {
        drop(_123) -> [return: bb34, unwind: bb37];
    }

    bb34: {
        drop(_1) -> [return: bb35, unwind continue];
    }

    bb35: {
        return;
    }

    bb36 (cleanup): {
        drop(_123) -> [return: bb37, unwind terminate];
    }

    bb37 (cleanup): {
        drop(_1) -> [return: bb50, unwind terminate];
    }

    bb38 (cleanup): {
        drop(_115) -> [return: bb39, unwind terminate];
    }

    bb39 (cleanup): {
        drop(_111) -> [return: bb51, unwind terminate];
    }

    bb40 (cleanup): {
        drop(_11) -> [return: bb57, unwind terminate];
    }

    bb41 (cleanup): {
        drop(_83) -> [return: bb53, unwind terminate];
    }

    bb42 (cleanup): {
        drop(_47) -> [return: bb46, unwind terminate];
    }

    bb43 (cleanup): {
        drop(_65) -> [return: bb44, unwind terminate];
    }

    bb44 (cleanup): {
        drop(_61) -> [return: bb45, unwind terminate];
    }

    bb45 (cleanup): {
        drop(_57) -> [return: bb54, unwind terminate];
    }

    bb46 (cleanup): {
        drop(_21) -> [return: bb56, unwind terminate];
    }

    bb47 (cleanup): {
        drop(_39) -> [return: bb48, unwind terminate];
    }

    bb48 (cleanup): {
        drop(_35) -> [return: bb49, unwind terminate];
    }

    bb49 (cleanup): {
        drop(_31) -> [return: bb55, unwind terminate];
    }

    bb50 (cleanup): {
        resume;
    }

    bb51 (cleanup): {
        _183 = &mut _110;
        _184 = <Box<[Example<'_>; 3]> as Drop>::drop(move _183) -> [return: bb65, unwind terminate];
    }

    bb52 (cleanup): {
        _185 = &mut _100;
        _186 = <Box<[Example<'_>; 1]> as Drop>::drop(move _185) -> [return: bb66, unwind terminate];
    }

    bb53 (cleanup): {
        _187 = &mut _82;
        _188 = <Box<[Example<'_>; 2]> as Drop>::drop(move _187) -> [return: bb67, unwind terminate];
    }

    bb54 (cleanup): {
        _189 = &mut _56;
        _190 = <Box<[Example<'_>; 4]> as Drop>::drop(move _189) -> [return: bb68, unwind terminate];
    }

    bb55 (cleanup): {
        _191 = &mut _30;
        _192 = <Box<[Example<'_>; 4]> as Drop>::drop(move _191) -> [return: bb69, unwind terminate];
    }

    bb56 (cleanup): {
        _193 = &mut _20;
        _194 = <Box<[Example<'_>; 3]> as Drop>::drop(move _193) -> [return: bb70, unwind terminate];
    }

    bb57 (cleanup): {
        _195 = &mut _10;
        _196 = <Box<[Example<'_>; 2]> as Drop>::drop(move _195) -> [return: bb71, unwind terminate];
    }

    bb58: {
        (*_203) = [move _11, move _91];
        _6 = move _10;
        _5 = move _6 as std::boxed::Box<[Example<'_>]> (Pointer(Unsize));
        _4 = slice::<impl [Example<'_>]>::into_vec::<std::alloc::Global>(move _5) -> [return: bb27, unwind continue];
    }

    bb59: {
        (*_202) = [move _101];
        _96 = move _100;
        _95 = move _96 as std::boxed::Box<[Example<'_>]> (Pointer(Unsize));
        _94 = slice::<impl [Example<'_>]>::into_vec::<std::alloc::Global>(move _95) -> [return: bb26, unwind: bb40];
    }

    bb60: {
        (*_201) = [move _111, move _115, move _119];
        _106 = move _110;
        _105 = move _106 as std::boxed::Box<[Example<'_>]> (Pointer(Unsize));
        _104 = slice::<impl [Example<'_>]>::into_vec::<std::alloc::Global>(move _105) -> [return: bb25, unwind: bb52];
    }

    bb61: {
        (*_200) = [move _21, move _47, move _73];
        _16 = move _20;
        _15 = move _16 as std::boxed::Box<[Example<'_>]> (Pointer(Unsize));
        _14 = slice::<impl [Example<'_>]>::into_vec::<std::alloc::Global>(move _15) -> [return: bb19, unwind: bb57];
    }

    bb62: {
        (*_199) = [move _83, move _87];
        _78 = move _82;
        _77 = move _78 as std::boxed::Box<[Example<'_>]> (Pointer(Unsize));
        _76 = slice::<impl [Example<'_>]>::into_vec::<std::alloc::Global>(move _77) -> [return: bb18, unwind: bb42];
    }

    bb63: {
        (*_198) = [move _57, move _61, move _65, move _69];
        _52 = move _56;
        _51 = move _52 as std::boxed::Box<[Example<'_>]> (Pointer(Unsize));
        _50 = slice::<impl [Example<'_>]>::into_vec::<std::alloc::Global>(move _51) -> [return: bb14, unwind: bb46];
    }

    bb64: {
        (*_197) = [move _31, move _35, move _39, move _43];
        _26 = move _30;
        _25 = move _26 as std::boxed::Box<[Example<'_>]> (Pointer(Unsize));
        _24 = slice::<impl [Example<'_>]>::into_vec::<std::alloc::Global>(move _25) -> [return: bb8, unwind: bb56];
    }

    bb65 (cleanup): {
        goto -> bb52;
    }

    bb66 (cleanup): {
        goto -> bb40;
    }

    bb67 (cleanup): {
        goto -> bb42;
    }

    bb68 (cleanup): {
        goto -> bb46;
    }

    bb69 (cleanup): {
        goto -> bb56;
    }

    bb70 (cleanup): {
        goto -> bb57;
    }

    bb71 (cleanup): {
        goto -> bb50;
    }
}

alloc1 (static: EXPECTED, size: 16, align: 8) {
    ╾──────alloc165───────╼ 77 05 00 00 00 00 00 00 │ ╾──────╼w.......
}

alloc165 (size: 1399, align: 1) {
    0x000 │ 45 78 61 6d 70 6c 65 20 7b 20 5f 69 6e 64 65 78 │ Example { _index
    0x010 │ 65 73 3a 20 5b 5d 2c 20 5f 63 6f 75 6e 74 73 3a │ es: [], _counts:
    0x020 │ 20 5b 32 2c 20 34 2c 20 31 33 5d 2c 20 5f 6e 65 │  [2, 4, 13], _ne
    0x030 │ 73 74 65 64 3a 20 5b 45 78 61 6d 70 6c 65 20 7b │ sted: [Example {
    0x040 │ 20 5f 69 6e 64 65 78 65 73 3a 20 5b 28 30 2c 20 │  _indexes: [(0, 
    0x050 │ 32 29 5d 2c 20 5f 63 6f 75 6e 74 73 3a 20 5b 33 │ 2)], _counts: [3
    0x060 │ 2c 20 31 30 5d 2c 20 5f 6e 65 73 74 65 64 3a 20 │ , 10], _nested: 
    0x070 │ 5b 45 78 61 6d 70 6c 65 20 7b 20 5f 69 6e 64 65 │ [Example { _inde
    0x080 │ 78 65 73 3a 20 5b 28 30 2c 20 32 29 2c 20 28 30 │ xes: [(0, 2), (0
    0x090 │ 2c 20 33 29 5d 2c 20 5f 63 6f 75 6e 74 73 3a 20 │ , 3)], _counts: 
    0x0a0 │ 5b 34 5d 2c 20 5f 6e 65 73 74 65 64 3a 20 5b 45 │ [4], _nested: [E
    0x0b0 │ 78 61 6d 70 6c 65 20 7b 20 5f 69 6e 64 65 78 65 │ xample { _indexe
    0x0c0 │ 73 3a 20 5b 28 30 2c 20 32 29 2c 20 28 30 2c 20 │ s: [(0, 2), (0, 
    0x0d0 │ 33 29 2c 20 28 30 2c 20 34 29 5d 2c 20 5f 63 6f │ 3), (0, 4)], _co
    0x0e0 │ 75 6e 74 73 3a 20 5b 5d 2c 20 5f 6e 65 73 74 65 │ unts: [], _neste
    0x0f0 │ 64 3a 20 5b 5d 20 7d 2c 20 45 78 61 6d 70 6c 65 │ d: [] }, Example
    0x100 │ 20 7b 20 5f 69 6e 64 65 78 65 73 3a 20 5b 28 30 │  { _indexes: [(0
    0x110 │ 2c 20 32 29 2c 20 28 30 2c 20 33 29 2c 20 28 31 │ , 2), (0, 3), (1
    0x120 │ 2c 20 34 29 5d 2c 20 5f 63 6f 75 6e 74 73 3a 20 │ , 4)], _counts: 
    0x130 │ 5b 5d 2c 20 5f 6e 65 73 74 65 64 3a 20 5b 5d 20 │ [], _nested: [] 
    0x140 │ 7d 2c 20 45 78 61 6d 70 6c 65 20 7b 20 5f 69 6e │ }, Example { _in
    0x150 │ 64 65 78 65 73 3a 20 5b 28 30 2c 20 32 29 2c 20 │ dexes: [(0, 2), 
    0x160 │ 28 30 2c 20 33 29 2c 20 28 32 2c 20 34 29 5d 2c │ (0, 3), (2, 4)],
    0x170 │ 20 5f 63 6f 75 6e 74 73 3a 20 5b 5d 2c 20 5f 6e │  _counts: [], _n
    0x180 │ 65 73 74 65 64 3a 20 5b 5d 20 7d 2c 20 45 78 61 │ ested: [] }, Exa
    0x190 │ 6d 70 6c 65 20 7b 20 5f 69 6e 64 65 78 65 73 3a │ mple { _indexes:
    0x1a0 │ 20 5b 28 30 2c 20 32 29 2c 20 28 30 2c 20 33 29 │  [(0, 2), (0, 3)
    0x1b0 │ 2c 20 28 33 2c 20 34 29 5d 2c 20 5f 63 6f 75 6e │ , (3, 4)], _coun
    0x1c0 │ 74 73 3a 20 5b 5d 2c 20 5f 6e 65 73 74 65 64 3a │ ts: [], _nested:
    0x1d0 │ 20 5b 5d 20 7d 5d 20 7d 2c 20 45 78 61 6d 70 6c │  [] }] }, Exampl
    0x1e0 │ 65 20 7b 20 5f 69 6e 64 65 78 65 73 3a 20 5b 28 │ e { _indexes: [(
    0x1f0 │ 30 2c 20 32 29 2c 20 28 31 2c 20 33 29 5d 2c 20 │ 0, 2), (1, 3)], 
    0x200 │ 5f 63 6f 75 6e 74 73 3a 20 5b 34 5d 2c 20 5f 6e │ _counts: [4], _n
    0x210 │ 65 73 74 65 64 3a 20 5b 45 78 61 6d 70 6c 65 20 │ ested: [Example 
    0x220 │ 7b 20 5f 69 6e 64 65 78 65 73 3a 20 5b 28 30 2c │ { _indexes: [(0,
    0x230 │ 20 32 29 2c 20 28 31 2c 20 33 29 2c 20 28 30 2c │  2), (1, 3), (0,
    0x240 │ 20 34 29 5d 2c 20 5f 63 6f 75 6e 74 73 3a 20 5b │  4)], _counts: [
    0x250 │ 5d 2c 20 5f 6e 65 73 74 65 64 3a 20 5b 5d 20 7d │ ], _nested: [] }
    0x260 │ 2c 20 45 78 61 6d 70 6c 65 20 7b 20 5f 69 6e 64 │ , Example { _ind
    0x270 │ 65 78 65 73 3a 20 5b 28 30 2c 20 32 29 2c 20 28 │ exes: [(0, 2), (
    0x280 │ 31 2c 20 33 29 2c 20 28 31 2c 20 34 29 5d 2c 20 │ 1, 3), (1, 4)], 
    0x290 │ 5f 63 6f 75 6e 74 73 3a 20 5b 5d 2c 20 5f 6e 65 │ _counts: [], _ne
    0x2a0 │ 73 74 65 64 3a 20 5b 5d 20 7d 2c 20 45 78 61 6d │ sted: [] }, Exam
    0x2b0 │ 70 6c 65 20 7b 20 5f 69 6e 64 65 78 65 73 3a 20 │ ple { _indexes: 
    0x2c0 │ 5b 28 30 2c 20 32 29 2c 20 28 31 2c 20 33 29 2c │ [(0, 2), (1, 3),
    0x2d0 │ 20 28 32 2c 20 34 29 5d 2c 20 5f 63 6f 75 6e 74 │  (2, 4)], _count
    0x2e0 │ 73 3a 20 5b 5d 2c 20 5f 6e 65 73 74 65 64 3a 20 │ s: [], _nested: 
    0x2f0 │ 5b 5d 20 7d 2c 20 45 78 61 6d 70 6c 65 20 7b 20 │ [] }, Example { 
    0x300 │ 5f 69 6e 64 65 78 65 73 3a 20 5b 28 30 2c 20 32 │ _indexes: [(0, 2
    0x310 │ 29 2c 20 28 31 2c 20 33 29 2c 20 28 33 2c 20 34 │ ), (1, 3), (3, 4
    0x320 │ 29 5d 2c 20 5f 63 6f 75 6e 74 73 3a 20 5b 5d 2c │ )], _counts: [],
    0x330 │ 20 5f 6e 65 73 74 65 64 3a 20 5b 5d 20 7d 5d 20 │  _nested: [] }] 
    0x340 │ 7d 2c 20 45 78 61 6d 70 6c 65 20 7b 20 5f 69 6e │ }, Example { _in
    0x350 │ 64 65 78 65 73 3a 20 5b 28 30 2c 20 32 29 2c 20 │ dexes: [(0, 2), 
    0x360 │ 28 32 2c 20 33 29 5d 2c 20 5f 63 6f 75 6e 74 73 │ (2, 3)], _counts
    0x370 │ 3a 20 5b 32 5d 2c 20 5f 6e 65 73 74 65 64 3a 20 │ : [2], _nested: 
    0x380 │ 5b 45 78 61 6d 70 6c 65 20 7b 20 5f 69 6e 64 65 │ [Example { _inde
    0x390 │ 78 65 73 3a 20 5b 28 30 2c 20 32 29 2c 20 28 32 │ xes: [(0, 2), (2
    0x3a0 │ 2c 20 33 29 2c 20 28 30 2c 20 32 29 5d 2c 20 5f │ , 3), (0, 2)], _
    0x3b0 │ 63 6f 75 6e 74 73 3a 20 5b 5d 2c 20 5f 6e 65 73 │ counts: [], _nes
    0x3c0 │ 74 65 64 3a 20 5b 5d 20 7d 2c 20 45 78 61 6d 70 │ ted: [] }, Examp
    0x3d0 │ 6c 65 20 7b 20 5f 69 6e 64 65 78 65 73 3a 20 5b │ le { _indexes: [
    0x3e0 │ 28 30 2c 20 32 29 2c 20 28 32 2c 20 33 29 2c 20 │ (0, 2), (2, 3), 
    0x3f0 │ 28 31 2c 20 32 29 5d 2c 20 5f 63 6f 75 6e 74 73 │ (1, 2)], _counts
    0x400 │ 3a 20 5b 5d 2c 20 5f 6e 65 73 74 65 64 3a 20 5b │ : [], _nested: [
    0x410 │ 5d 20 7d 5d 20 7d 5d 20 7d 2c 20 45 78 61 6d 70 │ ] }] }] }, Examp
    0x420 │ 6c 65 20 7b 20 5f 69 6e 64 65 78 65 73 3a 20 5b │ le { _indexes: [
    0x430 │ 28 31 2c 20 32 29 5d 2c 20 5f 63 6f 75 6e 74 73 │ (1, 2)], _counts
    0x440 │ 3a 20 5b 31 2c 20 33 5d 2c 20 5f 6e 65 73 74 65 │ : [1, 3], _neste
    0x450 │ 64 3a 20 5b 45 78 61 6d 70 6c 65 20 7b 20 5f 69 │ d: [Example { _i
    0x460 │ 6e 64 65 78 65 73 3a 20 5b 28 31 2c 20 32 29 2c │ ndexes: [(1, 2),
    0x470 │ 20 28 30 2c 20 31 29 5d 2c 20 5f 63 6f 75 6e 74 │  (0, 1)], _count
    0x480 │ 73 3a 20 5b 33 5d 2c 20 5f 6e 65 73 74 65 64 3a │ s: [3], _nested:
    0x490 │ 20 5b 45 78 61 6d 70 6c 65 20 7b 20 5f 69 6e 64 │  [Example { _ind
    0x4a0 │ 65 78 65 73 3a 20 5b 28 31 2c 20 32 29 2c 20 28 │ exes: [(1, 2), (
    0x4b0 │ 30 2c 20 31 29 2c 20 28 30 2c 20 33 29 5d 2c 20 │ 0, 1), (0, 3)], 
    0x4c0 │ 5f 63 6f 75 6e 74 73 3a 20 5b 5d 2c 20 5f 6e 65 │ _counts: [], _ne
    0x4d0 │ 73 74 65 64 3a 20 5b 5d 20 7d 2c 20 45 78 61 6d │ sted: [] }, Exam
    0x4e0 │ 70 6c 65 20 7b 20 5f 69 6e 64 65 78 65 73 3a 20 │ ple { _indexes: 
    0x4f0 │ 5b 28 31 2c 20 32 29 2c 20 28 30 2c 20 31 29 2c │ [(1, 2), (0, 1),
    0x500 │ 20 28 31 2c 20 33 29 5d 2c 20 5f 63 6f 75 6e 74 │  (1, 3)], _count
    0x510 │ 73 3a 20 5b 5d 2c 20 5f 6e 65 73 74 65 64 3a 20 │ s: [], _nested: 
    0x520 │ 5b 5d 20 7d 2c 20 45 78 61 6d 70 6c 65 20 7b 20 │ [] }, Example { 
    0x530 │ 5f 69 6e 64 65 78 65 73 3a 20 5b 28 31 2c 20 32 │ _indexes: [(1, 2
    0x540 │ 29 2c 20 28 30 2c 20 31 29 2c 20 28 32 2c 20 33 │ ), (0, 1), (2, 3
    0x550 │ 29 5d 2c 20 5f 63 6f 75 6e 74 73 3a 20 5b 5d 2c │ )], _counts: [],
    0x560 │ 20 5f 6e 65 73 74 65 64 3a 20 5b 5d 20 7d 5d 20 │  _nested: [] }] 
    0x570 │ 7d 5d 20 7d 5d 20 7d                            │ }] }] }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[u32; 0] = {
    let mut _0: &[u32; 0];
    let mut _1: [u32; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[(u32, u32); 3] = {
    let mut _0: &[(u32, u32); 3];
    let mut _1: [(u32, u32); 3];
    let mut _2: (u32, u32);
    let mut _3: (u32, u32);
    let mut _4: (u32, u32);

    bb0: {
        _2 = (const 1_u32, const 2_u32);
        _3 = (const 0_u32, const 1_u32);
        _4 = (const 2_u32, const 3_u32);
        _1 = [move _2, move _3, move _4];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[u32; 0] = {
    let mut _0: &[u32; 0];
    let mut _1: [u32; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[(u32, u32); 3] = {
    let mut _0: &[(u32, u32); 3];
    let mut _1: [(u32, u32); 3];
    let mut _2: (u32, u32);
    let mut _3: (u32, u32);
    let mut _4: (u32, u32);

    bb0: {
        _2 = (const 1_u32, const 2_u32);
        _3 = (const 0_u32, const 1_u32);
        _4 = (const 1_u32, const 3_u32);
        _1 = [move _2, move _3, move _4];
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[u32; 0] = {
    let mut _0: &[u32; 0];
    let mut _1: [u32; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &[(u32, u32); 3] = {
    let mut _0: &[(u32, u32); 3];
    let mut _1: [(u32, u32); 3];
    let mut _2: (u32, u32);
    let mut _3: (u32, u32);
    let mut _4: (u32, u32);

    bb0: {
        _2 = (const 1_u32, const 2_u32);
        _3 = (const 0_u32, const 1_u32);
        _4 = (const 0_u32, const 3_u32);
        _1 = [move _2, move _3, move _4];
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &[u32; 1] = {
    let mut _0: &[u32; 1];
    let mut _1: [u32; 1];

    bb0: {
        _1 = [const 3_u32];
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &[(u32, u32); 2] = {
    let mut _0: &[(u32, u32); 2];
    let mut _1: [(u32, u32); 2];
    let mut _2: (u32, u32);
    let mut _3: (u32, u32);

    bb0: {
        _2 = (const 1_u32, const 2_u32);
        _3 = (const 0_u32, const 1_u32);
        _1 = [move _2, move _3];
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &[u32; 2] = {
    let mut _0: &[u32; 2];
    let mut _1: [u32; 2];

    bb0: {
        _1 = [const 1_u32, const 3_u32];
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &[(u32, u32); 1] = {
    let mut _0: &[(u32, u32); 1];
    let mut _1: [(u32, u32); 1];
    let mut _2: (u32, u32);

    bb0: {
        _2 = (const 1_u32, const 2_u32);
        _1 = [move _2];
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &[u32; 0] = {
    let mut _0: &[u32; 0];
    let mut _1: [u32; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &[(u32, u32); 3] = {
    let mut _0: &[(u32, u32); 3];
    let mut _1: [(u32, u32); 3];
    let mut _2: (u32, u32);
    let mut _3: (u32, u32);
    let mut _4: (u32, u32);

    bb0: {
        _2 = (const 0_u32, const 2_u32);
        _3 = (const 2_u32, const 3_u32);
        _4 = (const 1_u32, const 2_u32);
        _1 = [move _2, move _3, move _4];
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &[u32; 0] = {
    let mut _0: &[u32; 0];
    let mut _1: [u32; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &[(u32, u32); 3] = {
    let mut _0: &[(u32, u32); 3];
    let mut _1: [(u32, u32); 3];
    let mut _2: (u32, u32);
    let mut _3: (u32, u32);
    let mut _4: (u32, u32);

    bb0: {
        _2 = (const 0_u32, const 2_u32);
        _3 = (const 2_u32, const 3_u32);
        _4 = (const 0_u32, const 2_u32);
        _1 = [move _2, move _3, move _4];
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &[u32; 1] = {
    let mut _0: &[u32; 1];
    let mut _1: [u32; 1];

    bb0: {
        _1 = [const 2_u32];
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &[(u32, u32); 2] = {
    let mut _0: &[(u32, u32); 2];
    let mut _1: [(u32, u32); 2];
    let mut _2: (u32, u32);
    let mut _3: (u32, u32);

    bb0: {
        _2 = (const 0_u32, const 2_u32);
        _3 = (const 2_u32, const 3_u32);
        _1 = [move _2, move _3];
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &[u32; 0] = {
    let mut _0: &[u32; 0];
    let mut _1: [u32; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &[(u32, u32); 3] = {
    let mut _0: &[(u32, u32); 3];
    let mut _1: [(u32, u32); 3];
    let mut _2: (u32, u32);
    let mut _3: (u32, u32);
    let mut _4: (u32, u32);

    bb0: {
        _2 = (const 0_u32, const 2_u32);
        _3 = (const 1_u32, const 3_u32);
        _4 = (const 3_u32, const 4_u32);
        _1 = [move _2, move _3, move _4];
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &[u32; 0] = {
    let mut _0: &[u32; 0];
    let mut _1: [u32; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &[(u32, u32); 3] = {
    let mut _0: &[(u32, u32); 3];
    let mut _1: [(u32, u32); 3];
    let mut _2: (u32, u32);
    let mut _3: (u32, u32);
    let mut _4: (u32, u32);

    bb0: {
        _2 = (const 0_u32, const 2_u32);
        _3 = (const 1_u32, const 3_u32);
        _4 = (const 2_u32, const 4_u32);
        _1 = [move _2, move _3, move _4];
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &[u32; 0] = {
    let mut _0: &[u32; 0];
    let mut _1: [u32; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &[(u32, u32); 3] = {
    let mut _0: &[(u32, u32); 3];
    let mut _1: [(u32, u32); 3];
    let mut _2: (u32, u32);
    let mut _3: (u32, u32);
    let mut _4: (u32, u32);

    bb0: {
        _2 = (const 0_u32, const 2_u32);
        _3 = (const 1_u32, const 3_u32);
        _4 = (const 1_u32, const 4_u32);
        _1 = [move _2, move _3, move _4];
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &[u32; 0] = {
    let mut _0: &[u32; 0];
    let mut _1: [u32; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[24] in main: &[(u32, u32); 3] = {
    let mut _0: &[(u32, u32); 3];
    let mut _1: [(u32, u32); 3];
    let mut _2: (u32, u32);
    let mut _3: (u32, u32);
    let mut _4: (u32, u32);

    bb0: {
        _2 = (const 0_u32, const 2_u32);
        _3 = (const 1_u32, const 3_u32);
        _4 = (const 0_u32, const 4_u32);
        _1 = [move _2, move _3, move _4];
        _0 = &_1;
        return;
    }
}

promoted[25] in main: &[u32; 1] = {
    let mut _0: &[u32; 1];
    let mut _1: [u32; 1];

    bb0: {
        _1 = [const 4_u32];
        _0 = &_1;
        return;
    }
}

promoted[26] in main: &[(u32, u32); 2] = {
    let mut _0: &[(u32, u32); 2];
    let mut _1: [(u32, u32); 2];
    let mut _2: (u32, u32);
    let mut _3: (u32, u32);

    bb0: {
        _2 = (const 0_u32, const 2_u32);
        _3 = (const 1_u32, const 3_u32);
        _1 = [move _2, move _3];
        _0 = &_1;
        return;
    }
}

promoted[27] in main: &[u32; 0] = {
    let mut _0: &[u32; 0];
    let mut _1: [u32; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[28] in main: &[(u32, u32); 3] = {
    let mut _0: &[(u32, u32); 3];
    let mut _1: [(u32, u32); 3];
    let mut _2: (u32, u32);
    let mut _3: (u32, u32);
    let mut _4: (u32, u32);

    bb0: {
        _2 = (const 0_u32, const 2_u32);
        _3 = (const 0_u32, const 3_u32);
        _4 = (const 3_u32, const 4_u32);
        _1 = [move _2, move _3, move _4];
        _0 = &_1;
        return;
    }
}

promoted[29] in main: &[u32; 0] = {
    let mut _0: &[u32; 0];
    let mut _1: [u32; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[30] in main: &[(u32, u32); 3] = {
    let mut _0: &[(u32, u32); 3];
    let mut _1: [(u32, u32); 3];
    let mut _2: (u32, u32);
    let mut _3: (u32, u32);
    let mut _4: (u32, u32);

    bb0: {
        _2 = (const 0_u32, const 2_u32);
        _3 = (const 0_u32, const 3_u32);
        _4 = (const 2_u32, const 4_u32);
        _1 = [move _2, move _3, move _4];
        _0 = &_1;
        return;
    }
}

promoted[31] in main: &[u32; 0] = {
    let mut _0: &[u32; 0];
    let mut _1: [u32; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[32] in main: &[(u32, u32); 3] = {
    let mut _0: &[(u32, u32); 3];
    let mut _1: [(u32, u32); 3];
    let mut _2: (u32, u32);
    let mut _3: (u32, u32);
    let mut _4: (u32, u32);

    bb0: {
        _2 = (const 0_u32, const 2_u32);
        _3 = (const 0_u32, const 3_u32);
        _4 = (const 1_u32, const 4_u32);
        _1 = [move _2, move _3, move _4];
        _0 = &_1;
        return;
    }
}

promoted[33] in main: &[u32; 0] = {
    let mut _0: &[u32; 0];
    let mut _1: [u32; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[34] in main: &[(u32, u32); 3] = {
    let mut _0: &[(u32, u32); 3];
    let mut _1: [(u32, u32); 3];
    let mut _2: (u32, u32);
    let mut _3: (u32, u32);
    let mut _4: (u32, u32);

    bb0: {
        _2 = (const 0_u32, const 2_u32);
        _3 = (const 0_u32, const 3_u32);
        _4 = (const 0_u32, const 4_u32);
        _1 = [move _2, move _3, move _4];
        _0 = &_1;
        return;
    }
}

promoted[35] in main: &[u32; 1] = {
    let mut _0: &[u32; 1];
    let mut _1: [u32; 1];

    bb0: {
        _1 = [const 4_u32];
        _0 = &_1;
        return;
    }
}

promoted[36] in main: &[(u32, u32); 2] = {
    let mut _0: &[(u32, u32); 2];
    let mut _1: [(u32, u32); 2];
    let mut _2: (u32, u32);
    let mut _3: (u32, u32);

    bb0: {
        _2 = (const 0_u32, const 2_u32);
        _3 = (const 0_u32, const 3_u32);
        _1 = [move _2, move _3];
        _0 = &_1;
        return;
    }
}

promoted[37] in main: &[u32; 2] = {
    let mut _0: &[u32; 2];
    let mut _1: [u32; 2];

    bb0: {
        _1 = [const 3_u32, const 10_u32];
        _0 = &_1;
        return;
    }
}

promoted[38] in main: &[(u32, u32); 1] = {
    let mut _0: &[(u32, u32); 1];
    let mut _1: [(u32, u32); 1];
    let mut _2: (u32, u32);

    bb0: {
        _2 = (const 0_u32, const 2_u32);
        _1 = [move _2];
        _0 = &_1;
        return;
    }
}

promoted[39] in main: &[u32; 3] = {
    let mut _0: &[u32; 3];
    let mut _1: [u32; 3];

    bb0: {
        _1 = [const 2_u32, const 4_u32, const 13_u32];
        _0 = &_1;
        return;
    }
}

promoted[40] in main: &[(u32, u32); 0] = {
    let mut _0: &[(u32, u32); 0];
    let mut _1: [(u32, u32); 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}
