// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::string::String, &std::string::String);
    let mut _2: &std::string::String;
    let _3: std::string::String;
    let _4: std::string::String;
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 0];
    let _9: [core::fmt::rt::Argument<'_>; 0];
    let mut _10: &std::string::String;
    let _11: std::string::String;
    let _12: &str;
    let _13: &std::string::String;
    let _14: &std::string::String;
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: (&std::string::String, &std::string::String);
    let mut _21: &std::string::String;
    let _22: std::string::String;
    let _23: std::string::String;
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let mut _26: &std::string::String;
    let _27: std::string::String;
    let _28: &str;
    let _29: &std::string::String;
    let _30: &std::string::String;
    let mut _31: bool;
    let mut _32: bool;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: (&std::string::String, &std::string::String);
    let mut _37: &std::string::String;
    let _38: std::string::String;
    let _39: &str;
    let mut _40: &std::string::String;
    let _41: std::string::String;
    let _42: &str;
    let _43: &std::string::String;
    let _44: &std::string::String;
    let mut _45: bool;
    let mut _46: bool;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _50: (&&str, &&str);
    let _51: &&str;
    let _52: &&str;
    let mut _53: bool;
    let mut _54: bool;
    let _56: !;
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _58: bool;
    let mut _59: &str;
    let mut _60: bool;
    let mut _61: !;
    let mut _62: &&str;
    let mut _63: &&str;
    let mut _64: &[&str; 0];
    let mut _65: &[&str; 1];
    let mut _66: bool;
    scope 1 {
        debug res => _4;
    }
    scope 2 {
        debug left_val => _13;
        debug right_val => _14;
        let _17: core::panicking::AssertKind;
        scope 3 {
            debug kind => _17;
        }
    }
    scope 4 {
        debug res => _23;
    }
    scope 5 {
        debug left_val => _29;
        debug right_val => _30;
        let _33: core::panicking::AssertKind;
        scope 6 {
            debug kind => _33;
        }
    }
    scope 7 {
        debug left_val => _43;
        debug right_val => _44;
        let _47: core::panicking::AssertKind;
        scope 8 {
            debug kind => _47;
        }
    }
    scope 9 {
        debug left_val => _51;
        debug right_val => _52;
        let _55: core::panicking::AssertKind;
        scope 10 {
            debug kind => _55;
        }
    }

    bb0: {
        _65 = const _;
        _6 = _65 as &[&str] (Pointer(Unsize));
        _9 = core::fmt::rt::Argument::<'_>::none() -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = format(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _3 = move _4;
        _2 = &_3;
        _12 = const "foobarbaz";
        _11 = <str as ToString>::to_string(_12) -> [return: bb4, unwind: bb36];
    }

    bb4: {
        _10 = &_11;
        _1 = (move _2, move _10);
        _13 = (_1.0: &std::string::String);
        _14 = (_1.1: &std::string::String);
        _16 = <String as PartialEq>::eq(_13, _14) -> [return: bb5, unwind: bb35];
    }

    bb5: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<String, String>(move _17, _13, _14, move _19) -> bb35;
    }

    bb7: {
        drop(_11) -> [return: bb8, unwind: bb36];
    }

    bb8: {
        drop(_3) -> [return: bb9, unwind continue];
    }

    bb9: {
        _64 = const _;
        _25 = _64 as &[&str] (Pointer(Unsize));
        _24 = Arguments::<'_>::new_const(move _25) -> [return: bb10, unwind continue];
    }

    bb10: {
        _23 = format(move _24) -> [return: bb11, unwind continue];
    }

    bb11: {
        _22 = move _23;
        _21 = &_22;
        _28 = const "";
        _27 = <str as ToString>::to_string(_28) -> [return: bb12, unwind: bb34];
    }

    bb12: {
        _26 = &_27;
        _20 = (move _21, move _26);
        _29 = (_20.0: &std::string::String);
        _30 = (_20.1: &std::string::String);
        _32 = <String as PartialEq>::eq(_29, _30) -> [return: bb13, unwind: bb33];
    }

    bb13: {
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<String, String>(move _33, _29, _30, move _35) -> bb33;
    }

    bb15: {
        drop(_27) -> [return: bb16, unwind: bb34];
    }

    bb16: {
        drop(_22) -> [return: bb17, unwind continue];
    }

    bb17: {
        _39 = const "quxquux";
        _38 = <str as ToString>::to_string(_39) -> [return: bb18, unwind continue];
    }

    bb18: {
        _37 = &_38;
        _42 = const "quxquux";
        _41 = <str as ToString>::to_string(_42) -> [return: bb19, unwind: bb32];
    }

    bb19: {
        _40 = &_41;
        _36 = (move _37, move _40);
        _43 = (_36.0: &std::string::String);
        _44 = (_36.1: &std::string::String);
        _46 = <String as PartialEq>::eq(_43, _44) -> [return: bb20, unwind: bb31];
    }

    bb20: {
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<String, String>(move _47, _43, _44, move _49) -> bb31;
    }

    bb22: {
        drop(_41) -> [return: bb23, unwind: bb32];
    }

    bb23: {
        drop(_38) -> [return: bb24, unwind continue];
    }

    bb24: {
        _63 = const _;
        _62 = const _;
        _50 = (_63, _62);
        _51 = (_50.0: &&str);
        _52 = (_50.1: &&str);
        _54 = <&str as PartialEq>::eq(_51, _52) -> [return: bb25, unwind continue];
    }

    bb25: {
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _55 = core::panicking::AssertKind::Eq;
        _57 = Option::<Arguments<'_>>::None;
        _56 = core::panicking::assert_failed::<&str, &str>(move _55, _51, _52, move _57) -> unwind continue;
    }

    bb27: {
        _59 = const "12344.0atrue";
        _60 = <str as PartialEq>::eq(_59, const "12344.0atrue") -> [return: bb28, unwind continue];
    }

    bb28: {
        _66 = move _60;
        _58 = Not(_66);
        switchInt(move _58) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _61 = core::panicking::panic(const "assertion failed: match \\\"12344.0atrue\\\" {\\n    concat!(1, 2, 3, 4f32, 4.0, \\'a\\', true) => true,\\n    _ => false,\\n}") -> unwind continue;
    }

    bb30: {
        return;
    }

    bb31 (cleanup): {
        drop(_41) -> [return: bb32, unwind terminate];
    }

    bb32 (cleanup): {
        drop(_38) -> [return: bb37, unwind terminate];
    }

    bb33 (cleanup): {
        drop(_27) -> [return: bb34, unwind terminate];
    }

    bb34 (cleanup): {
        drop(_22) -> [return: bb37, unwind terminate];
    }

    bb35 (cleanup): {
        drop(_11) -> [return: bb36, unwind terminate];
    }

    bb36 (cleanup): {
        drop(_3) -> [return: bb37, unwind terminate];
    }

    bb37 (cleanup): {
        resume;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "12344.0atrue";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "12344.0atrue";
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 0] = {
    let mut _0: &[&str; 0];
    let mut _1: [&str; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "foobarbaz"];
        _0 = &_1;
        return;
    }
}
