// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let _2: !;
    let mut _3: bool;
    let mut _4: bool;
    let _5: !;
    let mut _6: (&i32, &i32);
    let _7: &i32;
    let _8: &i32;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i32;
    let mut _12: i32;
    let _14: !;
    let mut _15: bool;
    let mut _16: (&i32, &i32);
    let _17: &i32;
    let _18: &i32;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: i32;
    let mut _22: i32;
    let _24: !;
    let mut _25: (&i32, &i32);
    let _26: &i32;
    let _27: &i32;
    let mut _28: bool;
    let mut _29: i32;
    let mut _30: i32;
    let _32: !;
    let mut _33: bool;
    let mut _34: (&i32, &i32);
    let _35: &i32;
    let _36: &i32;
    let mut _37: bool;
    let mut _38: i32;
    let mut _39: i32;
    let _41: !;
    let mut _42: &i32;
    let mut _43: &i32;
    let mut _44: &i32;
    let mut _45: &i32;
    let mut _46: &i32;
    let mut _47: &i32;
    let mut _48: &i32;
    let mut _49: &i32;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _13: core::panicking::AssertKind;
        scope 2 {
            debug kind => _13;
        }
    }
    scope 3 {
        debug left_val => _17;
        debug right_val => _18;
        let _23: core::panicking::AssertKind;
        scope 4 {
            debug kind => _23;
        }
    }
    scope 5 {
        debug left_val => _26;
        debug right_val => _27;
        let _31: core::panicking::AssertKind;
        scope 6 {
            debug kind => _31;
        }
    }
    scope 7 {
        debug left_val => _35;
        debug right_val => _36;
        let _40: core::panicking::AssertKind;
        scope 8 {
            debug kind => _40;
        }
    }

    bb0: {
        _1 = Not(const true);
        switchInt(move _1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _2 = begin_panic::<&str>(const "assert! evaluated format expressions") -> unwind continue;
    }

    bb2: {
        _3 = const true;
        switchInt(move _3) -> [0: bb5, otherwise: bb3];
    }

    bb3: {
        _4 = Not(const true);
        switchInt(move _4) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _5 = begin_panic::<&str>(const "debug_assert! evaluated format expressions") -> unwind continue;
    }

    bb5: {
        _49 = const _;
        _48 = const _;
        _6 = (_49, _48);
        _7 = (_6.0: &i32);
        _8 = (_6.1: &i32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _13 = core::panicking::AssertKind::Eq;
        _14 = begin_panic::<&str>(const "assert_eq! evaluated format expressions") -> unwind continue;
    }

    bb7: {
        _15 = const true;
        switchInt(move _15) -> [0: bb10, otherwise: bb8];
    }

    bb8: {
        _47 = const _;
        _46 = const _;
        _16 = (_47, _46);
        _17 = (_16.0: &i32);
        _18 = (_16.1: &i32);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _23 = core::panicking::AssertKind::Eq;
        _24 = begin_panic::<&str>(const "debug_assert_eq! evaluated format expressions") -> unwind continue;
    }

    bb10: {
        _45 = const _;
        _44 = const _;
        _25 = (_45, _44);
        _26 = (_25.0: &i32);
        _27 = (_25.1: &i32);
        _29 = (*_26);
        _30 = (*_27);
        _28 = Eq(move _29, move _30);
        switchInt(move _28) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _31 = core::panicking::AssertKind::Ne;
        _32 = begin_panic::<&str>(const "assert_ne! evaluated format expressions") -> unwind continue;
    }

    bb12: {
        _33 = const true;
        switchInt(move _33) -> [0: bb15, otherwise: bb13];
    }

    bb13: {
        _43 = const _;
        _42 = const _;
        _34 = (_43, _42);
        _35 = (_34.0: &i32);
        _36 = (_34.1: &i32);
        _38 = (*_35);
        _39 = (*_36);
        _37 = Eq(move _38, move _39);
        switchInt(move _37) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _40 = core::panicking::AssertKind::Ne;
        _41 = begin_panic::<&str>(const "debug_assert_ne! evaluated format expressions") -> unwind continue;
    }

    bb15: {
        return;
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Failed: "];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Failed: "];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Failed: "];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Failed: "];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Failed: "];
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Failed: "];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}
