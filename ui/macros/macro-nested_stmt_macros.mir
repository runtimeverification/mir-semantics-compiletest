// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn static_assert_exists() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/macros/macro-nested_stmt_macros.rs:16:30: 16:30

    bb0: {
        return;                          // scope 0 at ui/macros/macro-nested_stmt_macros.rs:16:33: 16:33
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/macros/macro-nested_stmt_macros.rs:18:11: 18:11
    let _1: ();                          // in scope 0 at ui/macros/macro-nested_stmt_macros.rs:20:5: 20:34
    let _2: ();                          // in scope 0 at ui/macros/macro-nested_stmt_macros.rs:21:5: 21:34
    let _3: ();                          // in scope 0 at ui/macros/macro-nested_stmt_macros.rs:22:5: 22:36

    bb0: {
        _1 = static_assert_exists::<Bar>() -> bb1; // scope 0 at ui/macros/macro-nested_stmt_macros.rs:20:5: 20:34
                                         // mir::Constant
                                         // + span: ui/macros/macro-nested_stmt_macros.rs:20:5: 20:32
                                         // + literal: Const { ty: fn() {static_assert_exists::<Bar>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = static_assert_exists::<Baz>() -> bb2; // scope 0 at ui/macros/macro-nested_stmt_macros.rs:21:5: 21:34
                                         // mir::Constant
                                         // + span: ui/macros/macro-nested_stmt_macros.rs:21:5: 21:32
                                         // + literal: Const { ty: fn() {static_assert_exists::<Baz>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = static_assert_exists::<Xyzzy>() -> bb3; // scope 0 at ui/macros/macro-nested_stmt_macros.rs:22:5: 22:36
                                         // mir::Constant
                                         // + span: ui/macros/macro-nested_stmt_macros.rs:22:5: 22:34
                                         // + literal: Const { ty: fn() {static_assert_exists::<Xyzzy>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/macros/macro-nested_stmt_macros.rs:23:2: 23:2
    }
}
