// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/macros/format-args-temporaries.rs:7:1: 7:11>::lock(_1: &Mutex) -> MutexGuard<'_> {
    debug self => _1;
    let mut _0: MutexGuard<'_>;

    bb0: {
        _0 = MutexGuard::<'_>(_1);
        return;
    }
}

fn <impl at ui/macros/format-args-temporaries.rs:15:1: 15:33>::drop(_1: &mut MutexGuard<'_>) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/macros/format-args-temporaries.rs:23:1: 23:36>::fmt(_1: &MutexGuard<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug _formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;

    bb0: {
        _0 = Result::<(), std::fmt::Error>::Ok(const ());
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Mutex;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &MutexGuard<'_>;
    let _10: MutexGuard<'_>;
    let mut _11: &Mutex;
    let _13: ();
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let _17: &[core::fmt::rt::Argument<'_>; 1];
    let _18: [core::fmt::rt::Argument<'_>; 1];
    let mut _19: core::fmt::rt::Argument<'_>;
    let _20: &MutexGuard<'_>;
    let _21: MutexGuard<'_>;
    let mut _22: &Mutex;
    let _24: ();
    let mut _25: std::fmt::Arguments<'_>;
    let mut _26: &[&str];
    let mut _27: &[core::fmt::rt::Argument<'_>];
    let _28: &[core::fmt::rt::Argument<'_>; 1];
    let _29: [core::fmt::rt::Argument<'_>; 1];
    let mut _30: core::fmt::rt::Argument<'_>;
    let _31: &MutexGuard<'_>;
    let _32: MutexGuard<'_>;
    let mut _33: &Mutex;
    let _35: ();
    let mut _36: std::fmt::Arguments<'_>;
    let mut _37: &[&str];
    let mut _38: &[core::fmt::rt::Argument<'_>];
    let _39: &[core::fmt::rt::Argument<'_>; 1];
    let _40: [core::fmt::rt::Argument<'_>; 1];
    let mut _41: core::fmt::rt::Argument<'_>;
    let _42: &MutexGuard<'_>;
    let _43: MutexGuard<'_>;
    let mut _44: &Mutex;
    let _46: !;
    let _47: &MutexGuard<'_>;
    let _48: MutexGuard<'_>;
    let mut _49: &Mutex;
    scope 1 {
        debug _print => const ();
        let _12: Mutex;
        scope 3 {
            debug _println => const ();
            let _23: Mutex;
            scope 5 {
                debug _eprint => const ();
                let _34: Mutex;
                scope 7 {
                    debug _eprintln => const ();
                    let _45: Mutex;
                    scope 9 {
                        debug _panic => const ();
                    }
                    scope 10 {
                        debug mutex => const Mutex;
                    }
                }
                scope 8 {
                    debug mutex => const Mutex;
                    let mut _50: &[&str; 2];
                }
            }
            scope 6 {
                debug mutex => const Mutex;
                let mut _51: &[&str; 1];
            }
        }
        scope 4 {
            debug mutex => const Mutex;
            let mut _52: &[&str; 2];
        }
    }
    scope 2 {
        debug mutex => const Mutex;
        let mut _53: &[&str; 1];
    }

    bb0: {
        _53 = const _;
        _4 = _53 as &[&str] (Pointer(Unsize));
        _11 = &_1;
        _10 = Mutex::lock(move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = &_10;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<MutexGuard<'_>>(_9) -> [return: bb2, unwind: bb26];
    }

    bb2: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb3, unwind: bb26];
    }

    bb3: {
        _2 = _print(move _3) -> [return: bb4, unwind: bb26];
    }

    bb4: {
        drop(_10) -> [return: bb5, unwind continue];
    }

    bb5: {
        _52 = const _;
        _15 = _52 as &[&str] (Pointer(Unsize));
        _22 = &_12;
        _21 = Mutex::lock(move _22) -> [return: bb6, unwind continue];
    }

    bb6: {
        _20 = &_21;
        _19 = core::fmt::rt::Argument::<'_>::new_display::<MutexGuard<'_>>(_20) -> [return: bb7, unwind: bb25];
    }

    bb7: {
        _18 = [move _19];
        _17 = &_18;
        _16 = _17 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _14 = Arguments::<'_>::new_v1(move _15, move _16) -> [return: bb8, unwind: bb25];
    }

    bb8: {
        _13 = _print(move _14) -> [return: bb9, unwind: bb25];
    }

    bb9: {
        drop(_21) -> [return: bb10, unwind continue];
    }

    bb10: {
        _51 = const _;
        _26 = _51 as &[&str] (Pointer(Unsize));
        _33 = &_23;
        _32 = Mutex::lock(move _33) -> [return: bb11, unwind continue];
    }

    bb11: {
        _31 = &_32;
        _30 = core::fmt::rt::Argument::<'_>::new_display::<MutexGuard<'_>>(_31) -> [return: bb12, unwind: bb24];
    }

    bb12: {
        _29 = [move _30];
        _28 = &_29;
        _27 = _28 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _25 = Arguments::<'_>::new_v1(move _26, move _27) -> [return: bb13, unwind: bb24];
    }

    bb13: {
        _24 = _eprint(move _25) -> [return: bb14, unwind: bb24];
    }

    bb14: {
        drop(_32) -> [return: bb15, unwind continue];
    }

    bb15: {
        _50 = const _;
        _37 = _50 as &[&str] (Pointer(Unsize));
        _44 = &_34;
        _43 = Mutex::lock(move _44) -> [return: bb16, unwind continue];
    }

    bb16: {
        _42 = &_43;
        _41 = core::fmt::rt::Argument::<'_>::new_display::<MutexGuard<'_>>(_42) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        _40 = [move _41];
        _39 = &_40;
        _38 = _39 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _36 = Arguments::<'_>::new_v1(move _37, move _38) -> [return: bb18, unwind: bb23];
    }

    bb18: {
        _35 = _eprint(move _36) -> [return: bb19, unwind: bb23];
    }

    bb19: {
        drop(_43) -> [return: bb20, unwind continue];
    }

    bb20: {
        _49 = &_45;
        _48 = Mutex::lock(move _49) -> [return: bb21, unwind continue];
    }

    bb21: {
        _47 = &_48;
        _46 = panic_display::<MutexGuard<'_>>(_47) -> bb22;
    }

    bb22 (cleanup): {
        drop(_48) -> [return: bb27, unwind terminate];
    }

    bb23 (cleanup): {
        drop(_43) -> [return: bb27, unwind terminate];
    }

    bb24 (cleanup): {
        drop(_32) -> [return: bb27, unwind terminate];
    }

    bb25 (cleanup): {
        drop(_21) -> [return: bb27, unwind terminate];
    }

    bb26 (cleanup): {
        drop(_10) -> [return: bb27, unwind terminate];
    }

    bb27 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn MutexGuard(_1: &Mutex) -> MutexGuard<'_> {
    let mut _0: MutexGuard<'_>;

    bb0: {
        _0 = MutexGuard::<'_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MutexGuard(_1: &Mutex) -> MutexGuard<'_> {
    let mut _0: MutexGuard<'_>;

    bb0: {
        _0 = MutexGuard::<'_>(move _1);
        return;
    }
}
