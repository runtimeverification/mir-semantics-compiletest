// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Change::Down::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/macros/macro-pat-neg-lit.rs:18:12: 18:14

    bb0: {
        _0 = const -1_isize;             // scope 0 at ui/macros/macro-pat-neg-lit.rs:18:12: 18:14
        return;                          // scope 0 at ui/macros/macro-pat-neg-lit.rs:18:12: 18:14
    }
}

Change::None::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/macros/macro-pat-neg-lit.rs:19:12: 19:13

    bb0: {
        _0 = const 0_isize;              // scope 0 at ui/macros/macro-pat-neg-lit.rs:19:12: 19:13
        return;                          // scope 0 at ui/macros/macro-pat-neg-lit.rs:19:12: 19:13
    }
}

Change::Up::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/macros/macro-pat-neg-lit.rs:20:10: 20:11

    bb0: {
        _0 = const 1_isize;              // scope 0 at ui/macros/macro-pat-neg-lit.rs:20:10: 20:11
        return;                          // scope 0 at ui/macros/macro-pat-neg-lit.rs:20:10: 20:11
    }
}

fn foo(_1: i32) -> Option<Change> {
    debug value => _1;                   // in scope 0 at ui/macros/macro-pat-neg-lit.rs:8:16: 8:21
    let mut _0: std::option::Option<Change>; // return place in scope 0 at ui/macros/macro-pat-neg-lit.rs:8:31: 8:44

    bb0: {
        switchInt(_1) -> [4294967295: bb2, 0: bb3, 1: bb4, otherwise: bb1]; // scope 0 at ui/macros/macro-pat-neg-lit.rs:9:13: 9:24
    }

    bb1: {
        _0 = const Option::<Change>::None; // scope 0 at ui/macros/macro-pat-neg-lit.rs:11:22: 11:26
                                         // mir::Constant
                                         // + span: ui/macros/macro-pat-neg-lit.rs:11:22: 11:26
                                         // + literal: Const { ty: Option<Change>, val: Value(Scalar(0x02)) }
        goto -> bb5;                     // scope 0 at ui/macros/macro-pat-neg-lit.rs:11:22: 11:26
    }

    bb2: {
        _0 = const Option::<Change>::Some(Change::Down); // scope 0 at ui/macros/macro-pat-neg-lit.rs:10:30: 10:51
                                         // mir::Constant
                                         // + span: ui/macros/macro-pat-neg-lit.rs:10:30: 10:51
                                         // + literal: Const { ty: Option<Change>, val: Value(Scalar(0xff)) }
        goto -> bb5;                     // scope 0 at ui/macros/macro-pat-neg-lit.rs:10:50: 10:51
    }

    bb3: {
        _0 = const Option::<Change>::Some(Change::None); // scope 0 at ui/macros/macro-pat-neg-lit.rs:10:30: 10:51
                                         // mir::Constant
                                         // + span: ui/macros/macro-pat-neg-lit.rs:10:30: 10:51
                                         // + literal: Const { ty: Option<Change>, val: Value(Scalar(0x00)) }
        goto -> bb5;                     // scope 0 at ui/macros/macro-pat-neg-lit.rs:10:50: 10:51
    }

    bb4: {
        _0 = const Option::<Change>::Some(Change::Up); // scope 0 at ui/macros/macro-pat-neg-lit.rs:10:30: 10:51
                                         // mir::Constant
                                         // + span: ui/macros/macro-pat-neg-lit.rs:10:30: 10:51
                                         // + literal: Const { ty: Option<Change>, val: Value(Scalar(0x01)) }
        goto -> bb5;                     // scope 0 at ui/macros/macro-pat-neg-lit.rs:10:50: 10:51
    }

    bb5: {
        return;                          // scope 0 at ui/macros/macro-pat-neg-lit.rs:13:10: 13:10
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/macros/macro-pat-neg-lit.rs:23:11: 23:11
    let mut _1: std::option::Option<Change>; // in scope 0 at ui/macros/macro-pat-neg-lit.rs:24:33: 24:40
    let mut _2: isize;                   // in scope 0 at ui/macros/macro-pat-neg-lit.rs:24:17: 24:29
    let mut _3: isize;                   // in scope 0 at ui/macros/macro-pat-neg-lit.rs:24:12: 24:30
    let mut _4: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    scope 1 {
    }

    bb0: {
        _1 = foo(const -1_i32) -> bb1;   // scope 1 at ui/macros/macro-pat-neg-lit.rs:24:33: 24:40
                                         // mir::Constant
                                         // + span: ui/macros/macro-pat-neg-lit.rs:24:33: 24:36
                                         // + literal: Const { ty: fn(i32) -> Option<Change> {foo}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = discriminant(_1);           // scope 1 at ui/macros/macro-pat-neg-lit.rs:24:12: 24:30
        switchInt(move _3) -> [1: bb2, otherwise: bb4]; // scope 1 at ui/macros/macro-pat-neg-lit.rs:24:12: 24:30
    }

    bb2: {
        _2 = discriminant(((_1 as Some).0: Change)); // scope 1 at ui/macros/macro-pat-neg-lit.rs:24:12: 24:30
        switchInt(move _2) -> [18446744073709551615: bb3, otherwise: bb4]; // scope 1 at ui/macros/macro-pat-neg-lit.rs:24:12: 24:30
    }

    bb3: {
        return;                          // scope 0 at ui/macros/macro-pat-neg-lit.rs:25:2: 25:2
    }

    bb4: {
        _4 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}
