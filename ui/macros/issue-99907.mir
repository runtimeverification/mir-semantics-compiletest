// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 1];
    let _6: [core::fmt::rt::Argument<'_>; 1];
    let mut _7: core::fmt::rt::Argument<'_>;
    let mut _8: &[core::fmt::rt::Placeholder];
    let _9: &[core::fmt::rt::Placeholder; 1];
    let _10: [core::fmt::rt::Placeholder; 1];
    let mut _11: core::fmt::rt::Placeholder;
    let mut _12: core::fmt::rt::Alignment;
    let mut _13: core::fmt::rt::Count;
    let mut _14: core::fmt::rt::Count;
    let mut _15: core::fmt::rt::UnsafeArg;
    let _16: ();
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: &[core::fmt::rt::Argument<'_>];
    let _20: &[core::fmt::rt::Argument<'_>; 1];
    let _21: [core::fmt::rt::Argument<'_>; 1];
    let mut _22: core::fmt::rt::Argument<'_>;
    let mut _23: &[core::fmt::rt::Placeholder];
    let _24: &[core::fmt::rt::Placeholder; 1];
    let _25: [core::fmt::rt::Placeholder; 1];
    let mut _26: core::fmt::rt::Placeholder;
    let mut _27: core::fmt::rt::Alignment;
    let mut _28: core::fmt::rt::Count;
    let mut _29: core::fmt::rt::Count;
    let mut _30: core::fmt::rt::UnsafeArg;
    let _31: ();
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let mut _34: &[core::fmt::rt::Argument<'_>];
    let _35: &[core::fmt::rt::Argument<'_>; 1];
    let _36: [core::fmt::rt::Argument<'_>; 1];
    let mut _37: core::fmt::rt::Argument<'_>;
    let _38: ();
    let mut _39: std::fmt::Arguments<'_>;
    let mut _40: &[&str];
    let mut _41: &[core::fmt::rt::Argument<'_>];
    let _42: &[core::fmt::rt::Argument<'_>; 1];
    let _43: [core::fmt::rt::Argument<'_>; 1];
    let mut _44: core::fmt::rt::Argument<'_>;
    let _45: ();
    let mut _46: std::fmt::Arguments<'_>;
    let mut _47: &[&str];
    let mut _48: &[core::fmt::rt::Argument<'_>];
    let _49: &[core::fmt::rt::Argument<'_>; 1];
    let _50: [core::fmt::rt::Argument<'_>; 1];
    let mut _51: core::fmt::rt::Argument<'_>;
    let mut _52: &f32;
    let mut _53: &[&str; 2];
    let mut _54: &f32;
    let mut _55: &[&str; 2];
    let mut _56: &f32;
    let mut _57: &[&str; 2];
    let mut _58: &f32;
    let mut _59: &[&str; 2];
    let mut _60: &f32;
    let mut _61: &[&str; 2];
    scope 1 {
    }
    scope 2 {
    }

    bb0: {
        _61 = const _;
        _3 = _61 as &[&str] (Pointer(Unsize));
        _60 = const _;
        _7 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_60) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = [move _7];
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _12 = core::fmt::rt::Alignment::Unknown;
        _13 = core::fmt::rt::Count::Is(const 1_usize) -> [return: bb2, unwind continue];
    }

    bb2: {
        _14 = core::fmt::rt::Count::Implied;
        _11 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _12, const 0_u32, move _13, move _14) -> [return: bb3, unwind continue];
    }

    bb3: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _15 = core::fmt::rt::UnsafeArg::new() -> [return: bb4, unwind continue];
    }

    bb4: {
        _2 = Arguments::<'_>::new_v1_formatted(move _3, move _4, move _8, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb5, unwind continue];
    }

    bb5: {
        _1 = _print(move _2) -> [return: bb6, unwind continue];
    }

    bb6: {
        _59 = const _;
        _18 = _59 as &[&str] (Pointer(Unsize));
        _58 = const _;
        _22 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_58) -> [return: bb7, unwind continue];
    }

    bb7: {
        _21 = [move _22];
        _20 = &_21;
        _19 = _20 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _27 = core::fmt::rt::Alignment::Unknown;
        _28 = core::fmt::rt::Count::Is(const 1_usize) -> [return: bb8, unwind continue];
    }

    bb8: {
        _29 = core::fmt::rt::Count::Is(const 1_usize) -> [return: bb9, unwind continue];
    }

    bb9: {
        _26 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _27, const 0_u32, move _28, move _29) -> [return: bb10, unwind continue];
    }

    bb10: {
        _25 = [move _26];
        _24 = &_25;
        _23 = _24 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _30 = core::fmt::rt::UnsafeArg::new() -> [return: bb11, unwind continue];
    }

    bb11: {
        _17 = Arguments::<'_>::new_v1_formatted(move _18, move _19, move _23, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb12, unwind continue];
    }

    bb12: {
        _16 = _print(move _17) -> [return: bb13, unwind continue];
    }

    bb13: {
        _57 = const _;
        _33 = _57 as &[&str] (Pointer(Unsize));
        _56 = const _;
        _37 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_56) -> [return: bb14, unwind continue];
    }

    bb14: {
        _36 = [move _37];
        _35 = &_36;
        _34 = _35 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _32 = Arguments::<'_>::new_v1(move _33, move _34) -> [return: bb15, unwind continue];
    }

    bb15: {
        _31 = _print(move _32) -> [return: bb16, unwind continue];
    }

    bb16: {
        _55 = const _;
        _40 = _55 as &[&str] (Pointer(Unsize));
        _54 = const _;
        _44 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_54) -> [return: bb17, unwind continue];
    }

    bb17: {
        _43 = [move _44];
        _42 = &_43;
        _41 = _42 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _39 = Arguments::<'_>::new_v1(move _40, move _41) -> [return: bb18, unwind continue];
    }

    bb18: {
        _38 = _print(move _39) -> [return: bb19, unwind continue];
    }

    bb19: {
        _53 = const _;
        _47 = _53 as &[&str] (Pointer(Unsize));
        _52 = const _;
        _51 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_52) -> [return: bb20, unwind continue];
    }

    bb20: {
        _50 = [move _51];
        _49 = &_50;
        _48 = _49 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _46 = Arguments::<'_>::new_v1(move _47, move _48) -> [return: bb21, unwind continue];
    }

    bb21: {
        _45 = _print(move _46) -> [return: bb22, unwind continue];
    }

    bb22: {
        return;
    }
}

promoted[0] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 0.0199999996f32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Hello ", const "!\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 0.0199999996f32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Hello ", const "!\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 0.0199999996f32;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Hello ", const "!\n"];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 0.0199999996f32;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Hello ", const "!\n"];
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 0.0199999996f32;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Hello ", const "!\n"];
        _0 = &_1;
        return;
    }
}
