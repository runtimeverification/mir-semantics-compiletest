// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 0];
    let _6: [core::fmt::rt::Argument<'_>; 0];
    let _7: ();
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 0];
    let _12: [core::fmt::rt::Argument<'_>; 0];
    let _13: ();
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let _17: &[core::fmt::rt::Argument<'_>; 2];
    let _18: [core::fmt::rt::Argument<'_>; 2];
    let mut _19: core::fmt::rt::Argument<'_>;
    let mut _20: core::fmt::rt::Argument<'_>;
    let mut _21: &[core::fmt::rt::Placeholder];
    let _22: &[core::fmt::rt::Placeholder; 1];
    let _23: [core::fmt::rt::Placeholder; 1];
    let mut _24: core::fmt::rt::Placeholder;
    let mut _25: core::fmt::rt::Alignment;
    let mut _26: core::fmt::rt::Count;
    let mut _27: core::fmt::rt::Count;
    let mut _28: core::fmt::rt::UnsafeArg;
    let _29: ();
    let mut _30: std::fmt::Arguments<'_>;
    let mut _31: &[&str];
    let mut _32: &[core::fmt::rt::Argument<'_>];
    let _33: &[core::fmt::rt::Argument<'_>; 3];
    let _34: [core::fmt::rt::Argument<'_>; 3];
    let mut _35: (&f32, &usize, &usize);
    let mut _36: core::fmt::rt::Argument<'_>;
    let mut _37: core::fmt::rt::Argument<'_>;
    let mut _38: core::fmt::rt::Argument<'_>;
    let mut _39: &[core::fmt::rt::Placeholder];
    let _40: &[core::fmt::rt::Placeholder; 1];
    let _41: [core::fmt::rt::Placeholder; 1];
    let mut _42: core::fmt::rt::Placeholder;
    let mut _43: core::fmt::rt::Alignment;
    let mut _44: core::fmt::rt::Count;
    let mut _45: core::fmt::rt::Count;
    let mut _46: core::fmt::rt::UnsafeArg;
    let _47: ();
    let mut _48: std::fmt::Arguments<'_>;
    let mut _49: &[&str];
    let mut _50: &[core::fmt::rt::Argument<'_>];
    let _51: &[core::fmt::rt::Argument<'_>; 3];
    let _52: [core::fmt::rt::Argument<'_>; 3];
    let mut _53: (&f32, &usize, &usize);
    let mut _54: core::fmt::rt::Argument<'_>;
    let mut _55: core::fmt::rt::Argument<'_>;
    let mut _56: core::fmt::rt::Argument<'_>;
    let mut _57: &[core::fmt::rt::Placeholder];
    let _58: &[core::fmt::rt::Placeholder; 1];
    let _59: [core::fmt::rt::Placeholder; 1];
    let mut _60: core::fmt::rt::Placeholder;
    let mut _61: core::fmt::rt::Alignment;
    let mut _62: core::fmt::rt::Count;
    let mut _63: core::fmt::rt::Count;
    let mut _64: core::fmt::rt::UnsafeArg;
    let _65: ();
    let mut _66: std::fmt::Arguments<'_>;
    let mut _67: &[&str];
    let mut _68: &[core::fmt::rt::Argument<'_>];
    let _69: &[core::fmt::rt::Argument<'_>; 6];
    let _70: [core::fmt::rt::Argument<'_>; 6];
    let mut _71: (&f32, &usize, &usize, &f32, &usize, &usize);
    let mut _72: core::fmt::rt::Argument<'_>;
    let mut _73: core::fmt::rt::Argument<'_>;
    let mut _74: core::fmt::rt::Argument<'_>;
    let mut _75: core::fmt::rt::Argument<'_>;
    let mut _76: core::fmt::rt::Argument<'_>;
    let mut _77: core::fmt::rt::Argument<'_>;
    let mut _78: &[core::fmt::rt::Placeholder];
    let _79: &[core::fmt::rt::Placeholder; 3];
    let _80: [core::fmt::rt::Placeholder; 3];
    let mut _81: core::fmt::rt::Placeholder;
    let mut _82: core::fmt::rt::Alignment;
    let mut _83: core::fmt::rt::Count;
    let mut _84: core::fmt::rt::Count;
    let mut _85: core::fmt::rt::Placeholder;
    let mut _86: core::fmt::rt::Alignment;
    let mut _87: core::fmt::rt::Count;
    let mut _88: core::fmt::rt::Count;
    let mut _89: core::fmt::rt::Placeholder;
    let mut _90: core::fmt::rt::Alignment;
    let mut _91: core::fmt::rt::Count;
    let mut _92: core::fmt::rt::Count;
    let mut _93: core::fmt::rt::UnsafeArg;
    let _94: ();
    let mut _95: std::fmt::Arguments<'_>;
    let mut _96: &[&str];
    let mut _97: &[core::fmt::rt::Argument<'_>];
    let _98: &[core::fmt::rt::Argument<'_>; 1];
    let _99: [core::fmt::rt::Argument<'_>; 1];
    let mut _100: core::fmt::rt::Argument<'_>;
    let mut _101: &[core::fmt::rt::Placeholder];
    let _102: &[core::fmt::rt::Placeholder; 1];
    let _103: [core::fmt::rt::Placeholder; 1];
    let mut _104: core::fmt::rt::Placeholder;
    let mut _105: core::fmt::rt::Alignment;
    let mut _106: core::fmt::rt::Count;
    let mut _107: core::fmt::rt::Count;
    let mut _108: core::fmt::rt::UnsafeArg;
    let _109: ();
    let mut _110: std::fmt::Arguments<'_>;
    let mut _111: &[&str];
    let mut _112: &[core::fmt::rt::Argument<'_>];
    let _113: &[core::fmt::rt::Argument<'_>; 1];
    let _114: [core::fmt::rt::Argument<'_>; 1];
    let mut _115: core::fmt::rt::Argument<'_>;
    let mut _116: &[core::fmt::rt::Placeholder];
    let _117: &[core::fmt::rt::Placeholder; 1];
    let _118: [core::fmt::rt::Placeholder; 1];
    let mut _119: core::fmt::rt::Placeholder;
    let mut _120: core::fmt::rt::Alignment;
    let mut _121: core::fmt::rt::Count;
    let mut _122: core::fmt::rt::Count;
    let mut _123: core::fmt::rt::UnsafeArg;
    let _124: ();
    let mut _125: std::fmt::Arguments<'_>;
    let mut _126: &[&str];
    let mut _127: &[core::fmt::rt::Argument<'_>];
    let _128: &[core::fmt::rt::Argument<'_>; 3];
    let _129: [core::fmt::rt::Argument<'_>; 3];
    let mut _130: (&f32, &usize, &usize);
    let mut _131: core::fmt::rt::Argument<'_>;
    let mut _132: core::fmt::rt::Argument<'_>;
    let mut _133: core::fmt::rt::Argument<'_>;
    let mut _134: &[core::fmt::rt::Placeholder];
    let _135: &[core::fmt::rt::Placeholder; 1];
    let _136: [core::fmt::rt::Placeholder; 1];
    let mut _137: core::fmt::rt::Placeholder;
    let mut _138: core::fmt::rt::Alignment;
    let mut _139: core::fmt::rt::Count;
    let mut _140: core::fmt::rt::Count;
    let mut _141: core::fmt::rt::UnsafeArg;
    let _142: usize;
    let _144: ();
    let mut _145: std::fmt::Arguments<'_>;
    let mut _146: &[&str];
    let mut _147: &[core::fmt::rt::Argument<'_>];
    let _148: &[core::fmt::rt::Argument<'_>; 3];
    let _149: [core::fmt::rt::Argument<'_>; 3];
    let mut _150: core::fmt::rt::Argument<'_>;
    let mut _151: core::fmt::rt::Argument<'_>;
    let _152: &usize;
    let mut _153: core::fmt::rt::Argument<'_>;
    let _154: &usize;
    let mut _155: &[core::fmt::rt::Placeholder];
    let _156: &[core::fmt::rt::Placeholder; 1];
    let _157: [core::fmt::rt::Placeholder; 1];
    let mut _158: core::fmt::rt::Placeholder;
    let mut _159: core::fmt::rt::Alignment;
    let mut _160: core::fmt::rt::Count;
    let mut _161: core::fmt::rt::Count;
    let mut _162: core::fmt::rt::UnsafeArg;
    let _164: ();
    let mut _165: std::fmt::Arguments<'_>;
    let mut _166: &[&str];
    let mut _167: &[core::fmt::rt::Argument<'_>];
    let _168: &[core::fmt::rt::Argument<'_>; 2];
    let _169: [core::fmt::rt::Argument<'_>; 2];
    let mut _170: (&usize,);
    let mut _171: &usize;
    let mut _172: core::fmt::rt::Argument<'_>;
    let mut _173: core::fmt::rt::Argument<'_>;
    let mut _174: &[core::fmt::rt::Placeholder];
    let _175: &[core::fmt::rt::Placeholder; 1];
    let _176: [core::fmt::rt::Placeholder; 1];
    let mut _177: core::fmt::rt::Placeholder;
    let mut _178: core::fmt::rt::Alignment;
    let mut _179: core::fmt::rt::Count;
    let mut _180: core::fmt::rt::Count;
    let mut _181: core::fmt::rt::UnsafeArg;
    let _182: ();
    let mut _183: std::fmt::Arguments<'_>;
    let mut _184: &[&str];
    let mut _185: &[core::fmt::rt::Argument<'_>];
    let _186: &[core::fmt::rt::Argument<'_>; 2];
    let _187: [core::fmt::rt::Argument<'_>; 2];
    let mut _188: (&usize,);
    let mut _189: &usize;
    let mut _190: core::fmt::rt::Argument<'_>;
    let mut _191: core::fmt::rt::Argument<'_>;
    let mut _192: &[core::fmt::rt::Placeholder];
    let _193: &[core::fmt::rt::Placeholder; 1];
    let _194: [core::fmt::rt::Placeholder; 1];
    let mut _195: core::fmt::rt::Placeholder;
    let mut _196: core::fmt::rt::Alignment;
    let mut _197: core::fmt::rt::Count;
    let mut _198: core::fmt::rt::Count;
    let mut _199: core::fmt::rt::UnsafeArg;
    let _200: ();
    let mut _201: std::fmt::Arguments<'_>;
    let mut _202: &[&str];
    let mut _203: &[core::fmt::rt::Argument<'_>];
    let _204: &[core::fmt::rt::Argument<'_>; 2];
    let _205: [core::fmt::rt::Argument<'_>; 2];
    let mut _206: (&usize,);
    let mut _207: &usize;
    let mut _208: core::fmt::rt::Argument<'_>;
    let mut _209: core::fmt::rt::Argument<'_>;
    let mut _210: &[core::fmt::rt::Placeholder];
    let _211: &[core::fmt::rt::Placeholder; 1];
    let _212: [core::fmt::rt::Placeholder; 1];
    let mut _213: core::fmt::rt::Placeholder;
    let mut _214: core::fmt::rt::Alignment;
    let mut _215: core::fmt::rt::Count;
    let mut _216: core::fmt::rt::Count;
    let mut _217: core::fmt::rt::UnsafeArg;
    let _218: ();
    let mut _219: std::fmt::Arguments<'_>;
    let mut _220: &[&str];
    let mut _221: &[core::fmt::rt::Argument<'_>];
    let _222: &[core::fmt::rt::Argument<'_>; 2];
    let _223: [core::fmt::rt::Argument<'_>; 2];
    let mut _224: (&usize,);
    let mut _225: &usize;
    let mut _226: core::fmt::rt::Argument<'_>;
    let mut _227: core::fmt::rt::Argument<'_>;
    let mut _228: &[core::fmt::rt::Placeholder];
    let _229: &[core::fmt::rt::Placeholder; 1];
    let _230: [core::fmt::rt::Placeholder; 1];
    let mut _231: core::fmt::rt::Placeholder;
    let mut _232: core::fmt::rt::Alignment;
    let mut _233: core::fmt::rt::Count;
    let mut _234: core::fmt::rt::Count;
    let mut _235: core::fmt::rt::UnsafeArg;
    let _236: ();
    let mut _237: std::fmt::Arguments<'_>;
    let mut _238: &[&str];
    let mut _239: &[core::fmt::rt::Argument<'_>];
    let _240: &[core::fmt::rt::Argument<'_>; 0];
    let _241: [core::fmt::rt::Argument<'_>; 0];
    let _242: ();
    let mut _243: std::fmt::Arguments<'_>;
    let mut _244: &[&str];
    let mut _245: &[core::fmt::rt::Argument<'_>];
    let _246: &[core::fmt::rt::Argument<'_>; 3];
    let _247: [core::fmt::rt::Argument<'_>; 3];
    let mut _248: (&f64, &usize, &usize);
    let mut _249: core::fmt::rt::Argument<'_>;
    let mut _250: core::fmt::rt::Argument<'_>;
    let mut _251: core::fmt::rt::Argument<'_>;
    let mut _252: &[core::fmt::rt::Placeholder];
    let _253: &[core::fmt::rt::Placeholder; 1];
    let _254: [core::fmt::rt::Placeholder; 1];
    let mut _255: core::fmt::rt::Placeholder;
    let mut _256: core::fmt::rt::Alignment;
    let mut _257: core::fmt::rt::Count;
    let mut _258: core::fmt::rt::Count;
    let mut _259: core::fmt::rt::UnsafeArg;
    let _260: ();
    let mut _261: std::fmt::Arguments<'_>;
    let mut _262: &[&str];
    let mut _263: &[core::fmt::rt::Argument<'_>];
    let _264: &[core::fmt::rt::Argument<'_>; 3];
    let _265: [core::fmt::rt::Argument<'_>; 3];
    let mut _266: (&f64, &usize, &usize);
    let mut _267: core::fmt::rt::Argument<'_>;
    let mut _268: core::fmt::rt::Argument<'_>;
    let mut _269: core::fmt::rt::Argument<'_>;
    let mut _270: &[core::fmt::rt::Placeholder];
    let _271: &[core::fmt::rt::Placeholder; 1];
    let _272: [core::fmt::rt::Placeholder; 1];
    let mut _273: core::fmt::rt::Placeholder;
    let mut _274: core::fmt::rt::Alignment;
    let mut _275: core::fmt::rt::Count;
    let mut _276: core::fmt::rt::Count;
    let mut _277: core::fmt::rt::UnsafeArg;
    let _278: ();
    let mut _279: std::fmt::Arguments<'_>;
    let mut _280: &[&str];
    let mut _281: &[core::fmt::rt::Argument<'_>];
    let _282: &[core::fmt::rt::Argument<'_>; 3];
    let _283: [core::fmt::rt::Argument<'_>; 3];
    let mut _284: (&f64, &usize, &usize);
    let mut _285: core::fmt::rt::Argument<'_>;
    let mut _286: core::fmt::rt::Argument<'_>;
    let mut _287: core::fmt::rt::Argument<'_>;
    let mut _288: &[core::fmt::rt::Placeholder];
    let _289: &[core::fmt::rt::Placeholder; 1];
    let _290: [core::fmt::rt::Placeholder; 1];
    let mut _291: core::fmt::rt::Placeholder;
    let mut _292: core::fmt::rt::Alignment;
    let mut _293: core::fmt::rt::Count;
    let mut _294: core::fmt::rt::Count;
    let mut _295: core::fmt::rt::UnsafeArg;
    let mut _315: &usize;
    let mut _316: &usize;
    let mut _317: &f32;
    let mut _318: &[&str; 2];
    let mut _319: &f32;
    let mut _320: &[&str; 2];
    let mut _321: &f32;
    let mut _322: &[&str; 2];
    let mut _323: &usize;
    let mut _324: &usize;
    let mut _325: &f32;
    let mut _326: &usize;
    let mut _327: &usize;
    let mut _328: &f32;
    let mut _329: &[&str; 4];
    let mut _330: &usize;
    let mut _331: &usize;
    let mut _332: &f32;
    let mut _333: &[&str; 2];
    let mut _334: &usize;
    let mut _335: &usize;
    let mut _336: &f32;
    let mut _337: &[&str; 2];
    let mut _338: &usize;
    let mut _339: &&str;
    let mut _340: &[&str; 2];
    let mut _341: &[&str; 1];
    let mut _342: &[&str; 1];
    let mut _343: &f32;
    let mut _344: &usize;
    let mut _345: &usize;
    let mut _346: &f32;
    let mut _347: &usize;
    let mut _348: &usize;
    let mut _349: &f32;
    let mut _350: &f32;
    let mut _351: &usize;
    let mut _352: &usize;
    let mut _353: &usize;
    let mut _354: &usize;
    let mut _355: &f32;
    let mut _356: &usize;
    let mut _357: &usize;
    let mut _358: &usize;
    let mut _359: &usize;
    let mut _360: &usize;
    let mut _361: &usize;
    let mut _362: &usize;
    let mut _363: &usize;
    let mut _364: &usize;
    let mut _365: &usize;
    let mut _366: &f64;
    let mut _367: &usize;
    let mut _368: &usize;
    let mut _369: &f64;
    let mut _370: &usize;
    let mut _371: &usize;
    let mut _372: &f64;
    let mut _373: &usize;
    let mut _374: &usize;
    scope 1 {
    }
    scope 2 {
        debug args => _35;
    }
    scope 3 {
    }
    scope 4 {
        debug args => _53;
    }
    scope 5 {
    }
    scope 6 {
        debug args => _71;
    }
    scope 7 {
    }
    scope 8 {
    }
    scope 9 {
    }
    scope 10 {
        debug args => _130;
    }
    scope 11 {
    }
    scope 12 {
        debug width => const 5_usize;
        let _143: usize;
        scope 13 {
            debug precision => const 2_usize;
            let _163: usize;
            let mut _313: &f32;
            let mut _314: &[&str; 2];
            scope 14 {
            }
            scope 15 {
                debug val => const 5_usize;
                let mut _296: &usize;
                let mut _297: &usize;
                let mut _298: &f64;
                let mut _299: &[&str; 2];
                let mut _300: &usize;
                let mut _301: &usize;
                let mut _302: &f64;
                let mut _303: &[&str; 2];
                let mut _304: &usize;
                let mut _305: &usize;
                let mut _306: &f64;
                let mut _307: &[&str; 2];
                let mut _308: &[&str; 1];
                let mut _309: &[&str; 2];
                let mut _310: &[&str; 2];
                let mut _311: &[&str; 2];
                let mut _312: &[&str; 2];
                scope 16 {
                    debug args => _170;
                }
                scope 17 {
                }
                scope 18 {
                    debug args => _188;
                }
                scope 19 {
                }
                scope 20 {
                    debug args => _206;
                }
                scope 21 {
                }
                scope 22 {
                    debug args => _224;
                }
                scope 23 {
                }
                scope 24 {
                    debug args => _248;
                }
                scope 25 {
                }
                scope 26 {
                    debug args => _266;
                }
                scope 27 {
                }
                scope 28 {
                    debug args => _284;
                }
                scope 29 {
                }
            }
        }
    }

    bb0: {
        _342 = const _;
        _3 = _342 as &[&str] (Pointer(Unsize));
        _6 = core::fmt::rt::Argument::<'_>::none() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = _print(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _341 = const _;
        _9 = _341 as &[&str] (Pointer(Unsize));
        _12 = core::fmt::rt::Argument::<'_>::none() -> [return: bb4, unwind continue];
    }

    bb4: {
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        _7 = _print(move _8) -> [return: bb6, unwind continue];
    }

    bb6: {
        _340 = const _;
        _15 = _340 as &[&str] (Pointer(Unsize));
        _339 = const _;
        _19 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_339) -> [return: bb7, unwind continue];
    }

    bb7: {
        _338 = const _;
        _20 = core::fmt::rt::Argument::<'_>::from_usize(_338) -> [return: bb8, unwind continue];
    }

    bb8: {
        _18 = [move _19, move _20];
        _17 = &_18;
        _16 = _17 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _25 = core::fmt::rt::Alignment::Unknown;
        _26 = core::fmt::rt::Count::Implied;
        _27 = core::fmt::rt::Count::Param(const 1_usize) -> [return: bb9, unwind continue];
    }

    bb9: {
        _24 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _25, const 0_u32, move _26, move _27) -> [return: bb10, unwind continue];
    }

    bb10: {
        _23 = [move _24];
        _22 = &_23;
        _21 = _22 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _28 = core::fmt::rt::UnsafeArg::new() -> [return: bb11, unwind continue];
    }

    bb11: {
        _14 = Arguments::<'_>::new_v1_formatted(move _15, move _16, move _21, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb12, unwind continue];
    }

    bb12: {
        _13 = _print(move _14) -> [return: bb13, unwind continue];
    }

    bb13: {
        _337 = const _;
        _31 = _337 as &[&str] (Pointer(Unsize));
        _336 = const _;
        _335 = const _;
        _334 = const _;
        _35 = (_336, _335, _334);
        _343 = deref_copy (_35.0: &f32);
        _36 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_343) -> [return: bb14, unwind continue];
    }

    bb14: {
        _344 = deref_copy (_35.2: &usize);
        _37 = core::fmt::rt::Argument::<'_>::from_usize(_344) -> [return: bb15, unwind continue];
    }

    bb15: {
        _345 = deref_copy (_35.1: &usize);
        _38 = core::fmt::rt::Argument::<'_>::from_usize(_345) -> [return: bb16, unwind continue];
    }

    bb16: {
        _34 = [move _36, move _37, move _38];
        _33 = &_34;
        _32 = _33 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _43 = core::fmt::rt::Alignment::Unknown;
        _44 = core::fmt::rt::Count::Param(const 1_usize) -> [return: bb17, unwind continue];
    }

    bb17: {
        _45 = core::fmt::rt::Count::Param(const 2_usize) -> [return: bb18, unwind continue];
    }

    bb18: {
        _42 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _43, const 0_u32, move _44, move _45) -> [return: bb19, unwind continue];
    }

    bb19: {
        _41 = [move _42];
        _40 = &_41;
        _39 = _40 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _46 = core::fmt::rt::UnsafeArg::new() -> [return: bb20, unwind continue];
    }

    bb20: {
        _30 = Arguments::<'_>::new_v1_formatted(move _31, move _32, move _39, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb21, unwind continue];
    }

    bb21: {
        _29 = _print(move _30) -> [return: bb22, unwind continue];
    }

    bb22: {
        _333 = const _;
        _49 = _333 as &[&str] (Pointer(Unsize));
        _332 = const _;
        _331 = const _;
        _330 = const _;
        _53 = (_332, _331, _330);
        _346 = deref_copy (_53.0: &f32);
        _54 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_346) -> [return: bb23, unwind continue];
    }

    bb23: {
        _347 = deref_copy (_53.2: &usize);
        _55 = core::fmt::rt::Argument::<'_>::from_usize(_347) -> [return: bb24, unwind continue];
    }

    bb24: {
        _348 = deref_copy (_53.1: &usize);
        _56 = core::fmt::rt::Argument::<'_>::from_usize(_348) -> [return: bb25, unwind continue];
    }

    bb25: {
        _52 = [move _54, move _55, move _56];
        _51 = &_52;
        _50 = _51 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _61 = core::fmt::rt::Alignment::Unknown;
        _62 = core::fmt::rt::Count::Param(const 1_usize) -> [return: bb26, unwind continue];
    }

    bb26: {
        _63 = core::fmt::rt::Count::Param(const 2_usize) -> [return: bb27, unwind continue];
    }

    bb27: {
        _60 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _61, const 0_u32, move _62, move _63) -> [return: bb28, unwind continue];
    }

    bb28: {
        _59 = [move _60];
        _58 = &_59;
        _57 = _58 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _64 = core::fmt::rt::UnsafeArg::new() -> [return: bb29, unwind continue];
    }

    bb29: {
        _48 = Arguments::<'_>::new_v1_formatted(move _49, move _50, move _57, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb30, unwind continue];
    }

    bb30: {
        _47 = _print(move _48) -> [return: bb31, unwind continue];
    }

    bb31: {
        _329 = const _;
        _67 = _329 as &[&str] (Pointer(Unsize));
        _328 = const _;
        _327 = const _;
        _326 = const _;
        _325 = const _;
        _324 = const _;
        _323 = const _;
        _71 = (_328, _327, _326, _325, _324, _323);
        _349 = deref_copy (_71.0: &f32);
        _72 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_349) -> [return: bb32, unwind continue];
    }

    bb32: {
        _350 = deref_copy (_71.3: &f32);
        _73 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_350) -> [return: bb33, unwind continue];
    }

    bb33: {
        _351 = deref_copy (_71.2: &usize);
        _74 = core::fmt::rt::Argument::<'_>::from_usize(_351) -> [return: bb34, unwind continue];
    }

    bb34: {
        _352 = deref_copy (_71.1: &usize);
        _75 = core::fmt::rt::Argument::<'_>::from_usize(_352) -> [return: bb35, unwind continue];
    }

    bb35: {
        _353 = deref_copy (_71.5: &usize);
        _76 = core::fmt::rt::Argument::<'_>::from_usize(_353) -> [return: bb36, unwind continue];
    }

    bb36: {
        _354 = deref_copy (_71.4: &usize);
        _77 = core::fmt::rt::Argument::<'_>::from_usize(_354) -> [return: bb37, unwind continue];
    }

    bb37: {
        _70 = [move _72, move _73, move _74, move _75, move _76, move _77];
        _69 = &_70;
        _68 = _69 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _82 = core::fmt::rt::Alignment::Unknown;
        _83 = core::fmt::rt::Count::Param(const 2_usize) -> [return: bb38, unwind continue];
    }

    bb38: {
        _84 = core::fmt::rt::Count::Param(const 3_usize) -> [return: bb39, unwind continue];
    }

    bb39: {
        _81 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _82, const 0_u32, move _83, move _84) -> [return: bb40, unwind continue];
    }

    bb40: {
        _86 = core::fmt::rt::Alignment::Unknown;
        _87 = core::fmt::rt::Count::Param(const 4_usize) -> [return: bb41, unwind continue];
    }

    bb41: {
        _88 = core::fmt::rt::Count::Param(const 5_usize) -> [return: bb42, unwind continue];
    }

    bb42: {
        _85 = core::fmt::rt::Placeholder::new(const 1_usize, const ' ', move _86, const 0_u32, move _87, move _88) -> [return: bb43, unwind continue];
    }

    bb43: {
        _90 = core::fmt::rt::Alignment::Unknown;
        _91 = core::fmt::rt::Count::Implied;
        _92 = core::fmt::rt::Count::Implied;
        _89 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _90, const 0_u32, move _91, move _92) -> [return: bb44, unwind continue];
    }

    bb44: {
        _80 = [move _81, move _85, move _89];
        _79 = &_80;
        _78 = _79 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _93 = core::fmt::rt::UnsafeArg::new() -> [return: bb45, unwind continue];
    }

    bb45: {
        _66 = Arguments::<'_>::new_v1_formatted(move _67, move _68, move _78, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb46, unwind continue];
    }

    bb46: {
        _65 = _print(move _66) -> [return: bb47, unwind continue];
    }

    bb47: {
        _322 = const _;
        _96 = _322 as &[&str] (Pointer(Unsize));
        _321 = const _;
        _100 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_321) -> [return: bb48, unwind continue];
    }

    bb48: {
        _99 = [move _100];
        _98 = &_99;
        _97 = _98 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _105 = core::fmt::rt::Alignment::Unknown;
        _106 = core::fmt::rt::Count::Is(const 1_usize) -> [return: bb49, unwind continue];
    }

    bb49: {
        _107 = core::fmt::rt::Count::Implied;
        _104 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _105, const 8_u32, move _106, move _107) -> [return: bb50, unwind continue];
    }

    bb50: {
        _103 = [move _104];
        _102 = &_103;
        _101 = _102 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _108 = core::fmt::rt::UnsafeArg::new() -> [return: bb51, unwind continue];
    }

    bb51: {
        _95 = Arguments::<'_>::new_v1_formatted(move _96, move _97, move _101, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb52, unwind continue];
    }

    bb52: {
        _94 = _print(move _95) -> [return: bb53, unwind continue];
    }

    bb53: {
        _320 = const _;
        _111 = _320 as &[&str] (Pointer(Unsize));
        _319 = const _;
        _115 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_319) -> [return: bb54, unwind continue];
    }

    bb54: {
        _114 = [move _115];
        _113 = &_114;
        _112 = _113 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _120 = core::fmt::rt::Alignment::Unknown;
        _121 = core::fmt::rt::Count::Is(const 1_usize) -> [return: bb55, unwind continue];
    }

    bb55: {
        _122 = core::fmt::rt::Count::Implied;
        _119 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _120, const 8_u32, move _121, move _122) -> [return: bb56, unwind continue];
    }

    bb56: {
        _118 = [move _119];
        _117 = &_118;
        _116 = _117 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _123 = core::fmt::rt::UnsafeArg::new() -> [return: bb57, unwind continue];
    }

    bb57: {
        _110 = Arguments::<'_>::new_v1_formatted(move _111, move _112, move _116, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb58, unwind continue];
    }

    bb58: {
        _109 = _print(move _110) -> [return: bb59, unwind continue];
    }

    bb59: {
        _318 = const _;
        _126 = _318 as &[&str] (Pointer(Unsize));
        _317 = const _;
        _316 = const _;
        _315 = const _;
        _130 = (_317, _316, _315);
        _355 = deref_copy (_130.0: &f32);
        _131 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_355) -> [return: bb60, unwind continue];
    }

    bb60: {
        _356 = deref_copy (_130.2: &usize);
        _132 = core::fmt::rt::Argument::<'_>::from_usize(_356) -> [return: bb61, unwind continue];
    }

    bb61: {
        _357 = deref_copy (_130.1: &usize);
        _133 = core::fmt::rt::Argument::<'_>::from_usize(_357) -> [return: bb62, unwind continue];
    }

    bb62: {
        _129 = [move _131, move _132, move _133];
        _128 = &_129;
        _127 = _128 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _138 = core::fmt::rt::Alignment::Unknown;
        _139 = core::fmt::rt::Count::Param(const 1_usize) -> [return: bb63, unwind continue];
    }

    bb63: {
        _140 = core::fmt::rt::Count::Param(const 2_usize) -> [return: bb64, unwind continue];
    }

    bb64: {
        _137 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _138, const 0_u32, move _139, move _140) -> [return: bb65, unwind continue];
    }

    bb65: {
        _136 = [move _137];
        _135 = &_136;
        _134 = _135 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _141 = core::fmt::rt::UnsafeArg::new() -> [return: bb66, unwind continue];
    }

    bb66: {
        _125 = Arguments::<'_>::new_v1_formatted(move _126, move _127, move _134, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb67, unwind continue];
    }

    bb67: {
        _124 = _print(move _125) -> [return: bb68, unwind continue];
    }

    bb68: {
        _142 = const 5_usize;
        _143 = const 2_usize;
        _314 = const _;
        _146 = _314 as &[&str] (Pointer(Unsize));
        _313 = const _;
        _150 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_313) -> [return: bb69, unwind continue];
    }

    bb69: {
        _152 = &_143;
        _151 = core::fmt::rt::Argument::<'_>::from_usize(_152) -> [return: bb70, unwind continue];
    }

    bb70: {
        _154 = &_142;
        _153 = core::fmt::rt::Argument::<'_>::from_usize(_154) -> [return: bb71, unwind continue];
    }

    bb71: {
        _149 = [move _150, move _151, move _153];
        _148 = &_149;
        _147 = _148 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _159 = core::fmt::rt::Alignment::Unknown;
        _160 = core::fmt::rt::Count::Param(const 1_usize) -> [return: bb72, unwind continue];
    }

    bb72: {
        _161 = core::fmt::rt::Count::Param(const 2_usize) -> [return: bb73, unwind continue];
    }

    bb73: {
        _158 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _159, const 0_u32, move _160, move _161) -> [return: bb74, unwind continue];
    }

    bb74: {
        _157 = [move _158];
        _156 = &_157;
        _155 = _156 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _162 = core::fmt::rt::UnsafeArg::new() -> [return: bb75, unwind continue];
    }

    bb75: {
        _145 = Arguments::<'_>::new_v1_formatted(move _146, move _147, move _155, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb76, unwind continue];
    }

    bb76: {
        _144 = _print(move _145) -> [return: bb77, unwind continue];
    }

    bb77: {
        _163 = const 5_usize;
        _312 = const _;
        _166 = _312 as &[&str] (Pointer(Unsize));
        _171 = &_163;
        _170 = (move _171,);
        _358 = deref_copy (_170.0: &usize);
        _172 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_358) -> [return: bb78, unwind continue];
    }

    bb78: {
        _359 = deref_copy (_170.0: &usize);
        _173 = core::fmt::rt::Argument::<'_>::from_usize(_359) -> [return: bb79, unwind continue];
    }

    bb79: {
        _169 = [move _172, move _173];
        _168 = &_169;
        _167 = _168 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _178 = core::fmt::rt::Alignment::Unknown;
        _179 = core::fmt::rt::Count::Implied;
        _180 = core::fmt::rt::Count::Param(const 1_usize) -> [return: bb80, unwind continue];
    }

    bb80: {
        _177 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _178, const 0_u32, move _179, move _180) -> [return: bb81, unwind continue];
    }

    bb81: {
        _176 = [move _177];
        _175 = &_176;
        _174 = _175 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _181 = core::fmt::rt::UnsafeArg::new() -> [return: bb82, unwind continue];
    }

    bb82: {
        _165 = Arguments::<'_>::new_v1_formatted(move _166, move _167, move _174, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb83, unwind continue];
    }

    bb83: {
        _164 = _print(move _165) -> [return: bb84, unwind continue];
    }

    bb84: {
        _311 = const _;
        _184 = _311 as &[&str] (Pointer(Unsize));
        _189 = &_163;
        _188 = (move _189,);
        _360 = deref_copy (_188.0: &usize);
        _190 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_360) -> [return: bb85, unwind continue];
    }

    bb85: {
        _361 = deref_copy (_188.0: &usize);
        _191 = core::fmt::rt::Argument::<'_>::from_usize(_361) -> [return: bb86, unwind continue];
    }

    bb86: {
        _187 = [move _190, move _191];
        _186 = &_187;
        _185 = _186 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _196 = core::fmt::rt::Alignment::Unknown;
        _197 = core::fmt::rt::Count::Implied;
        _198 = core::fmt::rt::Count::Param(const 1_usize) -> [return: bb87, unwind continue];
    }

    bb87: {
        _195 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _196, const 0_u32, move _197, move _198) -> [return: bb88, unwind continue];
    }

    bb88: {
        _194 = [move _195];
        _193 = &_194;
        _192 = _193 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _199 = core::fmt::rt::UnsafeArg::new() -> [return: bb89, unwind continue];
    }

    bb89: {
        _183 = Arguments::<'_>::new_v1_formatted(move _184, move _185, move _192, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb90, unwind continue];
    }

    bb90: {
        _182 = _print(move _183) -> [return: bb91, unwind continue];
    }

    bb91: {
        _310 = const _;
        _202 = _310 as &[&str] (Pointer(Unsize));
        _207 = &_163;
        _206 = (move _207,);
        _362 = deref_copy (_206.0: &usize);
        _208 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_362) -> [return: bb92, unwind continue];
    }

    bb92: {
        _363 = deref_copy (_206.0: &usize);
        _209 = core::fmt::rt::Argument::<'_>::from_usize(_363) -> [return: bb93, unwind continue];
    }

    bb93: {
        _205 = [move _208, move _209];
        _204 = &_205;
        _203 = _204 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _214 = core::fmt::rt::Alignment::Unknown;
        _215 = core::fmt::rt::Count::Param(const 1_usize) -> [return: bb94, unwind continue];
    }

    bb94: {
        _216 = core::fmt::rt::Count::Param(const 1_usize) -> [return: bb95, unwind continue];
    }

    bb95: {
        _213 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _214, const 0_u32, move _215, move _216) -> [return: bb96, unwind continue];
    }

    bb96: {
        _212 = [move _213];
        _211 = &_212;
        _210 = _211 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _217 = core::fmt::rt::UnsafeArg::new() -> [return: bb97, unwind continue];
    }

    bb97: {
        _201 = Arguments::<'_>::new_v1_formatted(move _202, move _203, move _210, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb98, unwind continue];
    }

    bb98: {
        _200 = _print(move _201) -> [return: bb99, unwind continue];
    }

    bb99: {
        _309 = const _;
        _220 = _309 as &[&str] (Pointer(Unsize));
        _225 = &_163;
        _224 = (move _225,);
        _364 = deref_copy (_224.0: &usize);
        _226 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_364) -> [return: bb100, unwind continue];
    }

    bb100: {
        _365 = deref_copy (_224.0: &usize);
        _227 = core::fmt::rt::Argument::<'_>::from_usize(_365) -> [return: bb101, unwind continue];
    }

    bb101: {
        _223 = [move _226, move _227];
        _222 = &_223;
        _221 = _222 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _232 = core::fmt::rt::Alignment::Unknown;
        _233 = core::fmt::rt::Count::Param(const 1_usize) -> [return: bb102, unwind continue];
    }

    bb102: {
        _234 = core::fmt::rt::Count::Param(const 1_usize) -> [return: bb103, unwind continue];
    }

    bb103: {
        _231 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _232, const 0_u32, move _233, move _234) -> [return: bb104, unwind continue];
    }

    bb104: {
        _230 = [move _231];
        _229 = &_230;
        _228 = _229 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _235 = core::fmt::rt::UnsafeArg::new() -> [return: bb105, unwind continue];
    }

    bb105: {
        _219 = Arguments::<'_>::new_v1_formatted(move _220, move _221, move _228, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb106, unwind continue];
    }

    bb106: {
        _218 = _print(move _219) -> [return: bb107, unwind continue];
    }

    bb107: {
        _308 = const _;
        _238 = _308 as &[&str] (Pointer(Unsize));
        _241 = core::fmt::rt::Argument::<'_>::none() -> [return: bb108, unwind continue];
    }

    bb108: {
        _240 = &_241;
        _239 = _240 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _237 = Arguments::<'_>::new_v1(move _238, move _239) -> [return: bb109, unwind continue];
    }

    bb109: {
        _236 = _print(move _237) -> [return: bb110, unwind continue];
    }

    bb110: {
        _307 = const _;
        _244 = _307 as &[&str] (Pointer(Unsize));
        _306 = const _;
        _305 = const _;
        _304 = const _;
        _248 = (_306, _305, _304);
        _366 = deref_copy (_248.0: &f64);
        _249 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_366) -> [return: bb111, unwind continue];
    }

    bb111: {
        _367 = deref_copy (_248.2: &usize);
        _250 = core::fmt::rt::Argument::<'_>::from_usize(_367) -> [return: bb112, unwind continue];
    }

    bb112: {
        _368 = deref_copy (_248.1: &usize);
        _251 = core::fmt::rt::Argument::<'_>::from_usize(_368) -> [return: bb113, unwind continue];
    }

    bb113: {
        _247 = [move _249, move _250, move _251];
        _246 = &_247;
        _245 = _246 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _256 = core::fmt::rt::Alignment::Unknown;
        _257 = core::fmt::rt::Count::Param(const 1_usize) -> [return: bb114, unwind continue];
    }

    bb114: {
        _258 = core::fmt::rt::Count::Param(const 2_usize) -> [return: bb115, unwind continue];
    }

    bb115: {
        _255 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _256, const 0_u32, move _257, move _258) -> [return: bb116, unwind continue];
    }

    bb116: {
        _254 = [move _255];
        _253 = &_254;
        _252 = _253 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _259 = core::fmt::rt::UnsafeArg::new() -> [return: bb117, unwind continue];
    }

    bb117: {
        _243 = Arguments::<'_>::new_v1_formatted(move _244, move _245, move _252, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb118, unwind continue];
    }

    bb118: {
        _242 = _print(move _243) -> [return: bb119, unwind continue];
    }

    bb119: {
        _303 = const _;
        _262 = _303 as &[&str] (Pointer(Unsize));
        _302 = const _;
        _301 = const _;
        _300 = const _;
        _266 = (_302, _301, _300);
        _369 = deref_copy (_266.0: &f64);
        _267 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_369) -> [return: bb120, unwind continue];
    }

    bb120: {
        _370 = deref_copy (_266.2: &usize);
        _268 = core::fmt::rt::Argument::<'_>::from_usize(_370) -> [return: bb121, unwind continue];
    }

    bb121: {
        _371 = deref_copy (_266.1: &usize);
        _269 = core::fmt::rt::Argument::<'_>::from_usize(_371) -> [return: bb122, unwind continue];
    }

    bb122: {
        _265 = [move _267, move _268, move _269];
        _264 = &_265;
        _263 = _264 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _274 = core::fmt::rt::Alignment::Unknown;
        _275 = core::fmt::rt::Count::Param(const 1_usize) -> [return: bb123, unwind continue];
    }

    bb123: {
        _276 = core::fmt::rt::Count::Param(const 2_usize) -> [return: bb124, unwind continue];
    }

    bb124: {
        _273 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _274, const 0_u32, move _275, move _276) -> [return: bb125, unwind continue];
    }

    bb125: {
        _272 = [move _273];
        _271 = &_272;
        _270 = _271 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _277 = core::fmt::rt::UnsafeArg::new() -> [return: bb126, unwind continue];
    }

    bb126: {
        _261 = Arguments::<'_>::new_v1_formatted(move _262, move _263, move _270, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb127, unwind continue];
    }

    bb127: {
        _260 = _print(move _261) -> [return: bb128, unwind continue];
    }

    bb128: {
        _299 = const _;
        _280 = _299 as &[&str] (Pointer(Unsize));
        _298 = const _;
        _297 = const _;
        _296 = const _;
        _284 = (_298, _297, _296);
        _372 = deref_copy (_284.0: &f64);
        _285 = core::fmt::rt::Argument::<'_>::new_display::<f64>(_372) -> [return: bb129, unwind continue];
    }

    bb129: {
        _373 = deref_copy (_284.2: &usize);
        _286 = core::fmt::rt::Argument::<'_>::from_usize(_373) -> [return: bb130, unwind continue];
    }

    bb130: {
        _374 = deref_copy (_284.1: &usize);
        _287 = core::fmt::rt::Argument::<'_>::from_usize(_374) -> [return: bb131, unwind continue];
    }

    bb131: {
        _283 = [move _285, move _286, move _287];
        _282 = &_283;
        _281 = _282 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _292 = core::fmt::rt::Alignment::Unknown;
        _293 = core::fmt::rt::Count::Param(const 1_usize) -> [return: bb132, unwind continue];
    }

    bb132: {
        _294 = core::fmt::rt::Count::Param(const 2_usize) -> [return: bb133, unwind continue];
    }

    bb133: {
        _291 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _292, const 0_u32, move _293, move _294) -> [return: bb134, unwind continue];
    }

    bb134: {
        _290 = [move _291];
        _289 = &_290;
        _288 = _289 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _295 = core::fmt::rt::UnsafeArg::new() -> [return: bb135, unwind continue];
    }

    bb135: {
        _279 = Arguments::<'_>::new_v1_formatted(move _280, move _281, move _288, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb136, unwind continue];
    }

    bb136: {
        _278 = _print(move _279) -> [return: bb137, unwind continue];
    }

    bb137: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 1f64;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "{", const "}\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 1f64;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "aaaaaaaaaaaaaaa", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 1f64;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "aaaaaaaaaaaaaaa", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "1 1 1\n"];
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 0.0199999996f32;
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Hello ", const "!\n"];
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 5_usize;
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 0.0199999996f32;
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Hello ", const "!\n"];
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 0.0199999996f32;
        _0 = &_1;
        return;
    }
}

promoted[24] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Hello ", const "!\n"];
        _0 = &_1;
        return;
    }
}

promoted[25] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 0.0199999996f32;
        _0 = &_1;
        return;
    }
}

promoted[26] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Hello ", const "!\n"];
        _0 = &_1;
        return;
    }
}

promoted[27] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[28] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 5_usize;
        _0 = &_1;
        return;
    }
}

promoted[29] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 0.0199999996f32;
        _0 = &_1;
        return;
    }
}

promoted[30] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[31] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 5_usize;
        _0 = &_1;
        return;
    }
}

promoted[32] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 0.0199999996f32;
        _0 = &_1;
        return;
    }
}

promoted[33] in main: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "1, Hello ", const " ", const "! ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[34] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[35] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 5_usize;
        _0 = &_1;
        return;
    }
}

promoted[36] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 0.0199999996f32;
        _0 = &_1;
        return;
    }
}

promoted[37] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Hello ", const "!\n"];
        _0 = &_1;
        return;
    }
}

promoted[38] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[39] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 5_usize;
        _0 = &_1;
        return;
    }
}

promoted[40] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 0.0199999996f32;
        _0 = &_1;
        return;
    }
}

promoted[41] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Hello ", const "!\n"];
        _0 = &_1;
        return;
    }
}

promoted[42] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 5_usize;
        _0 = &_1;
        return;
    }
}

promoted[43] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "x";
        _0 = &_1;
        return;
    }
}

promoted[44] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Hello ", const "!\n"];
        _0 = &_1;
        return;
    }
}

promoted[45] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "0 1 2 3 4\n"];
        _0 = &_1;
        return;
    }
}

promoted[46] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "2 1\n"];
        _0 = &_1;
        return;
    }
}
