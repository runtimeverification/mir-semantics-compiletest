// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&[i32], &[i32]);
    let mut _2: &[i32];
    let _3: &[i32];
    let mut _4: &[i32];
    let _5: &[i32];
    let mut _6: &std::vec::Vec<i32>;
    let _7: std::vec::Vec<i32>;
    let mut _8: std::boxed::Box<[i32]>;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: *mut u8;
    let mut _12: std::boxed::Box<[i32; 3]>;
    let _13: &[i32];
    let _14: &[i32];
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: &[i32; 3];
    let mut _21: *const [i32; 3];
    let mut _22: *const ();
    let mut _23: usize;
    let mut _24: usize;
    let mut _25: usize;
    let mut _26: usize;
    let mut _27: bool;
    scope 1 {
    }
    scope 2 {
        debug left_val => _13;
        debug right_val => _14;
        let _17: core::panicking::AssertKind;
        scope 3 {
            debug kind => _17;
        }
    }

    bb0: {
        _20 = const _;
        _3 = <[i32; 3] as Index<RangeFull>>::index(_20, const RangeFull) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = _3;
        _9 = SizeOf([i32; 3]);
        _10 = AlignOf([i32; 3]);
        _11 = alloc::alloc::exchange_malloc(move _9, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        _12 = ShallowInitBox(move _11, [i32; 3]);
        _21 = (((_12.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _22 = _21 as *const () (PtrToPtr);
        _23 = _22 as usize (Transmute);
        _24 = AlignOf(i32);
        _25 = Sub(_24, const 1_usize);
        _26 = BitAnd(_23, _25);
        _27 = Eq(_26, const 0_usize);
        assert(_27, "misaligned pointer dereference: address must be a multiple of {} but is {}", _24, _23) -> [success: bb11, unwind unreachable];
    }

    bb3: {
        _6 = &_7;
        _5 = <Vec<i32> as Index<RangeFull>>::index(move _6, const RangeFull) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _4 = _5;
        _1 = (move _2, move _4);
        _13 = (_1.0: &[i32]);
        _14 = (_1.1: &[i32]);
        _16 = <[i32] as PartialEq>::eq(_13, _14) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<[i32], [i32]>(move _17, _13, _14, move _19) -> bb9;
    }

    bb7: {
        drop(_7) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_7) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        (*_21) = [const 1_i32, const 2_i32, const 3_i32];
        _8 = move _12 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _7 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _8) -> [return: bb3, unwind continue];
    }
}

promoted[0] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];
    let mut _1: [i32; 3];

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32];
        _0 = &_1;
        return;
    }
}
