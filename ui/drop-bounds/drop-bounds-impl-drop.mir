// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn voldemort_type() -> impl Drop {
    let mut _0: impl std::ops::Drop;     // return place in scope 0 at ui/drop-bounds/drop-bounds-impl-drop.rs:5:24: 5:33

    bb0: {
        return;                          // scope 0 at ui/drop-bounds/drop-bounds-impl-drop.rs:11:2: 11:2
    }
}

fn voldemort_type::<impl at ui/drop-bounds/drop-bounds-impl-drop.rs:7:3: 7:26>::drop(_1: &mut Voldemort) -> () {
    debug self => _1;                    // in scope 0 at ui/drop-bounds/drop-bounds-impl-drop.rs:8:13: 8:22
    let mut _0: ();                      // return place in scope 0 at ui/drop-bounds/drop-bounds-impl-drop.rs:8:24: 8:24

    bb0: {
        return;                          // scope 0 at ui/drop-bounds/drop-bounds-impl-drop.rs:8:26: 8:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/drop-bounds/drop-bounds-impl-drop.rs:12:11: 12:11
    let mut _1: impl std::ops::Drop;     // in scope 0 at ui/drop-bounds/drop-bounds-impl-drop.rs:13:11: 13:27
    scope 1 {
    }

    bb0: {
        _1 = voldemort_type() -> bb1;    // scope 0 at ui/drop-bounds/drop-bounds-impl-drop.rs:13:11: 13:27
                                         // mir::Constant
                                         // + span: ui/drop-bounds/drop-bounds-impl-drop.rs:13:11: 13:25
                                         // + literal: Const { ty: fn() -> impl Drop {voldemort_type}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/drop-bounds/drop-bounds-impl-drop.rs:13:27: 13:28
    }

    bb2: {
        return;                          // scope 0 at ui/drop-bounds/drop-bounds-impl-drop.rs:14:2: 14:2
    }
}
