// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/env-vars.rs:6:11: 6:11
    let mut _1: std::env::VarsOs;        // in scope 0 at ui/env-vars.rs:7:19: 7:28
    let mut _2: std::env::VarsOs;        // in scope 0 at ui/env-vars.rs:7:19: 7:28
    let mut _3: std::env::VarsOs;        // in scope 0 at ui/env-vars.rs:7:19: 7:28
    let mut _4: std::option::Option<(std::ffi::OsString, std::ffi::OsString)>; // in scope 0 at ui/env-vars.rs:7:19: 7:28
    let mut _5: &mut std::env::VarsOs;   // in scope 0 at ui/env-vars.rs:7:19: 7:28
    let mut _6: &mut std::env::VarsOs;   // in scope 0 at ui/env-vars.rs:7:19: 7:28
    let mut _7: isize;                   // in scope 0 at ui/env-vars.rs:7:5: 19:6
    let mut _10: bool;                   // in scope 0 at ui/env-vars.rs:12:12: 12:70
    let mut _12: &std::ffi::OsString;    // in scope 0 at ui/env-vars.rs:16:25: 16:27
    let mut _13: bool;                   // in scope 0 at ui/env-vars.rs:17:9: 18:70
    let mut _14: bool;                   // in scope 0 at ui/env-vars.rs:17:17: 17:55
    let mut _15: &std::option::Option<&std::ffi::OsStr>; // in scope 0 at ui/env-vars.rs:17:17: 17:42
    let _16: std::option::Option<&std::ffi::OsStr>; // in scope 0 at ui/env-vars.rs:17:17: 17:42
    let mut _17: std::option::Option<&std::ffi::OsString>; // in scope 0 at ui/env-vars.rs:17:17: 17:28
    let mut _18: &std::option::Option<std::ffi::OsString>; // in scope 0 at ui/env-vars.rs:17:17: 17:28
    let mut _19: [closure@ui/env-vars.rs:17:33: 17:36]; // in scope 0 at ui/env-vars.rs:17:33: 17:41
    let mut _20: &std::option::Option<&std::ffi::OsStr>; // in scope 0 at ui/env-vars.rs:17:46: 17:55
    let _21: std::option::Option<&std::ffi::OsStr>; // in scope 0 at ui/env-vars.rs:17:46: 17:55
    let mut _22: &std::ffi::OsStr;       // in scope 0 at ui/env-vars.rs:17:51: 17:54
    let _23: &std::ffi::OsStr;           // in scope 0 at ui/env-vars.rs:17:51: 17:54
    let _24: &std::ffi::OsStr;           // in scope 0 at ui/env-vars.rs:17:52: 17:54
    let mut _25: &std::ffi::OsString;    // in scope 0 at ui/env-vars.rs:17:53: 17:54
    let mut _26: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _27: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _28: &[&str];                // in scope 0 at ui/env-vars.rs:18:17: 18:59
    let mut _29: &[&str; 3];             // in scope 0 at ui/env-vars.rs:18:17: 18:59
    let _30: &[&str; 3];                 // in scope 0 at ui/env-vars.rs:18:17: 18:59
    let mut _31: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _32: &[core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _33: &[core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _34: [core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _35: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/env-vars.rs:18:61: 18:62
    let mut _36: &std::ffi::OsString;    // in scope 0 at ui/env-vars.rs:18:61: 18:62
    let _37: &std::ffi::OsString;        // in scope 0 at ui/env-vars.rs:18:61: 18:62
    let mut _38: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/env-vars.rs:18:64: 18:65
    let mut _39: &std::ffi::OsString;    // in scope 0 at ui/env-vars.rs:18:64: 18:65
    let _40: &std::ffi::OsString;        // in scope 0 at ui/env-vars.rs:18:64: 18:65
    let mut _41: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/env-vars.rs:18:67: 18:69
    let mut _42: &std::option::Option<std::ffi::OsString>; // in scope 0 at ui/env-vars.rs:18:67: 18:69
    let _43: &std::option::Option<std::ffi::OsString>; // in scope 0 at ui/env-vars.rs:18:67: 18:69
    scope 1 {
        debug iter => _3;                // in scope 1 at ui/env-vars.rs:7:19: 7:28
        let _8: std::ffi::OsString;      // in scope 1 at ui/env-vars.rs:7:10: 7:11
        let _9: std::ffi::OsString;      // in scope 1 at ui/env-vars.rs:7:13: 7:14
        scope 2 {
            debug k => _8;               // in scope 2 at ui/env-vars.rs:7:10: 7:11
            debug v => _9;               // in scope 2 at ui/env-vars.rs:7:13: 7:14
            let _11: std::option::Option<std::ffi::OsString>; // in scope 2 at ui/env-vars.rs:16:13: 16:15
            scope 3 {
                debug v2 => _11;         // in scope 3 at ui/env-vars.rs:16:13: 16:15
                let mut _44: &[&str; 3]; // in scope 3 at ui/env-vars.rs:18:17: 18:59
            }
        }
    }

    bb0: {
        _2 = std::env::vars_os() -> bb1; // scope 0 at ui/env-vars.rs:7:19: 7:28
                                         // mir::Constant
                                         // + span: ui/env-vars.rs:7:19: 7:26
                                         // + literal: Const { ty: fn() -> VarsOs {std::env::vars_os}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = <VarsOs as IntoIterator>::into_iter(move _2) -> bb2; // scope 0 at ui/env-vars.rs:7:19: 7:28
                                         // mir::Constant
                                         // + span: ui/env-vars.rs:7:19: 7:28
                                         // + literal: Const { ty: fn(VarsOs) -> <VarsOs as IntoIterator>::IntoIter {<VarsOs as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = move _1;                    // scope 0 at ui/env-vars.rs:7:19: 7:28
        goto -> bb3;                     // scope 1 at ui/env-vars.rs:7:5: 19:6
    }

    bb3: {
        _6 = &mut _3;                    // scope 1 at ui/env-vars.rs:7:19: 7:28
        _5 = &mut (*_6);                 // scope 1 at ui/env-vars.rs:7:19: 7:28
        _4 = <VarsOs as Iterator>::next(move _5) -> [return: bb4, unwind: bb28]; // scope 1 at ui/env-vars.rs:7:19: 7:28
                                         // mir::Constant
                                         // + span: ui/env-vars.rs:7:19: 7:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut VarsOs) -> Option<<VarsOs as Iterator>::Item> {<VarsOs as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = discriminant(_4);           // scope 1 at ui/env-vars.rs:7:19: 7:28
        switchInt(move _7) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 1 at ui/env-vars.rs:7:19: 7:28
    }

    bb5: {
        _8 = move (((_4 as Some).0: (std::ffi::OsString, std::ffi::OsString)).0: std::ffi::OsString); // scope 1 at ui/env-vars.rs:7:10: 7:11
        _9 = move (((_4 as Some).0: (std::ffi::OsString, std::ffi::OsString)).1: std::ffi::OsString); // scope 1 at ui/env-vars.rs:7:13: 7:14
        _10 = const false;               // scope 2 at ui/env-vars.rs:12:12: 12:70
        switchInt(move _10) -> [0: bb8, otherwise: bb22]; // scope 2 at ui/env-vars.rs:12:12: 12:70
    }

    bb6: {
        unreachable;                     // scope 1 at ui/env-vars.rs:7:19: 7:28
    }

    bb7: {
        drop(_3) -> bb24;                // scope 0 at ui/env-vars.rs:19:5: 19:6
    }

    bb8: {
        _12 = &_8;                       // scope 2 at ui/env-vars.rs:16:25: 16:27
        _11 = std::env::var_os::<&OsString>(move _12) -> [return: bb9, unwind: bb26]; // scope 2 at ui/env-vars.rs:16:18: 16:28
                                         // mir::Constant
                                         // + span: ui/env-vars.rs:16:18: 16:24
                                         // + literal: Const { ty: fn(&OsString) -> Option<OsString> {std::env::var_os::<&OsString>}, val: Value(<ZST>) }
    }

    bb9: {
        _18 = &_11;                      // scope 3 at ui/env-vars.rs:17:17: 17:28
        _17 = Option::<OsString>::as_ref(move _18) -> [return: bb10, unwind: bb25]; // scope 3 at ui/env-vars.rs:17:17: 17:28
                                         // mir::Constant
                                         // + span: ui/env-vars.rs:17:20: 17:26
                                         // + literal: Const { ty: for<'a> fn(&'a Option<OsString>) -> Option<&'a OsString> {Option::<OsString>::as_ref}, val: Value(<ZST>) }
    }

    bb10: {
        _16 = Option::<&OsString>::map::<&OsStr, [closure@ui/env-vars.rs:17:33: 17:36]>(move _17, move _19) -> [return: bb11, unwind: bb25]; // scope 3 at ui/env-vars.rs:17:17: 17:42
                                         // mir::Constant
                                         // + span: ui/env-vars.rs:17:29: 17:32
                                         // + literal: Const { ty: fn(Option<&OsString>, [closure@ui/env-vars.rs:17:33: 17:36]) -> Option<&OsStr> {Option::<&OsString>::map::<&OsStr, [closure@ui/env-vars.rs:17:33: 17:36]>}, val: Value(<ZST>) }
    }

    bb11: {
        _15 = &_16;                      // scope 3 at ui/env-vars.rs:17:17: 17:42
        _25 = &_9;                       // scope 3 at ui/env-vars.rs:17:53: 17:54
        _24 = <OsString as Deref>::deref(move _25) -> [return: bb12, unwind: bb25]; // scope 3 at ui/env-vars.rs:17:52: 17:54
                                         // mir::Constant
                                         // + span: ui/env-vars.rs:17:52: 17:54
                                         // + literal: Const { ty: for<'a> fn(&'a OsString) -> &'a <OsString as Deref>::Target {<OsString as Deref>::deref}, val: Value(<ZST>) }
    }

    bb12: {
        _23 = _24;                       // scope 3 at ui/env-vars.rs:17:51: 17:54
        _22 = _23;                       // scope 3 at ui/env-vars.rs:17:51: 17:54
        _21 = Option::<&OsStr>::Some(move _22); // scope 3 at ui/env-vars.rs:17:46: 17:55
        _20 = &_21;                      // scope 3 at ui/env-vars.rs:17:46: 17:55
        _14 = <Option<&OsStr> as PartialEq>::eq(move _15, move _20) -> [return: bb13, unwind: bb25]; // scope 3 at ui/env-vars.rs:17:17: 17:55
                                         // mir::Constant
                                         // + span: ui/env-vars.rs:17:17: 17:55
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&OsStr>, &'b Option<&OsStr>) -> bool {<Option<&OsStr> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb13: {
        _13 = Not(move _14);             // scope 3 at ui/env-vars.rs:17:9: 18:70
        switchInt(move _13) -> [0: bb19, otherwise: bb14]; // scope 3 at ui/env-vars.rs:17:9: 18:70
    }

    bb14: {
        _44 = const _;                   // scope 3 at ui/env-vars.rs:18:17: 18:59
                                         // mir::Constant
                                         // + span: ui/env-vars.rs:18:17: 18:59
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(main, [], Some(promoted[0])) }
        _30 = _44;                       // scope 3 at ui/env-vars.rs:18:17: 18:59
        _29 = _30;                       // scope 3 at ui/env-vars.rs:18:17: 18:59
        _28 = move _29 as &[&str] (Pointer(Unsize)); // scope 3 at ui/env-vars.rs:18:17: 18:59
        _37 = &_8;                       // scope 3 at ui/env-vars.rs:18:61: 18:62
        _36 = _37;                       // scope 3 at ui/env-vars.rs:18:61: 18:62
        _35 = core::fmt::ArgumentV1::<'_>::new_debug::<OsString>(move _36) -> [return: bb15, unwind: bb25]; // scope 3 at ui/env-vars.rs:18:61: 18:62
                                         // mir::Constant
                                         // + span: ui/env-vars.rs:18:61: 18:62
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b OsString) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<OsString>}, val: Value(<ZST>) }
    }

    bb15: {
        _40 = &_9;                       // scope 3 at ui/env-vars.rs:18:64: 18:65
        _39 = _40;                       // scope 3 at ui/env-vars.rs:18:64: 18:65
        _38 = core::fmt::ArgumentV1::<'_>::new_debug::<OsString>(move _39) -> [return: bb16, unwind: bb25]; // scope 3 at ui/env-vars.rs:18:64: 18:65
                                         // mir::Constant
                                         // + span: ui/env-vars.rs:18:64: 18:65
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b OsString) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<OsString>}, val: Value(<ZST>) }
    }

    bb16: {
        _43 = &_11;                      // scope 3 at ui/env-vars.rs:18:67: 18:69
        _42 = _43;                       // scope 3 at ui/env-vars.rs:18:67: 18:69
        _41 = core::fmt::ArgumentV1::<'_>::new_debug::<Option<OsString>>(move _42) -> [return: bb17, unwind: bb25]; // scope 3 at ui/env-vars.rs:18:67: 18:69
                                         // mir::Constant
                                         // + span: ui/env-vars.rs:18:67: 18:69
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b Option<OsString>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Option<OsString>>}, val: Value(<ZST>) }
    }

    bb17: {
        _34 = [move _35, move _38, move _41]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _33 = &_34;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _32 = _33;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _31 = move _32 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _27 = Arguments::<'_>::new_v1(move _28, move _31) -> [return: bb18, unwind: bb25]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb18: {
        _26 = panic_fmt(move _27) -> bb25; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb19: {
        drop(_11) -> [return: bb20, unwind: bb26]; // scope 2 at ui/env-vars.rs:19:5: 19:6
    }

    bb20: {
        drop(_9) -> [return: bb21, unwind: bb27]; // scope 1 at ui/env-vars.rs:19:5: 19:6
    }

    bb21: {
        drop(_8) -> [return: bb3, unwind: bb28]; // scope 1 at ui/env-vars.rs:19:5: 19:6
    }

    bb22: {
        drop(_9) -> [return: bb23, unwind: bb27]; // scope 1 at ui/env-vars.rs:19:5: 19:6
    }

    bb23: {
        drop(_8) -> [return: bb3, unwind: bb28]; // scope 1 at ui/env-vars.rs:19:5: 19:6
    }

    bb24: {
        return;                          // scope 0 at ui/env-vars.rs:20:2: 20:2
    }

    bb25 (cleanup): {
        drop(_11) -> bb26;               // scope 2 at ui/env-vars.rs:19:5: 19:6
    }

    bb26 (cleanup): {
        drop(_9) -> bb27;                // scope 1 at ui/env-vars.rs:19:5: 19:6
    }

    bb27 (cleanup): {
        drop(_8) -> bb28;                // scope 1 at ui/env-vars.rs:19:5: 19:6
    }

    bb28 (cleanup): {
        drop(_3) -> bb29;                // scope 0 at ui/env-vars.rs:19:5: 19:6
    }

    bb29 (cleanup): {
        resume;                          // scope 0 at ui/env-vars.rs:6:1: 20:2
    }
}

promoted[0] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ui/env-vars.rs:18:17: 18:59
    let mut _1: [&str; 3];               // in scope 0 at ui/env-vars.rs:18:17: 18:59

    bb0: {
        _1 = [const "bad vars->var transition: ", const " ", const " "]; // scope 0 at ui/env-vars.rs:18:17: 18:59
                                         // mir::Constant
                                         // + span: ui/env-vars.rs:18:17: 18:59
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/env-vars.rs:18:17: 18:59
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/env-vars.rs:18:17: 18:59
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/env-vars.rs:18:17: 18:59
        return;                          // scope 0 at ui/env-vars.rs:18:17: 18:59
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/env-vars.rs:12:48: 12:70
    let mut _1: &str;                    // in scope 0 at ui/env-vars.rs:12:48: 12:70

    bb0: {
        _1 = const "NUMBER_OF_PROCESSORS"; // scope 0 at ui/env-vars.rs:12:48: 12:70
                                         // mir::Constant
                                         // + span: ui/env-vars.rs:12:48: 12:70
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/env-vars.rs:12:48: 12:70
        return;                          // scope 0 at ui/env-vars.rs:12:48: 12:70
    }
}

fn main::{closure#0}(_1: [closure@ui/env-vars.rs:17:33: 17:36], _2: &OsString) -> &OsStr {
    debug s => _2;                       // in scope 0 at ui/env-vars.rs:17:34: 17:35
    let mut _0: &std::ffi::OsStr;        // return place in scope 0 at ui/env-vars.rs:17:38: 17:41
    let mut _3: &std::ffi::OsString;     // in scope 0 at ui/env-vars.rs:17:39: 17:41

    bb0: {
        _3 = _2;                         // scope 0 at ui/env-vars.rs:17:39: 17:41
        _0 = <OsString as Deref>::deref(move _3) -> bb1; // scope 0 at ui/env-vars.rs:17:38: 17:41
                                         // mir::Constant
                                         // + span: ui/env-vars.rs:17:38: 17:41
                                         // + literal: Const { ty: for<'a> fn(&'a OsString) -> &'a <OsString as Deref>::Target {<OsString as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/env-vars.rs:17:41: 17:41
    }
}
