// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &u8) -> Foo<'_> {
    debug x => _1;
    let mut _0: Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(_1);
        return;
    }
}

fn foo2(_1: &u8) -> Foo<'_> {
    debug x => _1;
    let mut _0: Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(_1);
        return;
    }
}

fn foo3(_1: &u8) -> Foo<'_> {
    debug x => _1;
    let mut _0: Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(_1);
        return;
    }
}

fn foo4(_1: Foo<'_>) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn foo5(_1: Foo2<'_, '_>) -> &u8 {
    debug foo => _1;
    let mut _0: &u8;

    bb0: {
        _0 = (_1.1: &u8);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: Foo<'_>;
    let mut _2: Foo<'_>;
    let mut _3: Foo<'_>;
    let _4: ();
    let mut _5: Foo<'_>;
    let mut _6: &u8;
    let mut _7: Foo2<'_, '_>;
    let mut _9: &u8;
    scope 1 {
        debug x => const _;
        scope 2 {
            scope 3 {
                scope 4 {
                    let mut _8: &u8;
                    scope 5 {
                    }
                }
            }
        }
    }

    bb0: {
        _9 = const _;
        _1 = foo(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = foo2(_9) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = foo3(_9) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = Foo::<'_>(_9);
        _4 = foo4(move _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = const _;
        _7 = Foo2::<'_, '_> { a: _9, b: _8 };
        _6 = foo5(move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 6_u8;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 5_u8;
        _0 = &_1;
        return;
    }
}

fn Foo(_1: &u8) -> Foo<'_> {
    let mut _0: Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: &u8) -> Foo<'_> {
    let mut _0: Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(move _1);
        return;
    }
}
