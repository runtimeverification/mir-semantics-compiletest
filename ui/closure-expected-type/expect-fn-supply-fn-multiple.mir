// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn with_closure_expecting_different(_1: F) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:9:5: 9:5

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:11:1: 11:2
    }

    bb1: {
        return;                          // scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:11:2: 11:2
    }
}

fn with_closure_expecting_different_anon(_1: F) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:14:5: 14:5

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:16:1: 16:2
    }

    bb1: {
        return;                          // scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:16:2: 16:2
    }
}

fn supplying_nothing_expecting_anon() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:18:39: 18:39
    let mut _1: [closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:19:43: 19:57]; // in scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:19:43: 20:6

    bb0: {
        _0 = with_closure_expecting_different_anon::<[closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:19:43: 19:57]>(move _1) -> bb1; // scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:19:5: 20:7
                                         // mir::Constant
                                         // + span: ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:19:5: 19:42
                                         // + literal: Const { ty: fn([closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:19:43: 19:57]) {with_closure_expecting_different_anon::<[closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:19:43: 19:57]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:21:2: 21:2
    }
}

fn supplying_nothing_expecting_anon::{closure#0}(_1: [closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:19:43: 19:57], _2: &mut (&(), &())) -> () {
    debug x => _2;                       // in scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:19:44: 19:45
    let mut _0: ();                      // return place in scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:19:58: 19:58

    bb0: {
        return;                          // scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:20:6: 20:6
    }
}

fn supplying_nothing_expecting_named() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:23:40: 23:40
    let mut _1: [closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:24:38: 24:52]; // in scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:24:38: 25:6

    bb0: {
        _0 = with_closure_expecting_different::<[closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:24:38: 24:52]>(move _1) -> bb1; // scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:24:5: 25:7
                                         // mir::Constant
                                         // + span: ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:24:5: 24:37
                                         // + literal: Const { ty: fn([closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:24:38: 24:52]) {with_closure_expecting_different::<[closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:24:38: 24:52]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:26:2: 26:2
    }
}

fn supplying_nothing_expecting_named::{closure#0}(_1: [closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:24:38: 24:52], _2: &mut (&(), &())) -> () {
    debug x => _2;                       // in scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:24:39: 24:40
    let mut _0: ();                      // return place in scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:24:53: 24:53

    bb0: {
        return;                          // scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:25:6: 25:6
    }
}

fn supplying_underscore_expecting_anon() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:28:42: 28:42
    let mut _1: [closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:29:43: 29:65]; // in scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:29:43: 30:6

    bb0: {
        _0 = with_closure_expecting_different_anon::<[closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:29:43: 29:65]>(move _1) -> bb1; // scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:29:5: 30:7
                                         // mir::Constant
                                         // + span: ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:29:5: 29:42
                                         // + literal: Const { ty: fn([closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:29:43: 29:65]) {with_closure_expecting_different_anon::<[closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:29:43: 29:65]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:31:2: 31:2
    }
}

fn supplying_underscore_expecting_anon::{closure#0}(_1: [closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:29:43: 29:65], _2: &mut (&(), &())) -> () {
    debug x => _2;                       // in scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:29:44: 29:45
    let mut _0: ();                      // return place in scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:29:66: 29:66

    bb0: {
        return;                          // scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:30:6: 30:6
    }
}

fn supplying_underscore_expecting_named() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:33:43: 33:43
    let mut _1: [closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:34:38: 34:60]; // in scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:34:38: 35:6

    bb0: {
        _0 = with_closure_expecting_different::<[closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:34:38: 34:60]>(move _1) -> bb1; // scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:34:5: 35:7
                                         // mir::Constant
                                         // + span: ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:34:5: 34:37
                                         // + literal: Const { ty: fn([closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:34:38: 34:60]) {with_closure_expecting_different::<[closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:34:38: 34:60]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:36:2: 36:2
    }
}

fn supplying_underscore_expecting_named::{closure#0}(_1: [closure@ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:34:38: 34:60], _2: &mut (&(), &())) -> () {
    debug x => _2;                       // in scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:34:39: 34:40
    let mut _0: ();                      // return place in scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:34:61: 34:61

    bb0: {
        return;                          // scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:35:6: 35:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:38:11: 38:11

    bb0: {
        return;                          // scope 0 at ui/closure-expected-type/expect-fn-supply-fn-multiple.rs:38:14: 38:14
    }
}
