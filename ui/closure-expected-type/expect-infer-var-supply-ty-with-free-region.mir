// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn with_closure(_1: F) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:4:5: 4:5

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:6:1: 6:2
    }

    bb1: {
        return;                          // scope 0 at ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:6:2: 6:2
    }
}

fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:8:10: 8:10
    let _1: ();                          // in scope 0 at ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:11:5: 11:33
    let mut _2: [closure@ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:11:18: 11:29]; // in scope 0 at ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:11:18: 11:32

    bb0: {
        _1 = with_closure::<[closure@ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:11:18: 11:29], u32>(move _2) -> bb1; // scope 0 at ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:11:5: 11:33
                                         // mir::Constant
                                         // + span: ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:11:5: 11:17
                                         // + literal: Const { ty: fn([closure@ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:11:18: 11:29]) {with_closure::<[closure@ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:11:18: 11:29], u32>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:12:2: 12:2
    }
}

fn foo::{closure#0}(_1: [closure@ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:11:18: 11:29], _2: u32, _3: &u32) -> () {
    debug x => _2;                       // in scope 0 at ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:11:19: 11:20
    debug y => _3;                       // in scope 0 at ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:11:27: 11:28
    let mut _0: ();                      // return place in scope 0 at ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:11:30: 11:30

    bb0: {
        return;                          // scope 0 at ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:11:32: 11:32
    }
}

fn bar(_1: &u32) -> () {
    debug x => _1;                       // in scope 0 at ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:14:12: 14:13
    let mut _0: ();                      // return place in scope 0 at ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:14:24: 14:24
    let _2: ();                          // in scope 0 at ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:16:5: 16:37
    let mut _3: [closure@ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:16:18: 16:33]; // in scope 0 at ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:16:18: 16:36

    bb0: {
        _2 = with_closure::<[closure@ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:16:18: 16:33], &u32>(move _3) -> bb1; // scope 0 at ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:16:5: 16:37
                                         // mir::Constant
                                         // + span: ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:16:5: 16:17
                                         // + literal: Const { ty: fn([closure@ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:16:18: 16:33]) {with_closure::<[closure@ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:16:18: 16:33], &u32>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:17:2: 17:2
    }
}

fn bar::{closure#0}(_1: [closure@ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:16:18: 16:33], _2: &u32, _3: &u32) -> () {
    debug x => _2;                       // in scope 0 at ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:16:19: 16:20
    debug y => _3;                       // in scope 0 at ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:16:31: 16:32
    let mut _0: ();                      // return place in scope 0 at ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:16:34: 16:34

    bb0: {
        return;                          // scope 0 at ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:16:36: 16:36
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:19:11: 19:11

    bb0: {
        return;                          // scope 0 at ui/closure-expected-type/expect-infer-var-supply-ty-with-free-region.rs:19:14: 19:14
    }
}
