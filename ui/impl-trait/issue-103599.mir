// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn wrap(_1: impl T) -> impl T {
    debug x => _1;                       // in scope 0 at ui/impl-trait/issue-103599.rs:5:9: 5:10
    let mut _0: impl T;                  // return place in scope 0 at ui/impl-trait/issue-103599.rs:5:23: 5:29
    let mut _2: impl T;                  // in scope 0 at ui/impl-trait/issue-103599.rs:7:10: 7:17
    let mut _3: impl T;                  // in scope 0 at ui/impl-trait/issue-103599.rs:7:15: 7:16

    bb0: {
        _3 = move _1;                    // scope 0 at ui/impl-trait/issue-103599.rs:7:15: 7:16
        _2 = wrap::<impl T>(move _3) -> bb1; // scope 0 at ui/impl-trait/issue-103599.rs:7:10: 7:17
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-103599.rs:7:10: 7:14
                                         // + literal: Const { ty: fn(impl T) -> impl T {wrap::<impl T>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = wrap::<impl T>(move _2) -> bb2; // scope 0 at ui/impl-trait/issue-103599.rs:7:5: 7:18
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-103599.rs:7:5: 7:9
                                         // + literal: Const { ty: fn(impl T) -> impl T {wrap::<impl T>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/impl-trait/issue-103599.rs:8:2: 8:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/issue-103599.rs:10:11: 10:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/issue-103599.rs:10:13: 10:13
    }
}
