// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-trait/issues/issue-42479.rs:9:1: 9:9>::inside(_1: &Foo) -> impl Iterator<Item = &i32> {
    debug self => _1;
    let mut _0: impl std::iter::Iterator<Item = &i32>;
    let mut _2: &i32;

    bb0: {
        _2 = &((*_1).0: i32);
        _0 = once::<&i32>(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[&str; 1];

    bb0: {
        _4 = const _;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_const(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = _print(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "hi\n"];
        _0 = &_1;
        return;
    }
}
