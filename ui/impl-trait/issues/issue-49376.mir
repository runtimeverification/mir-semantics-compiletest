// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn gen() -> impl PartialOrd + PartialEq + Debug {
    let mut _0: impl std::cmp::PartialOrd + std::cmp::PartialEq + std::fmt::Debug; // return place in scope 0 at ui/impl-trait/issues/issue-49376.rs:8:13: 8:48

    bb0: {
        return;                          // scope 0 at ui/impl-trait/issues/issue-49376.rs:8:52: 8:52
    }
}

fn foo() -> impl Foo + FooNested {
    let mut _0: impl Foo + FooNested;    // return place in scope 0 at ui/impl-trait/issues/issue-49376.rs:16:13: 16:33

    bb0: {
        return;                          // scope 0 at ui/impl-trait/issues/issue-49376.rs:18:2: 18:2
    }
}

fn test_impl_ops() -> impl std::ops::Add + std::ops::Sub + std::ops::Mul + std::ops::Div {
    let mut _0: impl std::ops::Add + std::ops::Sub + std::ops::Mul + std::ops::Div; // return place in scope 0 at ui/impl-trait/issues/issue-49376.rs:20:23: 20:49

    bb0: {
        _0 = const 1_i32;                // scope 0 at ui/impl-trait/issues/issue-49376.rs:20:52: 20:53
        return;                          // scope 0 at ui/impl-trait/issues/issue-49376.rs:20:55: 20:55
    }
}

fn test_impl_assign_ops() -> impl std::ops::AddAssign + std::ops::SubAssign + std::ops::MulAssign + std::ops::DivAssign {
    let mut _0: impl std::ops::AddAssign + std::ops::SubAssign + std::ops::MulAssign + std::ops::DivAssign; // return place in scope 0 at ui/impl-trait/issues/issue-49376.rs:21:30: 21:80

    bb0: {
        _0 = const 1_i32;                // scope 0 at ui/impl-trait/issues/issue-49376.rs:21:83: 21:84
        return;                          // scope 0 at ui/impl-trait/issues/issue-49376.rs:21:86: 21:86
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/issues/issue-49376.rs:23:11: 23:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/issues/issue-49376.rs:23:13: 23:13
    }
}
