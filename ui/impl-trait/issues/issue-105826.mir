// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-trait/issues/issue-105826.rs:13:1: 13:15>::one(_1: &mut B<'_>) -> &mut impl std::io::Write {
    debug self => _1;                    // in scope 0 at ui/impl-trait/issues/issue-105826.rs:14:12: 14:21
    let mut _0: &mut impl std::io::Write; // return place in scope 0 at ui/impl-trait/issues/issue-105826.rs:14:26: 14:41
    let mut _2: &mut std::vec::Vec<u8>;  // in scope 0 at ui/impl-trait/issues/issue-105826.rs:15:9: 15:24
    let mut _3: &mut std::vec::Vec<u8>;  // in scope 0 at ui/impl-trait/issues/issue-105826.rs:15:9: 15:24
    let mut _4: &mut A;                  // in scope 0 at ui/impl-trait/issues/issue-105826.rs:14:12: 14:21

    bb0: {
        _4 = deref_copy ((*_1).0: &mut A); // scope 0 at ui/impl-trait/issues/issue-105826.rs:15:9: 15:24
        _3 = &mut ((*_4).0: std::vec::Vec<u8>); // scope 0 at ui/impl-trait/issues/issue-105826.rs:15:9: 15:24
        _2 = &mut (*_3);                 // scope 0 at ui/impl-trait/issues/issue-105826.rs:15:9: 15:24
        _0 = &mut (*_2);                 // scope 0 at ui/impl-trait/issues/issue-105826.rs:15:9: 15:24
        return;                          // scope 0 at ui/impl-trait/issues/issue-105826.rs:16:6: 16:6
    }
}

fn <impl at ui/impl-trait/issues/issue-105826.rs:13:1: 13:15>::two(_1: &mut B<'_>) -> &mut impl std::io::Write {
    debug self => _1;                    // in scope 0 at ui/impl-trait/issues/issue-105826.rs:17:12: 17:21
    let mut _0: &mut impl std::io::Write; // return place in scope 0 at ui/impl-trait/issues/issue-105826.rs:17:26: 17:41
    let mut _2: &mut std::vec::Vec<u8>;  // in scope 0 at ui/impl-trait/issues/issue-105826.rs:18:9: 18:23
    let mut _3: &mut std::vec::Vec<u8>;  // in scope 0 at ui/impl-trait/issues/issue-105826.rs:18:9: 18:23
    let mut _4: &mut std::vec::Vec<u8>;  // in scope 0 at ui/impl-trait/issues/issue-105826.rs:17:12: 17:21

    bb0: {
        _4 = deref_copy ((*_1).1: &mut std::vec::Vec<u8>); // scope 0 at ui/impl-trait/issues/issue-105826.rs:18:9: 18:23
        _3 = &mut (*_4);                 // scope 0 at ui/impl-trait/issues/issue-105826.rs:18:9: 18:23
        _2 = &mut (*_3);                 // scope 0 at ui/impl-trait/issues/issue-105826.rs:18:9: 18:23
        _0 = &mut (*_2);                 // scope 0 at ui/impl-trait/issues/issue-105826.rs:18:9: 18:23
        return;                          // scope 0 at ui/impl-trait/issues/issue-105826.rs:19:6: 19:6
    }
}

fn <impl at ui/impl-trait/issues/issue-105826.rs:13:1: 13:15>::three(_1: &mut B<'_>) -> &mut impl std::io::Write {
    debug self => _1;                    // in scope 0 at ui/impl-trait/issues/issue-105826.rs:20:14: 20:23
    let mut _0: &mut impl std::io::Write; // return place in scope 0 at ui/impl-trait/issues/issue-105826.rs:20:28: 20:43
    let mut _2: &mut std::vec::Vec<u8>;  // in scope 0 at ui/impl-trait/issues/issue-105826.rs:21:9: 21:24
    let mut _3: &mut std::vec::Vec<u8>;  // in scope 0 at ui/impl-trait/issues/issue-105826.rs:21:9: 21:24

    bb0: {
        _3 = &mut ((*_1).2: std::vec::Vec<u8>); // scope 0 at ui/impl-trait/issues/issue-105826.rs:21:9: 21:24
        _2 = &mut (*_3);                 // scope 0 at ui/impl-trait/issues/issue-105826.rs:21:9: 21:24
        _0 = &mut (*_2);                 // scope 0 at ui/impl-trait/issues/issue-105826.rs:21:9: 21:24
        return;                          // scope 0 at ui/impl-trait/issues/issue-105826.rs:22:6: 22:6
    }
}

fn <impl at ui/impl-trait/issues/issue-105826.rs:27:1: 27:15>::one(_1: &mut C<'_>) -> &mut impl std::io::Write {
    debug self => _1;                    // in scope 0 at ui/impl-trait/issues/issue-105826.rs:28:12: 28:21
    let mut _0: &mut impl std::io::Write; // return place in scope 0 at ui/impl-trait/issues/issue-105826.rs:28:26: 28:41
    let mut _2: &mut impl std::io::Write; // in scope 0 at ui/impl-trait/issues/issue-105826.rs:29:9: 29:21
    let mut _3: &mut impl std::io::Write; // in scope 0 at ui/impl-trait/issues/issue-105826.rs:29:9: 29:21
    let mut _4: &mut B<'_>;              // in scope 0 at ui/impl-trait/issues/issue-105826.rs:29:9: 29:21

    bb0: {
        _4 = &mut ((*_1).0: B<'_>);      // scope 0 at ui/impl-trait/issues/issue-105826.rs:29:9: 29:21
        _3 = B::<'_>::one(move _4) -> bb1; // scope 0 at ui/impl-trait/issues/issue-105826.rs:29:9: 29:21
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-105826.rs:29:16: 29:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut B<'_>) -> &'a mut impl std::io::Write {B::<'_>::one}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &mut (*_3);                 // scope 0 at ui/impl-trait/issues/issue-105826.rs:29:9: 29:21
        _0 = &mut (*_2);                 // scope 0 at ui/impl-trait/issues/issue-105826.rs:29:9: 29:21
        return;                          // scope 0 at ui/impl-trait/issues/issue-105826.rs:30:6: 30:6
    }
}

fn <impl at ui/impl-trait/issues/issue-105826.rs:27:1: 27:15>::two(_1: &mut C<'_>) -> &mut impl std::io::Write {
    debug self => _1;                    // in scope 0 at ui/impl-trait/issues/issue-105826.rs:31:12: 31:21
    let mut _0: &mut impl std::io::Write; // return place in scope 0 at ui/impl-trait/issues/issue-105826.rs:31:26: 31:41
    let mut _2: &mut impl std::io::Write; // in scope 0 at ui/impl-trait/issues/issue-105826.rs:32:9: 32:21
    let mut _3: &mut impl std::io::Write; // in scope 0 at ui/impl-trait/issues/issue-105826.rs:32:9: 32:21
    let mut _4: &mut B<'_>;              // in scope 0 at ui/impl-trait/issues/issue-105826.rs:32:9: 32:21

    bb0: {
        _4 = &mut ((*_1).0: B<'_>);      // scope 0 at ui/impl-trait/issues/issue-105826.rs:32:9: 32:21
        _3 = B::<'_>::two(move _4) -> bb1; // scope 0 at ui/impl-trait/issues/issue-105826.rs:32:9: 32:21
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-105826.rs:32:16: 32:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut B<'_>) -> &'a mut impl std::io::Write {B::<'_>::two}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &mut (*_3);                 // scope 0 at ui/impl-trait/issues/issue-105826.rs:32:9: 32:21
        _0 = &mut (*_2);                 // scope 0 at ui/impl-trait/issues/issue-105826.rs:32:9: 32:21
        return;                          // scope 0 at ui/impl-trait/issues/issue-105826.rs:33:6: 33:6
    }
}

fn <impl at ui/impl-trait/issues/issue-105826.rs:27:1: 27:15>::three(_1: &mut C<'_>) -> &mut impl std::io::Write {
    debug self => _1;                    // in scope 0 at ui/impl-trait/issues/issue-105826.rs:34:14: 34:23
    let mut _0: &mut impl std::io::Write; // return place in scope 0 at ui/impl-trait/issues/issue-105826.rs:34:28: 34:43
    let mut _2: &mut impl std::io::Write; // in scope 0 at ui/impl-trait/issues/issue-105826.rs:35:9: 35:23
    let mut _3: &mut impl std::io::Write; // in scope 0 at ui/impl-trait/issues/issue-105826.rs:35:9: 35:23
    let mut _4: &mut B<'_>;              // in scope 0 at ui/impl-trait/issues/issue-105826.rs:35:9: 35:23

    bb0: {
        _4 = &mut ((*_1).0: B<'_>);      // scope 0 at ui/impl-trait/issues/issue-105826.rs:35:9: 35:23
        _3 = B::<'_>::three(move _4) -> bb1; // scope 0 at ui/impl-trait/issues/issue-105826.rs:35:9: 35:23
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-105826.rs:35:16: 35:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut B<'_>) -> &'a mut impl std::io::Write {B::<'_>::three}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &mut (*_3);                 // scope 0 at ui/impl-trait/issues/issue-105826.rs:35:9: 35:23
        _0 = &mut (*_2);                 // scope 0 at ui/impl-trait/issues/issue-105826.rs:35:9: 35:23
        return;                          // scope 0 at ui/impl-trait/issues/issue-105826.rs:36:6: 36:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/issues/issue-105826.rs:39:11: 39:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/issues/issue-105826.rs:39:13: 39:13
    }
}

fn A(_1: Vec<u8>) -> A {
    let mut _0: A;                       // return place in scope 0 at ui/impl-trait/issues/issue-105826.rs:5:1: 5:9

    bb0: {
        _0 = A(move _1);                 // scope 0 at ui/impl-trait/issues/issue-105826.rs:5:1: 5:9
        return;                          // scope 0 at ui/impl-trait/issues/issue-105826.rs:5:1: 5:9
    }
}

// MIR FOR CTFE
fn A(_1: Vec<u8>) -> A {
    let mut _0: A;                       // return place in scope 0 at ui/impl-trait/issues/issue-105826.rs:5:1: 5:9

    bb0: {
        _0 = A(move _1);                 // scope 0 at ui/impl-trait/issues/issue-105826.rs:5:1: 5:9
        return;                          // scope 0 at ui/impl-trait/issues/issue-105826.rs:5:1: 5:9
    }
}

fn C(_1: B<'_>) -> C<'_> {
    let mut _0: C<'_>;                   // return place in scope 0 at ui/impl-trait/issues/issue-105826.rs:25:1: 25:13

    bb0: {
        _0 = C::<'_>(move _1);           // scope 0 at ui/impl-trait/issues/issue-105826.rs:25:1: 25:13
        return;                          // scope 0 at ui/impl-trait/issues/issue-105826.rs:25:1: 25:13
    }
}

// MIR FOR CTFE
fn C(_1: B<'_>) -> C<'_> {
    let mut _0: C<'_>;                   // return place in scope 0 at ui/impl-trait/issues/issue-105826.rs:25:1: 25:13

    bb0: {
        _0 = C::<'_>(move _1);           // scope 0 at ui/impl-trait/issues/issue-105826.rs:25:1: 25:13
        return;                          // scope 0 at ui/impl-trait/issues/issue-105826.rs:25:1: 25:13
    }
}
