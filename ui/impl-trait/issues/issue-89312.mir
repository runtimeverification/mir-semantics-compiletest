// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn filter_positive() -> &S {
    let mut _0: &S;                      // return place in scope 0 at ui/impl-trait/issues/issue-89312.rs:15:5: 15:7

    bb0: {
        _0 = const _;                    // scope 0 at ui/impl-trait/issues/issue-89312.rs:15:5: 15:7
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-89312.rs:15:5: 15:7
                                         // + literal: Const { ty: &S, val: Unevaluated(filter_positive, [ReErased], Some(promoted[0])) }
        return;                          // scope 0 at ui/impl-trait/issues/issue-89312.rs:16:2: 16:2
    }
}

promoted[0] in filter_positive: &S = {
    let mut _0: &S;                      // return place in scope 0 at ui/impl-trait/issues/issue-89312.rs:15:5: 15:7
    let mut _1: S;                       // in scope 0 at ui/impl-trait/issues/issue-89312.rs:15:6: 15:7

    bb0: {
        _1 = S;                          // scope 0 at ui/impl-trait/issues/issue-89312.rs:15:6: 15:7
        _0 = &_1;                        // scope 0 at ui/impl-trait/issues/issue-89312.rs:15:5: 15:7
        return;                          // scope 0 at ui/impl-trait/issues/issue-89312.rs:15:5: 15:7
    }
}

fn with_positive(_1: impl Fn(Alias<'_>)) -> () {
    debug fun => _1;                     // in scope 0 at ui/impl-trait/issues/issue-89312.rs:18:18: 18:21
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/issues/issue-89312.rs:18:43: 18:43
    let _2: ();                          // in scope 0 at ui/impl-trait/issues/issue-89312.rs:19:5: 19:27
    let mut _3: &impl Fn(Alias<'_>);     // in scope 0 at ui/impl-trait/issues/issue-89312.rs:19:5: 19:8
    let mut _4: (Alias<'_>,);            // in scope 0 at ui/impl-trait/issues/issue-89312.rs:19:5: 19:27
    let mut _5: Alias<'_>;               // in scope 0 at ui/impl-trait/issues/issue-89312.rs:19:9: 19:26

    bb0: {
        _3 = &_1;                        // scope 0 at ui/impl-trait/issues/issue-89312.rs:19:5: 19:8
        _5 = filter_positive::<'_>() -> [return: bb1, unwind: bb4]; // scope 0 at ui/impl-trait/issues/issue-89312.rs:19:9: 19:26
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-89312.rs:19:9: 19:24
                                         // + literal: Const { ty: fn() -> Alias<'_> {filter_positive::<'_>}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = (move _5,);                 // scope 0 at ui/impl-trait/issues/issue-89312.rs:19:5: 19:27
        _2 = <impl Fn(Alias<'_>) as Fn<(Alias<'_>,)>>::call(move _3, move _4) -> [return: bb2, unwind: bb4]; // scope 0 at ui/impl-trait/issues/issue-89312.rs:19:5: 19:27
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-89312.rs:19:5: 19:8
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a impl Fn(Alias<'_>), (Alias<'_>,)) -> <impl Fn(Alias<'_>) as FnOnce<(Alias<'_>,)>>::Output {<impl Fn(Alias<'_>) as Fn<(Alias<'_>,)>>::call}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/impl-trait/issues/issue-89312.rs:20:1: 20:2
    }

    bb3: {
        return;                          // scope 0 at ui/impl-trait/issues/issue-89312.rs:20:2: 20:2
    }

    bb4 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at ui/impl-trait/issues/issue-89312.rs:20:1: 20:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/issues/issue-89312.rs:18:1: 20:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/issues/issue-89312.rs:22:11: 22:11
    let _1: ();                          // in scope 0 at ui/impl-trait/issues/issue-89312.rs:23:5: 23:26
    let mut _2: [closure@ui/impl-trait/issues/issue-89312.rs:23:19: 23:22]; // in scope 0 at ui/impl-trait/issues/issue-89312.rs:23:19: 23:25

    bb0: {
        _1 = with_positive::<[closure@ui/impl-trait/issues/issue-89312.rs:23:19: 23:22]>(move _2) -> bb1; // scope 0 at ui/impl-trait/issues/issue-89312.rs:23:5: 23:26
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-89312.rs:23:5: 23:18
                                         // + literal: Const { ty: fn([closure@ui/impl-trait/issues/issue-89312.rs:23:19: 23:22]) {with_positive::<[closure@ui/impl-trait/issues/issue-89312.rs:23:19: 23:22]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/issues/issue-89312.rs:24:2: 24:2
    }
}

fn main::{closure#0}(_1: &[closure@ui/impl-trait/issues/issue-89312.rs:23:19: 23:22], _2: Alias<'_>) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/issues/issue-89312.rs:23:23: 23:23

    bb0: {
        return;                          // scope 0 at ui/impl-trait/issues/issue-89312.rs:23:25: 23:25
    }
}
