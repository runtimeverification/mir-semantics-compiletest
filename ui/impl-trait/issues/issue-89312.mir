// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn filter_positive() -> Alias<'_> {
    let mut _0: Alias<'_>;
    let mut _1: &S;

    bb0: {
        _1 = const _;
        _0 = _1;
        return;
    }
}

promoted[0] in filter_positive: &S = {
    let mut _0: &S;
    let mut _1: S;

    bb0: {
        _1 = S;
        _0 = &_1;
        return;
    }
}

fn with_positive(_1: impl Fn(Alias<'_>)) -> () {
    debug fun => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: &impl Fn(Alias<'_>);
    let mut _4: (Alias<'_>,);
    let mut _5: Alias<'_>;

    bb0: {
        _3 = &_1;
        _5 = filter_positive::<'_>() -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _4 = (move _5,);
        _2 = <impl Fn(Alias<'_>) as Fn<(Alias<'_>,)>>::call(move _3, move _4) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_1) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = with_positive::<[closure@ui/impl-trait/issues/issue-89312.rs:23:19: 23:22]>(const ZeroSized: [closure@ui/impl-trait/issues/issue-89312.rs:23:19: 23:22]) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/impl-trait/issues/issue-89312.rs:23:19: 23:22], _2: Alias<'_>) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
