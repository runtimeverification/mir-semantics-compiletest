// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-trait/issues/issue-93788.rs:10:1: 10:22>::foo(_1: &D) -> Option<()> {
    debug self => _1;
    let mut _0: std::option::Option<()>;

    bb0: {
        _0 = Option::<()>::None;
        return;
    }
}

fn run(_1: F) -> () {
    debug f => _1;
    let mut _0: ();
    let mut _2: std::option::Option<<&D as Tr>::It>;
    let mut _3: isize;
    let _5: ();
    let mut _6: &F;
    let mut _7: (<&D as Tr>::It,);
    let mut _8: &D;
    scope 1 {
        debug d => const _;
        scope 2 {
            debug i => _4;
            let _4: <&D as Tr>::It;
        }
    }

    bb0: {
        _8 = const _;
        goto -> bb1;
    }

    bb1: {
        _2 = <&D as Tr>::foo(_8) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _3 = discriminant(_2);
        switchInt(move _3) -> [1: bb3, otherwise: bb4];
    }

    bb3: {
        _4 = move ((_2 as Some).0: <&D as Tr>::It);
        _6 = &_1;
        _7 = (move _4,);
        _5 = <F as Fn<(<&D as Tr>::It,)>>::call(move _6, move _7) -> [return: bb9, unwind: bb7];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        drop(_1) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }

    bb9: {
        goto -> bb1;
    }
}

promoted[0] in run: &D = {
    let mut _0: &D;
    let mut _1: D;

    bb0: {
        _1 = D;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = run::<[closure@ui/impl-trait/issues/issue-93788.rs:26:9: 26:12]>(const ZeroSized: [closure@ui/impl-trait/issues/issue-93788.rs:26:9: 26:12]) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/impl-trait/issues/issue-93788.rs:26:9: 26:12], _2: ()) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
