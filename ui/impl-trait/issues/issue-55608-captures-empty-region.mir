// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn server() -> impl FilterBase2 {
    let mut _0: impl FilterBase2;        // return place in scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:6:16: 6:32
    let mut _1: Map2<[closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:14: 7:16]>; // in scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:5: 7:30
    let mut _2: [closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:14: 7:16]; // in scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:14: 7:29
    let mut _3: [closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:36: 7:38]; // in scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:36: 7:41

    bb0: {
        _1 = segment2::<[closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:14: 7:16]>(move _2) -> bb1; // scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:5: 7:30
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:5: 7:13
                                         // + literal: Const { ty: fn([closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:14: 7:16]) -> Map2<[closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:14: 7:16]> {segment2::<[closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:14: 7:16]>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = <Map2<[closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:14: 7:16]> as FilterBase2>::map2::<[closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:36: 7:38]>(move _1, move _3) -> bb2; // scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:5: 7:42
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:31: 7:35
                                         // + literal: Const { ty: fn(Map2<[closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:14: 7:16]>, [closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:36: 7:38]) -> Map2<[closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:36: 7:38]> {<Map2<[closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:14: 7:16]> as FilterBase2>::map2::<[closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:36: 7:38]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:8:2: 8:2
    }
}

fn server::{closure#0}(_1: &[closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:14: 7:16]) -> Result<(), ()> {
    let mut _0: std::result::Result<(), ()>; // return place in scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:17: 7:17

    bb0: {
        goto -> bb1;                     // scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:19: 7:27
    }

    bb1: {
        goto -> bb1;                     // scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:19: 7:27
    }
}

fn server::{closure#1}(_1: &[closure@ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:36: 7:38]) -> &str {
    let mut _0: &str;                    // return place in scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:39: 7:39

    bb0: {
        _0 = const "";                   // scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:39: 7:41
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:39: 7:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:7:41: 7:41
    }
}

fn FilterBase2::map2(_1: Self, _2: F) -> Map2<F> {
    debug self => _1;                    // in scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:11:16: 11:20
    debug _fn => _2;                     // in scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:11:22: 11:25
    let mut _0: Map2<F>;                 // return place in scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:11:33: 11:40

    bb0: {
        goto -> bb1;                     // scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:11:61: 11:69
    }

    bb1: {
        goto -> bb1;                     // scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:11:61: 11:69
    }
}

fn segment2(_1: F) -> Map2<F> {
    debug _fn => _1;                     // in scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:18:16: 18:19
    let mut _0: Map2<F>;                 // return place in scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:18:27: 18:34

    bb0: {
        goto -> bb1;                     // scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:19:5: 19:13
    }

    bb1: {
        goto -> bb1;                     // scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:19:5: 19:13
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:22:11: 22:11
    let _1: impl FilterBase2;            // in scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:22:13: 22:21

    bb0: {
        _1 = server() -> bb1;            // scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:22:13: 22:21
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-55608-captures-empty-region.rs:22:13: 22:19
                                         // + literal: Const { ty: fn() -> impl FilterBase2 {server}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/issues/issue-55608-captures-empty-region.rs:22:24: 22:24
    }
}
