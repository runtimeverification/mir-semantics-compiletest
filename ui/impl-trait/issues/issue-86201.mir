// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static STATIC_FN: FunType = {
    let mut _0: FunType;                 // return place in scope 0 at ui/impl-trait/issues/issue-86201.rs:7:19: 7:26

    bb0: {
        _0 = some_fn;                    // scope 0 at ui/impl-trait/issues/issue-86201.rs:7:29: 7:36
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-86201.rs:7:29: 7:36
                                         // + literal: Const { ty: fn() {some_fn}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/impl-trait/issues/issue-86201.rs:7:1: 7:37
    }
}

fn some_fn() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/issues/issue-86201.rs:9:14: 9:14

    bb0: {
        return;                          // scope 0 at ui/impl-trait/issues/issue-86201.rs:9:16: 9:16
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/issues/issue-86201.rs:11:11: 11:11
    let mut _1: <FunType as std::ops::FnOnce<()>>::Output; // in scope 0 at ui/impl-trait/issues/issue-86201.rs:12:46: 12:57
    let mut _2: &FunType;                // in scope 0 at ui/impl-trait/issues/issue-86201.rs:12:46: 12:55
    let _3: &FunType;                    // in scope 0 at ui/impl-trait/issues/issue-86201.rs:12:46: 12:55
    let mut _4: ();                      // in scope 0 at ui/impl-trait/issues/issue-86201.rs:12:46: 12:57
    scope 1 {
    }

    bb0: {
        _3 = const {alloc1: &FunType};   // scope 0 at ui/impl-trait/issues/issue-86201.rs:12:46: 12:55
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-86201.rs:12:46: 12:55
                                         // + literal: Const { ty: &FunType, val: Value(Scalar(alloc1)) }
        _2 = _3;                         // scope 0 at ui/impl-trait/issues/issue-86201.rs:12:46: 12:55
        _1 = <FunType as Fn<()>>::call(move _2, move _4) -> bb1; // scope 0 at ui/impl-trait/issues/issue-86201.rs:12:46: 12:57
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-86201.rs:12:46: 12:55
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a FunType, ()) -> <FunType as FnOnce<()>>::Output {<FunType as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/issues/issue-86201.rs:13:2: 13:2
    }
}

alloc1 (static: STATIC_FN, size: 0, align: 1) {}
