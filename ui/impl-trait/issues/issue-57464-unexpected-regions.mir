// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn wrapped_closure() -> impl Sized {
    let mut _0: impl Sized;              // return place in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:14:25: 14:35
    let _1: [closure@ui/impl-trait/issues/issue-57464-unexpected-regions.rs:15:13: 15:16]; // in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:15:9: 15:10
    let _2: &i32;                        // in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:16:5: 16:10
    let mut _3: &[closure@ui/impl-trait/issues/issue-57464-unexpected-regions.rs:15:13: 15:16]; // in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:16:5: 16:6
    let mut _4: (&i32,);                 // in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:16:5: 16:10
    let mut _5: &i32;                    // in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:16:7: 16:9
    scope 1 {
        debug f => _1;                   // in scope 1 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:15:9: 15:10
        let mut _6: &i32;                // in scope 1 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:16:7: 16:9
    }

    bb0: {
        _3 = &_1;                        // scope 1 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:16:5: 16:6
        _6 = const _;                    // scope 1 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:16:7: 16:9
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-57464-unexpected-regions.rs:16:7: 16:9
                                         // + literal: Const { ty: &i32, val: Unevaluated(wrapped_closure, [], Some(promoted[0])) }
        _5 = _6;                         // scope 1 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:16:7: 16:9
        _4 = (move _5,);                 // scope 1 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:16:5: 16:10
        _2 = <[closure@ui/impl-trait/issues/issue-57464-unexpected-regions.rs:15:13: 15:16] as Fn<(&i32,)>>::call(move _3, move _4) -> bb1; // scope 1 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:16:5: 16:10
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-57464-unexpected-regions.rs:16:5: 16:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/impl-trait/issues/issue-57464-unexpected-regions.rs:15:13: 15:16], (&i32,)) -> <[closure@ui/impl-trait/issues/issue-57464-unexpected-regions.rs:15:13: 15:16] as FnOnce<(&i32,)>>::Output {<[closure@ui/impl-trait/issues/issue-57464-unexpected-regions.rs:15:13: 15:16] as Fn<(&i32,)>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:18:2: 18:2
    }
}

promoted[0] in wrapped_closure: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:16:7: 16:9
    let mut _1: i32;                     // in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:16:8: 16:9

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:16:8: 16:9
        _0 = &_1;                        // scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:16:7: 16:9
        return;                          // scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:16:7: 16:9
    }
}

fn wrapped_closure::{closure#0}(_1: &[closure@ui/impl-trait/issues/issue-57464-unexpected-regions.rs:15:13: 15:16], _2: &i32) -> &i32 {
    debug x => _2;                       // in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:15:14: 15:15
    let mut _0: &i32;                    // return place in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:15:17: 15:17

    bb0: {
        _0 = _2;                         // scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:15:17: 15:18
        return;                          // scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:15:18: 15:18
    }
}

fn wrapped_closure_with_bound() -> impl Sized + 'static {
    let mut _0: impl Sized + 'static;    // return place in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:20:36: 20:56
    let _1: [closure@ui/impl-trait/issues/issue-57464-unexpected-regions.rs:21:13: 21:16]; // in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:21:9: 21:10
    let _2: &i32;                        // in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:22:5: 22:10
    let mut _3: &[closure@ui/impl-trait/issues/issue-57464-unexpected-regions.rs:21:13: 21:16]; // in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:22:5: 22:6
    let mut _4: (&i32,);                 // in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:22:5: 22:10
    let mut _5: &i32;                    // in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:22:7: 22:9
    scope 1 {
        debug f => _1;                   // in scope 1 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:21:9: 21:10
        let mut _6: &i32;                // in scope 1 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:22:7: 22:9
    }

    bb0: {
        _3 = &_1;                        // scope 1 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:22:5: 22:6
        _6 = const _;                    // scope 1 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:22:7: 22:9
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-57464-unexpected-regions.rs:22:7: 22:9
                                         // + literal: Const { ty: &i32, val: Unevaluated(wrapped_closure_with_bound, [], Some(promoted[0])) }
        _5 = _6;                         // scope 1 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:22:7: 22:9
        _4 = (move _5,);                 // scope 1 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:22:5: 22:10
        _2 = <[closure@ui/impl-trait/issues/issue-57464-unexpected-regions.rs:21:13: 21:16] as Fn<(&i32,)>>::call(move _3, move _4) -> bb1; // scope 1 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:22:5: 22:10
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-57464-unexpected-regions.rs:22:5: 22:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/impl-trait/issues/issue-57464-unexpected-regions.rs:21:13: 21:16], (&i32,)) -> <[closure@ui/impl-trait/issues/issue-57464-unexpected-regions.rs:21:13: 21:16] as FnOnce<(&i32,)>>::Output {<[closure@ui/impl-trait/issues/issue-57464-unexpected-regions.rs:21:13: 21:16] as Fn<(&i32,)>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:24:2: 24:2
    }
}

promoted[0] in wrapped_closure_with_bound: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:22:7: 22:9
    let mut _1: i32;                     // in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:22:8: 22:9

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:22:8: 22:9
        _0 = &_1;                        // scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:22:7: 22:9
        return;                          // scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:22:7: 22:9
    }
}

fn wrapped_closure_with_bound::{closure#0}(_1: &[closure@ui/impl-trait/issues/issue-57464-unexpected-regions.rs:21:13: 21:16], _2: &i32) -> &i32 {
    debug x => _2;                       // in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:21:14: 21:15
    let mut _0: &i32;                    // return place in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:21:17: 21:17

    bb0: {
        _0 = _2;                         // scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:21:17: 21:18
        return;                          // scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:21:18: 21:18
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:26:11: 26:11
    let _1: std::boxed::Box<dyn std::marker::Send>; // in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:27:9: 27:10
    let mut _2: std::boxed::Box<impl Sized>; // in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:27:28: 27:55
    let mut _3: impl Sized;              // in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:27:37: 27:54
    let mut _5: std::boxed::Box<impl Sized + 'static>; // in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:28:28: 28:66
    let mut _6: impl Sized + 'static;    // in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:28:37: 28:65
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:27:9: 27:10
        let _4: std::boxed::Box<dyn std::marker::Send>; // in scope 1 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:28:9: 28:10
        scope 2 {
            debug y => _4;               // in scope 2 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:28:9: 28:10
        }
    }

    bb0: {
        _3 = wrapped_closure() -> bb1;   // scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:27:37: 27:54
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-57464-unexpected-regions.rs:27:37: 27:52
                                         // + literal: Const { ty: fn() -> impl Sized {wrapped_closure}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Box::<impl Sized>::new(move _3) -> bb2; // scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:27:28: 27:55
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-57464-unexpected-regions.rs:27:28: 27:36
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(impl Sized) -> Box<impl Sized> {Box::<impl Sized>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = move _2 as std::boxed::Box<dyn std::marker::Send> (Pointer(Unsize)); // scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:27:28: 27:55
        _6 = wrapped_closure_with_bound() -> [return: bb3, unwind: bb7]; // scope 1 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:28:37: 28:65
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-57464-unexpected-regions.rs:28:37: 28:63
                                         // + literal: Const { ty: fn() -> impl Sized + 'static {wrapped_closure_with_bound}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = Box::<impl Sized + 'static>::new(move _6) -> [return: bb4, unwind: bb7]; // scope 1 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:28:28: 28:66
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-57464-unexpected-regions.rs:28:28: 28:36
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(impl Sized + 'static) -> Box<impl Sized + 'static> {Box::<impl Sized + 'static>::new}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = move _5 as std::boxed::Box<dyn std::marker::Send> (Pointer(Unsize)); // scope 1 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:28:28: 28:66
        drop(_4) -> [return: bb5, unwind: bb7]; // scope 1 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:29:1: 29:2
    }

    bb5: {
        drop(_1) -> bb6;                 // scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:29:1: 29:2
    }

    bb6: {
        return;                          // scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:29:2: 29:2
    }

    bb7 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:29:1: 29:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:26:1: 29:2
    }
}

fn A(_1: F) -> A<F> {
    let mut _0: A<F>;                    // return place in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:10:1: 10:12

    bb0: {
        _0 = A::<F>(move _1);            // scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:10:1: 10:12
        return;                          // scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:10:1: 10:12
    }
}

// MIR FOR CTFE
fn A(_1: F) -> A<F> {
    let mut _0: A<F>;                    // return place in scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:10:1: 10:12

    bb0: {
        _0 = A::<F>(move _1);            // scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:10:1: 10:12
        return;                          // scope 0 at ui/impl-trait/issues/issue-57464-unexpected-regions.rs:10:1: 10:12
    }
}
