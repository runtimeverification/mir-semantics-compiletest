// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn wrapped_closure() -> impl Sized {
    let mut _0: impl Sized;
    let _1: [closure@ui/impl-trait/issues/issue-57464-unexpected-regions.rs:15:13: 15:16];
    let _2: &i32;
    let mut _3: &[closure@ui/impl-trait/issues/issue-57464-unexpected-regions.rs:15:13: 15:16];
    let mut _4: (&i32,);
    scope 1 {
        debug f => const ZeroSized: [closure@ui/impl-trait/issues/issue-57464-unexpected-regions.rs:15:13: 15:16];
        let mut _5: &i32;
    }

    bb0: {
        _3 = &_1;
        _5 = const _;
        _4 = (_5,);
        _2 = <[closure@ui/impl-trait/issues/issue-57464-unexpected-regions.rs:15:13: 15:16] as Fn<(&i32,)>>::call(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in wrapped_closure: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

fn wrapped_closure::{closure#0}(_1: &[closure@ui/impl-trait/issues/issue-57464-unexpected-regions.rs:15:13: 15:16], _2: &i32) -> &i32 {
    debug x => _2;
    let mut _0: &i32;

    bb0: {
        _0 = _2;
        return;
    }
}

fn wrapped_closure_with_bound() -> impl Sized + 'static {
    let mut _0: impl Sized + 'static;
    let _1: [closure@ui/impl-trait/issues/issue-57464-unexpected-regions.rs:21:13: 21:16];
    let _2: &i32;
    let mut _3: &[closure@ui/impl-trait/issues/issue-57464-unexpected-regions.rs:21:13: 21:16];
    let mut _4: (&i32,);
    scope 1 {
        debug f => const ZeroSized: [closure@ui/impl-trait/issues/issue-57464-unexpected-regions.rs:21:13: 21:16];
        let mut _5: &i32;
    }

    bb0: {
        _3 = &_1;
        _5 = const _;
        _4 = (_5,);
        _2 = <[closure@ui/impl-trait/issues/issue-57464-unexpected-regions.rs:21:13: 21:16] as Fn<(&i32,)>>::call(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in wrapped_closure_with_bound: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

fn wrapped_closure_with_bound::{closure#0}(_1: &[closure@ui/impl-trait/issues/issue-57464-unexpected-regions.rs:21:13: 21:16], _2: &i32) -> &i32 {
    debug x => _2;
    let mut _0: &i32;

    bb0: {
        _0 = _2;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<dyn std::marker::Send>;
    let mut _2: std::boxed::Box<impl Sized>;
    let mut _3: impl Sized;
    let mut _5: std::boxed::Box<impl Sized + 'static>;
    let mut _6: impl Sized + 'static;
    scope 1 {
        debug x => _1;
        let _4: std::boxed::Box<dyn std::marker::Send>;
        scope 2 {
            debug y => _4;
        }
    }

    bb0: {
        _3 = wrapped_closure() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Box::<impl Sized>::new(const ZeroSized: impl Sized) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = move _2 as std::boxed::Box<dyn std::marker::Send> (Pointer(Unsize));
        _6 = wrapped_closure_with_bound() -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _5 = Box::<impl Sized + 'static>::new(const ZeroSized: impl Sized + 'static) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _4 = move _5 as std::boxed::Box<dyn std::marker::Send> (Pointer(Unsize));
        drop(_4) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        drop(_1) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn A(_1: F) -> A<F> {
    let mut _0: A<F>;

    bb0: {
        _0 = A::<F>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn A(_1: F) -> A<F> {
    let mut _0: A<F>;

    bb0: {
        _0 = A::<F>(move _1);
        return;
    }
}
