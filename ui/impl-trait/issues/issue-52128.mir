// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-trait/issues/issue-52128.rs:11:10: 11:12>::assert_receiver_is_total_eq(_1: &Range) -> () {
    debug self => _1;                    // in scope 0 at ui/impl-trait/issues/issue-52128.rs:11:10: 11:12
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/issues/issue-52128.rs:11:10: 11:12

    bb0: {
        return;                          // scope 0 at ui/impl-trait/issues/issue-52128.rs:11:12: 11:12
    }
}

fn <impl at ui/impl-trait/issues/issue-52128.rs:11:14: 11:23>::eq(_1: &Range, _2: &Range) -> bool {
    debug self => _1;                    // in scope 0 at ui/impl-trait/issues/issue-52128.rs:11:14: 11:23
    debug other => _2;                   // in scope 0 at ui/impl-trait/issues/issue-52128.rs:11:14: 11:23
    let mut _0: bool;                    // return place in scope 0 at ui/impl-trait/issues/issue-52128.rs:11:14: 11:23

    bb0: {
        _0 = const true;                 // scope 0 at ui/impl-trait/issues/issue-52128.rs:11:14: 11:23
        return;                          // scope 0 at ui/impl-trait/issues/issue-52128.rs:11:23: 11:23
    }
}

fn <impl at ui/impl-trait/issues/issue-52128.rs:11:25: 11:28>::cmp(_1: &Range, _2: &Range) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/impl-trait/issues/issue-52128.rs:11:25: 11:28
    debug other => _2;                   // in scope 0 at ui/impl-trait/issues/issue-52128.rs:11:25: 11:28
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/impl-trait/issues/issue-52128.rs:11:25: 11:28

    bb0: {
        _0 = const Equal;                // scope 0 at ui/impl-trait/issues/issue-52128.rs:11:25: 11:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-52128.rs:11:25: 11:28
                                         // + literal: Const { ty: std::cmp::Ordering, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/impl-trait/issues/issue-52128.rs:11:28: 11:28
    }
}

fn <impl at ui/impl-trait/issues/issue-52128.rs:11:30: 11:40>::partial_cmp(_1: &Range, _2: &Range) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/impl-trait/issues/issue-52128.rs:11:30: 11:40
    debug other => _2;                   // in scope 0 at ui/impl-trait/issues/issue-52128.rs:11:30: 11:40
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/impl-trait/issues/issue-52128.rs:11:30: 11:40

    bb0: {
        _0 = const Option::<std::cmp::Ordering>::Some(Equal); // scope 0 at ui/impl-trait/issues/issue-52128.rs:11:30: 11:40
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-52128.rs:11:30: 11:40
                                         // + literal: Const { ty: Option<std::cmp::Ordering>, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/impl-trait/issues/issue-52128.rs:11:40: 11:40
    }
}

fn <impl at ui/impl-trait/issues/issue-52128.rs:14:1: 14:14>::iter_with_range(_1: &RangeMap) -> impl Iterator<Item = (&Range, &u8)> + '_ {
    debug self => _1;                    // in scope 0 at ui/impl-trait/issues/issue-52128.rs:15:28: 15:36
    let mut _0: impl std::iter::Iterator<Item = (&Range, &u8)> + '_; // return place in scope 0 at ui/impl-trait/issues/issue-52128.rs:15:41: 15:87
    let mut _2: &std::collections::BTreeMap<Range, u8>; // in scope 0 at ui/impl-trait/issues/issue-52128.rs:16:9: 16:37
    let mut _3: std::ops::Range<Range>;  // in scope 0 at ui/impl-trait/issues/issue-52128.rs:16:24: 16:36

    bb0: {
        _2 = &((*_1).0: std::collections::BTreeMap<Range, u8>); // scope 0 at ui/impl-trait/issues/issue-52128.rs:16:9: 16:37
        _0 = BTreeMap::<Range, u8>::range::<Range, std::ops::Range<Range>>(move _2, move _3) -> bb1; // scope 0 at ui/impl-trait/issues/issue-52128.rs:16:9: 16:37
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-52128.rs:16:18: 16:23
                                         // + literal: Const { ty: for<'a> fn(&'a BTreeMap<Range, u8>, std::ops::Range<Range>) -> std::collections::btree_map::Range<'a, Range, u8> {BTreeMap::<Range, u8>::range::<Range, std::ops::Range<Range>>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/issues/issue-52128.rs:17:6: 17:6
    }
}

fn <impl at ui/impl-trait/issues/issue-52128.rs:14:1: 14:14>::iter(_1: &RangeMap) -> impl Iterator<Item = &u8> + '_ {
    debug self => _1;                    // in scope 0 at ui/impl-trait/issues/issue-52128.rs:19:21: 19:29
    let mut _0: impl std::iter::Iterator<Item = &u8> + '_; // return place in scope 0 at ui/impl-trait/issues/issue-52128.rs:19:34: 19:67
    let mut _2: impl std::iter::Iterator<Item = (&Range, &u8)> + '_; // in scope 0 at ui/impl-trait/issues/issue-52128.rs:20:9: 20:31
    let mut _3: &RangeMap;               // in scope 0 at ui/impl-trait/issues/issue-52128.rs:20:9: 20:31
    let mut _4: [closure@ui/impl-trait/issues/issue-52128.rs:20:36: 20:47]; // in scope 0 at ui/impl-trait/issues/issue-52128.rs:20:36: 20:52

    bb0: {
        _3 = _1;                         // scope 0 at ui/impl-trait/issues/issue-52128.rs:20:9: 20:31
        _2 = RangeMap::iter_with_range(move _3) -> bb1; // scope 0 at ui/impl-trait/issues/issue-52128.rs:20:9: 20:31
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-52128.rs:20:14: 20:29
                                         // + literal: Const { ty: for<'a> fn(&'a RangeMap) -> impl Iterator<Item = (&'a Range, &'a u8)> + 'a {RangeMap::iter_with_range}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = <impl Iterator<Item = (&Range, &u8)> + '_ as Iterator>::map::<&u8, [closure@ui/impl-trait/issues/issue-52128.rs:20:36: 20:47]>(move _2, move _4) -> bb2; // scope 0 at ui/impl-trait/issues/issue-52128.rs:20:9: 20:53
                                         // mir::Constant
                                         // + span: ui/impl-trait/issues/issue-52128.rs:20:32: 20:35
                                         // + literal: Const { ty: fn(impl Iterator<Item = (&Range, &u8)> + '_, [closure@ui/impl-trait/issues/issue-52128.rs:20:36: 20:47]) -> Map<impl Iterator<Item = (&Range, &u8)> + '_, [closure@ui/impl-trait/issues/issue-52128.rs:20:36: 20:47]> {<impl Iterator<Item = (&Range, &u8)> + '_ as Iterator>::map::<&u8, [closure@ui/impl-trait/issues/issue-52128.rs:20:36: 20:47]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/impl-trait/issues/issue-52128.rs:21:6: 21:6
    }
}

fn <impl at ui/impl-trait/issues/issue-52128.rs:14:1: 14:14>::iter::{closure#0}(_1: &mut [closure@ui/impl-trait/issues/issue-52128.rs:20:36: 20:47], _2: (&Range, &u8)) -> &u8 {
    let mut _0: &u8;                     // return place in scope 0 at ui/impl-trait/issues/issue-52128.rs:20:41: 20:45
    scope 1 {
        debug data => _0;                // in scope 1 at ui/impl-trait/issues/issue-52128.rs:20:41: 20:45
    }

    bb0: {
        _0 = (_2.1: &u8);                // scope 0 at ui/impl-trait/issues/issue-52128.rs:20:41: 20:45
        return;                          // scope 0 at ui/impl-trait/issues/issue-52128.rs:20:52: 20:52
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/issues/issue-52128.rs:25:11: 25:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/issues/issue-52128.rs:25:13: 25:13
    }
}
