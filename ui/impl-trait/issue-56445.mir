// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
S::m2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/impl-trait/issue-56445.rs:10:18: 10:27

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/impl-trait/issue-56445.rs:10:18: 10:27
        _0 = S::<'_>::size() -> bb1;     // scope 0 at ui/impl-trait/issue-56445.rs:10:18: 10:27
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-56445.rs:10:18: 10:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> usize {S::<'_>::size}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/issue-56445.rs:10:18: 10:27
    }
}

fn <impl at ui/impl-trait/issue-56445.rs:13:1: 13:15>::size() -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/impl-trait/issue-56445.rs:15:28: 15:33

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/impl-trait/issue-56445.rs:15:36: 15:37
        return;                          // scope 0 at ui/impl-trait/issue-56445.rs:15:39: 15:39
    }
}

// MIR FOR CTFE
fn <impl at ui/impl-trait/issue-56445.rs:13:1: 13:15>::size() -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/impl-trait/issue-56445.rs:15:28: 15:33

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/impl-trait/issue-56445.rs:15:36: 15:37
        return;                          // scope 0 at ui/impl-trait/issue-56445.rs:15:39: 15:39
    }
}

fn <impl at ui/impl-trait/issue-56445.rs:13:1: 13:15>::new() -> S<'_> {
    let mut _0: S<'_>;                   // return place in scope 0 at ui/impl-trait/issue-56445.rs:17:21: 17:25
    let mut _1: std::marker::PhantomData<&u8>; // in scope 0 at ui/impl-trait/issue-56445.rs:21:17: 21:28
    let mut _2: [u8; 1];                 // in scope 0 at ui/impl-trait/issue-56445.rs:22:17: 22:34

    bb0: {
        _2 = [const 0_u8; 1];            // scope 0 at ui/impl-trait/issue-56445.rs:22:17: 22:34
        _0 = S::<'_> { m1: move _1, m2: move _2 }; // scope 0 at ui/impl-trait/issue-56445.rs:19:9: 23:10
                                         // adt
                                         // + user_ty: UserType(0)
        return;                          // scope 0 at ui/impl-trait/issue-56445.rs:24:6: 24:6
    }
}

<impl at ui/impl-trait/issue-56445.rs:13:1: 13:15>::new::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/impl-trait/issue-56445.rs:22:21: 22:33

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/impl-trait/issue-56445.rs:22:21: 22:33
        _0 = S::<'_>::size() -> bb1;     // scope 0 at ui/impl-trait/issue-56445.rs:22:21: 22:33
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-56445.rs:22:21: 22:31
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> usize {S::<'_>::size}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/issue-56445.rs:22:21: 22:33
    }
}
