// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn reify_as() -> Thunk<impl ContFn> {
    let mut _0: Thunk<impl ContFn>;      // return place in scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:4:18: 4:36
    let mut _1: [closure@ui/impl-trait/hidden-type-is-opaque.rs:5:16: 5:26]; // in scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:5:16: 8:6

    bb0: {
        _0 = Thunk::<[closure@ui/impl-trait/hidden-type-is-opaque.rs:5:16: 5:26]>::new(move _1) -> bb1; // scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:5:5: 8:7
                                         // mir::Constant
                                         // + span: ui/impl-trait/hidden-type-is-opaque.rs:5:5: 5:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([closure@ui/impl-trait/hidden-type-is-opaque.rs:5:16: 5:26]) -> Thunk<[closure@ui/impl-trait/hidden-type-is-opaque.rs:5:16: 5:26]> {Thunk::<[closure@ui/impl-trait/hidden-type-is-opaque.rs:5:16: 5:26]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:9:2: 9:2
    }
}

fn reify_as::{closure#0}(_1: [closure@ui/impl-trait/hidden-type-is-opaque.rs:5:16: 5:26], _2: Continuation) -> Continuation {
    debug cont => _2;                    // in scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:5:17: 5:25
    let mut _0: Continuation;            // return place in scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:5:27: 5:27
    let _3: ();                          // in scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:6:9: 6:24
    let mut _4: &mut Continuation;       // in scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:6:9: 6:24

    bb0: {
        _4 = &mut _2;                    // scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:6:9: 6:24
        _3 = Continuation::reify_as(move _4) -> bb1; // scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:6:9: 6:24
                                         // mir::Constant
                                         // + span: ui/impl-trait/hidden-type-is-opaque.rs:6:14: 6:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut Continuation) {Continuation::reify_as}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:8:6: 8:6
    }
}

fn reify_as_tait() -> Thunk<Tait> {
    let mut _0: Thunk<Tait>;             // return place in scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:13:23: 13:34
    let mut _1: [closure@ui/impl-trait/hidden-type-is-opaque.rs:14:16: 14:26]; // in scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:14:16: 17:6

    bb0: {
        _0 = Thunk::<[closure@ui/impl-trait/hidden-type-is-opaque.rs:14:16: 14:26]>::new(move _1) -> bb1; // scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:14:5: 17:7
                                         // mir::Constant
                                         // + span: ui/impl-trait/hidden-type-is-opaque.rs:14:5: 14:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([closure@ui/impl-trait/hidden-type-is-opaque.rs:14:16: 14:26]) -> Thunk<[closure@ui/impl-trait/hidden-type-is-opaque.rs:14:16: 14:26]> {Thunk::<[closure@ui/impl-trait/hidden-type-is-opaque.rs:14:16: 14:26]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:18:2: 18:2
    }
}

fn reify_as_tait::{closure#0}(_1: [closure@ui/impl-trait/hidden-type-is-opaque.rs:14:16: 14:26], _2: Continuation) -> Continuation {
    debug cont => _2;                    // in scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:14:17: 14:25
    let mut _0: Continuation;            // return place in scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:14:27: 14:27
    let _3: ();                          // in scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:15:9: 15:24
    let mut _4: &mut Continuation;       // in scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:15:9: 15:24

    bb0: {
        _4 = &mut _2;                    // scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:15:9: 15:24
        _3 = Continuation::reify_as(move _4) -> bb1; // scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:15:9: 15:24
                                         // mir::Constant
                                         // + span: ui/impl-trait/hidden-type-is-opaque.rs:15:14: 15:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut Continuation) {Continuation::reify_as}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:17:6: 17:6
    }
}

fn <impl at ui/impl-trait/hidden-type-is-opaque.rs:23:1: 23:17>::new(_1: F) -> Thunk<F> {
    debug f => _1;                       // in scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:24:12: 24:13
    let mut _0: Thunk<F>;                // return place in scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:24:21: 24:25
    let mut _2: F;                       // in scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:28:15: 28:16

    bb0: {
        _2 = move _1;                    // scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:28:15: 28:16
        _0 = Thunk::<F>(move _2);        // scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:28:9: 28:17
        return;                          // scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:29:6: 29:6
    }
}

fn <impl at ui/impl-trait/hidden-type-is-opaque.rs:38:1: 38:18>::reify_as(_1: &mut Continuation) -> () {
    debug self => _1;                    // in scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:39:17: 39:26
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:39:28: 39:28

    bb0: {
        return;                          // scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:39:30: 39:30
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:42:11: 42:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:42:13: 42:13
    }
}

fn Thunk(_1: F) -> Thunk<F> {
    let mut _0: Thunk<F>;                // return place in scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:21:1: 21:16

    bb0: {
        _0 = Thunk::<F>(move _1);        // scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:21:1: 21:16
        return;                          // scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:21:1: 21:16
    }
}

// MIR FOR CTFE
fn Thunk(_1: F) -> Thunk<F> {
    let mut _0: Thunk<F>;                // return place in scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:21:1: 21:16

    bb0: {
        _0 = Thunk::<F>(move _1);        // scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:21:1: 21:16
        return;                          // scope 0 at ui/impl-trait/hidden-type-is-opaque.rs:21:1: 21:16
    }
}
