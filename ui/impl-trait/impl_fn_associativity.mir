// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f_debug() -> impl Fn() -> impl Debug {
    let mut _0: impl Fn() -> impl std::fmt::Debug;

    bb0: {
        return;
    }
}

fn f_debug::{closure#0}(_1: &[closure@ui/impl-trait/impl_fn_associativity.rs:6:5: 6:7]) -> impl Debug {
    let mut _0: impl std::fmt::Debug;

    bb0: {
        return;
    }
}

fn ff_debug() -> impl Fn() -> impl Fn() -> impl Debug {
    let mut _0: impl Fn() -> impl Fn() -> impl std::fmt::Debug;

    bb0: {
        return;
    }
}

fn ff_debug::{closure#0}(_1: &[closure@ui/impl-trait/impl_fn_associativity.rs:10:5: 10:7]) -> impl Fn() -> impl Debug {
    let mut _0: impl Fn() -> impl std::fmt::Debug;

    bb0: {
        _0 = f_debug() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn multi() -> impl Fn() -> impl Debug + Send {
    let mut _0: impl Fn() -> impl std::fmt::Debug + std::marker::Send;

    bb0: {
        return;
    }
}

fn multi::{closure#0}(_1: &[closure@ui/impl-trait/impl_fn_associativity.rs:14:5: 14:7]) -> impl Debug + Send {
    let mut _0: impl std::fmt::Debug + std::marker::Send;

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: impl std::fmt::Debug;
    let mut _2: &impl Fn() -> impl std::fmt::Debug;
    let _3: impl Fn() -> impl std::fmt::Debug;
    let mut _4: &impl Fn() -> impl Fn() -> impl std::fmt::Debug;
    let _5: impl Fn() -> impl Fn() -> impl std::fmt::Debug;
    let mut _6: (&std::string::String, &&str);
    let mut _7: &std::string::String;
    let _8: std::string::String;
    let mut _10: std::fmt::Arguments<'_>;
    let mut _11: &[&str];
    let mut _12: &[core::fmt::rt::Argument<'_>];
    let _13: &[core::fmt::rt::Argument<'_>; 1];
    let _14: [core::fmt::rt::Argument<'_>; 1];
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &impl std::fmt::Debug;
    let mut _19: bool;
    let mut _20: bool;
    let _22: !;
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: &impl Fn() -> impl std::fmt::Debug + std::marker::Send;
    let _26: impl Fn() -> impl std::fmt::Debug + std::marker::Send;
    let mut _27: (&std::string::String, &&str);
    let mut _28: &std::string::String;
    let _29: std::string::String;
    let mut _31: std::fmt::Arguments<'_>;
    let mut _32: &[&str];
    let mut _33: &[core::fmt::rt::Argument<'_>];
    let _34: &[core::fmt::rt::Argument<'_>; 1];
    let _35: [core::fmt::rt::Argument<'_>; 1];
    let mut _36: core::fmt::rt::Argument<'_>;
    let _37: &impl std::fmt::Debug + std::marker::Send;
    let mut _40: bool;
    let mut _41: bool;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let _45: ();
    let _46: &impl std::fmt::Debug + std::marker::Send;
    scope 1 {
        debug debug => const ZeroSized: impl Debug;
        let _9: std::string::String;
        let _17: &std::string::String;
        let _18: &&str;
        let _24: impl std::fmt::Debug + std::marker::Send;
        let mut _49: &&str;
        let mut _50: &[&str; 1];
        scope 2 {
            debug res => _9;
        }
        scope 3 {
            debug left_val => _17;
            debug right_val => _18;
            let _21: core::panicking::AssertKind;
            scope 4 {
                debug kind => _21;
            }
        }
        scope 5 {
            debug x => const ZeroSized: impl Debug + Send;
            let _30: std::string::String;
            let _38: &std::string::String;
            let _39: &&str;
            let mut _47: &&str;
            let mut _48: &[&str; 1];
            scope 6 {
                debug res => _30;
            }
            scope 7 {
                debug left_val => _38;
                debug right_val => _39;
                let _42: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _42;
                }
            }
        }
    }

    bb0: {
        _5 = ff_debug() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_5;
        _3 = <impl Fn() -> impl Fn() -> impl Debug as Fn<()>>::call(move _4, const ()) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = &_3;
        _1 = <impl Fn() -> impl Debug as Fn<()>>::call(move _2, const ()) -> [return: bb3, unwind continue];
    }

    bb3: {
        _50 = const _;
        _11 = _50 as &[&str] (Pointer(Unsize));
        _16 = &_1;
        _15 = core::fmt::rt::Argument::<'_>::new_debug::<impl Debug>(_16) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = [move _15];
        _13 = &_14;
        _12 = _13 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _10 = Arguments::<'_>::new_v1(move _11, move _12) -> [return: bb5, unwind continue];
    }

    bb5: {
        _9 = format(move _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        _8 = move _9;
        _7 = &_8;
        _49 = const _;
        _6 = (move _7, _49);
        _17 = (_6.0: &std::string::String);
        _18 = (_6.1: &&str);
        _20 = <String as PartialEq<&str>>::eq(_17, _18) -> [return: bb7, unwind: bb22];
    }

    bb7: {
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _21 = core::panicking::AssertKind::Eq;
        _23 = Option::<Arguments<'_>>::None;
        _22 = core::panicking::assert_failed::<String, &str>(move _21, _17, _18, move _23) -> bb22;
    }

    bb9: {
        drop(_8) -> [return: bb10, unwind continue];
    }

    bb10: {
        _26 = multi() -> [return: bb11, unwind continue];
    }

    bb11: {
        _25 = &_26;
        _24 = <impl Fn() -> impl Debug + Send as Fn<()>>::call(move _25, const ()) -> [return: bb12, unwind continue];
    }

    bb12: {
        _48 = const _;
        _32 = _48 as &[&str] (Pointer(Unsize));
        _37 = &_24;
        _36 = core::fmt::rt::Argument::<'_>::new_debug::<impl Debug + Send>(_37) -> [return: bb13, unwind continue];
    }

    bb13: {
        _35 = [move _36];
        _34 = &_35;
        _33 = _34 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _31 = Arguments::<'_>::new_v1(move _32, move _33) -> [return: bb14, unwind continue];
    }

    bb14: {
        _30 = format(move _31) -> [return: bb15, unwind continue];
    }

    bb15: {
        _29 = move _30;
        _28 = &_29;
        _47 = const _;
        _27 = (move _28, _47);
        _38 = (_27.0: &std::string::String);
        _39 = (_27.1: &&str);
        _41 = <String as PartialEq<&str>>::eq(_38, _39) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<String, &str>(move _42, _38, _39, move _44) -> bb21;
    }

    bb18: {
        drop(_29) -> [return: bb19, unwind continue];
    }

    bb19: {
        _46 = &_24;
        _45 = assert_send::<impl Debug + Send>(_46) -> [return: bb20, unwind continue];
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_29) -> [return: bb23, unwind terminate];
    }

    bb22 (cleanup): {
        drop(_8) -> [return: bb23, unwind terminate];
    }

    bb23 (cleanup): {
        resume;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "()";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "()";
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn assert_send(_1: &impl Send) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
