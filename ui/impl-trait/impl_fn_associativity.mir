// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f_debug() -> impl Fn() -> impl Debug {
    let mut _0: impl Fn() -> impl std::fmt::Debug; // return place in scope 0 at ui/impl-trait/impl_fn_associativity.rs:5:17: 5:40

    bb0: {
        return;                          // scope 0 at ui/impl-trait/impl_fn_associativity.rs:7:2: 7:2
    }
}

fn f_debug::{closure#0}(_1: &[closure@ui/impl-trait/impl_fn_associativity.rs:6:5: 6:7]) -> impl Debug {
    let mut _0: impl std::fmt::Debug;    // return place in scope 0 at ui/impl-trait/impl_fn_associativity.rs:6:8: 6:8

    bb0: {
        return;                          // scope 0 at ui/impl-trait/impl_fn_associativity.rs:6:10: 6:10
    }
}

fn ff_debug() -> impl Fn() -> impl Fn() -> impl Debug {
    let mut _0: impl Fn() -> impl Fn() -> impl std::fmt::Debug; // return place in scope 0 at ui/impl-trait/impl_fn_associativity.rs:9:18: 9:54

    bb0: {
        return;                          // scope 0 at ui/impl-trait/impl_fn_associativity.rs:11:2: 11:2
    }
}

fn ff_debug::{closure#0}(_1: &[closure@ui/impl-trait/impl_fn_associativity.rs:10:5: 10:7]) -> impl Fn() -> impl Debug {
    let mut _0: impl Fn() -> impl std::fmt::Debug; // return place in scope 0 at ui/impl-trait/impl_fn_associativity.rs:10:8: 10:8

    bb0: {
        _0 = f_debug() -> bb1;           // scope 0 at ui/impl-trait/impl_fn_associativity.rs:10:8: 10:17
                                         // mir::Constant
                                         // + span: ui/impl-trait/impl_fn_associativity.rs:10:8: 10:15
                                         // + literal: Const { ty: fn() -> impl Fn() -> impl Debug {f_debug}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/impl_fn_associativity.rs:10:17: 10:17
    }
}

fn multi() -> impl Fn() -> impl Debug + Send {
    let mut _0: impl Fn() -> impl std::fmt::Debug + std::marker::Send; // return place in scope 0 at ui/impl-trait/impl_fn_associativity.rs:13:15: 13:47

    bb0: {
        return;                          // scope 0 at ui/impl-trait/impl_fn_associativity.rs:15:2: 15:2
    }
}

fn multi::{closure#0}(_1: &[closure@ui/impl-trait/impl_fn_associativity.rs:14:5: 14:7]) -> impl Debug + Send {
    let mut _0: impl std::fmt::Debug + std::marker::Send; // return place in scope 0 at ui/impl-trait/impl_fn_associativity.rs:14:8: 14:8

    bb0: {
        return;                          // scope 0 at ui/impl-trait/impl_fn_associativity.rs:14:10: 14:10
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/impl_fn_associativity.rs:17:11: 17:11
    let _1: impl std::fmt::Debug;        // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:19:9: 19:14
    let mut _2: &impl Fn() -> impl std::fmt::Debug; // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:19:17: 19:29
    let _3: impl Fn() -> impl std::fmt::Debug; // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:19:17: 19:29
    let mut _4: &impl Fn() -> impl Fn() -> impl std::fmt::Debug; // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:19:17: 19:27
    let _5: impl Fn() -> impl Fn() -> impl std::fmt::Debug; // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:19:17: 19:27
    let mut _6: ();                      // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:19:17: 19:29
    let mut _7: ();                      // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:19:17: 19:31
    let mut _8: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _9: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _10: std::string::String;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let mut _12: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _13: &[&str];                // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:20:24: 20:30
    let mut _14: &[&str; 1];             // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:20:24: 20:30
    let _15: &[&str; 1];                 // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:20:24: 20:30
    let mut _16: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _17: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _18: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _19: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _20: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:20:32: 20:37
    let mut _21: &impl std::fmt::Debug;  // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:20:32: 20:37
    let _22: &impl std::fmt::Debug;      // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:20:32: 20:37
    let mut _23: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _26: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _27: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _28: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _29: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _31: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _32: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _33: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _34: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _35: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _36: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _39: &impl Fn() -> impl std::fmt::Debug + std::marker::Send; // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:22:13: 22:20
    let _40: impl Fn() -> impl std::fmt::Debug + std::marker::Send; // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:22:13: 22:20
    let mut _41: ();                     // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:22:13: 22:22
    let mut _42: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _43: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _44: std::string::String;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let mut _46: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _47: &[&str];                // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:23:24: 23:30
    let mut _48: &[&str; 1];             // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:23:24: 23:30
    let _49: &[&str; 1];                 // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:23:24: 23:30
    let mut _50: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _51: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _52: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _53: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _54: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:23:32: 23:33
    let mut _55: &impl std::fmt::Debug + std::marker::Send; // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:23:32: 23:33
    let _56: &impl std::fmt::Debug + std::marker::Send; // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:23:32: 23:33
    let mut _57: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _60: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _61: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _62: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _63: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _65: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _66: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _67: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _68: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _69: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _70: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _71: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _72: ();                         // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:25:5: 25:20
    let mut _73: &impl std::fmt::Debug + std::marker::Send; // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:25:17: 25:19
    let _74: &impl std::fmt::Debug + std::marker::Send; // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:25:17: 25:19
    scope 1 {
        debug debug => _1;               // in scope 1 at ui/impl-trait/impl_fn_associativity.rs:19:9: 19:14
        let _11: std::string::String;    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
        let _24: &std::string::String;   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _25: &&str;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _38: impl std::fmt::Debug + std::marker::Send; // in scope 1 at ui/impl-trait/impl_fn_associativity.rs:22:9: 22:10
        let mut _77: &&str;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _78: &[&str; 1];         // in scope 1 at ui/impl-trait/impl_fn_associativity.rs:20:24: 20:30
        scope 2 {
            debug res => _11;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
        }
        scope 3 {
            debug left_val => _24;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _25;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _30: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 4 {
                debug kind => _30;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 5 {
            debug x => _38;              // in scope 5 at ui/impl-trait/impl_fn_associativity.rs:22:9: 22:10
            let _45: std::string::String; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
            let _58: &std::string::String; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _59: &&str;              // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _75: &&str;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _76: &[&str; 1];     // in scope 5 at ui/impl-trait/impl_fn_associativity.rs:23:24: 23:30
            scope 6 {
                debug res => _45;        // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
            }
            scope 7 {
                debug left_val => _58;   // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _59;  // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _64: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 8 {
                    debug kind => _64;   // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _5 = ff_debug() -> bb1;          // scope 0 at ui/impl-trait/impl_fn_associativity.rs:19:17: 19:27
                                         // mir::Constant
                                         // + span: ui/impl-trait/impl_fn_associativity.rs:19:17: 19:25
                                         // + literal: Const { ty: fn() -> impl Fn() -> impl Fn() -> impl Debug {ff_debug}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at ui/impl-trait/impl_fn_associativity.rs:19:17: 19:27
        _3 = <impl Fn() -> impl Fn() -> impl Debug as Fn<()>>::call(move _4, move _6) -> bb2; // scope 0 at ui/impl-trait/impl_fn_associativity.rs:19:17: 19:29
                                         // mir::Constant
                                         // + span: ui/impl-trait/impl_fn_associativity.rs:19:17: 19:27
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a impl Fn() -> impl Fn() -> impl Debug, ()) -> <impl Fn() -> impl Fn() -> impl Debug as FnOnce<()>>::Output {<impl Fn() -> impl Fn() -> impl Debug as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = &_3;                        // scope 0 at ui/impl-trait/impl_fn_associativity.rs:19:17: 19:29
        _1 = <impl Fn() -> impl Debug as Fn<()>>::call(move _2, move _7) -> bb3; // scope 0 at ui/impl-trait/impl_fn_associativity.rs:19:17: 19:31
                                         // mir::Constant
                                         // + span: ui/impl-trait/impl_fn_associativity.rs:19:17: 19:29
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a impl Fn() -> impl Debug, ()) -> <impl Fn() -> impl Debug as FnOnce<()>>::Output {<impl Fn() -> impl Debug as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb3: {
        _78 = const _;                   // scope 1 at ui/impl-trait/impl_fn_associativity.rs:20:24: 20:30
                                         // mir::Constant
                                         // + span: ui/impl-trait/impl_fn_associativity.rs:20:24: 20:30
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[3])) }
        _15 = _78;                       // scope 1 at ui/impl-trait/impl_fn_associativity.rs:20:24: 20:30
        _14 = _15;                       // scope 1 at ui/impl-trait/impl_fn_associativity.rs:20:24: 20:30
        _13 = move _14 as &[&str] (Pointer(Unsize)); // scope 1 at ui/impl-trait/impl_fn_associativity.rs:20:24: 20:30
        _22 = &_1;                       // scope 1 at ui/impl-trait/impl_fn_associativity.rs:20:32: 20:37
        _21 = _22;                       // scope 1 at ui/impl-trait/impl_fn_associativity.rs:20:32: 20:37
        _20 = core::fmt::ArgumentV1::<'_>::new_debug::<impl Debug>(move _21) -> bb4; // scope 1 at ui/impl-trait/impl_fn_associativity.rs:20:32: 20:37
                                         // mir::Constant
                                         // + span: ui/impl-trait/impl_fn_associativity.rs:20:32: 20:37
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b impl Debug) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<impl Debug>}, val: Value(<ZST>) }
    }

    bb4: {
        _19 = [move _20];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _18 = &_19;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _17 = _18;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _16 = move _17 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _12 = Arguments::<'_>::new_v1(move _13, move _16) -> bb5; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = format(move _12) -> bb6;   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb6: {
        _10 = move _11;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _9 = &_10;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _77 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[2])) }
        _23 = _77;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _8 = (move _9, move _23);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _24 = (_8.0: &std::string::String); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _25 = (_8.1: &&str);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _28 = _24;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _29 = _25;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _27 = <String as PartialEq<&str>>::eq(move _28, move _29) -> [return: bb7, unwind: bb22]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        _26 = Not(move _27);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _26) -> [0: bb9, otherwise: bb8]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _30 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _32 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _34 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _33 = _34;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _36 = _25;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _35 = _36;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _37 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _31 = core::panicking::assert_failed::<String, &str>(move _32, move _33, move _35, move _37) -> bb22; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_10) -> bb10;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb10: {
        _40 = multi() -> bb11;           // scope 1 at ui/impl-trait/impl_fn_associativity.rs:22:13: 22:20
                                         // mir::Constant
                                         // + span: ui/impl-trait/impl_fn_associativity.rs:22:13: 22:18
                                         // + literal: Const { ty: fn() -> impl Fn() -> impl Debug + Send {multi}, val: Value(<ZST>) }
    }

    bb11: {
        _39 = &_40;                      // scope 1 at ui/impl-trait/impl_fn_associativity.rs:22:13: 22:20
        _38 = <impl Fn() -> impl Debug + Send as Fn<()>>::call(move _39, move _41) -> bb12; // scope 1 at ui/impl-trait/impl_fn_associativity.rs:22:13: 22:22
                                         // mir::Constant
                                         // + span: ui/impl-trait/impl_fn_associativity.rs:22:13: 22:20
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a impl Fn() -> impl Debug + Send, ()) -> <impl Fn() -> impl Debug + Send as FnOnce<()>>::Output {<impl Fn() -> impl Debug + Send as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb12: {
        _76 = const _;                   // scope 5 at ui/impl-trait/impl_fn_associativity.rs:23:24: 23:30
                                         // mir::Constant
                                         // + span: ui/impl-trait/impl_fn_associativity.rs:23:24: 23:30
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[1])) }
        _49 = _76;                       // scope 5 at ui/impl-trait/impl_fn_associativity.rs:23:24: 23:30
        _48 = _49;                       // scope 5 at ui/impl-trait/impl_fn_associativity.rs:23:24: 23:30
        _47 = move _48 as &[&str] (Pointer(Unsize)); // scope 5 at ui/impl-trait/impl_fn_associativity.rs:23:24: 23:30
        _56 = &_38;                      // scope 5 at ui/impl-trait/impl_fn_associativity.rs:23:32: 23:33
        _55 = _56;                       // scope 5 at ui/impl-trait/impl_fn_associativity.rs:23:32: 23:33
        _54 = core::fmt::ArgumentV1::<'_>::new_debug::<impl Debug + Send>(move _55) -> bb13; // scope 5 at ui/impl-trait/impl_fn_associativity.rs:23:32: 23:33
                                         // mir::Constant
                                         // + span: ui/impl-trait/impl_fn_associativity.rs:23:32: 23:33
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b impl Debug + Send) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<impl Debug + Send>}, val: Value(<ZST>) }
    }

    bb13: {
        _53 = [move _54];                // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _52 = &_53;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _51 = _52;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _50 = move _51 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _46 = Arguments::<'_>::new_v1(move _47, move _50) -> bb14; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb14: {
        _45 = format(move _46) -> bb15;  // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb15: {
        _44 = move _45;                  // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _43 = &_44;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _75 = const _;                   // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[0])) }
        _57 = _75;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _42 = (move _43, move _57);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _58 = (_42.0: &std::string::String); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _59 = (_42.1: &&str);            // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _62 = _58;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _63 = _59;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _61 = <String as PartialEq<&str>>::eq(move _62, move _63) -> [return: bb16, unwind: bb21]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb16: {
        _60 = Not(move _61);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _60) -> [0: bb18, otherwise: bb17]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb17: {
        _64 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _66 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _68 = _58;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _67 = _68;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _70 = _59;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _69 = _70;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _71 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _65 = core::panicking::assert_failed::<String, &str>(move _66, move _67, move _69, move _71) -> bb21; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb18: {
        drop(_44) -> bb19;               // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb19: {
        _74 = &_38;                      // scope 5 at ui/impl-trait/impl_fn_associativity.rs:25:17: 25:19
        _73 = _74;                       // scope 5 at ui/impl-trait/impl_fn_associativity.rs:25:17: 25:19
        _72 = assert_send::<impl Debug + Send>(move _73) -> bb20; // scope 5 at ui/impl-trait/impl_fn_associativity.rs:25:5: 25:20
                                         // mir::Constant
                                         // + span: ui/impl-trait/impl_fn_associativity.rs:25:5: 25:16
                                         // + literal: Const { ty: for<'a> fn(&'a impl Debug + Send) {assert_send::<impl Debug + Send>}, val: Value(<ZST>) }
    }

    bb20: {
        return;                          // scope 0 at ui/impl-trait/impl_fn_associativity.rs:26:2: 26:2
    }

    bb21 (cleanup): {
        drop(_44) -> bb23;               // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb22 (cleanup): {
        drop(_10) -> bb23;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb23 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/impl_fn_associativity.rs:17:1: 26:2
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:23:36: 23:40

    bb0: {
        _1 = const "()";                 // scope 0 at ui/impl-trait/impl_fn_associativity.rs:23:36: 23:40
                                         // mir::Constant
                                         // + span: ui/impl-trait/impl_fn_associativity.rs:23:36: 23:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/impl-trait/impl_fn_associativity.rs:23:24: 23:30
    let mut _1: [&str; 1];               // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:23:24: 23:30

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/impl-trait/impl_fn_associativity.rs:23:24: 23:30
                                         // mir::Constant
                                         // + span: ui/impl-trait/impl_fn_associativity.rs:23:24: 23:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/impl_fn_associativity.rs:23:24: 23:30
        return;                          // scope 0 at ui/impl-trait/impl_fn_associativity.rs:23:24: 23:30
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:20:40: 20:44

    bb0: {
        _1 = const "()";                 // scope 0 at ui/impl-trait/impl_fn_associativity.rs:20:40: 20:44
                                         // mir::Constant
                                         // + span: ui/impl-trait/impl_fn_associativity.rs:20:40: 20:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/impl-trait/impl_fn_associativity.rs:20:24: 20:30
    let mut _1: [&str; 1];               // in scope 0 at ui/impl-trait/impl_fn_associativity.rs:20:24: 20:30

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/impl-trait/impl_fn_associativity.rs:20:24: 20:30
                                         // mir::Constant
                                         // + span: ui/impl-trait/impl_fn_associativity.rs:20:24: 20:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/impl_fn_associativity.rs:20:24: 20:30
        return;                          // scope 0 at ui/impl-trait/impl_fn_associativity.rs:20:24: 20:30
    }
}

fn assert_send(_1: &impl Send) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/impl_fn_associativity.rs:24:35: 24:35

    bb0: {
        return;                          // scope 0 at ui/impl-trait/impl_fn_associativity.rs:24:37: 24:37
    }
}
